<Issue id="40575" key="IS-1294" number="1294" project="10401" reporter="ignisvulpis" creator="ignisvulpis" type="10004" summary="zeroize all secrets" priority="3" status="10200" created="2019-06-13 17:07:53.0" updated="2019-08-08 13:28:47.0" votes="0" watches="2" workflowId="53524"> <description><! CDATA All secrets should be in memory as short as possible.     Some secrets are zeroized already but not all.  E.g.:  https://github.com/hyperledger/indy-sdk/blob/master/libindy/src/domain/wallet/mod.rs#L15       Also all secrets should be u8   because String and Vec are hard to track down.  From the zeroize documentation  https://docs.rs/zeroize/0.9.1/zeroize/   {quote}  However, be aware several operations in Rust can unintentionally leave copies of data in memory. This includes but is not limited to: * Moves and {{Copy}} * Heap reallocation when using {{Vec}} and {{String}} * Borrowers of a reference making copies of the data   {{Pin}}|https://doc.rust-lang.org/std/pin/struct.Pin.html  can be leveraged in conjunction with this crate to ensure data kept on the stack isn't moved.  The {{Zeroize}} impls for {{Vec}} and {{String}} zeroize the entire capacity of their backing buffer, but cannot guarantee copies of the data were not previously made by buffer reallocation. It's therefore important when attempting to zeroize such buffers to initialize them to the correct capacity, and take care to prevent subsequent reallocation.  The {{secrecy}} crate provides higher-level abstractions for eliminating usage patterns which can cause reallocations:   https://crates.io/crates/secrecy  h2.   {quote}  ></description> </Issue>
