<Issue id="29910" key="IS-673" number="673" project="10401" reporter="mdb" assignee="gudkov" creator="mdb" type="10004" summary="Getting Started Jupyter/IPython notebook unable to connect to test pool" priority="3" resolution="10200" status="10001" created="2018-05-03 04:29:35.0" updated="2019-03-29 20:57:29.0" resolutiondate="2019-03-29 20:57:29.0" votes="0" watches="5" workflowId="51348"> <description><! CDATA # clone indy-sdk, and navigate to doc/getting-started/ # run command `sudo docker-compose up` and open up corresponding jupyter notebook # run the code in jupyter. It prints:  {code:java} Getting started -> started Open Pool Ledger   _indy_loop_callback: Function returned error 307   --------------------------------------------------------------------------- Getting started -> started Open Pool Ledger  _indy_loop_callback: Function returned error 307  --------------------------------------------------------------------------- IndyError                                 Traceback (most recent call last) <ipython-input-2-058169a37fe4> in <module>() 785     loop = asyncio.new_event_loop() 786     asyncio.set_event_loop(loop) --> 787     loop.run_until_complete(run()) 788     time.sleep(1)  # FIXME waiting for libindy thread complete  /usr/lib/python3.5/asyncio/base_events.py in run_until_complete(self, future) 385             raise RuntimeError('Event loop stopped before Future completed.') 386  --> 387         return future.result() 388  389     def stop(self):  /usr/lib/python3.5/asyncio/futures.py in result(self) 272             self._tb_logger = None 273         if self._exception is not None: --> 274             raise self._exception 275         return self._result 276   /usr/lib/python3.5/asyncio/tasks.py in _step(***failed resolving arguments***) 239                 result = coro.send(None) 240             else: --> 241                 result = coro.throw(exc) 242         except StopIteration as exc: 243             self.set_result(exc.value)  <ipython-input-2-058169a37fe4> in run() 13     pool_config = json.dumps({"genesis_txn": '/home/indy/sandbox/pool_transactions_genesis'}) 14     await pool.create_pool_ledger_config(pool_name, pool_config) ---> 15     pool_handle = await pool.open_pool_ledger(pool_name, None) 16  17     print("==============================")  /usr/local/lib/python3.5/dist-packages/indy/pool.py in open_pool_ledger(config_name, config) 80                         c_config_name, 81                         c_config, ---> 82                         open_pool_ledger.cb) 83  84     logger.debug("open_pool_ledger: <<< res: %r", res)  /usr/lib/python3.5/asyncio/futures.py in __iter__(self) 359         if not self.done(): 360             self._blocking = True --> 361             yield self  # This tells Task to wait for completion. 362         assert self.done(), "yield from wasn't used with future" 363         return self.result()  # May raise too.  /usr/lib/python3.5/asyncio/tasks.py in _wakeup(self, future) 294     def _wakeup(self, future): 295         try: --> 296             future.result() 297         except Exception as exc: 298             # This may also be a cancellation.  /usr/lib/python3.5/asyncio/futures.py in result(self) 272             self._tb_logger = None 273         if self._exception is not None: --> 274             raise self._exception 275         return self._result 276   IndyError: ErrorCode.PoolLedgerTimeout   {code}  ></description> </Issue>
