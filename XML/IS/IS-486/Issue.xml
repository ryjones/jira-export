<Issue id="25718" key="IS-486" number="486" project="10401" reporter="swcurran" creator="swcurran" type="10006" summary="Provide a filtering mechanism on claims in wallet when preparing a Proof " priority="3" resolution="10000" status="10001" created="2017-12-13 18:47:34.0" updated="2018-09-27 22:04:38.0" resolutiondate="2018-07-26 11:52:34.0" votes="0" watches="6" workflowId="51164"> <description><! CDATA *Use Case*: As a Prover I want to filter the claims returned from my wallet for handling a proof request to those relevant to the proof request so it is easier to find the ones useful in responding to the Proof Request. h2. Background  The current behavior of anoncreds in libindy (Indy-SDK) is that when my wallet is queried for the claims relevant to a Proof Request, I get all the claims generated for the given Schema. In the Python wrapper the call is: * prover_get_claims_for_proof_req in anoncreds.py  It takes as parameters a wallet and a proof request, and returns for each item in the proof request all of the claims in the wallet created from the schema referenced for that item. h2. Our Specific Use Case  In our use case (TheOrgBook), TheOrgBook entity's wallet will be holding public claims for many subjects (business organizations) - literally millions derived from the same schema. As such, when the prover_get_claims_for_proof_req call is made, the returned value will be millions of claims per item in the Proof Request - inefficient at best and will trigger an error (out of memory) at worst. For our specific use case, the Verifier and Prover will know an ID value for the subject of interest and so the filter will be a name/value pair of the Claim Field and ID value. Only claims with Claim Field "OrgId" matching the passed in Value would be returned. h2. Considerations  I think the filter needs to be defined at the level of each item in the Proof Request, since each item can reference a different Schema. I see several ways this could be done: * The Verifier is aware of the need for filtering and sets the filter in the Proof Request. * The Prover is aware of the need for filtering and sets filters in the Proof Request after receipt. * The Prover is aware of the need for filtering and creates and passes in a parallel structure to the Proof Request that specifies the filtering requirements.  I like the idea that Verifier could specify the filter, so having the filtering as part of the Proof Request that ideally the Prover could also adjust prior to calling libindy makes the most sense to me.  The richness of the filtering is another open question. For our use case, a name/value pair is sufficient, but I'm sure others might have other more sophisticated filtering scenarios that make sense - e.g. Max(Issue Date) to get the most recent of a claim type.  Â   ></description> </Issue>
