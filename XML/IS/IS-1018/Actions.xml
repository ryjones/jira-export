<Action id="51413" issue="34229" author="viswa0269" type="comment" created="2018-10-01 06:48:09.0" updateauthor="viswa0269" updated="2018-10-01 06:48:09.0"> <body><! CDATA  ~khagesh.sharma  added a comment - 4 days ago  I ran some manual tests with logging enabled in Android devices with libvcx version “0.1.2097319+338ad01“ and libindy 1.6.6. Wallet file is 2KB in size. Here are my observations on this for now {quote}API calls to vcx starts with log message "09-26 16:44:21.347 6788 6968 I ReactNativeJS: 'CM::LOG:: before decryptWalletFile', 72860636.771673" "09-26 16:45:04.858 6788 6968 I ReactNativeJS: 'CM::LOG:: after decryptWalletFile', 72904144.520411" Decrypt wallet call takes around 44 seconds to return success  For getting data out of wallet with ~10 wallet get calls and then with vcx init, it takes ~1min 15 seconds 09-26 16:45:05.582 6788 6968 I ReactNativeJS: 'CM::LOG:: before hydrate', 72904872.317484 09-26 16:46:16.281 6788 6968 I ReactNativeJS: 'CM::LOG:: after hydrate', 72975570.740327 {quote} As per me, Logs are not showing full output, this was what used to set log environment variable {{Libcore.os.setenv("RUST_LOG", "TRACE", true);}} Also, this was tried as well {{Os.setenv("RUST_LOG", "TRACE", true);}} I tried setting TRACE to small letters as well, and results for logs were the same.  Walletkey: 060ede342ac93c8bab39d0225a57304b334de243f21976c1fd3a21a34699503489b59b508d5673340decdfc009be4ad5355e511b54e814e1bc532a2c64ddf402  Passphrase if need to test with ConnectMe: {quote}hunchback detached obstinate steep autism hunk coach crispness {quote} Attached wallet file “ConnectMe-2018-09-26-16-32-01.zip“, in bug and attached log file (“Logs_for_backup_with_3kb_zip_file_2018-09-26.txt“) in bug as well.   ConnectMe-2018-09-26-16-32-01.zip^!https://evernym.atlassian.net/images/icons/link_attachment_7.gif|width=7,height=7,align=absmiddle!^|https://evernym.atlassian.net/secure/attachment/16133/16133_ConnectMe-2018-09-26-16-32-01.zip   Logs_for_backup_with_3kb_zip_file_2018-09-26.txt^!https://evernym.atlassian.net/images/icons/link_attachment_7.gif|width=7,height=7,align=absmiddle!^|https://evernym.atlassian.net/secure/attachment/16134/16134_Logs_for_backup_with_3kb_zip_file_2018-09-26.txt   ></body> </Action>
<Action id="51414" issue="34229" author="viswa0269" type="comment" created="2018-10-01 07:06:25.0" updateauthor="viswa0269" updated="2018-10-01 07:06:25.0"> <body><! CDATA passphrase for attached file : thickness humility spearhead elective mutt broaden phantom headdress     The restore operation took around 57-58 seconds in MI 5 device (Platform : Android (7.1.2) equivalent, RAM : 2GB, CPU : Octa core 1.8 GHZ) and around 30-32 seconds in Oneplus 5T ( Platform : Android 8.1, RAM : 6GB) and 1:15 minute in Nokia 1 ( Platform : Android 8.0, RAM : 1GB) with latest connect.me builds pointing to libindy 1.6.6.  ></body> </Action>
<Action id="51987" issue="34229" author="gudkov" type="comment" created="2018-10-10 11:48:52.0" updateauthor="gudkov" updated="2018-10-10 11:48:52.0"> <body><! CDATA ``` rmarsh  12 days ago  @khagesh @sminaev I added a comment to CO-1810. I believe that this should be logged with libindy. The wallet api's are what take the longest time. Libvcx is no more than a wrapper for the wallet api's. My comment  in the ticket has more details.    a.v.krishnan  9 days ago  @rmarsh Thanks for getting the data.   a.v.krishnan  9 days ago  @sminaev @vyacheslav.gudkov @Darko Kulić Can you please look into this?   vyacheslav.gudkov  9 days ago  @a.v.krishnan Could you log a ticket to IS Jira?. And please clearly describe what you mean on “bad performance” and what you consider as “acceptable performance”.   a.v.krishnan  9 days ago  https://jira.hyperledger.org/browse/IS-1018 has been opened. @viswa Please review and provide additional details which we have.   vyacheslav.gudkov  9 days ago  What is the size of wallet? Could you attach exported file? And provide exact platform information.   vyacheslav.gudkov  9 days ago  Also 40 seconds look acceptable for such rarely operation.   a.v.krishnan  9 days ago  @viswa   khagesh  9 days ago  @vyacheslav.gudkov Please look at this comment in ticket CO-1810 https://evernym.atlassian.net/browse/CO-1810?focusedCommentId=28877&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-28877   khagesh  9 days ago  @viswa can you attach information from this comment to IS-1018   vyacheslav.gudkov  9 days ago  Export uses the most strong key derivation method.   khagesh  9 days ago  @tyler as per @vyacheslav.gudkov 40 seconds looks fine. Do you agree?   viswa  9 days ago  The details have been attached to IS-1018.  a.v.krishnan  9 days ago  The 40 secs is on some devices. On certain devices, the restore operation takes well above that, even with wallets which have minimal data. This would be a bad user experience.   sminaev  9 days ago  Most probably 40 sec is cost of KDF inside libindy (Argon2i Moderate) If we prefer performance instead security, app should use Argon2i Interactive (available from 1.6.2 libindy) KDF for import/export key derivation   sminaev  9 days ago  @a.v.krishnan @khagesh @wightman https://github.com/hyperledger/indy-sdk/blob/rc/doc/migration-guide-1.5.0-1.6.0.md#wallet-api-162 doc/migration-guide-1.5.0-1.6.0.md ```<!-- markdownlint-disable MD033 -->  # Libindy 1.5 to 1.6 migration Guide``` Show more… hyperledger/indy-sdkAdded by GitHub   tyler  9 days ago  I don’t think 40 seconds is acceptable.  sminaev  9 days ago  In this case App should NOT use KDF Argon2i Moderate @khagesh @rmarsh @wightman is vcx allow to control KDF options for wallet operations? (edited)   wightman  9 days ago  No.  Libvcx uses the default so we can switch to use the other.   vyacheslav.gudkov  9 days ago  @sminaev So we can move ticket to validate as the problem is on VCX side. @wightman It can be better to allow application to choise security level as it is defenetly need to be an application choise.    sminaev  9 days ago  @khagesh @wightman @rmarsh As I can see (may be outdated vision?), ConnectMe also use KDF on application level It seems redundant to have 2 KDF: one inside libindy and one in app   khagesh  9 days ago  Yes, connectme uses KDF on application level to define wallet_key. We can use lower security on either app side or wallet side if exposed   rmarsh  9 days ago  @khagesh libvcx can expose key derivation method for the provisioning step (which creates wallet) and the import api. By default and if no method is specified, libvcx will use ARGON2I_INT.   khagesh  9 days ago  @rmarsh I was referring to more that if vcx exposes a flag to use KDF in wallet or not  vyacheslav.gudkov  9 days ago  @khagesh why we need KDF in ConnectMe at all? We need to remve it from my point of view.   khagesh  9 days ago  because we need to generate a key to encrypt wallet and save that key somewhere secure  vyacheslav.gudkov  9 days ago  > default and if no method is specified, libvcx will use ARGON2I_INT.   It should be MOD   vyacheslav.gudkov  9 days ago  > because we need to generate a key to encrypt wallet and save that key somewhere secure   libindy provides it for you   khagesh  9 days ago  it saves key securely as well? and if we use that API, then would libindy not run KDF function again? Decision to control it has to be done by connectme right? So it does not matter if connectme uses it's own KDF or calls libindy's method to generate key   vyacheslav.gudkov  9 days ago  For ConnectMe you should always rely on crypto included with libindy. It is under constant review and maintenance.   khagesh  9 days ago  These are two separate things    vyacheslav.gudkov  9 days ago  For now you executes expensive KDF twice without any reason for this.   khagesh  9 days ago  We are talking about multiple things here   khagesh  9 days ago  Let us take these things one by one   khagesh  9 days ago  For wallet import: - ConnectMe takes a passphrase from user (something like "hello some words") and then combines it with a salt and generates a hash. Then this hash is passed to `import_wallet` API call. which is taking more than 40 seconds on decent Android hardware   khagesh  9 days ago  Now which API are you saying that we are doing twice?  Darko Kulić  9 days ago  I think he means, libindy will than use that hash and combine with salt to derive key. So essentially double salting and hashing). That api is meant to be used directly with passphrase. But if you already generated a good key, than I guess we should skip key deriving procedure inside libindy. (edited)   Darko Kulić  9 days ago  One note here, `import_wallet` does key derivation twice, one for wallet open key and second for key for decrypting export file. So if you also do deriving for both keys it is 4x deriving. (edited)   vyacheslav.gudkov  9 days ago  @khagesh libindy API consumes passphrase, combines it with salt and calls. You don't need it on applciation side at all. It is already provided by libindy.   vyacheslav.gudkov  9 days ago  As result you call KDF in Connect me, provide result to libindy and libindy calls KDF once more. The same is done for opening wallet that crashes performance.   khagesh  9 days ago  ok, then connectme can stop hashing. However, the time for running KDF that is defined in bug is after subtracting the time it takes in ConnectMe. It is only import_wallet API call that takes more than 40 seconds. Even if ConnectMe stops doing what we are doing, it will still take same time   vyacheslav.gudkov  9 days ago  You can reduce KDF level. It is supported by libindy already.   khagesh  9 days ago  What is the level of KDF recommended. @rmarsh Are you thinking of exposing same API that @vyacheslav.gudkov is talking about   rmarsh  9 days ago  @vyacheslav.gudkov That is what libvcx is going to change. we were not providing access to change level. We will now add ability to change (will be optional). By default, libvcx will use the faster level.   vyacheslav.gudkov  9 days ago  > By default, libvcx will use the faster level.   It have to use libindy defaults   rmarsh  9 days ago  @khagesh we will provide the ability to specify KDF level. Libvcx already uses the libindy default which is ARGON2I_MOD. The faster but less secure method is ARGON2I_INT or RAW. (edited)   khagesh  9 days ago  ok, any recommendation on what to use?   vyacheslav.gudkov  9 days ago  ARGON2I_INT   vyacheslav.gudkov  9 days ago  for your use case only   khagesh  9 days ago  ok ```  ></body> </Action>
<Action id="51988" issue="34229" author="gudkov" type="comment" created="2018-10-10 11:51:15.0" updateauthor="gudkov" updated="2018-10-10 11:51:15.0"> <body><! CDATA Result of investigation:  - ConnectMe uses it's own KDF function - VCX forces usage of ARGON2_MOD settings for KDF on libindy side  As result there are no problems on libindy side. We suggest the following:  - Expose KDF mode selection in VCX - Use ARGON2_INT mode for android devices in ConnectME - Avoid custom KDF in ConnectME in favor libindy-based solution   ></body> </Action>
