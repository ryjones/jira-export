<Issue id="31603" key="IS-801" number="801" project="10401" reporter="ignisvulpis" assignee="ignisvulpis" creator="ignisvulpis" type="10005" summary="Create a constant invalid wallet handle" priority="3" resolution="10000" status="10001" created="2018-07-03 13:28:49.0" updated="2019-08-02 08:23:11.0" resolutiondate="2019-08-02 08:23:11.0" votes="0" watches="1" workflowId="50650"> <description><! CDATA Currently the tests generate an invalid wallet handle by adding one to the current wallet handle {quote}let invalid_wallet_handle = wallet_handle + 1 {quote} e.g. at  https://github.com/hyperledger/indy-sdk/blob/master/libindy/tests/did.rs#L158   Some code even adds 100 to the current wallet handle. {quote}let invalid_wallet_handle = wallet_handle + 100; {quote}  https://github.com/hyperledger/indy-sdk/blob/master/libindy/tests/anoncreds.rs#L73      How about creating a constant INVALID_WALLET_HANDLE in api/mod.rs ? I would put it there because there is one other use for an invalid_handle that is when a method is supposed to return a handle but an error occurred. Then an invalid handle should be returned too. Currently i32 0 is returned in that error case.     This could be implemented in sequence utils by changing it so that it never return the invalid value. {quote}   const _INVALID_ID : i32 = 0;  impl SequenceUtils \{     pub fn get_next_id() -> i32 \{         let id = (IDS_COUNTER.fetch_add(1, Ordering::SeqCst) + 1) as i32;         if id == _INVALID_ID \{           (IDS_COUNTER.fetch_add(1, Ordering::SeqCst) + 1) as i32         } else \{           id         }     } }  pub const INVALID_ID : i32 = _INVALID_ID; {quote}    In api/mod.rs there would be definition of an invalid wallet handle.  pub const INVALID_WALLET_HANDLE : i32 = INVALID_ID;     Then we could replace all occurrences of wallet_handle + X by INVALID_WALLET_HANDLE.  Of course the same issue applies to other handles too like e.g. pool_handle  ></description> </Issue>
