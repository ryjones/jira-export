<Issue id="37654" key="IS-1180" number="1180" project="10401" reporter="sergey.minaev" assignee="sergey.minaev" creator="sergey.minaev" type="10002" summary="LibVCX and Aries connection protocol" priority="3" resolution="10000" status="10001" created="2019-02-13 14:33:28.0" updated="2019-11-11 09:56:54.0" resolutiondate="2019-11-11 09:56:54.0" votes="0" watches="1" workflowId="50756"> <description><! CDATA Current VCX flow  Inviter: 1) vcx_connection_create -> creates `Connection` state object associated with handle -> state.Initialized = 1 2) vcx_connection_connect -> prepares invite which already contains inviter pairwise keys -> move state.OfferSent = 2 -> share invite somehow with Invitee 3) vcx_connection_update_state -> wait until get `invite response` -> store recived pairwise data -> move state.VcxStateAccepted = 4 -> assume that connection is establised.  Invitee: 1) vcx_connection_create_with_invite -> creates `Connection` state object associated with handle -> store recived pairwise data -> state.VcxStateRequestReceived = 3 2) vcx_connection_connect -> send invite response -> move state.VcxStateAccepted = 4 -> assume that connection is establised.  Aries flow:  https://github.com/hyperledger/aries-rfcs/tree/master/features/0023-did-exchange   Inviter: 1) vcx_connection_create -> creates `Connection` state object associated with handle -> state.Initialized = 1 2) vcx_connection_connect -> prepares invite which contains minimal agent data necessary to reply on invite -> move state.Invited = 2 -> share invite somehow with Invitee 3) vcx_connection_update_state -> asks agency for messages by sending `GetMessages` command with status code `Pending`? -> (decrypt)  wait until get `connection_request` message -> move state.Requested = 3 -> prepare `connection_request` message containing paiwise connection data -> send `connection_request` -> move state.Responded = 4 -> send UpdateMessageStatus`  command to agenct with status code `Accepted`? -> (decrypt) wait until get `ack` -> stores recived pairwise data -> move state.Accepted = 5 -> send UpdateMessageStatus`  command to agenct with status code `Accepted`? -> assume that connection is establised.  Invitee: 1) vcx_connection_create_with_invite -> creates `Connection` state object associated with handle -> state.Invited = 2 2) vcx_connection_connect -> prepare `connection_request` message containing paiwise connection data -> send `connection_request` -> move to state.Requested = 3 3) vcx_connection_update_state -> asks agency for messages by sending `GetMessages` command with status code `Pending`? -> (decrypt)  until get `connection_response` -> stores recived pairwise data -> move state.Responded = 4 -> send `ack` -> move state.Accepted = 5  -> send UpdateMessageStatus`  command to agenct with status code `Accepted`? -> assume that connection is establised.  Already supported: - Message encryption/decryption:  https://github.com/hyperledger/aries-rfcs/tree/master/features/0019-encryption-envelope  - Message Id and Threading:  https://github.com/hyperledger/aries-rfcs/tree/master/concepts/0008-message-id-and-threading   Difference:  Difference: 1) The format of outgoing and incoming messages are absolutely different.  2) Vcx packs messages according to pairwise DIDDoc stored in the state and sends them to pairwise remote endoint directly. NOT to it's own Agency. 3) Agency collects incoming messages in encoded view and with received status. Vcx gets them -> decodes them -> processes them -> sends updaes messages status command to Agency. 4) The general idea and format of the Invite message differ: - In the current flow -> already contains all pairwise data need for other side connection establishment. - In the aries -> only minimal data of the user and associated agent necessary to reply to the invite.  5) Aries protocol implies more state - We can hide it under `vcx_connection_update_state` function for both Inviter and Invitee. There were some additional states before moving to `Accepted`. - Inviter should wait for `ack` message - Invitee should wait to `respond` message and send `ack`.  6) Support sending and handling of Error Messages as described here:  https://github.com/hyperledger/aries-rfcs/tree/master/features/0160-connection-protocol#errors   7) Minimal DidDoc handling.  Old description: Review these HIPEs:  https://github.com/hyperledger/indy-hipe/pull/54   Provide feedback on the HIPEs  Implement the changes possible in the current codebase.  Pass the connection protocol tests of the agent test suite.  Provide feedback on the open questions that aren't resolved in the HIPE PR.  Raise relevant issues for further improvements.  *Notes* * LibVCX currently expects that all connections are started by the issuer agent, not by the mobile agent. This could make it difficult to pass both directions of the connection test. It may be necessary to raise a separate issue for implementing the connections initiated by the mobile agent.  ></description> </Issue>
