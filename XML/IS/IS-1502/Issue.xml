<Issue id="44377" key="IS-1502" number="1502" project="10401" reporter="jrallen" creator="jrallen" type="10004" summary="result of get_txn does not verify, returned anyway" priority="3" resolution="10203" status="10001" created="2020-02-20 08:22:47.0" updated="2020-02-24 22:23:40.0" resolutiondate="2020-02-24 22:23:40.0" votes="1" watches="3" workflowId="58285" archived="N"> <description><! CDATA Using "ledger custom", I can send a get_txn to the BuildNet nodes for the first txn on the audit ledger:    {noformat} pool(builder):indy> ledger load-transaction file=/tmp/foo Transaction has been loaded: {"reqId":1582185610631377000,"identifier":"LibindyDid111111111111","operation":{"type":"3","ledgerId":3,"data":1,"dest":"Th7MpTaRZVRYnPiabds81Y"},"protocolVersion":2}   pool(builder):indy> ledger custom context Transaction stored into context: "{\"reqId\":1582185610631377000,\"identifier\":\"LibindyDid111111111111\",\"operation\":{\"type\":\"3\",\"ledgerId\":3,\"data\":1,\"dest\":\"Th7MpTaRZVRYnPiabds81Y\"},\"protocolVersion\":2}\n". Would you like to send it? (y/n) y Response:  {"op":"REPLY","result":{"reqId":1582185610631377000,"data":{"auditPath": "4CEFbbuaB3Ja4eXFV87zjvdG5Jzg5uGggDb7mZtCWPJn","2yLRnjspTYSc4SwuE4PUc9gmuLwRy3WWjBLNHtzNk9oz","4oyAYZJ8pe4CtjryotedsBchASJXiDt1hfe14BCiScf6","3S2bkSrX628yuD8Qj2iEaFSD7X9SrWL5NRdy7WeG9Drc","2KiTUVp4bfCqECpPxrMVr17MpdCoH5ZZT9xScGg8845a","EYCJAiG3pJiXqfvXHWvW62eZTuCeKSd9M1NS4KePqh4J","3cCXsxeqRbYuDvAqZfBmNVBAv9JVuXyvCsPBxfVA32wT","3m2i14owMpgerV9hyFpuqtByeadFaakwb6XdPwcsvgVC","51pc49aMq4p215oVLzbqDwT187h3E9bRabALgtUqA8jn","2ByBJcRmuST4UBagLzvW342emy5Gn3916wivytR36Dya","DaVWC21tD3ruDaC3UJPWuM7mkfbcwjy9kC8VsRskK3kG","DxmeAHoxt3uXb6CLqTYEm2HZ1BLgwdbY8mRa5XoHZh8Z","EaZ2ZZJPDqmvRqg2tw14W5WJJFcA4EprjneCXo2akUU8","DGhsWuTyhDmsqMj9aDZniZw6R6gPyp8ewEbfVaeSCQcQ","5BshzdDFSP7CBT1i6kmDeZGcrCZJ79zxfWcXYtcWmWar","2ok3hBdHoGdgZBZcjmTdf8dXVwGB5kByYUohvo4tVhhi","7DTCoCLsJFrmcUYmDBZjD6rjYr79acwxbeSmhr3uhUh3","ExRrrKVc6tUMba2GdhbDSAqFbj2K9UuytipfanZhk8YS" ,"txn":{"type":"2","protocolVersion":2,"data":{"ppSeqNo":1,"primaries": "FoundationBuilder","vnode1" ,"ledgerRoot":{"0":"2hFs9RoBzAN2D1keLD8SbVBUEYByf55YjxUHcxDwu4Nf","1":"EN3dyDFRuV5Du2DTja1e7xqZy12XLisErLefcaP4GzHf"},"ver":"1","viewNo":0,"stateRoot":{"0":"2VNAcq8b6Bg7ePF4FBRUe6duUBytP35eYduGzSyMwFuz","1":"4RbC2qVepj1kn2jdmvemxtwpYKfrsA9XowGGAUs7m79Y"},"ledgerSize":{"0":4,"1":12,"2":0,"1001":0}},"metadata":{}},"txnMetadata":{"seqNo":1,"txnTime":1568291557},"ver":"1","ledgerSize":184644,"rootHash":"5ftrXMypHRiCPFExMedWusVWrGqvCxU3Ev4vrPbQA6hb","reqSignature":{}},"seqNo":1,"type":"3","identifier":"LibindyDid111111111111"}}   {noformat} All of the nodes return a result that cannot be verified by Libindy (see attached log). Eventually a response from one of the nodes is returned without an error and is printed by indy-cli.  (I first saw this same behaviour with indy-vdr, and then managed to reproduce it also with indy-sdk)  Actually, I just noticed that not even the final verification succeeded: {noformat} icsil1noteb238:indy-sdk jallen$ grep "Try to verify" log/indy_cli.log  2020-02-20T09:09:19.382898+01:00  indy::services::pool::request_handler  DEBUG indy::services::pool::request_handler:TransactionHandler::process_reply: Try to verify proof and signature >> 2020-02-20T09:09:19.766357+01:00  indy::services::pool::request_handler  DEBUG indy::services::pool::request_handler:TransactionHandler::process_reply: Try to verify proof and signature << true 2020-02-20T09:10:54.964611+01:00  indy::services::pool::request_handler  DEBUG indy::services::pool::request_handler:TransactionHandler::process_reply: Try to verify proof and signature >> 2020-02-20T09:10:54.966919+01:00  indy::services::pool::request_handler  DEBUG indy::services::pool::request_handler:TransactionHandler::process_reply: Try to verify proof and signature << false 2020-02-20T09:10:55.426202+01:00  indy::services::pool::request_handler  DEBUG indy::services::pool::request_handler:TransactionHandler::process_reply: Try to verify proof and signature >> 2020-02-20T09:10:55.428421+01:00  indy::services::pool::request_handler  DEBUG indy::services::pool::request_handler:TransactionHandler::process_reply: Try to verify proof and signature << false 2020-02-20T09:11:04.569612+01:00  indy::services::pool::request_handler  DEBUG indy::services::pool::request_handler:TransactionHandler::process_reply: Try to verify proof and signature >> 2020-02-20T09:11:04.572226+01:00  indy::services::pool::request_handler  DEBUG indy::services::pool::request_handler:TransactionHandler::process_reply: Try to verify proof and signature << false 2020-02-20T09:11:05.191960+01:00  indy::services::pool::request_handler  DEBUG indy::services::pool::request_handler:TransactionHandler::process_reply: Try to verify proof and signature >> 2020-02-20T09:11:05.194957+01:00  indy::services::pool::request_handler  DEBUG indy::services::pool::request_handler:TransactionHandler::process_reply: Try to verify proof and signature << false 2020-02-20T09:11:08.617332+01:00  indy::services::pool::request_handler  DEBUG indy::services::pool::request_handler:TransactionHandler::process_reply: Try to verify proof and signature >> 2020-02-20T09:11:08.620700+01:00  indy::services::pool::request_handler  DEBUG indy::services::pool::request_handler:TransactionHandler::process_reply: Try to verify proof and signature << false 2020-02-20T09:11:14.251522+01:00  indy::services::pool::request_handler  DEBUG indy::services::pool::request_handler:TransactionHandler::process_reply: Try to verify proof and signature >> 2020-02-20T09:11:14.254399+01:00  indy::services::pool::request_handler  DEBUG indy::services::pool::request_handler:TransactionHandler::process_reply: Try to verify proof and signature << false 2020-02-20T09:11:17.567716+01:00  indy::services::pool::request_handler  DEBUG indy::services::pool::request_handler:TransactionHandler::process_reply: Try to verify proof and signature >> 2020-02-20T09:11:17.570439+01:00  indy::services::pool::request_handler  DEBUG indy::services::pool::request_handler:TransactionHandler::process_reply: Try to verify proof and signature << false 2020-02-20T09:11:18.213430+01:00  indy::services::pool::request_handler  DEBUG indy::services::pool::request_handler:TransactionHandler::process_reply: Try to verify proof and signature >> 2020-02-20T09:11:18.216414+01:00  indy::services::pool::request_handler  DEBUG indy::services::pool::request_handler:TransactionHandler::process_reply: Try to verify proof and signature << false 2020-02-20T09:11:18.584214+01:00  indy::services::pool::request_handler  DEBUG indy::services::pool::request_handler:TransactionHandler::process_reply: Try to verify proof and signature >> 2020-02-20T09:11:18.586148+01:00  indy::services::pool::request_handler  DEBUG indy::services::pool::request_handler:TransactionHandler::process_reply: Try to verify proof and signature << false {noformat}  So this is a bit more serious, that Libindy seems to be returning data it knows did not verify correctly without an error message. (Updated the title to reflect this.)  ></description> </Issue>
