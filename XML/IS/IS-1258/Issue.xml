<Issue id="39733" key="IS-1258" number="1258" project="10401" reporter="sklump" creator="sklump" type="10005" summary="Configurable Credential Attribute Tagging Policy for Prover" priority="3" resolution="10000" status="10001" created="2019-05-09 11:39:46.0" updated="2019-06-24 15:31:15.0" resolutiondate="2019-06-24 15:31:15.0" votes="0" watches="2" timeoriginalestimate="144000" timeestimate="144000" workflowId="52619"> <description><! CDATA *OBJECTIVE* Configure what tags to build on credential storage in prover wallet, tailoring data profile in storage to application search needs.  *APPROACH* New named object, two new anoncreds::prover API calls, adjustments to credential storage.  _+New domain::anoncreds::CredentialAttrTagPolicy named object+_ * set of attribute names marked for tagging * method to canonicalize and check input attribute name against set inclusion, returning true or false * serialization/deserialization implementations to marshall to and from JSON list or vector of strings * associated canonicalization function, mimics commands/schema helper common_attr_view()  _+New API calls for anoncreds: prover set (and prover get) credential attribute tagging policy+_ * set policy: - specify: > cred def id of for cred def of interest > null policy to clear back to default (tag-all), otherwise JSON list of attributes of interest > retroactive boolean flag - implement: > deserialize CredentialAttrTagPolicy (or None) for input specification > write/delete wallet record for CredentialAttrTagPolicy > if retroactive, find existing credentials on cred def id and rewrite their tags to comply * get policy: - by credential definition identifier - return JSON list of attributes of interest, or JSON null for default policy (tag-all)  _+Adjustment to Credential Storage Service Implementation+_ * Instead of building attr::_a_::marker and attr::_a_:: value for each attribute _a_ in credential to store, fetch credential attribute tagging policy (by cred def id) first and abstain from building such for those attributes not included in such policy if it exists.  *IMPLEMENTATION* See https://github.com/hyperledger/indy-sdk/pull/1661.  *PERFORMANCE ANXIETY* The retroactive policy reset could be slow since it must rebuild tags for arbitrarily many credentials. However, on a 32 attribute cred def for 1000 credentials, on my Ubuntu VM, I get about 80 seconds to store all the credentials in the first place and 7.7 seconds to tag them retroactively on 2 attributes each.  Conclusion: performance is acceptable.  ></description> </Issue>
