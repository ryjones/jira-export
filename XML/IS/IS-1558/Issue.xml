<Issue id="45719" key="IS-1558" number="1558" project="10401" reporter="ryanmarsh" creator="ryanmarsh" type="10004" summary="Proof Presentation validation fails with empty non_revoc_interval" priority="3" resolution="10002" status="10001" created="2020-07-29 15:54:43.0" updated="2020-07-29 21:31:03.0" resolutiondate="2020-07-29 21:30:59.0" votes="0" watches="2" workflowId="59620" archived="N"> <description><! CDATA When indy_verifier_verify_proof is called with an empty json string ("{}") as the revocation interval, the validation fails because it checks the interval and can't find it. I would expect verification to skip the interval if the value is null or {}.      Here is a test to show the failure I see (put it in *libindy/src/services/anoncreds/verifier.rs*):    {code:java} # test  fn test_empty_non_revoc_interval() { let req: ProofRequestPayload = serde_json::from_str(r#"{"nonce":"350088117388834113550940","name":"","version":"1.0","requested_attributes":{"c":{"name":"c","self_attest_allowed":false}},"requested_predicates":{},"non_revoked":{},"ver":"1.0"}"#).unwrap(); let proof: Proof = serde_json::from_str(r#"{"proof":{"proofs": {"primary_proof":{"eq_proof":{"revealed_attrs":{"c":"21027550693477535543327579570081618952892630736730429980018215117041635618758"},"a_prime":"50388520465356767417155078132030364828017082181937472057908950883185050795637638521491388022180158096759232455736729261978731637595596549484937975342410151565026856449579187408834016491818336678384318635829996844370239148877256608389597012804517879711463995894364211890879328570767112882081259647215261169380817621943175013397600182171422667024541604800127259870349821935302913920399265872658916941791487376754251806405022052841456989599520941866630864402059993498429340012748885964230763777867696791164977533357096580962063739663676920288158021876789561157406722334879653981433905074563263686820665755735941850393511","e":"3718252388493220772864850593185990486135588489586438191852057691994557460042151039739352906654425489071229420043584597583873303387892223","v":"104640528163077132809792479674713277838244565048693549308340760186318981362337779355633304005425234273822804109722544797277985695549991316279763495266300729281061157372981253110523240081016421445239006840238133538749388746702160521905800492207456762246574543682763121153299505947499924773003208950905019356780627958242742692116587293954021084445817233197192748937381218872493995710613051335755003619837718060183564330338304363793977418067994819375112798429676406003204697931185427433641122048516176160127110000771649047444572825666070065159533366557725976635979829699967134168074789619670201114793084666975282740956550669322787762871238486492698983311622912661482195047592809308438881684271009272299491341075496882870805853135019732764728282598384361962265009133066725402781677996257080500889204479458351603004601880071221922297408377583195187139021070874000837495039932763863398129908581530563333100942188144602123787677","m":{"a":"4102297283094307290070770953943747038183410804299116114299791883760019597647346702211117588763089727351195631823886410052637465380736732353976328309032323428299014078787101226568","b":"11997686085288782554771339082926619203863597953919130241562055492237714615117568559401642079900460111445298407658208048722258427615792706143750355705939032320754588549379013958815","master_secret":"7403368031144039226544488947490391020647450887020280303878603763599271583741034875603370919905207018690229154315040064338060768194187934216018446695234924266613830660197632191538"},"m2":"2760732335130882579050846046090122927882682127404914937843020411814103100916300452069994839423297306091507968691632756648481949369278627609217256945492808886926235206847576613769"},"ge_proofs":  },"non_revoc_proof":null} ,"aggregated_proof":{"c_hash":"84983350747251740997636647643875390715825568809832255503441787009241108371023","c_list":  1,143,39,106,130,242,130,124,217,142,142,7,16,79,228,0,94,107,83,200,99,25,75,124,93,96,250,10,165,162,53,107,29,157,224,211,100,100,228,37,105,64,202,38,212,234,48,143,210,67,85,42,73,210,122,16,21,240,75,197,79,216,72,160,19,114,114,134,36,5,237,230,81,108,7,250,174,166,53,161,84,47,243,37,168,123,53,197,244,147,218,18,28,164,112,165,2,193,72,159,159,229,199,94,201,123,30,171,108,95,242,214,213,107,13,75,165,199,145,194,76,62,246,251,244,139,101,233,49,195,130,248,197,210,49,252,201,123,61,164,200,90,37,166,25,83,91,19,239,85,237,45,82,175,0,130,132,93,62,59,1,34,140,127,28,64,45,66,154,22,122,94,181,107,98,79,156,228,72,20,69,132,251,250,2,220,225,169,83,83,253,22,152,203,244,113,102,91,227,12,46,32,142,209,191,211,85,183,251,80,105,247,49,130,136,140,155,22,154,163,156,110,189,204,3,186,231,155,21,26,114,212,224,229,150,44,196,248,199,189,166,221,141,113,43,40,98,147,196,147,5,0,199,55,64,235,167  }},"requested_proof":{"revealed_attrs":{"c":{"sub_proof_index":0,"raw":"c","encoded":"21027550693477535543327579570081618952892630736730429980018215117041635618758"}},"self_attested_attrs":{},"unrevealed_attrs":{},"predicates":{}},"identifiers": {"schema_id":"WpoQirzsNJK2MUZh3NtbF2:2:r-test6:0.0.6","cred_def_id":"WpoQirzsNJK2MUZh3NtbF2:3:CL:13054:latest","rev_reg_id":null,"timestamp":null} }"#).unwrap(); let schema: HashMap<SchemaId, SchemaV1> = serde_json::from_str(r#"{"WpoQirzsNJK2MUZh3NtbF2:2:r-test6:0.0.6": {"id":"WpoQirzsNJK2MUZh3NtbF2:2:r-test6:0.0.6","name":"r-test6","version":"0.0.6","attrNames": "c","b","a" ,"seqNo":13054,"ver":"1.0"} }"#).unwrap(); let creds: HashMap<CredentialDefinitionId, CredentialDefinitionV1> = serde_json::from_str(r#"{ "WpoQirzsNJK2MUZh3NtbF2:3:CL:13054:latest": {"id":"WpoQirzsNJK2MUZh3NtbF2:3:CL:13054:latest","type":"CL","schemaId":"13054","tag":"latest","ver":"1.0","value":{"primary":{"s":"96281451931856950071247732301145128947395610493013790310955990632633196885524793845334092537818922462264233022335361183133303852252721080285326870125311415851097177488432178086983471524491310364473905754976792959714458623277090581761856030582322555208165314932987606825708270123900987672643134498105957346390925811566016857855277893601189551576344965811905485514252943025045995878374350226086530516844678113271693623547902253153800561152360320953531905567988013083052780868065774395923270627658499493102580743356089788769148151557400535173723073517353217325789939958934630352069511258016506202345767783345525080514474","rctxt":"96998451572271599792505515998905404313822535725743659333009620972024474419165225006658994968652665129982368129141430714029514712803791540302463754426686263475178479390493338285067758304533650260622668304644944662586345358384128327350458464071515504566507909265959846213397477648229035068852561101255935668747499429993060499833043824211261563456704613189698846135769826705989673705929539984289006474553594930706936326055032186119654958987858469763606042213078013130548232666993520473193450697524811754936832672642999087232999664717919255976658569052776471889054382630343081737911995800323308162658118020148187375859346","n":"113909196105256369298794250761803707037872974702162648916132271040126036520095478143959818528541457730199089909158389355847613025323021961254681263253018494381662582562386791440595165294379567145823122114055133246595774750219255157013053637028070800432740286027834262091355949659551244384233091515975531556158112365859372417503487250115030463589910881694542256734795571839713753795964719045885959330186901174862010728157608340363095920921222819146956958351183432894842099559181519425881567672609297067126008424449576376885625476556442018005482629148358509413392075152511721848631280738309309273110686347955436921141757","r":{"a":"110128981229894217289000041492471646607231091138474619889388522059639243576977359609128317744176147865322251874732765979876056559192698976435215588402978276349860053066456685802166597798564986869248643522975662590517463296807944008918364822611990860724233744628049818938587483522671136037026664206423191661796143287688851027306901871002493315458325648804809247015099876745919397691362034719825864663730316054871526119042379859903809496822148282667019008992890737310457009323390133530255483685575574384062379768728734890648785178109304235097836968585258825571207614703459189373282519835379577958865751055495452861262377","master_secret":"106210598528633765713867548127123931325839222644113518212169901407494857424926435983985511935195880774339068703651163413794635973372563730936558585629753445688835127043954705644990189643521094565675572094879712761794052268208353323672847703575087498806334277298785542119933885848841906239832071565222367429603886205681745154729634647870198651779369569163613206282806992627703520325290910425080530088629190524240264697380132804569005664543143336614708036312973679572122060258024361868915466817853822901184163639414792187579917996881662528096890770892985619580735441167183082237286207513931691214829540248663398414463093","c":"90884019650334942009676982498450127388588482189207541064219041184166116776398138572870544845682439237083052793877086793078204513573121904761365373246291878444483913042824450193890151529157446723610487668049209816394449193515809338690982666650214928414865522410883305856438137961463195613461552315441241462285268915919255573022049026932180805578256042928592633468606981240952285958657029154733433737948884509351613422628434650291829099433872466002096126279765016230751650409357221364497623030797134194317844080450753610659950999775313853360404266023181884700329393766428537041381211155080204899325330817022052038122520","b":"25289224731620891580745406001804170586383137910854270930230203111536358416558534310576699292130038318363697156167208450553087573274410767259244474717715942957096724588072671951751311699376714345997045259622206358703957664488885354464994708867328975356632764943968211064353967776351128358106331951860772501655778558010162368989946304061517995631431740306419762877205897691736164562835459313211044176809993807366088031862883674460100427138170570261806168011698838759587962016689773768947556607754099087791412406559221306023952805465006012539382740099965546259533910152697046157505609036464837442617964329051465643410334"},"z":"13448999734459810526894396672497725000152968672330433365643675850410852172788604372585908366969611286220921877457227714468366054783073419906923567316811894875571027354406236017467282592343920751798636633194686898311360231186164162309744544125989143104238467399330171200792094494850155591502329487845456246958013783767154602668852911245845750519409966502420160094016840289569846303357769716921617338174843486004045930151446328223906479952073328637045335041738711974320925607713462228774461301805619085790123472704544756026055470449420564951716493811825626469751081429719777219768204597043609857510514835736157982993912"}}} }"#).unwrap(); let rev_reg_defs: HashMap<RevocationRegistryId, RevocationRegistryDefinitionV1> = HashMap::new(); let rev_regs: HashMap<RevocationRegistryId, HashMap<u64, RevocationRegistryV1>> = HashMap::new(); let rc = Verifier::new().verify( &proof, &req, &schema, &creds, &rev_reg_defs, &rev_regs ).unwrap();  }{code}    Here is the proposed fix (*libindy/src/services/anoncreds/helpers.rs*):  {code:java} pub fn get_non_revoc_interval(global_interval: &Option<NonRevocedInterval>, local_interval: &Option<NonRevocedInterval>) -> Option<NonRevocedInterval> { trace!("get_non_revoc_interval >>> global_interval: {:?}, local_interval: {:?}", global_interval, local_interval);  let interval = local_interval.clone().or_else(|| global_interval.clone().or(None));  trace!("get_non_revoc_interval <<< interval: {:?}", interval);  match interval { Some(x) => if x.to.is_none() && x.from.is_none() { None } else { Some(x) }, None => None } } {code}  ></description> </Issue>
