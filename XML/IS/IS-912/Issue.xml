<Issue id="33248" key="IS-912" number="912" project="10401" reporter="gudkov" assignee="sergey.minaev" creator="gudkov" type="10006" summary="UX: Early static validation" priority="3" resolution="10000" status="10001" created="2018-08-27 13:49:27.0" updated="2019-08-30 13:40:30.0" resolutiondate="2019-08-29 10:45:17.0" votes="0" watches="3" workflowId="50684"> <description><! CDATA For the current moment libindy performs validation of structured params inside of command loop and it sometimes hard for developers to find the cause as requires complex logs analysis. In my vision we can call STATIC-only validation in API layer, but this validation must be defined in domain layer.  I suggest the following:  * We can can define trait Validatable with one method validate() -> Result<(), Error> in utils/validation * For each domain struct that requires static validation we can implement this trait * We can define additional macro check_usefull_valid_json! that will also call validate method on domain struct  One addition that i suggest is to return position error instead of CommonInvalidStructure here, but we need consensus here as it is breaking change, but the change is minor and affect only incorrectly written apps that can provide invalid structured jsons.  ></description> </Issue>
