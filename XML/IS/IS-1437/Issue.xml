<Issue id="43558" key="IS-1437" number="1437" project="10401" reporter="ckochenower" creator="ckochenower" type="10004" summary="InvalidClientTaaAcceptanceError errors/exceptions from the ledger must include a reason_code or similar" priority="2" status="10200" created="2019-12-05 00:18:59.0" updated="2019-12-06 18:46:32.0" votes="1" watches="1" workflowId="57305"> <description><! CDATA This is likely a bug in all wrappers.   For the sake of illustration, the Java wrapper will be used to describe steps to reproduce observed behavior.  Steps to reproduce:  1. Setup a ledger configured with a TAA 2. Using the Java wrapper, try writing something (DID, attribute, NYM) to the ledger without "appending" the TAA (version + text OR digest) to the request. The expected behavior will be to experience some sort of error (failure to write to the ledger). 3. Futures are used to make asynchronous calls to LibIndy.api.*. Note that the futures complete w/o error/exception. The status code is 0 and status is Success, but the response (msg) from the ledger looks like the following:  {code} Right(Map(identifier -> Th7MpTaRZVRYnPiabds81Y, op -> REJECT, reason -> client request invalid: InvalidClientTaaAcceptanceError('Txn Author Agreement acceptance is required for ledger with id 1',), reqId -> -654241882)) {code}  Note that "op" is "REJECT" and "reason" is "client request invalid: InvalidClientTaaAcceptanceError('Txn Author Agreement acceptance is required for ledger with id 1',)"  Clearly the write was "REJECT"-ed, but  with a status code of 0 and status of Success?  There are a large number of error code to exception mappings  found in each wrapper:  dotnet > indy-sdk-dotnet > ErrorCode.cs ios > libindy-pod > indy > Wrapper > IndyErrors.h java > src > main > java > org > hyperledger > indy > sdk > ErrorCode.java nodejs > src > IndyError.js python > indy > error.py  Should there be specific codes/statuses for TAA errors/exceptions?  *Observed behavior when using Java wrapper by Evernym in Verity (CAS/EAS/VAS):*  A NYM is written to the ledger by calling buildNymRequest followed by appendTxnAuthorAgreementAcceptanceToRequest and/or signRequest, if and only if needed, and finally submitRequest to write the NYM/DID to the ledger as part of Verity Server's setup flow. submitRequest calls LibIndy.api.indy_submit_request immediately followed by checkResult. checkResult appears to detect/handle failures, map the error to an IndyException and call future.completeExceptionally, which returns a new CompletableFuture containing the exception. When the TAA is required, but not "appended" to the request, wouldn't we expect submitRequest to fail with an exception (future.completeExceptionally)? When intentionally writing to a ledger with TAA enabled using a request that does NOT have the TAA "appended", we are getting the following upon completion of the CompletableFuture. "Right" indicates that the future completed "normally" instead of "exceptionally" (with an exception).  {code} Right(Map(identifier -> Th7MpTaRZVRYnPiabds81Y, op -> REJECT, reason -> client request invalid: InvalidClientTaaAcceptanceError('Txn Author Agreement acceptance is required for ledger with id 1',), reqId -> -654241882)) {code}  We would have expected submitRequest to fail with an exception.  "InvalidClientTaaAcceptanceError", included in the "reason" text, is found nowhere in the indy-sdk Java Wrapper code. It is, however, found in indy-plenum:  https://github.com/hyperledger/indy-plenum/blob/master/plenum/common/exceptions.py#L241  Perhaps LibIndy.api.indy_submit_request needs to return an SDK error code that can be used to complete the future "exceptionally" instead of "normally"?  Here is a couple of screenshots from a debug session that shows the call stack, the request (intentionally does NOT contain the TAA), and the result after calling submitRequest. Note that the result is "Success" (err = 0), even though the attempted write to the ledger is rejected ("op = REJECT")  !submitRequestWithoutTAAToLedgerWithTAA.png|thumbnail! !submitRequestWithoutTAAToLedgerWithTAACheckResults.png|thumbnail!   This illustrates that the future "Completed normally" instead of "exceptionally". !submitRequestWithoutTAAToLedgerWithTAAAfterCheckResults.png|thumbnail!     ></description> </Issue>
