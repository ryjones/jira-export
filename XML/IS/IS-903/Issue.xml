<Issue id="33079" key="IS-903" number="903" project="10401" reporter="ckochenower" creator="ckochenower" type="10005" summary="Expose (did, verkey) generation from a seed at the SDK layer" priority="3" status="10405" created="2018-08-21 20:05:42.0" updated="2019-03-29 21:04:24.0" votes="0" watches="1" workflowId="50678"> <description><! CDATA indy.did.create_and_store_my_did both creates a (did, verkey) pair from an optional seed AND adds the did and verkey to a given wallet (handle).  The python wrapper...  https://github.com/hyperledger/indy-sdk/blob/f8de2c1e23e62670373d9fcea8695786c7422db9/wrappers/python/indy/did.py#L10  ...calls the API...  https://github.com/hyperledger/indy-sdk/blob/f8de2c1e23e62670373d9fcea8695786c7422db9/libindy/src/api/did.rs#L48  ...which in turn calls the "Command" to create and store a did...  https://github.com/hyperledger/indy-sdk/blob/f8de2c1e23e62670373d9fcea8695786c7422db9/libindy/src/commands/did.rs#L193  This command creates a did, verkey pair from an optional seed using a "crypto_service":  https://github.com/hyperledger/indy-sdk/blob/f8de2c1e23e62670373d9fcea8695786c7422db9/libindy/src/commands/did.rs#L204  The command only adds the did, verkey pair to the given wallet if and only if it does not already exist.  https://github.com/hyperledger/indy-sdk/blob/f8de2c1e23e62670373d9fcea8695786c7422db9/libindy/src/commands/did.rs#L204  There are use cases where all the SDK caller has is a seed. The caller does not know the did or the verkey, but needs the did and verkey to complete an operation.  It would be useful if the crypto_service.create_my_did functionality could be exposed at the SDK wrapper level so uses of the SDK can convert a seed to a did, verkey pair if the pair exists in a wallet or not.  ></description> </Issue>
