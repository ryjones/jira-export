<Issue id="36598" key="IS-1131" number="1131" project="10401" reporter="sergey.minaev" assignee="mikelodder" creator="sergey.minaev" type="10006" summary="Support new predicates for anoncreds (GT, LE, LT) in libindy as new version of proof exchange" priority="3" resolution="10000" status="10001" created="2019-01-09 11:28:07.0" updated="2019-10-11 12:08:15.0" resolutiondate="2019-10-11 12:07:33.0" votes="0" watches="2" workflowId="50736"> <description><! CDATA h1. Goal Add support of new set of predicates and provide backward-compatibility. Initially IndyCrypto and IndySDK supported only GE (greater or equal) predicate type. The math allows to support others: GT, LE, LT.  h1. Affected components https://github.com/hyperledger/indy-sdk https://github.com/hyperledger/indy-crypto (now is being moved to https://github.com/hyperledger/ursa)  h1. Current state IndyCrypto master has implementation of new predicates https://github.com/hyperledger/indy-crypto/pull/132  Unfortunately it’s contains breaking-change of data structures in API and this fact was not detected before merge to master. But this code isn’t released to RC / stable.  There is WIP PR for IndySDK https://github.com/hyperledger/indy-sdk/pull/1283 . For this PR the backward incompatibility has been detected and the PR is in hold now. h2. Affected API (current breaking-change) pub struct Proof { proofs: Vec<SubProof>, aggregated_proof: AggregatedProof, } pub struct SubProof { primary_proof: PrimaryProof, non_revoc_proof: Option<NonRevocProof> } pub struct PrimaryProof { eq_proof: PrimaryEqualProof, ge_proofs: Vec<PrimaryPredicateGEProof> now changed (backward incompatible) to ne_proofs: Vec<PrimaryPredicateInequalityProof> }  h1. Versioning approach From long-term perspective it seems like there should be version starting from ProofRequest. Proposed behavior: Verifier specify version in proof request If verifier would like to use new predicates, new version >0 (1 for the moment) must be specified  If verifier would like to be compatible with old version of software, the 0 version must be specified and new predicates must not be used Proover’s LibIndy receive proof request, fetch version (no version == ver. 0) and use new builder’s method to pass this version to IndyCrypto (see next step) If LibIndy detect unknown (newer) version - new error code (like unsupported proof exchange protocol version) should be returned. IndyCrypto should provide the new method ProofRequestBuilder::set_version(int).  This call should be allowed only for fresh builder as first call after creation.  ProofRequestBuilder::add_predicate  should reject new predicates for 0 ver. IndyCrypto must serialize: 0 version: ge_proofs  1+ versions: predicates_proofs ProofBuilder should verify consistency of versions in sub-proofs and serialize aggregated version. New IndyCrypto should be able to deserialize both version of serialized Proof. Old IndyCrypto will be able to deserialize 0 version and return InvalidStructure error for new format due to field renaming. h2. LibIndy API changes struct Proof { proof: IndyCrypto::Proof { …, ver: str, … }, requested_proof: RequestedProof, // mapping of math to proof request identifiers: Vec<Identifier>, // metadata about cred_defs, schemas, revocation registries ver: str }  Struct ProofRequest in LibIndy already has field “version”.  h2. Indy Crypto API changes  IndyCrypto::Proof becomes an enum:  enum Proof { 	ProofV0(ProofV0), 	ProofV1(ProofV1) }  ProofV0 is an old structure that were used before the introduction of new predicates and ProofV1 is a new one.   ></description> </Issue>
