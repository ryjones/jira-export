<Issue id="31078" key="IS-784" number="784" project="10401" reporter="smithbk" creator="smithbk" type="10004" summary="anoncreds.prover_store_credential fails with indy.error.IndyError: ErrorCode.CommonInvalidParam8" priority="2" resolution="10000" status="10001" created="2018-06-14 17:42:40.0" updated="2018-06-20 15:57:29.0" resolutiondate="2018-06-20 15:57:29.0" votes="0" watches="2" workflowId="51428"> <description><! CDATA I am using the stable branch of indy-sdk.  Specifically, my dockerfile has the following:  {code} RUN pip3 install -U \ pip \ setuptools \ python3-indy==1.3.1-dev-469  RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 68DB5E88 \ && add-apt-repository "deb https://repo.sovrin.org/sdk/deb xenial stable" \ && apt-get update \ && apt-get install -y \ libindy {code}  Here is my code trying to store the credential:  {code} async def store_credential(self, req_json, req_metadata_json, cred_json, cred_def, issuer_name): logger.debug("Storing credential issued by {}: {}, {}, {}, {}".format( issuer_name, req_json, req_metadata_json, cred_json, cred_def)) await anoncreds.prover_store_credential( self.wallet, None, req_json, req_metadata_json, cred_json, cred_def, None) {code}  And here is the full stack trace with some appropriate logging:  {code} DEBUG:root:Storing credential issued by faber: {"prover_did":"7RiBxX7sVbBVXmh8ZbbwR8","cred_def_id":"F1EV3bTy3p8SZwFmqtwJJm:3:CL:31","blinded_ms":{"u":"71667514445095340043613242882435996987056251222635843983415114789577194120114152683423100696715470469283124078031129014613444044286202051920809596167949610306936660652723108519157891694463032712783511637313587268575222398121323719265869267890065152194323255084101744307724721831585756725438239378671801019366520555577684411834256202595476488142867592854221597808195472489975719827459862000289957394348728042566782276796338393043166931241546966247072032040296314248641763085867807585858250528263502500881030593520064775877450912752817754000492164983638315184737075914470617217971981510404748701621437911173183021994942","ur":null},"blinded_ms_correctness_proof":{"c":"110950433797662478496501242700821790613180509559719834036106509544027568060683","v_dash_cap":"3596512252602614913331909373069591868504098606241383921465866579244565894217471181740493960888802912037684685318069526232006755191067996327512945404847716316715217237109126188508690977393743580234218242370328219802215713428974242060995164108604404850278597522527359083600689973137259490867161057361067476464775290877175411213407095050758462212922543598759997022435312890931789932940378212505737837413342566865829760316753391534629505776811345552387190957607241901578603376283600487111934375791762528168322238187326141495188627205369265366127051544836896878465667459548737627656013183875300044956119750315988412325701475533312374691916735942462771332717001608298652743537631049194219443716406950009997941370992951394794","ms_cap":"1251991127336617486958562862233176826619726633030282440515199713000086470175252907949160647524226933745732938219587887223274133076190914679536063164718508696174356618979984875727"},"nonce":"173687719437673394550474"}, {"master_secret_blinding_data":{"v_prime":"32415486172514512595862682189683670864679510103912513205312449571087607819967292797840361107334252669153568126222590532308255334758028797614689927176842838404725224164524389342212527390312912441361902325623563912629944184962108909970779146185705556339068282033842970233183429407376339836634794609394849351351235064144195231070339268458603194135001161934512726823431348322248942124238810169204062651932184596978641379539054105116401038301630371458984895500555156677918103771955986289301520475294187098585571226082792952354917086970010314904629080560632145269891878917435117169225865098438237297073737477476288127709362863539015812324676603826","vr_prime":null},"nonce":"173687719437673394550474","master_secret_name":"1980a715-94ce-46be-a22d-1cfa12f90fd9"}, {"schema_id":"K4GJ6BuZb3ppkdYvreu1oN:2:Transcript:1.1","cred_def_id":"F1EV3bTy3p8SZwFmqtwJJm:3:CL:31","rev_reg_id":null,"values":{"last_name":{"raw":"Garcia","encoded":"5321642780241790123587902456789123452"},"status":{"raw":"graduated","encoded":"2213454313412354"},"ssn":{"raw":"123-45-6789","encoded":"3124141231422543541"},"degree":{"raw":"Bachelor of Science, Marketing","encoded":"12434523576212321"},"first_name":{"raw":"Alice","encoded":"1139481716457488690172217916278103335"},"year":{"raw":"2015","encoded":"2015"},"average":{"raw":"5","encoded":"5"}},"signature":{"p_credential":{"m_2":"104848717308916283369655913789504019030418109841338592754757435815945982181402","a":"74588854834649846022262571363741590393679308848150895291762424098285055442949633206740103485255369766018844213467653902552601763085709615394592057955170081132702859134598021594631397777717316474854128329044957815086847073921858608261691495139162211190678284443926041048013606039558952241908124177881445689939561379771569832748540487687969482278834196400092561229735125284273233966020337794125863479926766450127766026286139439984291349306083005473777329761265589608417094881734494793004430534121260265213773509448528824994555058299183462065703098797531500043938685922257633511864213244742966030537972857398654116473942","e":"259344723055062059907025491480697571938277889515152306249728583105665800713306759149981690559193987143012367913206299323899696942213235956742929952323763151664832303300364958501189","v":"7456043300903864894654053154602307862572371137780370542985126903962302561403830691418053666112309956993665838732668860972257081838852122304962121620821178587288580536489251848869340994596159020272644102877370530068555577421379943372257439836909461782902800222173456724977776225342757747547213187339624014606234541967289615126767112426008232805103624026010464952312268786032279753222368261304192547114985934054341797174899121674157822787432502984036082585327567532333686854944922100125420043632953305209457131451157536543883903506952216394590967932617350820546373530757115129615302886786563205581905203603314814119489081427580743754112437858105091512783252985349135772105979311386809997225712875513038846266512241120219612657597577599427007466899624439382671111626300200337367457156196699002492472494921242064317650857751"},"r_credential":null},"signature_correctness_proof":{"se":"15171958138762633657680952653213687586756969672973999714734971091737414220302580214202928574312592324627654921715770402980881214153977888861142561982354462823370820012233067016001441036218398741728682280813025177756773941419368265546765027294238426228982329673632580180593725064727339112136249453728454766887911683877062358783006433216660961759784893598712665210674181047125131165138562237481463674488320087242471013899703870298362571580493963304159548808117871177656159191000033968700575761222915993078680555734603633011547429756663154288790216707711357789777840297819469670209876898939655155019940965106887224068821","c":"7785635275125490401551044875993341200857731679008919044002045833999856205636"},"rev_reg":null,"witness":null}, {"ver":"1.0","id":"F1EV3bTy3p8SZwFmqtwJJm:3:CL:31","schemaId":"31","type":"CL","tag":"","value":{"primary":{"n":"87042352283125702201222994739792011577246442900480237747195498118301342886769589717500080363930683577407476632185632264177715279486693223852142603202698578187066638709295939144791152349442919241107907012159152763664594308401107171631541017013387731259225180844124629579923267464400509284385949557040491630182266633744179289430003885071722354248040140457172151920884429799048215444485698892260190336226130603541498545045118008916787819970105855575377133895680441617884835923519364838756147345266514144902609069188609763901874604550712817342136492972834547787892175917579727644793990796182418718716629215667999360692849","s":"44293639653933011999414136616973656161307001617173689084520832615125827153374241073957591632548253294665872644184333933843120604496193859176945469626742793895221783845042637090695048110999633899199332249927229645786491908930529907621485291788243765577441359976985708751839626839071733514275208013780425350605204685137088590993321038375639876521194838475236788055838857288969205543651593951051858218865632608798151739754141304189510242477661896696068476873114607951048852711440101448327528173162617074871158882557805353164651601689989209801842674387886483036732494977917777106453184120790623745881205188307944583492679","rms":"14597103765587236235708505984702810018247924418806974945541504294417773078799479786842266227589265767779114939553300027609086821101813007192617256352966893569593462286967943844366893523141323276268829327902878860477527677087059262089770210432615522782435878828052378458694881255412921229322666318105704516487562005467549399780194382431758854469973753730136159595465430578119817354898660229960978618803199411770670289376757285393175921209189807865262925892464824212369383952673173140254948582238958857044725775510310879811355154685595748175661288113986141527671668894507792050945050807747819731552495320487620148378942","r":{"first_name":"28816739437504607748652666317752028528053529430458958128189114223125191930339162310377631766343868471700578117106207397080489700837393114154640719467781449235595841380482803693759123596435686105124840872663568228726386306450674301108096480880102761205114828010352696568730173660952827171040189988990413961812761629211307677101670352940783656282720852453289093657167922764972419672101345982885396168131913602787557744859768578520053380694878340762142732936190852941017915947069548294052761347412481501459441050949314134499458572660329091458854148853978065805645899303194272751755166405912911649968419170071487978487165","degree":"45273808525113614949308454607080522370430940935937622264813518847906545265752687365518395595337254349623625032366275413512547183863400661816991967731752184576954798317391776595354952071585401257563920682892691639817410161726803407920385721356296727859360937024958031745193394691283897711777671741482223035536387134841134612296658624942742912146717456645256971190335097001495977938689046967914126854027784359227246948412938257018720200928583489395187907568170722415098585188046869464513666737543553625893020315703691001371271210585716755532737051419277597794483769592317908189847925014464613693298014649685823399989514","status":"80031316411260299958041774448469197999227143128728392362216770593404035544935005028446827634197343326751214401063733553128413633082392631875108687543707866491541192869650275287667770932110008394643299167548683436979497050731717727391647952118943091886450208141888374711484901037040872228773159040558920377853351423559785590965229266413674089718814780112431510685763784053943824302941043724706097322896135950482300824895108414229463957114755170061281146931601407341936088243170703111967346977636399181885152977640988734263142112746806846265740751937786358275739346009103277857898996738363740319615970135699531937526448","last_name":"218782308394964704868449504794881448655977402918623210849153028450526279494862363007981202863390677312733392362989021304282513165622441156535239185927684181253576503649637514759983304864825818475225518361911282082165982974992913994320035495116821845067365083611996232590749716924815457360366668750462001445187120860154175172025840139513105685553297094452470672626050416865947496011058479329293085948171975061186235510759669154826831786489184342724379986944357379518437007187795606831390908638623245169725553968916373537705874849318874120600517488034482890009872354323088302948365266707069169610798089433949714427856","average":"56434998258397049080770501972189261024225421060174743228575891818756184802948900547140521743978123882616487969394451887013282083237319546389644740715503542281268922307535966477381761396801748008572771791887136759184707316497907350078499790173723226122607901839670119237799426981371089244950917765264084504529422057951384364818983772623492354830133190760641095917710952274687829379926182375033795385680254231645803715837029148540530172238538604578999395273465299124342069807087538482936155964771678663337476142068973627767911025259050612739325681106346847731869643071612879543807212215423296180028607071606577870533438","ssn":"85951975222454758101686397556978373784215820008390272791483077692786170632009315956219710656941034920618909300554845947855586891342996290146741311324520316894953304150753377749587552713649880475671311174284198246667817231933043788409071960617477247666934054278967948920520511171610147273949602268168105398334071012217283723855743339407280338807002120142040633976697171215850924072202831239828061856700636562885479003513190754390990433461936306272021770448782438331954014028037689209483317042794151158260268565766396659844671557520044541944537059107772725466139809763215389044451948676070803334857397152318109423614447","year":"47313856984448781634572919724441360028738127796690592703907288909801829888136692359787120366551701644071925679882932277924431639753344416119936621428405668565088362047315174141927842810392038797546054720520308944222395349947465095911265079380630568484000491888050414775419148627309420170782210227975430385816518395565038499831778172184339167846757872914527631381360610441631680276634379647900569898726522659967482533839721821963815092531469625468757118470259363269773905523093023072001741476523266631474505538713475482162003788371171519248378152035512685467813151335849829500195328252106755782072377263548981274922431"},"rctxt":"53069999836420527352488579053213029536823108301261417131747518599881938938734152564666829194699548624225556550451799241278985416861315202188367174903547428066434998284171308897690872627326421954888470745298771427547068940091687296451922095367872694913714531194496179097534786449564992634442480135364733339683460205607601450466968050381232972462767687735298468291413140218236423917287539437415964440019622972885627414341716397137186018910224043023614052992165109574925620243246379845970474954096360624014954862967526703903483331624274274248184952910901468632554939476865755832120207613898057174372951599847855629083814","z":"63464461366076168948656472917791685375493878049112164079471699274219180719962511394145648408521870920666795972005496196780164791543572661104364438048667763165954573448174715325148271844743164962986943224124361469358750544692800759733846564006920687117500475217899822181737476702689329951187970031154829420458037215856464829846911144751961250276158074765296622692623607893065007182598508421798346072111697917298559915406562500347667967560127755677377433751658259420076451315534700710214430227296248495940087174669918703760691298009247069477663613893446877057662623664637062107901766211859484009928595286332326598133649"}}} DEBUG:indy.anoncreds:prover_store_credential: Creating callback DEBUG:indy.libindy:create_cb: >>> cb_type: <class 'ctypes.CFUNCTYPE.<locals>.CFunctionType'> DEBUG:indy.libindy:create_cb: <<< res: <CFunctionType object at 0x7f83840865c0> DEBUG:indy.libindy:do_call: >>> name: indy_prover_store_credential, args: (c_int(3), None, c_char_p(50693536), c_char_p(50697520), c_char_p(50725280), c_char_p(50747488), None, <CFunctionType object at 0x7f83840865c0>) DEBUG:indy.libindy:do_call: Function indy_prover_store_credential returned err: 107 WARNING:indy.libindy:_do_call: Function indy_prover_store_credential returned error 107 DEBUG:indy.libindy:do_call: <<< <Future finished exception=IndyError(<ErrorCode.CommonInvalidParam8: 107>,)> ERROR:flask.app:Exception on /api/v1/credentials  POST  Traceback (most recent call last): File "/usr/local/lib/python3.5/dist-packages/flask/app.py", line 2292, in wsgi_app response = self.full_dispatch_request() File "/usr/local/lib/python3.5/dist-packages/flask/app.py", line 1815, in full_dispatch_request rv = self.handle_user_exception(e) File "/usr/local/lib/python3.5/dist-packages/flask/app.py", line 1718, in handle_user_exception reraise(exc_type, exc_value, tb) File "/usr/local/lib/python3.5/dist-packages/flask/_compat.py", line 35, in reraise raise value File "/usr/local/lib/python3.5/dist-packages/flask/app.py", line 1813, in full_dispatch_request rv = self.dispatch_request() File "/usr/local/lib/python3.5/dist-packages/flask/app.py", line 1799, in dispatch_request return self.view_functions rule.endpoint (**req.view_args) File "/usr/local/lib/python3.5/dist-packages/eve/endpoints.py", line 58, in collections_endpoint response = post(resource) File "/usr/local/lib/python3.5/dist-packages/eve/methods/common.py", line 297, in rate_limited return f(*args, **kwargs) File "/usr/local/lib/python3.5/dist-packages/eve/auth.py", line 78, in decorated return f(*args, **kwargs) File "/usr/local/lib/python3.5/dist-packages/eve/methods/common.py", line 1176, in decorated getattr(app, event_name + '_' + resource)(*rh_params) File "/usr/local/lib/python3.5/dist-packages/events/events.py", line 95, in __call__ f(*a, **kw) File "/home/indy/bin/api.py", line 63, in pre_credentials_post cred = agent.accept_credential_offer(req.json) File "/home/indy/bin/agent.py", line 251, in accept_credential_offer req_json, req_metadata_json, cred_json, cred_def, their_name)) File "/home/indy/bin/agent.py", line 22, in await return loop.run_until_complete(coroutine) File "/usr/lib/python3.5/asyncio/base_events.py", line 387, in run_until_complete return future.result() File "/usr/lib/python3.5/asyncio/futures.py", line 274, in result raise self._exception File "/usr/lib/python3.5/asyncio/tasks.py", line 239, in _step result = coro.send(None) File "/home/indy/bin/agent.py", line 382, in store_credential self.wallet, None, req_json, req_metadata_json, cred_json, cred_def, None) File "/usr/local/lib/python3.5/dist-packages/indy/anoncreds.py", line 618, in prover_store_credential prover_store_credential.cb) File "/usr/lib/python3.5/asyncio/futures.py", line 363, in __iter__ return self.result()  # May raise too. File "/usr/lib/python3.5/asyncio/futures.py", line 274, in result raise self._exception indy.error.IndyError: ErrorCode.CommonInvalidParam8 {code}  ></description> </Issue>
