<Issue id="30199" key="IS-700" number="700" project="10401" reporter="lodo1995" creator="lodo1995" type="10006" summary="Filesystem paths need to be configurable" priority="3" resolution="10000" status="10001" created="2018-05-15 09:49:57.0" updated="2019-08-15 05:45:16.0" resolutiondate="2019-08-15 05:45:16.0" votes="0" watches="4" workflowId="51736"> <description><! CDATA h2. Problem statement  Currently the paths where configurations and wallets are searched for and saved to are hard-coded in {{EnvironmentUtils::indy_home_path}} and similar functions. h2. Possible use cases # Some of my wallets need to reside outside my user folder, for the following possible reasons: ## I need to keep them in an external storage medium (e.g. USB key) for security and/or portability ## I need to share them with other users (so put them in a folder shared with other users) # My filesystem does not have that hard-coded path (e.g. Android)  Currently for use case 1 I need to mount the external/shared directory into the user home folder, while for use case 2 I need to clone the repo, change the hardcoded paths and recompile everything. h2. Proposed solution 1  It would be better to have the following system to set the indy home path: # An API (e.g. {{indy_set_home_path(const char*)}}); if this API has not been called yet when the path is needed, then # An environment variable (e.g. {{INDY_HOME_PATH}}); if this variable is not set then # A default system-specific path (as implemented now).  It would be even better to have the above system available at finer granularity, so that {{EnvironmentUtils::<whatever>_home_path}} (where {{<whatever>}} is currently either wallet or pool) can be controlled in the following ways: # An API (e.g. {{indy_set_<whatever>_path(const char*)}}); if this API has not been called yet when the path is needed, then # An environment variable (e.g. {{INDY_<WHATEVER>_PATH}}); if this variable is not set then # The current default {{<EnvironmentUtils::indy_home_path>/<whatever>}}, where {{EnvironmentUtils::indy_home_path}} can be controlled as explained above.  If this is to be implemented, the ability to set the temporary directory in the same way as explained above for the home directory would make the feature more complete, but is arguably less useful in practical scenarios. h2. Proposed solution 2 (just a sketch, based on the wallet storage proposal)  Filesystem management should not be done by {{libindy}}. Based on the single responsibility principle, this is outside its scope. The storage layer (which is controlled by the application) should take care of this. Thus, when creating a wallet, {{libindy}} should just ask the storage layer to create a wallet, and not store anything by itself. When listing wallets, {{libindy}} should ask all registered storage handlers to list the wallets they manage, and not look anything up by itself. And so on. In this way, storage layers would be responsible for all filesystem accesses, abstracting the filesystem away from libindy.  ></description> </Issue>
