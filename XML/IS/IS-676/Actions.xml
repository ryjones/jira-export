<Action id="43830" issue="29919" author="esplinr" type="comment" created="2018-05-04 13:51:37.0" updateauthor="esplinr" updated="2018-05-04 13:51:37.0"> <body><! CDATA This was reported on RocketChat by  ~sklump . The team that implemented revocation functionality did not complete performance testing before they turned their focus to ledger stability. They expect to return to this work later in 2018. In the meantime, people will need to spend the computing resources to generate a tails file for the initial credentials that they will be issuing.   ~sklump  How much does this issue impact you? Is your team in a position to help troubleshoot the issue?  ></body> </Action>
<Action id="43845" issue="29919" author="sklump" type="comment" created="2018-05-04 15:38:05.0" updateauthor="sklump" updated="2018-05-04 15:39:44.0"> <body><! CDATA  ~esplinr   The issue prevents us from going to production. Unfortunately we don't have the crypto/mathematics+Rust expertise to troubleshoot this issue.  We can operate with demonstrators for now, but once we need millions of revocable credentials, we cannot present the current state as a solution.  What I can do is to identify exactly where in the process the bottleneck resides. I will keep you up to date, probably early next week, as I dig into it.  ></body> </Action>
<Action id="43882" issue="29919" author="sklump" type="comment" created="2018-05-04 18:51:08.0" updateauthor="sklump" updated="2018-05-04 18:52:39.0"> <body><! CDATA in `libindy/src/commands/anoncreds/tails.rs` :  ``` pub fn store_tails_from_generator(service: Rc<BlobStorageService>,                                   writer_handle: i32,                                   rtg: &mut RevocationTailsGenerator) -> Result<(String, String), CommonError> \{     trace!("store_tails_from_generator ---> start");      let blob_handle = service.create_blob(writer_handle)?;      let mut hasher = sha2::Sha256::default();      //FIXME store version/tag/meta at start of the Tail's BLOB      error!(".. .. store tails 3");     let mut num = 0;     while let Some(tail) = rtg.next()? \{         error!(".. .. .. \{}! .0", num);         let tail_bytes = tail.to_bytes()?;         error!(".. .. .. \{}! .1", num);         hasher.process(tail_bytes.as_slice());         error!(".. .. .. \{}! .2", num);         service.append(blob_handle, tail_bytes.as_slice())?;         error!(".. .. .. \{}! .3", num);         num += 1;         error!(".. .. ..");     }      error!(".. .. store tails 4");     let res = service.finalize(blob_handle).map(|(location, hash)| (location, hash.to_base58()))?;      trace!("finalize ---> end");     Ok(res) } ```  It appears that the bulk of the operation is spent in rtg.next() – the output visibly pauses, and it is not possible to stop execution without landing, between ``` .. .. .. ``` and ``` .. .. .. <num>! .0 ```  I couldn't figure out where the random tails generator resides, so this is as far as I can trace it at the moment. My rust is pretty close to hello world level, so I didn't build a timer. In any case, the call to rtg.next() appears to be the worst offender.  Hope that helps!  ></body> </Action>
<Action id="44193" issue="29919" author="gudkov" type="comment" created="2018-05-10 15:07:44.0" updateauthor="gudkov" updated="2018-05-11 10:18:47.0"> <body><! CDATA  ~sergey.minaev   ~esplinr  I suggest to do intial research on this task.   The main purpose is to understand is performance limited by CL math or it is some problem in our code.  After we finish the initial research we can define additional tasks  ></body> </Action>
<Action id="44334" issue="29919" author="sergey.minaev" type="comment" body=" ~gudkov  After additional discussion in rocket.chat with Stephen we determine the reason of unacceptable timings in his environment. It was default build type by cargo (`debug`). It can be slower in 100+ times. I&apos;m going to add some comments in main readme about debug build performance issue and close this bug." created="2018-05-14 14:15:02.0" updateauthor="sergey.minaev" updated="2018-05-14 14:16:17.0"/>
<Action id="44335" issue="29919" author="sergey.minaev" type="comment" body="BTW: there is potential to improve performance for tails generation: use some pre-calculated values. It will complicate the code a bit. As for now, I don&apos;t see any reason to spent time for this improvement." created="2018-05-14 14:21:18.0" updateauthor="sergey.minaev" updated="2018-05-14 14:21:18.0"/>
<Action id="44345" issue="29919" author="gudkov" type="comment" body=" ~sergey.minaev  what is actual performance with release build? How fast we can generate tails for rev reg with 100000 capacity?" created="2018-05-14 15:44:45.0" updateauthor="gudkov" updated="2018-05-14 15:44:45.0"/>
<Action id="44408" issue="29919" author="sergey.minaev" type="comment" body="The  load test|https://github.com/hyperledger/indy-crypto/blob/870e7be3b438e0991e060a0a60c8d2a58a0cdfc4/libindy-crypto/src/cl/prover.rs#L1467-L1496  provided by  ~Artemkaaas  is more or less actual. For 100_000 capacity creation will require a few hundreds of seconds. " created="2018-05-15 08:32:59.0" updateauthor="sergey.minaev" updated="2018-05-15 08:32:59.0"/>
<Action id="44421" issue="29919" author="sklump" type="comment" body="I get about 266 seconds (04:26) to generate a tails file on 100000 credentials. My VM runs Ubuntu 16.04 and has 4096 MB of RAM." created="2018-05-15 12:07:44.0" updateauthor="sklump" updated="2018-05-15 12:07:44.0"/>
<Action id="44457" issue="29919" author="sergey.minaev" type="comment" created="2018-05-16 08:23:06.0" updateauthor="sergey.minaev" updated="2018-05-16 09:51:16.0"> <body><! CDATA I've update how-to-build section in our readme about default cargo build performance https://github.com/hyperledger/indy-sdk/pull/758 https://github.com/hyperledger/indy-crypto/pull/110  ></body> </Action>
<Action id="44459" issue="29919" author="gudkov" type="comment" body=" ~sklump  Are you ok with results? If so could you move this ticket to a Done state?" created="2018-05-16 08:47:09.0" updateauthor="gudkov" updated="2018-05-16 08:47:09.0"/>
<Action id="44721" issue="29919" author="gudkov" type="comment" body="No answer for a week. We can assume it is ok." created="2018-05-21 12:38:34.0" updateauthor="gudkov" updated="2018-05-21 12:38:34.0"/>
