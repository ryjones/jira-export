<Issue id="29565" key="IS-654" number="654" project="10401" reporter="esplinr" creator="esplinr" type="10006" summary="Tool for LibIndy wallet migration to new format" priority="2" resolution="10200" status="10001" created="2018-04-20 19:12:12.0" updated="2019-03-29 20:57:28.0" resolutiondate="2019-03-29 20:57:28.0" votes="0" watches="2" workflowId="51334"> <description><! CDATA *Story*  As a developer contributing to LibIndy, I want to know that I can change the wallet format in a manner that does not permanently invalidate all existing wallets.  As a user of a wallet for Indy Agent created by LibIndy, I want a smooth migration from my existing wallet format to the wallet format used by future versions so that I can upgrade with minimal hassle.  *Acceptance Criteria* * The first time a wallet is accessed from a client leveraging the libraries in Indy SDK, it should be upgraded to the current format. * The upgrade should occur in a non-destructive way. The upgraded wallet should be a copy of the previous wallet and be stored alongside the previous wallet. * A warning log message should be generated. * SDK documentation is updated to reflect that this will occur.  *Notes* * There is a wallet upgrade necessary in LibIndy 1.5 due to the storage of credentials, plugable persistence layer, and the new encryption methods. We don't have to manage this upgrade as we are not aware of anyone with durable credentials in their wallet and we will notify people in the Release Notes for LibIndy 1.4, the working group calls, chat, and the mailing list. * We need a process in place so people know we won't break them in the future. That process consists of an export / import mechanism in LibIndy 1.5, and a potential tool to automate the process. (We need to check that the new export / import mechanism is sufficient for this use case.) * Old anoncreds from LibIndy 1.3 will not be upgraded. A warning should be issued that they are not compatible and must be reissued. * This story does not consider imports from the wallets created by legacy Python CLI, as the export / import process currently in place should continue to function.  ></description> </Issue>
