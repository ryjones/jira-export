<Issue id="31048" key="IS-775" number="775" project="10401" reporter="devin-fisher" creator="devin-fisher" type="10006" summary="Make indy_crypto_auth_decrypt clear on application layers verification requirements" priority="3" status="10405" created="2018-06-13 20:22:22.0" updated="2019-03-29 21:04:23.0" votes="0" watches="1" workflowId="50648"> <description><! CDATA    indy_crypto_auth_decrypt and its associated function indy_crypto_auth_crypt provide two important data protection: * Confidentiality - using a shared key (diffie hellman key exchange), only two parties can read the plain text * Integrity - These functions can verify that the message was not tampered with.  *But* these two functions do not enforce *source authentication.* In particular, indy_crypto_auth_decrypt does not check the sender's verkey is a trusted verkey. That task is left to the application layer (by design).     This creates two issues: # the function name indy_crypto_auth_decrypt implies (to me) that authentication verified and enforced (with that function name, I would expect it to fail if the message was not from the expected source). Of course, the function don't have enough information to enforce this. And I'm not suggesting it should. The issue is on the implied functionality. Additionally, the function documentation could be more clear about its limitations. # Code reuse. Since all applications of libindy will have the need to do this verification ( I don't think there is a common use-case for not checking), this functionality will have to be continually rewritten. This code will be fairly high stakes.   Solution Ideas: # Introduce a higher level API that includes verification. Provide expected verkey or eventually, a micro-ledger to check against. # Improve documentation for indy_crypto_auth_decrypt and indy_crypto_auth_crypt to re-enforce the contract with the application layer. # Consider changing the API name to something that doesn't imply features it doesn't have. I don't have a better name and of course, this would require deprecating the old and all that mess.   ></description> </Issue>
