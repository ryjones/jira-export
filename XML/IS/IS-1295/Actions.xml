<Action id="61053" issue="40593" author="sergey.minaev" type="comment" created="2019-06-17 14:31:47.0" updateauthor="sergey.minaev" updated="2019-06-17 14:31:47.0"> <body><! CDATA libindy is not a library from cargo artifact point of view. There is no public rust crate which can be consumed by another rust application/library. Instead of that the output of libindy is binary library with C API only. So it more like final binary application artifact output rather rust library artifacts. It's why cargo.lock is included into VCS  ></body> </Action>
<Action id="61118" issue="40593" author="ignisvulpis" type="comment" created="2019-06-19 13:07:23.0" updateauthor="ignisvulpis" updated="2019-06-19 13:07:23.0"> <body><! CDATA So if libindy is considered a binary then he only relevant paragraph from the citation above is this one: {quote}The purpose of a {{Cargo.lock}} is to describe the state of the world at the time of a successful build. It is then used to provide deterministic builds across whatever machine is building the package by ensuring that the exact same dependencies are being compiled. {quote} I assume when the Ubuntu `deb` is build and when the libindy. dll,lib,dylib,so,a  are build by the core team and published that then this information might be useful if the builds are done on different machines. But, I think it is a good practice to do a `cargo update` before releasing a new version and then the information Cargo.lock provides is not so very important because the Carglo.lock files that are then created on the different machines are the same anyway.  This usefulness of having Cargo.lock is little and applies rarely while the merge conflicts regarding Cargo.lock happen much more often and could be avoided if Cargo.lock were not in the CVS.        ></body> </Action>
