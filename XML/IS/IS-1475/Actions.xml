<Action id="67784" issue="44215" author="artemkaaas" type="comment" created="2020-02-03 11:36:19.0" updateauthor="artemkaaas" updated="2020-02-03 11:36:19.0"> <body><! CDATA I think It isn't correct to compare create/update state function only on 4 credentials.  I think you get update operation slower just because of additional deserialization of `revocation_state` json.  The state updation should be faster in the scenario like: - Issuer issued Alex credentials. - Issuer issued 50_000 credentials - Alex created revocation_state - Issuer issued 500 credentials  - updating of the previous revocation_state should be faster than creating it from scratch  ></body> </Action>
<Action id="67938" issue="44215" author="sklump" type="comment" created="2020-02-13 18:59:57.0" updateauthor="sklump" updated="2020-02-13 18:59:57.0"> <body><! CDATA  ~Artemkaaas  You are correct. On more credentials, the update method of #1 emerges as clearly fastest.  On 500 credentials, revoking 5, I got: (5.06, 61.44, 64.6) seconds per 1000 iterations. On 5000 credentials, revoking 50, I got: (7.65, 582.83, 576.27) seconds per 1000 iterations.  Note that the issue time per credential increases more or less linearly with the size of the tails file, which depends linearly on its maximum number of credentials. Running such a test with any larger becomes untenable, as the issue time increases with the square of the number of credentials (if they are all in one revocation registry). This could make credential issue onerous for installations with large tails files. The approach to take until revocation-2.0 emerges is to profile credential issue and see what the issuer can countenance as reasonable service turnaround time. For example, on a 100000-credential tails file, it was taking over 5 seconds to issue a credential. Issue time is about a 0.5 sec per credential with a 10000-credential tails file. A design tension remains: smaller tails files are less secure.  ></body> </Action>
