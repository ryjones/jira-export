<Issue id="37933" key="IS-1196" number="1196" project="10401" reporter="esplinr" assignee="sergey.minaev" creator="esplinr" type="10002" summary="Document future architecture of LibIndy with message families" priority="3" resolution="10000" status="10001" created="2019-02-22 22:16:56.0" updated="2019-03-29 13:08:09.0" resolutiondate="2019-03-29 13:08:09.0" votes="0" watches="2" workflowId="51711"> <description><! CDATA Acceptance Criteria: A MarkDown document exists in the SDK design doc folder that describes how the SDK will be structured after adding support for message protocols (message families and state machines). It should specifically address: * number of artifacts * how to add support for a message protocol * organization of CI / CD * pros / cons of this approach  Optional: * A diagram of the layers of a full solution * A diagram of the components of LibIndy  Overview of proposed architecture:  Indy SDK 2.0 consists of * LibIndy which provides API helper functions to generate plain text messages, manage the wire message protocol, generate specific plaintext messages, and manage protocol transitions. ** LibIndy namespace *** Wallets *** Resolver *** Ledger Comms *** DID Comm Infrastructure **** Pack / Unpack **** Message family handler **** Protocol transition handler *** Payment plugin handler ** VCX namespace *** Message family *** Protocol transitions ** DIDComm namespace *** Trust Ping *** Connections **** Protocol transitions *** Basic message * Ursa * Basic protocol test harness * Thin SDK wrappers  Consumed by:  Fat language idiomatic wrapper  or  Agent_Helpers (public and open source) * Provides a C-callable interface similar to LibVCX today * Wallet handles * Transport * Payment plugin instantiation * Agent test suite * Protocol state machine * Fat language idiomatic wrappers (Android, IOS, NodeJS, Enterprise Java, Python)  Downstream applications can consume LibIndy through a fat wrapper or through the Agent Helpers. The downstream application needs to provide the business logic and the business logic state machine.  Note: * Names like "Agent Helpers" are placeholders and can be improved ** It makes too many decisions to be a library, but doesn't take enough control to be a framework * Here is a diagram showing Nathan's view of the large stack: https://docs.google.com/drawings/d/14lVjP4UzteIqO2aJOy3JinjcGkKH-KYjIKqRgbXU2a0/edit  ></description> </Issue>
