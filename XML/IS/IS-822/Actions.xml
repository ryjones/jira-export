<Action id="47418" issue="31966" author="sergey.minaev" type="comment" created="2018-07-17 13:53:34.0" updateauthor="sergey.minaev" updated="2018-07-17 14:57:11.0"> <body><! CDATA Here is a PR with simple test. String constants are fetched from 0.4.1 output. https://github.com/hyperledger/indy-crypto/pull/114 UPD: merged to master: https://github.com/hyperledger/indy-crypto/blob/master/libindy-crypto/src/cl/prover.rs#L1582  ></body> </Action>
<Action id="47422" issue="31966" author="sergey.minaev" type="comment" body=" ~esplinr   ~gudkov  I think this ticket is a blocker for coming IndySDK release." created="2018-07-17 14:24:26.0" updateauthor="sergey.minaev" updated="2018-07-17 14:24:26.0"/>
<Action id="47631" issue="31966" author="vladimirwork" type="comment" created="2018-07-23 09:28:52.0" updateauthor="vladimirwork" updated="2018-07-23 09:28:52.0"> <body><! CDATA Build Info: indy-node 1.5.67 (rc) Client #1: libindy 1.5.0 libindy-crypto 0.4.1 (stable) Client #2: libindy 1.5.0~635 libindy-crypto 0.4.1~55 (master)  Steps to Validate: Client #1: {noformat} import asyncio import json from indy import wallet, pool, ledger, anoncreds, did  async def stable_steps(): 	await pool.set_protocol_version(2) 	pool_config = json.dumps({"genesis_txn": str('/var/lib/indy/sandbox/pool_transactions_genesis')}) 	await pool.create_pool_ledger_config('pool1', pool_config) 	pool_handle = await pool.open_pool_ledger('pool1', pool_config) 	wallet_credential = json.dumps({"key": str('key')}) 	await wallet.create_wallet('pool1', 'wallet1', None, None, wallet_credential) 	wallet_handle = await wallet.open_wallet('wallet1', None, wallet_credential) 	test_did, test_vk = await did.create_and_store_my_did(wallet_handle, "{}") 	trustee_did, trustee_vk = await did.create_and_store_my_did(wallet_handle, json.dumps({"seed": str('000000000000000000000000Trustee1')})) 	req = await ledger.build_nym_request(trustee_did, test_did, test_vk, None, 'TRUSTEE') 	await ledger.sign_and_submit_request(pool_handle, wallet_handle, trustee_did, req) 	schema_id, schema_json = await anoncreds.issuer_create_schema(test_did, 'schema_name', '1.0', ' "age", "sex", "height", "name" ') 	req = await ledger.build_schema_request(test_did, schema_json) 	schema_result = await ledger.sign_and_submit_request(pool_handle, wallet_handle, test_did, req) 	schema_json = json.loads(schema_json) 	schema_json 'seqNo'  = json.loads(schema_result) 'result'  'txnMetadata'  'seqNo'  	schema_json = json.dumps(schema_json) 	cred_def_id, cred_def_json = await anoncreds.issuer_create_and_store_credential_def(wallet_handle, test_did, schema_json, 'tag', None, None) 	req = await ledger.build_cred_def_request(test_did, cred_def_json) 	await ledger.sign_and_submit_request(pool_handle, wallet_handle, test_did, req) 	offer = await anoncreds.issuer_create_credential_offer(wallet_handle, cred_def_id) 	print(offer) 	 if __name__ == '__main__': 	asyncio.get_event_loop().run_until_complete(stable_steps())  {noformat}  Client #2: {noformat} import asyncio import json from indy import wallet, pool, ledger, anoncreds, did  async def master_steps(): 	await pool.set_protocol_version(2) 	# offer = {...} <<< insert printed offer from Client #1 	pool_config = json.dumps({"genesis_txn": str('/var/lib/indy/sandbox/pool_transactions_genesis')}) 	await pool.create_pool_ledger_config('pool1', pool_config) 	pool_handle = await pool.open_pool_ledger('pool1', pool_config) 	wallet_config = json.dumps({"id": str('wallet1')}) 	wallet_credential = json.dumps({"key": str('key')}) 	await wallet.create_wallet(wallet_config, wallet_credential) 	wallet_handle = await wallet.open_wallet(wallet_config, wallet_credential) 	await anoncreds.prover_create_master_secret(wallet_handle, 'ms') 	trustee_did, trustee_vk = await did.create_and_store_my_did(wallet_handle, json.dumps({"seed": str('000000000000000000000000Trustee1')})) 	req = await ledger.build_get_cred_def_request(trustee_did, offer 'cred_def_id' ) 	res = await ledger.sign_and_submit_request(pool_handle, wallet_handle, trustee_did, req) 	cred_def_id, cred_def_json = await ledger.parse_get_cred_def_response(res) 	cred_req_json, cred_req_metadata_json = await anoncreds.prover_create_credential_req(wallet_handle, trustee_did, json.dumps(offer), cred_def_json, 'ms') 	print(cred_req_json) 	print('-------') 	print(cred_req_metadata_json)  if __name__ == '__main__': 	asyncio.get_event_loop().run_until_complete(master_steps())  {noformat}  Actual Results: Client #2 calls `anoncreds.prover_create_credential_req` without any errors: {noformat} {"prover_did":"V4SGRU86Z58d6TV7PBUe6f","cred_def_id":"T2wdSKoiCVBmmvzzqbeuBi:3:CL:28:tag","blinded_ms":{"u":"908632363407662565636378481527271181855568351332694551910746854373383341545192341789010814307252893299543525171753198793802004355447073684047921691496263448920826195557996302212045500899298992531583744158732014531082797857295104908245471019906852222980989187736597810022312570354283286872898535847205807205818680924265134627993127116464328388197213912415399801650307322529772137224037495432115902602240917459258114458314121627385028586696246618476495538946922016211527564893441850994321074040341507991261872854485588534309163521939772589299643353197386480895833438211099166048508311960867749707551894328883265137204","ur":null,"hidden_attributes": "master_secret" ,"committed_attributes":{}},"blinded_ms_correctness_proof":{"c":"107336504840417264129996400583229058024590722581280030623757275828252744378970","v_dash_cap":"1521137975893278844133402000559980625621059129947650250478279556308662471975360046151272096593592956543102836894953033460869098522327211284650634148342253122986738401632529506321989441768982473135227865059837704995439720009667822271243709205129061311944757840018181761961585341235678132028409890022323417895885539767861992878313699906991241324652733434465430835937478491204845382301266505021583873293508256213001650712781492916939907437355010660592061276542153130161021399087848710879474488085811494765409465720744075451520894659135621633506422110205062405751941815705201483515042996532808841707176763358023886503215911758290115863558184858116811941707283809081759322123175674125019208050192532131983485848857019146656","m_caps":{"master_secret":"6382972028241248243629784353573309173147460341496272182104540113253389987592534434076611398768408559439002806114694208751163328645772288087634165102593979595133512969573769513062"},"r_caps":{}},"nonce":"408410274383359033499425"} ------- {"master_secret_blinding_data":{"v_prime":"14171674195604127264309949039462323504228987429990059016240452289312248795308812585694474384861298026385465570418978410115908733617937312801827989926058535256268505773515973077247284956855399303489532118397281447253097995843507404219747392962877653469219011566558663300119140316807898186057982379195133774532273305377608615944677558965862601450107765314320225764493095740510205603127389287945935359250902946793181253824969609618196406132509302210705731547824538094138819378918166530570980675636801658225693616827697756864764887852907634236099867509609003018241447432944667875474320004000911457429496989792893198055649543433166885351725039115","vr_prime":null},"nonce":"408410274383359033499425","master_secret_name":"ms"} {noformat}   ></body> </Action>
