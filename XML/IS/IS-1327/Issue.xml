<Issue id="41345" key="IS-1327" number="1327" project="10401" reporter="michaelwang" creator="michaelwang" type="10004" summary="Test failed" priority="3" resolution="10000" status="10001" created="2019-07-22 03:18:50.0" updated="2019-08-20 09:38:51.0" resolutiondate="2019-08-16 13:30:55.0" votes="0" watches="3" workflowId="54350"> <description><! CDATA After I built the indy sdk from source, I run the test cases as the doc of github.  But two cases failed. I enabled the backtrace and paste the log below: {code:java} failures:---- crypto_demo_works stdout ---- thread 'main' panicked at 'assertion failed: `(left == right)` left: `Success`, right: `WalletAlreadyExistsError`', tests/demo.rs:772:5 stack backtrace: 0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace 1: std::sys_common::backtrace::print 2: std::panicking::default_hook::{{closure}} 3: std::panicking::default_hook 4: std::panicking::rust_panic_with_hook 5: std::panicking::continue_panic_fmt 6: std::panicking::begin_panic_fmt 7: demo::crypto_demo_works at tests/demo.rs:772 8: demo::crypto_demo_works::{{closure}} at tests/demo.rs:749 9: core::ops::function::FnOnce::call_once at /usr/src/rustc-1.35.0/src/libcore/ops/function.rs:231 10: <alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once 11: __rust_maybe_catch_panic 12: test::run_test::run_test_inner 13: test::run_test 14: test::run_tests_console 15: test::test_main 16: test::test_main_static 17: demo::main 18: std::rt::lang_start::{{closure}} at /usr/src/rustc-1.35.0/src/libstd/rt.rs:64 19: std::panicking::try::do_call 20: __rust_maybe_catch_panic 21: std::rt::lang_start_internal 22: std::rt::lang_start at /usr/src/rustc-1.35.0/src/libstd/rt.rs:64 23: main 24: __libc_start_main 25: _start---- ledger_demo_works stdout ---- thread 'main' panicked at 'assertion failed: `(left == right)` left: `Success`, right: `WalletAlreadyExistsError`', tests/demo.rs:558:5 stack backtrace: 0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace 1: std::sys_common::backtrace::print 2: std::panicking::default_hook::{{closure}} 3: std::panicking::default_hook 4: std::panicking::rust_panic_with_hook 5: std::panicking::continue_panic_fmt 6: std::panicking::begin_panic_fmt 7: demo::ledger_demo_works at tests/demo.rs:558 8: demo::ledger_demo_works::{{closure}} at tests/demo.rs:483 9: core::ops::function::FnOnce::call_once at /usr/src/rustc-1.35.0/src/libcore/ops/function.rs:231 10: <alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once 11: __rust_maybe_catch_panic 12: test::run_test::run_test_inner 13: test::run_test 14: test::run_tests_console 15: test::test_main 16: test::test_main_static 17: demo::main 18: std::rt::lang_start::{{closure}} at /usr/src/rustc-1.35.0/src/libstd/rt.rs:64 19: std::panicking::try::do_call 20: __rust_maybe_catch_panic 21: std::rt::lang_start_internal 22: std::rt::lang_start at /usr/src/rustc-1.35.0/src/libstd/rt.rs:64 23: main 24: __libc_start_main 25: _start failures: crypto_demo_works ledger_demo_workstest result: FAILED. 9 passed; 2 failed; 0 ignored; 0 measured; 0 filtered out {code}  ></description> </Issue>
