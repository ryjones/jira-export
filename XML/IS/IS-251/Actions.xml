<Action id="29311" issue="19649" author="peacekeeper" type="comment" created="2017-08-01 19:46:15.0" updateauthor="peacekeeper" updated="2017-08-01 19:46:15.0"> <body><! CDATA Hello,  ~srottem  and I had a chance to talk about this a bit today, but we didn't fully understand.  Does this also apply to the Java wrapper, or only to the .NET code?  If the idea is to listen for events on multiple connections at the same time, I think this can also be achieved by just using a single MessageObserver for multiple connections. (But I think your point is something slightly different.)  Maybe we discuss on Thursday, or maybe you write some sample code how you would do it?  ></body> </Action>
<Action id="29336" issue="19649" author="gudkov" type="comment" created="2017-08-02 08:33:41.0" updateauthor="gudkov" updated="2017-08-02 08:33:41.0"> <body><! CDATA > Does this also apply to the Java wrapper, or only to the .NET code?  It is more related to .Net as java doesn't provide async/await message loop and promises composition out of the box, but we can discuss this approach as option for Java too.  > If the idea is to listen for events on multiple connections at the same time  Not exatly. The main idea is switching from Observer-like pattern to poll-like pattern. It will allow to organize application code as composition of async functions in one event loop without switching to low-level details as callbacks in native threads.   I suggest to compare AgentSend test in .net  https://github.com/hyperledger/indy-sdk/blob/master/wrappers/dotnet/indy-sdk-dotnet-test/Wrapper/AgentTests/AgentSendTest.cs  and in Python   https://github.com/hyperledger/indy-sdk/blob/master/wrappers/python/tests/agent/test_agent_send.py   Both are async functions, but .net version contains more low level boilerplate with filling of Tasks in native callbacks.  Also if .Net supports complex tasks composition (waiting for first fullfilled task) we can simplify this api yet more. Instead of providing too generic WaitForEvent method that waits for generic eventrs on handles list we can provide 2 simple WaitForMessage(connection_handle) and WaitForConnection(listener_handle) that return Tasks composed by wrapper user.  ></body> </Action>
<Action id="29787" issue="19649" author="srottem" type="comment" created="2017-08-13 20:50:35.0" updateauthor="srottem" updated="2017-08-13 20:50:35.0"> <body><! CDATA I'm not 100% sure how to approach this, but I've taken a stab at it.  Please see pull request  https://github.com/hyperledger/indy-sdk/pull/185|https://github.com/hyperledger/indy-sdk/pull/185. .     ></body> </Action>
<Action id="30060" issue="19649" author="srottem" type="comment" created="2017-08-22 07:49:15.0" updateauthor="srottem" updated="2017-08-22 07:49:15.0"> <body><! CDATA Issued new pull request:  https://github.com/hyperledger/indy-sdk/pull/208.   The code has been significantly refactored and a using Task.WhenAny has been demonstrated.  Old pull  request #185 was closed.  ></body> </Action>
