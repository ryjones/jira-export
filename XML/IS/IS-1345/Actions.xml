<Action id="62961" issue="41640" author="artemkaaas" type="comment" created="2019-08-16 05:26:49.0" updateauthor="esplinr" updated="2019-08-20 15:00:06.0"> <body><! CDATA Different builds have different levels of assurance: * PR builds execute all tests on one platform (Ubuntu 18.04), and a reduced set of tests on other platforms (Ubuntu 16.04, CentOS, MacOS, Windows, iOS, Android). * We have a separate set of builds that increases the level of testing on all platforms, to be run for releases. Derivative builds (Ubuntu 16.04) will still have a reduced set of tests. Android builds will also need a reduced set of tests (item 6). Wrapper builds will also have a reduced set of tests (item 1).  Options: 1) For all builds, we would run wrappers tests only for Ubuntu 18.04 (don't run on Ubuntu 16.04, Amazon, or CentOS) We don't expect issues between platforms for most wrappers, because they are platform independent languages. We can't think of examples of bugs in wrappers that impact only a single platform, so we see the additional test execution as redundant.  2) limit the number of Libindy integration tests run for PRs (for example run tests classified as medium and low priority only on Ubuntu 18.04). Configure a regular build that runs the full test suite on all platforms--each weekend and each release. The frequency of the full test build should be configurable.  3) to refactor libindy tests to avoid opening useless wallet/pool and performing other optional steps.  4) to reduce the number of tests for wrappers (leave only positive cases and cases related to specific error). Today there is a lot of duplication with tests that are executed at lower levels. Remove tests that are completely duplicative Tests that only provide a small additional level of assurance should be reserved for advanced test runs (releases) instead of regular runs (PRs).  6) android - run only interaction tests, and skip the unit tests. Currently executing the full set of Android tests takes more than 3 hours, for a single architecture, so we are already executing a reduced set. The current set of tests is the unit tests and interaction tests which take 1 hour to execute. We only test a single architecture: Arm7. Bottleneck is that our test environments do not support hardware emulation for Android devices, and software emulation is very slow. iOS device emulation is much faster. We should investigate AWS solutions for mobile testing.  7) to add an environment variable to return hardcoded `CredDef`. Decided against this: it's complicated and doesn't provide much benefit.  8) serialize parts of a single build by running wrappers tests on the same node to build container/ run pool/ close pool only once. This would cause the build to only block one CI node instead of four, allowing other builds to proceed, but build time for LibIndy wrappers will go from 6 minutes to 15 minutes, within the full pipeline that takes 90 minutes. *Feedback from Ken: Please evaluate going from 4 to 2, instead of 4 to 1.*  9) Don't run builds on pull requests that have  Skip CI  in the PR subject  10) Configure Jenkins to only allow a single active build per pull request; a new commit on the same PR will cancel the in-progress build and start a new one.  If in the future we find: * The weekend builds block PR testing, then we can scale back the included tests more. * The SDK builds block Indy Node development, we can reserve some CI nodes for Indy Node builds. * If we see wrapper bugs that are specific to an OS, we will increase testing for all the OSs.  ></body> </Action>
<Action id="63097" issue="41640" author="esplinr" type="comment" created="2019-08-20 15:01:55.0" updateauthor="esplinr" updated="2019-08-20 15:01:55.0"> <body><! CDATA Further discussion: * We will not configure weekend builds immediately, but will only do the deep testing on release builds. We can re-evaluate if we see surprise bugs during release testing. * Serializing the builds onto a single machine doesn't cost much in terms of the full pipeline, but has a lot of benefits in how the infrastructure is used. So we will keep it on a single node.  ></body> </Action>
<Action id="63300" issue="41640" author="esplinr" type="comment" body="Option 10 is not supported on our Jenkins configuration, so we will postpone it." created="2019-08-26 15:24:52.0" updateauthor="esplinr" updated="2019-08-26 15:24:52.0"/>
<Action id="63353" issue="41640" author="sergey.minaev" type="comment" created="2019-08-28 07:31:15.0" updateauthor="sergey.minaev" updated="2019-08-28 07:31:15.0"> <body><! CDATA More about 8) Count of parallel instances - distribution time - total time: 1 - 16m 2 - ~10 + ~6 = 16m 4 - 3.29 + 2.33 + 4.00 + 6.33 = 16,5m So there is no big reason to take multiply instances and block other PRs  ></body> </Action>
<Action id="63354" issue="41640" author="sergey.minaev" type="comment" created="2019-08-28 07:40:53.0" updateauthor="sergey.minaev" updated="2019-08-28 07:40:53.0"> <body><! CDATA Status:  1, 2, 3, 4, 8 implemented and merged to master branch 6 postponed 7 rejected 9 suggestion for contribution, no straightforward way to do it automatically, but anyone with write permission on Jenkins will abort jobs for PRs withÂ   Skip CI  tag in the title 10 postponed not applicable for current Jenkins configuration  Follow-ups: - implement regular (daily? weekly? monthly?) builds with full set of tests run on all platforms - find a way for hardware emulation on Android - configure CI/CD infrastructure to have only one active build  ></body> </Action>
