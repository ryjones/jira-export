<Issue id="43535" key="IS-1434" number="1434" project="10401" reporter="tmarkovski" assignee="sergey.minaev" creator="tmarkovski" type="10004" summary="Android Library &gt;= 1.12.0 fails to load for &quot;x86&quot; architecture due to text relocations" priority="3" resolution="10000" status="10001" created="2019-12-03 23:18:48.0" updated="2019-12-25 14:02:36.0" resolutiondate="2019-12-25 14:02:36.0" votes="0" watches="2" workflowId="57279"> <description><! CDATA Android fails to load "libindy.so" version 1.12.0 or later for "x86" architecture only with the Java native exception:  *dlopen failed: "/data/app/myapp.mobile-89R5E9k7Byb33fbmMwPY1g==/lib/x86/libindy.so" has text relocations ( https://android.googlesource.com/platform/bionic/+/master/android-changes-for-ndk-developers.md#Text-Relocations-Enforced-for-API-level-23) *     The reason for this seems to be related to the link in the exceptions - text relocations used in the build process of the static library.  Running the commands on the link above, shows that TEXTREL is present in 1.12.0 or later, while it is not present in 1.11.1 or earlier versions.     For 1.11.1 - no TEXTREL found using scanelf and readelf {code:java} ╔═ :) ═══ blacklite@streetcred:~/Documents/work/streetcred/libindy/1.11.1/libindy_x86/lib ╚══> readelf --dynamic libindy.so | grep TEXTREL ╔═ :( ═══ blacklite@streetcred:~/Documents/work/streetcred/libindy/1.11.1/libindy_x86/lib ╚══> scanelf -qT libindy.so ╔═ :) ═══ blacklite@streetcred:~/Documents/work/streetcred/libindy/1.11.1/libindy_x86/lib ╚══> {code} For 1.12.0 the output clearly shows text relocations used in DidCommandExecutor. The trace may not be the most accurate, I am not an expert on this. {code:java} ╔═ :) ═══ blacklite@streetcred:~/Documents/work/streetcred/libindy/1.12.0/libindy_x86/lib ╚══> readelf --dynamic libindy.so | grep TEXTREL  0x00000016 (TEXTREL)                    0x0  0x0000001e (FLAGS)                      TEXTREL BIND_NOW ╔═ :) ═══ blacklite@streetcred:~/Documents/work/streetcred/libindy/1.12.0/libindy_x86/lib ╚══> scanelf -qT libindy.so   libindy.so: _ZN4indy8commands3did18DidCommandExecutor14_defer_command17hbafeb7b6743341acE  0x1644301  in (optimized out: previous memcpy)  0x1644300    libindy.so: _ZN4indy8commands3did18DidCommandExecutor14_defer_command17hbafeb7b6743341acE  0x1644311  in (optimized out: previous memmove)  0x1644310    libindy.so: 1l4xn0ek5tpo7wq7  0x1644351  in (optimized out: previous strcmp)  0x1644350    libindy.so: GCC_except_table62  0x16443A1  in (optimized out: previous strncat)  0x16443A0    libindy.so: GCC_except_table50  0x16442D1  in (optimized out: previous memcmp)  0x16442D0    libindy.so: _ZN4core3ops8function6FnOnce40call_once$u7b$$u7b$vtable.shim$u7d$$u7d$17h3410e7f544bfe516E  0x16443C1  in (optimized out: previous strlcpy)  0x16443C0    libindy.so: _ZN4core3ptr18real_drop_in_place17h85760756f8dac10cE  0x1644361  in (optimized out: previous strncmp)  0x1644360    libindy.so: _ZN4core3ptr18real_drop_in_place17h3a46473de4a0231dE  0x1644391  in (optimized out: previous wcscat)  0x1644390    libindy.so: GCC_except_table47  0x1644321  in (optimized out: previous strcpy)  0x1644320    libindy.so: GCC_except_table61  0x1644331  in (optimized out: previous strncpy)  0x1644330    libindy.so: .L41  0x16443D1  in (optimized out: previous wcscpy)  0x16443D0    libindy.so: DHvparams_seq_tt  0x1644341  in (optimized out: previous strlen)  0x1644340    libindy.so: .L544  0x16442F1  in (optimized out: previous __memset_chk)  0x16442F0    libindy.so: GCC_except_table47  0x1691CDD  in (optimized out: previous __memset_chk_generic)  0x1691CD0    libindy.so: GCC_except_table4  0x16443B1  in (optimized out: previous strlcat)  0x16443B0    libindy.so: resolveSelectStep  0x16442E1  in (optimized out: previous memset)  0x16442E0    libindy.so: rtreeFreeCallback  0x1644371  in (optimized out: previous strcat)  0x1644370    libindy.so: vdbeMemAddTerminator  0x1644381  in (optimized out: previous wmemcmp)  0x1644380    libindy.so ╔═ :) ═══ blacklite@streetcred:~/Documents/work/streetcred/libindy/1.12.0/libindy_x86/lib ╚══> {code} I don't know what a potential fix would be, we can explore and identify what changed between 1.11 and 1.12 that would affect this.     ></description> </Issue>
