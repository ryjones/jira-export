<Issue id="44415" key="IS-1507" number="1507" project="10401" reporter="ashcherbakov" assignee="anikitindsr" creator="ashcherbakov" type="10002" summary="Support issuance of W3C credentils in indy-credx " priority="3" status="10200" created="2020-02-26 04:27:00.0" updated="2020-03-31 13:21:01.0" votes="0" watches="1" workflowId="58323" archived="N"> <description><! CDATA *Acceptance criteria* - Implement methods for issuance of W3C credentials with Rich Schema support - Implementation should live in indy-credx (we consider options to do it in aries-credx as well) - This can be a new set of methods (not overriding existing ones) - aries-credx has a set of methods for encodings to be used - output of new credentials issuance methods should we W3C compatible credentials (see https://www.w3.org/TR/vc-data-model/#zero-knowledge-proofs) - If we do JSON-LD processing/substitution, then for MVP we may assume that we resolve the contexts (substitute the fields belonging to a context) belonging to the current ledger only. We are not going to resolve other Indy ledger's context, other blockchain's contexts, and Internet contexts.  *HIPEs/RFCs to use* - https://github.com/hyperledger/aries-rfcs/tree/master/features/0036-issue-credential (to be updated) - https://github.com/hyperledger/aries-rfcs/tree/master/concepts/0250-rich-schemas, https://github.com/hyperledger/indy-hipe/tree/master/text/0119-rich-schemas - https://github.com/hyperledger/aries-rfcs/tree/master/concepts/0420-rich-schemas-common, https://github.com/hyperledger/indy-hipe/tree/master/text/0120-rich-schemas-common - https://github.com/hyperledger/aries-rfcs/tree/master/features/0249-rich-schema-contexts, https://github.com/hyperledger/indy-hipe/tree/master/text/0138-rich-schema-context (to be updated) - https://github.com/hyperledger/aries-rfcs/tree/master/features/0281-rich-schemas, https://github.com/hyperledger/indy-hipe/tree/master/text/0149-rich-schema-schema (to be updated) - https://github.com/hyperledger/aries-rfcs/tree/master/features/0418-rich-schema-encoding (to be updated) - Credentials format (TBD)  *Tips* - It looks like no JSON-LD processing/substitution is needed for issuance - Issuance protocol should be the same as for old schema, but use rich schema objects as inputs and output w3c compatible credentials - For ZKP signing of credentials the following can be done: - sort attributes according to the 'rank' in mapping - encode value according to the specified encoding(s) in mappings (the same attribute can be encoded twice) - attributes can be identified by ranks in ZKP signature object  *Example of objects* *Rich Schema* {code} { "@id" = "id111", "@type" = "type111", "@context" = <....>, "attr1": { "attr2": { "attr3" : <...>, "attr4" : <...>, }, "attr5": <...>,    "attr6": <...>, }, "attr7": <...>, "attr8": <....> } {code}   *Mapping* It follows the same pattern, but can exclude some attributes. It specifies a list of encodings and ranks (to define the order of how attributes should be signed).  {code} { "@id" = "id111", "@type" = "type111", "@context" = <....>, "attr1": { "attr2": { "attr3" :   {"enc": <...>, "rank": 1}  , }, "attr6":    {"enc": <...>, "rank": 2}  , }, "attr8":    {"enc": <...>, "rank": 3}  , } {code}    *W3C credential* Follows the same pattern of attributes (as in Mapping): {code} { "@id" = "id111", "@type" = "type111", "@context" = <....>, "credentialSubject": { "attr1": { "attr2": { "attr3" :<...>, }, "attr6": :<...>, }, "attr8": :<...>, } } {code}   ></description> </Issue>
