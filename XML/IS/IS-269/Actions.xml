<Action id="29583" issue="20046" author="gudkov" type="comment" created="2017-08-09 07:34:55.0" updateauthor="gudkov" updated="2017-08-09 07:34:55.0"> <body><! CDATA  ~danielhardman   ~nage    Could you review this request and provide your oppinion?  ></body> </Action>
<Action id="29584" issue="20046" author="gudkov" type="comment" created="2017-08-09 07:37:02.0" updateauthor="gudkov" updated="2017-08-09 07:37:02.0"> <body><! CDATA  ~mgbailey   Could you describe your use case for retrieves the verkeys of the nodes in the validator pool?  ></body> </Action>
<Action id="29585" issue="20046" author="gudkov" type="comment" created="2017-08-09 09:18:56.0" updateauthor="gudkov" updated="2017-08-09 09:18:56.0"> <body><! CDATA  ~ashcherbakov   Could you review this also?  ></body> </Action>
<Action id="29595" issue="20046" author="danielhardman" type="comment" created="2017-08-09 13:06:51.0" updateauthor="danielhardman" updated="2017-08-09 13:06:51.0"> <body><! CDATA I can see how this work is desirable, but I don't think it's necessary. The reason is that I think it's already possible to create an arbitrary JSON message and submit it using libindy. If I am correct, then someone could use libindy to get node information and to submit a pool upgrade; we don't need to create special-purpose APIs to do it.  If I am correct about these steps being possible (but not convenient) with libindy today, then I am somewhat opposed to creating special-purpose APIs, because: A) it takes time and effort and is probably not the best use of our limited capabilities right now; B) the need to do a pool upgrade is very specialized; 99.9% of all software ever written against libindy should not need to do it; C) it makes it easier to mount an attack with a spurious pool upgrade (the attack would fail, but why create an API for people who want to try?); D) having less APIs in libindy is a desirable thing, because it decreases learning curve, version compatibility, documentation burden, and the complexity of writing wrappers.  If I am incorrect about these steps being possible, then I would prefer to implement the generic functionality instead of these specialized APIs.  ></body> </Action>
<Action id="29612" issue="20046" author="mgbailey" type="comment" created="2017-08-09 15:58:54.0" updateauthor="mgbailey" updated="2017-08-09 15:58:54.0"> <body><! CDATA I agree,  ~danielhardman .  I only need the tools to accomplish the task, not specialized APIs.  If I understand  ~gudkov  correctly, I can submit an upgrade transaction using existing functionality, but perhaps I cannot get the validator node information that I need to create the transaction. This ticket may be needed to enable me to get the validator node information.  Here is the use case I am currently pursuing:  Have a CLI app that will take the following user inputs: a genesis file, start time, trustee credential, and time interval. Use the sdk to fetch the current list of validator verkeys and use this in combination with the other inputs to create an upgrade transaction that the app will send to the pool using the sdk.  ></body> </Action>
<Action id="37949" issue="20046" author="seanbohan_sovrin" type="comment" created="2018-01-03 19:17:26.0" updateauthor="seanbohan_sovrin" updated="2018-01-03 19:17:26.0"> <body><! CDATA Slava - what would it take to get a command in the CLI for this - we don't want a transaction to be clear.      We want the ABILITY to get the key  ></body> </Action>
<Action id="37977" issue="20046" author="mgbailey" type="comment" body=" ~SeanBohan_Sovrin , what I want has changed over time.  It is this: I want to be able to read transactions from any of the 3 ledgers from a client application (via indy-sdk). Ideally, such reading would be according to criteria such as transaction number, dest, etc. This is a general-use capability that we should have, and using which we can accomplish things such as are asked for in this ticket.  Should we make a new ticket for this, and retire this one?" created="2018-01-03 23:05:29.0" updateauthor="mgbailey" updated="2018-01-03 23:05:29.0"/>
