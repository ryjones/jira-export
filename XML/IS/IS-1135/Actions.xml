<Action id="57685" issue="36613" author="esplinr" type="comment" created="2019-02-27 23:25:28.0" updateauthor="esplinr" updated="2019-02-27 23:25:28.0"> <body><! CDATA We agree that this is a problem, but fixing it can be complicated.  Tests need to be changed to either instantiate multiple wallets, or to only clean up the changes they make within a wallet rather than removing the wallet. Also, in order to speed up some tests, state that is the result of slow cryptographic operations may be shared.  Thanks for raising the concern. We'll continue to think about it as we look to improve our the test or wallet infrastructure. If anyone wants to tackle this sooner, let us know and we can discuss options.  ></body> </Action>
<Action id="57713" issue="36613" author="ignisvulpis" type="comment" created="2019-02-28 11:29:21.0" updateauthor="ignisvulpis" updated="2019-02-28 11:29:21.0"> <body><! CDATA Using global resources should be avoided in general.  Currently an application using libindy can only talk to one pool because the ledger version is global. Or all pools must have the same version.  Also genesis files at pool creation are stored in a common temporary file with a common name which might be overwritten if another pool is generated at the same in parallel.  The same is true for all indy api methods that use the OS environment. Another part of the app might have changed the environment of the process the app is running.  These are other issues though.  I agree that changing all tests is much work. Maybe switch to a test framework that allows setup and teardown of tests and while doing this change to test-specific names for currently global resources.  ></body> </Action>
<Action id="57864" issue="36613" author="ignisvulpis" type="comment" created="2019-03-05 11:50:34.0" updateauthor="ignisvulpis" updated="2019-03-05 11:50:34.0"> <body><! CDATA Could we establish a rule that new tests cleanup after themselves by deleting only what they created and not all wallets or all pools or whatever?  Like here:   https://github.com/hyperledger/indy-sdk/blob/595f4bad3931cd2a59748f1ac6f9f5e49c1ad69e/wrappers/rust/tests/wallet.rs#L97   This would be easier if there were a delete_wallet_by_handle method because most test have a handle but not the config.  Deleting exactly what was created would be a first step. Later we can cleanup the `cleanup` and `teardown` methods or remove them.  I don't agree that this task is complicated, it is 'just' a lot of boring work and it has to be done quickly (including review) because it changes a lot of code in a lot of files and that means that merge conflicts are likely the longer the process takes.     A subtask to this delete-only-what-you-created task could be returning the config as the fifth element of the returned tupel in  https://github.com/hyperledger/indy-sdk/blob/595f4bad3931cd2a59748f1ac6f9f5e49c1ad69e/libindy/tests/utils/anoncreds.rs#L457  and then use the config to delete the wallet. Next step then is to think whether the name is correct: is it really a common wallet for the tests? I think it is not or at least for most of the tests except maybe one or two. So I suggest to extract the code inside the block here  https://github.com/hyperledger/indy-sdk/blob/595f4bad3931cd2a59748f1ac6f9f5e49c1ad69e/libindy/tests/utils/anoncreds.rs#L464  into a init_test_wallet method(wallet_name: &str) for init_test_wallet to put into the config which is returned then then used to delete this wallet.  Alternatively init_test_wallet(config: &str) to pass in the config and not return it because it is already there at the caller of init_test_wallet. Or alternatively use the sequence crate to create a unique wallet-name and delete that. YMMW     ></body> </Action>
<Action id="62537" issue="36613" author="ignisvulpis" type="comment" created="2019-08-02 08:31:03.0" updateauthor="ignisvulpis" updated="2019-08-02 08:31:03.0"> <body><! CDATA Some of the work was done  https://github.com/hyperledger/indy-sdk/pull/1518      Global resources not being thread-safe is a problem e.g. {color:#172b4d}indy_set_protocol_version{color}  {color:#172b4d}That API methods should be deprecated and the protocol version an option to all calls that build requests differently depending on protocol version. {color}  {color:#172b4d}(Or build two versions of libindy, one for version 1 and one for version 2 and remove support for version 1 later.){color}     {color:#172b4d}Some tests use a common wallet because of performance reasons, revocation tests and search tests would take to long.{color}  ></body> </Action>
