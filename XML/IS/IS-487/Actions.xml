<Action id="37072" issue="25721" author="srottem" type="comment" body="Interesting idea (I assume you&apos;re referring to Semantic Versioning - or semver for short:  https://semver.org/).   It certainly seems feasible that over time schema will evolve and during that evolution claims adhering to different versions of the schema will be issued.  It also seems likely that claims for different versions of a schema may share a set of attributes that could be used to satisfy a proof request, so support for specifying a range of versions for a schema would seem to make a lot of sense. Semver would seem to be an reasonable mechanism for specifying versioning at first blush, as long as those that are writing the software for issuing proof requests for any given schema properly understand the evolution of that schema." created="2017-12-13 21:03:19.0" updateauthor="srottem" updated="2017-12-13 21:03:19.0"/>
<Action id="37073" issue="25721" author="swcurran" type="comment" body="Thanks for the reference  ~srottem  - yes, that&apos;s what I was thinking." created="2017-12-13 21:38:42.0" updateauthor="swcurran" updated="2017-12-13 21:38:42.0"/>
<Action id="37825" issue="25721" author="ashcherbakov" type="comment" created="2017-12-28 14:28:38.0" updateauthor="ashcherbakov" updated="2017-12-28 14:28:38.0"> <body><! CDATA Just a note: proof request supports filtering against any number of schemas (Schema's name-version-did). So, you can specify a list of Schemas, and all claims matching at least one of this Schemas will be returned. As a workaround one can create a proof request specifying all expected versions of Schema. But I agree that providing a functionality to specify just a range of versions makes sense and is a good idea.  ></body> </Action>
<Action id="37864" issue="25721" author="swcurran" type="comment" created="2017-12-29 21:03:52.0" updateauthor="swcurran" updated="2017-12-29 21:03:52.0"> <body><! CDATA I hadn't realized that a schema in a proof request could be referenced by a schema-key (name, version, schema-issuer-did) or a schema-seq-no. I thought it was just the schema-seq-no.  If that is the case and (presumably) with each claim in a wallet, all of the schema metadata is stored (schema-key and schema-seq-no), it should be pretty straight forward to use an implementation of semantic versioning within a Proof Request.  That is, wherever the schema-key is used, the version is a semantic version vs. a simple string. Of course, it's up to the schema-issuer to follow the semver.org versioning standard for this to be generally useful.  FYI: Here is a semver implementation at the database level for Postgres ( https://pgxn.org/dist/semver/doc/semver.html),  and another at the Rust level ( https://github.com/steveklabnik/semver).  Not sure if these are any good, just that they exist and might be able to be leveraged.  ></body> </Action>
