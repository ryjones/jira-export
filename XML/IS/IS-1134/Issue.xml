<Issue id="36612" key="IS-1134" number="1134" project="10401" reporter="ignisvulpis" creator="ignisvulpis" type="10005" summary="Introduce WalletHandle, CommandHandle, PoolHandle" priority="3" resolution="10000" status="10001" created="2019-01-09 16:55:47.0" updated="2019-06-24 15:30:39.0" resolutiondate="2019-06-24 15:30:39.0" votes="0" watches="2" workflowId="50738"> <description><! CDATA Currently all variables holding handles are i32 which seems to be the obvious choice for a C-callable API. But this choice trickled through all levels of the implementation which makes the variables easy to confuse e.g. use a wallet handled where a pool handle is required.  Instead of using i32 everywhere the code should use the types WalletHandle, CommandHandle and PoolHandle.     In a first step this can be done by defining  pub type WalletHandle = i32;  pub type PoolHandle = i32;  pub type CommandHandle = i32;  and replacing i32 by them. The next step then would be to use Rust's new-type pattern to create type-safe types. {{ https://rust-lang-nursery.github.io/api-guidelines/type-safety.html#c-newtype }}     Because the handles are used all over the code I suggest to do the changes over multiple PRs. Doing the replacement in one PR would require{{ a long review which is going to end in merge conflicts.     ></description> </Issue>
