<Issue id="22926" key="IS-403" number="403" project="10401" reporter="ashcherbakov" assignee="ashcherbakov" creator="ashcherbakov" type="10004" summary=" indy-crypto  BLS code crashes on negative test cases" priority="3" resolution="10000" status="10001" created="2017-10-30 08:37:46.0" updated="2018-01-11 14:34:02.0" resolutiondate="2017-12-12 12:32:41.0" votes="0" watches="1" workflowId="51123"> <description><! CDATA It turned out BLS code crashes when incorrect values are provided. There are tests that prove it: https://github.com/hyperledger/indy-plenum/blob/master/crypto/test/bls/indy_crypto/test_bls_crypto_indy_crypto.py -  - test_verify_invalid_signature - test_verify_invalid_pk - test_verify_invalid_short_signature - test_verify_invalid_long_signature - test_verify_invalid_short_pk - test_verify_invalid_long_pk - test_verify_invalid_multi_signature - test_verify_invalid_multi_signature_short - test_verify_invalid_multi_signature_long - test_verify_multi_signature_invalid_pk - test_verify_multi_signature_invalid_short_pk  There is a workaround in the current code that checks if length of BLS entity is not either 32 or 128 bits, then it doesn't pass it to libindy (looks like 32 is a length of signing key, and 128 is a length of other entities (points on the selected curve)) https://github.com/hyperledger/indy-plenum/blob/master/crypto/bls/indy_crypto/bls_crypto_indy_crypto.py#L38  ></description> </Issue>
