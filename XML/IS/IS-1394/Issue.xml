<Issue id="42665" key="IS-1394" number="1394" project="10401" reporter="sergey.minaev" assignee="artemkaaas" creator="sergey.minaev" type="10002" summary="LibVCX Aries: Implement Credential Presentation RFC" priority="3" resolution="10000" status="10001" created="2019-10-08 09:37:34.0" updated="2019-11-13 14:04:20.0" resolutiondate="2019-11-11 09:56:43.0" votes="0" watches="1" workflowId="55738"> <description><! CDATA Current VCX flow:  Verifier: 1) vcx_proof_create -> creates `Proof` state object associated with handle -> state.Initialized = 1 2) vcx_proof_send_request -> generates `proof request` message -> send `proof request` -> move state.OfferSent = 2 3) vcx_proof_update_state -> wait until get `proof` message -> move state.VcxStateAccepted = 4/ state.RequestReceived = 3 -> accumed that proccess is finished.  Prover: 1) vcx_disclosed_proof_get_requests -> asks agency for messages -> wait until get `proof request` ----> proof request json 2) vcx_disclosed_proof_create_with_request -> creates `DisclosedProof` state object associated with handle -> state.RequestReceived = 3 3) vcx_disclosed_proof_send_proof -> generates `proof` message -> send `proof` message -> move state.VcxStateAccepted = 4 -> accumed that proccess is finished. successfully???  Aries flow:  https://github.com/hyperledger/aries-rfcs/tree/master/features/0037-present-proof   Verifier: 1) vcx_proof_create -> creates `Proof` state object associated with handle -> state.Initialized = 1 2) vcx_proof_send_request -> generates `proof request` message -> send `proof request` -> move state.ProofRequestSent = 2 3) vcx_proof_update_state --> asks agency for messages by sending `GetMessages` command with status code `Pending`? -> (decrypt)  wait until get `proof` message -> move state.VcxStateAccepted = 4/ state.RequestReceived = 3 -> send `ack` or `reject` -->  send UpdateMessageStatus`  command to agenct with status code `Accepted`? -> accumed that proccess is finished.  Prover: 1) vcx_disclosed_proof_get_requests -> asks agency for messages by sending `GetMessages` command with status code `Pending`? -> (decrypt)  wait until get `proof request` ----> proof request json 2) vcx_disclosed_proof_create_with_request -> creates `DisclosedProof` state object associated with handle -> state.RequestReceived = 3 3) vcx_disclosed_proof_send_proof -> generates `proof` message -> send `proof` message -> move state.ProofSent = 4 -> send UpdateMessageStatus`  command to agenct with status code `Accepted`? 4) vcx_disclosed_proof_update_state ->asks agency for messages by sending `GetMessages` command with status code `Pending`? -> (decrypt)  wait until get ack -> move state.Accepted = 5/ state.Rejected = 3 -> send UpdateMessageStatus`  command to agenct with status code `Accepted`? -> accumed that proccess is finished. -> accumed that proccess is finished.  Already supported: - Message encryption/decryption:  https://github.com/hyperledger/aries-rfcs/tree/master/features/0019-encryption-envelope  - Message Id and Threading:  https://github.com/hyperledger/aries-rfcs/tree/master/concepts/0008-message-id-and-threading   Difference: 1) The format of outgoing and incoming messages are absolutely different.  2) Vcx packs messages according to pairwise DIDDoc stored in the state and sends them to pairwise remote endoint directly. NOT to it's own Agency. 3) Agency collects incoming messages in encoded view and with received status. Vcx gets them -> decodes them -> processes them -> sends updaes messages status command to Agency. 4) The genera VCXl flow is almost the same but only to complete the process: - Verifier has to send `ack` or `reject` message. - Prover has to wait for `ack` or `reject` message and set the final status based on the response type.  5) Verifier handles `proof_proposal` message. We need to decide either he should accept it and create proof request or reject. 6) Both sides can handle `proof_reject` message on every step.  ></description> </Issue>
