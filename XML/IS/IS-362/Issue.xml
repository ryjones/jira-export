<Issue id="21085" key="IS-362" number="362" project="10401" reporter="ashcherbakov" assignee="artemkaaas" creator="ashcherbakov" type="10002" summary="Pairwise: Create new methods in signus for better pairwise support" priority="3" resolution="10000" status="10001" created="2017-09-29 14:27:42.0" updated="2017-10-06 09:19:58.0" resolutiondate="2017-10-06 09:19:58.0" votes="0" watches="3" workflowId="51084"> <description><! CDATA We need to implement the following API methods in signus API to better support pairwise connections: # *indy_pairwise_init*(command_handle: i32, wallet_handle: i32, my_did_json: *const c_char, their_did_json: *const c_char, cb: Option<extern fn(xcommand_handle: i32, err: ErrorCode, my_did: *const c_char, my_verkey: *const c_char, my_pk: *const c_char)>) -> ErrorCode  The method will create and store my DID for their DID (call existing method); store their DID (call existing method); and store a map of my-to-their DIDs (pairwise). Everything is stored in the wallet since it's a point of correlation and must be protected. # *indy_pairwise_set_metadata*(did, metadata).... The method saved some data in the Wallet for a given DID (it can be some metadata for example). We save it in the wallet to avoid correlation. # *indy_pairwise_get_metadata*(did) -> metadata The method gets some metadata from the Wallet for a given DID  # *indy_pairwise_sign* (command_handle: i32, wallet_handle: i32, their_did: *const c_char, message_raw: *const u8, message_len: u32, cb: Option<extern fn(xcommand_handle: i32, err: ErrorCode, signature_raw: *const u8, signature_len: u32)>) -> ErrorCode { The method will find my DID associated with their DID (pairwise; see indy_init_pairwise_dids), and sign the message (call existing sign method) # *indy_pairwise_verify* # Most pribable we need the method to check that pairwise exists *indy_pairwise_exists*  ></description> </Issue>
