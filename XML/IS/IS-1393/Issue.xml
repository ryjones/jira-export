<Issue id="42664" key="IS-1393" number="1393" project="10401" reporter="sergey.minaev" assignee="kithat" creator="sergey.minaev" type="10002" summary="LibVCX Aries: Implement Credential Issuance RFC" priority="3" resolution="10000" status="10001" created="2019-10-08 09:36:37.0" updated="2019-11-11 09:57:08.0" resolutiondate="2019-11-11 09:57:08.0" votes="0" watches="1" workflowId="55737"> <description><! CDATA Current VCX flow:  Issuer: 1) vcx_issuer_create_credential -> creates `IssuerCredential` state object associated with handle -> state.Initialized = 1 2) vcx_issuer_send_credential_offer -> generates `offer` message -> send `offer` to pairwise -> move state.OfferSent = 2 3) vcx_issuer_credential_update_state -> wait until get `credential_request` message -> processes received data -> move state.VcxStateRequestReceived = 3 4) vcx_issuer_send_credential -> generates `credential` message -> send `credential` message -> move state.VcxStateAccepted = 4 -> assume that credential is issued 5) Python Demo does `vcx_issuer_credential_update_state` in the loop to wait until the state is equal to state.Accepted but it is already true..  Holder: 1) vcx_credential_get_offers -> asks agency for messages -> wait until get `offer` message ----> offer json 2) vcx_credential_create_with_offer -> creates `Credential` state object associated with handle -> state.VcxStateRequestReceived = 3 3) vcx_credential_send_request -> prepares and send `redential_request` message -> move state.OfferSent = 2 4) vcx_credential_update_state -> wait until get `credential` message -> processes data -> move state.VcxStateAccepted = 4 -> assume that the process is finished  Aries flow:  https://github.com/hyperledger/aries-rfcs/tree/master/features/0036-issue-credential   Issuer: 1) vcx_issuer_create_credential -> creates `IssuerCredential` state object associated with handle -> state.Initialized = 1 2) vcx_issuer_send_credential_offer -> generates `offer` message -> send `offer` to pairwise -> move state.OfferSent = 2 3) vcx_issuer_credential_update_state -> asks agency for messages by sending `GetMessages` command with status code `Pending`? -> (decrypt) until get `credential_request` message -> processes received data -> move state.RequestReceived = 3 4) vcx_issuer_send_credential -> generates `credential` message -> send `credential` message -> move state.CredentialSend = 4 -> send UpdateMessageStatus`  command to agenct with status code `Accepted`? 5) vcx_issuer_credential_update_state -> asks agency for messages by sending `GetMessages` command with status code `Pending`? -> (decrypt) wait until `ack` -> move state.Accepted = 5 -> send UpdateMessageStatus`  command to agenct with status code `Accepted`? -> assume that credential is issued  Holder: 1) vcx_credential_get_offers -> asks agency for messages by sending `GetMessages` command with status code `Pending`? -> (decrypt) wait until get `offer` message ----> offer json 2) vcx_credential_create_with_offer -> creates `Credential` state object associated with handle -> state.OfferReceived = 3 -> send UpdateMessageStatus`  command to agenct with status code `Accepted`? 3) vcx_credential_send_request -> prepares and send `redential_request` message -> move state.RequestSend = 2 4) vcx_credential_update_state -> asks agency for messages by sending `GetMessages` command with status code `Pending`? -> (decrypt) until get `credential` message -> processes data -> move state.CredentialReceived = 4 -> send `ack` message -> send UpdateMessageStatus`  command to agenct with status code `Accepted`? -> move state.Accepted = 5 -> assume that the process is finished  Already supported: - Message encryption/decryption:  https://github.com/hyperledger/aries-rfcs/tree/master/features/0019-encryption-envelope  - Message Id and Threading:  https://github.com/hyperledger/aries-rfcs/tree/master/concepts/0008-message-id-and-threading   Difference: 1) The format of outgoing and incoming messages are absolutely different.  2) Vcx packs messages according to pairwise DIDDoc stored in the state and sends them to pairwise remote endoint directly. NOT to it's own Agency. 3) Agency collects incoming messages in encoded view and with received status. Vcx gets them -> decodes them -> processes them -> sends updaes messages status command to Agency. 4) The general flow from VCX side is almost the same but only to complete the process: - Holder has to send `ack` message. - The issuer has to wait for `ack` message. 2) New functions to start the process with `credential_proposal` message: - Issuer: `vcx_issuer_get_credential_proposals` which acks agency for new messages and `vcx_issuer_create_credential_with_proposal` to create initial state. We need to decide either Issuer always accepts `credential_proposal` or reject in the initial implementation.  - Holder: `vcx_credential_create_with_proposal` to create initial state and `vcx_credential_send_proposal` to send it to pairwise connection.  5) New functions to start the process with `credential_request` message:  – Issuer `vcx_issuer_create_credential_with_request` create internal state object with state.RequestReceived = 3 - Holder ?  6) Handle `credential_reject` messages on every state.  ></description> </Issue>
