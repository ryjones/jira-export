<Action id="62626" issue="41533" author="artemkaaas" type="comment" created="2019-08-06 10:52:17.0" updateauthor="artemkaaas" updated="2019-08-06 12:49:22.0"> <body><! CDATA In the current state, Libvcx provides functionality for the publishing of 2 types of entities that can ve endorsed: * Schema * Credential Definition   There are similar functions for these entities `vcx_schema/credentialdef_create` which does building and sending of a transaction to the ledger at the same time.  I suggest: 1. adding of new functions  `vcx_schema/credentialdef_prepare_for_endorser` functions which only build correspondent request and sign by author.    {code:java} pub extern fn vcx_schema_prepare_for_endorser(command_handle: u32, source_id: *const c_char, schema_name: *const c_char, version: *const c_char, schema_data: *const c_char, endorser: *const c_char, cb: Option<extern fn(xcommand_handle: u32, err: u32,  schema_transaction: *const c_char)>) {code}   There are two options regarding `endorser`: * endorser can be explicitly passed as the parameter (as at the example above) * endorser can be specified either (as part of a config) on VCX initialization or `vcx_set_endorser`(new function)  and next used all times implicitly.   (probable add function to unset `endorser`)  2. adding of new function `vcx_endorse_transaction` which sign and send request from endorser side.    {code:java} pub extern fn vcx_endorse_transaction(command_handle: u32, transaction: *const c_char, cb: Option<extern fn(xcommand_handle: u32, err: u32)>) {code}   There is no support of NYM, Attrib, RevocReg transactions in the current state.    ~esplinr   ~DouglasWightman   ~sergey.minaev  what do you think?  ></body> </Action>
<Action id="62652" issue="41533" author="douglaswightman" type="comment" body="From the endorser side this all seems fine. The Schema is a pretty easy case and I think this will work well. However, if the endorser writes a cred_def to the ledger then there will be some bits of data needed by the other party (the non-endorser?) in order for them to have a valid VCX cred_def object for issuing credentials. In other words: How do these utilities translate to the non-endorser calling &quot;vcx_credentialdef_create()&quot; and getting back a valid cred_def handle that can be used when issuing/revoking?" created="2019-08-06 16:25:27.0" updateauthor="douglaswightman" updated="2019-08-06 16:25:27.0"/>
<Action id="62671" issue="41533" author="artemkaaas" type="comment" created="2019-08-07 06:02:58.0" updateauthor="artemkaaas" updated="2019-08-07 11:37:29.0"> <body><! CDATA Good point. I was thinking about the creation of the internal object state on `_prepare_for_endorser` and returning handle immediately.  I guess non-endorser already has all information required for issuing (need to recheck).   The question here if we need to introduce some `state` field that indicates that CredDef can be used for issuing (if it was published to the ledger) and `update_state` or 'check_is_published'  function to activete it.   * vcx_schema_prepare_for_endorser - prepare transaction, store object, set state as Built - can't be used for credential issuing * vcx_schema_update_state - check schema is published on the ledger, set state as Published * vcx_schema_get_state - get current state  ></body> </Action>
