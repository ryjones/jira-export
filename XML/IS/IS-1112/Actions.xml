<Action id="55480" issue="36128" author="artemkaaas" type="comment" created="2019-01-10 07:50:17.0" updateauthor="artemkaaas" updated="2019-01-10 07:50:17.0"> <body><! CDATA Hello,  ~olegwb . Thank you for such detailed description you provided.  I desperately agree with all the points you mentioned above.  It really makes sense to provide a more helpful test suite demonstrated the revocation process. Actually, these interaction.rs tests were mostly written to check base scenario and Ledger revocation related transactions work properly.  It's why they are not user-friendly and not cover complete revocation scenario regarding users.)  I suggest to split your work into the following steps: 1) fixe mistakes you have found in the already existing interaction tests and introduce improvements you want. send a PR with these changes. 2) send a new one PR with new revocation tests on Libindy level or wrappers. 3) optionally add revocation demo into samples folder  ></body> </Action>
<Action id="56493" issue="36128" author="olegwb" type="comment" body="The small fix is in PR, the big change is next to go" created="2019-02-01 10:51:54.0" updateauthor="olegwb" updated="2019-02-01 10:51:54.0"/>
<Action id="56614" issue="36128" author="olegwb" type="comment" created="2019-02-03 15:25:27.0" updateauthor="olegwb" updated="2019-02-03 15:25:27.0"> <body><! CDATA The refactoring is done, see   https://github.com/olegbou777/indy-sdk/blob/fix/is-1112/libindy/tests/interaction.rs     The test suite uses new objects : Issuer, Prover and Verifier. Their implementations are self-containing: the corresponding objects hold attributes which are in the local scope of a party. The interface methods use minimum of parameters which are normally exchanged between parties in the network protocol.  The new version removes a lot of the code repetition from the current version of the test. It demonstrates the actions and responsibilities of the parties exactly as they are designed in anonymous credential algorithms. The clarity of the test algorithm is improved substantially, so the addition of new tests to the suite  should be easy.    The small improvement has been added to the Prover's make_proof() algorithm. It adapts to whether the proof request contains predicates. That was hard-coded before.  It could make sense to extend this test suite with more revocation-related tests, e.g. issuing several credentials and revoking them out of order of issuance or something  ></body> </Action>
