<Issue id="31122" key="IS-783" number="783" project="10401" reporter="artemkaaas" creator="artemkaaas" type="10002" summary="Security: Wrap all secrets to structs with automatic zeroing on Drop" priority="3" status="3" created="2018-06-17 11:26:09.0" updated="2018-08-08 11:37:26.0" votes="0" watches="2" workflowId="51739"> <description><! CDATA Secrets in memory should be wiped as soon as possible.  It is much better for all return values in this  module|https://github.com/hyperledger/indy-sdk/tree/master/libindy/src/utils/crypto  to add wrapper types like it has been done in this  PR|https://github.com/hyperledger/indy-sdk/pull/833 .  It allows clean memory the proper way.  It required changes in both indy-crypto and indy-sdk  Major note from  ~MikeLodder  IS-785 {quote} We should double check that libindy does indeed erase memory when disposing of private keys. It looks like it assumes that Rust zeros RAM when dropping variables. If you move around a value it will only get dropped in the last spot it ended up and the rest keep copies until they're overwritten by other data. The way to work around this usually is to box the data, as moving around a pointer won't leak the actual data, and Drop can clear that only copy (assuming nobody else accessed it improperly and caused copies on their own). If you move a value, it gets copied to another location in memory and the old value is never dropped. Tons of things move in Rust, and auditing for it is likely to be fairly involved. At least this is what I have observed with Rust. {quote}  ></description> </Issue>
