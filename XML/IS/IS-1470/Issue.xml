<Issue id="44008" key="IS-1470" number="1470" project="10401" reporter="ianco" assignee="ianco" creator="ianco" type="10005" summary="Slow performance of anoncred-generated WQL for proof request" priority="2" resolution="10000" status="3" created="2020-01-16 22:41:48.0" updated="2020-01-22 11:39:27.0" resolutiondate="2020-01-16 22:43:37.0" votes="0" watches="3" timeoriginalestimate="28800" timeestimate="0" timespent="28800" workflowId="57874"> <description><! CDATA The WQL generated by anoncreds for a proof request generates a very poorly performing SQL on a wallet with a large number of credentials (> 100k creds), and the query slows linearly with the number of credentials, so as the wallet grows, the query slows.  With the BC Gov VON database (> 2 million credentials) this makes the proof request unusable.  The generated WQL checks for attribute existence first, and then filters on equality operators.  Reversing the order of these subqueries (equality first, then attribute existence) solves the performance issue.    The "attribute existence" check results in a large number of records (basically every credential of the requested type) which is then filtered using the equality operators (filters on values of specific attributes).  When reversing the order the query does the equality check first (value of specific attributes) which results in a much smaller number of records (ideally 1) which is then filtered by the "attribute existence".  Options to improve query performance:  Database indexes - I was able to gain marginal improvements by tuning the database indexes, but the "root cause" is the number of records selected in the initial part of the query, so this still suffered slow performance with large numbers of credentials.  WQL-to-SQL translation - this is done within the storage plug-in, and is a straightforward conversion.  The WQL structure determines the SQL structure exactly.  Since the storage plug-in only deals with low-level queries, the plug-in does not have any information about the nature of the query in order to do any optimization.  I have added sample WQL and SQL in comments (before and after optimizing).  Database structure - the database structure is restricted base on the requirements of indy-sdk: item content is encrypted, as are tag values.  The plug-in deals only with encrypted values and does not have information on the nature of the query.  There are only 2 tables involved in this query - item and tag_encrypted - so I don't think there's any optimization possible in the plug-in based on the information that's available.    ></description> </Issue>
