<Issue id="34943" key="IS-1051" number="1051" project="10401" reporter="ianco" creator="ianco" type="10006" summary="Implement standard test harness for plugged wallet storage" priority="3" status="10405" created="2018-10-28 20:32:42.0" updated="2019-10-10 12:24:42.0" votes="0" watches="1" workflowId="50713"> <description><! CDATA Implement a standard test suite for plugged storage to verify the plugged storage works, meets API standards and works within standard wallet scenarios.  One example is implemented in PR 1247 and described in  https://github.com/hyperledger/indy-hipe/pull/49  - this inserts a "shim" into existing unit tests so that tests written for the default storage can be leveraged against new storage plug-ins.  The advantages are that these test already exist, and new unit tests for the default storage can automatically be applied to storage plug-ins as well.  Another suggestion is: # Wallet storage test harness should be dedicated native library with one method {{test_wallet_storage(storage_type, options)}} # {{test_wallet_storage}} executes the short list of well documented test cases and generates report # Wallet storage test links libindy, test harness lib and wallet storage in the way he needs. Calls {{init}} function of storage and {{test_wallet_storage}} after it.  ... however this suggestion implies new development required, and must then be maintained in parallel with any new development.  A third suggestion is to use the CLI - build test scripts that run against the CLI to create and open storage, create DID's, etc, and ensure that these scripts can function using the default storage or any plug-in storage.  However the functionality available through the CLI is limited (for example anoncreds functions are not available) so CLI functionality would have to be extended to ensure that a comprehensive test suite could be built.  ></description> </Issue>
