<Action id="60355" issue="40036" author="sergey.minaev" type="comment" created="2019-05-24 13:26:55.0" updateauthor="sergey.minaev" updated="2019-05-24 13:26:55.0"> <body><! CDATA  ~burdettadam  I think expected behavior in the description is incorrect.  Please take into account the next scenario: *As a TRUST_ANCHOR (ENDORSER) I should be able to publish a DID with VerKey which is not in my wallet to introduce new user in the ledger without access to his private key*  ~esplinr  please correct me if I miss some requirements update for this topic  ></body> </Action>
<Action id="60391" issue="40036" author="lbendixsen" type="comment" created="2019-05-24 22:23:39.0" updateauthor="lbendixsen" updated="2019-05-24 22:23:39.0"> <body><! CDATA I don't think the scenario  ~sergey.minaev  mentioned relates to the issue presented in this ticket. Here is what happened to me:  With a TRUSTEE DID I needed to create a new TRUSTEE on the BuilderNet.  I opened my CLI, pool, and wallet.  I then did the following(this is an actual excerpt from when the error occurred):  pool(buildernet):wallet(testnet_wallet):indy> did list  +------------------------+-------------------------+----------+  | *Did*                                                 | *Verkey*                                        | *Metadata* |     +------------------------+-------------------------+----------+  | 5M3i1PbpvEQmTk25EmAY6N | ~7iwFwParUgTffA22Q5Tgvg | -        |  +------------------------+-------------------------+----------+  pool(buildernet):wallet(testnet_wallet):indy> did use 5M3i1PbpvEQmTk25EmAY6N  *Did "5M3i1PbpvEQmTk25EmAY6N" has been set as active*  pool(buildernet):wallet(testnet_wallet):did(5M3...Y6N):indy> ledger nym did=5M3i1PbpvEQmTk25EmAY6N verkey=~JapuLZRnHoWL8hz8cVwYya role=TRUSTEE  *Transaction has been rejected: client request invalid: InsufficientCorrectSignatures(0, 1)*     Despite the error that was returned, my Trustee DID has not worked since that command.  The ledger updated my trustee did with the new verkey:  pool(buildernet):wallet(testnet_wallet):indy> ledger get-nym did=5M3i1PbpvEQmTk25EmAY6N  *Following NYM has been received.*     *Data:*  +------------------------+-------------------------+---------+  | *Dest *                                            | *Verkey*                                         | *Role*    |  +------------------------+-------------------------+---------+  | 5M3i1PbpvEQmTk25EmAY6N | ~JapuLZRnHoWL8hz8cVwYya | TRUSTEE |  +------------------------+-------------------------+---------+     But my wallet still thinks it has the old verkey:  pool(buildernet):wallet(testnet_wallet):indy> did list  +------------------------+-------------------------+----------+  | *Did*                                                 | *Verkey*                                        | *Metadata* |     | 5M3i1PbpvEQmTk25EmAY6N | ~7iwFwParUgTffA22Q5Tgvg | -        |  +------------------------+-------------------------+----------+     Since the verkey that I accidentally updated on the ledger does not exist in my wallet, the command I sent should not have updated the ledger with that verkey. My TRUSTEE DID is now unusable.   ></body> </Action>
<Action id="60428" issue="40036" author="sergey.minaev" type="comment" created="2019-05-28 10:58:59.0" updateauthor="sergey.minaev" updated="2019-05-28 10:59:43.0"> <body><! CDATA  ~lbendixsen  the use case in my comment above is tied to the ticket as it results in the requirement: CLI must allow (in general) to send a NYM request with did/verkey pair regardless their present in the wallet. So we must not introduce check like "nym should not be sent if there is no particular did in the wallet".   ~burdettadam  could you be more explicit in "expected behavior": what do you mean by "anchored"? present in current wallet? present in any wallet? active did? smth else?  I can see some "improvements" here, but some of them produce incorrect restrinctions, others will allow to user to make very similar mistake  ></body> </Action>
<Action id="60444" issue="40036" author="burdettadam" type="comment" created="2019-05-28 17:35:40.0" updateauthor="burdettadam" updated="2019-05-28 17:37:43.0"> <body><! CDATA I would like to point out another bug with Lynn's example.  *pool(buildernet):wallet(testnet_wallet):did(5M3...Y6N):indy> ledger nym did=5M3i1PbpvEQmTk25EmAY6N verkey=~JapuLZRnHoWL8hz8cVwYya role=TRUSTEE*  because the verkey is used with a ~ at the beginning, the seed used to create the original "did" will not generate the correct keys to gain back access to the nym.  *Expected behavior:* I believe the main purpose of the cli is for trustee's and stewards to maintain the permissions of the ledger. With that purpose in mind, I think the cli should check the "did" being used(did use.. or the did whos signature will be in the signature field of the txn) is not the same as the did in the nym command( did= ...) if there is a verkey listed (verkey=... ) that is not the same as the current verkey for the did in use, the cli should warn of accidental nym verkey change (a verkey that you don't have in your wallet(loss of nym ownership)).  I believe there is a command in the cli that is used to rotate a nym's keys. when the nym command(ledger nym) is used with an active did(did use "did") to update the nym's(the same active did in the wallet and on the ledger) verkey, an incomplete key rotation is initialized and never finished. with the functionality of rotate key command, *I believe the manual attempt to rotate a nym's keys with nym command should be discouraged or disabled*. If there is not a rotate nym keys command I would change this issue to an enhancement request.   Sergey Minaev, yes, of course, I will explain my vocabulary:  * _"anchored"?_ Authorized did on the ledger (nym with a role that permits write actions). For example, when a cli is connected to a pool you can issue this comment, *ledger get-nym did=...* , and among the result will be a verkey for the nym(or anchored did). * _present in (the) current wallet?_ Reference to what secrets(seckey, link-key/master-key) and non-secrets(verkey..) are in my current (that was open with *wallet open* command, also indicated in the cli prompt wallet(ted)). The ability to show proof of ownership of public crypto primitive(did or cred_def or ...). For example. Did not present in the current wallet.   * _present in any wallet?_ Any wallet that is not your current wallet, that may exist in or outside your indy-sdk database.  * active did? The "did" that is used to sign the txn, activated with *did use* command. it is indicated in the cli prompt "did(..)".  *   _smth else?_ Not sure what this one is, Something else?   ></body> </Action>
<Action id="60480" issue="40036" author="esplinr" type="comment" created="2019-05-29 20:11:09.0" updateauthor="esplinr" updated="2019-05-29 20:11:09.0"> <body><! CDATA Talking with Lynn, the core of the problem is that the verkey on the ledger changed without the associated change in the wallet. The result is a non-functional Trustee.  The "ledger nym" command should not be able to rotate verkeys, rather the "did rotate-key" command should always be used.  Are there use cases where anyone would want to change the verkey with the ledger-nym command?  ></body> </Action>
<Action id="60500" issue="40036" author="sergey.minaev" type="comment" created="2019-05-30 10:56:58.0" updateauthor="sergey.minaev" updated="2019-05-30 10:58:57.0"> <body><! CDATA "ledger nym" command is a mirror for NYM transaction. I don't like the idea to change this approach and make this command something different against others commands from ledger module.  Draft idea (not sure is it good in general): May be it's better to have separate command which will not be able to rotate keys and allow only new nym publishing?  ></body> </Action>
<Action id="60762" issue="40036" author="esplinr" type="comment" created="2019-06-07 13:24:56.0" updateauthor="esplinr" updated="2019-06-07 13:25:22.0"> <body><! CDATA Use case:  It might be necessary for a trustee (or group of trustees) to rotate the nym of a third party in order to disable their nym.  Notes: * The CLI is designed for maximum flexibility in order to meet a wide range of use cases. Removing a capability from the CLI could close off use cases we haven't yet considered for a tool that is only now receiving widespread use. The number of use cases will actually increase as tools like this move from Indy to Aries. * Traditionally, it has not been designed to ensure the safety of the user. We should rethink the CLI design if that is a requirement. There are a variety of potentially dangerous commands that should be reconsidered. * The use case listed above could also be met with a custom transaction or a separate script, as the API would continue to allow this behavior.  ></body> </Action>
<Action id="61159" issue="40036" author="esplinr" type="comment" body="Discussing this issue with  ~mgbailey , he agrees that there might be some reasons to want to rotate the verkey only the ledger, but he also agrees there should be a clear warning that this can be a dangerous action. But we need to ensure that such prompts don&apos;t break batch mode scripts." created="2019-06-20 19:26:31.0" updateauthor="esplinr" updated="2019-06-20 19:28:15.0"/>
<Action id="62029" issue="40036" author="artemkaaas" type="comment" created="2019-07-23 07:08:55.0" updateauthor="artemkaaas" updated="2019-07-23 07:08:55.0"> <body><! CDATA I added an additional validation for `ledger nym` command:  CLI loads all DIDs stored in the wallet and then asks for user confirmation in case if `verkey` received from the wallet doesn't match to `verkey` used within the CLI command.  Here is PR: https://github.com/hyperledger/indy-sdk/pull/1712/files Build version: master-1195  ></body> </Action>
<Action id="62079" issue="40036" author="vladimirwork" type="comment" created="2019-07-24 12:36:05.0" updateauthor="vladimirwork" updated="2019-07-24 12:36:05.0"> <body><! CDATA Build Info: indy-cli 1.10.0~1198  Steps to Validate: 1. Try to change verkey for did that exists in wallet using ledger nym command.  Actual Results: There is a warning: {noformat} There is the same `DID` stored in the wallet but with different Verkey: "~6Rx3mNmxysETN7b5izeN3C" Do you really want to change Verkey on the ledger? (y/n) {noformat} Did rotate command works the same way as before this fix.    ></body> </Action>
