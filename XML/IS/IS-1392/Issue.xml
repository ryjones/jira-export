<Issue id="42663" key="IS-1392" number="1392" project="10401" reporter="sergey.minaev" assignee="artemkaaas" creator="sergey.minaev" type="10002" summary="Dummy cloud agent connection protocol" priority="3" resolution="10000" status="10001" created="2019-10-08 09:30:55.0" updated="2019-11-07 14:37:26.0" resolutiondate="2019-10-24 12:24:34.0" votes="0" watches="2" workflowId="55736"> <description><! CDATA LibVCX is initially designed to have a backend for mobile agent use case. In order to support Aries RFCs we have to update dummy agent to use them as  mediator|https://github.com/hyperledger/aries-rfcs/blob/master/concepts/0046-mediators-and-relays/README.md#scenario-2-a-gatekeeper   Draft Idea for flow: * dummy cloud agent registers VCX-based agent (proprietary protocol is acceptable) * while connection (DID Exchange) protocol, VCX use the cloud agent as mediator and list it in route keys  So from 3rd party Aries-compatible agent point of view, the pair of VCX-based mobile agent and Dummy cloud agent would look like Aries-compatible, but internally we can follow old protocol (introduced by Evernym) to deliver messages from the backend to mobile.  Agency side:     We can keep the common workflow as is.     We still can create Pairwise Agents on the initiation of connection or accepting an invitation but use it as a mediator only.  In the current state Pairwise Agents are already able - collect incoming messages - return collected messages - update status of received messages  The key difference is that we will not use Agency anymore for sending messages to another connection side, so we don't need to keep other side keys on the Agency. Vcx will do the message preparation and sending itself.  There is a problem with message forwarding:      Now DIDs must be used as target (`to` filed) according to Cross-Domain Messaging HIPE.  This problem is reflected in the issue: https://github.com/hyperledger/aries-rfcs/issues/255. Lovesh's suggestion sounds acceptable to us.    So, we need to change on Agency is making support of messages forwarding based on Verkey's (in addition to DID's based). It should be easy to distinguish because fully-qualified DID's must be used for a new protocol version.     Each message sent to our Pairwise Connection should be wrapper into 2 Forward messages and  Anonymously encrypted. {code:java} forward_message = {    "@type": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/routing/1.0/forward",    "to" : "Alice Pairwise Agent Verkey",    "msg" : encrypted_forward_inner_message }{code} {code:java} forward_inner_message = {    "@type": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/routing/1.0/forward",    "to" : "Alice Pairwise Verkey",    "msg" : encrypted_response  } {code} {code:java} response = {   .... } {code}    ></description> </Issue>
