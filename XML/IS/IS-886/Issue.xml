<Issue id="32815" key="IS-886" number="886" project="10401" reporter="rajeshkalaria" assignee="gudkov" creator="rajeshkalaria" type="10004" summary="libindy wallet api performance issue" priority="1" resolution="10000" status="10001" created="2018-08-14 11:56:33.0" updated="2018-08-29 11:29:40.0" resolutiondate="2018-08-29 11:29:40.0" votes="0" watches="2" workflowId="51504"> <description><! CDATA We are seeing some performance issue with libindy (we are using 1.6.1 as of now).  Imagine, that there are 10 clients, who has libvcx (either via connect.me, verity-ui or some other way), and they all are trying to call libvcx’s *_‘agent provisioning’_* api parallely. It will result into sending all below mentioned agency api calls (sequential for same user, parallel for different users).  For few parallel calls (like till 3-5), we don’t see any issue, but as soon as we start increasing number of parallel requests, we see agency api takes more than expected time and timing out (basically, at takes good amount of time like 5 seconds, 10 seconds, 15 seconds etc at different wallet operations mentioned below). Based on my log analysis, one or other libindy api calls (mentioned below) are talking time (this is still initial investigation). I have tried to switch from ‘mysql’ to ‘default’ wallet type just to see if there is any significant difference. But even with ‘default’ wallet type, we are seeing the same issue.  Intel(R) Core(TM) i7-4700HQ CPU @ 2.40GHz   We are only opening the wallet once (whether its agency’s wallet or user’s wallet)     Test results with different scenario: # When we only switched to libindy 1.6.2 (from 1.6.1) with default wallet, issue was still reproducing (so in a way we didn't see any observable difference) # Then when I added `key_derivation_method` = `ARAGON2I_INT` in credentials param {color:#0747a6}with 'default' wallet type{color}, {color:#de350b}only 10 parallel requests (the test case which we were trying from the beginning) works fine{color} (although api response time was still high, but somehow it was not that big enough and things were working fine). # When added `key_derivation_method` = `ARAGON2I_INT` in credentials param {color:#0747a6}with 'mysql' wallet type{color}, {color:#de350b}only 20-25 parallel requests (the test case which we were trying from the beginning) works fine{color} (although api response time was still high, but somehow it was not that big enough and things were working fine)  Indications: # Based on above test results, it seems core issue is still with libindy/wallet. # We can't use 'default' wallet, so for us, problem is still the same.     ------------------------------------------------------------------------------------------------------------  Below are the sequential api call libvcx makes for its *_‘agent provisioning’_* api.  For each below mentioned agency api, I have mentioned what are the wallet operation, which wallet it uses to help you/us troubleshoot the issue.     *Connect*      anon decrypt (uses agency agent wallet)      auth decrypt (uses agency agent wallet)      create new key (uses agency agent wallet)      store their key (uses agency agent wallet)      auth crypt response msg (uses agency agent wallet)     *Signup*      anon decrypt (uses agency agent wallet)      auth decrypt (uses agency agent wallet)      auth crypt response msg (uses agency agent wallet)     *CreateAgent (will create and open a new wallet)*      anon decrypt (uses agency agent wallet)      auth decrypt (uses agency agent wallet)      create new key (uses user agent wallet)      store their key (uses user agent wallet)      auth crypt response msg (uses agency agent wallet)     ></description> </Issue>
