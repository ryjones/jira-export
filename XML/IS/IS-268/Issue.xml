<Issue id="20030" key="IS-268" number="268" project="10401" reporter="gudkov" assignee="telegramsam" creator="gudkov" type="10006" summary="DID-TLS: Design" priority="3" status="3" created="2017-08-08 13:53:09.0" updated="2017-12-19 04:08:48.0" votes="0" watches="2" workflowId="51732"> <description><! CDATA We need to define approach of DID-TLS support in Indy SDK. It would be nice to provide some design document that we can discuss together and create the list of implementation stories or tasks.  For background on the DID-TLS specification see  here|https://docs.google.com/document/d/1-aPY1eeHdR_TnF7_WpEs58RZ_jNdDeptVrNEu3groFc/edit?usp=sharing .  The goal is to extend IndySDK to use this specification in both agent to agent communication and eventually agent to ledger as well. Currently IndySDK uses a patched version of CurveZMQ for those communications. At a high level the DID-TLS simply means that two systems will connect, authenticate and encrypt their communications using self-signed certificates found on Sovrin rather than using certificates signed by a central certificate authority.  Introducing DID-TLS to the IndySDK project will happen in phases, with later phases deprecating the work done in earlier phases. The first phase should include the following tasks: # Create a mechanism for storing and retrieving RSA certificates from the ledger. ## In the short-term this may be done as an ATTRIB. ## Ideally as part of the DDO. # Create a raw socket SSL/TLS library for use by IndySDK in its agent to agent communication. ## Enable sender customization of the SNI hint ### See the DID-TLS specification for more information. ### May include “knock twice” workaround ## Enable receiver parsing and handling of the SNI hint ### See the DID-TLS specification for more information. # Enable agent to agent communication to use either the new socket library or CurveZMQ. ## Will agents listen for incoming connections over both CurveZMQ and raw sockets?  ></description> </Issue>
