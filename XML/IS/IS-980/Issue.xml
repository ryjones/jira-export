<Issue id="33875" key="IS-980" number="980" project="10401" reporter="burdettadam" creator="burdettadam" type="10006" summary=" Suggestion : generate API and wrappers from specification file" description="As the Indy SDK is evolving quickly, its API changes very frequently.Currently, as no automation is in place, the boilerplate code for each function in `libindy/src/api/*.rs` needs to be manually written. This is sub-optimal not only in principle (all those functions look exactly the same, so they _should_ be automated), but also in practice, as developers might forget some pieces (e.g. some checks) and the addition of new features (e.g. more detailed logging or more runtime checks) becomes a _huge_ task.The absence of automation also means that all the wrappers need to be manually synced with every change. Currently only the NodeJS wrapper uses automation, but the source of that automation still needs to be synced with the API implementation.It might be worth exploring the possibility of defining the names of all functions, their categories (e.g. `anoncreds`, `wallet`, `ledger`, ...), the names and types of their parameters and returned values, in a single specification file, both machine-readable and human-readable (e.g. YAML), and then generate the `libindy/src/api` folder and all wrappers by merging this file with some templates (e.g.  mustache (https://mustache.github.io/)). Thus, this spec file would act as the single source of truth for the API declarations, removing the burden of keeping everything in sync.This would benefit not only the maintenance of the official API and wrappers, but also the maintenance of unofficial and internal bindings that products developed on top of the Indy SDK might need. These unofficial bindings could be generated from the official spec file in the same way as official wrappers are.A further improvement would be the documentation: if the spec file also contained the documentation associated with each function, parameter and return value, this documentation could then not only be automatically embedded in the source code of each wrapper using the most proper way (e.g. Javadoc for Java, docstrings for Python), but also used to generate some nice language-agnostic (or even language-specific, if deemed necessary) HTML documentation, which would be always up to date and could be hosted on GitHub Pages or somewhere else. Currently, no comprehensive and up-to-date documentation of all Indy SDK functions exists.If this approach happens to work well, it can later be extended by adding additional features. One could be declaring all error codes and messages and associating each function with the codes that it might generate. Another could be refining the type declarations for JSON-serialized parameter and return values, associating them with their internal structure, which would benefit the bindings in typed languages.What follows is an example of the YAML specification for the function `indy_create_and_store_my_did`. It is just an example, the actual structure might be different.```yaml- category: did  name: create_and_store_my_did  description: &gt;    Creates keys (signing and encryption keys) for a new    DID (owned by the caller of the library).    ... more documentation here ...  parameters:  - name: wallet    type: handle    description: wallet handle (created by open_wallet)  - name: did_info    type: json    subtype: MyDidInfo    description: identity information  returns:  - name: did    type: did    description: DID generated and stored in the wallet  - name: verkey    type: verkey    description: the verkey associated with the generated DID```" priority="3" status="10405" created="2018-09-18 17:34:50.0" updated="2019-03-29 21:04:25.0" votes="0" watches="1" workflowId="50699"/>
