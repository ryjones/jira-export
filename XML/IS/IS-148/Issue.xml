<Issue id="18581" key="IS-148" number="148" project="10401" reporter="tharmon" assignee="gudkov" creator="tharmon" type="10004" summary="Cannot compile SDK on Amazon Linux" priority="1" resolution="10000" status="10001" created="2017-06-22 20:52:19.0" updated="2017-07-03 13:42:53.0" resolutiondate="2017-07-03 13:42:53.0" votes="0" watches="5" workflowId="50908"> <environment><! CDATA Running in Amazon AWS  |AMI|{{amzn-ami-hvm-2017.03.0.20170417-x86_64-gp2 (ami-4191b524)}}| |Description|Amazon Linux AMI 2017.03.0.20170417 x86_64 HVM GP2| |Platform|Amazon Linux| |Image Size|8GB| |Instance Type|t2.nano|  ></environment> <description><! CDATA Currently, the instructions provided for installing the SDK appear to be Ubuntu centric. The Amazon Linux distribution is based on RHEL, which means some of the instructions will need to be changed.  h2. Issue  When I run {{cargo build}} I'm getting the following error:  {code} Compiling zmq v0.8.1 error: linking with `cc` failed: exit code: 1 | = note: "cc" "-Wl,--as-needed" "-Wl,-z,noexecstack" "-m64" "-L" "/home/libsovrin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib" "/home/libsovrin/src/indy-sdk/target/debug/build/zmq-a667f9003fbd3289/build_script_build-a667f9003fbd3289.0.o" "-o" "/home/libsovrin/src/indy-sdk/target/debug/build/zmq-a667f9003fbd3289/build_script_build-a667f9003fbd3289" "-Wl,--gc-sections" "-pie" "-nodefaultlibs" "-L" "/home/libsovrin/src/indy-sdk/target/debug/deps" "-L" "/usr/lib64" "-L" "/home/libsovrin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib" "-Wl,-Bstatic" "/home/libsovrin/src/indy-sdk/target/debug/deps/libzmq_sys-ffc76933d21fe191.rlib" "/home/libsovrin/src/indy-sdk/target/debug/deps/liblibc-f4ccf2fa58092d85.rlib" "/home/libsovrin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-f4594d3e53dcb114.rlib" "/home/libsovrin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/librand-1efbcfd8938372b6.rlib" "/home/libsovrin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libcollections-532a3dbf317eff86.rlib" "/home/libsovrin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd_unicode-cfbd6648f7db2ee5.rlib" "/home/libsovrin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libpanic_unwind-a0157c0ca919c364.rlib" "/home/libsovrin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libunwind-488b4ab4bd53a138.rlib" "/home/libsovrin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/liballoc-ca07b617414dd0fa.rlib" "/home/libsovrin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/liballoc_jemalloc-492d8ea7fa3384ff.rlib" "/home/libsovrin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/liblibc-88c194c15fdb6521.rlib" "/home/libsovrin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libcore-687e6a964d22cbb4.rlib" "/home/libsovrin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libcompiler_builtins-987729be881d4d32.rlib" "-Wl,-Bdynamic" "-l" "zmq" "-l" "util" "-l" "dl" "-l" "rt" "-l" "pthread" "-l" "gcc_s" "-l" "pthread" "-l" "c" "-l" "m" "-l" "rt" "-l" "pthread" "-l" "util" = note: /home/libsovrin/src/indy-sdk/target/debug/build/zmq-a667f9003fbd3289/build_script_build-a667f9003fbd3289.0.o: In function `build_script_build::main': /home/libsovrin/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.8.1/build.rs:8: undefined reference to `zmq_has' collect2: error: ld returned 1 exit status   error: aborting due to previous error  error: Could not compile `zmq`. {code}  We're failing at the link stage. If we take a look at the {{build.rs}} file, we find:  {code} # cfg(feature = "zmq_has")  fn main() { use std::ffi::CString;  for has in  "ipc", "pgm", "tipc", "norm", "curve", "gssapi" .into_iter() { if unsafe { zmq::zmq_has(CString::new(has.as_bytes()).unwrap().as_ptr()) } == 1 { println!("cargo:rustc-cfg=ZMQ_HAS_{}=\"1\"", has.to_uppercase()); } } }  # cfg(not(feature = "zmq_has"))  fn main() { {code}  This suggests the build process believes the {{zmq_has}} feature is enabled, and then attempts to call {{zmq_has()}}. The problem here is that the RHEL-based {{/usr/include/zmq.h}} does not list {{zmq_has()}} as being available. However, in Ubuntu 16.04, this function does exist in {{/usr/include/zmq.h}}.  Installed Package: {{zeromq3-devel-3.2.5-1.el6.x86_64}}  h2. System Setup  In order to set up the system, these are the steps that I followed:  * As user: ** {{curl https://sh.rustup.rs -sSf | sh}} * As {{root}}: ** Enable EPEL ** {{yum update}} ** {{yum groupinstall “Development Tools”}} ** {{yum install cmake pkgconfig libsodium-devel openssl-devel sqlite-devel zeromq3-devel}} * As user: ** Install repository from GitHub ** {{cd indy-sdk}} ** {{cargo build}}    ></description> </Issue>
