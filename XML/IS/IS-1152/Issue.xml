<Issue id="36953" key="IS-1152" number="1152" project="10401" reporter="smithbk" creator="smithbk" type="10005" summary="Need an API to get the latest timestamp across all validator nodes" priority="3" resolution="10000" status="10001" created="2019-01-18 20:33:28.0" updated="2019-01-21 19:28:37.0" resolutiondate="2019-01-21 19:28:37.0" votes="0" watches="2" workflowId="51682"> <description><! CDATA I have a use case in which a prover must generate a *single* proof, share it with multiple verifiers, and all verifiers MUST get the same verification result (true or false).  However, I don't know of a reasonable way to do this with the current APIs.  For example, consider the following sequence of events: 1. Alice generates a single proof P and shares it with Bob and Eve. 2. Bob successfully verifies P (i.e. verify returns true). 3. The issuer revokes Alice's credential which was used to generate proof P. 4. Eve unsuccessfully verifies P (i.e. verify returns false because of the revocation in step 3.)  Bob and Eve get different verification results which violates the MUST requirement above.  The `build_get_revoc_reg_delta_request` function accepts a `to` parameter which I believe (IIUC) can be used to at least partially solve this problem.  For example,  consider the following changes to the previous steps.  Let LT be the latest timestamp from the ledger. 1. Alice gets LT, generates a single proof P, and shares both P and LT with Bob and Eve.  2. Bob verifies P using LT as the "to" value to `build_get_revoc_reg_delta_request`.  It returns true. 3. The issuer revokes Alice's credential which was used to generate proof P. 4. Eve verifies P also using LT as the "to" value, so it also returns true.  However, there is still a problem if Bob and Eve query different validator nodes.  Consider the following sequence of events: 1. Alice's credential is revoked and is committed to the ledger on validator node V1. 2. Alice gets LT from V1, generates proof P and shares P and LT with Bob and Eve. 3. Bob verifies P using LT against node V1, returning false because of the revocation in step 1. 4. Eve verifies P using LT against node V2, returning true because the revocation has not yet been committed to node V2 (violating the MUST). 5. Revocation transaction from step 1 is committed to node V2.  The only way I know to eliminate the problem above is for Alice to use an LT value which is known to be committed to ALL validator nodes.  Let's call it the GLT (Global Latest Timestamp).  However, getting GLT using the current APIs is not possible, at least I don't see a way.  According to a comment in ledger.py, `to reduce pool load libindy sends read requests to one random node in the pool.`  So there is no way to control routing or broadcast in order to calculate this value efficiently, or even to know which validator node the response is from.  One other thing I should note about my use case is that the accuracy/responsiveness of GLT is not very critical.  For example, even if Alice got the GLT associated with a particular transaction 10 minutes after it was actually committed to all validator nodes, that would be OK.   ></description> </Issue>
