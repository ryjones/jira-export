<Action id="55908" issue="36953" author="lovesh" type="comment" created="2019-01-21 13:34:32.0" updateauthor="lovesh" updated="2019-01-21 14:34:20.0"> <body><! CDATA  ~smithbk  Even though this issue where validator node V1 has some data committed and validator node V2 does not is rare unless V2 is stuck or just started or disfunctional, a safer way  for Alice is to not just share the proof with Bob and Eve but also a state proof (different from proof over credentials) of the accumulator value with Bob and Eve. The state proof is merkle inclusion proof that asserts that certain entity does have a certain value in the merkle trie. The root in this merkle proof has an associated aggregate signature from a majority of nodes thus attesting that majority of nodes did agree to this state of the ledger (state trie to be precise). Additionally state proof also contains the timestamp when the mekrle root was created. The only data required to verify state proofs are BLS public keys of the validators and this public key set changes very gradually. Queries to the ledger usually return the data with such state proof with the exception of very recently written data (last 1-2 sec). Sequence of events for Alice, Bob and Eve  # Alice's credential is revoked and is committed to the ledger. # Alice queries the ledger (some node) for the accumulator value and expects a state proof. If it does not get a state proof, it repeats step 2 after waiting. # Alice now has the accumulator value A, with the state proof SP. # Alice now generates a proof P and shares P, accumulator value A and state proof SP with Bob. # Bob verifies that the state proof SP for accumulator value A and ensures that at the time mentioned in SP, the accumulator did have this value. Note that Bob does not need to communicate with any validator to verify the state proof as it will already have the validator's public keys (unless he is starting after very ling time). # Alice shares P, A and SP with Eve  # Eve also follows the same procedure Bob followed in step 5.  ></body> </Action>
<Action id="55931" issue="36953" author="smithbk" type="comment" created="2019-01-21 15:48:31.0" updateauthor="smithbk" updated="2019-01-21 15:48:31.0"> <body><! CDATA Thank you Lovesh.  One follow up question just to be certain.  In your step #5 you say "unless he is starting after very long time".  What happens in this case?  Does this open/crack the door to the possibility that two verifiers get different results?  The reason I'm asking is that in my use case it would be catastrophic if two verifiers got different results, no matter how remote the possibility.  ></body> </Action>
<Action id="55934" issue="36953" author="lovesh" type="comment" created="2019-01-21 16:16:07.0" updateauthor="lovesh" updated="2019-01-21 16:30:51.0"> <body><! CDATA Keith,  When a client starts up, it tries to connect to some validator nodes to make sure it knows about all validator nodes and their most recent keys.   If the client starts after a long time and it does not (or cannot) connect to validator nodes to sync up to find out about all nodes, it might not be able to validate the aggregate signature of the state proof since it might not have required/correct keys. Hence the client won't trust the state proof but won't be fooled into believing that proof is correct.  However there is a very remote possibility of an attack where the client knows about very old state of the ledger and most of the node it knows about have been compromised. Now in the actual ledger these nodes might have been kicked out and no longer part of the network but the client won't know this. Then the compromised nodes can present a false state proof and the client will trust. However this kind of situation will even affect clients which try to connect to nodes to sync up since comromised nodes will lie. Hence the solution is to have a reasonably new copy of the client source code/package which is signed by the network maintainers.  ></body> </Action>
<Action id="55950" issue="36953" author="smithbk" type="comment" body="Thanks Lovesh, makes sense." created="2019-01-21 19:26:07.0" updateauthor="smithbk" updated="2019-01-21 19:26:07.0"/>
