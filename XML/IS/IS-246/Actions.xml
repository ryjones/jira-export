<Action id="49424" issue="19569" author="esplinr" type="comment" created="2018-08-27 14:29:03.0" updateauthor="esplinr" updated="2018-08-27 14:29:03.0"> <body><! CDATA We don't think this proposal is the right approach to wallet access.  If we hear more requests for this type of API call, we will reevaluate doing it.  ></body> </Action>
<Action id="52924" issue="19569" author="burdettadam" type="comment" body="I think the ability to check the status(exists, open, closed) of a wallet is very important. I would like to have the design decision explained in detail. Is it a security feature I am unaware of?" created="2018-11-01 21:21:59.0" updateauthor="burdettadam" updated="2018-11-01 21:21:59.0"/>
<Action id="52946" issue="19569" author="gudkov" type="comment" created="2018-11-02 04:02:09.0" updateauthor="gudkov" updated="2018-11-02 04:02:09.0"> <body><! CDATA  ~burdettadam  Wallet access is handle based. Opening and closing are performed only by application by getting handle. As a result application always knows open/close status and you don’t need dedicated api for this.   Checking for existence can be done with create method as it returns corresponded error code. Very important is that libindy isn’t responsible for global wallets discovery. If you need to get list of existing wallets you need to store this list inside of application.   If you see any use cases that can’t be achieved by the current API let’s create a new user story and we will analyze it.   ></body> </Action>
<Action id="52982" issue="19569" author="burdettadam" type="comment" created="2018-11-02 16:45:53.0" updateauthor="burdettadam" updated="2018-11-02 16:45:53.0"> <body><! CDATA For a new user story I pose a question, does an open wallet have a timeout, will it in the future?  I think its a fair assumption that a developer working on an agency would assume there is a timeout or some other mechanism used to free up resources on an open wallet. This assumption comes from planning to have a million users with wallets.  The developer would need the suggested API if this timeout was implemented and he prefered not to do error based coding.  An argument for adoption. I think Indy-sdk should support as many coding styles as possible to eliminate the friction of developer adoption. The idea to not only suggest but enforce error based coding is very uncomfortable with me. In my opinion, the added code and overhead of try, catch, handle builds slower systems and does not support scalable paradigms.  I argue the main reason to have a wallet API is the public impression of indy-sdk. When I am evaluating a new project I look for a complete CRUD (create, read, update, delete) API. When there is an incomplete CRUD API, I assume its a new project with limited adoption. With our project, you can assume the lack of wallet API is a security feature, but then when you get into an open wallet and try to delete a did and see that method is non-existent as well as limited pool API, it becomes easier to disregard indy-sdk and its ideas as a serious project. Simply put, it looks bad to have incomplete API's and to restrict developer coding practices.   ></body> </Action>
<Action id="52983" issue="19569" author="gudkov" type="comment" created="2018-11-02 17:07:22.0" updateauthor="gudkov" updated="2018-11-02 17:07:22.0"> <body><! CDATA Hi, You just introduced a lot of new ideas here. Wallet should support some kind of timeouts, handle management API should follow some CRUD pattern, error codes are bad idea, libindy should be suitable for developers without understanding that close should be called after open, unix file API is too unsafe.   These ideas can be great and valuable, but old invalid task isn’t a good place to discuss. I suggest to introduce set of new user stories and HIPEs.   ></body> </Action>
