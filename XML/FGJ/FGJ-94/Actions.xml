<Action id="70442" issue="46172" author="bestbeforetoday" type="comment" body="The intention of the contract event listener is to allow business processes to be triggered in response to transactions. For example, a transaction is committed to record a customer orderer being placed, and a business process needs to be triggered (by a contract listener) to satisfy this order. So a contract event listener should only be triggered by successfully committed transactions, and this seems to be a bug in the Java SDK behaviour." created="2020-10-06 13:19:05.0" updateauthor="bestbeforetoday" updated="2020-10-06 13:19:05.0"/>
<Action id="70443" issue="46172" author="bestbeforetoday" type="comment" body="If you want to examine all transactions, including ones that are not successfully committed, you can use a block listener and iterate over all the transactions within the block." created="2020-10-06 13:20:21.0" updateauthor="bestbeforetoday" updated="2020-10-06 13:20:21.0"/>
<Action id="70449" issue="46172" author="yasser_mas" type="comment" created="2020-10-06 17:13:41.0" updateauthor="yasser_mas" updated="2020-10-06 17:13:41.0"> <body><! CDATA I think It would be better if contract events triggered for all transactions ( Valid or not ), because the event has transaction status already and I can check if the transaction is valid or not.   Also the second approach will not be suitable for my business case, because in contract event I can set the event payload which it will be processed/aggregated data from the tx execution, but block events I think it will provide only transaction parameters and read write set, I can't get the aggregated data like contract events.    ></body> </Action>
<Action id="70457" issue="46172" author="bestbeforetoday" type="comment" body="Peer eventing only delivers block events. Everything you see in the contract events presented to you by the SDK is contained within a block event, including the chaincode event payload. The one caveat to this is that the payload is not included in *filtered* events, only in *full* events." created="2020-10-07 11:23:53.0" updateauthor="bestbeforetoday" updated="2020-10-07 11:23:53.0"/>
