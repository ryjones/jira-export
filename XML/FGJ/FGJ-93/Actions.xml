<Action id="70359" issue="46102" author="denyeart" type="comment" body="Implementation in Node.js SDK was completed in FABN-1632 , would be good to have a similar implementation for Java SDK." created="2020-09-21 15:50:19.0" updateauthor="denyeart" updated="2020-09-21 15:50:19.0"/>
<Action id="70458" issue="46102" author="lesleyannj" type="comment" created="2020-10-07 13:10:17.0" updateauthor="lesleyannj" updated="2020-10-07 13:10:17.0"> <body><! CDATA Looking at the Java SDK code it appears a change is not required.    Java SDK: * It will try all the orderers when submitting a transaction so an offline orderer should not prevent successful transaction commit. * By default the order it tries orderers is randomised on every request.  In Summary: SDK needs to send a transaction to ordering, it pulls the list of all known orderers, randomizes the list, then rolls through 1-n.  I suppose if it tries them all it errors out.  Then next request (or if client retries) it'll randomize again and repeat.  So theoretically as long as 1 orderer is good, the transaction would succeed.  The one possible downside is performance...it'd keep trying the dead orderers over and over again (depending on how it randomized the list) and would need to wait however long for a failure before moving on.  Given above behaviour, it was agreed a change/modification is not critical.   ></body> </Action>
