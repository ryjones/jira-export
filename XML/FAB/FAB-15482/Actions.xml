<Action id="59950" issue="39780" author="rickr" type="comment" created="2019-05-13 12:46:17.0" updateauthor="rickr" updated="2019-05-13 12:48:31.0"> <body><! CDATA Peer or Orderer TLS  client key  is controlled by the application either by properties added clientKeyFile or clientKeyBytes for the default SD orderer addition. Similarly for the tls certificate clientCertBytes, clientCertFile. You can specify a default, for mspid, or specific endpoint   Example of this  for default :  https://github.com/hyperledger/fabric-sdk-java/blob/8044bac1bfe9baf9d6360b067e0d6b5445cc953d/src/test/java/org/hyperledger/fabric/sdkintegration/ServiceDiscoveryIT.java#L92   Example of peer overrides are in unit tests here (orderer should be no different):  https://github.com/hyperledger/fabric-sdk-java/blob/433432f4fb7f04251f40af0b2e1af96678169804/src/test/java/org/hyperledger/fabric/sdk/ChannelTest.java#L472-L572  Ultimately, if neither of this work the application can write it's very own SSDOrdererAddition as shown here:  https://github.com/hyperledger/fabric-sdk-java/blob/433432f4fb7f04251f40af0b2e1af96678169804/src/test/java/org/hyperledger/fabric/sdkintegration/ServiceDiscoveryIT.java#L124    ></body> </Action>
<Action id="59956" issue="39780" author="rickr" type="comment" body="My bad see the issue is with the CA certs. Still will need trace" created="2019-05-13 15:19:50.0" updateauthor="rickr" updated="2019-05-13 15:19:50.0"/>
<Action id="60025" issue="39780" author="rickr" type="comment" created="2019-05-15 12:35:41.0" updateauthor="rickr" updated="2019-05-15 12:35:41.0"> <body><! CDATA I've been mostly working this with Tim on rocketchat so just want to give a quick update.  I noticed in a trace enabled sdk log Tim provided the SDK is seeing from servicediscover  the same three  orderer endpoints listed with three different MSPids. This in the code will clobber that certs with the last MPSPID in the group,  cacerts being used.  CACerts are tied to the MSPID and orderer endponts with their mspids which is how they are associated.   {noformat} 2019-05-13 05:38:07,130{GMT} grpc-default-worker-ELG-1-2 DEBUG NettyClientHandler:216 -  id: 0x390bb7c2, L:/172.17.0.15:34886 - R:peer0.green-airline.com/10.107.167.115:7051  INBOUND HEADERS: streamId=13 headers=GrpcHttp2ResponseHeaders grpc-status: 0, grpc-message:   padding=0 endStream=true 2019-05-13 05:38:07,130{GMT} pool-2-thread-2 TRACE ServiceDiscovery:309 - Channel green discovered orderer MSPID: orderer3, endpoint: orderer1:7050 2019-05-13 05:38:07,130{GMT} pool-2-thread-2 TRACE ServiceDiscovery:309 - Channel green discovered orderer MSPID: orderer3, endpoint: orderer2:7050 2019-05-13 05:38:07,130{GMT} pool-2-thread-2 TRACE ServiceDiscovery:309 - Channel green discovered orderer MSPID: orderer3, endpoint: orderer3:7050 2019-05-13 05:38:07,130{GMT} pool-2-thread-2 TRACE ServiceDiscovery:309 - Channel green discovered orderer MSPID: orderer1, endpoint: orderer1:7050 2019-05-13 05:38:07,130{GMT} pool-2-thread-2 TRACE ServiceDiscovery:309 - Channel green discovered orderer MSPID: orderer1, endpoint: orderer2:7050 2019-05-13 05:38:07,130{GMT} pool-2-thread-2 TRACE ServiceDiscovery:309 - Channel green discovered orderer MSPID: orderer1, endpoint: orderer3:7050 2019-05-13 05:38:07,130{GMT} pool-2-thread-2 TRACE ServiceDiscovery:309 - Channel green discovered orderer MSPID: orderer2, endpoint: orderer1:7050 2019-05-13 05:38:07,130{GMT} pool-2-thread-2 TRACE ServiceDiscovery:309 - Channel green discovered orderer MSPID: orderer2, endpoint: orderer2:7050 2019-05-13 05:38:07,131{GMT} pool-2-thread-2 TRACE ServiceDiscovery:309 - Channel green discovered orderer MSPID: orderer2, endpoint: orderer3:7050 {noformat}  I have tried using BYFN etcDraft to see if that reproduce this.  JSDK servicediscovery does not show that behavior.  I think it's configured differently with respect to orderers to mspids.  It has all orderers in a single mspid group.   ~timpii   Having an independent discoveryclient output would I think help isolate.  If it too see's this or if the SDK is interpreting it wrong.  Also having a SDK at trace level and matching full debug log of  Peer (the one doing service discovery) would help.  Alternative would be a zipped up dockercompose network  that could reproduce.  ></body> </Action>
<Action id="60149" issue="39780" author="timpii" type="comment" created="2019-05-20 01:59:15.0" updateauthor="timpii" updated="2019-05-20 01:59:15.0"> <body><! CDATA I have been able to run the CLI discover config command. The output log is below. It clearly shows the information coming from the Peer has 3 endpoints for each of the 3 orderers. { 	"msps": { 		"further": { 			"name": "further", 			"root_certs":   				"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNQVENDQWVPZ0F3SUJBZ0lRVSt4RFN2Z1FFQm5ZaDREY2o4bzNZakFLQmdncWhrak9QUVFEQWpCcE1Rc3cKQ1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0JNS1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ4TU5VMkZ1SUVaeQpZVzVqYVhOamJ6RVVNQklHQTFVRUNoTUxablZ5ZEdobGNpNWpiMjB4RnpBVkJnTlZCQU1URG1OaExtWjFjblJvClpYSXVZMjl0TUI0WERURTVNRFV3T0RBNU1UTXdNRm9YRFRJNU1EVXdOVEE1TVRNd01Gb3dhVEVMTUFrR0ExVUUKQmhNQ1ZWTXhFekFSQmdOVkJBZ1RDa05oYkdsbWIzSnVhV0V4RmpBVUJnTlZCQWNURFZOaGJpQkdjbUZ1WTJsegpZMjh4RkRBU0JnTlZCQW9UQzJaMWNuUm9aWEl1WTI5dE1SY3dGUVlEVlFRREV3NWpZUzVtZFhKMGFHVnlMbU52CmJUQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJQVGZTK2R5ZUpVNUVINks3dG1pSThrMDV4Z0wKVkxnRkRhQzJ3RHJ3dGErcGg3NU1ZbEV1NE5GZTFRN0JkUzZMN3k3dUptTGsyWlJLWWNuYW9zZ2pWUHFqYlRCcgpNQTRHQTFVZER3RUIvd1FFQXdJQnBqQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBZ1lJS3dZQkJRVUhBd0V3CkR3WURWUjBUQVFIL0JBVXdBd0VCL3pBcEJnTlZIUTRFSWdRZ3Z6dldEWmxIdnM0RUFrUHBpZWRGZFFhdU5qUUQKdXJMU3NQbktQeVFnekxJd0NnWUlLb1pJemowRUF3SURTQUF3UlFJaEFNemZCbGFidVl4dVJYWmplRDNLdEZHNgpjK2NUQmdGMlhQZmpacFV2ckVKd0FpQkdpSExqQlhGa0RlTHB5Vk5ZeXFjRGtJTkw4akFEK0xnZ0JvQjYwUkRjCk1nPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=" 			 , 			"admins":   				"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNHekNDQWNLZ0F3SUJBZ0lSQU1FRm1RMFhQT1d3b0haakpQR0YzQm93Q2dZSUtvWkl6ajBFQXdJd2FURUwKTUFrR0ExVUVCaE1DVlZNeEV6QVJCZ05WQkFnVENrTmhiR2xtYjNKdWFXRXhGakFVQmdOVkJBY1REVk5oYmlCRwpjbUZ1WTJselkyOHhGREFTQmdOVkJBb1RDMloxY25Sb1pYSXVZMjl0TVJjd0ZRWURWUVFERXc1allTNW1kWEowCmFHVnlMbU52YlRBZUZ3MHhPVEExTURnd09URXpNREJhRncweU9UQTFNRFV3T1RFek1EQmFNR2N4Q3pBSkJnTlYKQkFZVEFsVlRNUk13RVFZRFZRUUlFd3BEWVd4cFptOXlibWxoTVJZd0ZBWURWUVFIRXcxVFlXNGdSbkpoYm1OcApjMk52TVE4d0RRWURWUVFMRXdaamJHbGxiblF4R2pBWUJnTlZCQU1NRVVGa2JXbHVRR1oxY25Sb1pYSXVZMjl0Ck1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRW1xT3p2VE41bE5RVzRKVmtoZjlsZG9VYjBZb0IKeUZqa0hwQUZSWDV5ZVh6SEE3VGdwVUZpZW1mMkRjR2lqQVJOK1p5TFptc3hsOXVoMTVORG9EWTNBS05OTUVzdwpEZ1lEVlIwUEFRSC9CQVFEQWdlQU1Bd0dBMVVkRXdFQi93UUNNQUF3S3dZRFZSMGpCQ1F3SW9BZ3Z6dldEWmxICnZzNEVBa1BwaWVkRmRRYXVOalFEdXJMU3NQbktQeVFnekxJd0NnWUlLb1pJemowRUF3SURSd0F3UkFJZ0tUV0sKcE9MNFYrU3kvc2hNWElISEhITm44ZWFGeFhXK1ZvUDNGZ3hKWDFFQ0lHTTEwcVAyb1VEa3A1RUc4aGhiYW92SAp6T0s4cGlYRHdrSTMzVFB0dVZYbgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==" 			 , 			"crypto_config": { 				"signature_hash_family": "SHA2", 				"identity_identifier_hash_function": "SHA256" 			}, 			"tls_root_certs":   				"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNRekNDQWVxZ0F3SUJBZ0lSQU1mZTR0LzlDL2xuWGxORG9KMjhQTU13Q2dZSUtvWkl6ajBFQXdJd2JERUwKTUFrR0ExVUVCaE1DVlZNeEV6QVJCZ05WQkFnVENrTmhiR2xtYjNKdWFXRXhGakFVQmdOVkJBY1REVk5oYmlCRwpjbUZ1WTJselkyOHhGREFTQmdOVkJBb1RDMloxY25Sb1pYSXVZMjl0TVJvd0dBWURWUVFERXhGMGJITmpZUzVtCmRYSjBhR1Z5TG1OdmJUQWVGdzB4T1RBMU1EZ3dPVEV6TURCYUZ3MHlPVEExTURVd09URXpNREJhTUd3eEN6QUoKQmdOVkJBWVRBbFZUTVJNd0VRWURWUVFJRXdwRFlXeHBabTl5Ym1saE1SWXdGQVlEVlFRSEV3MVRZVzRnUm5KaApibU5wYzJOdk1SUXdFZ1lEVlFRS0V3dG1kWEowYUdWeUxtTnZiVEVhTUJnR0ExVUVBeE1SZEd4elkyRXVablZ5CmRHaGxjaTVqYjIwd1dUQVRCZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFTcENKcHVQRVhybm1NTWdUOGwKUGdpdkFHV2JIZWZPN0VyK2hEODNFSWtCU1lvTzZxeUZPa25TZWkySFVUUnNRUzZWbVdGVkEraS8vUUt2cS90NQpxM2I2bzIwd2F6QU9CZ05WSFE4QkFmOEVCQU1DQWFZd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3SUdDQ3NHCkFRVUZCd01CTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3S1FZRFZSME9CQ0lFSUhMYU82UWRoczU0eVkxeWEwbksKTS9Cb0pGK1h1UnBuN2kwa0tQQkdITkNITUFvR0NDcUdTTTQ5QkFNQ0EwY0FNRVFDSUc2TUJGd3Zmb0k4em9wNgpyRUwrZzBsNnJmeUd1WWRoV0VGSUIvOHBUWTdOQWlCMkZJNXc4UnRiM1ZTalB3UFY3MW5lOTNaUUttcG1tdExSCmZCajVUU1c5NUE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==" 			 , 			"fabric_node_ous": { 				"enable": true, 				"client_ou_identifier": { 					"certificate": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNQVENDQWVPZ0F3SUJBZ0lRVSt4RFN2Z1FFQm5ZaDREY2o4bzNZakFLQmdncWhrak9QUVFEQWpCcE1Rc3cKQ1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0JNS1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ4TU5VMkZ1SUVaeQpZVzVqYVhOamJ6RVVNQklHQTFVRUNoTUxablZ5ZEdobGNpNWpiMjB4RnpBVkJnTlZCQU1URG1OaExtWjFjblJvClpYSXVZMjl0TUI0WERURTVNRFV3T0RBNU1UTXdNRm9YRFRJNU1EVXdOVEE1TVRNd01Gb3dhVEVMTUFrR0ExVUUKQmhNQ1ZWTXhFekFSQmdOVkJBZ1RDa05oYkdsbWIzSnVhV0V4RmpBVUJnTlZCQWNURFZOaGJpQkdjbUZ1WTJsegpZMjh4RkRBU0JnTlZCQW9UQzJaMWNuUm9aWEl1WTI5dE1SY3dGUVlEVlFRREV3NWpZUzVtZFhKMGFHVnlMbU52CmJUQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJQVGZTK2R5ZUpVNUVINks3dG1pSThrMDV4Z0wKVkxnRkRhQzJ3RHJ3dGErcGg3NU1ZbEV1NE5GZTFRN0JkUzZMN3k3dUptTGsyWlJLWWNuYW9zZ2pWUHFqYlRCcgpNQTRHQTFVZER3RUIvd1FFQXdJQnBqQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBZ1lJS3dZQkJRVUhBd0V3CkR3WURWUjBUQVFIL0JBVXdBd0VCL3pBcEJnTlZIUTRFSWdRZ3Z6dldEWmxIdnM0RUFrUHBpZWRGZFFhdU5qUUQKdXJMU3NQbktQeVFnekxJd0NnWUlLb1pJemowRUF3SURTQUF3UlFJaEFNemZCbGFidVl4dVJYWmplRDNLdEZHNgpjK2NUQmdGMlhQZmpacFV2ckVKd0FpQkdpSExqQlhGa0RlTHB5Vk5ZeXFjRGtJTkw4akFEK0xnZ0JvQjYwUkRjCk1nPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=", 					"organizational_unit_identifier": "client" 				}, 				"peer_ou_identifier": { 					"certificate": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNQVENDQWVPZ0F3SUJBZ0lRVSt4RFN2Z1FFQm5ZaDREY2o4bzNZakFLQmdncWhrak9QUVFEQWpCcE1Rc3cKQ1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0JNS1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ4TU5VMkZ1SUVaeQpZVzVqYVhOamJ6RVVNQklHQTFVRUNoTUxablZ5ZEdobGNpNWpiMjB4RnpBVkJnTlZCQU1URG1OaExtWjFjblJvClpYSXVZMjl0TUI0WERURTVNRFV3T0RBNU1UTXdNRm9YRFRJNU1EVXdOVEE1TVRNd01Gb3dhVEVMTUFrR0ExVUUKQmhNQ1ZWTXhFekFSQmdOVkJBZ1RDa05oYkdsbWIzSnVhV0V4RmpBVUJnTlZCQWNURFZOaGJpQkdjbUZ1WTJsegpZMjh4RkRBU0JnTlZCQW9UQzJaMWNuUm9aWEl1WTI5dE1SY3dGUVlEVlFRREV3NWpZUzVtZFhKMGFHVnlMbU52CmJUQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJQVGZTK2R5ZUpVNUVINks3dG1pSThrMDV4Z0wKVkxnRkRhQzJ3RHJ3dGErcGg3NU1ZbEV1NE5GZTFRN0JkUzZMN3k3dUptTGsyWlJLWWNuYW9zZ2pWUHFqYlRCcgpNQTRHQTFVZER3RUIvd1FFQXdJQnBqQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBZ1lJS3dZQkJRVUhBd0V3CkR3WURWUjBUQVFIL0JBVXdBd0VCL3pBcEJnTlZIUTRFSWdRZ3Z6dldEWmxIdnM0RUFrUHBpZWRGZFFhdU5qUUQKdXJMU3NQbktQeVFnekxJd0NnWUlLb1pJemowRUF3SURTQUF3UlFJaEFNemZCbGFidVl4dVJYWmplRDNLdEZHNgpjK2NUQmdGMlhQZmpacFV2ckVKd0FpQkdpSExqQlhGa0RlTHB5Vk5ZeXFjRGtJTkw4akFEK0xnZ0JvQjYwUkRjCk1nPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=", 					"organizational_unit_identifier": "peer" 				} 			} 		}, 		"green-agencies": { 			"name": "green-agencies", 			"root_certs":   				"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNXVENDQWdDZ0F3SUJBZ0lSQUxPVkdUdmt1ai9SQ2xjYlNPeDZZSEV3Q2dZSUtvWkl6ajBFQXdJd2R6RUwKTUFrR0ExVUVCaE1DVlZNeEV6QVJCZ05WQkFnVENrTmhiR2xtYjNKdWFXRXhGakFVQmdOVkJBY1REVk5oYmlCRwpjbUZ1WTJselkyOHhHekFaQmdOVkJBb1RFbWR5WldWdUxXRm5aVzVqYVdWekxtTnZiVEVlTUJ3R0ExVUVBeE1WClkyRXVaM0psWlc0dFlXZGxibU5wWlhNdVkyOXRNQjRYRFRFNU1EVXdPREE1TVRNd01Gb1hEVEk1TURVd05UQTUKTVRNd01Gb3dkekVMTUFrR0ExVUVCaE1DVlZNeEV6QVJCZ05WQkFnVENrTmhiR2xtYjNKdWFXRXhGakFVQmdOVgpCQWNURFZOaGJpQkdjbUZ1WTJselkyOHhHekFaQmdOVkJBb1RFbWR5WldWdUxXRm5aVzVqYVdWekxtTnZiVEVlCk1Cd0dBMVVFQXhNVlkyRXVaM0psWlc0dFlXZGxibU5wWlhNdVkyOXRNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkkKemowREFRY0RRZ0FFRWlBeDhycDRtTWJUT2NWaXh6S2QvQ2piclV5aTJRSmtBWXQwZWNweWJnWW1qbTBDalhHeQpwMEtaanJ4Vm9JYTNNZVdhbUhKeklxRUJLMi92MVlSL2U2TnRNR3N3RGdZRFZSMFBBUUgvQkFRREFnR21NQjBHCkExVWRKUVFXTUJRR0NDc0dBUVVGQndNQ0JnZ3JCZ0VGQlFjREFUQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01Da0cKQTFVZERnUWlCQ0N5bVlRQklJaVFSVVRYUEVsODFlc2dKY1BYakRIWGgyLzZVQTdONkhUU2ZEQUtCZ2dxaGtqTwpQUVFEQWdOSEFEQkVBaUFzWmRiL2g1bWZjM2RhSXBGOVVNUHdHNHpEdVNka0JSV2VrU3JML3pxaWVnSWdlSUlKCmovMkorY1EwTnRvbHFzaFloZ0lJZDVzL1hOeDdCdVF6Y3BoTURWaz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=" 			 , 			"admins":   				"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNNVENDQWRlZ0F3SUJBZ0lSQU1mRHJ1S0ZxT0JsMForcTRiL3J5T1F3Q2dZSUtvWkl6ajBFQXdJd2R6RUwKTUFrR0ExVUVCaE1DVlZNeEV6QVJCZ05WQkFnVENrTmhiR2xtYjNKdWFXRXhGakFVQmdOVkJBY1REVk5oYmlCRwpjbUZ1WTJselkyOHhHekFaQmdOVkJBb1RFbWR5WldWdUxXRm5aVzVqYVdWekxtTnZiVEVlTUJ3R0ExVUVBeE1WClkyRXVaM0psWlc0dFlXZGxibU5wWlhNdVkyOXRNQjRYRFRFNU1EVXdPREE1TVRNd01Gb1hEVEk1TURVd05UQTUKTVRNd01Gb3diakVMTUFrR0ExVUVCaE1DVlZNeEV6QVJCZ05WQkFnVENrTmhiR2xtYjNKdWFXRXhGakFVQmdOVgpCQWNURFZOaGJpQkdjbUZ1WTJselkyOHhEekFOQmdOVkJBc1RCbU5zYVdWdWRERWhNQjhHQTFVRUF3d1lRV1J0CmFXNUFaM0psWlc0dFlXZGxibU5wWlhNdVkyOXRNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUUKSm85c1Z3M2hDdjI0RVpQbVkwb1gyeG01dUZZWEVnVlF1bVVwZEZMVDc2UDNoTXd1ZndUaDZQR0lxUGg5SXlhcQoxYWRPUEdUamc4UEFNTDl4UFRQclpxTk5NRXN3RGdZRFZSMFBBUUgvQkFRREFnZUFNQXdHQTFVZEV3RUIvd1FDCk1BQXdLd1lEVlIwakJDUXdJb0Fnc3BtRUFTQ0lrRVZFMXp4SmZOWHJJQ1hEMTR3eDE0ZHYrbEFPemVoMDBud3cKQ2dZSUtvWkl6ajBFQXdJRFNBQXdSUUloQU1sZ1dabG1adFlCb3lqbkJsNHQzQ24zeElsT1NhZERYYnBaQm1Tcwp4WlZMQWlCNGxQWThmMXJnT3J2ZUdWbmFmRWpFZFRTd2JkQzY3cGN5MHd0Ymk0TmZkUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K" 			 , 			"crypto_config": { 				"signature_hash_family": "SHA2", 				"identity_identifier_hash_function": "SHA256" 			}, 			"tls_root_certs":   				"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNYakNDQWdXZ0F3SUJBZ0lRTzRUaG1oazFrUzQ3M01JcERZSUdZREFLQmdncWhrak9QUVFEQWpCNk1Rc3cKQ1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0JNS1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ4TU5VMkZ1SUVaeQpZVzVqYVhOamJ6RWJNQmtHQTFVRUNoTVNaM0psWlc0dFlXZGxibU5wWlhNdVkyOXRNU0V3SHdZRFZRUURFeGgwCmJITmpZUzVuY21WbGJpMWhaMlZ1WTJsbGN5NWpiMjB3SGhjTk1Ua3dOVEE0TURreE16QXdXaGNOTWprd05UQTEKTURreE16QXdXakI2TVFzd0NRWURWUVFHRXdKVlV6RVRNQkVHQTFVRUNCTUtRMkZzYVdadmNtNXBZVEVXTUJRRwpBMVVFQnhNTlUyRnVJRVp5WVc1amFYTmpiekViTUJrR0ExVUVDaE1TWjNKbFpXNHRZV2RsYm1OcFpYTXVZMjl0Ck1TRXdId1lEVlFRREV4aDBiSE5qWVM1bmNtVmxiaTFoWjJWdVkybGxjeTVqYjIwd1dUQVRCZ2NxaGtqT1BRSUIKQmdncWhrak9QUU1CQndOQ0FBVFFLK0FiUGpvc2FjUEhSVWRtYktPSGdkYUdCT1huZ2RNZndmblZHSWRqVVVjcApLTDdEMmpWQ01GS2FrNTVyZjBEWjJISGtQVitTL054b2JsbjRiS2hFbzIwd2F6QU9CZ05WSFE4QkFmOEVCQU1DCkFhWXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0lHQ0NzR0FRVUZCd01CTUE4R0ExVWRFd0VCL3dRRk1BTUIKQWY4d0tRWURWUjBPQkNJRUlJcmErVXE1TWk3Z2d1RXhhNXRBRTUvaGtRUU54cWJTRGFGVkdsbWpZWER2TUFvRwpDQ3FHU000OUJBTUNBMGNBTUVRQ0lIcnBVZ3VxWlUxTC9NSzduVWpSdXBwSnUxYldCUFd5NTgzMUpBQTB6Ylo2CkFpQURTQVB4L3lxd1diOUFSRzVpVVpLaHBhZUwzNzUwYUJuOFJwcTdWTHdxSVE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==" 			 , 			"fabric_node_ous": { 				"enable": true, 				"client_ou_identifier": { 					"certificate": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNXVENDQWdDZ0F3SUJBZ0lSQUxPVkdUdmt1ai9SQ2xjYlNPeDZZSEV3Q2dZSUtvWkl6ajBFQXdJd2R6RUwKTUFrR0ExVUVCaE1DVlZNeEV6QVJCZ05WQkFnVENrTmhiR2xtYjNKdWFXRXhGakFVQmdOVkJBY1REVk5oYmlCRwpjbUZ1WTJselkyOHhHekFaQmdOVkJBb1RFbWR5WldWdUxXRm5aVzVqYVdWekxtTnZiVEVlTUJ3R0ExVUVBeE1WClkyRXVaM0psWlc0dFlXZGxibU5wWlhNdVkyOXRNQjRYRFRFNU1EVXdPREE1TVRNd01Gb1hEVEk1TURVd05UQTUKTVRNd01Gb3dkekVMTUFrR0ExVUVCaE1DVlZNeEV6QVJCZ05WQkFnVENrTmhiR2xtYjNKdWFXRXhGakFVQmdOVgpCQWNURFZOaGJpQkdjbUZ1WTJselkyOHhHekFaQmdOVkJBb1RFbWR5WldWdUxXRm5aVzVqYVdWekxtTnZiVEVlCk1Cd0dBMVVFQXhNVlkyRXVaM0psWlc0dFlXZGxibU5wWlhNdVkyOXRNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkkKemowREFRY0RRZ0FFRWlBeDhycDRtTWJUT2NWaXh6S2QvQ2piclV5aTJRSmtBWXQwZWNweWJnWW1qbTBDalhHeQpwMEtaanJ4Vm9JYTNNZVdhbUhKeklxRUJLMi92MVlSL2U2TnRNR3N3RGdZRFZSMFBBUUgvQkFRREFnR21NQjBHCkExVWRKUVFXTUJRR0NDc0dBUVVGQndNQ0JnZ3JCZ0VGQlFjREFUQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01Da0cKQTFVZERnUWlCQ0N5bVlRQklJaVFSVVRYUEVsODFlc2dKY1BYakRIWGgyLzZVQTdONkhUU2ZEQUtCZ2dxaGtqTwpQUVFEQWdOSEFEQkVBaUFzWmRiL2g1bWZjM2RhSXBGOVVNUHdHNHpEdVNka0JSV2VrU3JML3pxaWVnSWdlSUlKCmovMkorY1EwTnRvbHFzaFloZ0lJZDVzL1hOeDdCdVF6Y3BoTURWaz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=", 					"organizational_unit_identifier": "client" 				}, 				"peer_ou_identifier": { 					"certificate": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNXVENDQWdDZ0F3SUJBZ0lSQUxPVkdUdmt1ai9SQ2xjYlNPeDZZSEV3Q2dZSUtvWkl6ajBFQXdJd2R6RUwKTUFrR0ExVUVCaE1DVlZNeEV6QVJCZ05WQkFnVENrTmhiR2xtYjNKdWFXRXhGakFVQmdOVkJBY1REVk5oYmlCRwpjbUZ1WTJselkyOHhHekFaQmdOVkJBb1RFbWR5WldWdUxXRm5aVzVqYVdWekxtTnZiVEVlTUJ3R0ExVUVBeE1WClkyRXVaM0psWlc0dFlXZGxibU5wWlhNdVkyOXRNQjRYRFRFNU1EVXdPREE1TVRNd01Gb1hEVEk1TURVd05UQTUKTVRNd01Gb3dkekVMTUFrR0ExVUVCaE1DVlZNeEV6QVJCZ05WQkFnVENrTmhiR2xtYjNKdWFXRXhGakFVQmdOVgpCQWNURFZOaGJpQkdjbUZ1WTJselkyOHhHekFaQmdOVkJBb1RFbWR5WldWdUxXRm5aVzVqYVdWekxtTnZiVEVlCk1Cd0dBMVVFQXhNVlkyRXVaM0psWlc0dFlXZGxibU5wWlhNdVkyOXRNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkkKemowREFRY0RRZ0FFRWlBeDhycDRtTWJUT2NWaXh6S2QvQ2piclV5aTJRSmtBWXQwZWNweWJnWW1qbTBDalhHeQpwMEtaanJ4Vm9JYTNNZVdhbUhKeklxRUJLMi92MVlSL2U2TnRNR3N3RGdZRFZSMFBBUUgvQkFRREFnR21NQjBHCkExVWRKUVFXTUJRR0NDc0dBUVVGQndNQ0JnZ3JCZ0VGQlFjREFUQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01Da0cKQTFVZERnUWlCQ0N5bVlRQklJaVFSVVRYUEVsODFlc2dKY1BYakRIWGgyLzZVQTdONkhUU2ZEQUtCZ2dxaGtqTwpQUVFEQWdOSEFEQkVBaUFzWmRiL2g1bWZjM2RhSXBGOVVNUHdHNHpEdVNka0JSV2VrU3JML3pxaWVnSWdlSUlKCmovMkorY1EwTnRvbHFzaFloZ0lJZDVzL1hOeDdCdVF6Y3BoTURWaz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=", 					"organizational_unit_identifier": "peer" 				} 			} 		}, 		"green-airline": { 			"name": "green-airline", 			"root_certs":   				"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNWakNDQWZ5Z0F3SUJBZ0lSQU02YUpuNzR4QXJIckphZFlZRlZPUTh3Q2dZSUtvWkl6ajBFQXdJd2RURUwKTUFrR0ExVUVCaE1DVlZNeEV6QVJCZ05WQkFnVENrTmhiR2xtYjNKdWFXRXhGakFVQmdOVkJBY1REVk5oYmlCRwpjbUZ1WTJselkyOHhHakFZQmdOVkJBb1RFV2R5WldWdUxXRnBjbXhwYm1VdVkyOXRNUjB3R3dZRFZRUURFeFJqCllTNW5jbVZsYmkxaGFYSnNhVzVsTG1OdmJUQWVGdzB4T1RBMU1EZ3dPVEV6TURCYUZ3MHlPVEExTURVd09URXoKTURCYU1IVXhDekFKQmdOVkJBWVRBbFZUTVJNd0VRWURWUVFJRXdwRFlXeHBabTl5Ym1saE1SWXdGQVlEVlFRSApFdzFUWVc0Z1JuSmhibU5wYzJOdk1Sb3dHQVlEVlFRS0V4Rm5jbVZsYmkxaGFYSnNhVzVsTG1OdmJURWRNQnNHCkExVUVBeE1VWTJFdVozSmxaVzR0WVdseWJHbHVaUzVqYjIwd1dUQVRCZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUIKQndOQ0FBVE4vWStueFlGWkh3YkVIRStxdkd1dnZNelkxd3QwYnZOTWxWbVdybVJzc1NOejJQaEllMER0SmJ4cgpCZUJuT25TQjA1cVhpckZ2N1k3a05xeWZGekpRbzIwd2F6QU9CZ05WSFE4QkFmOEVCQU1DQWFZd0hRWURWUjBsCkJCWXdGQVlJS3dZQkJRVUhBd0lHQ0NzR0FRVUZCd01CTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3S1FZRFZSME8KQkNJRUlIZU1OWlhrbVYrWTNoVEtEbXZ2NnZobEtma2pra2w1eXBUdTluSVdWbGxwTUFvR0NDcUdTTTQ5QkFNQwpBMGdBTUVVQ0lRQ1hDTXBBSmhDWEVlMXhIc0lPV3dIZDh3K09OcHBpNVdZczdOdk1QSlNxTlFJZ0hWZVJTajNmClU3eXBCR3RCMmtJV0RJQnFpemVUR2lnMTRCRFZtNFZPZ1JFPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==" 			 , 			"admins":   				"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNMVENDQWRPZ0F3SUJBZ0lRRnJpTElQdDNxNzFrMlFCUlpHSW1QVEFLQmdncWhrak9QUVFEQWpCMU1Rc3cKQ1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0JNS1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ4TU5VMkZ1SUVaeQpZVzVqYVhOamJ6RWFNQmdHQTFVRUNoTVJaM0psWlc0dFlXbHliR2x1WlM1amIyMHhIVEFiQmdOVkJBTVRGR05oCkxtZHlaV1Z1TFdGcGNteHBibVV1WTI5dE1CNFhEVEU1TURVd09EQTVNVE13TUZvWERUSTVNRFV3TlRBNU1UTXcKTUZvd2JURUxNQWtHQTFVRUJoTUNWVk14RXpBUkJnTlZCQWdUQ2tOaGJHbG1iM0p1YVdFeEZqQVVCZ05WQkFjVApEVk5oYmlCR2NtRnVZMmx6WTI4eER6QU5CZ05WQkFzVEJtTnNhV1Z1ZERFZ01CNEdBMVVFQXd3WFFXUnRhVzVBClozSmxaVzR0WVdseWJHbHVaUzVqYjIwd1dUQVRCZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFROStBeS8KRmhIcHRMM2tYRHBrWGVqRkowVWE2Mm9qWW1GSFNOYTBrMDJGY0IvVWVxbE1HVVZIT09jRW52aVVObkl2VVNYcQorZGhHQU9DL1FIcGg2OHB5bzAwd1N6QU9CZ05WSFE4QkFmOEVCQU1DQjRBd0RBWURWUjBUQVFIL0JBSXdBREFyCkJnTlZIU01FSkRBaWdDQjNqRFdWNUpsZm1ONFV5ZzVyNytyNFpTbjVJNUpKZWNxVTd2WnlGbFpaYVRBS0JnZ3EKaGtqT1BRUURBZ05JQURCRkFpRUE1Qnc5a3dZdXl0ZHVTdFVkRTBha2ZVQ1h1dzQ2MXFEY3FtbVJJNDhGbFRzQwpJQVBta3FnWkFoN1lLMStJaEtxNmJ4dSt5WGZUK0I1ZGlHZUZwZ24xT3VwcAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==" 			 , 			"crypto_config": { 				"signature_hash_family": "SHA2", 				"identity_identifier_hash_function": "SHA256" 			}, 			"tls_root_certs":   				"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNXekNDQWdLZ0F3SUJBZ0lSQU4zTUJvK0pXZnpma0RGSDN3UDM5Y3d3Q2dZSUtvWkl6ajBFQXdJd2VERUwKTUFrR0ExVUVCaE1DVlZNeEV6QVJCZ05WQkFnVENrTmhiR2xtYjNKdWFXRXhGakFVQmdOVkJBY1REVk5oYmlCRwpjbUZ1WTJselkyOHhHakFZQmdOVkJBb1RFV2R5WldWdUxXRnBjbXhwYm1VdVkyOXRNU0F3SGdZRFZRUURFeGQwCmJITmpZUzVuY21WbGJpMWhhWEpzYVc1bExtTnZiVEFlRncweE9UQTFNRGd3T1RFek1EQmFGdzB5T1RBMU1EVXcKT1RFek1EQmFNSGd4Q3pBSkJnTlZCQVlUQWxWVE1STXdFUVlEVlFRSUV3cERZV3hwWm05eWJtbGhNUll3RkFZRApWUVFIRXcxVFlXNGdSbkpoYm1OcGMyTnZNUm93R0FZRFZRUUtFeEZuY21WbGJpMWhhWEpzYVc1bExtTnZiVEVnCk1CNEdBMVVFQXhNWGRHeHpZMkV1WjNKbFpXNHRZV2x5YkdsdVpTNWpiMjB3V1RBVEJnY3Foa2pPUFFJQkJnZ3EKaGtqT1BRTUJCd05DQUFSbzBYcytkZnhrM1ZRbU5xUnVUSEJrSXJnQzJRT2FsMmpZMnN1Y04wTUNsZGQzcjF2egp6WVluNUhNOTdYYmVLcitIeXlXOVRRMDRrLzhrZ1RNbU5wV3FvMjB3YXpBT0JnTlZIUThCQWY4RUJBTUNBYVl3CkhRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3SUdDQ3NHQVFVRkJ3TUJNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHcKS1FZRFZSME9CQ0lFSUQ2MTBPQkFOVGt5bEJOVU1EdnJoTHo0dkVCdlJ5aU5ndjZHNVNrMVozYjZNQW9HQ0NxRwpTTTQ5QkFNQ0EwY0FNRVFDSUJMR0w3T0VOVTRTMTUyV2RRZU0xUERyVGNUVmV4bzA0R3ZUdEpzMUFnMDZBaUFTClFEdy9xVlpiZVNyZ3gyTXZtYk1ZUFl4dWNzTGNlRUhwTGVFNExZYkNYUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K" 			 , 			"fabric_node_ous": { 				"enable": true, 				"client_ou_identifier": { 					"certificate": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNWakNDQWZ5Z0F3SUJBZ0lSQU02YUpuNzR4QXJIckphZFlZRlZPUTh3Q2dZSUtvWkl6ajBFQXdJd2RURUwKTUFrR0ExVUVCaE1DVlZNeEV6QVJCZ05WQkFnVENrTmhiR2xtYjNKdWFXRXhGakFVQmdOVkJBY1REVk5oYmlCRwpjbUZ1WTJselkyOHhHakFZQmdOVkJBb1RFV2R5WldWdUxXRnBjbXhwYm1VdVkyOXRNUjB3R3dZRFZRUURFeFJqCllTNW5jbVZsYmkxaGFYSnNhVzVsTG1OdmJUQWVGdzB4T1RBMU1EZ3dPVEV6TURCYUZ3MHlPVEExTURVd09URXoKTURCYU1IVXhDekFKQmdOVkJBWVRBbFZUTVJNd0VRWURWUVFJRXdwRFlXeHBabTl5Ym1saE1SWXdGQVlEVlFRSApFdzFUWVc0Z1JuSmhibU5wYzJOdk1Sb3dHQVlEVlFRS0V4Rm5jbVZsYmkxaGFYSnNhVzVsTG1OdmJURWRNQnNHCkExVUVBeE1VWTJFdVozSmxaVzR0WVdseWJHbHVaUzVqYjIwd1dUQVRCZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUIKQndOQ0FBVE4vWStueFlGWkh3YkVIRStxdkd1dnZNelkxd3QwYnZOTWxWbVdybVJzc1NOejJQaEllMER0SmJ4cgpCZUJuT25TQjA1cVhpckZ2N1k3a05xeWZGekpRbzIwd2F6QU9CZ05WSFE4QkFmOEVCQU1DQWFZd0hRWURWUjBsCkJCWXdGQVlJS3dZQkJRVUhBd0lHQ0NzR0FRVUZCd01CTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3S1FZRFZSME8KQkNJRUlIZU1OWlhrbVYrWTNoVEtEbXZ2NnZobEtma2pra2w1eXBUdTluSVdWbGxwTUFvR0NDcUdTTTQ5QkFNQwpBMGdBTUVVQ0lRQ1hDTXBBSmhDWEVlMXhIc0lPV3dIZDh3K09OcHBpNVdZczdOdk1QSlNxTlFJZ0hWZVJTajNmClU3eXBCR3RCMmtJV0RJQnFpemVUR2lnMTRCRFZtNFZPZ1JFPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==", 					"organizational_unit_identifier": "client" 				}, 				"peer_ou_identifier": { 					"certificate": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNWakNDQWZ5Z0F3SUJBZ0lSQU02YUpuNzR4QXJIckphZFlZRlZPUTh3Q2dZSUtvWkl6ajBFQXdJd2RURUwKTUFrR0ExVUVCaE1DVlZNeEV6QVJCZ05WQkFnVENrTmhiR2xtYjNKdWFXRXhGakFVQmdOVkJBY1REVk5oYmlCRwpjbUZ1WTJselkyOHhHakFZQmdOVkJBb1RFV2R5WldWdUxXRnBjbXhwYm1VdVkyOXRNUjB3R3dZRFZRUURFeFJqCllTNW5jbVZsYmkxaGFYSnNhVzVsTG1OdmJUQWVGdzB4T1RBMU1EZ3dPVEV6TURCYUZ3MHlPVEExTURVd09URXoKTURCYU1IVXhDekFKQmdOVkJBWVRBbFZUTVJNd0VRWURWUVFJRXdwRFlXeHBabTl5Ym1saE1SWXdGQVlEVlFRSApFdzFUWVc0Z1JuSmhibU5wYzJOdk1Sb3dHQVlEVlFRS0V4Rm5jbVZsYmkxaGFYSnNhVzVsTG1OdmJURWRNQnNHCkExVUVBeE1VWTJFdVozSmxaVzR0WVdseWJHbHVaUzVqYjIwd1dUQVRCZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUIKQndOQ0FBVE4vWStueFlGWkh3YkVIRStxdkd1dnZNelkxd3QwYnZOTWxWbVdybVJzc1NOejJQaEllMER0SmJ4cgpCZUJuT25TQjA1cVhpckZ2N1k3a05xeWZGekpRbzIwd2F6QU9CZ05WSFE4QkFmOEVCQU1DQWFZd0hRWURWUjBsCkJCWXdGQVlJS3dZQkJRVUhBd0lHQ0NzR0FRVUZCd01CTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3S1FZRFZSME8KQkNJRUlIZU1OWlhrbVYrWTNoVEtEbXZ2NnZobEtma2pra2w1eXBUdTluSVdWbGxwTUFvR0NDcUdTTTQ5QkFNQwpBMGdBTUVVQ0lRQ1hDTXBBSmhDWEVlMXhIc0lPV3dIZDh3K09OcHBpNVdZczdOdk1QSlNxTlFJZ0hWZVJTajNmClU3eXBCR3RCMmtJV0RJQnFpemVUR2lnMTRCRFZtNFZPZ1JFPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==", 					"organizational_unit_identifier": "peer" 				} 			} 		}, 		"orderer1": { 			"name": "orderer1", 			"root_certs":   				"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNRRENDQWVlZ0F3SUJBZ0lRZHV1bmpJZTR4M2hPYWNVb0dUZ00wekFLQmdncWhrak9QUVFEQWpCck1Rc3cKQ1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0JNS1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ4TU5VMkZ1SUVaeQpZVzVqYVhOamJ6RVZNQk1HQTFVRUNoTU1iM0prWlhKbGNqRXVZMjl0TVJnd0ZnWURWUVFERXc5allTNXZjbVJsCmNtVnlNUzVqYjIwd0hoY05NVGt3TlRBNE1Ea3hNekF3V2hjTk1qa3dOVEExTURreE16QXdXakJyTVFzd0NRWUQKVlFRR0V3SlZVekVUTUJFR0ExVUVDQk1LUTJGc2FXWnZjbTVwWVRFV01CUUdBMVVFQnhNTlUyRnVJRVp5WVc1agphWE5qYnpFVk1CTUdBMVVFQ2hNTWIzSmtaWEpsY2pFdVkyOXRNUmd3RmdZRFZRUURFdzlqWVM1dmNtUmxjbVZ5Ck1TNWpiMjB3V1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVFWaStiVXJja3JoWWMxcnBCdlV0Q2oKOWNCbHRuL1VUeHRSa0lWZnNLTHRMdGJKR3dTSk5xcEgvZ0E4clBsY2FncXZITzJBeFlVajFDWTBvNG9zcnB1awpvMjB3YXpBT0JnTlZIUThCQWY4RUJBTUNBYVl3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdJR0NDc0dBUVVGCkJ3TUJNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdLUVlEVlIwT0JDSUVJR3hZbndWaXV5RWZMQjA4cFFtNEVDWkUKK0FHNUNZMi9XM0JLT2hiK053UnNNQW9HQ0NxR1NNNDlCQU1DQTBjQU1FUUNJQlAzN2JzdlF5NS9vbzVtREJnUQpsUVNwL25YcG5WaThvVE11VzUxQ0hHc2JBaUI0RlI2WW9wOElyUmJ1L0pHcnVhcW5vTmc4RW1XbU5yTkdCbUJ1CjNYVElrZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K" 			 , 			"admins":   				"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNERENDQWJPZ0F3SUJBZ0lRS1VQa2EzTzFXNUF4dklTQThGRlc1REFLQmdncWhrak9QUVFEQWpCck1Rc3cKQ1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0JNS1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ4TU5VMkZ1SUVaeQpZVzVqYVhOamJ6RVZNQk1HQTFVRUNoTU1iM0prWlhKbGNqRXVZMjl0TVJnd0ZnWURWUVFERXc5allTNXZjbVJsCmNtVnlNUzVqYjIwd0hoY05NVGt3TlRBNE1Ea3hNekF3V2hjTk1qa3dOVEExTURreE16QXdXakJYTVFzd0NRWUQKVlFRR0V3SlZVekVUTUJFR0ExVUVDQk1LUTJGc2FXWnZjbTVwWVRFV01CUUdBMVVFQnhNTlUyRnVJRVp5WVc1agphWE5qYnpFYk1Ca0dBMVVFQXd3U1FXUnRhVzVBYjNKa1pYSmxjakV1WTI5dE1Ga3dFd1lIS29aSXpqMENBUVlJCktvWkl6ajBEQVFjRFFnQUUyWUlkdW9oMFRsdnh0NStZaW5VYW1HcXJncTFjaHZRWWJhTUl5anNCbzhaSHExNTEKRHE5UDdCY2U0R3ZBMGtFdkdPaGQ4ekZIQzg4VzFTQnZPSlROMzZOTk1Fc3dEZ1lEVlIwUEFRSC9CQVFEQWdlQQpNQXdHQTFVZEV3RUIvd1FDTUFBd0t3WURWUjBqQkNRd0lvQWdiRmlmQldLN0lSOHNIVHlsQ2JnUUprVDRBYmtKCmpiOWJjRW82RnY0M0JHd3dDZ1lJS29aSXpqMEVBd0lEUndBd1JBSWdibyszZjJ3eGZ4QTFJdi9iMDE5WFZ4T1MKUWVNTGUvQUNsQytFbFFqbzRaMENJSGZ1QkpleFVPTjBXdXhtSFNGMjFIOEU3MC94UDZDeWFqWkdxa0FGVGFNagotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==" 			 , 			"crypto_config": { 				"signature_hash_family": "SHA2", 				"identity_identifier_hash_function": "SHA256" 			}, 			"tls_root_certs":   				"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNTRENDQWU2Z0F3SUJBZ0lSQUp2anpvOUxwYkxwZng2K3c0TXN2WXN3Q2dZSUtvWkl6ajBFQXdJd2JqRUwKTUFrR0ExVUVCaE1DVlZNeEV6QVJCZ05WQkFnVENrTmhiR2xtYjNKdWFXRXhGakFVQmdOVkJBY1REVk5oYmlCRwpjbUZ1WTJselkyOHhGVEFUQmdOVkJBb1RERzl5WkdWeVpYSXhMbU52YlRFYk1Ca0dBMVVFQXhNU2RHeHpZMkV1CmIzSmtaWEpsY2pFdVkyOXRNQjRYRFRFNU1EVXdPREE1TVRNd01Gb1hEVEk1TURVd05UQTVNVE13TUZvd2JqRUwKTUFrR0ExVUVCaE1DVlZNeEV6QVJCZ05WQkFnVENrTmhiR2xtYjNKdWFXRXhGakFVQmdOVkJBY1REVk5oYmlCRwpjbUZ1WTJselkyOHhGVEFUQmdOVkJBb1RERzl5WkdWeVpYSXhMbU52YlRFYk1Ca0dBMVVFQXhNU2RHeHpZMkV1CmIzSmtaWEpsY2pFdVkyOXRNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVldkZYR3d1UFhxQjAKR0k5Z1UvRStRZk1SS3NpRUh0Q0RLaFlRdk05YmlHN1AvYW1PQXNVanJwNFRtQ1JFWGVMOEliY1FJdXYrNGVFVAozVS9SZGV6TGNhTnRNR3N3RGdZRFZSMFBBUUgvQkFRREFnR21NQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01DCkJnZ3JCZ0VGQlFjREFUQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01Da0dBMVVkRGdRaUJDQS85WkxNQk5kK1l5MmsKME4wbU14VnRndjFjRm1oRVlYK1BkL1NKT3VRV0ZUQUtCZ2dxaGtqT1BRUURBZ05JQURCRkFpRUFrQ1hSYnA5UQpzRjJGclhOZlVQRkhBUWZpUXllYjV0M2V5VUlnWFZEa245TUNJR0JzellwQ1RueDhLVzVTVmxFenFHNlh0SlBFClIzNkRRaEJ4SDczK3pHME4KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=" 			  		}, 		"orderer2": { 			"name": "orderer2", 			"root_certs":   				"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNRVENDQWVlZ0F3SUJBZ0lRUnlyR3lkNEhvQ2FSeWM3eEVOZTl1ekFLQmdncWhrak9QUVFEQWpCck1Rc3cKQ1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0JNS1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ4TU5VMkZ1SUVaeQpZVzVqYVhOamJ6RVZNQk1HQTFVRUNoTU1iM0prWlhKbGNqSXVZMjl0TVJnd0ZnWURWUVFERXc5allTNXZjbVJsCmNtVnlNaTVqYjIwd0hoY05NVGt3TlRBNE1Ea3hNekF3V2hjTk1qa3dOVEExTURreE16QXdXakJyTVFzd0NRWUQKVlFRR0V3SlZVekVUTUJFR0ExVUVDQk1LUTJGc2FXWnZjbTVwWVRFV01CUUdBMVVFQnhNTlUyRnVJRVp5WVc1agphWE5qYnpFVk1CTUdBMVVFQ2hNTWIzSmtaWEpsY2pJdVkyOXRNUmd3RmdZRFZRUURFdzlqWVM1dmNtUmxjbVZ5Ck1pNWpiMjB3V1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVNmeCs3MlR5SkxJM3BmZ2RxZCtLRTgKRmFrL1dQMG0zMStGblRld0VqUHRZblNLZmxnMjdZK2lzTEVPV2dZVXBucTlTOHdxWGhWUGdDM2Nna0U0dFE4RApvMjB3YXpBT0JnTlZIUThCQWY4RUJBTUNBYVl3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdJR0NDc0dBUVVGCkJ3TUJNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdLUVlEVlIwT0JDSUVJSmthSlhoVElOQ1kvYzVGOXZsdlk0Q2MKblBIekpOZ0djajV4YXNTQS95dk9NQW9HQ0NxR1NNNDlCQU1DQTBnQU1FVUNJUUNmZDFDdjFiU25GclhodEh0VApaV0ZpWGtMS29WQmdUNEZpVGxtQnNCWUx0d0lnRW5EL2c0WUVrL2VGQ2kveVJhZU1JRDMvMEtBUElvRElRZWZFCjY4cUJlSVk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K" 			 , 			"admins":   				"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNEVENDQWJPZ0F3SUJBZ0lRRUxVYitJV3JUbEZrYmVJc2w4bnlBakFLQmdncWhrak9QUVFEQWpCck1Rc3cKQ1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0JNS1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ4TU5VMkZ1SUVaeQpZVzVqYVhOamJ6RVZNQk1HQTFVRUNoTU1iM0prWlhKbGNqSXVZMjl0TVJnd0ZnWURWUVFERXc5allTNXZjbVJsCmNtVnlNaTVqYjIwd0hoY05NVGt3TlRBNE1Ea3hNekF3V2hjTk1qa3dOVEExTURreE16QXdXakJYTVFzd0NRWUQKVlFRR0V3SlZVekVUTUJFR0ExVUVDQk1LUTJGc2FXWnZjbTVwWVRFV01CUUdBMVVFQnhNTlUyRnVJRVp5WVc1agphWE5qYnpFYk1Ca0dBMVVFQXd3U1FXUnRhVzVBYjNKa1pYSmxjakl1WTI5dE1Ga3dFd1lIS29aSXpqMENBUVlJCktvWkl6ajBEQVFjRFFnQUVoWFlscGNmdlBvSEtObDB6eGNmOUo0MWV0L0FsV051cEIvUFlxdUtmMG5EK3ZFSzYKMXNyVFNmMFFTUitiV3hlNDBlQmtWdjVMSFBuWjMzOFlJOWFyZ3FOTk1Fc3dEZ1lEVlIwUEFRSC9CQVFEQWdlQQpNQXdHQTFVZEV3RUIvd1FDTUFBd0t3WURWUjBqQkNRd0lvQWdtUm9sZUZNZzBKajl6a1gyK1c5amdKeWM4Zk1rCjJBWnlQbkZxeElEL0s4NHdDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWhBSmZpSVgwNWlDaHhXUTJGcDhmS0pQRngKeEVNQmh0bVpqS0JSYTVYVHUzRzZBaUFsSTdQODQ3RlU0aC9GTjlSQmlIbSt3d0FxaEFUVU9xbXdZMzZZUGxHWAo2UT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K" 			 , 			"crypto_config": { 				"signature_hash_family": "SHA2", 				"identity_identifier_hash_function": "SHA256" 			}, 			"tls_root_certs":   				"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNSakNDQWUyZ0F3SUJBZ0lRWHczdHJZWnVHU21Gek1OblVYZUpYakFLQmdncWhrak9QUVFEQWpCdU1Rc3cKQ1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0JNS1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ4TU5VMkZ1SUVaeQpZVzVqYVhOamJ6RVZNQk1HQTFVRUNoTU1iM0prWlhKbGNqSXVZMjl0TVJzd0dRWURWUVFERXhKMGJITmpZUzV2CmNtUmxjbVZ5TWk1amIyMHdIaGNOTVRrd05UQTRNRGt4TXpBd1doY05Namt3TlRBMU1Ea3hNekF3V2pCdU1Rc3cKQ1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0JNS1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ4TU5VMkZ1SUVaeQpZVzVqYVhOamJ6RVZNQk1HQTFVRUNoTU1iM0prWlhKbGNqSXVZMjl0TVJzd0dRWURWUVFERXhKMGJITmpZUzV2CmNtUmxjbVZ5TWk1amIyMHdXVEFUQmdjcWhrak9QUUlCQmdncWhrak9QUU1CQndOQ0FBVDlROGRReFhBUE1rU1gKVE1CVUFEOGx0MGJuL1BtbmJ4SEZQVEJXazF0bnFKd2pXZFNYKzR4ejBvb1g5WHdseVdnVTh2WFpwa3FNcisyeApQeVVQcFhvT28yMHdhekFPQmdOVkhROEJBZjhFQkFNQ0FhWXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0lHCkNDc0dBUVVGQndNQk1BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0tRWURWUjBPQkNJRUlJeDB2R21uRVQ3RG9BSE4KWW9WaUF3ZEZDM1dmcGhka2swUVVoWVlwaVpRZU1Bb0dDQ3FHU000OUJBTUNBMGNBTUVRQ0lDS2dGSWVOWlpPRgp4QjJCU2xoM2xJcDduUGJDc2NhTjRpYWh6NW5peVRUcEFpQmZLeHNERUV5djJjUkdyNFliVFE4bUhXaTAzUFVYClNMaCtjd1VEbEtOQzd3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=" 			  		}, 		"orderer3": { 			"name": "orderer3", 			"root_certs":   				"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNRVENDQWVlZ0F3SUJBZ0lRTWo2RGFPU2xwVzQ1TWdacVhLRTZZekFLQmdncWhrak9QUVFEQWpCck1Rc3cKQ1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0JNS1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ4TU5VMkZ1SUVaeQpZVzVqYVhOamJ6RVZNQk1HQTFVRUNoTU1iM0prWlhKbGNqTXVZMjl0TVJnd0ZnWURWUVFERXc5allTNXZjbVJsCmNtVnlNeTVqYjIwd0hoY05NVGt3TlRBNE1Ea3hNekF3V2hjTk1qa3dOVEExTURreE16QXdXakJyTVFzd0NRWUQKVlFRR0V3SlZVekVUTUJFR0ExVUVDQk1LUTJGc2FXWnZjbTVwWVRFV01CUUdBMVVFQnhNTlUyRnVJRVp5WVc1agphWE5qYnpFVk1CTUdBMVVFQ2hNTWIzSmtaWEpsY2pNdVkyOXRNUmd3RmdZRFZRUURFdzlqWVM1dmNtUmxjbVZ5Ck15NWpiMjB3V1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVRMaHdGQTk5eVg5QzFJSk91Ymw5OFoKbnhPQU1WcjZzVjVKVjZHbWRBVDRKVFZmam9NUUhrWlNCNjJreWhCSEdJaXhIdVJOdjBKQ0RaY1VGUlJoTWxKRApvMjB3YXpBT0JnTlZIUThCQWY4RUJBTUNBYVl3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdJR0NDc0dBUVVGCkJ3TUJNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdLUVlEVlIwT0JDSUVJRjF2T1JVVGJrUGM1SlYwa3c1T0JTN1MKZ2QwZTVybmxRdjAxbEloV3kzS3RNQW9HQ0NxR1NNNDlCQU1DQTBnQU1FVUNJUUNNaFFubGVxUjBhN0JQZkMrLwpwUlhYUWdZQ3ZXZlgvNjQ0QlIwcWN3YVZKUUlnV05EVWpSSngySDJHNzBvZE44QzNmZ3ZLYUNTTk95cU5pTGZHClM4dG9hRE09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K" 			 , 			"admins":   				"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNERENDQWJPZ0F3SUJBZ0lRSU5YMXJ1bzBXclVQSXQ4ZWFsTUh0REFLQmdncWhrak9QUVFEQWpCck1Rc3cKQ1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0JNS1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ4TU5VMkZ1SUVaeQpZVzVqYVhOamJ6RVZNQk1HQTFVRUNoTU1iM0prWlhKbGNqTXVZMjl0TVJnd0ZnWURWUVFERXc5allTNXZjbVJsCmNtVnlNeTVqYjIwd0hoY05NVGt3TlRBNE1Ea3hNekF3V2hjTk1qa3dOVEExTURreE16QXdXakJYTVFzd0NRWUQKVlFRR0V3SlZVekVUTUJFR0ExVUVDQk1LUTJGc2FXWnZjbTVwWVRFV01CUUdBMVVFQnhNTlUyRnVJRVp5WVc1agphWE5qYnpFYk1Ca0dBMVVFQXd3U1FXUnRhVzVBYjNKa1pYSmxjak11WTI5dE1Ga3dFd1lIS29aSXpqMENBUVlJCktvWkl6ajBEQVFjRFFnQUVoTUtsaWQ5QlIzKzZTVi9NZDhCTEFjbWFDREVwUC9YUVBpWkVIRVNhRU85Y0JIQVkKNmVCVzRXUG5ja3QyRVZEV2VmTUowRG1DMzBSSldQcEhweGk4SWFOTk1Fc3dEZ1lEVlIwUEFRSC9CQVFEQWdlQQpNQXdHQTFVZEV3RUIvd1FDTUFBd0t3WURWUjBqQkNRd0lvQWdYVzg1RlJOdVE5emtsWFNURGs0Rkx0S0IzUjdtCnVlVkMvVFdVaUZiTGNxMHdDZ1lJS29aSXpqMEVBd0lEUndBd1JBSWdCSHBvZ3NlNUR1SmtpejltVEw5NVN0bzcKRUQzNnduVWVxalY3VEdGalNMY0NJR3cydDQyNkVmRHpJWG85YmM4K1BSa1BIVGF0dHo5emJUdXJCTFdTV21qdAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==" 			 , 			"crypto_config": { 				"signature_hash_family": "SHA2", 				"identity_identifier_hash_function": "SHA256" 			}, 			"tls_root_certs":   				"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNSakNDQWUyZ0F3SUJBZ0lRWTdBUGN6NWNOV0hwZFNFS01NSG10REFLQmdncWhrak9QUVFEQWpCdU1Rc3cKQ1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0JNS1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ4TU5VMkZ1SUVaeQpZVzVqYVhOamJ6RVZNQk1HQTFVRUNoTU1iM0prWlhKbGNqTXVZMjl0TVJzd0dRWURWUVFERXhKMGJITmpZUzV2CmNtUmxjbVZ5TXk1amIyMHdIaGNOTVRrd05UQTRNRGt4TXpBd1doY05Namt3TlRBMU1Ea3hNekF3V2pCdU1Rc3cKQ1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0JNS1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ4TU5VMkZ1SUVaeQpZVzVqYVhOamJ6RVZNQk1HQTFVRUNoTU1iM0prWlhKbGNqTXVZMjl0TVJzd0dRWURWUVFERXhKMGJITmpZUzV2CmNtUmxjbVZ5TXk1amIyMHdXVEFUQmdjcWhrak9QUUlCQmdncWhrak9QUU1CQndOQ0FBUlJWWS9xMko1R0tnbFUKaUJWZmZmT25rQ3BEYVhTL1NmN0l4Y3FFdHlvY0dFQklDY1NXaCtNTmNSblBZYXFlUm9KdEhxOWQ0R1dUMzcvRApjc2Y2d0VuaG8yMHdhekFPQmdOVkhROEJBZjhFQkFNQ0FhWXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0lHCkNDc0dBUVVGQndNQk1BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0tRWURWUjBPQkNJRUlLMEdjYWtGT2xPNndhQUwKcnRzYUFWLzRSSXlBYkVuNFlnbEhQY3A4ajFSdk1Bb0dDQ3FHU000OUJBTUNBMGNBTUVRQ0lESHoxemV1MTIyWAo5RE5wR1NGYXBDbDZJRTR0RnhrOVMwdm1uS1RtTzdKckFpQTBDemdaL01ySkVjeVdJSWJobXBhTWR6ZEVUd2Q1CldOcVkrZnprYXhNNHdnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=" 			  		} 	}, 	"orderers": { 		"orderer1": { 			"endpoint":   				{ 					"host": "orderer1", 					"port": 7050 				}, 				{ 					"host": "orderer2", 					"port": 7050 				}, 				{ 					"host": "orderer3", 					"port": 7050 				} 			  		}, 		"orderer2": { 			"endpoint":   				{ 					"host": "orderer1", 					"port": 7050 				}, 				{ 					"host": "orderer2", 					"port": 7050 				}, 				{ 					"host": "orderer3", 					"port": 7050 				} 			  		}, 		"orderer3": { 			"endpoint":   				{ 					"host": "orderer1", 					"port": 7050 				}, 				{ 					"host": "orderer2", 					"port": 7050 				}, 				{ 					"host": "orderer3", 					"port": 7050 				} 			  		} 	} }  ></body> </Action>
<Action id="60153" issue="39780" author="rickr" type="comment" created="2019-05-20 11:57:16.0" updateauthor="rickr" updated="2019-05-20 11:57:16.0"> <body><! CDATA This is what the SDK is  also seeing: the same Orderer endpoints listed under 3 different mspids.  I don't think that's a valid case. I'm thinking there are two possibilities:  # The configuration is incorrect and endpoints are actually listed under three different mspids. # The configuration is valid but service discovery is incorrectly mapping Orderer endpoints to the wrong mspids.  I think in the first case this is still a fabric bug as the SDK should not be the one that discovers this inconsistency.  In second case service discovery needs to be fixed.   I have on the SDK side a todo that better detects this instead of clobbering TLS certificates by logging a warning.  ></body> </Action>
<Action id="60154" issue="39780" author="rickr" type="comment" created="2019-05-20 12:01:00.0" updateauthor="rickr" updated="2019-05-20 12:01:00.0"> <body><! CDATA  ~timpii  Please also provide a set of logs at trace level of the SDK and full debug of the peer doing service discovery.   FYI  ~denyeart   ~yacovm      ></body> </Action>
<Action id="60179" issue="39780" author="yacovm" type="comment" created="2019-05-20 22:02:11.0" updateauthor="denyeart" updated="2019-05-21 09:35:23.0"> <body><! CDATA So, before Fabric v2.0 you can only specify orderer endpoints globally and you cannot express an association of endpoints to a particular organization: {code:java} Orderer: &OrdererDefaults  # Orderer Type: The orderer implementation to start # Available types are "solo" and "kafka" OrdererType: etcdraft Capabilities: V1_1: true  Addresses: - orderer1:7050 - orderer2:7050 - orderer3:7050 {code} That's why the discovery service, returns to you *all endpoints* in *all* 3 orderer MSPs - because it just doesn't know which one belongs to who.  The sad truth, is that pre-v2.0 Fabric configuration, is just not suitable for deploying orderers in different organizations.  I raised an issue in FAB-7559 in the end of 2017 and lo and behold - a year and a half after - in Fabric v2.0 you can now specify the endpoints to be under the organization, and not globally.  The global endpoints config is now deprecated by default in our sample and says: {code:java} # Addresses used to be the list of orderer addresses that clients and peers # could connect to.  However, this does not allow clients to associate orderer # addresses and orderer organizations which can be useful for things such # as TLS validation.  The preferred way to specify orderer addresses is now # to include the OrdererEndpoints item in your org definition Addresses: # - 127.0.0.1:7050 # {code} and instead we have a  per org endpoints config|https://github.com/hyperledger/fabric/blob/master/sampleconfig/configtx.yaml#L63-L66  now: {code:java} # OrdererEndpoints is a list of all orderers this org runs which clients # and peers may to connect to to push transactions and receive blocks respectively. OrdererEndpoints: - "127.0.0.1:7050" {code} The discovery service in the peer, as well as the orderer (and soon enough, the peer!) all prefer to use the per-org endpoints over the global endpoints.  The reason the discovery returns to you a per-org mapping in the first place, is that discovery was built in the first place to fit the future (right way) config structure (which turned out to only manifest a year and a half later), and I assumed that if you can't connect to an orderer node - the SDK would try a different orderer node anyway, and will mask this connection error from the application.   And - if it had returned a representation that doesn't map endpoints to *any* specific organization, then you'd had to load *all* your TLS CA certificates (as an application) when attempting to connect to *any* orderer endpoint, which you can do now anyway (in theory...)     A possible corrective action for v1.4.x in the SDKs that can be done, is to just figure out if we have the same orderer endpoints duplicated across all MSPs, and if so - load all TLS CAs regardless of the MSP mapping.  Another option would be to ensure that the SDK simply tries to connect with other combinations and actually masks this problem from the application layer.           ></body> </Action>
<Action id="60180" issue="39780" author="yacovm" type="comment" body="/CC  ~mastersingh24   ~jyellick   ~sykesm " created="2019-05-20 22:11:08.0" updateauthor="yacovm" updated="2019-05-20 22:11:08.0"/>
<Action id="60196" issue="39780" author="rickr" type="comment" created="2019-05-21 12:25:58.0" updateauthor="rickr" updated="2019-05-21 12:29:35.0"> <body><! CDATA Just curious, what is the use case for the need of a per Org Orderer?  I can see multiple Orderers can be needed for redundancy.   If this use case is not vital seems to me the answer is don't do that or move to 2.0.   It can't be too large of a need this is first I've seen someone trying this.     ></body> </Action>
<Action id="60199" issue="39780" author="yacovm" type="comment" created="2019-05-21 13:31:45.0" updateauthor="yacovm" updated="2019-05-21 13:31:45.0"> <body><! CDATA This is the standard use case of BFT (each organization that hosts an orderer, has its own org).  And for Raft - you don't want to have a single organization going bankrupt and as a result all parties can't transact.  ></body> </Action>
<Action id="60201" issue="39780" author="timpii" type="comment" created="2019-05-21 14:12:46.0" updateauthor="timpii" updated="2019-05-21 14:12:46.0"> <body><! CDATA Some history - I am setting up a local dev environment on minikube for a production application and a Dev/Test environment on the cloud in IKS. I have also been involved in several issues recently related to Active-Active-Active orderers across multiple DCs ( or the need for them). It just seemed natural when you have orderers spread across multiple DCs that there is a strong potential that they are going to belong to different organizations. So I tried configuring it that way not understanding it was an issue.  We do have the above working with a single Orderer Organization - using Service Discovery, TLS and Raft. I have client developers and garage developers starting in several weeks, so I could not wait.   I agree with  ~yacovm  comments. As we get out of the tire kicking / early adopter stages and start to build more complex networks with real consortium governance it is a base requirement to have distributed orderer orgs.  ></body> </Action>
<Action id="60267" issue="39780" author="denyeart" type="comment" body=" ~yacovm  So that all options are on the table for consideration, can you enumerate what from master (v2.0) would have to be back-ported to release-1.4 to fix this in a v1.4.x release.  It&apos;s likely more than we&apos;d like to backport, but do you see any blockers? I assume from a user perspective, this would require a capability update and a config transaction to (re)define the orderer endpoints per org. " created="2019-05-22 19:22:25.0" updateauthor="denyeart" updated="2019-05-22 19:22:25.0"/>
<Action id="60268" issue="39780" author="yacovm" type="comment" created="2019-05-22 19:29:56.0" updateauthor="yacovm" updated="2019-05-22 19:29:56.0"> <body><! CDATA All you need is to backport FAB-14158 (2 commits - v2.0 capability + the config addition) and FAB-15446 (1 commit - the discovery service addition) .     Also inviting  ~jyellick  to give his opinion on this.  ></body> </Action>
<Action id="60270" issue="39780" author="yacovm" type="comment" created="2019-05-22 20:42:48.0" updateauthor="yacovm" updated="2019-05-22 21:43:35.0"> <body><! CDATA By the way  - unless we backport all of the subtasks of FAB-7559, a Fabric administrator would have to define the endpoints twice - globally and per org, in order for the peer and orderers to be able to connect to one another.  If one would have separate orgs like Tim here has, on a Fabric network that is v1.4.2 with backported and enabled v2.0 capability + the discovery patch (but not the orderers and peers modifications that were made in v2.0) - the peers and orderers won't encounter errors because they would load all TLS CAs and use the global endpoints, and ignore the new per org endpoints.   ></body> </Action>
<Action id="60286" issue="39780" author="denyeart" type="comment" created="2019-05-23 08:35:03.0" updateauthor="denyeart" updated="2019-05-23 08:35:03.0"> <body><! CDATA If I understand Yacov's comment correctly, we have two options on a possible backport of FAB-7559 to release-1.4:  1) backport just the capability, config, and discovery subtasks. Users would have to define endpoints at both global level (for peers and orderers) and org level (for SDKs)  2) backport all the subtasks. Users would configure just the per org endpoints (for peers and orderers and SDKs) and not the global endpoints.  The config change would be done concurrent or after the capability enablement. Note, up until now there is no precedent for enabling capabilities in a third digit fix.  ></body> </Action>
<Action id="60438" issue="39780" author="denyeart" type="comment" body="Node SDK will have same issue, which makes backport of FAB-7559 to v1.4.2 more attractive, to avoid workarounds in all SDKs.  I will mark both for v1.4.2." created="2019-05-28 16:25:37.0" updateauthor="denyeart" updated="2019-05-28 16:25:37.0"/>
<Action id="60473" issue="39780" author="dongming" type="comment" created="2019-05-29 18:17:35.0" updateauthor="dongming" updated="2019-05-29 18:17:35.0"> <body><! CDATA I tested service discovery with fabric-1.4.1 on a network with two orderer org and observed the following error:  ^  32minfo^  39m:  2019-05-28T20:44:03.907Z PTE 0 main : stderr: E0528 16:44:03.907065998   22529 ssl_transport_security.cc:1229  Handshake failed with fatal error SSL_ERROR_SSL: error:14090086:SSL routines:ssl3_get_server_certificate:certificate verify failed.  ^  32minfo^  39m:  2019-05-28T20:44:04.901Z PTE 0 main : stderr: E0528 16:44:04.901302243   22529 ssl_transport_security.cc:1229  Handshake failed with fatal error SSL_ERROR_SSL: error:14090086:SSL routines:ssl3_get_server_certificate:certificate verify failed.    ></body> </Action>
<Action id="60474" issue="39780" author="yacovm" type="comment" created="2019-05-29 18:21:59.0" updateauthor="yacovm" updated="2019-05-29 18:21:59.0"> <body><! CDATA  ~dongming  but you have several combinations of TLS CAs and endpoints , so the SDK should be able to pick a combination that eventually fits together well.  Can the SDK eventually manage to send a transaction or not?  ></body> </Action>
<Action id="60527" issue="39780" author="dongming" type="comment" body=" ~yacovm  Yes, the transactions went thru eventually." created="2019-05-30 19:08:57.0" updateauthor="dongming" updated="2019-05-30 19:08:57.0"/>
<Action id="61885" issue="39780" author="denyeart" type="comment" body="Fixed in v1.4.2 via FAB-7559." created="2019-07-16 19:19:19.0" updateauthor="denyeart" updated="2019-07-16 19:19:19.0"/>
