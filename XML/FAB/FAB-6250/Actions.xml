<Action id="31328" issue="20941" author="mastersingh24" type="comment" created="2017-10-01 13:14:00.0" updateauthor="mastersingh24" updated="2017-10-01 13:14:15.0"> <body><! CDATA  ~JohnWhitton  - Looks like there is an issue with DNS resolution.  I've seen something similar before and a possible solution is to tell Go to use it's own DNS resolver.  You can do this by setting the GODEBUG env variable in your peer config: {code:java} env: - name: GODEBUG   value: "netdns=go" {code}    ></body> </Action>
<Action id="32160" issue="20941" author="kchristidis" type="comment" body=" ~JohnWhitton : Any update on this? Have you tried Gari&apos;s solution?" created="2017-10-13 23:58:15.0" updateauthor="kchristidis" updated="2017-10-13 23:58:15.0"/>
<Action id="32540" issue="20941" author="kchristidis" type="comment" body="Just a heads up that I will close this on Oct 23 if there are no updates in the meantime." created="2017-10-16 23:02:58.0" updateauthor="kchristidis" updated="2017-10-16 23:02:58.0"/>
<Action id="32541" issue="20941" author="johnwhitton" type="comment" created="2017-10-16 23:47:54.0" updateauthor="johnwhitton" updated="2017-10-16 23:47:54.0"> <body><! CDATA  ~mastersingh24  -  ~kchristidis  Thank you for the tip and the follow up.  We were in a workshop last week, but have now tested the proposed approached and it has resolved the issue.  I've included the Go Link as well  https://golang.org/pkg/net/#hdr-Name_Resolution   This ticket can be marked as closed.  ></body> </Action>
<Action id="32564" issue="20941" author="kchristidis" type="comment" created="2017-10-17 15:01:33.0" updateauthor="kchristidis" updated="2017-10-17 15:01:33.0"> <body><! CDATA Thanks for the update.  Just for my edification, the `net` pkg documentation states that the pure Go resolved is already used by default. Had you overwritten this somewhere? Is this documented in the artifacts provided here? Is this implied in a K8s setup? Again, this is just me trying to figure out how to detect this again in the future.  ></body> </Action>
<Action id="32908" issue="20941" author="johnwhitton" type="comment" created="2017-10-19 20:51:27.0" updateauthor="johnwhitton" updated="2017-10-19 20:51:27.0"> <body><! CDATA  ~kchristidis  - Here's our feedback  root cause for `net=cgo` enabling per the golang net/resolver documentation, from what I can tell, is  1) our hostname does not end with `.local` but  2) the specific features that trigger cgo resolving are not explicit in the doc, we do search in the `.local` domain;  I've included our files for reference.   doc:  > when /etc/resolv.conf or /etc/nsswitch.conf specify the use of features that the Go resolver does not implement, and when the name being looked up ends in .local or is an mDNS name.   our configs:     ``` <fx0:/opt/gopath/src/github.com/hyperledger/fabric# cat /etc/resolv.conf nameserver 10.0.0.10 search loyyal-network.svc.cluster.local svc.cluster.local cluster.local options ndots:5 <fx0:/opt/gopath/src/github.com/hyperledger/fabric# cat /etc/nsswitch.conf # /etc/nsswitch.conf # # Example configuration of GNU Name Service Switch functionality. # If you have the `glibc-doc-reference' and `info' packages installed, try: # `info libc "Name Service Switch"' for information about this file.  passwd: compat group: compat shadow: compat gshadow: files  hosts: files dns networks: files  protocols: db files services: db files ethers: db files rpc: db files  netgroup: nis <fx0:/opt/gopath/src/github.com/hyperledger/fabric# ```  ></body> </Action>
<Action id="32912" issue="20941" author="kchristidis" type="comment" body="A-ha! That is very helpful. Thank you for following up on this (and satisfying my curiosity). Much appreciated." created="2017-10-19 21:13:30.0" updateauthor="kchristidis" updated="2017-10-19 21:13:30.0"/>
