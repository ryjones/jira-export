<Issue id="20941" key="FAB-6250" number="6250" project="10002" reporter="johnwhitton" assignee="sanchezl" creator="johnwhitton" type="10004" summary="Kafka Orderer crashes when creating a channel" priority="3" resolution="10000" status="6" created="2017-09-20 21:46:15.0" updated="2018-07-20 14:14:27.0" resolutiondate="2017-10-17 00:32:27.0" votes="0" watches="3" workflowId="40067"> <environment><! CDATA Fabric docker images fabric-orderer, fabric-peer, fabric-kafka, fabric-zookeeper:  x86_64-1.0.2  Kubernetes 1.7.0 in minikube v0.21.0  – manifest: {noformat} --- # Source: fabric-infra/templates/fabric-orderer.yaml kind: PersistentVolumeClaim apiVersion: v1 metadata: name: fabric-infra-orderer-pvc namespace: labels: app: fabric-infra-orderer-pvc spec: storageClassName: standard accessModes: - ReadWriteOnce resources: requests: storage: 8Gi --- # Source: fabric-infra/templates/fabric-zookeeper.yaml apiVersion: v1 kind: Service metadata: name: fabric-infra-fabric-zookeeper-headless namespace: loyyal-network labels: app: fabric-infra-fabric-zookeeper spec: ports: - port: 2888 name: server - port: 3888 name: leader-election selector: app: fabric-infra-fabric-zookeeper clusterIP: None --- # Source: fabric-infra/templates/fabric-zookeeper.yaml apiVersion: v1 kind: Service metadata: name: fabric-infra-fabric-zookeeper namespace: loyyal-network labels: app: fabric-infra-fabric-zookeeper spec: ports: - port: 2181 name: client selector: app: fabric-infra-fabric-zookeeper --- # Source: fabric-infra/templates/fabric-orderer.yaml apiVersion: v1 kind: Service metadata: name: orderer namespace: loyyal-network  spec: loadBalancerIP: 192.168.99.100 externalIPs: - 192.168.99.100 ports: - port: 7050 protocol: TCP selector: service: fabric-infra-orderer type: LoadBalancer --- # Source: fabric-infra/templates/fabric-kafka.yaml apiVersion: v1 kind: Service metadata: name: fabric-infra-fabric-kafka-headless labels: app: fabric-infra-fabric-kafka annotations: service.alpha.kubernetes.io/tolerate-unready-endpoints: "true" spec: ports: - name: broker port: 9092 clusterIP: None selector: app: fabric-infra-fabric-kafka --- # Source: fabric-infra/templates/fabric-kafka.yaml apiVersion: v1 kind: Service metadata: name: fabric-infra-fabric-kafka labels: app: fabric-infra-fabric-kafka spec: ports: - name: broker port: 9092 selector: app: fabric-infra-fabric-kafka --- # Source: fabric-infra/templates/fabric-orderer.yaml apiVersion: v1 kind: ReplicationController metadata: labels: service: fabric-infra-orderer namespace: loyyal-network name: fabric-infra-orderer spec: replicas: 1 selector: service: fabric-infra-orderer template: metadata: labels: service: fabric-infra-orderer namespace: loyyal-network spec: hostAliases: - ip: "192.168.99.100" hostnames: - "orderer.loyyal-mainnet.com" containers: - command: - orderer #- cat #- /var/hyperledger/orderer/tls/server.key image: hyperledger/fabric-orderer:x86_64-1.0.2 name: fabric-infra-orderer workingDir: /opt/gopath/src/github.com/hyperledger/fabric ports: - containerPort: 7050 env: - name: ORDERER_GENERAL_LOGLEVEL value: debug - name: ORDERER_GENERAL_LISTENADDRESS value: 0.0.0.0 - name: ORDERER_GENERAL_GENESISMETHOD value: file - name: ORDERER_GENERAL_GENESISFILE value:  /etc/crypto-config/crypto-config-dev/loyyal-network/channel-artifacts/loyyal-genesis.block - name: ORDERER_GENERAL_LOCALMSPID value: OrdererMSP - name: ORDERER_GENERAL_LOCALMSPDIR value: /etc/crypto-config/crypto-config-dev/loyyal-network/crypto-config/ordererOrganizations/loyyal-mainnet.com/orderers/orderer.loyyal-mainnet.com/msp - name: ORDERER_KAFKA_VERBOSE value: "true" #        - name: ORDERER_KAFKA_VERSION #          value: "0.10.1.0" volumeMounts: - mountPath: /var/run/docker.sock name: fabric-infra-docker-sock - mountPath: /etc/crypto-config name: fabric-infra-crypto-config readOnly: true - mountPath: /var/hyperledger/production name: fabric-infra-fabric-orderer volumes: - name: fabric-infra-docker-sock hostPath: path: /var/run/docker.sock - name: fabric-infra-fabric-orderer persistentVolumeClaim: claimName: fabric-infra-orderer-pvc - name: fabric-infra-crypto-config hostPath: path: /develop/loyyal --- # Source: fabric-infra/templates/fabric-zookeeper.yaml apiVersion: apps/v1beta1 kind: StatefulSet metadata: name: fabric-infra-fabric-zookeeper namespace: loyyal-network labels: app: fabric-infra-fabric-zookeeper spec: serviceName: fabric-infra-fabric-zookeeper-headless replicas: 1 template: metadata: namespace: loyyal-network labels: app: fabric-infra-fabric-zookeeper spec: containers: - name: fabric-zookeeper imagePullPolicy: IfNotPresent image: hyperledger/fabric-zookeeper:x86_64-1.0.2 #        resources: #          null  ports: - containerPort: 2181 name: client - containerPort: 2888 name: server - containerPort: 3888 name: leader-election env: - name: ZOO_MY_ID value: "1" - name: ZOO_SERVERS value: "server.1=fabric-infra-fabric-zookeeper-0:2888:3888" #        readinessProbe: #          exec: #            command: #            - "zkOk.sh" #          initialDelaySeconds: #          timeoutSeconds: #        livenessProbe: #          exec: #            command: #            - "zkOk.sh" #          initialDelaySeconds: #          timeoutSeconds: volumeMounts: - name: datadir mountPath: /var/lib/zookeeper #securityContext: #  runAsUser: 1000 #  fsGroup: 1000 volumeClaimTemplates: - metadata: name: datadir spec: accessModes:   "ReadWriteOnce"   resources: requests: storage: 8Gi storageClassName: standard # --- # Source: fabric-infra/templates/fabric-kafka.yaml apiVersion: apps/v1beta1 kind: StatefulSet metadata: name: fabric-infra-fabric-kafka labels: app: fabric-infra-fabric-kafka spec: serviceName: fabric-infra-fabric-kafka-headless replicas: 1 template: metadata: labels: app: fabric-infra-fabric-kafka spec: containers: - name: fabric-infra-fabric-kafka-broker image: hyperledger/fabric-kafka:x86_64-1.0.2 imagePullPolicy: IfNotPresent #        livenessProbe: #          exec: #            command: #              - bin/kafka-topics.sh #              - --zookeeper #              - "fabric-infra-zookeeper:2181" #              - --list #          initialDelaySeconds: 30 #          timeoutSeconds: 5 #        readinessProbe: #          exec: #            command: #              - bin/kafka-topics.sh #              - --zookeeper #              - "fabric-infra-zookeeper:2181" #              - --list #          initialDelaySeconds: 30 #          timeoutSeconds: 5 ports: - containerPort: 9092 name: kafka volumeMounts: - name: datadir mountPath: /opt/kafka/data env: - name: KAFKA_LOG_RETENTION_MS value: "-1" - name: KAFKA_MESSAGE_MAX_BYTES value: "103809024" - name: KAFKA_REPLICA_FETCH_MAX_BYTES value: "103809024" - name: KAFKA_BROKER_ID value: "0" - name: KAFKA_ZOOKEEPER_CONNECT value: "fabric-infra-fabric-zookeeper-0.fabric-infra-fabric-zookeeper-headless.loyyal-network.svc.cluster.local:2181" - name: KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE value: "false" - name: KAFKA_DEFAULT_REPLICATION_FACTOR value: "1" - name: KAFKA_MIN_INSYNC_REPLICAS value: "1" - name: KAFKA_ADVERTISED_HOST_NAME value: "fabric-infra-fabric-kafka" - name: KAFKA_ADVERTISED_PORT value: "9092" volumeClaimTemplates: - metadata: name: datadir spec: accessModes:   "ReadWriteOnce"   storageClassName: standard resources: requests: storage: 2Gi --- --- # Source: fabric-network/templates/fabric-peer0.yaml kind: PersistentVolume apiVersion: v1 metadata: name: loyyal-fabric-network-fabric-peer0-pv labels: type: local #  annotations: #    pv.beta.kubernetes.io/gid: "999" spec: storageClassName: manual capacity: storage: 8Gi accessModes: - ReadWriteOnce # fixme this should be more specific... how to replace .Release.Name in yaml values? hostPath: path: "/data/loyyal-fabric-network-peer0-disk" --- # Source: fabric-network/templates/fabric-peer0.yaml kind: PersistentVolumeClaim apiVersion: v1 metadata: name: loyyal-fabric-network-peer0-pvc namespace: labels: app: loyyal-fabric-network-peer0-pvc #  annotations: #    volume.alpha.kubernetes.io/storage-class: default  spec: storageClassName: manual accessModes: - ReadWriteOnce resources: requests: storage: 8Gi --- # Source: fabric-network/templates/fabric-peer0.yaml apiVersion: v1 kind: Service metadata: name: peer0 namespace: spec: loadBalancerIP: 192.168.99.100 externalIPs: - 192.168.99.100 ports: - name: "requests" port: 7051 protocol: TCP - name: "events" port: 7053 protocol: TCP selector: service: loyyal-fabric-network-peer0 type: LoadBalancer --- # Source: fabric-network/templates/fabric-peer0.yaml apiVersion: v1 kind: ReplicationController metadata: labels: service: loyyal-fabric-network-peer0 name: loyyal-fabric-network-peer0 namespace: spec: replicas: 1 selector: service: loyyal-fabric-network-peer0 template: metadata: labels: service: loyyal-fabric-network-peer0 namespace: spec: hostAliases: - ip: "192.168.99.100" hostnames: - "orderer.loyyal-mainnet.com" containers: - command: - peer - node - start - --peer-defaultchain=false env: - name: CORE_VM_ENDPOINT value: unix:///var/run/docker.sock - name: CORE_LOGGING_LEVEL value: DEBUG - name: CORE_PEER_ID value: peer0.loyyal.loyyal-mainnet.com - name: CORE_PEER_ADDRESS value: 192.168.99.100:7051   - name: CORE_PEER_GOSSIP_EXTERNALENDPOINT value: 192.168.99.100:7051 - name: CORE_PEER_MSPCONFIGPATH value: /etc/crypto-config/crypto-config-dev/loyyal-network/crypto-config/peerOrganizations/loyyal.loyyal-mainnet.com/peers/peer0.loyyal.loyyal-mainnet.com/msp - name: CORE_PEER_LOCALMSPID value: LoyyalMSP  #- name: CORE_LEDGER_STATE_STATEDATABASE #  value: "CouchDB" #- name: CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS #  value: "peer0-couchdb:5984" image: hyperledger/fabric-peer:x86_64-1.0.2 name: loyyal-fabric-network-peer0 workingDir: /opt/gopath/src/github.com/hyperledger/fabric ports: - containerPort: 7051 - containerPort: 7053 volumeMounts: - mountPath: /var/run/docker.sock name: loyyal-fabric-network-docker-sock - mountPath: /etc/crypto-config name: loyyal-fabric-network-crypto-config readOnly: true - mountPath: /var/hyperledger/production name: loyyal-fabric-network-fabric volumes: - name: loyyal-fabric-network-docker-sock hostPath: path: /var/run/docker.sock - name: loyyal-fabric-network-fabric persistentVolumeClaim: claimName: loyyal-fabric-network-peer0-pvc - name: loyyal-fabric-network-crypto-config hostPath: path: /develop/loyyal{noformat}    And the configtx:    {noformat} Profiles: LoyyalOrdererGenesis: Orderer: <<: *OrdererDefaults Organizations: - *OrdererOrg Consortiums: LoyyalConsortium: Organizations: - *Loyyal  LoyyalChannel: Consortium: LoyyalConsortium Application: <<: *ApplicationDefaults Organizations: - *Loyyal  ################################################################################ # # Section: Organizations # # - This section defines the different organizational identities which will # be referenced later in the configuration. # ################################################################################ Organizations:  # SampleOrg defines an MSP using the sampleconfig. It should never be used # in production but may be used as a template for other definitions - &OrdererOrg # DefaultOrg defines the organization which is used in the sampleconfig # of the fabric.git development environment Name: OrdererOrg  # ID to load the MSP definition as ID: OrdererMSP  # MSPDir is the filesystem path which contains the MSP configuration MSPDir: crypto-config/ordererOrganizations/loyyal-mainnet.com/msp  AdminPrincipal: Role.ADMIN  - &Loyyal # DefaultOrg defines the organization which is used in the sampleconfig # of the fabric.git development environment Name: Loyyal  # ID to load the MSP definition as ID: LoyyalMSP  MSPDir: crypto-config/peerOrganizations/loyyal.loyyal-mainnet.com/msp  AdminPrincipal: Role.ADMIN  AnchorPeers: # AnchorPeers defines the location of peers which can be used # for cross org gossip communication. Note, this value is only # encoded in the genesis block in the Application section context - Host: peer0.loyyal.loyyal-mainnet.com Port: 7051 - Host: peer1.loyyal.loyyal-mainnet.com Port: 7051  Orderer: &OrdererDefaults  # Orderer Type: The orderer implementation to start # Available types are "solo" and "kafka" OrdererType: kafka  Addresses: - orderer.loyyal-mainnet.com:7050  # Batch Timeout: The amount of time to wait before creating a batch BatchTimeout: 2s  # Batch Size: Controls the number of messages batched into a block BatchSize:  # Max Message Count: The maximum number of messages to permit in a batch MaxMessageCount: 10  # Absolute Max Bytes: The absolute maximum number of bytes allowed for # the serialized messages in a batch. AbsoluteMaxBytes: 768 KB  # Preferred Max Bytes: The preferred maximum number of bytes allowed for # the serialized messages in a batch. A message larger than the preferred # max bytes will result in a batch larger than preferred max bytes. PreferredMaxBytes: 512 KB  Kafka: # Brokers: A list of Kafka brokers to which the orderer connects # NOTE: Use IP:port notation Brokers: - fabric-infra-fabric-kafka:9092  # Organizations is the list of orgs which are defined as participants on # the orderer side of the network Organizations:  Application: &ApplicationDefaults  # Organizations is the list of orgs which are defined as participants on # the application side of the network Organizations:{noformat}                      ></environment> <description><! CDATA When I try to create a channel on a newly deployed network with a Kafka-backed orderer (via peer channel create), the orderer crashes and outputs "producer/broker/0 state change to  open  on loyyalchannel/0" and the error "fatal error: unexpected signal during runtime execution".   I started with the example here  https://github.com/hyperledger/fabric/blob/master/test/feature/docker-compose/docker-compose-kafka.yml , and have adapted it to run within our deployment (k8s). Using the x86_64-1.0.2 Docker tag for orderer, peer, kafka, zookeeper; and single replica for zk and kafka for POC.     Here's a stack trace:    {noformat} 2017-09-20 17:41:45.704 UTC  fsblkstorage  newBlockfileMgr -> DEBU d7d newBlockfileMgr() initializing file-based block storage for ledger: loyyalchannel 2017-09-20 17:41:45.704 UTC  kvledger.util  CreateDirIfMissing -> DEBU d7e CreateDirIfMissing  /var/hyperledger/production/orderer/chains/loyyalchannel/  2017-09-20 17:41:45.704 UTC  kvledger.util  logDirStatus -> DEBU d7f Before creating dir -  /var/hyperledger/production/orderer/chains/loyyalchannel/  does not exist 2017-09-20 17:41:45.704 UTC  kvledger.util  logDirStatus -> DEBU d80 After creating dir -  /var/hyperledger/production/orderer/chains/loyyalchannel/  exists 2017-09-20 17:41:45.716 UTC  fsblkstorage  syncCPInfoFromFS -> DEBU d81 Starting checkpoint=latestFileChunkSuffixNum= 0 , latestFileChunksize= 0 , isChainEmpty= true , lastBlockNumber= 0  2017-09-20 17:41:45.716 UTC  fsblkstorage  syncCPInfoFromFS -> DEBU d82 status of file  /var/hyperledger/production/orderer/chains/loyyalchannel/blockfile_000000 : exists= false , size= 0  2017-09-20 17:41:45.716 UTC  fsblkstorage  newBlockIndex -> DEBU d83 newBlockIndex() - indexItems:  BlockNum   2017-09-20 17:41:45.716 UTC  fsblkstorage  newBlockfileStream -> DEBU d84 newBlockfileStream(): filePath= /var/hyperledger/production/orderer/chains/loyyalchannel/blockfile_000000 , startOffset= 0  2017-09-20 17:41:45.716 UTC  fsblkstorage  nextBlockBytesAndPlacementInfo -> DEBU d85 Finished reading file number  0  2017-09-20 17:41:45.716 UTC  fsblkstorage  nextBlockBytesAndPlacementInfo -> DEBU d86 blockbytes  0  read from file  0  2017-09-20 17:41:45.717 UTC  fsblkstorage  indexBlock -> DEBU d87 Indexing block  blockNum=0, blockHash=  byte{0x19, 0xf0, 0x98, 0xdb, 0x64, 0x9a, 0x48, 0xa0, 0xa9, 0xa, 0xa7, 0x22, 0xca, 0xfc, 0x3a, 0x8d, 0x5d, 0x3d, 0x63, 0x1c, 0xe3, 0x36, 0xd0, 0x45, 0xba, 0x2f, 0xbd, 0x5, 0x1f, 0x66, 0xea, 0xb3} txOffsets= txId= locPointer=offset=39, bytesLength=21351   2017-09-20 17:41:45.717 UTC  fsblkstorage  updateCheckpoint -> DEBU d88 Broadcasting about update checkpointInfo: latestFileChunkSuffixNum= 0 , latestFileChunksize= 21395 , isChainEmpty= false , lastBlockNumber= 0  2017-09-20 17:41:45.717 UTC  fsblkstorage  retrieveBlockByNumber -> DEBU d89 retrieveBlockByNumber() - blockNum =  0  2017-09-20 17:41:45.717 UTC  fsblkstorage  newBlockfileStream -> DEBU d8a newBlockfileStream(): filePath= /var/hyperledger/production/orderer/chains/loyyalchannel/blockfile_000000 , startOffset= 0  2017-09-20 17:41:45.717 UTC  fsblkstorage  nextBlockBytesAndPlacementInfo -> DEBU d8b Remaining bytes= 21395 , Going to peek  8  bytes 2017-09-20 17:41:45.717 UTC  fsblkstorage  nextBlockBytesAndPlacementInfo -> DEBU d8c Returning blockbytes - length= 21392 , placementInfo={fileNum= 0 , startOffset= 0 , bytesOffset= 3 } 2017-09-20 17:41:45.717 UTC  orderer/multichain  newChainSupport -> DEBU d8d  channel: loyyalchannel  Retrieved metadata for tip of chain (blockNumber=0, lastConfig=0, lastConfigSeq=1): 2017-09-20 17:41:45.717 UTC  orderer/kafka  newChain -> INFO d8e  channel: loyyalchannel  Starting chain with last persisted offset -3 and last recorded block 0 2017-09-20 17:41:45.717 UTC  orderer/multichain  newChain -> INFO d8f Created and starting new chain loyyalchannel 2017-09-20 17:41:45.717 UTC  orderer/multichain  addBlockSignature -> DEBU d90 &{ledgerResources:0xc4202c4ee0 chain:0xc4203901b0 cutter:0xc420399540 filters:0xc4202c4f40 signer:0x1274e88 lastConfig:0 lastConfigSeq:0} 2017-09-20 17:41:45.717 UTC  orderer/kafka  setupProducerForChannel -> INFO d92  channel: loyyalchannel  Setting up the producer for this channel... 2017-09-20 17:41:45.717 UTC  orderer/kafka  try -> DEBU d93  channel: loyyalchannel  Connecting to the Kafka cluster 2017-09-20 17:41:45.717 UTC  orderer/multichain  addBlockSignature -> DEBU d91 &{} 2017-09-20 17:41:45.719 UTC  msp  GetLocalMSP -> DEBU d94 Returning existing local MSP 2017-09-20 17:41:45.719 UTC  msp  GetDefaultSigningIdentity -> DEBU d95 Obtaining default signing identity 2017-09-20 17:41:45.719 UTC  msp  GetLocalMSP -> DEBU d96 Returning existing local MSP 2017-09-20 17:41:45.719 UTC  msp  GetDefaultSigningIdentity -> DEBU d97 Obtaining default signing identity 2017-09-20 17:41:45.719 UTC  msp/identity  Sign -> DEBU d98 Sign: plaintext: 0A9B060A0A4F7264657265724D535012...E76C7DA33F05706BF5E452949E6E9966 2017-09-20 17:41:45.719 UTC  msp/identity  Sign -> DEBU d99 Sign: digest: 39ECFC4D692B833832D851DAE152173E531D5D43D20463AC43AC0B234DE5BE15 2017-09-20 17:41:45.719 UTC  msp  GetLocalMSP -> DEBU d9a Returning existing local MSP 2017-09-20 17:41:45.719 UTC  msp  GetDefaultSigningIdentity -> DEBU d9b Obtaining default signing identity 2017-09-20 17:41:45.719 UTC  orderer/multichain  addLastConfigSignature -> DEBU d9c  channel: testchainid  About to write block, setting its LAST_CONFIG to 0 2017-09-20 17:41:45.719 UTC  msp  GetLocalMSP -> DEBU d9d Returning existing local MSP 2017-09-20 17:41:45.719 UTC  msp  GetDefaultSigningIdentity -> DEBU d9e Obtaining default signing identity 2017-09-20 17:41:45.719 UTC  msp/identity  Sign -> DEBU d9f Sign: plaintext: 0A9B060A0A4F7264657265724D535012...E76C7DA33F05706BF5E452949E6E9966 2017-09-20 17:41:45.719 UTC  msp/identity  Sign -> DEBU da0 Sign: digest: 04989DE93C79F42CBE745270C099CADB19C1B6736FF531EC5E7BCCE57FC6047B 2017-09-20 17:41:45.720 UTC  fsblkstorage  indexBlock -> DEBU da1 Indexing block  blockNum=1, blockHash=  byte{0xc9, 0xa6, 0xb9, 0x44, 0x2e, 0xf3, 0x66, 0xa9, 0x4e, 0x96, 0xde, 0xc0, 0x93, 0x21, 0x4d, 0x75, 0xac, 0x9e, 0x31, 0xc7, 0xf, 0x55, 0xaf, 0x5b, 0x1d, 0xec, 0x0, 0x32, 0xd7, 0xaf, 0xdb, 0xa3} txOffsets= txId= locPointer=offset=71, bytesLength=22287   2017-09-20 17:41:45.720 UTC  fsblkstorage  updateCheckpoint -> DEBU da2 Broadcasting about update checkpointInfo: latestFileChunkSuffixNum= 0 , latestFileChunksize= 42523 , isChainEmpty= false , lastBlockNumber= 1  2017-09-20 17:41:45.721 UTC  orderer/multichain  WriteBlock -> DEBU da3  channel: testchainid  Wrote block 1 2017-09-20 17:41:45.721 UTC  orderer/kafka  processRegular -> DEBU da4  channel: testchainid  Batch filled, just cut block 1 - last persisted offset is now 1 2017-09-20 17:41:45.721 UTC  orderer/kafka  try -> DEBU da5  channel: loyyalchannel  Error is nil, breaking the retry loop 2017-09-20 17:41:45.721 UTC  orderer/kafka  startThread -> INFO da6  channel: loyyalchannel  Producer set up successfully 2017-09-20 17:41:45.721 UTC  orderer/kafka  sendConnectMessage -> INFO da7  channel: loyyalchannel  About to post the CONNECT message... 2017-09-20 17:41:45.721 UTC  orderer/kafka  try -> DEBU da8  channel: loyyalchannel  Attempting to post the CONNECT message...  sarama  2017/09/20 17:41:45.717716 client.go:110: Initializing new client  sarama  2017/09/20 17:41:45.717724 config.go:329: ClientID is the default of 'sarama', you should consider setting it to something application-specific.  sarama  2017/09/20 17:41:45.717751 config.go:329: ClientID is the default of 'sarama', you should consider setting it to something application-specific.  sarama  2017/09/20 17:41:45.717759 client.go:601: client/metadata fetching metadata for all topics from broker fabric-infra-fabric-kafka:9092  sarama  2017/09/20 17:41:45.719449 broker.go:146: Connected to broker at fabric-infra-fabric-kafka:9092 (unregistered)  sarama  2017/09/20 17:41:45.721733 client.go:397: client/brokers registered new broker #0 at fabric-infra-fabric-kafka-0.fabric-infra-fabric-kafka-headless.loyyal-network.svc.cluster.local:9092  sarama  2017/09/20 17:41:45.721752 client.go:154: Successfully initialized new client  sarama  2017/09/20 17:41:45.721992 client.go:599: client/metadata fetching metadata for  loyyalchannel  from broker fabric-infra-fabric-kafka:9092  sarama  2017/09/20 17:41:45.758622 client.go:610: client/metadata found some partitions to be leaderless  sarama  2017/09/20 17:41:45.758639 client.go:590: client/metadata retrying after 250ms... (3 attempts remaining) 2017-09-20 17:41:45.837 UTC  orderer/common/deliver  Handle -> WARN da9  channel: loyyalchannel  Rejecting deliver request because of consenter error 2017-09-20 17:41:45.837 UTC  orderer/main  func1 -> DEBU daa Closing Deliver stream 2017-09-20 17:41:45.838 UTC  orderer/main  Deliver -> DEBU dab Starting new Deliver handler 2017-09-20 17:41:45.838 UTC  orderer/common/deliver  Handle -> DEBU dac Starting new deliver loop 2017-09-20 17:41:45.838 UTC  orderer/common/deliver  Handle -> DEBU dad Attempting to read seek info message  sarama  2017/09/20 17:41:46.008948 client.go:599: client/metadata fetching metadata for  loyyalchannel  from broker fabric-infra-fabric-kafka:9092  sarama  2017/09/20 17:41:46.014480 config.go:329: ClientID is the default of 'sarama', you should consider setting it to something application-specific. fatal error: unexpected signal during runtime execution  signal SIGSEGV: segmentation violation code=0x1 addr=0x47 pc=0x7f5ec665b259   runtime stack: runtime.throw(0xc72896, 0x2a) /opt/go/src/runtime/panic.go:566 +0x95 runtime.sigpanic() /opt/go/src/runtime/sigpanic_unix.go:12 +0x2cc  goroutine 212  syscall, locked to thread : runtime.cgocall(0x9f3e50, 0xc420215df8, 0xc400000000) /opt/go/src/runtime/cgocall.go:131 +0x110 fp=0xc420215db0 sp=0xc420215d70 net._C2func_getaddrinfo(0x7f5ec0000a00, 0x0, 0xc4208a6c90, 0xc42010e510, 0x0, 0x0, 0x0) ??:0 +0x68 fp=0xc420215df8 sp=0xc420215db0 net.cgoLookupIPCNAME(0xc420bae0e0, 0x5f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0) /opt/go/src/net/cgo_unix.go:146 +0x37c fp=0xc420215f18 sp=0xc420215df8 net.cgoIPLookup(0xc420b96c00, 0xc420bae0e0, 0x5f) /opt/go/src/net/cgo_unix.go:198 +0x4d fp=0xc420215fa8 sp=0xc420215f18 runtime.goexit() /opt/go/src/runtime/asm_amd64.s:2086 +0x1 fp=0xc420215fb0 sp=0xc420215fa8 created by net.cgoLookupIP /opt/go/src/net/cgo_unix.go:208 +0xb4{noformat}    And the command:    {noformat} export POD_NS=$NAMESPACE export GENESIS_BLOCK=/etc/crypto-config/crypto-config-dev/loyyal-network/channel-artifacts/loyyal-channel.tx export POD_ID=`kubectl get pod --namespace=$POD_NS | grep fabric-network-peer0 | cut -f1 -d' '` kubectl exec $POD_ID --namespace=$POD_NS -it --  bash -c "CORE_PEER_MSPCONFIGPATH=/etc/crypto-config/crypto-config-dev/loyyal-network/crypto-config/peerOrganizations/$ORG_DOMAIN/users/Admin@$ORG_DOMAIN/msp && CORE_PEER_ADDRESS=0.0.0.0:7051 peer channel create -o $ORDERER_ADDR:7050 -c loyyalchannel -f $GENESIS_BLOCK" {noformat}  ></description> </Issue>
