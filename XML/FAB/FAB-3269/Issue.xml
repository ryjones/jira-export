<Issue id="15861" key="FAB-3269" number="3269" project="10002" reporter="ales" assignee="ales" creator="ales" type="10004" summary="The peer does not properly honour endorsement policies" priority="1" resolution="10000" status="6" created="2017-04-20 11:32:23.0" updated="2018-07-20 14:12:18.0" resolutiondate="2017-05-02 11:52:38.0" votes="0" watches="5" workflowId="38062"> <description><! CDATA PROBLEM =======  Currently, endorsement policies are checked EXCLUSIVELY for the chaincode whose name is referenced in the ChaincodeId field of the ChaincodeHeaderExtension. However this is not the check that a chaincode developer expects, nor is it secure. The peer should instead check the endorsement policy of each ledger namespace (i.e. chaincode) that is being written to in the read-write set of the transaction. This fact would honour the invariant that   "any write to a chaincode namespace has been verified against the endorsement policy of that chaincode"  This it is a security vulnerability.  The attack can be perpetrated in a number of ways (I'll list only two below, more are likely to be possible): 1) from a cc with more permissive endorsement policies (cc-permissive) call a chaincode with stricter endorsement policies (cc-strict); the ensuing transaction can modify the state of cc-strict, but only the endorsement policies of cc-permissive are checked. The attacker has successfully bypassed the endorsement of cc-strict; 2) we have to expect that the default endorsement policy will be used in >0 cases (otherwise we should remove it); we also have to expect that in a channel, the default endorsement policy might exist alongside stricter endorsement policies (otherwise we should forbid it); for all those cases, with this vulnerability in place, any org can make arbitrary writes to the ledger as follows: produce a tx out of thin air with the desired rwset, endorse it, submit it as an invoke of their own cc; the attacker has successfully bypassed the endorsement policies of that channel; note that arbitrary writes include writes to system namespaces such as lscc's;  FIX ===  The validator code should perform the following checks  if tx invokes scc { do scc-specific validation as it is today } else { foreach namespace in rwset.WRITES { if namespace is a system namespace { tx is invalid }  invoke lscc to extract vscc and endorsement policy for the chaincode that corresponds to that namespace;  invoke the returned vscc with the returned endorsement policy to validate the tx;  } }   ></description> </Issue>
