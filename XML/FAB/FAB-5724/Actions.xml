<Action id="29937" issue="20118" author="jyellick" type="comment" created="2017-08-17 04:32:03.0" updateauthor="jyellick" updated="2017-08-17 04:32:03.0"> <body><! CDATA After auditing the code.  It turns out that this potential bug is very difficult to protect against as is.  The problem stems from the fact that the config structures are mutable.  This means that there are many pointers, in may places, many of which are embedded (and therefore may not be set using the sync/atomic package), all of which are potentially vulnerable to this sort of race.  My conclusion is that the only real way to cure this issue, is to overhaul the config processing subsystem to produce an *immutable* configuration.  When a new configuration is processed, it must create a new copy with new memory, and replace a single pointer so that all those who consume the configuration may always get a consistent view.  This overhaul is actually long due, and expect this will actually remove over 1000 lines of code.  In reality, the config structure probably should have always been immutable, but the initial embedding was wrong (the configtx code embedded the config structures instead of the other way around), and the initial config was much much simpler than what exists today.  Additionally, there have already been two bugs discovered in the configtx processing related to _not_ using immutable structures, so this is a good way to proactively remove others.  ></body> </Action>
