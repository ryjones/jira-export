<Action id="42172" issue="28401" author="troyronda" type="comment" created="2018-03-26 19:18:53.0" updateauthor="troyronda" updated="2018-03-26 19:21:56.0"> <body><! CDATA  ~yacovm   ~manish-sethi   To enable dynamic collection configs (without synchronized distribution of config), we will also need to the ability to discover collection policy & height. This will allow clients to have up-to-the-date knowledge on their configuration freshness and also the policy, itself.  ></body> </Action>
<Action id="42175" issue="28401" author="yacovm" type="comment" created="2018-03-26 19:26:03.0" updateauthor="yacovm" updated="2018-03-26 19:26:33.0"> <body><! CDATA  ~troyronda  , if the collection policy is a signature policy envelope (the same policy representation as endorsement policies) then it's technicall doable to extend service discovery with that, as I can just add a field to the chaincode query to make it target a specific collection, and maybe do something like take the endorsement policy tree representation, and prune the leaves that have MSP IDs that don't belong to the collection policy. However - I suggest you bring this up tomorrow in the design review of the dynamic collection config.   ></body> </Action>
<Action id="42728" issue="28401" author="scottz" type="comment" created="2018-04-09 15:36:13.0" updateauthor="scottz" updated="2018-04-09 15:36:13.0"> <body><! CDATA This is a very desirable feature. I notice it includes tasks for SDK development, but there were no designs yet for them discussed in the playback. Before this epic is approved, I hope we can finish the designs and resolve some more questions about the SDK and client APIs and expectations of responsibilities. # Is the Service Discovery algorithm deterministic? For a given chaincode and channel, would every sdk and client receive the same set of peers to use? If so, then everyone might use the same peer in each org for endorsements. That inhibits load balancing. # How often is the list of endorsement peers updated? Does that happen automatically, or would that only happen when the client invokes an API function for the Service Discovery feature to request an updated list of peers to use? # Is the client expected to request an updated peer list before each transaction? Or could the SDK handle that automatically whenever a peer does not respond to an endorsement proposal, or maybe when a grpc connection to a peer drops erroneously or when one cannot be established? # Without using Service Discovery, a client today can send proposals to multiple peers in an org; duplication provides robustness - in case one peer is unreachable. This logic seems unnecessary with Service Discovery, and message bandwidth will be saved, which is a very good thing. However, in a noisy/unreliable network, there will be extended outage periods. Suppose one peer becomes unreachable. It will take time (how much?) for gossip to notice unreachable peers and adjust the recommended endorser set. And it will take more time (how much?) for the SDK and Clients to obtain that new peer endorser set before they can begin rerouting their proposals to alternative peers. In the meantime, all transactions for all clients using that chaincode will fail, with no hope of succeeding even though other peers may be available. We must ensure the designs of the feature, including the SDK and client, limit or eliminate the length of outage periods.  ></body> </Action>
<Action id="42734" issue="28401" author="yacovm" type="comment" created="2018-04-09 16:25:12.0" updateauthor="yacovm" updated="2018-04-09 16:25:12.0"> <body><! CDATA {quote} I notice it includes tasks for SDK development, but there were no designs yet for them discussed in the playback{quote} That's because it is an architectural review of the feature and the implementation details of the client side is not in the scope of this feature.  Especially since we already have an SDK that uses service discovery (Go SDK).   {quote}Before this epic is approved {quote} It is. {quote}Is the Service Discovery algorithm deterministic? For a given chaincode and channel, would every sdk and client receive the same set of peers to use? If so, then everyone might use the same peer in each org for endorsements. That inhibits load balancing. {quote} The discovery service returns a descriptor, it is up to the SDK to compute a random answer based on that descriptor.  The descriptor, should be computed the same way for 2 queries given the membership of the peer and the channel state hasn't changed between the 2 subsequent queries. {quote}How often is the list of endorsement peers updated? Does that happen automatically, or would that only happen when the client invokes an API function for the Service Discovery feature to request an updated list of peers to use? {quote} The peer doesn't update the client. It needs to query again if it suspects the peer list changed.    {quote}Is the client expected to request an updated peer list before each transaction? {quote} No. I guess a heuristic of a obtaining the endorsement descriptor every now and then would make sense. Since the app already subscribes to the event service - it can know when it *should* in any case re-query the discovery service.  {quote} Or could the SDK handle that automatically whenever a peer does not respond to an endorsement proposal, or maybe when a grpc connection to a peer drops erroneously or when one cannot be established?{quote} I expect the SDK to maintain a black-list of peers that are unreachable, and re-analyze the descriptor obtained from last time and pick other peers.  {quote} Suppose one peer becomes unreachable. It will take time (how much?) for gossip to notice unreachable peers and adjust the recommended endorser set. And it will take more time (how much?) for the SDK and Clients to obtain that new peer endorser set before they can begin rerouting their proposals to alternative peers.{quote} Assuming we have enough peers alive to satisfy the endorsement policy - the SDK doesn't need to query the discovery service again. It just needs to pick a new random set, based on the descriptor given to it before.              ></body> </Action>
<Action id="44662" issue="28401" author="scottz" type="comment" created="2018-05-18 15:31:30.0" updateauthor="scottz" updated="2018-05-18 15:31:30.0"> <body><! CDATA There have been some discussions in email threads. In order to capture further decisions, I attached the document "Consuming the discovery service by the SDK" (provided by Yacov) to this feature epic, per request from release manager. And I have a couple questions: # Are all the SDKs going to implement the same APIs to use this feature in the same ways? Where can we find that agreement and API specification?  It would be desirable, from many perspectives, e.g test conformity, and user expectations and discussions based on common functionalities. And even though they are developed separately, they are all part of the open-source community, so I would hope the maintainers could guide the SDK development to be consistent. (This question acually applies for all features with SDK impact.) # Assuming Service Discovery is configured and enabled in the fabric, will an individual client application be able to choose to use the Service Discovery feature for one transaction, and to choose NOT to use it for another transaction?  We can discuss usecases, if necessary. For example: (A) An auditor or tester wants to query every peer in a channel to be sure they all received a list of transactions. (B) Or a client may use a nearby reliable peer for most of its traffic, and if failures occur because the node goes down then fallback to the mode of using the service discovery model so the SDK can find another peer to use.  ></body> </Action>
<Action id="46451" issue="28401" author="baohua" type="comment" body="It will be also useful if the SDK can discover how many channels already exist in the network from the orderer." created="2018-06-22 14:40:11.0" updateauthor="baohua" updated="2018-06-22 14:40:32.0"/>
