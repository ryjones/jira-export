<Issue id="15794" key="FAB-3207" number="3207" project="10002" reporter="yacovm" creator="yacovm" type="10004" summary="Join channel might fail if events are failed to be published" priority="3" resolution="10000" status="6" created="2017-04-17 18:47:10.0" updated="2018-07-20 14:12:15.0" resolutiondate="2017-04-18 18:43:54.0" votes="0" watches="1" workflowId="38023"> <description><! CDATA The code below is invoked when join channel is called: https://github.com/hyperledger/fabric/blob/master/core/scc/cscc/configure.go#L124-L127 {code} 	if err := producer.SendProducerBlockEvent(block); err != nil { 		msg := fmt.Sprintf("Error sending block event %s", err) 		return shim.Error(msg) 	} {code} While the call to publish the event might fail in case a subscriber is reading "too slow" from the channel/stream: https://github.com/hyperledger/fabric/blob/master/events/producer/events.go#L324-L327 {code} func Send(e *pb.Event) error { ... ... ...  		select { 		case gEventProcessor.eventChannel <- e: 		case <-time.After(time.Duration(gEventProcessor.timeout) * time.Millisecond): 			return fmt.Errorf("could not send the blocking event") 		} 	} {code}  IMO an event publishing shouldn't fail a channel joining, and this also exposes the peer to an attack by a client - it can render the peer unable to join to any channel in this way.  ~C0rWin   ~mastersingh24   ~binhn   ></description> </Issue>
