<Action id="68182" issue="44480" author="kopaygorodsky" type="comment" created="2020-03-02 14:44:53.0" updateauthor="kopaygorodsky" updated="2020-03-02 14:45:53.0"> <body><! CDATA Adding mycc here https://github.com/hyperledger/fabric/blob/master/core/committer/txvalidator/v14/vscc_validator.go#L412 fixes the problem, but I'm still not sure that this is a right way to do such things. I know thay you are moving away from system chaincodes, but it simplifies a lot in my case.  Btw have no idea what will happen if I use 2.0 capabilities, I just can't try them because sdk does not support new lifecycle.   ></body> </Action>
<Action id="68436" issue="44480" author="denyeart" type="comment" body=" ~sykesm   ~mastersingh24  What is the guidance for system chaincodes these days?" created="2020-03-19 04:31:18.0" updateauthor="denyeart" updated="2020-03-19 04:31:18.0"/>
<Action id="68563" issue="44480" author="sykesm" type="comment" created="2020-03-25 11:05:02.0" updateauthor="sykesm" updated="2020-03-25 11:05:02.0"> <body><! CDATA {quote}What is the guidance for system chaincodes these days?{quote}  There really isn't any. Since we don't have SCC plugins, we don't have tests, samples, or examples. In v2, the expectation is that those extending the peer with system chaincode are experienced Fabric developers and capable of maintaining a sparse fork that includes custom SCC.  As for the error reported in this issue, adding the custom SCC name to the builtin chaincode list should probably have been sufficient but, unrelated to the extraction of SCC plugins, the validation package was updated to remove some sources of non-determinism. This was intentional.  {code} commit 41e99e98754135792d525c959577337d4cb0daa6 tree 34eae80e650a5fb2634cbaa0d059948adb05a7cb parent 579e66dbdc7c58620c0ca5f68222240ccf5b386d author Jason Yellick <jyellick@us.ibm.com> Mon Jul 29 11:37:35 2019 -0400 committer Jason Yellick <jyellick@us.ibm.com> Wed Jul 31 12:02:48 2019 -0400  FAB-16124 Inline sccprovider checks in validation  The validation needs for the things provided by the sccprovider to be constant across releases, however, we inject them as a dynamic dependency.  Fixing.  Change-Id: I324727a4f4a047f795c550340d324d254464ecc4 {code}  Adding the custom SCC name to the appropriate functions at the bottom of the file is appropriate for 1.4 capabilities.  As for v2 capabilities, I wouldn't be surprised if there were problems but I don't know what they might be. Perhaps  ~jyellick  has some thoughts.    ></body> </Action>
<Action id="68578" issue="44480" author="jyellick" type="comment" created="2020-03-25 14:45:53.0" updateauthor="jyellick" updated="2020-03-25 14:45:53.0"> <body><! CDATA As  ~sykesm  mentions, there really isn't any testing around this, so the official statement would be "it's not supported".  That being said, my recommendation would be _not_ to add them into the list of SCCs. The notion of SCCs being defined in this way has always been very broken (how do you set an endorsement policy? how do you define collections? etc.).  Instead, I would encourage you to enable the v2.0 application capabilities, and use the new lifecycle.  At this point, you should be able to to create the chaincode definition as normal (approve on enough orgs, then commit the definition).  For the package ID, specify the name of your system chaincode (e.g. {{mycc}}).  At this point, I believe everything should simply work.  ></body> </Action>
<Action id="68579" issue="44480" author="kopaygorodsky" type="comment" body="thanks for your answers, as I understood I&apos;ll need to move from that idea. Btw it works now, I&apos;m using scc as distributed storage per channel. There are channel config blocks and collection of the channel members signs. Every participant can see proposals and sign it, I don&apos;t care about endorsement policy because I validate proposal using policyMgr.EvaluateSignedData(signedData)." created="2020-03-25 14:57:41.0" updateauthor="kopaygorodsky" updated="2020-03-25 14:57:41.0"/>
<Action id="68580" issue="44480" author="sykesm" type="comment" created="2020-03-25 15:05:31.0" updateauthor="sykesm" updated="2020-03-25 15:05:31.0"> <body><! CDATA None of the available resolutions really reflect reality...  I'm glad things are working on your end and hopefully you don't run into issues as you move towards the 2.0 capabilities and the new lifecycle.  ></body> </Action>
<Action id="70597" issue="44480" author="kopaygorodsky" type="comment" created="2020-10-30 23:58:05.0" updateauthor="kopaygorodsky" updated="2020-10-31 16:07:27.0"> <body><! CDATA  ~sykesm   ~jyellick  Sorry to update on the closed ticket.  I've just moved to 2.0 capabilities and it stopped working :(  Querying is fine, but it fails when a peer validates a transaction from orderer.  https://gist.github.com/kopaygorodsky/8ccbf53db927fa5abe7133e23e3b60e7  Chaincode is built using shim package with shim.GetState and shim.PutState functions. I don't have any collections, endorsement policy is not that important.   Could you, please, suggest where to look?  I would like to fix it, a lot of people are using this feature.  https://github.com/hyperledger/fabric/pull/1822  Seems I need to write another validator for cases when cc is a system chaincode (implements `SelfDescribingSysCC`) https://github.com/hyperledger/fabric/blob/master/core/committer/txvalidator/v20/plugindispatcher/dispatcher.go#L192 policydsl.SignedByAnyMember() can be used as policy.  ></body> </Action>
<Action id="72404" issue="44480" author="rajatsharma" type="comment" created="2022-02-08 06:24:42.0" updateauthor="rajatsharma" updated="2022-02-08 06:24:42.0"> <body><! CDATA  ~kopaygorodsky ,  Was there any progress in working with the system chaincode?  Even I wanted to migrate a system chaincode from V1.4.2 to V2.X.   The main feature that I want to use is that the chaincode should be available on a channel as soon as the channel is created.  Any resource on that or any approach will be highly appreciated.   cc-  ~jyellick   ~sykesm   ></body> </Action>
