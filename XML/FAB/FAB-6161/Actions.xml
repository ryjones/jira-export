<Action id="30941" issue="20826" author="mastersingh24" type="comment" created="2017-09-16 11:40:17.0" updateauthor="mastersingh24" updated="2017-09-17 08:24:44.0"> <body><! CDATA This is not a bug given the fact that the static flag is intentionally being used and this is known / expected behavior. I do think that we can likely move away from the static build if we use the multi-stage build capabilities of Docker 17.06+  Of course we can also make it a a settable flag within the Makefile as well  ></body> </Action>
<Action id="30955" issue="20826" author="gbolo" type="comment" created="2017-09-16 18:35:19.0" updateauthor="gbolo" updated="2017-09-16 18:35:19.0"> <body><! CDATA Hi  ~mastersingh24   Thanks for your time and thoughts on this issue. I highly recommend moving to multi-stage docker builds as that should also clean up some of the unnecessary complexity of the Makefile. In terms of the issue itself, I guess the official recommendation would be to create your own images if you intend to use pkcs11. While this works for me, since I already maintain my own images with fabric-ca-client popped in and my own entrypoint logic (I have been using the fabric basically since it's inception), it seems a bit unfortunate for those who are new to the fabric and may not know this. My final question would be, is the goal of these images simply for unit testing and development deployments, or are they intended to be used in a production capacity?  Thanks again Gari.  ></body> </Action>
<Action id="30978" issue="20826" author="troyronda" type="comment" created="2017-09-18 14:07:01.0" updateauthor="troyronda" updated="2017-09-18 14:35:38.0"> <body><! CDATA Hi  ~mastersingh24   IMHO, there should be some supported path to using PKCS11 that doesn't involve changing the project (inc. Makefile). As well, I think it would be advisable to have a tagged build that includes PKCS11 capability.  (since my understanding is that PKCS11 is supported by Fabric).  Thoughts?  ></body> </Action>
<Action id="30979" issue="20826" author="troyronda" type="comment" created="2017-09-18 14:16:23.0" updateauthor="troyronda" updated="2017-09-18 14:32:44.0"> <body><! CDATA  ~mastersingh24  - also, out of curiosity, what's the connection between multi-stage builds and static?  e.g., are you thinking it will be an issue to maintain the same libraries across the images?  ></body> </Action>
<Action id="30982" issue="20826" author="aleksandar.likic" type="comment" created="2017-09-18 14:39:58.0" updateauthor="aleksandar.likic" updated="2017-09-18 14:43:41.0"> <body><! CDATA  ~mastersingh24  We tried to configure the official fabric image with PKCS11 (softhsm2, what BCCSP has been tested with) and it failed - hence the bug.  Fabric is currently not tested with PKCS11. It is only BCCSP (which should be regarded as a 3rd party library) that is tested independently. Until PKCS11 is tested in Fabric and there is a tagged build/image it is not fair to say that Fabric supports PKCS11.  ></body> </Action>
<Action id="31047" issue="20826" author="divyank" type="comment" created="2017-09-20 18:32:10.0" updateauthor="divyank" updated="2017-09-20 18:32:10.0"> <body><! CDATA Hi  ~mastersingh24 , you mentioned that the static flag is intentionally being used. Can you help us understand the reasoning behind this?  Based on chat conversations and previous commit messages, I came across the following concerns: * *Image Size:* It appears that motivation for statically linking C dependencies to the peer and orderer was to keep runtime image sizes small while placing all dependencies in the large builder image.  This does not make sense to me as the footprint of our C dependencies is extremely small.  For non-static builds, we only need to ensure that the same version of the dependencies are available at build and run time. This is easy to do because the builder image (baseimage) inherits the runtime image (basos). Even if we moved from ubuntu to something like alpine base images in the future (to further optimize the runtime image size), we can ensure that consistent versions of the dependencies are used across images. * *Deterministic Builds:* Another reason was that statically linking ensures all peers link to the same dependencies at build time. This guarantees that we do not end up with two peers in a network that have linked to different versions of the C libraries at runtime. The current fabric build and distribution process prevents this from happening. We distribute docker images and explicitly control what’s available to the peer at runtime.  In addition to this, if the additional management of dependencies required by dynamic builds is a concern, I’d like to point out that we are already doing this for glibc which (due to weak linking) expects the shared libraries from the version used for static linking to be present at runtime.   ></body> </Action>
<Action id="31055" issue="20826" author="troyronda" type="comment" created="2017-09-21 01:32:57.0" updateauthor="troyronda" updated="2017-09-21 02:29:45.0"> <body><! CDATA I reviewed Divyank's comments above and the benefits listed in the commit description of  https://gerrit.hyperledger.org/r/#/c/13369/ . The benefits are useful for our team.   Aleks has also made good points regarding the configurable point raised in the - 2 review  what does the CI use - what is published as the images? Aleks is correct that a nostatic flag that isn't supported by CI nor included in published images doesn't fully accomplish the goal.  The out-of-the-box binaries & images should be able to support pluggable modules such as PKCS11 (and hopefully future Fabric extensions too).  From Divyank's writeup, the concerns seem addressable without this flag... If nothing is missing from this analysis, then I am curious why this flag is being set?  ></body> </Action>
<Action id="31106" issue="20826" author="divyank" type="comment" created="2017-09-22 19:47:29.0" updateauthor="divyank" updated="2017-09-25 21:29:15.0"> <body><! CDATA Just a summary of what we're trying to do in case it isn't clear:   - Pull official fabric peer images from docker hub:  https://hub.docker.com/r/hyperledger/fabric-peer/   - Enable BCCSP PKCS11 option  - Mount .so files using docker volumes. These .so files can be HSM libraries or Go plugins.  - Run container  - In both cases (initializing PKCS11 or Go plugins), we see segfaults due to the unsupported -static build  *EDIT:*  ~gbolo  informed me that HSM integration involves things other than the .so library (like a fabric-ca client to do enrolment). So step 3 should read: Use Official image as base Image (FROM line) with additional layers added to it for HSM libraries, binaries, dependencies and functionality.  ></body> </Action>
