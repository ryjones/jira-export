<Action id="30477" issue="20575" author="senthil1" type="comment" created="2017-09-04 07:05:52.0" updateauthor="senthil1" updated="2017-09-04 07:05:52.0"> <body><! CDATA LoadCommittedVersions() expects a set of compositeKeys which need to be loaded into a cache. In order to create those compositeKeys set, we need to parse the block to get the readSets (both public and hashed read sets) and then construct compositeKeys. In order to do this for hashed read sets from validator side, we need GetHashedDataNsAndKeyHashStr. Note that GetHashedDataNsAndKeyHashStr is used in validateKVReadHash to use GetVersion() directly. Hence, only by making privacyenabledstate.DB to implement BulkOptimizable is not adequate{color:#000000}. Correct me if I am wrong. {color}  To remove GetHashedDataNsAndKeyHashStr from privacyenabledstate.DB, we need to do one of the following:  1. Move GetHashedDataNsAndKeyHashStr into util package with a few other local function defined in privacyenabledstate. Make privacyenabledstate.DB to implement the BulkOptimizable interface. Validator can construct the compositeKeys and call privacyenabledstate.DB.LoadCommittedVersions().    2. Pass validator internal block to privacyenablestate.DB (need to expose a new interface named LoadCommittedVersionsFromBlock()) instead of compositeKeys set so that validator need not to call GetHashedDataNsAndKeyHashStr. No need to make privacyenabledstate.DB implement BulkOptimizable.   3. Pass two arguments: statedb.CompositeKeys and privacyenabledstate.PvtCompositeKeys to privacyenablestate.DB (need to expose a new interface named LoadCommittedPubAndHashVersion()). No need to make privacyenabledstate.DB implement BulkOptimizable  In all the above 3 approaches, we need to rename GetValueHash defined in privacyenabledstate.DB to GetHashVersion() which can be used by validator during validation of hashed read set.    ~manish-sethi  Do you have any preference on above approaches? Or any other approach in Mind? For me, approach 3 looks fine.  ></body> </Action>
<Action id="30478" issue="20575" author="senthil1" type="comment" body=" ~denyeart " created="2017-09-04 07:06:15.0" updateauthor="senthil1" updated="2017-09-04 07:06:15.0"/>
<Action id="30527" issue="20575" author="manish-sethi" type="comment" created="2017-09-05 19:44:37.0" updateauthor="manish-sethi" updated="2017-09-05 19:44:37.0"> <body><! CDATA Yes, the approach 3 in your listing is what I had in mind. Approach 1. and 2. are not cleaner because, in these one layer assume some implementation level details about the other layers.     As far as implementing `LoadCommittedPubAndHashVersion` is concerned, you would better need corresponding {color:#000000}`ClearCachedVersions` {color}as well. A combination of these two functions is what I meant by the new version of `BulkOptimizable` that would be implemented by the `privacyenabledstate.DB`. Further, the implementation of `privacyenabledstate.BulkOptimizable` would leverage the functions in `statedb.BulkOptimizable` (Which already exists and would stay to be used by privacyenabledstate.DB).     But largely, we are in sync as you chose the approach 3. Let me look at the CR and comment there.  ></body> </Action>
<Action id="30539" issue="20575" author="manish-sethi" type="comment" body=" ~Senthil1  Looked at the CR and I am good with the approach you had followed." created="2017-09-05 21:33:50.0" updateauthor="manish-sethi" updated="2017-09-05 21:33:50.0"/>
