<Issue id="15945" key="FAB-3352" number="3352" project="10002" reporter="c0rwin" assignee="c0rwin" creator="c0rwin" type="10004" summary="No need to initialize grpc servers in CSCC tests" priority="3" resolution="10000" status="6" created="2017-04-23 13:27:40.0" updated="2018-07-20 14:12:21.0" resolutiondate="2017-04-23 15:13:30.0" votes="0" watches="1" workflowId="38121"> <description><! CDATA Currently each test in  configure_test.go|https://github.com/hyperledger/fabric/blob/master/core/scc/cscc/configure_test.go  initialize peer endpoint by using   {code} func setupEndpoint(t *testing.T) { 	peerAddress := peer.GetLocalIP() 	if peerAddress == "" { 		peerAddress = "0.0.0.0" 	} 	peerAddress = peerAddress + ":21213" 	t.Logf("Local peer IP address: %s", peerAddress) 	var opts   grpc.ServerOption 	grpcServer := grpc.NewServer(opts...) 	getPeerEndpoint := func() (*pb.PeerEndpoint, error) { 		return &pb.PeerEndpoint{Id: &pb.PeerID{Name: "cscctestpeer"}, Address: peerAddress}, nil 	} 	ccStartupTimeout := time.Duration(30000) * time.Millisecond 	pb.RegisterChaincodeSupportServer(grpcServer, chaincode.NewChaincodeSupport(getPeerEndpoint, false, ccStartupTimeout)) } {code}  While tests leverages mocking chaincode framework, for instance:  {code} // Failed path: Not enough parameters 	args :=     byte{  byte("JoinChain")} 	if res := stub.MockInvoke("2", args); res.Status == shim.OK { 		t.Fatalf("cscc invoke JoinChain should have failed with invalid number of args: %v", args) 	} {code}  There is not need to use {{setupEndpoint}} and initialize grpc server, hence function could be removed and tests should not use it.  ></description> </Issue>
