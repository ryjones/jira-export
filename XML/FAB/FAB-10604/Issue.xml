<Issue id="30995" key="FAB-10604" number="10604" project="10002" reporter="aatkddny" creator="aatkddny" type="10004" summary="Fabric java sdk error under load" priority="3" resolution="10000" status="6" created="2018-06-11 21:54:21.0" updated="2018-07-20 14:17:36.0" resolutiondate="2018-07-10 15:34:35.0" votes="0" watches="5" workflowId="43131"> <description><! CDATA When I stress test a fabric installation by writing <String, String> KV values from a multithreaded application the event hub errors out causing some of the messages to fail to write.     Updated - the following is copied from a comment below.  Bypassing the event hub causes the originally reported issue on the fabric peer to go away, but leaves an issue with the SDK.  *It occurs on both 1.1.0 and 1.2.0-SNAPSHOT - as the exception below shows.*  <reproduced from comment below>  Note for completeness, I just ran same on 1.2.0-SNAPSHOT vs a 1.1 Fabric.  Same problem occurs so the comment I added yesterday doesn't address this particular issue.  Note bolded grpc version in the exception below.   {{2018-06-15 10:20:31.868 ERROR 12721 —  ool-7-thread-22  org.hyperledger.fabric.sdk.Channel : Sending proposal to xxx-peer1.xxx.com failed because of: gRPC failure=Status\{code=UNAVAILABLE, description=Channel shutdownNow invoked, cause=null}}}{{java.lang.Exception: io.grpc.StatusRuntimeException: UNAVAILABLE: Channel shutdownNow invoked}} \{\{ at org.hyperledger.fabric.sdk.Channel.sendProposalToPeers(Channel.java:2766)  fabric-sdk-java-1.2.0-SNAPSHOT.jar:na }} \{\{ at org.hyperledger.fabric.sdk.Channel.sendProposal(Channel.java:2672)  fabric-sdk-java-1.2.0-SNAPSHOT.jar:na }} \{\{ at org.hyperledger.fabric.sdk.Channel.sendTransactionProposal(Channel.java:2557)  fabric-sdk-java-1.2.0-SNAPSHOT.jar:na }} \{\{ at com.mo.fabric.facade.InvokeFabric.invoke(InvokeFabric.java:138)  classes/:na }} \{\{ at com.mo.dare.processor.Processor.write(Processor.java:191)  classes/:na }} \{\{ at com.mo.dare.processor.Processor.create(Processor.java:94)  classes/:na }} \{\{ at com.mo.dare.endpoint.AgencyEndpoint.create(AgencyEndpoint.java:37)  classes/:na }} \{\{ at com.mo.dare.camel.AgencyPersist.process(AgencyPersist.java:34)  classes/:na }} \{\{ at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:103)  camel-core-2.19.3.jar:2.19.3 }} \{\{ at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)  camel-core-2.19.3.jar:2.19.3 }} \{\{ at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)  camel-core-2.19.3.jar:2.19.3 }} \{\{ at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)  camel-core-2.19.3.jar:2.19.3 }} \{\{ at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)  camel-core-2.19.3.jar:2.19.3 }} \{\{ at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)  camel-core-2.19.3.jar:2.19.3 }} \{\{ at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)  camel-core-2.19.3.jar:2.19.3 }} \{\{ at org.apache.camel.processor.MulticastProcessor.doProcessParallel(MulticastProcessor.java:841)  camel-core-2.19.3.jar:2.19.3 }} \{\{ at org.apache.camel.processor.MulticastProcessor.access$200(MulticastProcessor.java:85)  camel-core-2.19.3.jar:2.19.3 }} \{\{ at org.apache.camel.processor.MulticastProcessor$1.call(MulticastProcessor.java:328)  camel-core-2.19.3.jar:2.19.3 }} \{\{ at org.apache.camel.processor.MulticastProcessor$1.call(MulticastProcessor.java:314)  camel-core-2.19.3.jar:2.19.3 }} \{\{ at java.util.concurrent.FutureTask.run(FutureTask.java:266)  na:1.8.0_162 }} \{\{ at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)  na:1.8.0_162 }} \{\{ at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)  na:1.8.0_162 }} \{\{ at java.lang.Thread.run(Thread.java:748)  na:1.8.0_162 }} {{Caused by: io.grpc.StatusRuntimeException: UNAVAILABLE: Channel shutdownNow invoked}} \{\{ at io.grpc.Status.asRuntimeException(Status.java:526) ~{color:#ff0000}* grpc-core-1.12.0.jar:1.12.0 *{color}}} \{\{ at io.grpc.stub.ClientCalls$UnaryStreamToFuture.onClose(ClientCalls.java:467) ~{color:#ff0000}* grpc-stub-1.12.0.jar:1.12.0 *{color}}} \{\{ at io.grpc.PartialForwardingClientCallListener.onClose(PartialForwardingClientCallListener.java:39) ~ grpc-core-1.12.0.jar:1.12.0 }} \{\{ at io.grpc.ForwardingClientCallListener.onClose(ForwardingClientCallListener.java:23) ~ grpc-core-1.12.0.jar:1.12.0 }} \{\{ at io.grpc.ForwardingClientCallListener$SimpleForwardingClientCallListener.onClose(ForwardingClientCallListener.java:40) ~ grpc-core-1.12.0.jar:1.12.0 }} \{\{ at io.grpc.internal.CensusStatsModule$StatsClientInterceptor$1$1.onClose(CensusStatsModule.java:684) ~ grpc-core-1.12.0.jar:1.12.0 }} \{\{ at io.grpc.PartialForwardingClientCallListener.onClose(PartialForwardingClientCallListener.java:39) ~ grpc-core-1.12.0.jar:1.12.0 }} \{\{ at io.grpc.ForwardingClientCallListener.onClose(ForwardingClientCallListener.java:23) ~ grpc-core-1.12.0.jar:1.12.0 }} \{\{ at io.grpc.ForwardingClientCallListener$SimpleForwardingClientCallListener.onClose(ForwardingClientCallListener.java:40) ~ grpc-core-1.12.0.jar:1.12.0 }} \{\{ at io.grpc.internal.CensusTracingModule$TracingClientInterceptor$1$1.onClose(CensusTracingModule.java:391) ~ grpc-core-1.12.0.jar:1.12.0 }} \{\{ at io.grpc.internal.ClientCallImpl.closeObserver(ClientCallImpl.java:471) ~ grpc-core-1.12.0.jar:1.12.0 }} \{\{ at io.grpc.internal.ClientCallImpl.access$300(ClientCallImpl.java:63) ~ grpc-core-1.12.0.jar:1.12.0 }} \{\{ at io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl.close(ClientCallImpl.java:553) ~ grpc-core-1.12.0.jar:1.12.0 }} \{\{ at io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl.access$600(ClientCallImpl.java:474) ~ grpc-core-1.12.0.jar:1.12.0 }} \{\{ at io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl$1StreamClosed.runInContext(ClientCallImpl.java:591) ~ grpc-core-1.12.0.jar:1.12.0 }} \{\{ at io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37) ~ grpc-core-1.12.0.jar:1.12.0 }} \{\{ at io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:123) ~ grpc-core-1.12.0.jar:1.12.0 }} \{\{ ... 3 common frames omitted}}  </reproduced from comment below>  Steps to reproduce remain the same:  Using the trivial chaincode supplied, or similar on a channel with a single org attached create around 20k 5kb strings with 15 byte keys. Use something multithreaded to pump them into the fabric using the java SDK using 200 threads. Error occurs consistently.  Same code running single threaded goes to completion.  Same code running with a limited number of threads (test with 10) runs to completion.   Only when running with higher concurrency is the problem evident.      ></description> </Issue>
