<Action id="24031" issue="16862" author="kchristidis" type="comment" body="Nishi, thanks for the detailed report. I have some comments, but before I go ahead, can you also attach `base/docker-compose-base.yml` here as well? Thank you." created="2017-05-18 15:35:21.0" updateauthor="kchristidis" updated="2017-05-18 15:35:21.0"/>
<Action id="24047" issue="16862" author="kchristidis" type="comment" created="2017-05-18 21:13:36.0" updateauthor="kchristidis" updated="2017-05-18 21:13:36.0"> <body><! CDATA As far as I can tell, none of the Kafka brokers are actually passed in the list of ZK nodes. We're looking for an entry similar to this one:  https://gerrit.hyperledger.org/r/#/c/9495/6/bddtests/dc-orderer-kafka.yml@48   (And in general, a setting similar to what you see in `dc-orderer-kafka.yml` and `dc-orderer-kafka-base.yml` in the changeset above. Please let me know if you have questions and I'll be glad to help out and explain those settings.)  Can you adjust the environment accordingly, re-run, and let me know if the issue persists?  ></body> </Action>
<Action id="24073" issue="16862" author="nishi" type="comment" created="2017-05-19 13:02:48.0" updateauthor="nishi" updated="2017-05-19 15:44:27.0"> <body><! CDATA Please find attached peer-base.yaml & docker-compose-base.yaml we have been using. In docker-compose-base.yaml it appears we are covering what you got in your link above.  One difference I have observed between your file and what we have is, in our docker-compose-e2e.yaml file in order section ZK is missing from depends clause {code:java} orderer0.example.com: extends: file:   base/docker-compose-base.yaml service: orderer0.example.com container_name: orderer0.example.com depends_on: - kafka0 - kafka1 - kafka2  {code}    ></body> </Action>
<Action id="24085" issue="16862" author="kchristidis" type="comment" body="This is one of the differences in the setup, but not the crucial one (though it&apos;s needed). As far as I can tell, in those tests you are not providing the list of ZK nodes to the Kafka brokers, and the Kafka brokers themselves need to be configured in accordance to the CR I posted above." created="2017-05-19 15:13:12.0" updateauthor="kchristidis" updated="2017-05-19 15:13:12.0"/>
<Action id="24089" issue="16862" author="nishi" type="comment" created="2017-05-19 15:44:19.0" updateauthor="nishi" updated="2017-05-19 15:44:19.0"> <body><! CDATA And another config in docker-compose-base.yaml we are missing    {code:java}  - KAFKA_MIN_INSYNC_REPLICAS=2{code}    Update yaml file - restart network. Repeat test this time in step7  7. docker unpause TWO non-leaders before sending transaction.     Though, results are as seen in original issue not the expected one.  ></body> </Action>
<Action id="24100" issue="16862" author="kchristidis" type="comment" body="Nishi is working on the exact list of steps (down to the command level) that will allow me to reproduce this." created="2017-05-19 21:36:49.0" updateauthor="kchristidis" updated="2017-05-19 21:36:49.0"/>
<Action id="24124" issue="16862" author="kchristidis" type="comment" body="I&apos;m using  ~jeffgarratt &apos;s BDD framework to reproduce this so I&apos;m good Nishi. Will work on a fix." created="2017-05-21 23:23:23.0" updateauthor="kchristidis" updated="2017-05-21 23:23:23.0"/>
<Action id="24233" issue="16862" author="kchristidis" type="comment" body="FAB-4136 takes priority and likely affects this. Will address this first." created="2017-05-24 13:21:51.0" updateauthor="kchristidis" updated="2017-05-24 13:21:51.0"/>
<Action id="25308" issue="16862" author="kchristidis" type="comment" created="2017-06-05 04:26:11.0" updateauthor="kchristidis" updated="2017-06-05 04:26:11.0"> <body><! CDATA Nishi, I would like you to reproduce this with the latest master and the configuration files provided in https://jira.hyperledger.org/browse/FAB-3387  It is important to set te "verbose" flag for Kafka logs to true:  https://github.com/hyperledger/fabric/blob/master/bddtests/dc-orderer-base.yml#L17   As you have done earlier in this issue, please identify the exact list of steps you take.  Please attach the logs from every ordering service node used in this run.  ></body> </Action>
<Action id="25440" issue="16862" author="nishi" type="comment" created="2017-06-05 21:01:18.0" updateauthor="nishi" updated="2017-06-05 21:01:18.0"> <body><! CDATA commit levels:  SDK_NODE: *91bac30fec921775e21bf7f59de4d162f2462341* FABRIC: *670be92475a50b06e7bcb3fca15a558438d88e4a*  Git clone: 1. git clone  https://github.com/suryalnvs/fabric-docker-compose-svt   2. Updated fabric-docker-compose-svt/base/docker-compose-base.yaml - ORDERER_GENERAL_LOGLEVEL=debug - ORDERER_KAFKA_VERBOSE=true 3. Run ./reset.sh  4. replace ~/gopath/src/github.com/hyperledger/fabric-sdk-node/test/integration/e2e/config.json with attached config.json  4. Update in create-channel.js on line 127 from let envelope_bytes = fs.readFileSync(path.join(__dirname, '../../fixtures/channel/mychannel.tx')); to let envelope_bytes = fs.readFileSync(path.join(__dirname, '../../fixtures/channel/channel.tx'));  5. cd ~/gopath/src/github.com/hyperledger/fabric-sdk-node/test/unit {code:java} vi util.js /getOrdererAdmin  add /msp keyPath should be '../fixtures/channel/crypto-config/ordererOrganizations/example.com/users/Admin@example.com/msp/keystore'); certPath should be '../fixtures/channel/crypto-config/ordererOrganizations/example.com/users/Admin@example.com/msp/signcerts'  Find function getAdmin /getAdmin Add /msp keypath should be '../fixtures/channel/crypto-config/peerOrganizations/%s.example.com/users/Admin@%s.example.com/msp/keystore' certPath shlould be '../fixtures/channel/crypto-config/peerOrganizations/%s.example.com/users/Admin@%s.example.com/msp/signcerts'   {code} 6. cd ~/gopath/src/github.com/hyperledger/fabric-sdk-node/test/integration/e2e  7. node create-channel.js  8. node join-channel.js  9. node install-chaincode.js  10. node instantiate-chaincode.js  11. node invoke-transaction.js  12. node query.js (verify results, you may have to update expected value with every move)  13. docker pause kafaka1  14. docker pause kafka2  15. node invoke-transaction  16. node query verify results  17. docker pause kafka0 (leader)  (wait 30 seconds)  18. docker unpause kafka1 (non-leader)  Now we have {code:java} Up 29 minutes (Paused) 9093/tcp, 0.0.0.0:9096->9092/tcp kafka2 Up 29 minutes 9093/tcp, 0.0.0.0:9094->9092/tcp kafka1 Up 29 minutes (Paused) 0.0.0.0:9092->9092/tcp, 9093/tcp kafka0 Up 29 minutes 9093/tcp, 0.0.0.0:9098->9092/tcp kafka3  New leader from kafka logs:   2017-06-05 20:35:06,186  INFO New leader is 3 (kafka.server.ZookeeperLeaderElector$LeaderChangeListener) {code} *Does that mean it is kafka3 i.e. new leader??. Does the counting start with 0 as kafka broker names in docker-compose-base.yaml*  19. node invoke-transaction.js  20. Query  Expected Result: ----------------  Test to pass  Actual Result: ------------ {code:java} ***** End-to-end flow: query chaincode *****   ok 1 Successfully loaded member from persistence ok 2 checking query results are correct that user b has 600 now after the move ok 3 checking query results are correct that user b has 600 now after the move ok 4 Successfully query chaincode on the channel  1..4 # tests 4 # pass 4  # ok {code}  ></body> </Action>
<Action id="25442" issue="16862" author="kchristidis" type="comment" created="2017-06-05 21:08:24.0" updateauthor="kchristidis" updated="2017-06-05 21:08:24.0"> <body><! CDATA > *Does that mean it is kafka3 i.e. new leader??. Does the counting start with 0 as kafka broker names in docker-compose-base.yaml*  So the integer that you see in the logs is what you set the `KAFKA_BROKER_ID` ENV var to in your Docker Compose configuration file. From what I can tell from your docker-compose-base.yml, the kafka0 service has a broker ID of 1, etc. So the new leader being 3 is probably a reference to kafka2.  ></body> </Action>
<Action id="25444" issue="16862" author="kchristidis" type="comment" body="Nishi, thanks for re-checking so quickly. Confirmed with you that everything works as expected now. Closing this. Feel free to re-open if you see fit." created="2017-06-05 21:09:05.0" updateauthor="kchristidis" updated="2017-06-05 21:09:05.0"/>
<Action id="25448" issue="16862" author="nishi" type="comment" created="2017-06-05 21:40:47.0" updateauthor="nishi" updated="2017-06-05 21:40:47.0"> <body><! CDATA On a second run:  Noticed that I could send a tx successfully with just one kafka broker. {code:java} Up 35 minutes 9093/tcp, 0.0.0.0:9098->9092/tcp kafka3 Up 35 minutes (Paused) 9093/tcp, 0.0.0.0:9096->9092/tcp kafka2 Up 35 minutes (Paused) 0.0.0.0:9092->9092/tcp, 9093/tcp kafka0 Up 35 minutes (Paused) 9093/tcp, 0.0.0.0:9094->9092/tcp kafka1 {code} With {code:java} - KAFKA_MIN_INSYNC_REPLICAS=2, ( we have 4brokers total) {code}    Is this right?        ></body> </Action>
<Action id="25449" issue="16862" author="kchristidis" type="comment" created="2017-06-05 21:45:27.0" updateauthor="kchristidis" updated="2017-06-05 21:45:27.0"> <body><! CDATA If you leave code references aside (e.g. node create-channel.js), can you identify the list of steps that you are performing?  For example, something along the lines of: # Bring 1 ordering service node up with 4 kafka brokers and 3 zookeepers servers # Create a channel # Have peer join channel # Install chaincode # Instantiate chaincode # Invoke chaincode # Verify results, look good # Pause brokers kafkaX, kafkaY # Invoke chaincode again  At this point, the transaction is enqueued (returned: SUCCESS) but I was expecting it to fail since there were less than min.isr brokers active.  I'm looking for a brief description along these lines. Can you please provide it?  I know you're provided variations of it earlier, but there's a reason I insist on this every time – I want to make sure there are no implicit assumptions, and double-check we're both on the same page.  ></body> </Action>
<Action id="25451" issue="16862" author="nishi" type="comment" created="2017-06-05 21:57:53.0" updateauthor="nishi" updated="2017-06-05 21:57:53.0"> <body><! CDATA Here are the steps  ~kchristidis  :  1. Bring 3 ordering servers, 4 kafka brokers, 3 zookeepers servers, 2 Orgs (2 peers each), 2 ca-servers 2. Create a channel 4. join peers on channel 5. Install chaincode 6. Instantiate chaincode 7. Invoke chaincode 8. Verify results, look good 9. Pause brokers kafka1, kafka2, (non-leaders), 10. Invoke chaincode again 11. Query results are good. 12. Pause kafka0 (leader) 13. Invoke chaincode again 14. Query results are good.  Is that an issue with current docker-setup with - KAFKA_MIN_INSYNC_REPLICAS=2           ></body> </Action>
<Action id="25528" issue="16862" author="clayton sims" type="comment" created="2017-06-06 15:49:50.0" updateauthor="clayton sims" updated="2017-06-06 15:49:50.0"> <body><! CDATA No pending code fix - so changing status      ></body> </Action>
<Action id="25824" issue="16862" author="kchristidis" type="comment" created="2017-06-09 08:35:52.0" updateauthor="kchristidis" updated="2017-06-09 08:35:52.0"> <body><! CDATA  ~Nishi : `kafka3` in your Docker Compose configuration is loaded with this ENV var: KAFKA.MIN_INSYNC_REPLICAS=2 (notice the dot instead of an underscore)  If you replace the dot with an underscore you'll get the desired behavior, i.e. if you invoke chaincode again (step 13), this transaction won't go through.  I actually have the same ENV var typo in the bddtests Docker Compose files, and I just pushed a changeset to fix it, so thank you for bringing this to my attention.   https://gerrit.hyperledger.org/r/#/c/10385/   Please confirm that this fixes the issue and close it if that's the case.  ></body> </Action>
<Action id="25908" issue="16862" author="nishi" type="comment" created="2017-06-09 19:22:43.0" updateauthor="nishi" updated="2017-06-09 19:24:21.0"> <body><! CDATA Verified successfully on build * 85ef08326fcf6cfb5dbbf389633ba7ea394fcbd4*  In docker compose right env variable to set is    - KAFKA_MIN_INSYNC_REPLICAS=2  Verified that tx failed when we have just one broker, with this env param set correctly.  Also verified steps in main issue successfully.  ></body> </Action>
