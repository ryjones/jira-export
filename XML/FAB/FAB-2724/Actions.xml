<Action id="21583" issue="15292" author="lfeagan" type="comment" created="2017-03-21 08:09:29.0" updateauthor="lfeagan" updated="2017-03-21 08:09:29.0"> <body><! CDATA Hi, here are my initial thoughts, and I may be way off base here, so apologies if I am.  In looking at the documentation for the method http.Client.do() I see the following: // If the returned error is nil, the Response will contain a non-nil // Body which the user is expected to close. If the Body is not // closed, the Client's underlying RoundTripper (typically Transport) // may not be able to re-use a persistent TCP connection to the server // for a subsequent "keep-alive" request.  Inspecting the code in handleRequest, I didn't see any calls to close the resp.Body after calling iouitl.ReadAll(resp.Body).  Specifically, I think there may be a condition in which the defer resp.Body.Close() is not called.  The canonical form looks like this: http.client.do(someRequest>) if err != nil { 	// handle error } defer resp.Body.Close() body, err := ioutil.ReadAll(resp.Body)  But I believe in some cases we have the form, split out across two methods, which makes it hard to see that we have this form. http.client.do(someRequest>) body, err := ioutil.ReadAll(resp.Body) if err != nil { 	return nil, err } defer resp.Body.Close()    ></body> </Action>
<Action id="22273" issue="15292" author="denyeart" type="comment" created="2017-04-12 22:20:19.0" updateauthor="denyeart" updated="2017-04-12 22:20:19.0"> <body><! CDATA On another stress test,  ~AdnanChoudhury  sees the problem mentioned here: http://stackoverflow.com/a/19006050/7821698  Setting req.Close=true after NewRequest() in couchdb.go solved Adnan's problem, and would likely solve the problem in the Description here as well.  Re-assigning to Adnan to check in the fix.   ~balaji.viswanathan  let us know if you had other ideas.  ></body> </Action>
<Action id="22281" issue="15292" author="adnanchoudhury" type="comment" created="2017-04-13 05:55:49.0" updateauthor="adnanchoudhury" updated="2017-04-13 05:55:49.0"> <body><! CDATA Setting req.Close=true after NewRequest() in couchdb.go makes sure that http connections are closed after the request is carried out.  While conducting Ledger performance test (https://gerrit.hyperledger.org/r/#/c/6793/) with couchDB, explicit closing limits the no. of connections in ESTABLISHED state to to 20 (expected minimum),  while no. of connections in TIME_WAIT state i.e. closed-and-waiting state remains  high. (~4500) without this explicit close, no. of connections in ESTABLISHED state is much higher (soars to ~900 and stalls).   ></body> </Action>
<Action id="22509" issue="15292" author="balaji.viswanathan" type="comment" created="2017-04-15 08:13:25.0" updateauthor="balaji.viswanathan" updated="2017-04-15 08:28:30.0"> <body><! CDATA req.Close disable connection reuse. The correct way to do this is twofold  1. Handle all codepaths as mentioned in #1 (Lance's comment) 2. Ensure that the resp body is consumed completely before closing the connection. Only then are connections reused (refer: http://stackoverflow.com/questions/17948827/reusing-http-connections-in-golang)  For instance, the defer call could be  defer func() { io.Copy(ioutil.Discard, resp.Body); resp.Body.Close() }()  Also, we should consider bumping up the MaxIdleConnsPerHost, default is set to 2 while MaxIdleConns is 100. In our case, peer does not connect to any other hosts.   ></body> </Action>
<Action id="22882" issue="15292" author="christopherferris" type="comment" body="https://gerrit.hyperledger.org/r/#/c/8003/" created="2017-04-23 12:58:16.0" updateauthor="christopherferris" updated="2017-04-23 12:58:16.0"/>
<Action id="22901" issue="15292" author="denyeart" type="comment" body="https://gerrit.hyperledger.org/r/#/c/8317/ will replace https://gerrit.hyperledger.org/r/#/c/8003/." created="2017-04-23 14:38:27.0" updateauthor="denyeart" updated="2017-04-23 14:38:27.0"/>
