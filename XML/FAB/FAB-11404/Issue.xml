<Issue id="32427" key="FAB-11404" number="11404" project="10002" reporter="diizuka" assignee="diizuka" creator="diizuka" type="10004" summary="Fix panic on passing number string to FromString" priority="3" resolution="10000" status="6" created="2018-07-31 05:36:49.0" updated="2018-08-24 10:16:30.0" resolutiondate="2018-08-24 10:16:30.0" votes="0" watches="1" workflowId="43633"> <description><! CDATA # How to Reproduce On testing common/cauthdsl/policyparser.go: {code:go} s1:= "1" // string of number s2 := "'1'" // nested string of number  s3 := `'\'1'\''` // double nested string of number p, err := FromString(s1) // or s2 or s3 {code} This causes panic, e.g.: {noformat} panic: interface conversion: interface {} is float64, not *common.SignaturePolicy  recovered  {noformat} # Cause Let me explain s3 case. Codes derived from common/cauthdsl/policyparser.go: {code:go} exp, err = govaluate.NewEvaluableExpressionWithFunctions(res.(string), ... secondPass}) // A res, err = exp.Evaluate(...) // B p := &common.SignaturePolicyEnvelope{ ... Rule: res.(*common.SignaturePolicy), // C } {code} Suppose passing s3 := `'\1'\''` to FromString(). At A, res is string of "1". At B, res is float64 type of 1, not *common.SignaturePolicy type. Then, at C it causes type cast error and panic.  Similally, in case of s1 or s2, exp.Evaluate() return float64 type of 1, try to cast it as string type. Then type cast error has occurred and panic.  # # # Fix plan Check the type of res is *common.SignaturePoilcy(case s3) or string(case s1, s2). If not, return an error.  ></description> </Issue>
