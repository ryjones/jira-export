<Issue id="44541" key="FAB-17604" number="17604" project="10002" reporter="kevinxiong1977" creator="kevinxiong1977" type="10002" summary="Maybe we should check the RwSets consistency of the chaincode package" priority="4" resolution="10001" status="6" created="2020-03-12 01:09:03.0" updated="2020-11-23 23:32:28.0" resolutiondate="2020-11-23 23:32:28.0" votes="0" watches="2" workflowId="58454" archived="N"> <description><! CDATA In Fabric 2.0, different versions of the chaincode package are allowed to be deployed on different peer nodes, including different chaincode development languages.  But if the packages installed on different nodes have inconsistent read and write sets, when chaincode invoke, ProposalResponsePayloads do not match.  Maybe we should check the RwSets consistency of the chaincode package,  E.g:  peer lifecycle chaincode {color:#ff0000}*checkpackagereadiness*{color} mycc1.tar.gz mycc2.tar.gz  Chaincode commit can add an option --checkpackage, the default value is false. If set to true, commit is not allowed when not passed  peer lifecycle chaincode {color:#de350b}*commit --checkpackage true*{color} ........  ---------------------------------------------  The following is the test process of ProposalResponsePayloads do not match:  {color:#172b4d}*Org1MSP*{color}  peer lifecycle chaincode package abstore1_go.tar.gz --path /root/go/src/github.com/hyperledger/fabric-samples/chaincode/abstore/go --lang golang --label abstore1  peer lifecycle chaincode install abstore1_go.tar.gz  peer lifecycle chaincode approveformyorg --channelID mychannel --name mycc --version 1.0 --signature-policy "AND('Org1MSP.member','Org2MSP.member')" --init-required --package-id abstore1:1e56a9b84ce52e75991b2ed9c8f61ec0f87e5a5f41737b4acf6a303eca4fee2c --sequence 1 --tls true --cafile $ORDERER_CA  {color:#172b4d}*Org2MSP*{color}  vim /root/go/src/github.com/hyperledger/fabric-samples/chaincode/abstore/go/abstore.go  func (t *ABstore) invoke(stub shim.ChaincodeStubInterface, args   string) pb.Response  ............  *Aval = Aval - X  - X* *Bval = Bval + X + X*  peer lifecycle chaincode package abstore1_go.tar.gz --path /root/go/src/github.com/hyperledger/fabric-samples/chaincode/abstore/go --lang golang --label abstore1  peer lifecycle chaincode install abstore1_go.tar.gz  *peer lifecycle chaincode approveformyorg* --channelID mychannel --name mycc --version 1.0 --signature-policy "AND('Org1MSP.member','Org2MSP.member')" --init-required --package-id abstore1:1e56a9b84ce52e75991b2ed9c8f61ec0f87e5a5f41737b4acf6a303eca4fee2c --sequence 1 --tls true --cafile $ORDERER_CA  *peer lifecycle chaincode commit* -o orderer1.example.com:7050 --channelID mychannel --name mycc --version 1.0 --sequence 1 --signature-policy "AND('Org1MSP.member','Org2MSP.member')" --init-required --tls true --cafile $ORDERER_CA --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles $ORG1_CA --peerAddresses peer0.org2.example.com:9051 --tlsRootCertFiles $ORG2_CA  *peer chaincode invoke* -o orderer1.example.com:7050 --isInit --tls true --cafile $ORDERER_CA -C mychannel -n mycc --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles $ORG1_CA  --peerAddresses peer0.org2.example.com:9051 --tlsRootCertFiles $ORG2_CA -c '{"Args": "Init","a","1000","b","1000" }' --waitForEvent  peer chaincode query -C mychannel -n mycc -c '\{"Args": "query","a" }'  1000  peer chaincode query -C mychannel -n mycc -c '\{"Args": "query","b" }'  1000  *peer chaincode invoke* -o orderer1.example.com:7050 --tls true --cafile $ORDERER_CA -C mychannel -n mycc --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles $ORG1_CA --peerAddresses peer0.org2.example.com:9051 --tlsRootCertFiles $ORG2_CA -c '\{"Args": "invoke","a","b","100" }' --waitForEvent  {color:#ff0000}Error: could not assemble transaction: ProposalResponsePayloads do not match - proposal response: version:1 response:<status:200 > payload:"{color}     ></description> </Issue>
