<Action id="65621" issue="43378" author="hakan.eryargi" type="comment" created="2019-11-19 12:05:48.0" updateauthor="hakan.eryargi" updated="2019-11-19 12:05:48.0"> <body><! CDATA  ~yacovm        ~jyellick     ~mastersingh24   What do you think? This looks like a natural extension to FAB-15648  ></body> </Action>
<Action id="65622" issue="43378" author="yacovm" type="comment" created="2019-11-19 12:19:04.0" updateauthor="yacovm" updated="2019-11-19 12:19:11.0"> <body><! CDATA {quote}TLS makes load balancing for peer and orderer nodes difficult to implement. {quote} The whole point is that Fabric does this load balancing for you in every layer - starting from the SDK and concluding in the peers / orderers.    {quote}Without TLS, many transparent load balancing mechanisms just work out of the box, for example Kubernetes services. {quote} I don't think that it makes sense to run Fabric in production without TLS.  Fabric is a Blockchain and as such it is supposed to be used across different organizations that don't trust each other and they always move around sensitive and confidential data. It's true that you can run the nodes in some service mesh that does the TLS termination for you like Istio, but why would you do that if Fabric manages TLS for you, for all the organizations in the network?    {quote}In addition to discussion in that ticket, re-thinking suggests, TLS termination proxies wont help in mixed environments, where some peers/orderers are behind a TLS termination proxy some other not. {quote} Take a look at FAB-8131, it is possible to make changes to Fabric such that it will also support TLS terminating proxies. In addition you can also use a non TLS terminating proxy and then you won't have problems.         ></body> </Action>
<Action id="65625" issue="43378" author="hakan.eryargi" type="comment" created="2019-11-19 14:37:09.0" updateauthor="hakan.eryargi" updated="2019-11-19 14:37:09.0"> <body><! CDATA {quote}The whole point is that Fabric does this load balancing for you in every layer - starting from the SDK and concluding in the peers / orderers. {quote} I guess you mean connection profiles and discovery. I would still prefer native Kubernetes load balancing, for it is:  #  Much convenient (less configuration) #  More effective (Kubernetes knows better which peer/orderer is down and react and route the traffic accordingly)  You can check  this diagram|https://camo.githubusercontent.com/7c65286ca5ccadcfe27c3414995405c1d3541e8b/68747470733a2f2f726166742d6661627269632d6b7562652e73332d65752d776573742d312e616d617a6f6e6177732e636f6d2f696d616765732f484c5f696e5f4b7562655f726166742e706e67  for how it's conveniently implemented. {quote}I don't think that it makes sense to run Fabric in production without TLS.  Fabric is a Blockchain and as such it is supposed to be used across different organizations that don't trust each other and they always move around sensitive and confidential data. {quote} For mixed environments, definitely agree. That's the whole point of this Jira ticket. I want to enable TLS for inter peer-orderer communication.  But for client to peer/orderer communication, I don't see any value of enabling TLS if they are in the same trusted Kubernetes cluster. {quote}why would you do that if Fabric manages TLS for you, for all the organizations in the network? {quote} Not sure what you meant here? {quote}Take a look at FAB-8131, it is possible to make changes to Fabric such that it will also support TLS terminating proxies. In addition you can also use a non TLS terminating proxy and then you won't have problems. {quote} That's nice! But does every proxy support that header? What about some peers/orderers cannot be behind a proxy for whatever reason?     ></body> </Action>
<Action id="65626" issue="43378" author="yacovm" type="comment" created="2019-11-19 14:57:16.0" updateauthor="yacovm" updated="2019-11-19 14:57:16.0"> <body><! CDATA It's nice that you deploy your entire network into a single Kubernetes cluster, however most Blockchain use cases are to connect different administrative domains that have no trust between them, and some people want to run on premise and not use K8S, and who knows if some company won't invent a better and easier orchestration engine in 2 years?  Fabric can't assume everyone uses Kubernetes in the same cluster, etc. etc.     {quote}But for client to peer/orderer communication, I don't see any value of enabling TLS if they are in the same trusted Kubernetes cluster. {quote} Why are you using a Blockchain then? You are running in a trusted environment. Why are you not using a distributed database? {quote}   Not sure what you meant here? {quote}    Well, in Fabric if you connect to channel *foo* then the peer makes sure that the TLS CAs of the channel that are the roots of the verification chain of the TLS handshake are indeed what you put in channel *foo* and that you're not talking to a node from another organization that is in channel *bar* but that it has issued a TLS certificate that corresponds to the same IP/DNS name.  Obviously, in a single Kubernetes cluster managed by your company, you don't have to worry about such problems, but Fabric worries about it so you don't have to.    {quote}That's nice! But does every proxy support that header? What about some peers/orderers cannot be behind a proxy for whatever reason? {quote} If they can't be behind a proxy then there is no problem isn't it? :)  ></body> </Action>
<Action id="65637" issue="43378" author="hakan.eryargi" type="comment" created="2019-11-19 21:52:08.0" updateauthor="hakan.eryargi" updated="2019-11-19 21:52:08.0"> <body><! CDATA  ~yacovm  I guess you are misinterpreting our use case and also the need for this ticket. This is a general need, not tied to K8S usage or our specific use case. Let me rephrase.  As you mentioned, Fabric is a Blockchain and it's expected that it will run on a mixed environment from different administrative domains. Some peers/orderers can run on K8S, some on premises, some on wherever. As no one can guarantee each of these peers/orderers will be behind some TLS termination proxy (and possibly also for other details) I agree it's definitely good enabling TLS for communication between these mixed peers and orderers.  Imagine I'm at *peer organization A* and running 2 peer nodes and maybe some orderer nodes. These can be on K8S, on premises or wherever. They will communicate with other peers/orderers and also among themselves via TLS. This is what I meant by *cluster facing ports*.  At the *same wherever*, I also run my application. As my own peers/orderers and application are in the very *same trusted wherever*, there is no need to enable TLS between *my application* and *my peer/orderer*. We are strictly talking about *client to peer* or *client to orderer* communication here. This is what I meant by *client facing ports*. Any node owner can configure his own node to use TLS at client facing port or not.  All communication among peers and orderers (*cluster facing ports*) will still use TLS (if that's the global setting)  Hope it's clear now.       ></body> </Action>
<Action id="65638" issue="43378" author="yacovm" type="comment" created="2019-11-19 21:58:34.0" updateauthor="yacovm" updated="2019-11-19 21:58:34.0"> <body><! CDATA What is the reason for which you want to disable TLS between clients in your organization and nodes (peers/orderers) in your own organization? You said you want to do load balancing via K8S, but I argue that the SDK should know how to do it better.  For example, if you have several peers - x,y,z and their ledger heights are 100, 100, 30. You don't want to use peer z because its data is old and not up to date.  Kubernetes has no way of knowing this, however the SDK can know this and skip connecting to the last peer. The Go SDK has these kind of logic in it from what I heard.  ></body> </Action>
<Action id="65639" issue="43378" author="hakan.eryargi" type="comment" created="2019-11-19 22:13:05.0" updateauthor="hakan.eryargi" updated="2019-11-19 22:13:05.0"> <body><! CDATA Right, the main reason is for load balancing, also for the simplicity of configuration, and also TLS costs some performance. possibly not that much tough.  {quote} For example, if you have several peers - x,y,z and their ledger heights are 100, 100, 30. You don't want to use peer z because its data is old and not up to date. {quote} That's an interesting case and good to know, thanks :) But possibly very rare occurrence, I guess? Especially considering these peers are very close to each other.  It's correct Kubernetes cannot know this but it will know better than anything which peer/orderer is down. Theoretically I can add new peers, or remove some peers without changing a bit of configuration on the client side.    ></body> </Action>
<Action id="65640" issue="43378" author="yacovm" type="comment" created="2019-11-19 22:20:30.0" updateauthor="yacovm" updated="2019-11-19 22:20:30.0"> <body><! CDATA long lasting TLS connections shouldn't have any performance overhead that you can measure.     {quote}But possibly very rare occurrence, I guess?  Theoretically I can add new peers, or remove some peers without changing a bit of configuration on the client side. {quote} When you add new peers they need to pull the entire blockchain and validate it. It can take days....  ></body> </Action>
<Action id="65641" issue="43378" author="hakan.eryargi" type="comment" created="2019-11-19 22:38:02.0" updateauthor="hakan.eryargi" updated="2019-11-19 22:38:02.0"> <body><! CDATA {quote}When you add new peers they need to pull the entire blockchain and validate it. It can take days.... {quote} For a peer in the very same K8S cluster, it's hard to imagine it can take days.  But actually you reminded me a very good point, a *readiness probe* endpoint for the peer for these kind of situations if not already implemented. Which will naturally and smoothly integrate with K8S load balancing :)  ></body> </Action>
