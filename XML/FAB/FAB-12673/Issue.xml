<Issue id="35033" key="FAB-12673" number="12673" project="10002" reporter="yacovm" assignee="yacovm" creator="yacovm" type="10003" summary="Establish connections to remote nodes asynchronously" priority="3" resolution="10000" status="6" created="2018-10-31 23:32:43.0" updated="2018-11-15 19:56:31.0" resolutiondate="2018-11-02 10:22:21.0" votes="0" watches="1" workflowId="46868"> <description><! CDATA Currently, the cluster's egress communication connects to a remote node synchronously and lazily upon demand.  This creates a problem for etcdraft chains, because it sends all communication from the same goroutine (specifically - by reading the *Ready()* channel from the *etcdraft.Node* which emits commands from the Raft library) , and thus - whenever a node is down, the connection attempt to it returns only when the dial timeout expires, and this slows down the entire raft core, namely - things like leader heartbeats, consensus, and more.  Therefore, the communication layer needs to connect to remote nodes asynchronously, and whenever a node is unreachable - try to reconnect it in the background.  This can be solved by creating the gRPC connection without an explicit requirement for blocking via omitting the gRPC.WithBlock dial option.  ></description> </Issue>
