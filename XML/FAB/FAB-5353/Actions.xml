<Action id="28561" issue="19317" author="denyeart" type="comment" created="2017-07-18 10:22:27.0" updateauthor="denyeart" updated="2017-07-18 10:22:27.0"> <body><! CDATA It looks like there was a TODO in the validator code to revisit errors and invalidations, see  https://gerrit.hyperledger.org/r/#/c/3703/.    ~C0rWin   ~muralisr  can you take a look?  ></body> </Action>
<Action id="28564" issue="19317" author="denyeart" type="comment" body=" ~adc   ~ales  Artem mentioned you have been working on txvalidator more recently, can you take a look?" created="2017-07-18 11:04:10.0" updateauthor="denyeart" updated="2017-07-18 11:04:10.0"/>
<Action id="28703" issue="19317" author="angelo.decaro" type="comment" body="If the peer panics then, at restart, will it be able to pick up from where it was at the validation process?" created="2017-07-20 07:04:36.0" updateauthor="angelo.decaro" updated="2017-07-20 07:04:36.0"/>
<Action id="28755" issue="19317" author="c0rwin" type="comment" body=" ~angelo.decaro  yes, once peer will fail to commit it will panic, later it will sync up with other peer and should be able to continue." created="2017-07-20 22:56:18.0" updateauthor="c0rwin" updated="2017-07-20 22:56:18.0"/>
<Action id="28756" issue="19317" author="c0rwin" type="comment" body="https://gerrit.hyperledger.org/r/#/c/11753/" created="2017-07-20 22:56:46.0" updateauthor="c0rwin" updated="2017-07-20 22:56:46.0"/>
<Action id="28760" issue="19317" author="angelo.decaro" type="comment" body=" ~C0rWin , thanks, got it. Now, when the peer panic, will it also crash? If yes, then I&apos;m wondering that an adversary will be able to leverage this to make peers crashing and block the network. " created="2017-07-21 01:21:40.0" updateauthor="angelo.decaro" updated="2017-07-21 01:21:40.0"/>
<Action id="28791" issue="19317" author="c0rwin" type="comment" body=" ~angelo.decaro  for adversary to take advantage of this, means he already took down either file system or database, hence peer panic is least concern here, IMO." created="2017-07-21 13:20:34.0" updateauthor="c0rwin" updated="2017-07-21 13:20:34.0"/>
<Action id="28829" issue="19317" author="angelo.decaro" type="comment" body="I agree with you but I don&apos;t see from your change-set how you distinguish between the errors. If the peer always crashes for any error then we have a problem. But, I think at this point we are on the same page, right? :)" created="2017-07-22 09:42:31.0" updateauthor="angelo.decaro" updated="2017-07-22 09:42:31.0"/>
<Action id="28830" issue="19317" author="c0rwin" type="comment" created="2017-07-22 10:06:26.0" updateauthor="c0rwin" updated="2017-07-22 10:06:26.0"> <body><! CDATA Let me try to show you :)  At this point I've distinguish two possible case of external failure which might lead to inconsistency of the state:  1. You failed to query DB LSCC for VSCC info, due to connectivity issue with DB 2. You failed to invoke VSCC.  The way I've made it is to define error to clearly state the problem:  {code} // VSCCInfoLookupFailureError error to indicate inability // to obtain VSCC information from LCCC type VSCCInfoLookupFailureError struct { 	reason string }  // Error returns reasons which lead to the failure func (e VSCCInfoLookupFailureError) Error() string { 	return e.reason }  // VSCCEndorsementPolicyError error to mark transaction // failed endrosement policy check type VSCCEndorsementPolicyError struct { 	reason string }  // Error returns reasons which lead to the failure func (e VSCCEndorsementPolicyError) Error() string { 	return e.reason }  // VSCCExecutionFailureError error to indicate // failure during attempt of executing VSCC // endorsement policy check type VSCCExecutionFailureError struct { 	reason string }  // Error returns reasons which lead to the failure func (e VSCCExecutionFailureError) Error() string { 	return e.reason } {code}   Next in the method which seeks for VSCC info I've added:  {code} 	bytes, err := qe.GetState("lscc", ccid) 	if err != nil { 		return nil, &VSCCInfoLookupFailureError{fmt.Sprintf("Could not retrieve state for chaincode %s, error %s", ccid, err)} 	} {code}  Now if validation returns any of these errors, I'm stopping iterating over transactions and existing with error, stopping commit.  {code} 					// Validate tx with vscc and policy 					logger.Debug("Validating transaction vscc tx validate") 					err, cde := v.vscc.VSCCValidateTx(payload, d, env) 					if err != nil { 						txID := txID 						logger.Errorf("VSCCValidateTx for transaction txId = %s returned error %s", txID, err) 						switch err.(type) { 						case *VSCCExecutionFailureError: 							return err 						case *VSCCInfoLookupFailureError: 							return err 						default: 							txsfltr.SetFlag(tIdx, cde) 							continue 						} 					} {code}  ></body> </Action>
<Action id="28831" issue="19317" author="c0rwin" type="comment" body="Hope it makes it clear now." created="2017-07-22 10:06:43.0" updateauthor="c0rwin" updated="2017-07-22 10:06:43.0"/>
<Action id="28832" issue="19317" author="angelo.decaro" type="comment" body="Cool, that helped and I must say it was clear from the code. So, I guess, I&apos;m missing the part where the peer crashes on certain errors. Does it crash?" created="2017-07-22 10:17:37.0" updateauthor="angelo.decaro" updated="2017-07-22 10:17:37.0"/>
<Action id="28833" issue="19317" author="angelo.decaro" type="comment" created="2017-07-22 10:19:00.0" updateauthor="angelo.decaro" updated="2017-07-22 10:19:16.0"> <body><! CDATA But for  ``` bytes, err := qe.GetState("lscc", ccid) ``` What happens if the GetState fails because the ccid was not valid?  ></body> </Action>
<Action id="28838" issue="19317" author="c0rwin" type="comment" created="2017-07-22 15:32:56.0" updateauthor="c0rwin" updated="2017-07-22 15:32:56.0"> <body><! CDATA I assumed that error returns in case of failure, in case of invalid ccid, there will be nil slice of bytes.  But really thanks for your observation  ~angelo.decaro , I will double check it again, now.  ></body> </Action>
<Action id="28994" issue="19317" author="angelo.decaro" type="comment" body=" ~C0rWin , please, may you clarify what happens if the VSCC fails? My understanding is that the peer will panic (and then exit?). Is this correct?" created="2017-07-26 00:47:32.0" updateauthor="angelo.decaro" updated="2017-07-26 00:47:32.0"/>
<Action id="29000" issue="19317" author="c0rwin" type="comment" body=" ~angelo.decaro  only if you failed to invoke it, while if VSCC check fails it will mark transaction as invalid." created="2017-07-26 04:46:00.0" updateauthor="c0rwin" updated="2017-07-26 04:46:00.0"/>
<Action id="29001" issue="19317" author="angelo.decaro" type="comment" created="2017-07-26 05:11:31.0" updateauthor="angelo.decaro" updated="2017-07-26 06:24:40.0"> <body><! CDATA  ~C0rWin , in validator.go, line 623, I see the following code:  {code} res, _, err := v.ccprovider.ExecuteChaincode(ctxt, cccid, args) 	if err != nil { 		msg := fmt.Sprintf("Invoke VSCC failed for transaction txid=%s, error %s", txid, err) 		logger.Errorf(msg) 		return &VSCCExecutionFailureError{msg} 	} {code}  How do you distinguish from a failure of the invocation and the failure of VSCC itself? Now, because VSCCExecutionFailureError is returned, the transaction will not just be marked invalid (validator.go, line 208, btw test coverage does not touch that line), no?  Sorry to continuing insisting. I fear that an attacker can just crash all the peers in a channel in one shot :(  ></body> </Action>
<Action id="29002" issue="19317" author="c0rwin" type="comment" created="2017-07-26 06:56:56.0" updateauthor="c0rwin" updated="2017-07-26 06:56:56.0"> <body><! CDATA  ~angelo.decaro  error returned from execution of VSCC signals of a failure, while state of the result provides information regarding whenever the validation was successful or not, please see few lines below:  {code} 	if res.Status != shim.OK { 		logger.Errorf("VSCC check failed for transaction txid=%s, error %s", txid, res.Message) 		return &VSCCEndorsementPolicyError{fmt.Sprintf("%s", res.Message)} 	} {code}  ></body> </Action>
<Action id="29003" issue="19317" author="angelo.decaro" type="comment" body="Yeah, Yeah, I have just reached the same conclusion. Perfect, we are safe :)" created="2017-07-26 07:20:19.0" updateauthor="angelo.decaro" updated="2017-07-26 07:20:19.0"/>
<Action id="29005" issue="19317" author="c0rwin" type="comment" body=" ~angelo.decaro  thanks for reviewing thoroughly my CR." created="2017-07-26 07:26:55.0" updateauthor="c0rwin" updated="2017-07-26 07:26:55.0"/>
<Action id="29007" issue="19317" author="angelo.decaro" type="comment" body="I&apos;m just paranoid, sorry :(" created="2017-07-26 07:46:35.0" updateauthor="angelo.decaro" updated="2017-07-26 07:46:35.0"/>
