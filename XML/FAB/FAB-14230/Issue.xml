<Issue id="37751" key="FAB-14230" number="14230" project="10002" reporter="scottz" assignee="dongming" creator="scottz" type="10101" summary="Scaling traffic runs on networks with more orderers (3, 27, 54, 108) in a channel" priority="3" resolution="10000" status="6" created="2019-02-18 02:26:00.0" updated="2019-07-23 18:20:32.0" resolutiondate="2019-04-29 20:53:58.0" votes="0" watches="5" workflowId="49367"> <description><! CDATA h2. Summary  This test objective is to measure the throughput performance impact of an increasing number of orderers in a channel. We use the same number of traffic threads and traffic model, same number of peers, and only one channel for all test iterations. The traffic will be distributed evenly among all the orderers of the channel, so that means each orderer would receive less ingress traffic for the later test iterations when the number of orderers is higher. If the number of orderers were irrelevant, i.e. infinite scalability, then we would expect the same overall TPS result with each iteration. We will measure and share the results. If we don't see any different TPS measurements, then we could consider repeating with more traffic (2 or 3 or more multiples of traffic). h2. Setup  Same setup as in FAB-13601, with the following differences: # create 1 channel: {{channel1}} # 3 peers with 1 peer/org # 36 orderers in orderersystemchannel # start with m=3 orderers in testorgschannel1; run tests for #orderers = m = 3, 27, 54, 108 # {{batchSize.maxMessageCount}}: 500 # logging level set to {{info}} (and if we see errors, then we can re-run test with debug-level logs in the orderer package per FAB-13597)  h2. Inputs # Start 54 thread transactions to each org's peer evenly, i.e., 18 threads to a peer. So each peer will process the same amount of transactions. # Each thread sends 10K invokes, using PTE constant mode, i.e. sending next transaction as soon as the previous one is sent to and ACK'd received by the ingress orderer. # In the case of 108 orderers, send 108 thread transactions to each org's peer evenly, each thread will send 5K invokes using PTE constant mode. # All transactions from a single thread will target the same orderer. # The orderer load-balancing will be handled in such a way that the 54 threads (or 108 threads) are evenly distributed among the {{m}} orderers which participate in the application channel, i.e. 18 threads to each orderer if {{m=3}}, 2 threads to each orderer if {{m=27}}, and 1 thread to each orderer if {{m=54}} or {{m=108}} # Proceed to the next phase: add orderers and rerun the traffic test. The orderer admin retrieves the latest config block from the orderersystemchannel from orderer1, and modifies it to add 3 more orderers (for a total of 6) to application channel testorgschannel1, and submits a configuration update of the orderersystemchannel. Rerun the traffic. # Repeat again with #orderers m = 27, 54, 108     Refer also to FAB-14269 for a test with many orderers AND multiple channels. h2. Expectations # No errors in the logs of peers and orderers. # No failures or errors reported by PTE. # All transaction events are received by PTE. # TPS (Transactions Per Second) overall rates will be provided for each test iteration, for the varying values of {{m}} (number of orderers).  ></description> </Issue>
