<Action id="21891" issue="15524" author="smithbk" type="comment" created="2017-04-06 00:22:29.0" updateauthor="smithbk" updated="2017-04-06 00:22:29.0"> <body><! CDATA Ramesh, I'm assigning to you as I assume this just involves upgrading CI, or the base image used by CI. I've been running with go 1.8 on my laptop and haven't seen any issues.  ></body> </Action>
<Action id="24673" issue="15524" author="jasondotstar" type="comment" body=" ~smithbk , I&apos;m going to take over this ticket from  ~rameshthoomu .  I&apos;ll update the ticket with the latest." created="2017-05-30 15:25:30.0" updateauthor="jasondotstar" updated="2017-05-30 15:25:30.0"/>
<Action id="26079" issue="15524" author="jasondotstar" type="comment" created="2017-06-12 21:58:28.0" updateauthor="jasondotstar" updated="2017-06-12 21:58:28.0"> <body><! CDATA h2. Status Update   ~rameshthoomu  asked me to have a chat with  ~greg.haskins  regarding the steps needed to update the base images used by the CI.  After a brief discussion w/ Greg, he pointed me to the fabric-baseimage repo, where our base images are built.  Next step is to rebuild the baseimage locally, then update fabric to reference the new version.  ></body> </Action>
<Action id="26080" issue="15524" author="jonathanlevi" type="comment" created="2017-06-12 22:08:40.0" updateauthor="jonathanlevi" updated="2017-06-12 23:50:47.0"> <body><! CDATA So, as the one who opened the issue initially, for discussion/consideration, here are my 2 cents:  1. I don't agree with the above claim from  ~smithbk  that the Golang 1.8 update does +{color:#d04437}not{color}+ introduce any breaking issues. Golang 1.8. In fact there were a few severe security issues that made the Golang team release a set of fixes (including Elliptic curve issues and another set of problems relating to crypto). Not clear how this was tested, especially back in April, when we had a lot less tests for the CA, maybe?  2. At this point in time (API freeze, post 1.0.0-beta release) and a few days before 1.0.0-rc1 is out... can somebody suggest/highlight/summarize what are the upsides of upgrading to Golang 1.8?  ></body> </Action>
<Action id="26083" issue="15524" author="jasondotstar" type="comment" body=" ~JonathanLevi  Agreed. In preparing for this work, I&apos;ve spoken with  ~greg.haskins  and  ~harrijk  who both expressed concerns about 1.8.  Although I&apos;m able to build the docker image locally, this does not confirm whether or not the unit tests will work as a result.   ~harrijk  is planning to update this ticket to enumerate the unit test issues, advising us that &quot;the unit tests will have to be rewritten to accommodate the compiler version diffs.&quot;" created="2017-06-12 23:08:56.0" updateauthor="jasondotstar" updated="2017-06-12 23:08:56.0"/>
<Action id="26085" issue="15524" author="harrijk" type="comment" created="2017-06-12 23:18:00.0" updateauthor="harrijk" updated="2017-06-12 23:18:00.0"> <body><! CDATA Some months back, I went through the exercise of generating a set of fabric and fabric-ca docker images built off of an altered fabric-baseimage that included the use of Golang 1.8.  The result of which was a set of Docker images containing binaries that were compiled with Golang 1.8.  I then ran the fabric and fabric-ca unit tests.  The fabric-ca unit tests did run clean, however, there were a few fabric unit tests that failed due to changes in the Golang 1.8 compiler.  The failed tests would have to be rewritten to take into account some of the version differences.  For example, some error messages that were being used for assert checks have changed and this results in assertion errors.  I have attached my notes for this exercise. See above for fabric-go1,8-changes.txt.  Since there have been significant changes in the fabric and fabric-ca code bases, it would be prudent to go through a similar exercise to understand the unit test implications.  I would also encourage a complete suite of end-to-end tests.     ></body> </Action>
<Action id="26090" issue="15524" author="jonathanlevi" type="comment" body="Thank you  ~harrijk  &amp;  ~jasondotstar  Yes, we have also tried building the master branch of fabric using a few of the Golang 1.8.x releases at HACERA... wasn&apos;t that straight forward. We switched back to work against the master branch and the tagged release, FWIW." created="2017-06-12 23:52:47.0" updateauthor="jonathanlevi" updated="2017-06-12 23:52:47.0"/>
<Action id="28100" issue="15524" author="jtclark" type="comment" body=" ~harrijk ,  ~JonathanLevi ,  ~greg.haskins  - After speaking with  ~rameshthoomu , it sounds as if we can update the image for the fabric-ca project, if the unit tests for fabric-ca ran clean, since both project have separate images.  Any objections to this? If not, at least we can get 1.8 support in the fabric-ca project." created="2017-07-10 16:26:36.0" updateauthor="jtclark" updated="2017-07-10 16:26:36.0"/>
<Action id="28101" issue="15524" author="jonathanlevi" type="comment" created="2017-07-10 16:29:10.0" updateauthor="jonathanlevi" updated="2017-07-10 16:46:33.0"> <body><! CDATA Hi Jason and everybody, # For Hyperleger Fabric 1.0.0 ? (We are in a "code-freeze" mode) # What is the upside of upgrading to Golang 1.8 support of fabric-ca at this point? (or put differently, why do we/people need this now?)  Thanks, J  ></body> </Action>
<Action id="31959" issue="15524" author="rameshthoomu" type="comment" created="2017-10-09 20:58:35.0" updateauthor="rameshthoomu" updated="2017-10-09 20:58:35.0"> <body><! CDATA Recently we have updated go version to go1.9 on x86_64 and z CI build nodes. Also, fabric-ca tests are now running on 0.4.2 base image which has go version 1.9.  We also have go1.7.5 to support release branch tests.  ></body> </Action>
