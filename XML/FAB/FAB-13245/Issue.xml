<Issue id="36084" key="FAB-13245" number="13245" project="10002" reporter="tock" assignee="tock" creator="tock" type="10003" summary="Kafka-to-Raft migration: Abort path" priority="3" resolution="10001" status="6" created="2018-12-12 07:38:45.0" updated="2019-04-04 07:41:32.0" resolutiondate="2019-04-04 07:37:47.0" votes="0" watches="3" workflowId="47599"> <description><! CDATA The abort path builds on the "green" path described in an earlier task (FAB-13264) and adds the ability to abort a migration after it was started but before it is committed. Recall that starting a migration blocks all normal transactions. The ability to abort an on-going migration allows an admin to cope with errors and problems in the process of migration without freezing the ordering service during the entire time.   Possible use cases for the abort path are the following: * An admin starts a migration, tries to commit, but receives a response that not all standard channels have the same metadata at the "CONTEXT". * An admin starts a migration, and while submitting a "CONTEXT" receives a response that the raft metadata in it is invalid.  * The admin can then abort, allowing the system to continue processing transactions, regroup, and try again in a later (maybe much later) time.  In the abort path: # System channel starts a migration by sending a config update tx (START-TX) on the system channel, where: ## ConsensusType.Type="kafka" ## ConsensusType.MigrationState=START ## ConsensusType.MigrationContext=0 ## ConsensusType.Metadata=\{empty} ## This transaction is accepted at block-height x (the *context*) # A subset S of standard channels (zero, 1 or more, or ALL) issue a config update-tx (CONTEXT-TX), where: ## ConsensusType.Type="etcdraft" ## ConsensusType.MigrationState=CONTEXT ## ConsensusType.MigrationContext=context ## ConsensusType.Metadata={*A valid etcdraft metadata*} # In order to abort the on-going migration, every standard channel must issues a config update tx (ABORT-TX), where: ## ConsensusType.Type="kafka" ## ConsensusType.MigrationState=ABORT ## ConsensusType.MigrationContext=context ## ConsensusType.Metadata=\{empty} # In order to abort the on-going migration, the system channel issues a config update tx (ABORT-TX), where: ## ConsensusType.Type="kafka" ## ConsensusType.MigrationState=ABORT ## ConsensusType.MigrationContext=context ## ConsensusType.Metadata=\{empty} # Normal transactions can resume on standard channels ALL-S (i.e. those that did not issue a CONTEXT-TX) # In the next system channel config update transaction, the system channel can:  ## Restart a new migration, or ## It must explicitly set  *** ConsensusType.MigrationState=NONE *** ConsensusType.MigrationContext=0 *** In addition to other parameters that are updated (including channel creation).        ></description> </Issue>
