<Issue id="13474" key="FAB-1142" number="1142" project="10002" reporter="jimthematrix" assignee="jimthematrix" creator="jimthematrix" type="10001" summary="Sprint 5 demo" priority="2" resolution="10000" status="6" created="2016-11-17 21:28:45.0" updated="2018-07-20 18:55:55.0" resolutiondate="2016-11-28 04:00:23.0" votes="0" watches="4" workflowId="36725"> <description><! CDATA creating a demo that coordinates the accomplished work in Sprint 5: - use CouchDB for ledger and SDK keystore and enrollment storage - mention that LevelDB now replaces RocksDB - use Kafka orderer - use COP server for acquiring ECerts - sign proposals and transactions in node.js SDK with ECerts - verify signatures in proposal responses in node.js SDK (run-at) - use Java SDK to show end-to-end flow without sign or verify  *From Ledger perspective, here are the instructions to demonstrate CouchDB with Marbles chaincode:* 1) Start CouchDB in Vagrant by doing "couchdb start" from fabric directory.  This will also download the CouchDB docker the first time it is done.  2) Switch ledger to use CouchDB instead of LevelDB in /fabric/peer/core.yaml by setting "stateDatabase" to "CouchDB"  3) start orderer ./orderer  4) start peer CORE_PEER_COMMITTER_LEDGER_ORDERER=0.0.0.0:5151 CORE_LOGGING_LEVEL=DEBUG peer node start  5) Deploy chaincode CORE_PEER_COMMITTER_LEDGER_ORDERER=0.0.0.0:5151 peer chaincode deploy -p https://github.com/denyeart/marbles/chaincode -n marbles -c '{"Args": "init","1" }'  6) Invoke chaincode to create marble owned by ‘tom’ CORE_LOGGING_LEVEL=debug CORE_PEER_COMMITTER_LEDGER_ORDERER=0.0.0.0:5151 peer chaincode invoke -n marbles -c '{"Args": "init_marble","marble1","blue","35","tom" }'  7) Invoke chaincode to transfer marble to ‘jerry’ CORE_LOGGING_LEVEL=debug CORE_PEER_COMMITTER_LEDGER_ORDERER=0.0.0.0:5151 peer chaincode invoke -n marbles -c '{"Args": "set_owner","marble1","jerry" }'  8) See state variables (JSON documents) in CouchDB UI by going to http://localhost:5984/_utils Databases --> system --> All Documents  9) Query data using a REST client, for example to query for all marbles owned by Jerry, perform this query: POST http://127.0.0.1:5984/system/_find Header: Content-Type:application/json {"selector":{"docType":"Marble","owner":"jerry"}}  ></description> </Issue>
