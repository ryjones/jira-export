<Action id="21090" issue="14972" author="ratnakar" type="comment" created="2017-02-21 21:21:18.0" updateauthor="ratnakar" updated="2017-02-22 15:22:31.0"> <body><! CDATA Got the working version of yaml files from murali and required commands  {code} make configtxgen make peer  make orderer  configtxgen -outputBlock orderer.block -outputCreateChannelTx myc1 -profile ThreeOrgs -channelID myc1  ORDERER_GENERAL_GENESISMETHOD=file ORDERER_GENERAL_GENESISFILE=orderer.block ORDERER_GENERAL_LOCALMSPDIR=msp/localMspConfig ORDERER_GENERAL_LOCALMSPID=OrdererMSP orderer  CORE_PEER_MSPCONFIGPATH=examples/chaincode_sample/crypto/peer/peer0/localMspConfig CORE_PEER_LOCALMSPID=PEER0 peer node start --peer-defaultchain=false  peer channel create -c myc1  CORE_PEER_MSPCONFIGPATH=examples/chaincode_sample/crypto/peer/peer0/localMspConfig CORE_PEER_LOCALMSPID=PEER0 peer channel join -b myc1.block  CORE_PEER_MSPCONFIGPATH=examples/chaincode_sample/crypto/peer/peer0/localMspConfig CORE_PEER_LOCALMSPID=PEER0 peer install -n mycc -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 -v 0  CORE_PEER_MSPCONFIGPATH=examples/chaincode_sample/crypto/peer/peer0/localMspConfig CORE_PEER_LOCALMSPID=PEER0 peer chaincode install -n mycc -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 -v 0  CORE_PEER_MSPCONFIGPATH=examples/chaincode_sample/crypto/peer/peer0/localMspConfig CORE_PEER_LOCALMSPID=PEER0 peer chaincode instantiate -C threeorgs -n mycc -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 -v 0 -c '{"Args": "init","a","100","b","200" }' {code}  ></body> </Action>
<Action id="21091" issue="14972" author="ratnakar" type="comment" created="2017-02-21 22:38:02.0" updateauthor="ratnakar" updated="2017-02-21 22:38:02.0"> <body><! CDATA There is a dependency with the changeset https://gerrit.hyperledger.org/r/#/c/5955 We must provide *-P* policy option during instantiating chaincode  {code} CORE_PEER_MSPCONFIGPATH=examples/chaincode_sample/crypto/peer/peer0/localMspConfig CORE_PEER_LOCALMSPID=PEER0 peer chaincode instantiate -C myc1 -n mycc -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 -v 0 -c '{"Args": "init","a","100","b","200" }' -P "AND('PEER0.member')" {code}  Invoke/Query works with normal commands {code} CORE_PEER_MSPCONFIGPATH=examples/chaincode_sample/crypto/peer/peer0/localMspConfig CORE_PEER_LOCALMSPID=PEER0 peer chaincode invoke -C myc1 -n mycc -c '{"Args": "invoke","a","b","10" }' CORE_PEER_MSPCONFIGPATH=examples/chaincode_sample/crypto/peer/peer0/localMspConfig CORE_PEER_LOCALMSPID=PEER0 peer chaincode query -C myc1 -n mycc -c '{"Args": "query","a" }' {code}  ></body> </Action>
<Action id="21092" issue="14972" author="ratnakar" type="comment" body="Adding core.yaml, ordere.yaml and configtx.yaml file for reference." created="2017-02-21 22:38:25.0" updateauthor="ratnakar" updated="2017-02-21 22:38:25.0"/>
<Action id="21098" issue="14972" author="ratnakar" type="comment" body="There is a dependency with this patch https://gerrit.hyperledger.org/r/#/c/6335 as well to make End-to-End scenario work" created="2017-02-22 02:23:22.0" updateauthor="ratnakar" updated="2017-02-22 13:34:44.0"/>
<Action id="21100" issue="14972" author="ratnakar" type="comment" created="2017-02-22 06:41:34.0" updateauthor="ratnakar" updated="2017-02-22 06:41:34.0"> <body><! CDATA When tried with a Docker-compose using peer and orderer images, with the above patchsets applied.   I am stuck at this stage where unable to succeed with invoke {code} 2017-02-22 06:28:54.753 UTC  logging  InitFromViper -> DEBU 001 Setting default logging level to DEBUG for command 'chaincode' 2017-02-22 06:28:54.754 UTC  msp  GetLocalMSP -> DEBU 002 Returning existing local MSP 2017-02-22 06:28:54.754 UTC  msp  GetDefaultSigningIdentity -> DEBU 003 Obtaining default signing identity 2017-02-22 06:28:54.754 UTC  msp  Sign -> DEBU 004 Sign: plaintext: 0A8A050A54080322046D7963312A4031...7570697375706F697275736F69756F75  2017-02-22 06:28:54.755 UTC  msp  Sign -> DEBU 005 Sign: digest: 8F72A67AD73CB022F49CCB8A2C22322C2A3757164FA550F7F60B8DC68291862E  Error: Error endorsing invoke: rpc error: code = 2 desc = failed to obtain cds for mycc - transaction not found mycc/myc1 {code}  And peer logs says chaincode transaction is not available on this chain {code} 2017-02-22 06:29:09.829 UTC  shim  sendChannel -> DEBU 495  71c7dc32 before send 2017-02-22 06:29:09.829 UTC  shim  sendChannel -> DEBU 496  71c7dc32 after send 2017-02-22 06:29:09.829 UTC  shim  afterResponse -> DEBU 497  71c7dc32 Received RESPONSE, communicated (state:ready) 2017-02-22 06:29:09.829 UTC  shim  handleGetState -> DEBU 498  71c7dc32 GetState received payload RESPONSE 2017-02-22 06:29:09.829 UTC  lccc  Invoke -> ERRO 499 ChaincodeId: mycc does not exist on channel: myc1(err:chaincode not found mycc) 2017-02-22 06:29:09.829 UTC  shim  func1 -> DEBU 49a  71c7dc32 Transaction completed. Sending COMPLETED 2017-02-22 06:29:09.829 UTC  shim  func1 -> DEBU 49b  71c7dc32 Move state message COMPLETED {code}  ></body> </Action>
<Action id="21106" issue="14972" author="bmos299" type="comment" created="2017-02-22 13:52:02.0" updateauthor="bmos299" updated="2017-02-22 13:52:02.0"> <body><! CDATA To summarize where this bug stands:  1.  To get the local E2E flow to work two patch sets need merged: Patch set https://gerrit.hyperledger.org/r/#/c/5955 (verified) and https://gerrit.hyperledger.org/r/#/c/6335 (not verified). *This needs reviewed and merged asap* 2.  With these two patch sets Ratnakar then gets the local E2E flow working (native binaries in vagrant).  However, when he then leverages a real network via docker-compose, the invoke fails.  We will open a new bug for this issue.   Thanks, Barry     ></body> </Action>
<Action id="21131" issue="14972" author="bmos299" type="comment" body="Current State: Patch set 6355 is merged.  Patch set 5955 is not and looking in gerrit it is dependent on https://gerrit.hyperledger.org/r/#/c/6379.    " created="2017-02-23 13:54:39.0" updateauthor="bmos299" updated="2017-02-23 13:54:39.0"/>
<Action id="21142" issue="14972" author="bmos299" type="comment" created="2017-02-23 19:16:48.0" updateauthor="bmos299" updated="2017-02-23 19:40:14.0"> <body><! CDATA Hi Murali, Ratnakar and I ran your instructions provided, pulling in the fixes as directed.  We both fail on the instantiate:   {code} ebe010a9a0f1:/opt/gopath/src/github.com/hyperledger/fabric# CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer:5005 CORE_PEER_ADDRESS=peer0:7051 CORE_PEER_LOCALMSPID=Org0MSP CORE_PEER_MSPCONFIGPATH=examples/chaincode_sample/crypto/peer/peer0/localMspConfig peer channel join -b foo.block Join Result: 2017-02-23 19:04:44.992 UTC  main  main -> INFO 001 Exiting..... root@ebe010a9a0f1:/opt/gopath/src/github.com/hyperledger/fabric# CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer:5005 CORE_PEER_ADDRESS=peer1:7051 CORE_PEER_LOCALMSPID=Org1MSP CORE_PEER_MSPCONFIGPATH=examples/chaincode_sample/crypto/peer/peer1/localMspConfig peer channel join -b foo.block Join Result: 2017-02-23 19:05:16.196 UTC  main  main -> INFO 001 Exiting..... root@ebe010a9a0f1:/opt/gopath/src/github.com/hyperledger/fabric# CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer:5005 CORE_PEER_ADDRESS=peer2:7051 CORE_PEER_LOCALMSPID=Org2MSP CORE_PEER_MSPCONFIGPATH=examples/chaincode_sample/crypto/peer/peer2/localMspConfig peer channel join -b foo.block Join Result: 2017-02-23 19:05:41.695 UTC  main  main -> INFO 001 Exiting..... root@ebe010a9a0f1:/opt/gopath/src/github.com/hyperledger/fabric# CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer:5005 CORE_PEER_ADDRESS=peer3:7051 CORE_PEER_LOCALMSPID=Org3MSP CORE_PEER_MSPCONFIGPATH=examples/chaincode_sample/crypto/peer/peer3/localMspConfig peer channel join -b foo.block Join Result: 2017-02-23 19:05:53.357 UTC  main  main -> INFO 001 Exiting..... root@ebe010a9a0f1:/opt/gopath/src/github.com/hyperledger/fabric# CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer:5005 CORE_PEER_ADDRESS=peer0:7051 CORE_PEER_LOCALMSPID=Org0MSP CORE_PEER_MSPCONFIGPATH=examples/chaincode_sample/crypto/peer/peer0/localMspConfig peer chaincode install -n mycc -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 -v 0 Installed remotely response:<status:200 payload:"OK" > root@ebe010a9a0f1:/opt/gopath/src/github.com/hyperledger/fabric# CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer:5005 CORE_PEER_ADDRESS=peer1:7051 CORE_PEER_LOCALMSPID=Org1MSP CORE_PEER_MSPCONFIGPATH=examples/chaincode_sample/crypto/peer/peer1/localMspConfig peer chaincode install -n mycc -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 -v 0 Installed remotely response:<status:200 payload:"OK" > root@ebe010a9a0f1:/opt/gopath/src/github.com/hyperledger/fabric# CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer:5005 CORE_PEER_ADDRESS=peer1:7051 CORE_PEER_LOCALMSPID=Org1MSP CORE_PEER_MSPCONFIGPATH=examples/chaincode_sample/crypto/peer/peer1/localMspConfig peer chaincode instantiate -n mycc -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 -v 0 -c '{"Args": "init","a","100","b","200" }' -C foo -P "OR('Org0MSP.member','Org1MSP.member','Org0MSP.member','Org3MSP.member')" Error: Error endorsing chaincode: rpc error: code = 2 desc = The proposal does not comply with the channel writers for channel foo, error Failed to reach implicit threshold of 3 sub-policies, required 3 remaining  Usage: peer chaincode instantiate  flags   Global Flags: -C, --chainID string             The chain on which this command should be executed (default "testchainid") -c, --ctor string                Constructor message for the chaincode in JSON format (default "{}") -E, --escc string                The name of the endorsement system chaincode to be used for this chaincode -l, --lang string                Language the chaincode is written in (default "golang") --logging-level string       Default logging level and overrides, see core.yaml for full syntax -n, --name string                Name of the chaincode -p, --path string                Path to chaincode -P, --policy string              The endorsement policy associated to this chaincode --test.coverprofile string   Done (default "coverage.cov") -t, --tid string                 Name of a custom ID generation algorithm (hashing and decoding) e.g. sha256base64 -u, --username string            Username for chaincode operations when security is enabled -v, --version string             Version of the chaincode specified in install/instantiate/upgrade commands -V, --vscc string                The name of the verification system chaincode to be used for this chaincode  root@ebe010a9a0f1:/opt/gopath/src/github.com/hyperledger/fabric#  {code}  Here are the directions (info for the general reader) that Murali sent out: {code} Scenario 4 orgs with MSPs Orderer genesis block generated with configtxgen Channel foo generated with configtxgen Endorsement policy for invokes - 1 of 4 members from the 4 orgs  Prereqs tested with https://gerrit.hyperledger.org/r/#/c/6379/ - CR to be merged https://gerrit.hyperledger.org/r/#/c/5955 - CR to be merged    Test  Build make make peer-docker make orderer-docker make configtxgen  In Vagrant ...  generate the genesis block for orderer in "fabric" folder configtxgen -outputBlock fourorgs.orderer.block -profile FourOrgs orderer.yaml used by the orderer container   start the network docker-compose -f docker-e2e.yml up   (4 orgs with one peer each.... the anchor peer is also an org leader ... Yacov, in this case we are not really testing gossip as each peer is directly getting block from orderer correct ? Will be nice to test variatios...this could be a next step to branch off into gossip based tests).  verify 5 containers started docker ps  create the channel tx for foo configtxgen -outputCreateChannelTx foo.tx -profile FourOrgs -channelID foo  where configtx.yml is   exec CLI docker exec -it cli bash  create the channel CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer:5005 peer channel create -c foo -f foo.tx  The channel create command is using foo.tx from the configtxgen tool.  join the channel CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer:5005 CORE_PEER_ADDRESS=peer0:7051 CORE_PEER_LOCALMSPID=Org0MSP CORE_PEER_MSPCONFIGPATH=examples/chaincode_sample/crypto/peer/peer0/localMspConfig peer channel join -b foo.block  CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer:5005 CORE_PEER_ADDRESS=peer1:7051 CORE_PEER_LOCALMSPID=Org1MSP CORE_PEER_MSPCONFIGPATH=examples/chaincode_sample/crypto/peer/peer1/localMspConfig peer channel join -b foo.block  CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer:5005 CORE_PEER_ADDRESS=peer2:7051 CORE_PEER_LOCALMSPID=Org2MSP CORE_PEER_MSPCONFIGPATH=examples/chaincode_sample/crypto/peer/peer2/localMspConfig peer channel join -b foo.block  CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer:5005 CORE_PEER_ADDRESS=peer3:7051 CORE_PEER_LOCALMSPID=Org3MSP CORE_PEER_MSPCONFIGPATH=examples/chaincode_sample/crypto/peer/peer3/localMspConfig peer channel join -b foo.block  The channel join command is using the foo.block from the "peer channel create" command.  install on 0 and 1 (but not on 2 or 3) CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer:5005 CORE_PEER_ADDRESS=peer0:7051 CORE_PEER_LOCALMSPID=Org0MSP CORE_PEER_MSPCONFIGPATH=examples/chaincode_sample/crypto/peer/peer0/localMspConfig peer chaincode install -n mycc -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 -v 0  CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer:5005 CORE_PEER_ADDRESS=peer1:7051 CORE_PEER_LOCALMSPID=Org1MSP CORE_PEER_MSPCONFIGPATH=examples/chaincode_sample/crypto/peer/peer1/localMspConfig peer chaincode install -n mycc -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 -v 0  instantiate from1 on channel foo... CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer:5005 CORE_PEER_ADDRESS=peer1:7051 CORE_PEER_LOCALMSPID=Org1MSP CORE_PEER_MSPCONFIGPATH=examples/chaincode_sample/crypto/peer/peer1/localMspConfig peer chaincode instantiate -n mycc -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 -v 0 -c '{"Args": "init","a","100","b","200" }' -C foo -P "OR('Org0MSP.member','Org1MSP.member','Org0MSP.member','Org3MSP.member')"  (note the Endorsement Policy to be validated by VSCC)  ...but query on 0, should work as we installed the CC on 0 and 1 CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer:5005 CORE_PEER_ADDRESS=peer0:7051 CORE_PEER_LOCALMSPID=Org0MSP CORE_PEER_MSPCONFIGPATH=examples/chaincode_sample/crypto/peer/peer0/localMspConfig peer chaincode query -n mycc -v 0 -c '{"Args": "query","a" }' -C foo  ...and invoke on 0, shoud work as 0 has the CC CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer:5005 CORE_PEER_ADDRESS=peer0:7051 CORE_PEER_LOCALMSPID=Org0MSP CORE_PEER_MSPCONFIGPATH=examples/chaincode_sample/crypto/peer/peer0/localMspConfig peer chaincode invoke -n mycc -v 0 -c '{"Args": "invoke","a","b","10" }' -C foo  ...now install on 2 too CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer:5005 CORE_PEER_ADDRESS=peer2:7051 CORE_PEER_LOCALMSPID=Org2MSP CORE_PEER_MSPCONFIGPATH=examples/chaincode_sample/crypto/peer/peer2/localMspConfig peer chaincode install -n mycc -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 -v 0  ...and query on 2 which should work as it has been getting the commits CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer:5005 CORE_PEER_ADDRESS=peer2:7051 CORE_PEER_LOCALMSPID=Org2MSP CORE_PEER_MSPCONFIGPATH=examples/chaincode_sample/crypto/peer/peer2/localMspConfig peer chaincode query -n mycc -v 0 -c '{"Args": "query","a" }' -C foo  {code}  ></body> </Action>
<Action id="21151" issue="14972" author="muralisr" type="comment" body=" ~bmos299   ~Ratnakar  can you try with latest ... a default ACL check was being too strict. Till we get the abolity to specify policy, reverting that check with https://gerrit.hyperledger.org/r/#/c/6471" created="2017-02-24 13:23:55.0" updateauthor="muralisr" updated="2017-02-24 13:23:55.0"/>
<Action id="21152" issue="14972" author="ratnakar" type="comment" body=" ~muralisr  Made same changes yesterday night and verified End-to-End is working with those changes." created="2017-02-24 13:34:40.0" updateauthor="ratnakar" updated="2017-02-24 13:34:40.0"/>
<Action id="21156" issue="14972" author="ratnakar" type="comment" created="2017-02-24 16:24:26.0" updateauthor="ratnakar" updated="2017-02-24 16:24:26.0"> <body><! CDATA Could see peer and orderer crahsed with latest code *709d87b30060937c26b434db8baf9796b529449a* {code} CONTAINER ID        IMAGE                        COMMAND                  CREATED             STATUS                      PORTS               NAMES 63640f1ad2c7        hyperledger/fabric-peer      "peer node start -..."   11 seconds ago      Exited (2) 10 seconds ago                       peer3 4438096f0a86        hyperledger/fabric-peer      "sh -c './script.s..."   11 seconds ago      Up 10 seconds                                   cli efa4ca85075d        hyperledger/fabric-peer      "peer node start -..."   11 seconds ago      Exited (2) 11 seconds ago                       peer2 52573c09d81e        hyperledger/fabric-peer      "peer node start -..."   12 seconds ago      Exited (2) 11 seconds ago                       peer1 bb6f5c16457f        hyperledger/fabric-peer      "peer node start -..."   12 seconds ago      Exited (2) 11 seconds ago                       peer0 1ac6fdf4966d        hyperledger/fabric-orderer   "orderer"                13 seconds ago      Exited (2) 12 seconds ago                       orderer {code} {panel} docker logs -f orderer {panel} {code} vagrant@hyperledger-devenv:v0.3.0-7a2afe2:/opt/gopath/src/github.com/hyperledger/fabric/chaincode_sample$ docker logs -f orderer  2017-02-24 16:18:21.313 UTC  viperutil  EnhancedExactUnmarshal -> INFO 001 map genesis:map DeprecatedBatchTimeout:10s DeprecatedBatchSize:99 MB SbftShared:map N:1 F:0 RequestTimeoutNsec:1000000000 Peers:map :6101:sbft/testdata/cert1.pem    general:map GenesisProfile:SampleInsecureSolo TLS:map PrivateKey:<nil> Certificate:<nil> RootCAs:<nil> ClientAuthEnabled:false ClientRootCAs:<nil> Enabled:false  GenesisFile:/var/hyperledger/orderer/orderer.block LocalMSPDir:/var/hyperledger/orderer/localMspConfig LedgerType:ram ListenAddress:0.0.0.0 GenesisMethod:file BCCSP:map Default:SW SW:map FileKeyStore:map KeyStore:<nil>  Hash:SHA3 Security:256   LocalMSPID:OrdererMSP Profile:map Address:0.0.0.0:6060 Enabled:false  LogLevel:debug ListenPort:7050  ramledger:map HistorySize:1000  fileledger:map Prefix:hyperledger-fabric-ordererledger Location:<nil>  kafka:map Retry:map Period:3s Stop:60s  Verbose:false TLS:map Certificate:<nil> RootCAs:<nil> Enabled:false PrivateKey:<nil>   sbftlocal:map CertFile:sbft/testdata/cert1.pem KeyFile:sbft/testdata/key.pem DataDir:/tmp PeerCommAddr::6101   2017-02-24 16:18:21.314 UTC  orderer/config  completeInitialization -> INFO 002 Validated configuration to: &{General:{LedgerType:ram ListenAddress:0.0.0.0 ListenPort:7050 TLS:{Enabled:false PrivateKey: Certificate: RootCAs:   ClientAuthEnabled:false ClientRootCAs:  } GenesisMethod:file GenesisProfile:SampleInsecureSolo GenesisFile:/var/hyperledger/orderer/orderer.block Profile:{Enabled:false Address:0.0.0.0:6060} LogLevel:debug LocalMSPDir:/var/hyperledger/orderer/localMspConfig LocalMSPID:OrdererMSP BCCSP:0xc420212da0} RAMLedger:{HistorySize:1000} FileLedger:{Location: Prefix:hyperledger-fabric-ordererledger} Kafka:{Retry:{Period:3s Stop:1m0s} Verbose:false Version:{version: 0 9 0 1 } TLS:{Enabled:false PrivateKey: Certificate: RootCAs:   ClientAuthEnabled:false ClientRootCAs:  }} Genesis:{DeprecatedBatchTimeout:10s DeprecatedBatchSize:103809024 SbftShared:{N:1 F:0 RequestTimeoutNsec:1000000000 Peers:map :6101:sbft/testdata/cert1.pem }} SbftLocal:{PeerCommAddr::6101 CertFile:sbft/testdata/cert1.pem KeyFile:sbft/testdata/key.pem DataDir:/tmp}} 2017-02-24 16:18:21.316 UTC  SW_BCCSP  createKeyStoreIfNotExists -> INFO 003 KeyStore path  /var/hyperledger/orderer/localMspConfig/keystore  missing  false :  <clean>  2017-02-24 16:18:21.316 UTC  SW_BCCSP  openKeyStore -> DEBU 004 KeyStore opened at  /var/hyperledger/orderer/localMspConfig/keystore ...done 2017-02-24 16:18:21.316 UTC  BCCSP_FACTORY  initBCCSP -> DEBU 005 Initialize BCCSP  SW  2017-02-24 16:18:21.316 UTC  msp  getPemMaterialFromDir -> DEBU 006 Reading directory /var/hyperledger/orderer/localMspConfig/cacerts 2017-02-24 16:18:21.317 UTC  msp  getPemMaterialFromDir -> DEBU 007 Inspecting file /var/hyperledger/orderer/localMspConfig/cacerts/ordererOrg0.pem 2017-02-24 16:18:21.318 UTC  msp  getPemMaterialFromDir -> DEBU 008 Reading directory /var/hyperledger/orderer/localMspConfig/signcerts 2017-02-24 16:18:21.319 UTC  msp  getPemMaterialFromDir -> DEBU 009 Inspecting file /var/hyperledger/orderer/localMspConfig/signcerts/orderer0Signer.pem 2017-02-24 16:18:21.319 UTC  msp  getPemMaterialFromDir -> DEBU 00a Reading directory /var/hyperledger/orderer/localMspConfig/admincerts 2017-02-24 16:18:21.320 UTC  msp  getPemMaterialFromDir -> DEBU 00b Inspecting file /var/hyperledger/orderer/localMspConfig/admincerts/ordererOrg0.pem 2017-02-24 16:18:21.321 UTC  msp  getPemMaterialFromDir -> DEBU 00c Reading directory /var/hyperledger/orderer/localMspConfig/intermediatecerts 2017-02-24 16:18:21.321 UTC  msp  NewBccspMsp -> DEBU 00d Creating BCCSP-based MSP instance 2017-02-24 16:18:21.321 UTC  msp  GetLocalMSP -> DEBU 00e Created new local MSP 2017-02-24 16:18:21.321 UTC  msp  Setup -> DEBU 00f Setting up MSP instance OrdererMSP 2017-02-24 16:18:21.321 UTC  msp  newIdentity -> DEBU 010 Creating identity instance for ID &{OrdererMSP IDENTITY} 2017-02-24 16:18:21.321 UTC  msp  newIdentity -> DEBU 011 Creating identity instance for ID &{OrdererMSP IDENTITY} 2017-02-24 16:18:21.321 UTC  msp  newIdentity -> DEBU 012 Creating identity instance for ID &{OrdererMSP IDENTITY} 2017-02-24 16:18:21.322 UTC  msp  getSigningIdentityFromConf -> DEBU 013 Could not find SKI  9346057e86eafe76e698497d6ec3c20af8ad5cecb72b8c1386f91f0f13fe0831 , trying KeyMaterial field: Key type not recognized panic: Failed initializing crypto  KeyMaterial not found in SigningIdentityInfo   goroutine 1  running : panic(0xa868c0, 0xc4202466f0) 	/opt/go/src/runtime/panic.go:500 +0x1a1 main.main() 	/opt/gopath/src/github.com/hyperledger/fabric/orderer/main.go:90 +0x1725  {code}  ></body> </Action>
<Action id="21160" issue="14972" author="ratnakar" type="comment" created="2017-02-24 21:12:23.0" updateauthor="ratnakar" updated="2017-02-24 21:12:23.0"> <body><! CDATA Need to cherrypick the changes from https://gerrit.hyperledger.org/r/#/c/6489 to get the E2E test work.  also need to modifications to keystore of peer and orderer ex: _keystore/9346057e86eafe76e698497d6ec3c20af8ad5cecb72b8c1386f91f0f13fe0831_sk_   ></body> </Action>
<Action id="21162" issue="14972" author="ratnakar" type="comment" created="2017-02-25 13:58:47.0" updateauthor="ratnakar" updated="2017-02-25 13:58:47.0"> <body><! CDATA Verified on latest commit *ea7015e722cb751efeb0f827470f58a79a15b9c9* E2E scenario is working , Ramesh is Integrating the scripts in CI.  ></body> </Action>
