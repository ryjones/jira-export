<Action id="50636" issue="33829" author="denyeart" type="comment" created="2018-09-19 05:57:32.0" updateauthor="denyeart" updated="2018-09-19 05:57:32.0"> <body><! CDATA  ~ptippett  Here's what I've come up with, what do you think?  I tried to preserve the existing Info message in case people are grepping on it, but also added breakdown of commit times, as well as a new message for Received and Validated. {code:java} 2018-09-19 01:49:35.861 EDT  blocksProvider  DeliverBlocks -> INFO 02e  myc  Received block  57  from ordering service 2018-09-19 01:49:35.867 EDT  committer/txvalidator  Validate -> INFO 02f  myc  Validated block  57  in 5ms 2018-09-19 01:49:35.892 EDT  kvledger  CommitWithPvtData -> INFO 030  myc  Committed block  57  with 1 transaction(s) in 24ms (state_validation=7ms block_commit=0ms state_commit=16ms){code}  ></body> </Action>
<Action id="50637" issue="33829" author="denyeart" type="comment" body="https://gerrit.hyperledger.org/r/#/c/26383/" created="2018-09-19 06:25:10.0" updateauthor="denyeart" updated="2018-09-19 06:25:10.0"/>
<Action id="50648" issue="33829" author="ptippett" type="comment" body=" ~denyeart  Thanks man!  This looks good to me.  So we&apos;ll now have 3 messages per block at info vs 1.  I think that&apos;s reasonable.  Good idea on preserving the existing log message." created="2018-09-19 11:44:09.0" updateauthor="ptippett" updated="2018-09-19 11:44:09.0"/>
<Action id="50664" issue="33829" author="qizhang87" type="comment" body=" ~denyeart   ~ptippett  A block can be received from either ordering service, or the other peers in the same org via Gossip. Thus is it accurate to say &quot;Received block  57 from ordering service&quot; only, maybe we also wanna have &quot;Received block  XX from Gossip&quot;?" created="2018-09-19 13:54:02.0" updateauthor="qizhang87" updated="2018-09-19 13:54:02.0"/>
<Action id="50695" issue="33829" author="denyeart" type="comment" created="2018-09-19 16:22:39.0" updateauthor="denyeart" updated="2018-09-19 16:23:51.0"> <body><! CDATA  ~qizhang87  In this code location, the info message is correct that the block was received from ordering service.  You are correct though, we need a similar info message when block is received from a leader peer or another peer via block transfer.    ~yacovm  Could you point to the relevant code locations for those two scenarios? Or even better... go ahead and log the other two info statements in your own gossip CR.  This will make it clear in the logs how the blocks are coming in for each peer (whether they are currently a leader, a follower, or trying to catch up via block transfer).  ></body> </Action>
<Action id="50697" issue="33829" author="yacovm" type="comment" created="2018-09-19 16:36:05.0" updateauthor="yacovm" updated="2018-09-19 16:36:05.0"> <body><! CDATA When we get a block from the ordering service we  log it|https://github.com/hyperledger/fabric/blob/release-1.2/core/deliverservice/blocksprovider/blocksprovider.go#L186 ... {quote}You are correct though, we need a similar info message when block is received from a leader peer or another peer via block transfer. {quote} Do you mean the  point-to-point|https://github.com/hyperledger/fabric/blob/release-1.2/gossip/state/state.go#L473  state transfer? Or just  standard gossip|https://github.com/hyperledger/fabric/blob/release-1.2/gossip/gossip/gossip_impl.go#L347 ?     ></body> </Action>
<Action id="50748" issue="33829" author="denyeart" type="comment" created="2018-09-19 19:26:23.0" updateauthor="denyeart" updated="2018-09-19 19:26:23.0"> <body><! CDATA  ~yacovm  From my understanding, there are 3 ways to get a block: * from ordering service (which I am already logging at  https://gerrit.hyperledger.org/r/#/c/26383/2/core/deliverservice/blocksprovider/blocksprovider.go  ) * as a follower of a leader peer in your org * from another peer via block transfer  It would be good to have a single log info message at each block entry point.  You'll probably tell me that I have over-simplified it, and there are some edge cases where there could be collisions, and so on.  In that case I'm open to getting educated and hearing your proposal.  The intent is to give some clue to the admin of the block arrival rate and processing rate (which they could perhaps draw some conclusions about the buffer and bottlenecks from), through minimal operational logging.  E.g. 3-4 short statements per block, without having to turn on the full debug.  ></body> </Action>
<Action id="50761" issue="33829" author="yacovm" type="comment" created="2018-09-19 19:51:09.0" updateauthor="yacovm" updated="2018-09-19 19:52:08.0"> <body><! CDATA {quote} * as a follower of a leader peer in your org{quote} That's not how it is... You can get it from a follower too.  Recall that gossip is a protocol that has 2 independent flows: * Push - you (any peer... leader or follower) pick a set of random peers and pushes a block to them. This happens whenever the peer receives a block for the first time * Pull - you (any peer - leader or follower) pick a set of random peers and ask them what they know, and then you may pull from some, blocks you are missing that they reported to have.    {quote}It would be good to have a single log info message at each block entry point. {quote} Why do you care if you received the block from a leader or not? You can receive it from a non leader too. In fact - if the leader peer "missed" you at the push phase, most chances are you're going to pull the block from a non-leader (assuming there are more non leaders than the only leader, excluding yourself...)    {quote}The intent is to give some clue to the admin of the block arrival rate and processing rate (which they could perhaps draw some conclusions about the buffer and bottlenecks from), through minimal operational logging. E.g. 3-4 short statements per block, without having to turn on the full debug. {quote} We have such...  basically  this|https://github.com/hyperledger/fabric/blob/release-1.2/gossip/state/state.go#L750  method enqueues the block to be committed when the ledger finished committing the previous block, and  this|https://github.com/hyperledger/fabric/blob/release-1.2/gossip/state/state.go#L547  method commits the block into the ledger. After the commit, there is  also a log|https://github.com/hyperledger/fabric/blob/release-1.2/gossip/state/state.go#L778 .  ></body> </Action>
<Action id="50833" issue="33829" author="denyeart" type="comment" created="2018-09-20 12:41:41.0" updateauthor="denyeart" updated="2018-09-20 12:59:20.0"> <body><! CDATA Thanks Yacov. I've pushed CR  https://gerrit.hyperledger.org/r/#/c/26383/  , can you review the messages now.  The intent is to log at INFO level when a block is received, so that admin can understand receive time versus validate time versus commit time.  Previously, the receive message was ambiguous, there was a single INFO message:  {color:#5230e1}2018-09-20 08:25:13.770 EDT  gossip/privdata  StoreBlock -> INFO 268{color} {color:#000000}Received block  84 {color}  People that don't know the code couldn't distinguish whether this was the enqueued time or dequeued time from buffer. In my new CR, you get a received INFO message when the block is enqueued, that also mentions where it was received from, one of: {code:java} Received block  5  from ordering service Received block  5  from another peer via gossip Received block  5  from another peer via block transfer{code} And then you get a debug message when it is dequeued for processing: {code:java} Received block  5  from buffer{code} Now admins can understand receive time versus validate time versus commit time without having to turn on debug: {code:java} 2018-09-19 01:49:35.861 EDT  blocksProvider  DeliverBlocks -> INFO 02e  myc  Received block  57  from ordering service 2018-09-19 01:49:35.867 EDT  committer/txvalidator  Validate -> INFO 02f  myc  Validated block  57  in 5ms 2018-09-19 01:49:35.892 EDT  kvledger  CommitWithPvtData -> INFO 030  myc  Committed block  57  with 1 transaction(s) in 24ms (state_validation=7ms block_commit=0ms state_commit=16ms){code} I've also fixed up the debug to make it more standardized with  channel  and  block  number for easier readability and grepping, for example old: {code:java} 2018-09-20 08:25:13.770 EDT  blocksProvider  DeliverBlocks -> DEBU 263  myc  Adding payload locally, buffer seqNum =  84 , peers number  0  2018-09-20 08:25:13.770 EDT  gossip/state  addPayload -> DEBU 264 Adding new payload into the buffer, seqNum = 84 2018-09-20 08:25:13.770 EDT  blocksProvider  DeliverBlocks -> DEBU 265  myc  Gossiping block  84 , peers number  0  2018-09-20 08:25:13.770 EDT  gossip/state  deliverPayloads -> DEBU 266 Ready to transfer payloads to the ledger, next sequence number is =  84  2018-09-20 08:25:13.770 EDT  gossip/state  deliverPayloads -> DEBU 267 New block with claimed sequence number 84 transactions num 1 2018-09-20 08:25:13.770 EDT  gossip/privdata  StoreBlock -> INFO 268 Received block  84  2018-09-20 08:25:13.771 EDT  gossip/privdata  StoreBlock -> DEBU 269 Validating block  84  2018-09-20 08:25:13.771 EDT  committer/txvalidator  Validate -> DEBU 26a START Block Validation{code} and new: {code:java} 2018-09-20 08:14:53.549 EDT  blocksProvider  DeliverBlocks -> DEBU 27a  myc  Adding payload to local buffer, blockNum =  83  2018-09-20 08:14:53.549 EDT  gossip/state  addPayload -> DEBU 27b  myc  Adding payload to local buffer, blockNum =  83  2018-09-20 08:14:53.549 EDT  blocksProvider  DeliverBlocks -> INFO 27c  myc  Received block  83  from ordering service 2018-09-20 08:14:53.549 EDT  blocksProvider  DeliverBlocks -> DEBU 27d  myc  Gossiping block  83 , peers number  0  2018-09-20 08:14:53.549 EDT  gossip/state  deliverPayloads -> DEBU 27e  myc  Ready to transfer payloads (blocks) to the ledger, next block number is =  83  2018-09-20 08:14:53.549 EDT  gossip/state  deliverPayloads -> DEBU 27f  myc  Transferring block  83  with 1 transaction(s) to the ledger 2018-09-20 08:14:53.549 EDT  gossip/privdata  StoreBlock -> DEBU 280  myc  Received block  83  from buffer 2018-09-20 08:14:53.549 EDT  gossip/privdata  StoreBlock -> DEBU 281  myc  Validating block  83  2018-09-20 08:14:53.549 EDT  committer/txvalidator  Validate -> DEBU 282  myc  START Block Validation for block  83 {code}  ></body> </Action>
<Action id="50847" issue="33829" author="yacovm" type="comment" body="/CC  ~C0rWin  " created="2018-09-20 14:41:50.0" updateauthor="yacovm" updated="2018-09-20 14:41:50.0"/>
<Action id="51081" issue="33829" author="denyeart" type="comment" body="merged in master for v1.3.  backporting to release-1.2 and release-1.1..." created="2018-09-24 10:12:35.0" updateauthor="denyeart" updated="2018-09-24 10:12:35.0"/>
