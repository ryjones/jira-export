<Issue id="45195" key="FAB-17954" number="17954" project="10002" reporter="magpie73" assignee="denyeart" creator="magpie73" type="10100" summary="Non-Deterministirc Read Result When Using StateCouchDB With Cache" priority="3" resolution="10000" status="6" created="2020-06-03 01:20:40.0" updated="2020-12-03 03:42:56.0" resolutiondate="2020-12-03 01:20:43.0" votes="0" watches="4" workflowId="60266" archived="N"> <description><! CDATA *1.Condition* - Use HLF v2.0.0 ~ - Use CouchDB as statedb with cache - Chaincode use struct as data (The fields are not ordered alphabetically)  *2. Symptom* - With single peer : It can occurred after calling GetState between 2 invocations of PutState on same key. Before 2nd PutState, the keys in the query result would be {color:#ff0000}alphabetically{color} ordered. After 2nd PutState, they would be ordered as {color:#ff0000}fields in struct{color}. But it's not a big problem.  - Multiple peers : It can occurred one peer calling GetState between 2 invocations of PutState on same key, another peer does not. On this situation, GetState result from 2 peers would be different. And if there's an invocation that includes GetState, it would fail with the error 'Inconsistent Response Payload from Different peers.'  !image-2020-06-03-10-44-53-269.png!  *3. Reason* The cache of statecouchdb loads data when chaincode calls GetState, and update cache when process transaction - only the key is exist in cache.  When loading, the data is marshalled as alphabetically ordererd.( keyValToCouchDoc func ) When updating, the data is marshalled order of fields in struct.( In the writeset )  !image-2020-06-03-10-14-49-414.png!  *4. Solutions* I make 2 solutions for this symptom.  *Solution 1* : Unmarshall and marshall data before update cache      .Good points - Keep current architecture      .Bad points - Not so efficient  *Solution 2* : Do not update cache - just remove when updated      .Good points - Very simple                               No need of hold new value in committer      .Bad points - Cache miss can be occurred one more time  I've already test both solutions, and they solve the problem.  I'm ready to contribute. :)  ></description> </Issue>
