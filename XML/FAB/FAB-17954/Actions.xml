<Action id="69379" issue="45195" author="btl5037" type="comment" body="While I haven&apos;t looked at the code, my assumption here is internally we marshal the data through a generic interface and essentially the data is a map which in Go are non-deterministic. Thus the expectation is that you would marshal it into a strongly typed struct which can then be compared for determinism. If you need the the output to be deterministic, the marshaling of this strongly typed struct would give you deterministic results, as opposed to the non-deterministic nature of the generic interfaces." created="2020-06-03 02:28:59.0" updateauthor="btl5037" updated="2020-06-03 02:29:10.0"/>
<Action id="69385" issue="45195" author="magpie73" type="comment" created="2020-06-03 05:23:35.0" updateauthor="magpie73" updated="2020-06-03 22:49:49.0"> <body><! CDATA Thanks for the comment. :) This symptom is caused by using different marshalling/unmarshalling method for adding and updating the cache.  The value in the StateDB - and initially added into cache - is unmarshalled to a map then converted to bytes.  So the order of keys are alphabetical.  https://github.com/hyperledger/fabric/blob/master/core/ledger/kvledger/txmgmt/statedb/statecouchdb/couchdoc_conv.go |https://github.com/hyperledger/fabric/blob/master/core/ledger/kvledger/txmgmt/statedb/statecouchdb/couchdoc_conv.go - keyValToCouchDoc()     type jsonValue map string interface{}    jsonMap := make(jsonValue)    json.Unmarshal(value, &jsonMap)    jsonBytes, err := jsonMap.toBytes()    couchDoc := &couchdb.CouchDoc\{JSONValue: jsonBytes}     On the contrary the value in the write set - update existing value in the cache - is marshalled in chaincode function.  So it could be follow order of struct fileds.   https://github.com/hyperledger/fabric-samples/blob/v2.1.0/chaincode/fabcar/go/fabcar.go |https://github.com/hyperledger/fabric-samples/blob/v2.1.0/chaincode/fabcar/go/fabcar.go - CreateCar()    carAsBytes, _ := json.Marshal(car)    return ctx.GetStub().PutState(carNumber, carAsBytes)     It can be resolved by guiding the way marshalling value in the chaincode.  But to resolve the problem completely, the code should be changed as one of my solutions.  ></body> </Action>
<Action id="69423" issue="45195" author="denyeart" type="comment" created="2020-06-09 12:17:07.0" updateauthor="denyeart" updated="2020-06-09 12:17:07.0"> <body><! CDATA More comments in mailing list:   https://lists.hyperledger.org/g/fabric/topic/74763904      ></body> </Action>
<Action id="70388" issue="45195" author="magpie73" type="comment" created="2020-09-28 00:26:40.0" updateauthor="magpie73" updated="2020-09-28 00:26:40.0"> <body><! CDATA Hello.  It has been passed 3 months after last comment. Sorry for bothering you, but I want to make things clear.  The problem is that it can makes the error 'Inconsistent Response Payload from Different peers.' under certain condition.  Can you tell me your opinion about whether this is bug or not. And if you think this is not a bug, please change the status of this jira. :)  Thanks.  ></body> </Action>
<Action id="70614" issue="45195" author="magpie73" type="comment" created="2020-11-04 23:36:30.0" updateauthor="magpie73" updated="2020-11-04 23:36:30.0"> <body><! CDATA  ~denyeart     Thanks for putting this issue to a sprint and . :)  I'll try to make fix this weekend.   Can you tell me your opinion about which is better solution for this?     *Solution 1* : Unmarshall and marshall data before update cache      .Good points - Keep current architecture      .Bad points - Not so efficient  *Solution 2* : Do not update cache - just remove when updated      .Good points - Very simple                              No need of hold new value in committer      .Bad points - Cache miss can be occurred one more time     Thanks.  ></body> </Action>
<Action id="70703" issue="45195" author="manish-sethi" type="comment" created="2020-11-17 17:53:07.0" updateauthor="manish-sethi" updated="2020-11-17 17:54:17.0"> <body><! CDATA As per the discussion on the mailing list (https://lists.hyperledger.org/g/fabric/topic/74763904) and here, this is not a bug and can be closed.  However, it will be good to use this Jira to update the docs.  ~magpie73  - do you want to submit a PR for this?   The "Note" section in this page (https://github.com/hyperledger/fabric/blob/master/docs/source/couchdb_as_state_database.rst) may be a good place to add this detail (search for "The key for a CouchDB JSON document in the above page").  ></body> </Action>
<Action id="70839" issue="45195" author="manish-sethi" type="comment" body=" ~denyeart - You had expressed interest in fixing the docs. So, assigning this to you." created="2020-11-30 15:45:55.0" updateauthor="manish-sethi" updated="2020-11-30 15:45:55.0"/>
<Action id="70884" issue="45195" author="denyeart" type="comment" body="Doc PR to address deterministic marshaling: https://github.com/hyperledger/fabric/pull/2187" created="2020-12-02 23:49:24.0" updateauthor="denyeart" updated="2020-12-02 23:49:24.0"/>
