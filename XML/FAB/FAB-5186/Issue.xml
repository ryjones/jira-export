<Issue id="18984" key="FAB-5186" number="5186" project="10002" reporter="harrijk" assignee="harrijk" creator="harrijk" type="10002" summary="High Verify to Sign Ratio" priority="3" resolution="10000" status="6" created="2017-07-05 15:52:17.0" updated="2018-07-20 14:13:42.0" resolutiondate="2017-12-04 19:50:57.0" votes="0" watches="3" workflowId="39385"> <description><! CDATA As an exercise to understand how and where the Hyperledger Fabric code verifies and signs endorsements, transactions, blocks, etc., I conducted a basic set of tests modeled after the end-to-end CLI tests that are contained within the fabric code base and collected go profiling information.  The blockchain network consisted of two org (two peers per org) and a solo ordering service. There was no interaction with membership services, nor was TLS enabled.  peer0/org1 and peer0/org2 were targeted as gossip leaders by setting the *CORE_PEER_GOSSIP_ORGLEADER* environment variable to *true*.  This was done to determine the differences in profiling between an org leader that processes endorsements, new blocks from the ordering service, and block requests from other peers that only request blocks from the org leader.  What was surprising is that, on average, the Verify to Sign ratio was approximately 45:1 when reviewing the profiling information.  I have attached both text and graphical versions of the profiling information from all peers and the orderer.  The 30 second profiles were collected after the initial setup of the channel and chaincode were completed.  During the profile collection period, CLI commands were issued to peer0/org1 to invoke an example02 chaincode function that transfers assets between two users (*a* and *b*, where *a* transferred 1 widget to *b*).  I would like to run the same chaincode tests, but through the use of an SDK rather than the CLI to determine if the 45:1 Verify to Sign ratio is replicated.  The reasoning behind this test is that perhaps different code paths are taken (bypassing sign processing or extra verifies occur) when using the CLI and thus skewing what a real world scenario would encounter.  I will continue to investigate this high Verify to Sign ratio.  ></description> </Issue>
