<Issue id="33058" key="FAB-11662" number="11662" project="10002" reporter="yoheiueda" creator="yoheiueda" type="10001" summary="Chaincode execution hangs during chaincode is being upgraded" priority="3" status="10100" created="2018-08-21 05:59:31.0" updated="2019-06-13 08:38:34.0" votes="0" watches="9" workflowId="44815"> <description><! CDATA When chaincode is being upgraded, chaincode execution hangs.  This behavior is not acceptable for mission-critical systems.  I devise a possible workaround for this issue, but it is too complicated to carry out the whole steps without mistakes.      I'd like Fabric to handle chaincode upgrade requests without intermission of transaction processing.     The root cause of this issue is the Reader/Writer lock of the lock-based transaction manager.  Lock-based transaction manager uses a Reader/Writer Lock to guarantee repeatable read of multiple GetState calls from a chaincode invocation. Read Lock is acquired to run a chaincode transaction. Write Lock is acquired to update StateDB when transactions are committed.     The problem here is that Reader Lock is acquired during the time-consuming chaincode build process. This Read Lock blocks a subsequent Write Lock  for transaction commits, and the pending Write Lock blocks subsequent Read Locks for chaincode execution at the same peer.  Please see the attached PDF file for more details.     I come up with three possible solutions: # Stop acquiring Read Lock during time-consuming chaincode build process # Separate the Lock for system and application chaincode # Prepare a lock per chaincode since namespaces of StateDB are isolated per chaincode (special care is necessary for stub.InvokeChaincode)     I also devise a workaround for this issue as described in the Page 3 of the attached PDF file. Please comment on whether the workaround is actually feasible or not.        ></description> </Issue>
