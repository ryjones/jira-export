<Issue id="37226" key="FAB-13944" number="13944" project="10002" reporter="sykesm" creator="sykesm" type="10004" summary="`make clean &amp;&amp; make peer` does not work" priority="4" resolution="10203" status="6" created="2019-01-29 16:37:51.0" updated="2019-05-08 17:34:57.0" resolutiondate="2019-05-08 17:34:57.0" votes="0" watches="2" workflowId="48815"> <description><! CDATA {code} $ make clean && make peer docker images --quiet --filter=reference='hyperledger/fabric-peer:amd64-2.0.0-snapshot-*' | xargs docker rmi -f docker images --quiet --filter=reference='hyperledger/fabric-orderer:amd64-2.0.0-snapshot-*' | xargs docker rmi -f docker images --quiet --filter=reference='hyperledger/fabric-baseos:amd64-2.0.0-snapshot-*' | xargs docker rmi -f docker images --quiet --filter=reference='hyperledger/fabric-ccenv:amd64-2.0.0-snapshot-*' | xargs docker rmi -f docker images --quiet --filter=reference='hyperledger/fabric-buildenv:amd64-2.0.0-snapshot-*' | xargs docker rmi -f docker images --quiet --filter=reference='hyperledger/fabric-tools:amd64-2.0.0-snapshot-*' | xargs docker rmi -f make: *** No rule to make target `.build/bin/peer', needed by `peer'.  Stop. {code}  Basically, every target listed in the header of the Makefile should be usable after a clean or removed from the list.  {code} # This makefile defines the following targets # #   - all (default) - builds all targets and runs all non-integration tests/checks #   - checks - runs all non-integration tests/checks #   - desk-check - runs linters and verify to test changed packages #   - configtxgen - builds a native configtxgen binary #   - configtxlator - builds a native configtxlator binary #   - cryptogen  -  builds a native cryptogen binary #   - idemixgen  -  builds a native idemixgen binary #   - peer - builds a native fabric peer binary #   - orderer - builds a native fabric orderer binary #   - release - builds release packages for the host platform #   - release-all - builds release packages for all target platforms #   - unit-test - runs the go-test based unit tests #   - verify - runs unit tests for only the changed package tree #   - profile - runs unit tests for all packages in coverprofile mode (slow) #   - test-cmd - generates a "go test" string suitable for manual customization #   - gotools - installs go tools like golint #   - linter - runs all code checks #   - check-deps - check for vendored dependencies that are no longer used #   - license - checks go source files for Apache license header #   - native - ensures all native binaries are available #   - docker -clean  - ensures all docker images are available /cleaned  #   - docker-list - generates a list of docker images that 'make docker' produces #   - peer-docker -clean  - ensures the peer container is available /cleaned  #   - orderer-docker -clean  - ensures the orderer container is available /cleaned  #   - tools-docker -clean  - ensures the tools container is available /cleaned  #   - protos - generate all protobuf artifacts based on .proto files #   - clean - cleans the build area #   - clean-all - superset of 'clean' that also removes persistent state #   - dist-clean - clean release packages for all target platforms #   - unit-test-clean - cleans unit test state (particularly from docker) #   - basic-checks - performs basic checks like license, spelling, trailing spaces and linter #   - enable_ci_only_tests - triggers unit-tests in downstream jobs. Applicable only for CI not to #     use in the local machine. #   - docker-thirdparty - pulls thirdparty images (kafka,zookeeper,couchdb) #   - docker-tag-latest - re-tags the images made by 'make docker' with the :latest tag #   - docker-tag-stable - re-tags the images made by 'make docker' with the :stable tag #   - help-docs - generate the command reference docs {code}  ></description> </Issue>
