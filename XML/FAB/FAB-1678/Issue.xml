<Issue id="14105" key="FAB-1678" number="1678" project="10002" reporter="jyellick" assignee="jyellick" creator="jyellick" type="10001" summary="As an admin and developer, I need a way to inspect and create configuration transactions" priority="3" resolution="10000" status="6" created="2017-01-16 20:45:15.0" updated="2018-07-20 18:54:00.0" resolutiondate="2017-06-03 05:58:47.0" votes="0" watches="7" workflowId="37056"> <description><! CDATA This story is to start working on the tools necessary for admins to work with configuration transactions, not only creating them, but also inspecting and signing them.  There are four principal components to this issue.  1. Bidirectional proto <=> deep JSON translation:  This is at the heart of the issue, and provides both a human readable, and human editable version of the configuration.  Because the configuration embeds other message types, like {{Envelope}} it is most natural to make this a generic proto <=> deeply unmarshaled JSON.  This means that the output should, to the extent possible, contain no binary marshaled fields.  For instance, a {{Block}} should show nested {{Envelope}} messages in its data, and these messages should show {{Payload}} messages, which should in tern show the unmarshaled version of the {{Data}} field, etc.  Correspondingly, it is important that this mapping be able to be returned into the native proto form.  Note, that the bidirectional marshaling can preserve meaning only, not literal bytes, as proto marshaling is non-deterministic.  2. A Config + Config -> ConfigUpdate utility:  This will allow the user to submit an original config and a modified config to produce a config update.  This will combine naturally with (1), so that the user may view the configuration in a human readable way, edit it, compute the update, and then see the update in a human readable form.  3. A REST API which exposes (1) and (2).  4. A CLI which exposes (1) and (2)  Finally, we may wish to add one additional API to (3)/(4), namely the ability to submit a Config, a Config Update, and have the server do a simulation of the result (including any errors produced because of insufficient signatures, or bad form).  For those interested in getting a jump on interacting with the deep JSON representation, please see a (unusually verbose) config update message attached as output_pretty.txt.  ></description> </Issue>
