<Action id="36800" issue="25200" author="kchristidis" type="comment" body="Alexander, thanks for submitting this. There does not seem to be an issue with the orderer as best as I can tell. The line that you see in the orderer log is what gets posted when the broadcast session that is established between the client and the ordering service is terminated." created="2017-12-12 16:39:21.0" updateauthor="kchristidis" updated="2017-12-12 16:42:39.0"/>
<Action id="36801" issue="25200" author="alexanderlhicks" type="comment" body="Thanks for taking a look. I agree that the issue is not necessarily with the orderer, if it cannot &quot;read from stream&quot; it&apos;s likely because of an issue with the stream. However the peer logs don&apos;t seem to contain errors or warning which makes it hard to see where it is coming from." created="2017-12-12 16:58:55.0" updateauthor="alexanderlhicks" updated="2017-12-12 16:58:55.0"/>
<Action id="36802" issue="25200" author="kchristidis" type="comment" body="Can I suggest my usual approach? Try to go for the simplest possible network at first. One org with two peers, a solo orderer. See if you can deploy, instantiate, invoke, and query without issues. Then start iterating, making your network more complicated (and closer to your final setup), one step at a time. Let us know what is the precise change that is bringing about the issue and we can take it from there." created="2017-12-12 17:06:02.0" updateauthor="kchristidis" updated="2017-12-12 17:06:02.0"/>
<Action id="37018" issue="25200" author="alexanderlhicks" type="comment" created="2017-12-12 23:28:26.0" updateauthor="alexanderlhicks" updated="2017-12-12 23:28:26.0"> <body><! CDATA That seems like a good idea. I'll try this tomorrow.  For reference everything worked fine on a dev network (running everything on one machine), i suspect the issue arises when trying to communicate between VMs. I rebuilt the network and the same rpc error appears when creating channels, installing chaincode etc... Although the channels are created and the chaincode does get installed and instantiate to some extent since I can invoke it on channels. I figured I should provide some more information on how I set things up in case there's something obvious I missed:  I have 7 VMs: one for each peer of each organization, a kafka VM, an orderer VM and a client VM from which I execute comands.  Crypto material is generated the standard way using cryptogen and copied on each VM (just a git pull). I then start each peer using a script in the form of {code:java} CORE_PEER_ENDORSER_ENABLED=true \ CORE_PEER_PROFILE_ENABLED=true \ CORE_PEER_ADDRESS=peer:7051 \ CORE_PEER_CHAINCODELISTENADDRESS=peer:7052 \ CORE_PEER_ID=peer \ CORE_PEER_LOCALMSPID=PeersMSP \ CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer:7051 \ CORE_PEER_GOSSIP_USELEADERELECTION=true \ CORE_PEER_GOSSIP_ORGLEADER=false \ CORE_PEER_TLS_ENABLED=false \ CORE_PEER_TLS_KEY_FILE=pathto/crypto-config/peerOrganizations/Peers/users/Admin@Peers/tls/server.key \ CORE_PEER_TLS_CERT_FILE=pathto/crypto-config/peerOrganizations/Peers/users/Admin@Peers/tls/server.crt \ CORE_PEER_TLS_ROOTCERT_FILE=pathto/crypto-config/peerOrganizations/Peers/users/Admin@Peers/tls/ca.crt \ CORE_PEER_TLS_SERVERHOSTOVERRIDE=agent \ CORE_VM_DOCKER_ATTACHSTDOUT=true \ CORE_PEER_MSPCONFIGPATH=pathto/crypto-config/peerOrganizations/Peers/users/Admin@Peers/msp \ peer node start --peer-defaultchain=false {code} where the peer address corresponds to an ip mapping in /etc/hosts (which is on every VM).  I then start the kafka service using docker-compose up, with the docker-compose file as follows: {code:java} version: '2' services:     zookeeper:         image: hyperledger/fabric-zookeeper:x86_64-1.0.5         ports:             - "2181"             - "2888"             - "3888"     kafka:         image: hyperledger/fabric-kafka:x86_64-1.0.5         restart: always         environment:             - KAFKA_ADVERTISED_HOST_NAME=ip of the VM here             - KAFKA_ADVERTISED_PORT=9092             - KAFKA_BROKER_ID=0             - KAFKA_MESSAGE_MAX_BYTES=103809024             - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024             - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false             - KAFKA_NUM_REPLICA_FETCHERS=1             - KAFKA_DEFAULT_REPLICATION_FACTOR=1             - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181         ports:             - "9092:9092"         depends_on:             - zookeeper {code} finally I start the orderer using a script similar to the peer script: {code:java} ORDERER_GENERAL_LOGLEVEL=debug \ ORDERER_GENERAL_LISTENADDRESS=0.0.0.0 \ ORDERER_GENERAL_GENESISMETHOD=file \ ORDERER_GENERAL_GENESISFILE=genesis.block \ ORDERER_GENERAL_LOCALMSPID=OrdererMSP \ ORDERER_GENERAL_LOCALMSPDIR=pathto/crypto-config/ordererOrganizations/Orderer/users/Admin@Orderer/msp \ ORDERER_GENERAL_TLS_ENABLED=false \ ORDERER_GENERAL_TLS_PRIVATEKEY=pathto/crypto-config/ordererOrganizations/Orderer/orderers/Orderer.Orderer/tls/server.key \ ORDERER_GENERAL_TLS_CERTIFICATE=pathto/crypto-config/ordererOrganizations/Orderer/orderers/Orderer.Orderer/tls/server.crt \ ORDERER_GENERAL_TLS_ROOTCAS= pathto/crypto-config/ordererOrganizations/Orderer/orderers/Orderer.Orderer/tls/ca.crt, pathto/crypto-config/peerOrganizations/Peers/users/Admin@Peers/tls/ca.crt, similarly for every other peer organization  \ CONFIGTX_ORDERER_BATCHTIMEOUT=1s \ CONFIGTX_ORDERER_ORDERERTYPE=kafka \ CONFIGTX_ORDERER_KAFKA_BROKERS= kafka:9092  \ orderer {code} I then run a script with the standard create/join channel and install/instantiate chaincode commands for the relevant peers.  My configtx and crypto-config files look like: {code:java} --- Profiles:      OrdererGenesis:         Orderer:             <<: *OrdererDefaults             Organizations:                 - *Orderer         Consortiums:             SampleConsortium:                 Organizations:                     - *Agents                     - *DataProviders                     - *Auditors                     - *Users      MainChannel:         Consortium: SampleConsortium         Application:             <<: *ApplicationDefaults             Organizations:                 - *Peers                 - *other orgs     AgentDpChannel:         Consortium: SampleConsortium         Application:             <<: *ApplicationDefaults             Organizations:                 - *Peers                 - *subset of other orgs Organizations:     - &Orderer         Name: Orderer         ID: OrdererMSP         MSPDir: /home/ubuntu/verifiable-access-code/HLF-network/crypto-config/ordererOrganizations/Orderer/msp/         AdminPrincipal: Role.ADMIN      - &Peers         Name: Peers         ID: PeersMSP         MSPDir: pathto/crypto-config/peerOrganizations/Agents/msp/         AdminPrincipal: Role.ADMIN         AnchorPeers:             - Host: agent               Port: 7051     similarly for the other orgs   Orderer: &OrdererDefaults     OrdererType: kafka     Addresses:         - orderer:7050     BatchTimeout: 5s     BatchSize:         MaxMessageCount: 30         AbsoluteMaxBytes: 99 MB         PreferredMaxBytes: 512 KB     MaxChannels: 0     Kafka:         Brokers:             - kafka:9092     Organizations:   Application: &ApplicationDefaults      Organizations: {code} {code:java}  OrdererOrgs:   - Name: Orderer     Domain: Orderer     Specs:       - Hostname: Orderer  PeerOrgs:   - Name: Peers     Domain: Peers     Users:       Count: 0 similar for other orgs   {code} Let me know if this highlights anything.  Cheers!  ></body> </Action>
<Action id="37049" issue="25200" author="alexanderlhicks" type="comment" created="2017-12-13 14:26:59.0" updateauthor="alexanderlhicks" updated="2017-12-13 16:11:36.0"> <body><! CDATA Update: is it possible that the issue stems from docker containers? I use a script to launch my peers rather than a docker container, but it also appears that the containers for my chaincode have no IP address?     edit: actually it seems reasonable that the chaincode containers should not have an IP address.  ></body> </Action>
<Action id="37093" issue="25200" author="alexanderlhicks" type="comment" body="Another update: I suspect it&apos;s some form of networking issue, I tried running the ordering service on the same VM as the one I invoked some chaincode with but the same error happened. So I suspect it might have to do with the docker containers? Although there is clearly is some information flowing between then machines, clearly the rpc stream is not going through. Is there any way to try and tweak the container settings with regards to that?" created="2017-12-14 14:17:37.0" updateauthor="alexanderlhicks" updated="2017-12-14 14:17:37.0"/>
<Action id="38245" issue="25200" author="mastersingh24" type="comment" created="2018-01-06 13:16:40.0" updateauthor="mastersingh24" updated="2018-01-06 13:16:40.0"> <body><! CDATA  ~alexanderlhicks   You can try setting  {code:java} CORE_LOGGING_GRPC=debug {code} for the peer and the cli  and  {code:java} ORDERER_LOGGING_GRPC=debug {code} for the orderer    ></body> </Action>
<Action id="38256" issue="25200" author="alexanderlhicks" type="comment" created="2018-01-07 20:57:42.0" updateauthor="alexanderlhicks" updated="2018-01-07 20:57:42.0"> <body><! CDATA  ~mastersingh24  Thanks for the suggestion, unfortunately it seems like this doesn't highlight anything new.  The error is still an error reading from the rpc stream which happens when the orderer wants to enqueue the message into the batch, and in the case of a state update when it wants to broadcast the block. Clearly there's an issue with networking/grpc there but nothing shows up with the grpc commands given above. The orderer also clearly receives information about the transactions as it does everything before and after ( ! ) the rpc errors seemingly fine. I'm wondering if it's possibly whatever should be transmitted with grpc that isn't right and causing the rpc stream to not be readable? I've previously tried using different block formats (file/json) but with no success.  ></body> </Action>
