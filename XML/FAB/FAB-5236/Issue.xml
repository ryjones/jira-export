<Issue id="19124" key="FAB-5236" number="5236" project="10002" reporter="jyellick" assignee="guoger" creator="jyellick" type="10001" summary="Add orderer performance tests" priority="2" resolution="10000" status="6" created="2017-07-10 17:02:54.0" updated="2018-07-20 18:56:30.0" resolutiondate="2017-07-26 14:26:45.0" votes="0" watches="3" workflowId="39406"> <description><! CDATA Today, all of our performance testing for the orderer is being done by spinning up an orderer process, bound to a port, then having external clients direct traffic to the ordering service.  This has been fine to get an overall impression of performance with the ordering code, but it's very time consuming and difficult to gauge the effect of performance improvements and to catch performance regressions.  Completion of this story should require the following: # Refactor {{main.go}} so that the server can be started without binding to a real address, and instead supply a mock structure to register the gRPC services with. # Create mock {{Broadcast}} clients which will submit properly signed messages via the {{Broadcast}} API. The number of clients should be arbitrary, and the message sizes should also be configurable, as should the desired channel. # Create mock {{Deliver}} clients which operate similarly to the {{Broadcast}} ones. # Create performance testsÂ that leverage 1-3 to cover a variety of scenarios. Some which immediately come to mind: ** 1 Broadcast and 1 Deliver, each going as fast as possible on a single channel ** many Broadcast and 1 Deliver on a single channel ** many Broadcast and many Deliver on a single channel ** 1 Broadcast and 1 Deliver for each of many channels ** many Broadcast and many Deliver for each of many channels ** (a)-(e) each with small, medium, and large messages  ></description> </Issue>
