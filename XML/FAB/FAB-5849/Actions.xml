<Action id="30041" issue="20300" author="suryalnvs" type="comment" body="Attached the lagging peer log" created="2017-08-21 13:49:36.0" updateauthor="suryalnvs" updated="2017-08-21 13:49:36.0"/>
<Action id="30253" issue="20300" author="yacovm" type="comment" created="2017-08-28 14:17:47.0" updateauthor="yacovm" updated="2017-08-28 14:17:47.0"> <body><! CDATA Hi.  Can this be reproduced with using solely docker-compose? Can you please provide an adequate docker-compose file and a script that reproduces the problem?  ></body> </Action>
<Action id="30276" issue="20300" author="suryalnvs" type="comment" created="2017-08-28 19:41:17.0" updateauthor="suryalnvs" updated="2017-08-28 19:41:17.0"> <body><! CDATA  ~yacovm  We are using multihost setup using docker swarm. We do not use any docker-compose file for this setup.   For more details, you can refer https://github.com/suryalnvs/multihost_swarm_1.0.1/  Please let me know, if you need more information.    ></body> </Action>
<Action id="30278" issue="20300" author="yacovm" type="comment" body="OK, assuming I install these  prerequisites|https://github.com/suryalnvs/startup_scripts/blob/master/setup_prereq.sh  for docker-swarm, can you please provide me with a script that if I run it (on a single VM) - I can reproduce the problem? " created="2017-08-28 20:52:05.0" updateauthor="yacovm" updated="2017-08-28 20:52:27.0"/>
<Action id="30555" issue="20300" author="c0rwin" type="comment" created="2017-09-06 11:16:26.0" updateauthor="c0rwin" updated="2017-09-06 11:16:26.0"> <body><! CDATA > Establish a network using docker swarm with multihost configuration. Refer to attached configuration files.  Can you please attach those files, since only attachment I can see is the errors logs file.   ></body> </Action>
<Action id="30564" issue="20300" author="scottz" type="comment" created="2017-09-06 15:25:51.0" updateauthor="scottz" updated="2017-09-06 15:25:51.0"> <body><! CDATA  ~C0rWin   Note Surya provided a link to the files:  you can refer  https://github.com/suryalnvs/multihost_swarm_1.0.1/  where you can see how the peers are configured on the multiple hosts.  I suppose one could also try reproducing on a single host, without using swarm. I would suggest reducing other factors as much as possible, such as using solo orderer and just 2 peers in one org (and create and join the second peer as a nonleader only AFTER you executed 20000 transactions on the first). We did not try to reproduce it that way, but it might be sufficient for debugging the problem.  ></body> </Action>
<Action id="30579" issue="20300" author="yacovm" type="comment" created="2017-09-06 19:45:19.0" updateauthor="yacovm" updated="2017-09-06 19:45:19.0"> <body><! CDATA {quote}I suppose one could also try reproducing on a single host, without using swarm. I would suggest reducing other factors as much as possible, such as using solo orderer and just 2 peers in one org (and create and join the second peer as a nonleader only AFTER you executed 20000 transactions on the first). We did not try to reproduce it that way, but it might be sufficient for debugging the problem.{quote}  Thanks for the tips, Scott. Ruling out factors that don't effect the problem helps zooming in on the problem itself.  Can you perhaps help  ~suryalnvs  with providing us a script that reproduces the bug?   ></body> </Action>
<Action id="30625" issue="20300" author="muralisr" type="comment" body=" ~scottz  just following on  ~yacovm  request above... did we provide a script to isolate / recreate ?" created="2017-09-07 17:32:09.0" updateauthor="muralisr" updated="2017-09-07 17:32:09.0"/>
<Action id="30645" issue="20300" author="scottz" type="comment" body=" ~suryalnvs  is trying to develop a script that runs on a single machine and retest. Then he will share it." created="2017-09-07 19:33:24.0" updateauthor="scottz" updated="2017-09-07 19:33:24.0"/>
<Action id="30778" issue="20300" author="suryalnvs" type="comment" created="2017-09-12 19:26:11.0" updateauthor="suryalnvs" updated="2017-09-15 13:34:55.0"> <body><! CDATA I was able to reproduce this issue and attaching the tar file for the docker-compose which launches the network on a single machine. untar the docker-compose.tar.gz and run the following command from fabric-docker-compose-svt directory. {code:java} ./network_setup.sh -s -f docker-compose-e2e.yaml {code} and used PTE tool to do the create, join, install, instantiate and sending invokes.  Launched the network, created the channel, joined only peer0.org1.example.com to the channel, installed and instantiated the chaincode. Waited for accumulating around 8000 blocks and then joined the peer1.org1.example.com, then observed the crash after some time(around 5 to 7 minutes).     ></body> </Action>
<Action id="30922" issue="20300" author="yacovm" type="comment" created="2017-09-15 13:31:32.0" updateauthor="yacovm" updated="2017-09-15 13:31:32.0"> <body><! CDATA I don't see such a file named network_launch.sh in the tar.gz file.  Is it possible that you provide a script that performs the instructions you listed to produce the problem?   ></body> </Action>
<Action id="30925" issue="20300" author="suryalnvs" type="comment" created="2017-09-15 13:56:24.0" updateauthor="suryalnvs" updated="2017-09-15 13:56:24.0"> <body><! CDATA  ~yacovm  Apologies, it is network_setup.sh, I updated the command in my previous comment as well.  Sure, I will work on it and will update with a single script to perform all the steps to this bug.  ></body> </Action>
<Action id="30932" issue="20300" author="suryalnvs" type="comment" created="2017-09-15 20:03:40.0" updateauthor="suryalnvs" updated="2017-09-15 20:10:11.0"> <body><! CDATA  ~yacovm  I have attached 5849.tar.gz with all the necessary compose files and PTE tool to drive the test. Untar the file and run the follow command which does start the network, create the channel, join peer0.org1.example.com to channel, install and instantiate the chaincode, and then launch a longrun of invokes on peer0.org1.example.com for about 6 hrs (to generate the huge number of blocks). {code:java} ./5849_replication.sh -m up  {code} Then join the 2nd peer of org1 to channel by running the following command {code:java} ./5849_replication.sh -m join {code} To repeat the process of rejoining the peer1.org1.example.com to channel, you can use the above the command which does killing the peer1.org1.example.com, restarts it and then joins the peer to channel.  To remove the network, run the following the command {code:java} ./5849_replication.sh -m down {code} Please let me know, if you any have any questions.  ></body> </Action>
<Action id="30954" issue="20300" author="yacovm" type="comment" created="2017-09-16 14:25:22.0" updateauthor="yacovm" updated="2017-09-16 14:25:22.0"> <body><! CDATA you have any idea what I need to do to make it work?   {code} Launching the network WARNING: The ENABLE_TLS variable is not set. Defaulting to a blank string. Removing network fabricdockercomposesvt_default WARNING: Network fabricdockercomposesvt_default not found. ---- No containers available for deletion ---- ---- No images available for deletion ---- mychannel  Using cryptogen -> /opt/gopath/src/github.com/hyperledger/fabric/build/bin/cryptogen  ########################################################## ##### Generate certificates using cryptogen tool ######### ########################################################## org1.example.com org2.example.com  Using configtxgen -> /opt/gopath/src/github.com/hyperledger/fabric/build/bin/configtxgen ########################################################## #########  Generating Orderer Genesis block ############## ########################################################## 2017-09-16 09:43:47.251 EDT  common/tools/configtxgen  main -> INFO 001 Loading configuration 2017-09-16 09:43:47.283 EDT  common/tools/configtxgen  doOutputBlock -> INFO 002 Generating genesis block 2017-09-16 09:43:47.284 EDT  common/tools/configtxgen  doOutputBlock -> INFO 003 Writing genesis block  ################################################################# ### Generating channel configuration transaction 'channel.tx' ### ################################################################# 2017-09-16 09:43:47.304 EDT  common/tools/configtxgen  main -> INFO 001 Loading configuration 2017-09-16 09:43:47.308 EDT  common/tools/configtxgen  doOutputChannelCreateTx -> INFO 002 Generating new channel configtx 2017-09-16 09:43:47.308 EDT  common/tools/configtxgen  doOutputChannelCreateTx -> INFO 003 Writing new channel tx  ################################################################# ### Generating anchor peer update for Org1MSP/Org2MSP/Org3MSP ### ################################################################# 2017-09-16 09:43:47.327 EDT  common/tools/configtxgen  main -> INFO 001 Loading configuration 2017-09-16 09:43:47.330 EDT  common/tools/configtxgen  doOutputAnchorPeersUpdate -> INFO 002 Generating anchor peer update 2017-09-16 09:43:47.331 EDT  common/tools/configtxgen  doOutputAnchorPeersUpdate -> INFO 003 Writing anchor peer update 2017-09-16 09:43:47.350 EDT  common/tools/configtxgen  main -> INFO 001 Loading configuration 2017-09-16 09:43:47.354 EDT  common/tools/configtxgen  doOutputAnchorPeersUpdate -> INFO 002 Generating anchor peer update 2017-09-16 09:43:47.354 EDT  common/tools/configtxgen  doOutputAnchorPeersUpdate -> INFO 003 Writing anchor peer update   Creating network "fabricdockercomposesvt_default" with the default driver Creating zookeeper0 Creating peer0.org1.example.com Creating zookeeper2 Creating zookeeper1 Creating ca_peerOrg1 Creating peer0.org2.example.com Creating peer1.org2.example.com Creating ca_peerOrg2 Creating peer1.org1.example.com Creating kafka3 Creating kafka0 Creating kafka1 Creating kafka2 Creating orderer1.example.com Creating orderer0.example.com Creating orderer2.example.com Error: No such container: cli Installing node modules for fabric-sdk-node fabric-sdk-node@1.0.2 /home/ibmadmin/5849/fabric-sdk-node ├── node-pre-gyp@0.6.36 └── singly-linked-list@0.2.7  extraneous  npm WARN optional Skipping failed optional dependency /chokidar/fsevents: npm WARN notsup Not compatible with your operating system or architecture: fsevents@1.1.2 fabric-sdk-node@1.0.2 /home/ibmadmin/5849/fabric-sdk-node ├── node-pre-gyp@0.6.36 └── singly-linked-list@0.2.7  extraneous  npm WARN optional Skipping failed optional dependency /chokidar/fsevents: npm WARN notsup Not compatible with your operating system or architecture: fsevents@1.1.2  09:44:29  Working directory changed to ~/5849/fabric-sdk-node  #################################################### # debug log: /tmp/hfc/test-log/debug.log ####################################################  /home/ibmadmin/5849/fabric-sdk-node/build/tasks/watch.js:6 let gulp = require('gulp'), ^^^  SyntaxError: Block-scoped declarations (let, const, function, class) not yet supported outside strict mode at exports.runInThisContext (vm.js:53:16) at Module._compile (module.js:374:25) at Object.Module._extensions..js (module.js:417:10) at Module.load (module.js:344:32) at Function.Module._load (module.js:301:12) at Module.require (module.js:354:17) at require (internal/module.js:12:17) at requireDir (/home/ibmadmin/5849/fabric-sdk-node/node_modules/require-dir/index.js:123:33) at Object.<anonymous> (/home/ibmadmin/5849/fabric-sdk-node/gulpfile.js:10:1) at Module._compile (module.js:410:26) at Object.Module._extensions..js (module.js:417:10) at Module.load (module.js:344:32) at Function.Module._load (module.js:301:12) at Module.require (module.js:354:17) at require (internal/module.js:12:17) at Liftoff.handleArguments (/home/ibmadmin/5849/fabric-sdk-node/node_modules/gulp/bin/gulp.js:116:3) mkdir: cannot create directory ‘/opt/gopath/src/sample_cc’: File exists ==============Creating the channel================== ./pte_driver.sh inFile= userInputs/runCases-chan-create-TLS.txt, tStart=0 iPTE=0 sdk type supported: sdk=node sdk type unknown: #sdk=node sdk type unknown: #sdk=node Node Array: userInputs/samplecc-chan1-create-TLS.json executing 1 node requests iPTE: 0, nInstances: 1, tStart: 1505569494285 execution: userInputs/samplecc-chan1-create-TLS.json no python requests no java requests module.js:328 throw err; ^  Error: Cannot find module '/home/ibmadmin/5849/fabric-sdk-node/node_modules/grpc/src/node/extension_binary/node-v46-linux-x64/grpc_node.node' at Function.Module._resolveFilename (module.js:326:15) at Function.Module._load (module.js:277:25) at Module.require (module.js:354:17) at require (internal/module.js:12:17) at Object.<anonymous> (/home/ibmadmin/5849/fabric-sdk-node/node_modules/grpc/src/node/src/grpc_extension.js:30:15) at Module._compile (module.js:410:26) at Object.Module._extensions..js (module.js:417:10) at Module.load (module.js:344:32) at Function.Module._load (module.js:301:12) at Module.require (module.js:354:17) at require (internal/module.js:12:17) {code}   ></body> </Action>
<Action id="30992" issue="20300" author="suryalnvs" type="comment" created="2017-09-18 19:08:44.0" updateauthor="suryalnvs" updated="2017-09-18 20:05:42.0"> <body><! CDATA From the error, I think it is something to do with the node version. In my case, I tested the script on multiple machines with node version 6.9.5 and npm version 3.10.10 to make sure, it worked as expected.  We are working with Yacov in RocketChat,  we suggested the following to generate the blocks faster than given in the initial scripts and this may be useful for anybody who wants to reproduce faster.  Change the {code:java} "nProcPerOrg": "4" {code} to {code:java} "nProcPerOrg": "8" {code} in  {code:java} fabric-sdk-node/test/v1performance/userInputs/samplecc-chan1-longrun1-i-TLS.json {code} and then restart the test.  ></body> </Action>
<Action id="31117" issue="20300" author="yacovm" type="comment" created="2017-09-23 13:41:21.0" updateauthor="yacovm" updated="2017-09-24 08:15:34.0"> <body><! CDATA I ran the PTE as you advised and generated 8000 blocks:    {code:java} docker logs -f peer0.org1.example.com 2>&1 | grep "Created"  2017-09-23 13:04:29.623 UTC  gossip/state  commitBlock -> DEBU 310d5 Channel  mychannel : Created block  8005  with 100 transaction(s) 2017-09-23 13:04:30.239 UTC  kvledger  CommitWithPvtData -> INFO 310ee Channel  mychannel : Created block  8006  with 100 transaction(s) 2017-09-23 13:04:30.251 UTC  gossip/state  commitBlock -> DEBU 310f0 Channel  mychannel : Created block  8006  with 100 transaction(s) 2017-09-23 13:04:32.320 UTC  kvledger  CommitWithPvtData -> INFO 3111c Channel  mychannel : Created block  8007  with 93 transaction(s) 2017-09-23 13:04:32.327 UTC  gossip/state  commitBlock -> DEBU 3111e Channel  mychannel : Created block  8007  with 93 transaction(s) {code}    Next I executed the join: *./5849_replication.sh -m join* {code:java} info:  PTE 0 main :  joinChannel  Successfully joined peers in (mychannel:Org1MSP) {code}    Now I tracked the logs of *peer1.org1.example.com* and it was replicating blocks from peer0.org1.example.com in a speed of 5 blocks per second.  After about 700 blocks, linux killed it: {quote} 2597959.961461  Memory cgroup out of memory: Kill process 6044 (peer) score 526 or sacrifice child  2597959.961467  Killed process 6044 (peer) total-vm:3745532kB, anon-rss:2095428kB, file-rss:8424kB {quote}    I think this happens because although the state transfer attempts to fetch from a peer 10 blocks at a time, it does so repeatedly for all the missing blocks it has (8000) and the blocks are simply enqueued in the payload buffer.  Now, the problem here is that the commit is much slower than state transfer so we have a process (state transfer) that pours blocks into the payload buffer in a much higher rate than the process that consumes the payload buffer (the commit of the blocks and especially their validation, which is (still) single-threaded and involves expensive crypto computations)) so the payload buffer piles up and eventually the memory explodes.  I uploaded a fix:   https://gerrit.hyperledger.org/r/#/c/13763/   1)  Do you want to check and see if it fixes it?   2) Thanks a lot for the find!  ></body> </Action>
<Action id="31120" issue="20300" author="yacovm" type="comment" created="2017-09-24 11:21:01.0" updateauthor="yacovm" updated="2017-09-24 11:21:01.0"> <body><! CDATA BTW I tested it and I think it works:  Peer1 is catching up while peer0 is still receiving blocks: {code:java} 2017-09-24 11:18:52.764 UTC  gossip/state  commitBlock -> DEBU 7943 Channel  mychannel : Created block  1343  with 100 transaction(s) 2017-09-24 11:18:52.957 UTC  kvledger  CommitWithPvtData -> INFO 794b Channel  mychannel : Created block  1344  with 100 transaction(s) 2017-09-24 11:18:52.977 UTC  gossip/state  commitBlock -> DEBU 7956 Channel  mychannel : Created block  1344  with 100 transaction(s) 2017-09-24 11:18:53.228 UTC  kvledger  CommitWithPvtData -> INFO 795e Channel  mychannel : Created block  1345  with 100 transaction(s) 2017-09-24 11:18:53.235 UTC  gossip/state  commitBlock -> DEBU 7960 Channel  mychannel : Created block  1345  with 100 transaction(s) 2017-09-24 11:18:53.410 UTC  kvledger  CommitWithPvtData -> INFO 797f Channel  mychannel : Created block  1346  with 100 transaction(s) 2017-09-24 11:18:53.417 UTC  gossip/state  commitBlock -> DEBU 7981 Channel  mychannel : Created block  1346  with 100 transaction(s) 2017-09-24 11:18:53.572 UTC  kvledger  CommitWithPvtData -> INFO 7989 Channel  mychannel : Created block  1347  with 100 transaction(s) 2017-09-24 11:18:53.579 UTC  gossip/state  commitBlock -> DEBU 798b Channel  mychannel : Created block  1347  with 100 transaction(s) 2017-09-24 11:18:53.828 UTC  kvledger  CommitWithPvtData -> INFO 799c Channel  mychannel : Created block  1348  with 100 transaction(s) {code}  {code} USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND root     11785  0.9  0.1 477232  6760 ?        Ssl  05:26   1:03 peer node start --peer-defaultchain=false root     12382 63.1 15.4 1496704 625160 ?      Rsl  05:26  71:38 peer node start --peer-defaultchain=false root     12681  0.9  0.1 264232  7860 ?        Ssl  05:26   1:04 peer node start --peer-defaultchain=false root     15650  7.1  0.1 429840  5372 ?        Ssl  05:28   7:58 chaincode -peer.address=peer0.org1.example.com:7052 root     16249 58.1 19.9 1413888 808964 ?      Ssl  07:12   4:22 peer node start --peer-defaultchain=false {code}  The memory consumption of the peers is around 1.4GB which is what it's usually is.  ></body> </Action>
<Action id="31124" issue="20300" author="suryalnvs" type="comment" body="Thank you  ~yacovm . I will rerun the test with the fix and will update the result in here." created="2017-09-25 00:49:46.0" updateauthor="suryalnvs" updated="2017-09-25 00:49:46.0"/>
<Action id="31230" issue="20300" author="suryalnvs" type="comment" body="Retested and working as expected without crashing with the fix." created="2017-09-28 12:53:58.0" updateauthor="suryalnvs" updated="2017-09-28 12:53:58.0"/>
