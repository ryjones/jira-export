<Action id="48406" issue="31898" author="kchristidis" type="comment" created="2018-08-03 20:48:49.0" updateauthor="kchristidis" updated="2018-08-07 14:51:31.0"> <body><! CDATA Jay: If something's missing/wrong please edit accordingly, or let me know and I'll correct it.  For this story (FAB-11474), routing messages from {{raft.Node}} to the communication layer (FAB-11161) is not needed. I do understand this is a last-minute change however, two weeks into development. If you've written code for this, keep it in. Likewise, you have most likely written code that checks whether the current FSM is the leader and invokes the  Submit RPC the via the comm layer (FAB-11161); keep that as well, if that's the case - it will come handy soon.  ></body> </Action>
<Action id="48633" issue="31898" author="kchristidis" type="comment" body=" ~guoger : Is the CR out there WIP, or should this be changed to &quot;In Review&quot;?" created="2018-08-09 14:32:22.0" updateauthor="kchristidis" updated="2018-08-09 14:32:22.0"/>
<Action id="48700" issue="31898" author="guoger" type="comment" created="2018-08-10 10:47:10.0" updateauthor="guoger" updated="2018-08-10 10:47:10.0"> <body><! CDATA CR:  https://gerrit.hyperledger.org/r/c/24919/       ~kchristidis  I just saw your comment. Reverted CR to implement only bare minimum FSM: no communication, no WAL, no Snapshot, only single node support. I'll push follow-up patches separately.  ></body> </Action>
<Action id="48795" issue="31898" author="guoger" type="comment" created="2018-08-13 16:10:44.0" updateauthor="guoger" updated="2018-08-13 16:11:16.0"> <body><! CDATA we also need to notify {{Chain}} about leadership change, to avoid following case: - config seq is 1 - nodeA is leader. It has 2 txs in blockcutter:  {normalMsg, configSeq: 1} {normalMsg, configSeq: 1} - nodeA loses leadership, nodeB becomes leader - nodeB receives msg {configMsg, configSeq: 1}, it cuts a block and apply - config seq now moves to 2 - nodeB loses leadership, nodeA becomes leader again - nodeA cuts two _invalid_ messages into block due to timeout, and we have a problem.  _Specific signal design is not decided yet and will be added here_  ></body> </Action>
<Action id="48862" issue="31898" author="kchristidis" type="comment" body="Remind me again: what happens when {{Propose}} is invoked?" created="2018-08-14 17:30:52.0" updateauthor="kchristidis" updated="2018-08-14 17:30:52.0"/>
<Action id="48869" issue="31898" author="c0rwin" type="comment" created="2018-08-14 22:35:10.0" updateauthor="c0rwin" updated="2018-08-14 22:35:10.0"> <body><! CDATA From design doc:  {quote} We interact with this FSM in three ways:  Via a handling (infinite) loop, where we make sure to (a) increment its internal logical clock, and (b) read from it data that we need to save to disk and/or replicate to other nodes in the cluster. Via the provided Propose / ProposeConfChange methods for messages that the application wishes to have ordered (in our case —as noted above— these are blocks) Via the provided Step method for messages generated by other Raft nodes. {quote}  it seems we deviate a bit from the design as updated description and update API doesn't contains {{ProposeConfChange}} method,  ~guoger  have you drop it on purpose or will you add it later on?  /cc  ~kchristidis   ></body> </Action>
<Action id="48882" issue="31898" author="kchristidis" type="comment" body=" ~C0rWin : Remember that configuration comes later on (Weeks 5-7 (Cell G3) in  the spreadsheet|https://docs.google.com/spreadsheets/d/1R02-xjdl4hNw90kN4NZ1kX0f4QoIYn51_1UHlwy-GQs/edit#gid=2125670104  and FAB-11161). So for now you should stub it out and let it be a panic/error path." created="2018-08-15 12:43:59.0" updateauthor="kchristidis" updated="2018-08-15 12:43:59.0"/>
<Action id="48883" issue="31898" author="kchristidis" type="comment" created="2018-08-15 12:45:54.0" updateauthor="kchristidis" updated="2018-08-15 12:46:02.0"> <body><! CDATA {quote}Remind me again: what happens when Propose is invoked?{quote}  Looking at  Jay's CR|https://gerrit.hyperledger.org/r/c/24919/12/orderer/consensus/etcdraft/fsm/node.go#137 : {{Propose}} can only be successfully invoked by the channel leader and it wires through to {{raft.Propose}}, i.e. to actually ordering the block via the Raft protocol.  ></body> </Action>
