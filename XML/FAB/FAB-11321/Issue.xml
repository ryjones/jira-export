<Issue id="32223" key="FAB-11321" number="11321" project="10002" reporter="yoheiueda" assignee="yoheiueda" creator="yoheiueda" type="10001" summary="Alleviating lock contention of MSP cache to improve performance (v1.3)" priority="3" resolution="10000" status="6" created="2018-07-26 07:57:59.0" updated="2019-03-06 15:48:39.0" resolutiondate="2018-09-01 12:11:28.0" votes="0" watches="8" workflowId="44213"> <description><! CDATA  I analyzed bottlenecks in Fabric peer code, and identified that the mutex locks in MSP cache cause heavy lock contention when TPS is very high.   https://github.com/hyperledger/fabric/blob/v1.2.0/msp/cache/cache.go#L41-L59   In the current implementation of MSP cache, mutex locks are used to guard LRU lists that hold entries of MSP cache. Every get operation of a LRU list always updates the order of the list, so we need a mutex lock instead of a RW lock to guard the LRU list.  Some approximate LRU algorithms such as second-chance algorithm are known to work with reader-writer locks instead of RW locks. I have a work-in-progress code, and obtained 50% TPS improvement for some workloads. Please see the attached PDF file for more details.  Later, I will post my work-in-progress code to show how it works.        ></description> </Issue>
