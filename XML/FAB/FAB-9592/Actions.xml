<Action id="43184" issue="29515" author="kchristidis" type="comment" body=" ~bpbuch : Can you expand on the approach here? The value returned by {{DefaultKeepAliveOptions}} is of type {{KeepAliveOptions}}. As you know, Go does not support constant structs. Is {{var DefaultKeepAliveOptions}} what you have in mind?" created="2018-04-20 00:23:13.0" updateauthor="kchristidis" updated="2018-04-20 00:23:13.0"/>
<Action id="43212" issue="29515" author="kchristidis" type="comment" body="https://gerrit.hyperledger.org/r/c/20773/" created="2018-04-20 13:53:07.0" updateauthor="kchristidis" updated="2018-04-20 13:53:07.0"/>
<Action id="43213" issue="29515" author="kchristidis" type="comment" body="Narrator: {{var DefaultKeepAliveOptions}} is indeed what he had in mind." created="2018-04-20 13:53:45.0" updateauthor="kchristidis" updated="2018-04-20 13:55:30.0"/>
<Action id="43214" issue="29515" author="bpbuch" type="comment" body="`var DefaultKeepAliveOptions` was what I had in mind. The downside of this approach is that the &quot;default&quot; can still be modified. An alternative would be to extract each of the internal values into constants and build the KeepAliveOptions struct where the default is being referenced.  " created="2018-04-20 14:15:31.0" updateauthor="bpbuch" updated="2018-04-20 14:16:13.0"/>
<Action id="43215" issue="29515" author="kchristidis" type="comment" created="2018-04-20 14:21:46.0" updateauthor="kchristidis" updated="2018-04-20 14:21:46.0"> <body><! CDATA The alternative strikes me as overkill, and ditto on the modification risk for the vars. I think you approach is right and this is a risk we'll have to live with.  Exporting error values as vars seems to be the norm across several Go packages I've looked at, and even the standard library exports {{DefaultClient}} and {{DefaultServeMux}} as vars in the {{http}} package: https://golang.org/pkg/net/http/#pkg-variables  Was looking this up yesterday again and found a thread in Reddit (of all places) where they were discussing something similar: https://www.reddit.com/r/golang/comments/71lf8x/whats_idomatic_go_for_a_struct_const/  ></body> </Action>
