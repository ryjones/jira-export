<Issue id="15150" key="FAB-2583" number="2583" project="10002" reporter="scottz" assignee="suryalnvs" creator="scottz" type="10004" summary="first TX of new broadcast client is NACKed, sometimes" priority="3" resolution="10000" status="6" created="2017-03-02 01:37:18.0" updated="2018-07-20 14:11:51.0" resolutiondate="2017-06-05 00:49:12.0" votes="0" watches="3" workflowId="37653"> <description><! CDATA In some test iterations it works, but occasionally when connecting a new broadcast client to an orderer, it fails to send even one transaction successfully. In this test, we connect 3 producers (broadcast clients) - one to each orderer. Only one fails; the others send msgs just fine.  vagrant@hyperledger-devenv:v0.3.0-64a7ca4:/opt/gopath/src/github.com/hyperledger/fabric/bddtests/regression/go/ote$ go test -run ORD97 ========== OTE testname=ORD-97 TX=100000 Channels=1 Orderers=3 ordererType=kafka kafka-brokers=3 oteSpy=OFF producersPerCh=1  Using DEFAULT channelID = testchainid Finished creating all CONSUMERS clients Finished creating all 3 PRODUCERs at 2017-03-02 01:03:10.385641961 +0000 UTC Broadcast error on TX 1 (the first error for Producer-o0-c0 after 0 ACKs); 2017-03-02 01:03:12.394240667 +0000 UTC, err: Got unexpected status: SERVICE_UNAVAILABLE   Some code snippet:  b := newBroadcastClient(client, chanID) time.Sleep(2 * time.Second) b.broadcast(  byte(fmt.Sprintf("Testing %s %v %s", myName, time.Now(), extraTxData))) err = b.getAck() if err != nil { logger(fmt.Sprintf("Broadcast error on TX %d (the first error for %s after %d ACKs); %v, err: %v", i+1, myName,  (*txSentCntrP), time.Now(), err))  + + + + + Note: I reran the test several times. The logs attached happen to refer to a testrun where the failure occurred at this time:  Broadcast error on TX 1 (the first error for Producer-o0-c0 after 0 ACKs); 2017-03-02 01:32:39.043012559 +0000 UTC, err: Got unexpected status: SERVICE_UNAVAILABLE   ></description> </Issue>
