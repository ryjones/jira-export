<Issue id="45562" key="FAB-18049" number="18049" project="10002" reporter="caod" creator="caod" type="10001" summary="Implement a config transaction bulk operation CLI tool" priority="3" resolution="10001" status="6" created="2020-07-06 13:50:35.0" updated="2020-07-08 15:09:43.0" resolutiondate="2020-07-08 15:09:43.0" votes="0" watches="3" workflowId="59464" archived="N"> <description><! CDATA As a user with a network of many channels, I would like to perform bulk operations on a subset of channels with a CLI tool that consumes the fabric-config library.     Some initial bulk operations we'd like supported include:  *Cert Expiry* Update channel MSP that only requires one signature TLS certs for orderers in consenter set  *V1 to V2 migration* Remove dead consenter from channel Remove dead anchor peers Add anchor peers     Requirements: * Option to run the tool in dry-run mode - show the calculated update * error message when doing any operation other than the supported ones * stack multiple operations   Use cases: REPLACE: Update channel MSP - admins DELETE: Remove dead consenter from channel UPDATE: TLS certs for orderers in consenter set ADD: Anchor Peer DELETE: Anchor Peer   Connection Profile: Use Fabric connection profile format  https://hyperledger-fabric.readthedocs.io/en/release-2.0/developapps/connectionprofile.html  {code:java} Add/Remove/Delete consenter:   { operation: "addConsenter|removeConsenter|updateConsenter|replaceConsenter", identifier: { "host": "peer0.org1.example.com", "port": 7051, } value:   { "client_tls_cert": <>, "server_tls_cert": <> }   }    Update MSP:   { operation: "updateApplicationMSP|updateOrdererMSP", org: "Org1MSP", value: { admins:  <base64encoded certs> , } }    update anchor peer:   { operation: "removeAnchorPeers|addAnchorPeers|replaceAnchorPeers", org: "Org1MSP", value:   { "host": "peer0.org1.example.com", "port": 7051 }   }    ---- batchUpdate.json { channelList:   "channel1", "channel2"  , operations:   { operation: "removeAnchorPeers", org: "Org1MSP", value:   { "host": "peer0.org1.example.com", "port": 7051 }   }, { operation: "updateApplicationMSP", org: "Org1MSP", value: { admins:  base64 , } }   }  connectionProfile.json - with peers (and orderers?) depending on service discoveryidentity.json  signingIdentities.json { signatures:   { mspId: "Org1MSP", privateKey: <base64>, certificate: <LS....> }, { mspId: "Org2MSP", privateKey: <base64>, certificate: <LS....> }, { mspId: "OrdererMSP", privateKey: <base64>, certificate: <LS....> }   }{code}  Support a --dryrun flag that prints the update to stdout and can be redirected to a file    The tool will take a JSON input indicating the update that also specifies a connection profile for connecting to a peer to use the discovery service for fetching config blocks. The tool should both support fetching the config block via the information provided in the connection profile as well as submitting the config update transaction     *Acceptance*  I can use the cli tool to update a network with many channels by performing the same config update operations on a selected list of channels for the network. I can pass signing identities and a connection profile for connecting to a peer for fetching config blocks and submitting transactions to the orderer. An example command should look something like: {code:java} configtx update batchUpdate.json --connectionProfile connectionProfile.json --signingIdentities signatures.json --dryrun{code}  ></description> </Issue>
