<Issue id="40491" key="FAB-15668" number="15668" project="10002" reporter="nishantrupani" assignee="sejalpawar" creator="nishantrupani" type="10001" summary="Enhancing Private Data Collections by adding salt to the value part of Key Value Store" priority="3" status="10100" created="2019-06-10 11:00:54.0" updated="2019-06-10 16:39:19.0" votes="0" watches="1" workflowId="53437"> <description><! CDATA Current Scenario:  For every <K, V> pair stored in a PDC, <Hash(key), Hash(value)> is stored in ledger.  Disadvantage of using Direct Hashing to store <K,V> pair in a PDC:  Hashing is a one way function which maps data of any length to a fixed length unique string.  However, since resultant hashes are unique, it is possible for an attacker to construct a comprehensive rainbow table and guess the input string given to the hash function.  As an example, suppose that asset holdings are stored in a PDC where key is the owner's id and value is the amount of asset being held.  An attacker can simply, generate hashes of all numbers from 1 to 100000 and hashes of user names to see which owner has what amount of holding.  Using Salting:  Currently, for every <key, value> pair added to PDC, <Hash(key), Hash(value)> is added to the ledger.  Instead, we can:  Case A: Fixed Length Salt  Step 1: Randomly generate salt of fixed length.  Step 2: Append salt to the value. Here, append can be simply string append. Assume after salting, the value becomes valueSalt.  Step 4: Write <key, valueSalt> to PDC.  Step 5: Write <Hash(key), Hash(valueSalt)> to ledger.  For retrieval: # Fetch valueSalt using key. # Delete last x characters from valueSalt where x is the length of salt.  Case B: Variable length salt  Step 1: Randomly generate salt of any length between certain limits.  Step 2: Append salt to the value.  Step 3: Bind valueSalt and salt into a json blob. The resultant json blob can be represented as \{valueSalt, salt}. Alternatively, we can also store \{valueSalt, length(salt)}.  Step 4: Write <key, \{valueSalt, salt}> to PDC.  Step 5: Write <Hash(key), Hash(\{valueSalt, salt})> to ledger.  For retrieval: # Fetch \{valueSalt, salt} using key. # Delete salt from valueSalt.     ></description> </Issue>
