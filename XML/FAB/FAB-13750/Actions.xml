<Action id="55789" issue="36926" author="yacovm" type="comment" created="2019-01-18 11:19:02.0" updateauthor="yacovm" updated="2019-01-18 11:19:02.0"> <body><! CDATA I think what we need to do, is to use the cluster's block puller to probe all system channel OSNs and find: * The latest config block * Whether we're in the channel or not.  There is already a bunch of code that does that under orderer/common/cluster, we should just re-use it and present it in a consumable manner to the chain.  I'll take on this.  ></body> </Action>
<Action id="55806" issue="36926" author="kchristidis" type="comment" created="2019-01-18 17:08:25.0" updateauthor="kchristidis" updated="2019-01-18 17:08:25.0"> <body><! CDATA I'm wondering whether there is a simpler approach to this. # Assume that node N1 is disconnected from the network at time T1, when the consenters in channel C1 are N1, N2, N3, N4. # At time T2 > T1, a quorum in C1 decides to remove N1 from its consenter set. # At time T3 > T2, N1's network partition is restored and it attempts to reconnect with N2, N3, and N4 for the C1 cluster. # N2, N3, and N4 will reject these connections. # Shouldn't N1 stop trying after a certain time if these connections keep getting rejected? Isn't this a clear sign that C1 has moved on?  What does this solution overlook or exposes us to?  ></body> </Action>
<Action id="55808" issue="36926" author="yacovm" type="comment" created="2019-01-18 17:26:54.0" updateauthor="yacovm" updated="2019-01-18 17:26:54.0"> <body><! CDATA When you (an evicted OSN) is going to be restarted, you're going to have the same issue over and over again, though.  Plus - that also means you can't re-add the removed OSN to the channel because it would never register the channel in the inactive chains.  I really think we should just pull that one extra config block that tells you that you are evicted, commit it to the ledger, so that you can actually track periodically whether you're in the chain or outside it.   ></body> </Action>
<Action id="55821" issue="36926" author="kchristidis" type="comment" created="2019-01-18 19:17:55.0" updateauthor="kchristidis" updated="2019-01-18 19:17:55.0"> <body><! CDATA {quote}Plus - that also means you can't re-add the removed OSN to the channel because it would never register the channel in the inactive chains.{quote} Can you expand on this?  {quote}I think what we need to do, is to use the cluster's block puller to probe all system channel OSNs and find:{quote} The problem with this is: what happens if N2, N3, and N4 are serving C1 just fine, even though they are no longer part of the system channel? Isn't this theoretically possible?  ></body> </Action>
<Action id="55835" issue="36926" author="yacovm" type="comment" created="2019-01-18 20:49:54.0" updateauthor="yacovm" updated="2019-01-18 20:49:54.0"> <body><! CDATA {quote}    Plus - that also means you can't re-add the removed OSN to the channel because it would never register the channel in the inactive chains.{quote}  I meant, that - when an OSN boots up, it looks at chains it has in the ledger and if a chain contains a last config block that doesn't contain its TLS certificate - it deduces it's not in the channel, and then it starts an inactive.Chain instead of an etcdraft.Chain. In the background, it starts monitoring the system channel OSNs once per 5 minutes (max) to see if it's added to the channel. If it is added to the channel, it pulls the blocks and then overwrites the inactive.Chain with an etcdraft.Chain and joins the party.  If we don't detect an eviction of an OSN from the channel and pull the block that evicts it -  it also means we would never start an inactive chain when it restarts next time, and that's just a shame.  {quote}The problem with this is: what happens if N2, N3, and N4 are serving C1 just fine, even though they are no longer part of the system channel? Isn't this theoretically possible?{quote} If an OSN is not in the system channel it should be removed, because it leads to a state fork.     ></body> </Action>
<Action id="55837" issue="36926" author="kchristidis" type="comment" created="2019-01-18 21:03:08.0" updateauthor="kchristidis" updated="2019-01-18 21:05:25.0"> <body><! CDATA {quote}If we don't detect an eviction of an OSN from the channel and pull the block that evicts it - it also means we would never start an inactive chain when it restarts next time, and that's just a shame.{quote} Ah, that's a good point. I had forgotten about the periodic polling of the system channel OSNs.  {quote}If an OSN is not in the system channel it should be removed, because it leads to a state fork.{quote} Hmm. Why?  ></body> </Action>
<Action id="55840" issue="36926" author="yacovm" type="comment" created="2019-01-18 21:17:49.0" updateauthor="yacovm" updated="2019-01-18 21:17:49.0"> <body><! CDATA because it will reply "channel not exists" for channels that are created after its eviction, while other OSNs will reply that the channel does exist.  It is in a way, a state fork though a mild one.  ></body> </Action>
<Action id="55841" issue="36926" author="kchristidis" type="comment" created="2019-01-18 21:26:43.0" updateauthor="kchristidis" updated="2019-01-18 21:26:43.0"> <body><! CDATA A stretch but you're right.  The system channel notion will start giving us trouble down the road, esp. when BFT comes. Was hoping for something that would work in a BFT context, even if it was rougher, which is what I was getting at with my proposal. But it's got holes.  +1 on proceeding as you suggest.  ></body> </Action>
<Action id="56644" issue="36926" author="kchristidis" type="comment" body=" ~yacovm : Can you post about the issue that you&apos;re bumping into (generic &quot;end of file&quot; error?), and your workaround with the gRPC status?" created="2019-02-04 14:04:29.0" updateauthor="kchristidis" updated="2019-02-04 14:04:29.0"/>
<Action id="56645" issue="36926" author="yacovm" type="comment" body="only when(if) it works ;)" created="2019-02-04 14:11:54.0" updateauthor="yacovm" updated="2019-02-04 14:11:54.0"/>
