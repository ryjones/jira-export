<Issue id="13705" key="FAB-1298" number="1298" project="10002" reporter="jyellick" assignee="jyellick" creator="jyellick" type="10001" summary="Remove queueing concept from Broadcast" priority="3" resolution="10000" status="6" created="2016-12-07 20:54:57.0" updated="2018-07-20 18:54:54.0" resolutiondate="2017-01-03 18:32:32.0" votes="0" watches="2" workflowId="36822"> <description><! CDATA The broadcast API suffers from a deficiency today, that it immediately returns success/failure before the request has actually entered consensus.  The desired behavior would be to return success only after the request has entered consensus, but, this poses a problem when the broadcast queue overflows.  In the event that the broadcast queue overflows, incoming requests should be rejected to alert the client to slow down.  This results in the situation of: 1. Wait until after the queue drains to return the failure (which will not throttle the client and not provide immediate feedback, this is bad) 2. Return the success before the queue drains (which will not inform the client if for whatever reason the consensus system never actually accepts the request)  Since these options both have drawbacks and are mutually exclusive, a different solution is required.  This story is to add windowing to the broadcast API to mirror the deliver API.  If the client knows how big the buffer is at the server, then the client can delay sending new messages until it receives the success/failure after processing the queue.  If the client violates the protocol and overflows the queue, the client can be dismissed as malicious and hung-up on.  ></description> </Issue>
