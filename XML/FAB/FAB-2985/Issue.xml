<Issue id="15565" key="FAB-2985" number="2985" project="10002" reporter="wlahti" creator="wlahti" type="10001" summary="Utilize error handling framework throughout Fabric" priority="3" resolution="10000" status="6" created="2017-04-04 14:57:21.0" updated="2019-01-11 16:03:26.0" resolutiondate="2019-01-11 16:02:33.0" votes="1" watches="7" workflowId="43161"> <description><! CDATA The error handling framework (found under vendor/github.com/pkg/errors) needs to be utilized throughout the codebase to append callstacks to error messages.  Package documentation can be found here:  https://godoc.org/github.com/pkg/errors   Here is a pseudo-code program that shows key things we need: {code:java} package main  import ( "fmt" "github.com/pkg/errors" )  // creates an error, prepending the provided error message,  // and generates a stack func wrapWithStack() error { err := createError() // do this when error comes from external source (go lib or vendor) return errors.Wrap(err, "wrapping an error with stack") }  // creates an error, prepending the provided error message,  // and preserves the stack from the previous error func wrapAndPreserveStack() error { err := createError() // do ths when error comes from internal Fabric since it already has stacktrace return errors.WithMessage(err, "wrapping an error without stack") }  // creates a new error with a stack func createError() error { return errors.New("original error")  }  // creates a new formatted error message with a stack func createErrorWithFormatting() error { return errors.Errorf("original error for %s", something) }   func main() { err := createError() fmt.Printf("print error without stack: %s\n\n", err) fmt.Printf("print error with stack: %+v\n\n", err) err = wrapWithoutStack() fmt.Printf("%+v\n\n", err) err = wrapWithStack() fmt.Printf("%+v\n\n", err) }{code} and here is the output: {code:java} print error without stack: original error   print error with stack: original error main.createError /opt/gopath/src/github.com/hyperledger/fabric/examples/errorshandling/errorstest.go:18 main.main /opt/gopath/src/github.com/hyperledger/fabric/examples/errorshandling/errorstest.go:22 runtime.main /opt/go/src/runtime/proc.go:183 runtime.goexit /opt/go/src/runtime/asm_amd64.s:2086   original error main.createError /opt/gopath/src/github.com/hyperledger/fabric/examples/errorshandling/errorstest.go:18 main.wrapWithoutStack /opt/gopath/src/github.com/hyperledger/fabric/examples/errorshandling/errorstest.go:14 main.main /opt/gopath/src/github.com/hyperledger/fabric/examples/errorshandling/errorstest.go:25 runtime.main /opt/go/src/runtime/proc.go:183 runtime.goexit /opt/go/src/runtime/asm_amd64.s:2086 wrapping an error without stack   original error main.createError /opt/gopath/src/github.com/hyperledger/fabric/examples/errorshandling/errorstest.go:18 main.wrapWithStack /opt/gopath/src/github.com/hyperledger/fabric/examples/errorshandling/errorstest.go:10 main.main /opt/gopath/src/github.com/hyperledger/fabric/examples/errorshandling/errorstest.go:27 runtime.main /opt/go/src/runtime/proc.go:183 runtime.goexit /opt/go/src/runtime/asm_amd64.s:2086 wrapping an error with stack main.wrapWithStack /opt/gopath/src/github.com/hyperledger/fabric/examples/errorshandling/errorstest.go:11 main.main /opt/gopath/src/github.com/hyperledger/fabric/examples/errorshandling/errorstest.go:27 runtime.main /opt/go/src/runtime/proc.go:183 runtime.goexit /opt/go/src/runtime/asm_amd64.s:2086{code}    ></description> </Issue>
