<Action id="62084" issue="40957" author="denyeart" type="comment" created="2019-07-24 15:32:14.0" updateauthor="denyeart" updated="2019-07-24 15:32:14.0"> <body><! CDATA Still failing but now the chaincode invoke error is:  {code:java} Error: could not assemble transaction: ProposalResponsePayloads do not match  {code}   ></body> </Action>
<Action id="62085" issue="40957" author="denyeart" type="comment" created="2019-07-24 15:48:46.0" updateauthor="denyeart" updated="2019-07-24 15:50:46.0"> <body><! CDATA  ~sstone1  Can you investigate why the fabcar tests are continually failing in fabric-samples?  Also I noticed we are only collecting the logs for one of the peers... can this be extended to collect logs for all four peers to assist in troubleshooting? https://github.com/hyperledger/fabric-samples/blob/master/scripts/ci_scripts/fabcar.sh#L7   ></body> </Action>
<Action id="62125" issue="40957" author="sstone1" type="comment" created="2019-07-25 17:37:14.0" updateauthor="sstone1" updated="2019-07-25 17:37:14.0"> <body><! CDATA  ~denyeart  I've extended the logs to collect all logs from all Docker containers. Unfortunately it doesn't reveal anything useful about this problem though - the peer(s) aren't crashing, everything looks *okay*.  What I have noticed though is that the "peer chaincode invoke" command runs through the specified list of peers (we have four) in a serial fashion: https://github.com/hyperledger/fabric/blob/release-1.4/peer/chaincode/common.go#L468  Because each peer needs a reasonably long time to build the chaincode container, this means that we may have to wait a while before we get to the last peer in the list. The errors are coming from the last peer in the list, and it states "transport is closing". The error also comes 2 minutes after the command starts, and 2 minutes is interesting as it matches some of the default gRPC timeouts for idle connections.  The connections to all of the peers is done upfront before the invokes actually happen, so I'm wondering if it's possible that we're hitting this problem:  - Script submits the command - We connect to all four peers - We invoke on peer 1 (40 sec) - We invoke on peer 2 (40 sec) - We invoke on peer 3 (40 sec) - We invoke on peer 4... but by this point the connection we created 2 minutes ago is closed by the peer as we didn't do anything with it  Sound feasible? I'm tempted to chuck in the change to make the calls to the peers in parallel anyway, as it will improve performance for anyone using the command in this way (the SDKs do these calls in parallel).  ></body> </Action>
<Action id="62128" issue="40957" author="lehors" type="comment" body="Interesting analysis  ~sstone1 . I think it&apos;s worth a try for sure." created="2019-07-25 18:23:08.0" updateauthor="lehors" updated="2019-07-25 18:23:08.0"/>
<Action id="62132" issue="40957" author="denyeart" type="comment" created="2019-07-25 19:02:38.0" updateauthor="denyeart" updated="2019-07-25 19:02:38.0"> <body><! CDATA  ~sstone1  Seems reasonable and I agree it should be done in parallel regardless.  ~wlahti  Is familiar with that CLI code if you need any help.  ></body> </Action>
<Action id="62398" issue="40957" author="denyeart" type="comment" created="2019-07-30 15:07:23.0" updateauthor="denyeart" updated="2019-07-30 15:07:23.0"> <body><! CDATA https://gerrit.hyperledger.org/r/#/c/fabric/+/32531/ merged  Will close. We can re-open if fabric-samples merge job continues to fail.  ></body> </Action>
<Action id="62474" issue="40957" author="sykesm" type="comment" created="2019-07-31 18:35:05.0" updateauthor="sykesm" updated="2019-07-31 18:35:05.0"> <body><! CDATA > Sound feasible? I'm tempted to chuck in the change to make the calls to the peers in parallel anyway, as it will improve performance for anyone using the command in this way (the SDKs do these calls in parallel).  The idea is nice but the reality is that it will end up putting a lot more strain on the system when doing the docker builds.  Basically, the cycles consumed by the docker builds can dim the lights in the lab; they're very disruptive.  ></body> </Action>
