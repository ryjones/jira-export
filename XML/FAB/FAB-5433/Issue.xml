<Issue id="19433" key="FAB-5433" number="5433" project="10002" reporter="yacovm" assignee="yacovm" creator="yacovm" type="10001" summary="Move gossip policy checks from the critical path" priority="3" resolution="10000" status="6" created="2017-07-23 08:14:51.0" updated="2018-07-20 18:50:19.0" resolutiondate="2017-08-12 13:39:32.0" votes="0" watches="3" workflowId="39521"> <description><! CDATA In gossip, when a message that contains a block is sent to a peer (or a peer requests a block) - we consult the  MessageCryptoService|https://github.com/hyperledger/fabric/blob/release/gossip/api/crypto.go#L28-L60  and ask it- is the given peer (that is considered to receive the block from us) among the  channel readers|https://github.com/hyperledger/fabric/blob/release/peer/gossip/mcs.go#L246 .   The problem is that this operation involves verifying ECDSA signatures and it is in the critical path of the dissemination. From tests I've run, we waste a couple of tens of milliseconds in small networks, and the computation is linear in the number of peers in the channel.  The peers that their certificate is checked, are taken from the  in-memory cache of the StateInfo messages|https://github.com/hyperledger/fabric/blob/release/gossip/gossip/channel/channel.go#L333-L344 .   I propose we refactor this into the following flow that would offload the certificate verification to a step that is not in the critical path, and would also reduce the total number of certificate verifications to a minimum.  The proposed flow is the following: * When a peer receives a StateInfo message and it is put into the channel module, the peer consults the MessageCryptoService whether the peer that signed the StateInfo message is among the channel readers. ** If not - the message is discarded. * The StateInfo message is put into the in-memory cache as usual * When the peer receives a block is is requested to send a block - it just checks whether the peer has a StateInfo message in the in-memory cache. If it does - it means the peer is a channel reader and can be given the block. * When a config update comes, the  ConfigureChannel|https://github.com/hyperledger/fabric/blob/release/gossip/gossip/channel/channel.go#L361-L381  is called as usual, but this time - the method does over all the StateInfo messages in the cache, and checks if the peer that signed a given StateInfo message is a channel reader. ** If it is not - the message is deleted from the cache.    ~C0rWin    ~gennadyl   opinions?  ></description> </Issue>
