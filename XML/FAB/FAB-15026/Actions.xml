<Action id="59490" issue="39029" author="mastersingh24" type="comment" body="Try running `GODEBUG=netdns=go  peer chaincode install ...`   " created="2019-04-25 10:17:21.0" updateauthor="mastersingh24" updated="2019-04-25 10:17:21.0"/>
<Action id="59495" issue="39029" author="raft 3" type="comment" body="Attached are new logs with `GODEBUG=netdns=go peer chaincode install ...`" created="2019-04-25 13:36:46.0" updateauthor="raft 3" updated="2019-04-25 13:36:46.0"/>
<Action id="59496" issue="39029" author="raft 3" type="comment" body="also logs for 1.4.1 is attached" created="2019-04-25 13:50:08.0" updateauthor="raft 3" updated="2019-04-25 13:50:08.0"/>
<Action id="59591" issue="39029" author="mastersingh24" type="comment" body="oops ... I did not carefully read the stack trace ... assume the cgo call error was the usual net lookup call, but it&apos;s actually a call to get the user." created="2019-04-30 11:45:43.0" updateauthor="mastersingh24" updated="2019-04-30 11:45:43.0"/>
<Action id="59879" issue="39029" author="raft 3" type="comment" body="on high end machines this happens much more frequently. 5-6 failures in a row is not uncommon, if that gives a clue" created="2019-05-09 14:47:53.0" updateauthor="raft 3" updated="2019-05-09 14:47:53.0"/>
<Action id="64051" issue="39029" author="jyellick" type="comment" body="Is this still a problem?" created="2019-09-24 15:31:54.0" updateauthor="jyellick" updated="2019-09-24 15:31:54.0"/>
<Action id="64112" issue="39029" author="gauravgiri" type="comment" body="Yes, we receive the same issue, described in rocket chat at: https://chat.hyperledger.org/channel/fabric?msg=9yFhctzwWwvCuKWH6" created="2019-09-25 08:46:01.0" updateauthor="gauravgiri" updated="2019-09-25 08:46:01.0"/>
<Action id="64156" issue="39029" author="sykesm" type="comment" created="2019-09-26 13:08:22.0" updateauthor="sykesm" updated="2019-09-26 13:08:22.0"> <body><! CDATA This problem (like others that are open) are due to how the binaries in 1.4.x were built as static.  https://github.com/hyperledger/fabric/blob/b6fdef9ebd9a86a328d1aa113434671d3e1fc0da/docker-env.mk#L65-L70  The issue is that even in static builds, there are at least two places where libc is required: DNS (net), and user/group account resolution (os/user).  These requirements can be avoided by building with CGO_ENABLED=0 but that also means that packages that require cgo (like pkcs11) can't be used.  The libc requirement for DNS resolution can be avoided by setting the {{netgo}} build tag at build or by setting {{GODEBUG=netdns=go}} at runtime. This works in environments that include simple {{/etc/resolv.conf}} configurations. This workaround has been around for a while.  As for the {{os/user}} libc requirement, there was no way to disable that until go 1.11, it can be avoided by building the binary with the {{osusergo}} build tag.  Given 1.4 is built with go 1.11, we could use the {{netdns,osusergo}} build tags in the static builds to avoid the libc dependencies.  However, in v2/master, we have chosen to build with dynamic linking against alpine with the musl libc.  ></body> </Action>
<Action id="64159" issue="39029" author="gauravgiri" type="comment" created="2019-09-26 14:14:08.0" updateauthor="gauravgiri" updated="2019-09-26 14:14:08.0"> <body><! CDATA Thank you Mathew, However even after adding  GODEBUG=netdns=go, the issue remains the same.  This issue is specific for a Redhat machine, using standard docker hub hyperledger fabric images 1.4.1.  ></body> </Action>
<Action id="64163" issue="39029" author="sykesm" type="comment" created="2019-09-26 15:43:03.0" updateauthor="sykesm" updated="2019-09-26 15:43:03.0"> <body><! CDATA > Thank you Mathew, However even after adding  GODEBUG=netdns=go, the issue remains the same.  I understand - that's because it only solves the net issue and not os/user. Perhaps my comments were not  as clear as they could have been.  The published 1.4.x images have issues. The network package has a workaround that you referenced will do the trick with simple resolver configurations but there is *not* a workaround for the os/user issue.  The os/user package is used indirectly during chaincode packaging when we call tar.FileInfoHeader.  https://github.com/golang/go/blob/83bd88129ea3b5a1272c06db3e865ee75740cee8/src/archive/tar/stat_unix.go#L39-L45  Using a native binary for linux (instead of containerized tools) is a viable workaround.    ></body> </Action>
<Action id="64168" issue="39029" author="gauravgiri" type="comment" body="Thank you Mathew. As i understood this issue is there in the docker images for hyperledger fabric v 1.4.x., and may not be solved depending on os/user. Shall we try to build docker images from v1.4.1 source locally? Any specific config/step i need to do locally, so that this issue doesn&apos;t crop again in locally build docker images for fabric?" created="2019-09-26 16:30:33.0" updateauthor="gauravgiri" updated="2019-09-26 16:30:33.0"/>
<Action id="64171" issue="39029" author="sykesm" type="comment" created="2019-09-26 18:31:00.0" updateauthor="sykesm" updated="2019-09-26 18:31:00.0"> <body><! CDATA I think the easiest local change is to build docker images with dynamic linking.  {{make docker DOCKER_DYNAMIC_LINK=true}}  I can verify that shortly but it's probably the most straightforward.  ></body> </Action>
<Action id="64176" issue="39029" author="sykesm" type="comment" created="2019-09-26 18:39:55.0" updateauthor="sykesm" updated="2019-09-26 18:39:55.0"> <body><! CDATA If you see these errors, you're still building static and the issue will not be resolved: {code:java} ✓  14:35:53  ~/workspace/fabric/src/github.com/hyperledger/fabric   sykesm@trapped  (release-1.4)$ make docker Building .build/docker/bin/peer # github.com/hyperledger/fabric/peer /tmp/go-link-847207756/000006.o: In function `pluginOpen': /workdir/go/src/plugin/plugin_dlopen.go:19: warning: Using 'dlopen' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking /tmp/go-link-847207756/000021.o: In function `mygetgrouplist': /workdir/go/src/os/user/getgrouplist_unix.go:16: warning: Using 'getgrouplist' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking /tmp/go-link-847207756/000020.o: In function `mygetgrgid_r': /workdir/go/src/os/user/cgo_lookup_unix.go:38: warning: Using 'getgrgid_r' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking /tmp/go-link-847207756/000020.o: In function `mygetgrnam_r': /workdir/go/src/os/user/cgo_lookup_unix.go:43: warning: Using 'getgrnam_r' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking /tmp/go-link-847207756/000020.o: In function `mygetpwnam_r': /workdir/go/src/os/user/cgo_lookup_unix.go:33: warning: Using 'getpwnam_r' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking /tmp/go-link-847207756/000020.o: In function `mygetpwuid_r': /workdir/go/src/os/user/cgo_lookup_unix.go:28: warning: Using 'getpwuid_r' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking /tmp/go-link-847207756/000004.o: In function `_cgo_18049202ccd9_C2func_getaddrinfo': {code}  ></body> </Action>
<Action id="64177" issue="39029" author="gauravgiri" type="comment" body="Thank you Mathew, you also updated the fix to v1.4.4. Any timeline when can we expect the docker images of this version in docker hub?" created="2019-09-27 03:09:00.0" updateauthor="gauravgiri" updated="2019-09-27 03:09:00.0"/>
<Action id="64772" issue="39029" author="mastersingh24" type="comment" body="We can try setting the osusergo build tag " created="2019-10-17 14:40:44.0" updateauthor="mastersingh24" updated="2019-10-17 14:40:44.0"/>
<Action id="64776" issue="39029" author="mastersingh24" type="comment" body="https://gerrit.hyperledger.org/r/c/fabric/+/34005" created="2019-10-17 15:32:50.0" updateauthor="mastersingh24" updated="2019-10-17 15:32:50.0"/>
<Action id="64781" issue="39029" author="sykesm" type="comment" created="2019-10-17 20:58:34.0" updateauthor="sykesm" updated="2019-10-17 20:58:34.0"> <body><! CDATA Between the netgo and osusergo issues, I think we should just change to dynamic linking in 1.4.4. We're using a glibc based image so there's no reason to have static linking.  If we go dynamic, it will resolve most of the issues we've historically seen in this space.  ></body> </Action>
