<Action id="60195" issue="39971" author="mastersingh24" type="comment" created="2019-05-21 11:41:54.0" updateauthor="mastersingh24" updated="2019-05-21 11:41:54.0"> <body><! CDATA I likely missed some conversation on this, but why exactly are we doing this? What are the advantages of the v2 format and why are we forcing people to move? And if we are going to do this, wouldn't this be more of a documentation issue (which would more or  less tell people we are deleting / dropping all of their databases and rebuilding them ... and oh yeah ... this is going to take a long time)?  ></body> </Action>
<Action id="60204" issue="39971" author="manish-sethi" type="comment" created="2019-05-21 14:59:05.0" updateauthor="manish-sethi" updated="2019-05-21 14:59:05.0"> <body><! CDATA  ~mastersingh24  - the primary motivation to clean up code at a few places that became complex for supporting new features under the assumption that asking for rebuilding of DBs in minor releases would not be preferable.  Yes, this will be more of a documentation issue and the time needed to rebuild.  ></body> </Action>
<Action id="60211" issue="39971" author="denyeart" type="comment" created="2019-05-21 15:50:41.0" updateauthor="denyeart" updated="2019-05-21 15:52:45.0"> <body><! CDATA  ~mastersingh24   ~manish-sethi  Some more details...each of the issues in this Epic have a different rationale, but it generally boils down to one of two things:  1) Between v1.0 and v1.4, new features were added that required changes to how the various ledger database keys/values were encoded. The current code therefore supports data in multiple formats, leaving the code complex and difficult to maintain. In order to get the code to a clean and maintainable state, and support future features, the various databases need to be rebuilt using extensible data encodings.  2) In some very rare cases, user key data may collide with internal data encodings, impacting for example history db queries. The new encodings would be guaranteed to be completely free from collisions with user data.  The only way the code can be cleaned up and ensure no collisions, is to require a complete cutover to the new data encodings. The sooner Fabric ledger stores can get to the new extensible encodings, the less impact there will be (chains will only get longer as time goes by). A major release boundary is the most feasible time to break data compatibility and require a rebuild.  It is expected that the ledger rebuild from chain would be automatic upon initial v2.0 peer start, so that the legacy code can be entirely removed in v2.0. The rebuild will take some time for large chains (e.g. hours). It can be done as an in-place upgrade when peer is upgraded (maintenance window required), or via side-by-side upgrade of peer (direct traffic from old v1.x peer to new v2.0 peer once the new peer has joined channels and initialized ledgers). Having a mix of v1.x and v2.0 peers (rolling upgrade) is still completely supported.  ></body> </Action>
