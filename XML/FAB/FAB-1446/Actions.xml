<Action id="23153" issue="13855" author="rameshthoomu" type="comment" body="Will work on this" created="2017-04-28 13:25:30.0" updateauthor="rameshthoomu" updated="2017-04-28 13:25:30.0"/>
<Action id="24677" issue="13855" author="jasondotstar" type="comment" body=" ~rameshthoomu , I&apos;ve taken ownership of this issue." created="2017-05-30 15:30:37.0" updateauthor="jasondotstar" updated="2017-05-30 15:30:37.0"/>
<Action id="24915" issue="13855" author="christopherferris" type="comment" body=" ~jasondotstar  note that I think this is only needed for fabric-ca. fabric uses no SQL at this point." created="2017-06-01 12:16:57.0" updateauthor="christopherferris" updated="2017-06-01 12:16:57.0"/>
<Action id="26571" issue="13855" author="jasondotstar" type="comment" body="Currently working on identifying all of the packages within fabric-ca that use SQL.  These are the packages that will be scanned by safesql." created="2017-06-16 15:17:34.0" updateauthor="jasondotstar" updated="2017-06-16 15:17:34.0"/>
<Action id="28113" issue="13855" author="jtclark" type="comment" body="Working on getting safesql running against the fabric-ca code.  Afterwards, a patch will be submitted to add this to the Jenkins sandbox." created="2017-07-10 20:26:42.0" updateauthor="jtclark" updated="2017-07-10 20:26:42.0"/>
<Action id="28289" issue="13855" author="jtclark" type="comment" body=" https://gerrit.hyperledger.org/r/#/c/11595/  has been prepared to address this JIRA task.  ~rameshthoomu ,  ~jwagantall , and  ~ryjones  - Please review." created="2017-07-13 00:47:47.0" updateauthor="jtclark" updated="2017-07-13 00:47:47.0"/>
<Action id="28507" issue="13855" author="jtclark" type="comment" created="2017-07-17 15:53:27.0" updateauthor="jtclark" updated="2017-07-17 15:53:27.0"> <body><! CDATA Update:  After speaking with  ~smithbk  on the #fabric-ca channel, there is an additional way to solve this issue. Invoking safesql can be achieved by running it via a script inside the FVT (fabric-ca/scripts/fvt) test directory.  I've prepped an addition patch for review:   https://gerrit.hyperledger.org/r/#/c/11687|https://gerrit.hyperledger.org/r/#/c/11687/   ></body> </Action>
<Action id="28976" issue="13855" author="jtclark" type="comment" created="2017-07-25 14:54:38.0" updateauthor="jtclark" updated="2017-08-08 19:26:17.0"> <body><! CDATA UPDATE: The new patch mentioned above( https://gerrit.hyperledger.org/r/#/c/11687/ ) has been tested both locally, and on the Jenkins sandbox.   Test Results display as follows: {code:java} 13:50:59 ******************* 13:50:59 /opt/gopath/src/github.com/hyperledger/fabric-ca/scripts/fvt/safesql_test.sh 13:50:59 ******************* 13:51:05 database/sql functions that accept queries: 13:51:05 - func (*database/sql.DB).Prepare(query string) (*database/sql.Stmt, error) (param 0) 13:51:05 - func (*database/sql.DB).Exec(query string, args ...interface{}) (database/sql.Result, error) (param 0) 13:51:05 - func (*database/sql.DB).Query(query string, args ...interface{}) (*database/sql.Rows, error) (param 0) 13:51:05 - func (*database/sql.DB).QueryRow(query string, args ...interface{}) *database/sql.Row (param 0) 13:51:05 - func (*database/sql.Tx).Prepare(query string) (*database/sql.Stmt, error) (param 0) 13:51:05 - func (*database/sql.Tx).Exec(query string, args ...interface{}) (database/sql.Result, error) (param 0) 13:51:05 - func (*database/sql.Tx).Query(query string, args ...interface{}) (*database/sql.Rows, error) (param 0) 13:51:05 - func (*database/sql.Tx).QueryRow(query string, args ...interface{}) *database/sql.Row (param 0) 13:51:05  13:51:05 Did not find any commands (i.e., main functions). 13:51:05  13:51:05 ######################################################################### 13:51:05 RC: 0, safesql_test.sh PASSED 13:51:05 0 minutes, 6 seconds runtime 13:51:05 TIMESTAMP--2017-07-25 01:51:05PM safesql_test.sh ENDED 13:51:05 ######################################################################### 13:51:05 TIMESTAMP--2017-07-25 01:51:05PM 13:51:05 safesql_test.sh test ended.{code}        ></body> </Action>
<Action id="29239" issue="13855" author="jtclark" type="comment" created="2017-07-31 14:16:01.0" updateauthor="jtclark" updated="2017-07-31 14:16:01.0"> <body><! CDATA *Status update:*  Additional reviewers have been added to  https://gerrit.hyperledger.org/r/#/c/11687/.   Peer reviews have identified that the Safesql tool looks for main() functions inside the packages being tested for SQL injections.  The fabric-ca packages in question, lib/ and lib/dbutil, do not utilize main functions, so to the tool exits with a '2' return code.  Need to ask the maintainers of the fabric-ca project for additional guidance on this.  ></body> </Action>
<Action id="29561" issue="13855" author="jtclark" type="comment" created="2017-08-08 17:29:33.0" updateauthor="jtclark" updated="2017-08-08 17:29:33.0"> <body><! CDATA *Status update:*  The  https://gerrit.hyperledger.org/r/#/c/11687/  patch has been amended to push a change to the *safesql_test.sh* script.  A reviewer discovered that the safesql cmd was not actually running a true test of the fabric-ca project. The safesql tool command begins scanning for sql injections by looking for the main() function in each of the go packages requested for scanning.  Since the lib/ and lib/dbutil packages do not have a main function, the safesql tool would simply exit with a return code of '2'.  The safesql_test.sh script was modified (in TEST/DEV) to run against the fabric-ca-client and fabric-ca-server directories, both containing the main() function(s) that safesql expects.  With this modification, a test was run on the Jenkins sandbox server. Below are the results:  {code:java} 15:01:22 ******************* 15:01:22 /opt/gopath/src/github.com/hyperledger/fabric-ca/scripts/fvt/safesql_test.sh 15:01:22 ******************* 15:01:31 database/sql functions that accept queries: 15:01:31 - func (*database/sql.DB).Prepare(query string) (*database/sql.Stmt, error) (param 0) 15:01:31 - func (*database/sql.DB).Exec(query string, args ...interface{}) (database/sql.Result, error) (param 0) 15:01:31 - func (*database/sql.DB).Query(query string, args ...interface{}) (*database/sql.Rows, error) (param 0) 15:01:31 - func (*database/sql.DB).QueryRow(query string, args ...interface{}) *database/sql.Row (param 0) 15:01:31 - func (*database/sql.Tx).Prepare(query string) (*database/sql.Stmt, error) (param 0) 15:01:31 - func (*database/sql.Tx).Exec(query string, args ...interface{}) (database/sql.Result, error) (param 0) 15:01:31 - func (*database/sql.Tx).Query(query string, args ...interface{}) (*database/sql.Rows, error) (param 0) 15:01:31 - func (*database/sql.Tx).QueryRow(query string, args ...interface{}) *database/sql.Row (param 0) 15:01:31  15:01:39 Found 14 potentially unsafe SQL statements: 15:01:39 - /opt/gopath/src/github.com/hyperledger/fabric-ca/vendor/github.com/jmoiron/sqlx/sqlx.go:618:21 15:01:39 - /opt/gopath/src/github.com/hyperledger/fabric-ca/vendor/github.com/jmoiron/sqlx/sqlx.go:673:20 15:01:39 - /opt/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:404:23 15:01:39 - /opt/gopath/src/github.com/hyperledger/fabric-ca/vendor/github.com/jmoiron/sqlx/named.go:335:15 15:01:39 - /opt/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:281:20 15:01:39 - /opt/gopath/src/github.com/hyperledger/fabric-ca/lib/dbutil/dbutil.go:178:19 15:01:39 - /opt/gopath/src/github.com/hyperledger/fabric-ca/lib/dbutil/dbutil.go:268:19 15:01:39 - /opt/gopath/src/github.com/hyperledger/fabric-ca/vendor/github.com/jmoiron/sqlx/sqlx.go:341:26 15:01:39 - /opt/gopath/src/github.com/hyperledger/fabric-ca/vendor/github.com/jmoiron/sqlx/sqlx.go:332:23 15:01:39 - /opt/gopath/src/github.com/hyperledger/fabric-ca/vendor/github.com/jmoiron/sqlx/sqlx.go:618:21 15:01:39 - /opt/gopath/src/github.com/hyperledger/fabric-ca/vendor/github.com/jmoiron/sqlx/named.go:335:15 15:01:39 - /opt/gopath/src/github.com/hyperledger/fabric-ca/vendor/github.com/jmoiron/sqlx/sqlx.go:673:20 15:01:39 - /opt/gopath/src/github.com/hyperledger/fabric-ca/vendor/github.com/jmoiron/sqlx/sqlx.go:415:26 15:01:39 - /opt/gopath/src/github.com/hyperledger/fabric-ca/vendor/github.com/jmoiron/sqlx/sqlx.go:406:23 15:01:39 Please ensure that all SQL queries you use are compile-time constants. 15:01:39 You should always use parameterized queries or prepared statements 15:01:39 instead of building queries from strings. 15:01:39  15:01:39 ######################################################################### 15:01:39 RC: 0, safesql_test.sh PASSED 15:01:39 0 minutes, 17 seconds runtime 15:01:39 TIMESTAMP--2017-08-07 03:01:39PM safesql_test.sh ENDED 15:01:39 ######################################################################### 15:01:39 TIMESTAMP--2017-08-07 03:01:39PM 15:01:39 safesql_test.sh test ended. {code}  From this output, we can see that the safesql tool now reports with valid input. However, two new issues have come up:  1. The safesql tool does not have a 'skip' option, allowing us to simply skip the scanning of vendor packages. 2. The safesql tool does not support sqlx. An issue has been raised on the project to add sqlx support.  ></body> </Action>
<Action id="29570" issue="13855" author="smithbk" type="comment" created="2017-08-08 21:46:59.0" updateauthor="smithbk" updated="2017-08-08 21:46:59.0"> <body><! CDATA It seems to me that we need to evaluate each of the "14 potentially unsafe SQL statements" above to see which pose real threats. For all that pose a real threat, we need to fix them whether they are in vendor packages or not. For those that don't pose a real threat, we should filter them out so the build does not fail.  ></body> </Action>
<Action id="39319" issue="13855" author="jtclark" type="comment" created="2018-01-29 20:13:27.0" updateauthor="jtclark" updated="2018-01-29 20:13:47.0"> <body><! CDATA Currently working on exposing the "potentially unsafe SQL statements" as reported by the safeql tool when ran against the fabric-ca code base. Currently the FVT test that encapsulates all of the test scripts displays the test as PASSED, and does not expose the potentially unsafe queries:  {code:java} 18:32:36 Running fvt tests ... 18:32:36  18:32:36 ******************* 18:33:22 Running backwards_comp_test.sh-TLS-true PASSED 18:33:23 ******************* 18:33:35 Running cdp_exploit_test.sh-TLS-true PASSED 18:33:36 ******************* 18:36:29 Running cluster_test.sh-TLS-true PASSED 18:36:29 ******************* 18:36:59 Running db_test.sh-TLS-true 2018-01-29T18:36:59.650431Z mysqld_safe mysqld from pid file /var/run/mysqld/mysqld.pid ended 18:37:03 PASSED 18:37:04 ******************* 18:38:04 Running dbmigration_test.sh-TLS-true PASSED 18:38:05 ******************* 18:39:30 Running enrollments_test.sh-TLS-true PASSED 18:39:30 ******************* 18:39:32 Running gencsr_test.sh-TLS-true PASSED 18:39:32 ******************* 18:39:43 Running group_test.sh-TLS-true PASSED 18:39:43 ******************* 18:40:40 Running intermediateca_test.sh-TLS-true PASSED 18:40:41 ******************* 18:41:53 Running keys_test.sh-TLS-true PASSED 18:41:53 ******************* 18:42:03 Running ldap_test.sh-TLS-true PASSED 18:42:03 ******************* 18:46:12 Running multica_test.sh-TLS-true PASSED 18:46:13 ******************* 18:46:55 Running passwordsInLog_test.sh-TLS-true PASSED 18:46:56 ******************* 18:47:05 Running postgres_test.sh-TLS-true PASSED 18:47:05 ******************* 18:48:49 Running reenroll_test.sh-TLS-true PASSED 18:48:49 ******************* 18:49:34 Running reregister_test.sh-TLS-true PASSED 18:49:35 ******************* 18:50:36 Running revoke_test.sh-TLS-true PASSED 18:50:37 ******************* 18:52:04 Running roundrobin_test.sh-TLS-true PASSED 18:52:04 ******************* 18:52:28 Running safesql_test.sh-TLS-true PASSED 18:52:28 ******************* 18:52:28 Running version_test.sh-TLS-true PASSED 18:52:29 ******************* 18:53:03 Running backwards_comp_test.sh-TLS-false PASSED 18:53:03 ******************* 18:53:15 Running cdp_exploit_test.sh-TLS-false PASSED 18:53:15 ******************* 18:55:46 Running cluster_test.sh-TLS-false PASSED 18:55:46 ******************* 18:56:18 Running db_test.sh-TLS-false PASSED 18:56:19 ******************* 18:57:10 Running dbmigration_test.sh-TLS-false PASSED 18:57:10 ******************* 18:58:29 Running enrollments_test.sh-TLS-false PASSED 18:58:29 ******************* 18:58:32 Running gencsr_test.sh-TLS-false PASSED 18:58:32 ******************* 18:58:46 Running group_test.sh-TLS-false PASSED 18:58:46 ******************* 18:59:29 Running intermediateca_test.sh-TLS-false PASSED 18:59:30 ******************* 19:00:54 Running keys_test.sh-TLS-false PASSED 19:00:55 ******************* 19:01:01 Running ldap_test.sh-TLS-false PASSED 19:01:02 ******************* 19:05:52 Running multica_test.sh-TLS-false PASSED 19:05:53 ******************* 19:06:34 Running passwordsInLog_test.sh-TLS-false PASSED 19:06:35 ******************* 19:06:45 Running postgres_test.sh-TLS-false PASSED 19:06:46 ******************* 19:09:06 Running reenroll_test.sh-TLS-false PASSED 19:09:06 ******************* 19:09:47 Running reregister_test.sh-TLS-false PASSED 19:09:48 ******************* 19:10:50 Running revoke_test.sh-TLS-false PASSED 19:10:51 ******************* 19:12:39 Running roundrobin_test.sh-TLS-false PASSED 19:12:40 ******************* 19:12:59 Running safesql_test.sh-TLS-false PASSED 19:13:00 ******************* 19:13:00 Running version_test.sh-TLS-false PASSED 19:13:00 RC: 0, backwards_comp PASSED 19:13:00 RC: 0, cdp_exploit_test.sh-TLS-true PASSED 19:13:00 RC: 0, cluster_test.sh-TLS-true PASSED 19:13:00 RC: 0, db_test.sh-TLS-true PASSED 19:13:00 RC: 0, db_migration PASSED 19:13:00 RC: 0, enrollments_test.sh-TLS-true PASSED 19:13:00 RC: 0, gencsr_test.sh-TLS-true PASSED 19:13:00 RC: 0, group_test.sh-TLS-true PASSED 19:13:00 RC: 0, intermediateca_test.sh-TLS-true PASSED 19:13:00 RC: 0, keys_test.sh-TLS-true PASSED 19:13:00 RC: 0, ldap_test.sh-TLS-true PASSED 19:13:00 RC: 0, multica_test.sh-TLS-true PASSED 19:13:00 RC: 0, passwordsInLog_test.sh-TLS-true PASSED 19:13:00 RC: 0, postgres PASSED 19:13:00 RC: 0, reenroll_test.sh-TLS-true PASSED 19:13:00 RC: 0, reregister_test.sh-TLS-true PASSED 19:13:00 RC: 0, revoke_test.sh-TLS-true PASSED 19:13:00 RC: 0, roundrobin_test.sh-TLS-true PASSED 19:13:00 RC: 0, safesql_test.sh-TLS-true PASSED 19:13:00 RC: 0, version_test.sh-TLS-true PASSED 19:13:00 RC: 0, backwards_comp PASSED 19:13:00 RC: 0, cdp_exploit_test.sh-TLS-false PASSED 19:13:00 RC: 0, cluster_test.sh-TLS-false PASSED 19:13:00 RC: 0, db_test.sh-TLS-false PASSED 19:13:00 RC: 0, db_migration PASSED 19:13:00 RC: 0, enrollments_test.sh-TLS-false PASSED 19:13:00 RC: 0, gencsr_test.sh-TLS-false PASSED 19:13:00 RC: 0, group_test.sh-TLS-false PASSED 19:13:00 RC: 0, intermediateca_test.sh-TLS-false PASSED 19:13:00 RC: 0, keys_test.sh-TLS-false PASSED 19:13:00 RC: 0, ldap_test.sh-TLS-false PASSED 19:13:00 RC: 0, multica_test.sh-TLS-false PASSED 19:13:00 RC: 0, passwordsInLog_test.sh-TLS-false PASSED 19:13:00 RC: 0, postgres PASSED 19:13:00 RC: 0, reenroll_test.sh-TLS-false PASSED 19:13:00 RC: 0, reregister_test.sh-TLS-false PASSED 19:13:00 RC: 0, revoke_test.sh-TLS-false PASSED 19:13:00 RC: 0, roundrobin_test.sh-TLS-false PASSED 19:13:00 RC: 0, safesql_test.sh-TLS-false PASSED 19:13:00 RC: 0, version_test.sh-TLS-false PASSED 19:13:00 Finished running fvt tests 19:13:00  19:13:00 ######################################################################### 19:13:00 RC: 0, fabric-ca-fvt PASSED 19:13:00 40 minutes, 24 seconds runtime 19:13:00 TIMESTAMP--2018-01-29 07:13:00PM fabric-ca-fvt ENDED 19:13:00 ######################################################################### 19:13:00 TIMESTAMP--2018-01-29 07:13:00PM 19:13:00 fabric-ca-fvt test ended. {code}  Currently working on failing this test if there are any potentially unsafe SQL statements included in the code base.   ></body> </Action>
<Action id="39715" issue="13855" author="jtclark" type="comment" created="2018-02-06 14:08:46.0" updateauthor="jtclark" updated="2018-02-06 14:08:46.0"> <body><! CDATA Status Update:  The safesql_test.sh now attempts to redirect the output of the test to a temporary file. This file will be analyzed to determine if any "warnings" or "failures" were received as a result of running the safesql tool against the fabric-ca-client and fabric-ca-server directories inside of the fabric-ca project. Once we are able to parse the output, we can alter the return code to "fail" the test if anything is received other than: *_"You're safe from SQL injection! Yay \o/"_* (as indicated here: https://github.com/stripe/safesql#usage)  ></body> </Action>
<Action id="39751" issue="13855" author="jtclark" type="comment" created="2018-02-07 01:02:44.0" updateauthor="jtclark" updated="2018-02-07 01:02:44.0"> <body><! CDATA Update ======  The *safesql_test.sh* script was updated to check for failures while running the safesql tool, and exit with a RC of 1 if any failures were found. Output from the FVT test script that runs as part of the fabric-ca-verify job now outputs as follows:  {code:java} 23:34:29  Running safesql_test.sh-TLS-false FAILED 23:34:29  ****** ERROR ****** safesql_test.sh-TLS-false failed  23:34:29  23:34:29 ######################################################################### 23:34:29 RC: 1, safesql_test.sh-TLS-false FAILED 23:34:29 0 minutes, 13 seconds runtime 23:34:29 TIMESTAMP--2018-02-06 11:34:29PM safesql_test.sh-TLS-false ENDED 23:34:29 ######################################################################### 23:34:29 TIMESTAMP--2018-02-06 11:34:29PM 23:34:29 safesql_test.sh-TLS-false test ended. 23:34:29 RC: 1, safesql_test.sh-TLS-false FAILED 23:34:29 Finished running fvt tests {code}  Last items we need on this task are:  1.) Display the error output on failure 2.) Attempt to provide a --skip option (in the event that the warnings or failures are false positives)   ></body> </Action>
<Action id="39827" issue="13855" author="jtclark" type="comment" body="Patch has been submitted: https://gerrit.hyperledger.org/r/#/c/17649/" created="2018-02-07 22:08:39.0" updateauthor="jtclark" updated="2018-02-07 22:08:39.0"/>
<Action id="40038" issue="13855" author="jtclark" type="comment" created="2018-02-12 20:53:33.0" updateauthor="jtclark" updated="2018-02-12 20:53:33.0"> <body><! CDATA A new patch has been submitted: https://gerrit.hyperledger.org/r/#/c/17809/.  This newest version of the script runs the SafeSql tool against the fabric-ca-client and fabric-ca-server directories inside of the fabric-ca project, passes when there are no issues, and fails when potentially unsafe SQL injections are discovered.   The $RC is updated to a fail when this happens, thereby failing the FVT tests as a whole, which is the expected behavior. Currently when the script runs, 61 potentially unsafe SQL queries are identified within the fabric-ca codebase.  I've talked this over with  ~rameshthoomu ,  ~rennman , and  ~ry  who've asked me to review the test results with the fabric-ca development team, namely  ~smithbk . Once we have either resolved these issues and/or identified them as false positives, the above changed will be merged.  ></body> </Action>
<Action id="40051" issue="13855" author="jtclark" type="comment" body="Code Review +2. Waiting for Merge." created="2018-02-13 09:55:54.0" updateauthor="jtclark" updated="2018-02-13 09:55:54.0"/>
<Action id="40927" issue="13855" author="jtclark" type="comment" body="Code Review +2 was removed by  ~smithbk . Checking w/ him to see what the status is on validating the test results." created="2018-02-27 14:36:50.0" updateauthor="jtclark" updated="2018-02-27 14:36:50.0"/>
<Action id="40953" issue="13855" author="jtclark" type="comment" created="2018-02-27 19:18:21.0" updateauthor="jtclark" updated="2018-02-27 19:18:21.0"> <body><! CDATA _Comments from  ~smithbk  on the patch:_  Just looking at the safesql findings and seems like a lot of false positives ... although I haven't yet gone thru all 61 yet. At https://github.com/stripe/safesql#how-does-it-work, it says `or incorporate them using the package's safe placeholder mechanism` The ones found are using what I would consider the packages placeholder mechanism For example:  {code} stateUpdateSQL := "UPDATE users SET state = -1 WHERE (id = ?)"  res, err := u.db.Exec(u.db.Rebind(stateUpdateSQL), u.GetName()) {code}   uses ? to search for a particular user It honestly doesn't seem very helpful if it is going to flag all of these, because it really isn't possible to make all query strings constants        ></body> </Action>
<Action id="41156" issue="13855" author="jtclark" type="comment" body="Planning to meet with  ~smithbk ,  ~rameshthoomu , and  ~denyeart  next week to discuss next steps on this task." created="2018-03-02 20:26:23.0" updateauthor="jtclark" updated="2018-03-02 20:26:23.0"/>
<Action id="41224" issue="13855" author="jtclark" type="comment" body="Still need to catch up with  ~smithbk ,  ~rameshthoomu , and  ~denyeart  about this." created="2018-03-06 02:31:52.0" updateauthor="jtclark" updated="2018-03-06 02:31:52.0"/>
<Action id="41475" issue="13855" author="jtclark" type="comment" body=" ~denyeart  - &quot;Let&apos;s wait until 1.2.&quot; - https://gerrit.hyperledger.org/r/#/c/17809/" created="2018-03-12 16:26:24.0" updateauthor="jtclark" updated="2018-03-12 16:26:51.0"/>
<Action id="42635" issue="13855" author="jtclark" type="comment" created="2018-04-06 13:18:09.0" updateauthor="jtclark" updated="2018-04-06 13:18:36.0"> <body><! CDATA  ~ChristopherFerris  has informed us (https://gerrit.hyperledger.org/r/#/c/17809/) that we need to return working on this issue. At this point, we'll need to make a decision on what we're going to do with the "potentially unsafe queries".   ~denyeart ,  ~smithbk ,  ~rameshthoomu  - Please advise.  ></body> </Action>
<Action id="42788" issue="13855" author="jtclark" type="comment" created="2018-04-10 18:47:08.0" updateauthor="jtclark" updated="2018-04-10 18:47:08.0"> <body><! CDATA Spoke about this JIRA task during the #fabric-scrum meeting on 4/6/2018. The suggestion was made by  ~ashutosh_kumar  to create a non-voting job to cover these tests.   The plan is to create a weekly job, much like the fabric-goast-weekly-x86_64 job, and run the safesql script as a test script separate from the FVT test scripts being used currently.  ></body> </Action>
<Action id="43072" issue="13855" author="jtclark" type="comment" created="2018-04-18 01:03:43.0" updateauthor="jtclark" updated="2018-04-18 01:03:43.0"> <body><! CDATA Two patches have been prepared to test the approach mentioned above:  * https://gerrit.hyperledger.org/r/#/c/20695/ - Adds the run_safesql_scan script to the fabric-ca repo * https://gerrit.hyperledger.org/r/#/c/20681/ - Adds the fabric-ca-safesql-weekly job to Jenkins  Both patches are in-review, and  ~sambhavdutt  is testing this in our sandbox.  ></body> </Action>
<Action id="43131" issue="13855" author="jtclark" type="comment" created="2018-04-19 01:21:44.0" updateauthor="jtclark" updated="2018-04-19 01:21:44.0"> <body><! CDATA Re-tested this today. The scan is working. Here are the results from running the run_safesql_scan script as part of the fabric-ca-safesql-weekly job:   {code:java} 21:25:53 Found 61 potentially unsafe SQL statements: 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:1016:23 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:1115:23 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:1079:23 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:944:23 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:317:20 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbutil/dbutil.go:421:19 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbutil/dbutil.go:425:18 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbutil/dbutil.go:429:18 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbutil/dbutil.go:92:18 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbutil/dbutil.go:210:19 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbutil/dbutil.go:238:19 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbutil/dbutil.go:299:19 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbutil/dbutil.go:330:19 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:447:18 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:427:19 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:438:19 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:454:19 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:205:18 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:748:21 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:774:25 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:1016:35 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/certdbaccessor.go:222:49 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:635:39 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:648:38 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:555:44 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/certdbaccessor.go:155:19 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/certdbaccessor.go:222:19 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/certdbaccessor.go:261:19 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:555:19 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/vendor/github.com/cloudflare/cfssl/certdb/sql/database_accessor.go:136:19 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/vendor/github.com/cloudflare/cfssl/certdb/sql/database_accessor.go:255:19 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/vendor/github.com/cloudflare/cfssl/certdb/sql/database_accessor.go:166:19 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/vendor/github.com/cloudflare/cfssl/certdb/sql/database_accessor.go:181:19 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/vendor/github.com/cloudflare/cfssl/certdb/sql/database_accessor.go:151:19 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/vendor/github.com/cloudflare/cfssl/certdb/sql/database_accessor.go:270:19 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/certdbaccessor.go:183:16 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:475:16 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:289:16 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:601:27 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:608:26 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:635:27 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:648:26 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:575:26 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:427:29 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:438:29 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:748:31 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:821:44 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:215:23 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:361:17 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:369:17 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:402:17 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:519:18 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:524:18 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:705:17 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:726:18 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:828:17 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:821:18 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:396:14 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:200:15 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:697:15 21:25:53 - /w/workspace/fabric-ca-safesql-weekly-x86_64/gopath/src/github.com/hyperledger/fabric-ca/lib/dbaccessor.go:803:21 21:25:53 Please ensure that all SQL queries you use are compile-time constants. 21:25:53 You should always use parameterized queries or prepared statements 21:25:53 instead of building queries from strings. 21:25:53  21:25:53 ######################################################################### 21:25:53 RC: 1, safesql FAILED 21:25:53 0 minutes, 12 seconds runtime 21:25:53 TIMESTAMP--2018-04-18 09:25:53PM safesql ENDED 21:25:53 ######################################################################### {code}  Last thing is to ensure that a log of the weekly scan is publish to Nexus.  Also need to fix the @weekly frequency on the scan job as suggested by  ~bramwelt .  ></body> </Action>
<Action id="43510" issue="13855" author="jtclark" type="comment" created="2018-04-26 18:12:22.0" updateauthor="jtclark" updated="2018-04-26 18:12:22.0"> <body><! CDATA Here is the output from the most recent version of the fabric-ca-safesql-weekly job:   https://gist.github.com/ibm-jason/ae6300fe98f0153c00d9fe81a39c02c0  ></body> </Action>
<Action id="43650" issue="13855" author="jtclark" type="comment" created="2018-04-30 12:42:46.0" updateauthor="jtclark" updated="2018-04-30 12:42:46.0"> <body><! CDATA Both patches are still in review:  https://gerrit.hyperledger.org/r/#/c/20695/ - Adds the run_safesql_scan script to the fabric-ca repo https://gerrit.hyperledger.org/r/#/c/20681/ - Adds the fabric-ca-safesql-weekly job to Jenkins  Waiting for confirmation from  ~skarim  and/or  ~smithbk  from the fabric-ca team.   ></body> </Action>
<Action id="43751" issue="13855" author="jtclark" type="comment" created="2018-05-02 22:20:05.0" updateauthor="jtclark" updated="2018-05-02 22:20:05.0"> <body><! CDATA https://gerrit.hyperledger.org/r/#/c/20681/ - MERGED https://gerrit.hyperledger.org/r/#/c/20695/ - Ready to Submit  ></body> </Action>
