<Issue id="12633" key="FAB-332" number="332" project="10002" reporter="scottz" creator="scottz" type="10004" summary="single-client-single-peer transaction sequencing" priority="3" resolution="10000" status="6" created="2016-09-09 18:45:53.0" updated="2018-07-20 14:10:08.0" resolutiondate="2016-09-28 10:57:59.0" votes="0" watches="2" workflowId="36190"> <description><! CDATA Problem Summary It seems transactions are processed out of order, which would impact user use-cases. Invokes that are received by a specific peer node (while not enough nodes for consensus are running) from single chaincode client are queued and processed eventually after the other nodes recover and consensus resumes - BUT not until a few minutes later. In the meantime, the network processes some new invoke transactions received by all the peer nodes (including the one that had not dropped and that had received and queued a backlog, as well as the newly recovered nodes).  This issue is a port to Jira from GitHub hyperledger fabric issue #2265 https://github.com/hyperledger-archives/fabric/issues/2265  Description How To Reproduce My GO SDK testcases use a docker network of 4 peers running in batch mode with security, using exampe02. This was originally found using v0.5 commit image  5efed61, but can be reproduced using later releases. (My testcase has since been renamed to CAT_302_S0S1S2_IQ_R0R1_IQIQ.go, which is attached for reference). The actual GO testcase and script output and debug logfiles are attached to the archived github issue. Search for the string "+++" for key steps in the file: GO_TEST__CAT_31A_S0S1S2_IQ_R0R1s_IQsQIQ.go__WedJul2022:09:13UTC2016 in the zipfile QdTransOutOfOrder2.tar.gz  Here is the basic idea:  Start 4 node security network using vagrant with docker containers running chaincode_example02. Stop VP0, VP1, VP2. Send 50 invokes to VP3. Restart VP0, VP1. Send 1 Invoke to VP0. Send 2 Invokes to VP1. Send 8 Invokes to VP3. Query all peers and see that 11 were processed (instead of 61). Wait 2 or 3 more minutes, and query again and observe that 61 were processed. Expectations: Once peers restart and consensus resumes, I think that that any queued transactions on VP3 should be processed before new ones, not 3 minutes later.  An analogy: With $5 in my bank account, if I deposited $50 into my account, and then later go to the same bank teller to make an $11 withdrawal, I would expect the $50 to be available for withdrawal. I would not want to be charged an overdraft fee by the bank if the bank teller has set aside or misplaced my cash deposit (which they acknowledged receiving by giving me a receipt). If the bank rejects or delays processing my newer withdrawal request, then that is OK. But it would not be right if they process it and send my account balance below zero (and thus charge me an overdraft fee) before the previously deposited money is actually put into my account.  Some comments on the github issue history indicate it may not be a guarantee we can provide in an asynchronous system - and thus is an invalid expectation. Please confirm if this is true in the new architecture, and if the chaincode client could or should manage the sequencing itself by monitoring event notifications for the earlier transactions - so it could delay submitting any of the later transactions that happen to be dependent upon the completion of an earlier one.  ></description> </Issue>
