<Issue id="13553" key="FAB-1219" number="1219" project="10002" reporter="muralisr" assignee="angelo.decaro" creator="muralisr" type="10000" summary="Support access control policies for chaincode (creation, termination, invocation - in terms of chaincode library)" priority="2" resolution="10001" status="6" created="2016-11-29 14:09:32.0" updated="2020-01-22 18:42:56.0" resolutiondate="2020-01-22 18:42:56.0" votes="0" watches="3" workflowId="43149"> <description><! CDATA From  ~adc  -  In 0.5/0.6, we had two ways to perform access control.   1) The first was based on signatures. The metadata field contained  a signature of the invocation payload concatenated to the transaction binding. The chaincode was in charge to check the signature against a set of locally stored certificates in order to evaluate access control. An example of this mechanism was the chaincode asset_management.go.  2) The second solution was based on TCert's attributes. The chaincode was in charge to get the caller certificate and evaluate the attributes carried by the certificate. An example of this mechanism was the chaincode  asset_management_with_roles.go  Now, the implementation of the above mechanisms was mainly based on two fields extracted from the transaction. Namely, the caller certificate and the metadata.  In order to have the same mechanisms in v1, the chaincode needs a way to extract again the caller certificate and, this time, the transient field.   In addition the Shim also provides a way to access  the transaction binding (will the Unique TXID be sufficient for this purpose ?). We would need the same in v1 to implement  solution1) and also for the confidentiality library.  Within this epic, one would also need to enhance proposal structure with (transient) data field, i.e., a field that appears in the proposal, but not in the subsequent endorsed actions/transaction.  Also for  ~ales   ~ellaki   ~binhn   ~mastersingh24    ></description> </Issue>
