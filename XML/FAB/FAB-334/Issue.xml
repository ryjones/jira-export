<Issue id="12635" key="FAB-334" number="334" project="10002" reporter="scottz" creator="scottz" type="10004" summary="CH correct, but A/B values do not reflect early invokes, 3-4 minutes after new deployment" priority="3" resolution="10000" status="6" created="2016-09-09 19:50:08.0" updated="2018-07-20 14:10:09.0" resolutiondate="2017-04-07 20:06:23.0" votes="0" watches="1" workflowId="36192"> <description><! CDATA Problem Summary In a pbft batch network, after stop 3 of the 4 peers, send Deploy (which gets queued), and then restart 2 of the 3 stopped peers and wait 3 minutes. Any new invokes appear to get dropped if they are sent within first couple minutes. More precisely, the blockchain contains blocks for those invokes, but the A & B values do NOT reflect them being processed.  This issue is a port to Jira from GitHub hyperledger fabric issue #2309 https://github.com/hyperledger-archives/fabric/issues/2309   The Deploy is processed, and then (just for those 11 invokes in the first few minutes) the chainheight increases but the values for A & B are unchanged. Then other invokes transactions are processed ok. When and what is the trigger that starts allowing the later transactions to be processed?  Interesting note: a similar testcase, where I stopped 2 nodes, deploy, and restarted one (instead of stop 3 nodes, deploy, and restart two) PASSES with consistency.   How To Reproduce  Start 4 node security network using vagrant with docker containers running chaincode_example02. This was originally found using IMAGE=3e0e80a (july 19) and IMAGE=5efed61 (june 27) on v0.5 branch, using testcase  CAT_36_S0S1S2_D_I_R0R1_IQshort.go (which has since been revised and renamed as CAT_403_S0S1S2_D_I_R0R1_IQ.go, which is attached).  # STOP PEER0 PEER1 PEER2 # Sleep 30 secs # DEPLOY chaincode via any available peer node (VP3), A=10000 B=10000 # Sleep 120 secs # INVOKEs total (100) spread among all 1 running peers (VP3) # RESTART PEER0 PEER1 # Sleep 60 secs # Sleep extra 120 secs # INVOKEs (1) using peer 0 # INVOKEs (2) using peer 1 # INVOKEs (8) using peer 3 # Sleep extra 120 secs # QUERY all running peers for a and b, and chainheight. All 3 running peers query results show that we processed the 100 transactions which had been sent to VP3 immediately after the deploy to VP3, but we did not process the 11 sent to VP0/1/3 a bit later. What is concerning is that the expected chainheight seems correct, indicating having processed all 11, but the query values for A & B appear to have lost all 11 transactions:  FAILED QUERY TEST: the required peers do NOT match!!!!!!!!!! EXPECTED A/B: 9889 10111. ACTUALs: PEER 0 9900 10100 PEER 1 9900 10100 PEER 3 9900 10100 PASSED CHAIN HEIGHT TEST: at least this matches on all Peers. Expected CH (111). Actual CHs: PEER0(111) PEER1(111) PEER3(111)  Also, soon afterwards, I sent INVOKEs total (5080) spread among all 3 running peers, and they were all processed correctly.   ></description> </Issue>
