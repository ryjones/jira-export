<Issue id="15697" key="FAB-3110" number="3110" project="10002" reporter="yacovm" assignee="yacovm" creator="yacovm" type="10004" summary="Gossip doesn&apos;t have timeout in a dialOption when running in production" priority="3" resolution="10000" status="6" created="2017-04-11 22:02:47.0" updated="2018-07-20 14:12:11.0" resolutiondate="2017-04-13 08:04:49.0" votes="0" watches="1" workflowId="37960"> <description><! CDATA https://github.com/hyperledger/fabric/blob/master/gossip/comm/comm_impl.go#L80 {code} 	if len(dialOpts) == 0 { 		dialOpts =   grpc.DialOption{grpc.WithTimeout(util.GetDurationOrDefault("peer.gossip.dialTimeout", defDialTimeout))} 	} {code} The dial timeout is only set in code paths that are in tests. In production, the gossip layers inherit dial options that are set in gossip_service, which doesn't set a dial timeout.  I suggest we simply add a dial timeout to the comm layer here: https://github.com/hyperledger/fabric/blob/master/gossip/comm/comm_impl.go#L126-L145 and that's it. {code} // NewCommInstance creates a new comm instance that binds itself to the given gRPC server func NewCommInstance(s *grpc.Server, cert *tls.Certificate, idStore identity.Mapper, peerIdentity api.PeerIdentityType, dialOpts ...grpc.DialOption) (Comm, error) { 	commInst, err := NewCommInstanceWithServer(-1, idStore, peerIdentity, dialOpts...) 	if err != nil { 		return nil, err 	}  	if cert != nil { 		inst := commInst.(*commImpl) 		if len(cert.Certificate) == 0 { 			inst.logger.Panic("Certificate supplied but certificate chain is empty") 		} else { 			inst.selfCertHash = certHashFromRawCert(cert.Certificate 0 ) 		} 	}  	proto.RegisterGossipServer(s, commInst.(*commImpl))  	return commInst, nil } {code}  ~C0rWin   ~gennadyl   ></description> </Issue>
