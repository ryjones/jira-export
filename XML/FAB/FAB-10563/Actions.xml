<Action id="45984" issue="30919" author="jyellick" type="comment" body="These are new flags that were introduced in v1.2.  Are you certain you are using a matching version of the docs, binaries, and samples?" created="2018-06-15 16:27:39.0" updateauthor="jyellick" updated="2018-06-15 16:27:39.0"/>
<Action id="45986" issue="30919" author="jyellick" type="comment" created="2018-06-15 16:37:19.0" updateauthor="jyellick" updated="2018-06-15 16:37:19.0"> <body><! CDATA Just confirmed with the latest peer binary:   {noformat} peer chaincode invoke --help Invoke the specified chaincode. It will try to commit the endorsed transaction to the network.  Usage: peer chaincode invoke  flags   Flags: -C, --channelID string               The channel on which this command should be executed --connectionProfile string       Connection profile that provides the necessary connection information for the network. Note: currently only supported for providing peer connection information -c, --ctor string                    Constructor message for the chaincode in JSON format (default "{}") -h, --help                           help for invoke -n, --name string                    Name of the chaincode --peerAddresses stringArray      The addresses of the peers to connect to --tlsRootCertFiles stringArray   If TLS is enabled, the paths to the TLS root cert files of the peers to connect to. The order and number of certs specified should match the --peerAddresses flag --waitForEvent                   Whether to wait for the event from each peer's deliver filtered service signifying that the 'invoke' transaction has been committed successfully --waitForEventTimeout duration   Time to wait for the event from each peer's deliver filtered service signifying that the 'invoke' transaction has been committed successfully (default 30s)  Global Flags: --cafile string                       Path to file containing PEM-encoded trusted certificate(s) for the ordering endpoint --certfile string                     Path to file containing PEM-encoded X509 public key to use for mutual TLS communication with the orderer endpoint --clientauth                          Use mutual TLS when communicating with the orderer endpoint --connTimeout duration                Timeout for client to connect (default 3s) --keyfile string                      Path to file containing PEM-encoded private key to use for mutual TLS communication with the orderer endpoint --logging-level string                Default logging level and overrides, see core.yaml for full syntax -o, --orderer string                      Ordering service endpoint --ordererTLSHostnameOverride string   The hostname override to use when validating the TLS connection to the orderer. --tls                                 Use TLS when communicating with the orderer endpoint --transient string                    Transient map of arguments in JSON encoding {noformat}  Both flags referenced by the doc are present.  Closing.   ></body> </Action>
