<Action id="34432" issue="23839" author="muralisr" type="comment" body=" ~wlahti  is the delivery service a different service than the channel event one or will they be incorporated into one ? It&apos;ll also be good to enumerate all the client side usage details (I guess these details are coming ?)" created="2017-11-07 19:45:05.0" updateauthor="muralisr" updated="2017-11-07 19:45:05.0"/>
<Action id="34433" issue="23839" author="wlahti" type="comment" body="The goal is to have the deliver service handle both typical block delivery as it does on the orderer as well as the &quot;event&quot; usage with ACL the channel service was designed to handle. " created="2017-11-07 19:50:40.0" updateauthor="wlahti" updated="2017-11-07 19:50:40.0"/>
<Action id="34441" issue="23839" author="kchristidis" type="comment" body="I&apos;m in and think it&apos;s a good idea. Do you wish to get this in for 1.1?" created="2017-11-08 02:50:10.0" updateauthor="kchristidis" updated="2017-11-08 02:50:10.0"/>
<Action id="34444" issue="23839" author="c0rwin" type="comment" body="This is indeed very good observation, I think that generalizing the delivery service to be reused for events hub is step into right direction." created="2017-11-08 08:54:11.0" updateauthor="c0rwin" updated="2017-11-08 08:54:11.0"/>
<Action id="34445" issue="23839" author="yacovm" type="comment" body="The most note-worthy gain is that we can use it send persisted events, in contrast to clients that right now - if they &quot;missed&quot; the event, they will never receive it and hence their application&apos;s logic either needs to deal with it, or it will be impaired." created="2017-11-08 08:56:10.0" updateauthor="yacovm" updated="2017-11-08 16:01:23.0"/>
<Action id="34446" issue="23839" author="c0rwin" type="comment" body="+100 for  ~yacovm  comment" created="2017-11-08 09:09:35.0" updateauthor="c0rwin" updated="2017-11-08 09:09:35.0"/>
<Action id="34447" issue="23839" author="denyeart" type="comment" body="I agree.  ~wlahti  is the assessment of requirements relative to what was intended for Channel Service and Filtered events complete?  Could you attempt to break down the subtasks here including SDK impact?  Note that you have the option of converting this to an &apos;Epic&apos; if you think there are unique Features under it, each with their own tasks/subtasks. Since Channel Service and Filtered events were targeted for v1.1, and this is intended to replace them, I will tag this for v1.1. Although, we will need to look at the sizing once the subtasks are defined." created="2017-11-08 10:34:47.0" updateauthor="denyeart" updated="2017-11-08 10:34:47.0"/>
<Action id="34456" issue="23839" author="binhn" type="comment" created="2017-11-08 15:07:29.0" updateauthor="binhn" updated="2017-11-08 15:07:29.0"> <body><! CDATA I've just saw this today via scrum text. Not much time to think yet but since so many have voted "y", I am rushing to put in my 2 cents.  Reusing code is always good, but reusing API that doesn't to same thing is generally bad. Orderer and peer behave differently, would we run the risks of making the "delivery" api ambiguous? That is, calling it against an orderer would behave differently than against a peer, especially when we are also thinking about adding events. We should definitely reuse the code, but I would recommend to change the name of the function on the peer side.     ></body> </Action>
<Action id="34459" issue="23839" author="scottz" type="comment" created="2017-11-08 16:19:59.0" updateauthor="scottz" updated="2017-11-08 16:19:59.0"> <body><! CDATA We need to remember this could require a bit of tool development too, so we need to include time in our schedule for PTE to be possibly redesigned a bit to incorporate the functionality, and rerun tests - after the node-sdk is changed after the peer is changed.  Per Dave's request for analysis, before we decide and implement, the APIs should be provided to all for review, to ensure all the previous and new requirements would be satisfied. That may prompt more questions.  Are we going to keep peer events as well as channel events?  Is each peer going to maintain another ledger, for each channel it is a member, for all the events, searchable by transaction id, and sortable by transaction as well as block?  When a client requests channel events, will it get an initial dump of all historical events on the channel, or just events from that point forwards? If a peer is created later and joins a channel later, will it be able to deliver all previous events if requested?  ></body> </Action>
<Action id="34468" issue="23839" author="yacovm" type="comment" created="2017-11-08 18:39:22.0" updateauthor="yacovm" updated="2017-11-08 18:50:19.0"> <body><! CDATA All good Questions  ~scottz  . {quote}Are we going to keep peer events as well as channel events? {quote}    I'd say deprecate the old event service in 1.2 completely. This is a plurality, and the event service is lacking architecture-wise and as a result, can only be used by the peer's organization. {quote}Is each peer going to maintain another ledger, for each channel it is a member, for all the events, searchable by transaction id, and sortable by transaction as well as block? {quote} I don't know but I'd guess there is a way of having the client conveying to the peer "the last event I saw from you is event corresponding to block sequence i "  and the peer would know where to start when sending events to the client just like the orderer does so, and the events themselves would be taken from the existing ledger.    {quote}When a client requests channel events, will it get an initial dump of all historical events on the channel, or just events from that point forwards? {quote} This must be thought of, I guess.  My 2-cents would be not to do that if the gap is too high, but do that if the gap is low enough, and have the gap be configurable. {quote}If a peer is created later and joins a channel later, will it be able to deliver all previous events if requested? {quote} The way the deliver service is implemented is just by a ledger iterator, scanning the file system and starting from a given point that is dependent on the client. So, I'd say is should be able, but I don't think it's very useful to provide it. What can a client do if it has the entire blockchain? My guess is that clients are interested primarily in events related to whether their submitted transaction was validated or not, and what's the block height of a peer.  ></body> </Action>
<Action id="34496" issue="23839" author="mastersingh24" type="comment" created="2017-11-09 13:01:02.0" updateauthor="mastersingh24" updated="2017-11-09 13:01:02.0"> <body><! CDATA Sometimes I think that things are not clear because we write requirements in terms of how we are doing something rather than the problem we are trying to solve.  ~denyeart  alluded to this in his comment.  The whole goal is to implement a new feature which will allow clients to be notified when transactions have been processed and their status (and no other information).  Access will be gated on a per channel basis.  This functionality has been slated for v1.1 for a while now.  We can decide that it's too late to get it in depending on when the code is done, but we can separate that for since this has been on the v1.1 features.  So no matter how it is implemented, new tests, SDK pieces, etc are needed.  As a side note, the artist known as the "channel event service" is not replacing the EventHub in v1.1.  While there is a larger "plan" to leverage the new channel service for more in the future, it will not rip and replace the EventHub in v1.1.  As @yacov mentioned, we should consider deprecating the EventHub in v1.2 if the EventHub functions have been subsumed / replaced by the channel event service at that point.        ></body> </Action>
<Action id="34625" issue="23839" author="bstasyszyn" type="comment" body="Not sure of the conclusion of this discussion - is the Deliver service replacing the Channel Event Service for the 1.1 release? FAB-6243 (Go SDK support) has been blocked on this for a while." created="2017-11-14 15:51:26.0" updateauthor="bstasyszyn" updated="2017-11-14 15:51:26.0"/>
<Action id="34723" issue="23839" author="jeffgarratt" type="comment" body="Feature definition for this A&amp;D." created="2017-11-17 15:56:11.0" updateauthor="jeffgarratt" updated="2017-11-17 15:56:11.0"/>
<Action id="34784" issue="23839" author="wlahti" type="comment" body=" ~binhn  I&apos;m not sure I follow how calling deliver on the peer would be any different from calling it on the orderer. Seems to me both will deliver blocks and it&apos;s merely a matter of where the block is coming from. Can you elaborate on your statement?" created="2017-11-20 18:51:13.0" updateauthor="wlahti" updated="2017-11-20 18:51:13.0"/>
<Action id="35747" issue="23839" author="wlahti" type="comment" body="I&apos;ve hit a design issue while implementing deliver on the peer. I have opened FAB-7273 to collectively brainstorm how to best move forward. " created="2017-12-02 15:35:13.0" updateauthor="wlahti" updated="2017-12-02 15:35:13.0"/>
<Action id="35874" issue="23839" author="wlahti" type="comment" body="CRs for the subtasks that address this feature are now available in gerrit for review." created="2017-12-05 18:07:36.0" updateauthor="wlahti" updated="2017-12-05 18:07:36.0"/>
<Action id="38468" issue="23839" author="clayton sims" type="comment" body="marking based on subtask 7 being merged FAB-6160" created="2018-01-11 20:16:00.0" updateauthor="clayton sims" updated="2018-01-11 20:16:37.0"/>
