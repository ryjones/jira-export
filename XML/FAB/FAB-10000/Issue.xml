<Issue id="30110" key="FAB-10000" number="10000" project="10002" reporter="divyank" assignee="yacovm" creator="divyank" type="10004" summary="Gossip identity replication takes 20+ minutes" priority="3" resolution="10000" status="6" created="2018-05-10 15:16:29.0" updated="2019-01-24 07:01:29.0" resolutiondate="2018-05-18 19:11:16.0" votes="0" watches="3" workflowId="42137"> <environment><! CDATA +Network Setup:+  Four peers, two per org, three channels, one of which contains all orgs and the other two have one org each.  We override the following gossip settings: {code:java} Â Â Â Â Â  - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0b.domain:7051 Â Â Â Â Â  - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.domain:7051 Â Â Â Â Â  - CORE_PEER_GOSSIP_ORGLEADER=false Â Â Â Â Â  - CORE_PEER_GOSSIP_USELEADERELECTION=false Â Â Â Â Â  - CORE_PEER_GOSSIP_PULLINTERVAL=1s Â Â Â Â Â  - CORE_PEER_GOSSIP_REQUESTSTATEINFOINTERVAL=1s Â Â Â Â Â  - CORE_PEER_GOSSIP_PUBLISHSTATEINFOINTERVAL=1s Â Â Â Â Â  - CORE_PEER_GOSSIP_PVTDATA_MINPEERS=1 Â Â Â Â Â  - CORE_PEER_GOSSIP_PVTDATA_MAXPEERS=1 Â Â Â Â Â  - CORE_PEER_GOSSIP_PVTDATA_TRANSIENTSTOREMAXBLOCKRETENTION=500 {code} Out of the four peers (0,0b,1,1b), peer0 and peer1 are org leaders. In the attached log, peer0b and peer1b are not able to discover each other and display these warnings  ></environment> <description><! CDATA We are occasionally seeing hundreds of warnings in the peer logs (complete log attached) as it fails to authenticate alive gossip messages: {code:java}  33m2018-05-01 14:34:03.027 UTC  gossip/gossip  handleMessage -> WARN 0d8 0m Message GossipMessage: tag:EMPTY alive_msg:<membership:<endpoint:"peer1b.domain:7051" pki_id:"_6\206v5\233w\264\\\026\034Tgg\314w\246\326\226\310\324\376D/\354\0316\013\314q\202%" > timestamp:<inc_num:1525185127963606881 seq_num:350 > > , Envelope: 79 bytes, Signature: 71 bytes isn't valid {code} I gather that this is expected during startup as it takes time for peers to learn other peer's identities but the warning persists for twenty minutes after channel creation until a "Learned of a new certificate" log with the missing peer's identity arrives.  We are not able to reliably reproduce this issue but have seen it during many runs of our stress tests.  +Network Setup:+  Four peers, two per org, three channels, one of which contains all orgs and the other two have one org each.  We override the following gossip settings: {code:java} Â Â Â Â Â  - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0b.domain:7051 Â Â Â Â Â  - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.domain:7051 Â Â Â Â Â  - CORE_PEER_GOSSIP_ORGLEADER=false Â Â Â Â Â  - CORE_PEER_GOSSIP_USELEADERELECTION=false Â Â Â Â Â  - CORE_PEER_GOSSIP_PULLINTERVAL=1s Â Â Â Â Â  - CORE_PEER_GOSSIP_REQUESTSTATEINFOINTERVAL=1s Â Â Â Â Â  - CORE_PEER_GOSSIP_PUBLISHSTATEINFOINTERVAL=1s Â Â Â Â Â  - CORE_PEER_GOSSIP_PVTDATA_MINPEERS=1 Â Â Â Â Â  - CORE_PEER_GOSSIP_PVTDATA_MAXPEERS=1 Â Â Â Â Â  - CORE_PEER_GOSSIP_PVTDATA_TRANSIENTSTOREMAXBLOCKRETENTION=500 {code} Out of the four peers (0,0b,1,1b), peer0 and peer1 are org leaders. In the attached log, peer0b and peer1b are not able to discover each other and display these warnings  Â   ></description> </Issue>
