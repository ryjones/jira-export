<Action id="55458" issue="36617" author="kchristidis" type="comment" created="2019-01-09 19:29:59.0" updateauthor="kchristidis" updated="2019-01-12 04:16:57.0"> <body><! CDATA Example of an item that should be common across all tests and needs to be recorded here:  Logging for everything orderer-related should be set to DEBUG level. The only exception is {{orderer.common.cluster.step}}. (Thanks Yacov.)  ></body> </Action>
<Action id="55622" issue="36617" author="suryalnvs" type="comment" created="2019-01-14 16:20:23.0" updateauthor="suryalnvs" updated="2019-01-14 17:13:03.0"> <body><! CDATA Environment - IKS (3 worker nodes - Each node with 4CPU && 16 GB RAM)  Fabric Network - 3 Orderers, 2 Organizations with 2 peers each are distributed across 3 workers nodes and running as each individual pod. Orderer's and Peer's Data is persisted to IBM Cloud block storage and uses amd64-2.0.0-stable images from nexus  Orderer's env variables - {code:java} containers: - name: orderer1st-ordererorg image: nexus3.hyperledger.org:10001/hyperledger/fabric-orderer:amd64-2.0.0-stable imagePullPolicy: Always env: - { name: "FABRIC_LOGGING_SPEC", value: "debug:orderer.common.cluster.step=error" } - { name: "ORDERER_GENERAL_LISTENADDRESS", value: "0.0.0.0" } - { name: "ORDERER_FILELEDGER_LOCATION", value: "/shared/data" } - { name: "ORDERER_CONSENSUS_WALDIR", value: "/shared/data/etcdraft/wal" } - { name: "ORDERER_CONSENSUS_SNAPDIR", value: "/shared/data/etcdraft/snapshot" } - { name: "ORDERER_GENERAL_GENESISMETHOD", value: "file" } - { name: "ORDERER_GENERAL_GENESISFILE", value: "/etc/hyperledger/fabric/artifacts/keyfiles/genesis.block" } - { name: "ORDERER_GENERAL_LOCALMSPID", value: "ordererorg" } - { name: "ORDERER_GENERAL_LOCALMSPDIR", value: "/etc/hyperledger/fabric/artifacts/keyfiles/ordererorg/orderers/orderer1st-ordererorg.ordererorg/msp" } - { name: "ORDERER_GENERAL_TLS_ENABLED", value: "true" } - { name: "ORDERER_GENERAL_TLS_PRIVATEKEY", value: "/etc/hyperledger/fabric/artifacts/keyfiles/ordererorg/orderers/orderer1st-ordererorg.ordererorg/tls/server.key" } - { name: "ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY", value: "/etc/hyperledger/fabric/artifacts/keyfiles/ordererorg/orderers/orderer1st-ordererorg.ordererorg/tls/server.key" } - { name: "ORDERER_GENERAL_TLS_CERTIFICATE", value: "/etc/hyperledger/fabric/artifacts/keyfiles/ordererorg/orderers/orderer1st-ordererorg.ordererorg/tls/server.crt" } - { name: "ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE", value: "/etc/hyperledger/fabric/artifacts/keyfiles/ordererorg/orderers/orderer1st-ordererorg.ordererorg/tls/server.crt" } - { name: "ORDERER_GENERAL_TLS_ROOTCAS", value: " /etc/hyperledger/fabric/artifacts/keyfiles/ordererorg/orderers/orderer1st-ordererorg.ordererorg/tls/ca.crt " } - { name: "ORDERER_GENERAL_CLUSTER_ROOTCAS", value: " /etc/hyperledger/fabric/artifacts/keyfiles/ordererorg/orderers/orderer1st-ordererorg.ordererorg/tls/ca.crt " } volumeMounts: - { mountPath: "/shared/data", name: "orderer-data-storage" } - { mountPath: "/etc/hyperledger/fabric/artifacts", name: "task-pv-storage" } command:  "orderer"  {code} Other two orderer's configuration also will look like the same except the orderer name.  All the orderers are using the default orderer.yaml from orderer image.  configtx.yaml: {code:java} --- Organizations: - &ordererorg Name: ordererorg ID: ordererorg MSPDir: /home/ibmadmin/cello/src/agent/ansible/roles/deploy_k8s/../../vars/raft/fabric/keyfiles/ordererorg/msp Policies: Readers: Type: Signature Rule: "OR('ordererorg.member')" Writers: Type: Signature Rule: "OR('ordererorg.member')" Admins: Type: Signature Rule: "OR('ordererorg.admin')"  - &org1 Name: org1 ID: org1 MSPDir: /home/ibmadmin/cello/src/agent/ansible/roles/deploy_k8s/../../vars/raft/fabric/keyfiles/org1/msp Policies: Readers: Type: Signature Rule: "OR('org1.admin', 'org1.peer')" Writers: Type: Signature Rule: "OR('org1.admin', 'org1.client')" Admins: Type: Signature Rule: "OR('org1.admin')" AnchorPeers: - Host: peer1st-org1 Port: 7051  - &org2 Name: org2 ID: org2 MSPDir: /home/ibmadmin/cello/src/agent/ansible/roles/deploy_k8s/../../vars/raft/fabric/keyfiles/org2/msp Policies: Readers: Type: Signature Rule: "OR('org2.admin', 'org2.peer')" Writers: Type: Signature Rule: "OR('org2.admin', 'org2.client')" Admins: Type: Signature Rule: "OR('org2.admin')" AnchorPeers: - Host: peer1st-org2 Port: 7051 Capabilities: Global: &ChannelCapabilities V1_3: true   Orderer: &OrdererCapabilities V1_1: true Application: &ApplicationCapabilities V1_3: true Orderer: &OrdererDefaults OrdererType: etcdraft Addresses: - orderer1st-ordererorg:7050 - orderer2nd-ordererorg:7050 - orderer3rd-ordererorg:7050 BatchTimeout: 2s BatchSize: MaxMessageCount: 1 AbsoluteMaxBytes: 98 MB PreferredMaxBytes: 512 KB EtcdRaft: Consenters: - Host: orderer1st-ordererorg Port: 7050 ClientTLSCert: /home/ibmadmin/cello/src/agent/ansible/roles/deploy_k8s/../../vars/raft/fabric/keyfiles/ordererorg/orderers/orderer1st-ordererorg.ordererorg/tls/server.crt ServerTLSCert: /home/ibmadmin/cello/src/agent/ansible/roles/deploy_k8s/../../vars/raft/fabric/keyfiles/ordererorg/orderers/orderer1st-ordererorg.ordererorg/tls/server.crt - Host: orderer2nd-ordererorg Port: 7050 ClientTLSCert: /home/ibmadmin/cello/src/agent/ansible/roles/deploy_k8s/../../vars/raft/fabric/keyfiles/ordererorg/orderers/orderer2nd-ordererorg.ordererorg/tls/server.crt ServerTLSCert: /home/ibmadmin/cello/src/agent/ansible/roles/deploy_k8s/../../vars/raft/fabric/keyfiles/ordererorg/orderers/orderer2nd-ordererorg.ordererorg/tls/server.crt - Host: orderer3rd-ordererorg Port: 7050 ClientTLSCert: /home/ibmadmin/cello/src/agent/ansible/roles/deploy_k8s/../../vars/raft/fabric/keyfiles/ordererorg/orderers/orderer3rd-ordererorg.ordererorg/tls/server.crt ServerTLSCert: /home/ibmadmin/cello/src/agent/ansible/roles/deploy_k8s/../../vars/raft/fabric/keyfiles/ordererorg/orderers/orderer3rd-ordererorg.ordererorg/tls/server.crt Options: TickInterval: 100 ElectionTick: 10 HeartbeatTick: 1 MaxInflightMsgs: 256 MaxSizePerMsg: 1048576 Organizations: - *ordererorg Policies: Readers: Type: ImplicitMeta Rule: "ANY Readers" Writers: Type: ImplicitMeta Rule: "ANY Writers" Admins: Type: ImplicitMeta Rule: "MAJORITY Admins" BlockValidation: Type: ImplicitMeta Rule: "ANY Writers" Capabilities: <<: *OrdererCapabilities Application: &ApplicationDefaults Organizations: - *org1 - *org2 Policies: Readers: Type: ImplicitMeta Rule: "ANY Readers" Writers: Type: ImplicitMeta Rule: "ANY Writers" Admins: Type: ImplicitMeta Rule: "MAJORITY Admins" Capabilities: <<: *ApplicationCapabilitiesChannel: &ChannelDefaults Policies: Readers: Type: ImplicitMeta Rule: "ANY Readers" Writers: Type: ImplicitMeta Rule: "ANY Writers" Admins: Type: ImplicitMeta Rule: "MAJORITY Admins"Profiles: OrgChannel: Consortium: FabricConsortium Application: <<: *ApplicationDefaults Orderer: <<: *OrdererDefaults EtcdRaft: Consenters: - Host: orderer1st-ordererorg Port: 7050 ClientTLSCert: /home/ibmadmin/cello/src/agent/ansible/roles/deploy_k8s/../../vars/raft/fabric/keyfiles/ordererorg/orderers/orderer1st-ordererorg.ordererorg/tls/server.crt ServerTLSCert: /home/ibmadmin/cello/src/agent/ansible/roles/deploy_k8s/../../vars/raft/fabric/keyfiles/ordererorg/orderers/orderer1st-ordererorg.ordererorg/tls/server.crt - Host: orderer2nd-ordererorg Port: 7050 ClientTLSCert: /home/ibmadmin/cello/src/agent/ansible/roles/deploy_k8s/../../vars/raft/fabric/keyfiles/ordererorg/orderers/orderer2nd-ordererorg.ordererorg/tls/server.crt ServerTLSCert: /home/ibmadmin/cello/src/agent/ansible/roles/deploy_k8s/../../vars/raft/fabric/keyfiles/ordererorg/orderers/orderer2nd-ordererorg.ordererorg/tls/server.crt - Host: orderer3rd-ordererorg Port: 7050 ClientTLSCert: /home/ibmadmin/cello/src/agent/ansible/roles/deploy_k8s/../../vars/raft/fabric/keyfiles/ordererorg/orderers/orderer3rd-ordererorg.ordererorg/tls/server.crt ServerTLSCert: /home/ibmadmin/cello/src/agent/ansible/roles/deploy_k8s/../../vars/raft/fabric/keyfiles/ordererorg/orderers/orderer3rd-ordererorg.ordererorg/tls/server.crt OrdererGenesis: <<: *ChannelDefaults Capabilities: <<: *ChannelCapabilities Orderer: <<: *OrdererDefaults Consortiums: FabricConsortium: Organizations: - *org1 - *org2 {code}    ></body> </Action>
<Action id="55639" issue="36617" author="denyeart" type="comment" body=" ~scottz  Why is this a Story?  Our precedent is to use Stories for user facing functions, while using Test Tasks for tests." created="2019-01-14 18:05:20.0" updateauthor="denyeart" updated="2019-01-14 18:05:20.0"/>
<Action id="55654" issue="36617" author="kchristidis" type="comment" created="2019-01-14 23:03:46.0" updateauthor="kchristidis" updated="2019-01-14 23:03:46.0"> <body><! CDATA  ~denyeart : I know we discussed this offline but posting this here for reference as well.  I'm to blame for this. My thinking was the following:  If you consider the Raft epic to be a level-1 node, the level-2 nodes are its development stories, and the level-3 nodes are the sub-tasks of those stories.  > Raft epic >> Dev story 1 >>> Sub-task 1-1 >>> Sub-task 1-2 >> Dev story 2 >>> Sub-task 2-1 >>> Sub-task 2-2  Given that we'll tackle a bunch of test cases, we would end up with an epic with 6-7 stories for development and, say, 40 test tasks, all in Level 2.  This makes visual tracking a bit difficult, so the tasks should be given equal weight, so they need to be treated as level-3 nodes.  This why I asked the team to create a container story and work with sub-tasks instead.  That said -- as you explained, I get that we need to track tests using the Test Case type because it carries special fields that we actually use, so we'll switch our MO.  Sorry about that.  ></body> </Action>
<Action id="55658" issue="36617" author="kchristidis" type="comment" body="Moving to https://jira.hyperledger.org/browse/FAB-13538 instead." created="2019-01-15 03:11:05.0" updateauthor="kchristidis" updated="2019-01-15 03:11:05.0"/>
