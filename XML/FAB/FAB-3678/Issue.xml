<Issue id="16357" key="FAB-3678" number="3678" project="10002" reporter="elli-androulaki" creator="elli-androulaki" type="10001" summary="Bind blockchain time to real-world time (e.g., used for standard X.509 certificates expiration)" priority="2" status="10000" created="2017-05-05 13:03:37.0" updated="2019-05-30 10:58:14.0" votes="4" watches="18" workflowId="35161"> <description><! CDATA Below you may find an overview of the issue and a couple of candidate solutions. Work-arounds have been designed for v1, as described in FAB-4138.     *Issue:* We need a way to connect certificate expiration time (currently expressed by means of "real" time) to blockchain time (e.g., blocks in the chain), such that all the committing peers of the channel can properly assess the validity of a certificate when committing a tx regardless of the actual real time peers join the channel.  Even if we assume that certificates are renewed long before they expire, so that no chance to cause state-forks (at commiting peers who are part of the channel), we still have the issue that a peer that joins a channel much later than the cert's expiration time, cannot validate properly any of the endorsed transactions with expired endorser/client certificates. This issue was reported by  ~adc .  There are a couple of options to deal with this in the default MSP implementation:  *Option 1: Express certificate expiration in blockchain terms (e.g., number of block a certificate should expire)*  This can be done by including in the standard X.509 certificate (as part of the extension fields) an attribute denoting the expiration period expressed in number of blocks; this mechanism is simple, but requires some work to test it out (need to force some structure to X.509 extensions), and is inflexible given that for long periods of real time a certificate is valid in one chain (slow), and invalid in others (fast chains).   An alternative design but in the same spirit would require to include in the genesis of a channel the "terms" of translating a real-time expressed expiration period to the logical time (i.e., block sequence number the cert is to expire). This can be a parameter (hardcoded for now) to indicate the translation between real time, and block-time. MSP could leverage these "terms" (e.g., time frequency of blocks) to map the expiration date listed in the standard x.509 certificate to logical time, and from there assess the validity or not of a certain certificate. This option gives us higher flexibility given that some channel can be configured to be super slowly evolving, while others progress faster, and does not require any structure of the X.509 extension field. However, it still requires some clear policy of who is allowed to update the translation terms.  *Option 2: Include notifications of real-time updates to the blockchain*  At two ways to achieve this: * By having the application "announcing", e.g., via some sort of configuraiton value the "current time" to the chain. This can be an additional configuration item included in genesis block, and requires some policy specification of who is trusted to update this configuration parameter. * By having orderers include inside BlockHeader a timestamp (a timestamp all orderers agree on) that accompanies block generation; this would require modifying the proto messages, and ensure that orderers reach consensus over the timestamp itself (despite clock drifts that may exist between orderers). For Kafka, the latter should be easier to be implemented, but for sBFT this may get more complex. However it is a change in the proto messages that we may need to do in the future.         ></description> </Issue>
