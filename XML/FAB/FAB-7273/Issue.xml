<Issue id="24694" key="FAB-7273" number="7273" project="10002" reporter="wlahti" assignee="wlahti" creator="wlahti" type="10003" summary="Update deliver to facilitate usage by peer and orderer " priority="3" resolution="10000" status="6" created="2017-12-02 15:33:21.0" updated="2018-08-15 23:44:21.0" resolutiondate="2017-12-07 20:10:49.0" votes="0" watches="6" workflowId="40700"> <description><! CDATA Analysis:  The current deliver logic relies on the fact that the orderer directly appends to its file ledger via  https://github.com/hyperledger/fabric/blob/master/orderer/common/ledger/file/impl.go#L124  and then sends a signal that a new block is ready. The orderer is able to do so because it has direct access to its blockstore, which it uses to add blocks to the ledger. The peer's blocks are added via the committer logic, which (I'm assuming) can't and shouldn't have to know that an interested party (here, a deliver server), is waiting for new blocks. The peer can only interact with its ledger via the PeerLedger interface:  https://github.com/hyperledger/fabric/blob/master/core/ledger/ledger_interface.go#L45|https://github.com/hyperledger/fabric/blob/master/core/ledger/ledger_interface.go#L45.  .  We need to determine a non-blocking way that the peer can be signaled (but I'm not suggesting we have to continue using the exact signal logic that's in place) when a new block is added while still ensuring the orderer's use case is satisfied.  Useful links:  * the deliver code that waits for the signal before retrieving the next block can be found here:  https://github.com/hyperledger/fabric/blob/master/orderer/common/deliver/deliver.go#L175   * pending CR that moves deliver (and the ledger wrapper structs deliver uses) into fabric/common can be found here:   https://gerrit.hyperledger.org/r/#/c/15673      One side note to keep in mind: the deliver functionality currently supports not only file ledgers but also a RAM and JSON ledger implementation. These are only used in unit tests but its worth keeping in mind that a redesign of the file ledger will either require a redesign of those implementations or perhaps removing them from the codebase.   ></description> </Issue>
