<Issue id="37021" key="FAB-13809" number="13809" project="10002" reporter="scottz" assignee="suryalnvs" creator="scottz" type="10101" summary="Long Run for memory analysis: Don&apos;t crash any OSN (single-thread invocations, 1 channel, latency mode)" priority="3" resolution="10000" status="6" created="2019-01-21 19:31:47.0" updated="2019-03-15 16:36:10.0" resolutiondate="2019-03-15 16:36:10.0" votes="0" watches="1" workflowId="48590"> <description><! CDATA Execute testcase FAB-13601 but run it for a week. Don't crash any OSN, while running single-thread invocations, 1 channel, latency mode.  And monitor the prometheus metrics, such as memory consumption.   Check with design team for any particular orderer system metrics for consensus or raft or others to monitor - although we realize that feature code might not be ready yet for verification.     Design team provided these instructions to enable the golang profiler before start test (using ORDERER_GENERAL_PROFILE):      https://github.com/hyperledger/fabric/blob/master/sampleconfig/orderer.yaml#L135-L136     For suspected memory leak, they suggest to collect during/after the test:       To see how many connections the orderer has          netstat -anp | grep orderer      Connect to orderer and dump the stacktrace goroutines into the output, to check for goroutine leak:          kill -SIGUSR1 1      An enumeration of the open file descriptors (the <pid> is the process ID)          cd /proc/<pid>; ls -lr /<pid>/fd | wc -l       Collect the logs too.  ></description> </Issue>
