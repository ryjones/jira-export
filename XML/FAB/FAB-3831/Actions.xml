<Action id="24067" issue="16603" author="kchristidis" type="comment" body="( ~jyellick : tagging you on this so that it&apos;s on your radar.)" created="2017-05-19 12:16:45.0" updateauthor="kchristidis" updated="2017-05-19 12:16:45.0"/>
<Action id="25515" issue="16603" author="jyellick" type="comment" created="2017-06-06 15:17:38.0" updateauthor="jyellick" updated="2017-06-06 15:17:38.0"> <body><! CDATA I've looked at implementing this a couple of ways.  No matter how this is cut, it's likely to be a substantial amount of work, and I'm a little concerned about how invasive it might be.  Do we see this as a must have for v1? Or are we open to deferring it?  ></body> </Action>
<Action id="25555" issue="16603" author="ptippett" type="comment" body="It seems we have to prevent this somehow, or if someone gets themselves in this situation, they&apos;ve ruined their network.  Perhaps we can fix this in the HSBN UI, but that wouldn&apos;t fix any flows outside of that." created="2017-06-06 17:18:43.0" updateauthor="ptippett" updated="2017-06-06 17:18:43.0"/>
<Action id="25572" issue="16603" author="mastersingh24" type="comment" body="I have some ideas on what we *might* be able to do here to handle the obvious cases, but we might need to defer until a minor or patch release" created="2017-06-06 20:08:00.0" updateauthor="mastersingh24" updated="2017-06-06 20:08:00.0"/>
<Action id="25654" issue="16603" author="jyellick" type="comment" created="2017-06-07 15:12:39.0" updateauthor="jyellick" updated="2017-06-07 15:12:39.0"> <body><! CDATA The difficulty in implementing this, is that to do so really requires working against the design of the system.  Identities in the policy system ultimately end up being represented by MSP principals.  MSP principals are designed to be opaque to the consumer, and instead, the consumer is supposed to ask if a given identity satisfies a principal.  The question of "what organization is capable of satisfying this principal" is not a natural one in this system, and in fact, in general this question is not answerable for all principal types (IDENTITY principals in particular cannot map in this direction).  So, in order to implement this, I see this as requiring one of two things to happen:  1. Modify the configtx related code which is not supposed to have any understanding of the internal workings of the MSP structures to gain that knowledge and start interrogating them. (Now we have potentially a maintenance headache) 2. Modifying the MSP interfaces to map principals back to MSP ID if it is possible, then modifying the configtx related code to consume this. (Hopefully cleaner, but I suspect more work, and the interfaces are not obvious to me).  I'd be curious to hear from  ~ellaki   ~angelo.decaro   ~ales  or anyone else what the most 'true to the spriit of MSPs' solution is.  ></body> </Action>
<Action id="25682" issue="16603" author="jyellick" type="comment" created="2017-06-07 18:12:17.0" updateauthor="jyellick" updated="2017-06-07 18:12:17.0"> <body><! CDATA After some out of band discussion with  ~ptippett , here is a compromise solution which seems to address everyone's concerns.  Rather than have the orderer perform these sanity checks directly on incoming config transactions, which comes with all of the problems outlined above, we can build this functionality into the `configtxlator` tool.  In this way, there is no risk to the hardened production code path, but a client application can still get error reports about configuration before it takes affect.  ></body> </Action>
<Action id="25706" issue="16603" author="denyeart" type="comment" created="2017-06-07 21:28:26.0" updateauthor="denyeart" updated="2017-06-07 21:28:26.0"> <body><! CDATA  ~jyellick   Could you outline what the configtxlator flow would look like?  Do we expect the majority of Fabric consumers to utilize configtxlator tool?  Or should it be thought of as a stopgap that will eventually be replaced by something else?     ></body> </Action>
<Action id="25719" issue="16603" author="jyellick" type="comment" created="2017-06-08 02:59:20.0" updateauthor="jyellick" updated="2017-06-08 02:59:20.0"> <body><! CDATA  ~denyeart  The typical {{configtxlator}} flow works (already) as follows.  1. User fetches config block via SDK 2. User uses {{configtxlator}} to get user friendlier version of config 3. User modifies copy of config 4. User submits original config, and updated config to {{configtxlator}} to compute config update. 5. User submits config update with signatures via the SDK.  Essentially, this would inject a step between 3/4, where the user submits the updated config to {{configtxlator}} to perform sanity checks against the target configuration.  As I said, in the long term, we may wish to try enforcing this issue outlined in the original description in the core configtx processing logic, (which would render the {{configtxlator}} sanity check redundant), but as for the moment, we expect users to be utilizing the {{configtxlator}} for config updates, it seems like a reasonable stopgap.  ></body> </Action>
<Action id="25751" issue="16603" author="binhn" type="comment" created="2017-06-08 15:11:26.0" updateauthor="binhn" updated="2017-06-08 15:11:26.0"> <body><! CDATA  ~jyellick  So my understanding from reading your stopgap proposal above is that we modify step 4 to perform sanity checks, but we don't want to (or can't) touch step 5 (mostly backend processing) because of the # potential risks | https://jira.hyperledger.org/browse/FAB-3831?focusedCommentId=25654&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-25654 .  That sounds reasonable, and it would give the user the confidence that he would not be shooting himself by submitting the config update, but this is also the drawback – I would consider this as new feature, and we would have to test the heck out of this to make sure it would not allow the users to shoot themselves.  I believe that, beside test networks, users would have appropriate admin tools to manage their networks, and so this is API document, and  ~ptippett  's admin tool would follow the API and not allow this situation.  In summary, I propose that we do the right thing post 1.0 rather than this stopgap (with a lot of work) at this point. However, we do need to document this scenario in our configuration doc.  ></body> </Action>
<Action id="25760" issue="16603" author="jyellick" type="comment" created="2017-06-08 16:08:17.0" updateauthor="jyellick" updated="2017-06-08 16:18:19.0"> <body><! CDATA > but this is also the drawback – I would consider this as new feature  So I would point out, that this is a 'new feature' only in so far as it enhances the {{configxlator}} tool, but since the tool has only existed for about a week at this point, I'm not certain that the new feature stop condition is reasonable here.  There has been a hard freeze on features in the core components for some time now, but as this is a tool, I think we can and should be a little more open to enhancements.  > and we would have to test the heck out of this to make sure it would not allow the users to shoot themselves.  I guess I am not certain where the large testing burden comes from.  We can test the scenario described here in 3831 rather easily, and for the time being, this will be the only scenario (other than general well formed-ness) that the sanity checking will catch.  As you can see from FAB-4468 and FAB-4469 (with CRs https://gerrit.hyperledger.org/r/10341 and https://gerrit.hyperledger.org/r/10343) respectively, this is actually fairly small from a code perspective, excluding tests, there is noticeably less than 200 new lines.  > beside test networks, users would have appropriate admin tools to manage their networks  I agree this is the goal, but I also believe we should make this as painless as possible for those admin tool developers.  The entire motivation for including {{configtxlator}} in the v1 release was so that admin tool developers (regardless of SDK) had some code to do some of the heavy lifting.  By including a small amount of additional code in {{configtxlator}} if we can potentially save days or weeks of frustration for an admin tool developer, this seems worthwhile to me.  > In summary, I propose that we do the right thing post 1.0 rather than this stopgap (with a lot of work) at this point.  The code is complete, though testing beyond unit tests and basic manual integration tests is pending.  I believe that sanity checking could be a valuable feature beyond even v1 and this issue as described.  Warning about expired certificates, modification policies with no backing definition, and other potential misconfigurations which should not be treated as fatal could still provide real value to users; so I'm not convinced that this is throwaway for when we 'do the right thing'.  ></body> </Action>
<Action id="25768" issue="16603" author="kchristidis" type="comment" body="I&apos;m all in favor of deferring, but I think the balance we&apos;re striking with this sanity check addition now is right. The scope of the sanity checks – as Jason noted – is limited and the work&apos;s already done. FWIW, my vote&apos;s for getting this in." created="2017-06-08 16:22:06.0" updateauthor="kchristidis" updated="2017-06-08 16:24:20.0"/>
<Action id="25822" issue="16603" author="angelo.decaro" type="comment" created="2017-06-09 07:35:21.0" updateauthor="angelo.decaro" updated="2017-06-09 07:35:21.0"> <body><! CDATA  ~jyellick , it looks to me an hard problem this. The question can be phrased as: given the new configuration is a policy still satisfiable? In general, this is hard problem whose complexity can be reduced if we add enough constraints. I would not say anyway that we need to modify the MSP logic to perform such an analysis, anyway.    I guess when you say 'user2 leaves' you mean either that user2 gets revoked or his organisation is revoked or the corresponding MSP gets removed from the channel. These conditions can be analysed by looking at the MSP principals and at the MSP configuration alone. No? Am I missing something?  ></body> </Action>
<Action id="25827" issue="16603" author="mastersingh24" type="comment" created="2017-06-09 11:39:03.0" updateauthor="mastersingh24" updated="2017-06-09 11:39:03.0"> <body><! CDATA Sanity checking in a tool which creates policies makes perfect sense and is not an uncommon practice.  I don't think we need to hold up a release for this, but if it's possible to get some basic sanity checking in for the common case(s) (e.g. don't remove an org when it is explicity reference elsewhere and don't explicitly include an org in a policy if it's not in the consortium or channel / app orgs) we should try to do this.  We are also trying to guide people to use best practices as well and while technically we support some very complex policies, I struggle to see why anyone would REALLY need to use some of them.  ></body> </Action>
<Action id="25829" issue="16603" author="mastersingh24" type="comment" body="So based on looking at the code up for review (which is more or less in line with my comment above) there&apos;s no reason not to get this in." created="2017-06-09 11:43:15.0" updateauthor="mastersingh24" updated="2017-06-09 11:43:15.0"/>
<Action id="25880" issue="16603" author="weeds" type="comment" body="Gerrit 10337" created="2017-06-09 16:58:06.0" updateauthor="weeds" updated="2017-06-09 16:58:06.0"/>
<Action id="25904" issue="16603" author="jyellick" type="comment" created="2017-06-09 19:07:13.0" updateauthor="jyellick" updated="2017-06-09 19:07:13.0"> <body><! CDATA Moved back to review, as still waiting on:  https://gerrit.hyperledger.org/r/10341 https://gerrit.hyperledger.org/r/10343  ></body> </Action>
<Action id="25942" issue="16603" author="christopherferris" type="comment" body="This has the requisite number of votes to be merged" created="2017-06-10 00:00:25.0" updateauthor="christopherferris" updated="2017-06-10 00:00:25.0"/>
