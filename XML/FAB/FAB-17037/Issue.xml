<Issue id="43236" key="FAB-17037" number="17037" project="10002" reporter="ryanmathison" assignee="manish-sethi" creator="ryanmathison" type="10004" summary="HLF peer not handling chaincode docker container endpoint staying connected after container was deleted" priority="3" status="10300" created="2019-11-08 15:08:28.0" updated="2020-11-30 22:20:13.0" votes="0" watches="2" workflowId="56342"> <description><! CDATA When we were running a test where peers were brought up and down randomly, one of the peers failed to restart with the following error   _{color:#bb0000}ERRO 2bca{color}  common-channel  aae5b25b  failed to invoke chaincode name:"mycc" , error: API error (403): endpoint with name nid1-peer1-org2-mycc-1.0 already exists in network host._  When we went and looked at our worker nodes, we could not find the container on any of them, yet the error persisted.  We next turned on debugging on for the peer, see  ^peer1-org2.log , which shows that the container is being created successfully and after the error is being deleted correctly so that was not the issue. I eventually found the  following post|https://github.com/moby/moby/issues/31768#issuecomment-338806433  on the docker github, and it said that it could be that the network endpoint was left open.  I queried the network endpoints and did find the entry.  _, "dac72130eba0ad3067b005ece0797910130ca23c7ff95b38eac30d74eb44da4f": { "Name": "nid1-peer0-org2-mycc-1.0", "EndpointID": "fdd8b47942c882d825715077a8f412cb8f4df69ced34a4c72d49809f98218891", "MacAddress": "", "IPv4Address": "", "IPv6Address": "" }_  The manual workaround ends up being  1.Exec into the peer container  2. Install curl if not already installed  3. Run the following command - Replace the container name with the one causing the problem     _curl -X POST --unix-config /host/var/run/docker.sock  http://localhost/networks/host/disconnect  -d '\{"Container":"nid1-peer1-org2-mycc-1.0","Force":true}' -H "Content-Type: application/json"_  I think that the hlf peer needs to be able to handle this situation as it seems to be a fairly common issue in docker. I think there a couple possible solutions. # Always try to remove the network entry after deleting the container # Catch the error, and remove the network entry           ></description> </Issue>
