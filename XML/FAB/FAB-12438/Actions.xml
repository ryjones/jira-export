<Action id="52182" issue="34641" author="kchristidis" type="comment" body="Ouch, that is not good. On it now." created="2018-10-12 18:20:21.0" updateauthor="kchristidis" updated="2018-10-12 18:20:21.0"/>
<Action id="52184" issue="34641" author="yacovm" type="comment" created="2018-10-12 18:47:58.0" updateauthor="yacovm" updated="2018-10-12 18:47:58.0"> <body><! CDATA {code:java} fmt.Println(reflect.TypeOf(chain), chain, chain == nil) // prints *multichannel.ChainSupport <nil> false{code}    It's because of  this|https://play.golang.org/p/tRZGWbF1VyF :  {code} package main  import ( 	"fmt" )  type chain struct {}  func (c *chain) BlockChain() {  }  type BlockChainer interface { BlockChain() }  var chains = map string *chain{}  func GetChain() BlockChainer  { 	return chains "mychannel"  }   func main() { 	fmt.Println(GetChain())        // nil 	fmt.Println(GetChain() == nil) // false }  {code}  ></body> </Action>
<Action id="52185" issue="34641" author="yacovm" type="comment" created="2018-10-12 18:52:24.0" updateauthor="yacovm" updated="2018-10-12 18:52:24.0"> <body><! CDATA This should fix it:    {code:java} diff --git a/orderer/common/server/server.go b/orderer/common/server/server.go index 6e74e19..41d8230 100644 --- a/orderer/common/server/server.go +++ b/orderer/common/server/server.go @@ -39,7 +39,11 @@ type deliverSupport struct { }  func (ds deliverSupport) GetChain(chainID string) deliver.Chain { -	return ds.Registrar.GetChain(chainID) +	chain := ds.Registrar.GetChain(chainID) +	if chain == nil { +		return nil +	} +	return chain }  type server struct { {code}  ></body> </Action>
<Action id="52188" issue="34641" author="yacovm" type="comment" body="https://gerrit.hyperledger.org/r/#/c/26963/" created="2018-10-12 19:12:59.0" updateauthor="yacovm" updated="2018-10-12 19:12:59.0"/>
<Action id="52195" issue="34641" author="kchristidis" type="comment" created="2018-10-12 21:42:52.0" updateauthor="kchristidis" updated="2018-10-12 21:42:52.0"> <body><! CDATA I have been burned by this before. For whomever else is curious, this is what happened here:  https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c  (skip to the "nil interface value" section). Key quote: {quote}Interface type value is nil iff both dynamic value and dynamic type are nil. The effect is that even if interface type value holds a nil pointer then such interface value is not nil. {quote}  ></body> </Action>
<Action id="52196" issue="34641" author="kchristidis" type="comment" body="/cc  ~huikang " created="2018-10-12 21:43:12.0" updateauthor="kchristidis" updated="2018-10-12 21:43:12.0"/>
<Action id="52198" issue="34641" author="huikang" type="comment" body=" ~kchristidis ,  ~yacovm , thanks for fixing this." created="2018-10-13 00:12:41.0" updateauthor="huikang" updated="2018-10-13 00:12:41.0"/>
<Action id="52199" issue="34641" author="huikang" type="comment" created="2018-10-13 00:17:16.0" updateauthor="huikang" updated="2018-10-13 00:17:16.0"> <body><! CDATA  ~sykesm , may I know how you find the panic? When I submitted the CR, I saw the CR passed unit test, integration test, ...  I must miss some steps. Thanks.  ></body> </Action>
<Action id="52202" issue="34641" author="yacovm" type="comment" created="2018-10-13 06:37:52.0" updateauthor="yacovm" updated="2018-10-13 06:37:52.0"> <body><! CDATA  ~huikang  -  It happens sometimes if the deliver request reaches the orderer before it has time to initialize its chains.  Ideally... there was a test that always checks this scenario of requesting deliver when the chains are not initialized but there wasn't.  ></body> </Action>
<Action id="52205" issue="34641" author="huikang" type="comment" created="2018-10-13 17:26:53.0" updateauthor="huikang" updated="2018-10-13 17:34:03.0"> <body><! CDATA  ~yacovm , thanks for your explanation.   I re-run the unit test on the code without your fix, and found that the unit-test shows *PASS* on the panic*:*    {quote}=== RUN   TestBroadcastNoPanic  2018-10-13 16:43:58.185 UTC  orderer/common/server  func1 -> ERRO 001 Broadcast client triggered panic: runtime error: invalid memory address or nil pointer dereference  goroutine 8  running :  runtime/debug.Stack(0xc420057dc8, 0x1200fc0, 0x1b3a340)  /usr/local/go/src/runtime/debug/stack.go:24 +0xa7  github.com/hyperledger/fabric/orderer/common/server.(*server).Broadcast.func1()  /go/src/github.com/hyperledger/fabric/orderer/common/server/server.go:138 +0x96  panic(0x1200fc0, 0x1b3a340)  /usr/local/go/src/runtime/panic.go:502 +0x229  github.com/hyperledger/fabric/orderer/common/server.(*server).Broadcast(0xc420057f70, 0x0, 0x0, 0x0, 0x0)  /go/src/github.com/hyperledger/fabric/orderer/common/server/server.go:142 +0xf7  github.com/hyperledger/fabric/orderer/common/server.TestBroadcastNoPanic(0xc42001ce10)  /go/src/github.com/hyperledger/fabric/orderer/common/server/server_test.go:30 +0x46  testing.tRunner(0xc42001ce10, 0x139e328)  /usr/local/go/src/testing/testing.go:777 +0xd0  created by testing.(*T).Run  /usr/local/go/src/testing/testing.go:824 +0x2e0  — PASS: TestBroadcastNoPanic (0.00s)  === RUN   TestDeliverNoPanic  2018-10-13 17:32:44.349 UTC  orderer/common/server  func1 -> ERRO 004 Deliver client triggered panic: runtime error: invalid memory address or nil pointer dereference  goroutine 112  running :  runtime/debug.Stack(0xc420c49db0, 0x1201460, 0x1b3a340)  /usr/local/go/src/runtime/debug/stack.go:24 +0xa7  github.com/hyperledger/fabric/orderer/common/server.(*server).Deliver.func1()  /go/src/github.com/hyperledger/fabric/orderer/common/server/server.go:160 +0x96  panic(0x1201460, 0x1b3a340)  /usr/local/go/src/runtime/panic.go:502 +0x229  github.com/hyperledger/fabric/orderer/common/server.(*server).Deliver(0xc420bdaa80, 0x0, 0x0, 0x0, 0x0)  /go/src/github.com/hyperledger/fabric/orderer/common/server/server.go:186 +0x201  github.com/hyperledger/fabric/orderer/common/server.TestDeliverNoPanic(0xc420bb2000)  /go/src/github.com/hyperledger/fabric/orderer/common/server/server_test.go:36 +0x43  testing.tRunner(0xc420bb2000, 0x139e868)  /usr/local/go/src/testing/testing.go:777 +0xd0  created by testing.(*T).Run  /usr/local/go/src/testing/testing.go:824 +0x2e0  --- PASS: TestDeliverNoPanic (0.00s) {quote}    That's probably why the Jenkins reported success for my previous CR. Should the unit test report failure on the panic?  ></body> </Action>
<Action id="52206" issue="34641" author="yacovm" type="comment" body="No, this is not the reason, and I think this is not the relevant test... I think the test was the performance test." created="2018-10-13 17:39:11.0" updateauthor="yacovm" updated="2018-10-13 17:39:11.0"/>
<Action id="52207" issue="34641" author="huikang" type="comment" body="Do you know what is the command I can run to reproduce the error? Even the error/panic is non-deterministic, I still want to see how it happened to avoid the same error next time. Thanks." created="2018-10-13 17:50:32.0" updateauthor="huikang" updated="2018-10-13 17:50:32.0"/>
<Action id="52208" issue="34641" author="yacovm" type="comment" body="make unit-tests" created="2018-10-13 17:53:28.0" updateauthor="yacovm" updated="2018-10-13 17:53:28.0"/>
