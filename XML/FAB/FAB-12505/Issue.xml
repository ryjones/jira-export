<Issue id="34742" key="FAB-12505" number="12505" project="10002" reporter="gokhankocak" creator="gokhankocak" type="10001" summary="General Purpose Smart Contract" priority="3" resolution="10001" status="6" created="2018-10-17 13:10:50.0" updated="2020-01-22 22:32:39.0" resolutiondate="2020-01-22 22:32:39.0" votes="0" watches="1" workflowId="46152"> <description><! CDATA A general purpose smart contract will be useful for most projects. Such a smart contract will enable application developers to easily integrate their application to Hyperledger Fabric.  I've written a general purpose smart contract than can store any key-value to either LevelDB or CouchDB. The idea is to pass the value as a JSON object and insert it to the ledger so that rich queries can be run.  An example with PutState()  User's application provides a key and a value in JSON, and the smart contract unmarshals and then marshals the value before calling shim's PutState() method. This makes the value field to appear in the CouchDB document as a valid JSON object.  So, the user's application can run native CouchDB queries on his data.  I've also added built-in support for Statsd reporting using the same go library as used in Fabric. Each call to GetState(), PutState() etc are counted and reported to the given statsd server.  Please find attached my implementation of general purpose smart contract.  Regards,  // Gokhan Â   ></description> </Issue>
