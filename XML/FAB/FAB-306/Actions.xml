<Action id="18780" issue="12607" author="hgabre" type="comment" body="Solution proposal: https://gerrit.hyperledger.org/r/#/c/841/" created="2016-09-05 11:06:38.0" updateauthor="hgabre" updated="2016-09-05 11:06:38.0"/>
<Action id="18786" issue="12607" author="bgorman" type="comment" created="2016-09-06 01:47:04.0" updateauthor="bgorman" updated="2016-09-06 01:47:04.0"> <body><! CDATA  ~ChristopherFerris  I don't think adding functions to the ChaincodeStubInterface would interfere with existing user-written chaincode. As long as the interface is implemented correctly in ChaincodeStub and MockStub, then it should be transparent to the users code. Careful consideration is of course needed with respect to what functions are added, as removing or modifying functions will break anyone's code that utilises them.  There are a couple of additional complications though. The fabric-chaintool and fabric-test-resources github projects may need to move in lock step for certain changes.  ></body> </Action>
<Action id="18787" issue="12607" author="bgorman" type="comment" created="2016-09-06 02:37:57.0" updateauthor="bgorman" updated="2016-09-06 02:38:17.0"> <body><! CDATA Also there is a workaround to this issue. The user could cast their ChaincodeStubInterface to a ChaincodeStub, then directly access the UUID member. Something like this:  var csi ChaincodeStubInterface cs := ChaincodeStub(csi) println(cs.UUID)  ></body> </Action>
