<Action id="35549" issue="21378" author="rennman" type="comment" created="2017-11-27 23:59:29.0" updateauthor="rennman" updated="2017-11-27 23:59:29.0"> <body><! CDATA currently planned to support for 1.1:   affiliations   identities  Two relatively invovled test cases, or perhaps 4 or so each, devoted to    add    modify    delete    get respectively     Should amount to a couple of days of automation work.  ></body> </Action>
<Action id="39199" issue="21378" author="rennman" type="comment" created="2018-01-26 20:11:07.0" updateauthor="rennman" updated="2018-01-31 20:38:22.0"> <body><! CDATA  CR: Test dyn add/mod/del identites|https://gerrit.hyperledger.org/r/#/c/17255/   CR: Dynamic modify of affiliations|https://gerrit.hyperledger.org/r/#/c/17389/    Identities * Authentication and Authorization Any operation requires user authencation, otherwise: ** Ensure identities can only be modified/added/removed/listed by authorized users (hf.Registrar.Roles) ** Ensure any users who are explicitly deleted have certs revoked ** Ensure we can add/modify any and all paramters encapsulated within an identity, including any and all attributes that may be associated with a user: type:, affiliation:, attrs: all hf.* attrs ** Ensure that user cannot modify hf.Type, hf.EnrollmentID * Adding/modifying an identity is essentially the same as registering an identity, so all of the auth checks should apply, e.g. ** user must have the "hf.Registrar.Roles" attribute ** the type of the identity being modified must be in the user's hf.Registrar.Roles list ** user can only add/modify users within it's own affiliation tree ** user cannot add/modify a user's attributes unless hf.Registar.Attributes is set ** user can add/modify a user with attributes only if the attribute key/pattern is in the users's hf.Registar.Attributes list ** user can only add/modify a user with hf.Registrar.Attributes if the requested set is a subset of the user ** user can only remove himself if --force is supplied  affiliations --- * Ensure affiliations can only be updated by authorized users (hf.AffiliationMgr) * Ensure the proper error message for adding an affiliation that already exists * Ensure the proper error message for removing an affiliation that doesn't exist * Ensure the proper error message for modifying an affiliation that doesn't exist * Ensure affiliations can only be deleted if cfg.affiliations.allowremove is configured * Ensure default for cfg.affiliations.allowremove is false * Ensure affiliations can only be deleted if no ID's are referencing them, unless:  -server   allows for deleting IDs AND --force flag is used * Ensure affiliations not being referenced can be deleted w/o the --force flag * Ensure that all children of a affiliation are deleted upon a delete of the parent * Ensure deleting affiliations can be disabled * Ensure admin cannot add affiliations higher in it's affiliation tree * Ensure admin can add affiliations lower in it's affiliation tree * Ensure that a remove of an aff level deletes lower levels * Ensure any users who are deleted as part of an affiliation deletion have certs revoked * Ensure any users who are deleted as part of an affiliation deletion are themselves, deleted * Ensure that the client must be authorized to any identity affected by a modify or delete * Ensure that --force is required if any users are affected by an 'affiliation modify'   * Ensure that client may not delete his own affiliation *Test hf.AffiliationMgr with valuesof 'true', 'T', '1', 'false', 'F', '0'   ></body> </Action>
<Action id="39886" issue="21378" author="rennman" type="comment" body="Tests are merged successfully." created="2018-02-08 20:14:27.0" updateauthor="rennman" updated="2018-02-08 20:14:27.0"/>
