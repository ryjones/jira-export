<Issue id="35941" key="FAB-13185" number="13185" project="10002" reporter="muralisr" assignee="muralisr" creator="muralisr" type="10100" summary="cleanup core.yaml comments" priority="3" resolution="10000" status="6" created="2018-12-06 17:55:55.0" updated="2018-12-07 23:22:00.0" resolutiondate="2018-12-07 23:17:11.0" votes="0" watches="2" workflowId="47447"> <description><! CDATA {code:java} TL;DR; This FAB is a minimal fix to remove the suggestion in core.yaml that users need to work with *core/scc/importsysccs.go* for creating system chaincode statically built into fabric. {code}  Details :  The following section gives the impression that system chaincodes can be statically built into peer by "importing" them into *core/chaincode/importsysccs.go*.  {code:java} # System chaincode plugins: in addition to being imported and compiled # into fabric through core/chaincode/importsysccs.go, system chaincodes # can also be loaded as shared objects compiled as Go plugins. # See examples/plugins/scc for an example. # Like regular system chaincodes, plugins must also be white listed in the # chaincode.system section above. systemPlugins: # example configuration: # - enabled: true #   name: myscc #   path: /opt/lib/myscc.so #   invokableExternal: true #   invokableCC2CC: true {code}  Pre-1.3, sysccs were imported directly into `core/scc/importsysccs.go` :  {code:java} import ( 	//import system chaincodes here 	"github.com/hyperledger/fabric/core/aclmgmt" 	"github.com/hyperledger/fabric/core/common/ccprovider" 	"github.com/hyperledger/fabric/core/scc/cscc" 	"github.com/hyperledger/fabric/core/scc/lscc" 	"github.com/hyperledger/fabric/core/scc/qscc" ) {code}  Post-1.3, the process for setting up system chaincode statically has changed considerably and maybe worth documenting.      ></description> </Issue>
