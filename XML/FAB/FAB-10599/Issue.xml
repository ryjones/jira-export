<Issue id="30986" key="FAB-10599" number="10599" project="10002" reporter="scottz" assignee="dongming" creator="scottz" type="10004" summary="peer stalls for a minute when waiting for private data" priority="3" resolution="10203" status="6" created="2018-06-11 16:36:16.0" updated="2019-07-30 21:11:34.0" resolutiondate="2019-07-30 21:11:34.0" votes="0" watches="3" workflowId="43063"> <description><! CDATA While running PTE tool to run SideDB traffic on Fabric network using marbles_private chain code, we see 60 seconds delays in committing blocks at peer side. The orderer has already cut all blocks quickly, but the peer hesitates for a full minute before committing a block. _(We have learned that this is because it is trying to obtain private data from another peer in another org, which it is unable to do because there are no anchor peers defined. That configration is not the focus of this issue)._ This significantly impacts TPS in a negative way because the events for all transactions in the block are delivered only after waiting a full minute.  From peer logs we see 60 seconds cycle similar to below log entries (Note: the entries below are from earlier test however same pattern can be seen in attached log)  2018-06-07 19:07:32.421 UTC  kvledger  CommitWithPvtData -> INFO 0fa Channel  testorgschannel1 : Committed block  16  with 10 transaction(s) 2018-06-07 19:08:32.473 UTC  kvledger  CommitWithPvtData -> INFO 106 Channel  testorgschannel1 : Committed block  17  with 10 transaction(s) 2018-06-07 19:09:32.525 UTC  kvledger  CommitWithPvtData -> INFO 112 Channel  testorgschannel1 : Committed block  18  with 10 transaction(s) 2018-06-07 19:10:32.575 UTC  kvledger  CommitWithPvtData -> INFO 11e Channel  testorgschannel1 : Committed block  19  with 10 transaction(s)  Why isn't the peer starting processing of other blocks while waiting for that one? Waiting for one block should not halt the committing of every block. The progress of the peer is slowed considerably, as it falls behind other peers very quickly.  We understand that to make things run smoothly we should define anchor peers. However, in lieu of that, we have a serious delay in the network progress because of this blocking behavior, which is blocking the peer from writing other channel transactions to the ledger - even if they do not use private data. I know the peer can request missing transactions from neighbor peers at times, so it is possible to have gaps in the ledger. So, this request is for consideration of changing the peer to be nonblocking when handling delivered blocks. In this particular case, since we have to wait up to a minute, then nothing else gets done. It appears the 60 delay is done in parallel for all 10 transactions within a block; otherwise the delay would be a minute per transaction (10 minutes) rather than exactly one minute. However, while waiting for the private data for that a transaction in one block, could the peer proceed with processing other transactions in other blocks?  This JIRA could be considered as a bug or as an improvement; we wrote it as a bug because it seems to identify a problematic behavior, from network operations point of view.  ></description> </Issue>
