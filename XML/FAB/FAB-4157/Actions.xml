<Action id="25008" issue="17141" author="latitiah" type="comment" created="2017-06-01 20:53:43.0" updateauthor="latitiah" updated="2017-06-01 20:54:09.0"> <body><! CDATA This problem still exists in commit: *506cdda3d33bdac0f6361408ac0ed157c97c1e88*     {code:java} $ configtxgen -profile SampleInsecureSolo -outputBlock mychannel.block -channelID mychannel 2017-06-01 20:50:47.915 UTC  common/configtx/tool  main -> INFO 001 Loading configuration panic: runtime error: invalid memory address or nil pointer dereference  signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x4acd79  goroutine 1  running : panic(0x8fa160, 0xc42000e0d0) /opt/go/src/runtime/panic.go:500 +0x1a1 github.com/hyperledger/fabric/common/configtx/tool/localconfig.translatePaths(0xc4201d0200, 0x63, 0xc4204352c0) /opt/gopath/src/github.com/hyperledger/fabric/common/configtx/tool/localconfig/config.go:268 +0x69 github.com/hyperledger/fabric/common/configtx/tool/localconfig.(*Profile).completeInitialization(0xc420424f30, 0xc4201d0200, 0x63) /opt/gopath/src/github.com/hyperledger/fabric/common/configtx/tool/localconfig/config.go:208 +0xa4 github.com/hyperledger/fabric/common/configtx/tool/localconfig.Load(0x7ffca2da76c2, 0x12, 0x0) /opt/gopath/src/github.com/hyperledger/fabric/common/configtx/tool/localconfig/config.go:195 +0x63f main.main() /opt/gopath/src/github.com/hyperledger/fabric/common/configtx/tool/configtxgen/main.go:328 +0x4fa {code}    ></body> </Action>
<Action id="25136" issue="17141" author="jyellick" type="comment" body=" ~vpaprots  I have this distant memory that at some point you mentioned that these fields could be entirely removed from the {{configtx.yaml}}?  In general, we should not require any signing material for configtxgen, but maybe there is some technical reason it is still here?" created="2017-06-02 16:08:05.0" updateauthor="jyellick" updated="2017-06-02 16:08:05.0"/>
<Action id="25238" issue="17141" author="vpaprots" type="comment" created="2017-06-03 21:51:22.0" updateauthor="vpaprots" updated="2017-06-03 21:51:22.0"> <body><! CDATA omitting the bccsp config stanza should default to DefaultOpts..  Not sure if related.. DefaultOpts behaves badly right now, one can modify the 'original' copy of defaultopts. thats.. bad. Fix here:  https://gerrit.hyperledger.org/r/#/c/10101/3  . Doesnt pass builds yet, investigating..   ></body> </Action>
<Action id="25245" issue="17141" author="jyellick" type="comment" body="I was more curious how much of the BCCSP stuff was actually required for {{configtxgen}}.  Since it is not doing any signing, and just packaging certs." created="2017-06-04 01:37:15.0" updateauthor="jyellick" updated="2017-06-04 01:37:15.0"/>
<Action id="25247" issue="17141" author="jyellick" type="comment" created="2017-06-04 04:55:33.0" updateauthor="jyellick" updated="2017-06-04 04:55:33.0"> <body><! CDATA After some investigation, and discussion with  ~vpaprots  it's been concluded that the BCCSP section is entirely unnecessary for {{configtx.yaml}}.  Fix in https://gerrit.hyperledger.org/r/#/c/10127/  ></body> </Action>
<Action id="29262" issue="17141" author="zuochuanmin" type="comment" created="2017-08-01 01:53:07.0" updateauthor="zuochuanmin" updated="2017-08-01 01:53:07.0"> <body><! CDATA I feel this issue can be found frequently in version 1.0.0 when I perform fabric-sample or /fabric/examples/e2e_cli.  I don't know why.   --------------------------------------------------------------------------------------------------------------------------------------------------------------------  root@SZB-L0058233 e2e_cli # peer channel create -o localhost:7050 -c ch90 -f channel-artifacts/channel.tx  2017-08-01 09:51:39.496 CST  channelCmd  InitCmdFactory -> INFO 001 Endorser and orderer connections initialized fatal error: unexpected signal during runtime execution  signal SIGSEGV: segmentation violation code=0x1 addr=0x63 pc=0x2ab316fb860d   runtime stack: runtime.throw(0xdc37a7, 0x2a) /opt/go/src/runtime/panic.go:566 +0x95 runtime.sigpanic() /opt/go/src/runtime/sigpanic_unix.go:12 +0x2cc  goroutine 28  syscall, locked to thread : runtime.cgocall(0xb08d50, 0xc4200285f8, 0xc400000000) /opt/go/src/runtime/cgocall.go:131 +0x110 fp=0xc4200285b0 sp=0xc420028570 net._C2func_getaddrinfo(0x1f98c20, 0x0, 0xc42037db30, 0xc420136410, 0x0, 0x0, 0x0) ??:0 +0x68 fp=0xc4200285f8 sp=0xc4200285b0 net.cgoLookupIPCNAME(0x7fff61bc7771, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0) /opt/go/src/net/cgo_unix.go:146 +0x37c fp=0xc420028718 sp=0xc4200285f8 net.cgoIPLookup(0xc42037ef60, 0x7fff61bc7771, 0x9) /opt/go/src/net/cgo_unix.go:198 +0x4d fp=0xc4200287a8 sp=0xc420028718 runtime.goexit() /opt/go/src/runtime/asm_amd64.s:2086 +0x1 fp=0xc4200287b0 sp=0xc4200287a8 created by net.cgoLookupIP  ></body> </Action>
