<Issue id="32373" key="FAB-11382" number="11382" project="10002" reporter="yacovm" creator="yacovm" type="10001" summary="State based endorsements operations flow" priority="3" resolution="10001" status="6" created="2018-07-28 12:59:18.0" updated="2020-01-22 22:32:38.0" resolutiondate="2020-01-22 22:32:38.0" votes="0" watches="5" workflowId="43578"> <description><! CDATA I think that ideally - the user should be oblivious of the fact that a chaincode has state based endorsement or not, and the discovery service can hint to the SDK in the endorsement descriptor given by the query response - whether the chaincode has state based endorsements or not.  That's because, since the discovery query (to obtain the set of endorsers for the chaincode) happens before the actual chaincode execution - the discovery service can't foresee the keys the chaincode execution would update (without executing the chaincode itself ;) )  Therefore, if the SDK sees a hint in the endorsement descriptor returned by the peer - it would know that it would need to send to the peer a subsequent query after the endorsement of the proposal, in which it would specify the keys in the write-set that are changed, in order for the discovery service to compute a new endorsement descriptor that satisfies the combination of the endorsement policies of these keys.  The discovery service would extract the endorsement policies for the keys, convert them to the discovery representation of endorsement policies, and then combine them all to a policy that satisfies each policy in the combination. The endorsement descriptor returned from that 2nd discovery query would be derived from that combined policy.  This would mean that state-based endorsements transactions (that are sent to ordering) would require a discovery query beforehand, but I think that's a necessary evil considering the fact that in state based endorsements - anyone can change the owners of the key without the SDK to know, and thus - the peer set derived from the endorsement policy the SDK uses can be stale.  A way to make this more efficient, is for the SDK to cache endorsement descriptors per key, and optimistically reuse these descriptors and hope the key ownership hasn't changed.  Given that in some use cases - only filtered events are returned to the SDK, I don't think that parsing events and figuring out which key metadata has changed and invalid the cached per-key descriptors is the way to go.     Now, in any case - the SDK would need to pass the keys from the RWSet in order for endorsement descriptor to be calculated according to the following logic (taken from the playback):  !Capture.PNG!     This means, that if a key doesn't have an attached EP, or doesn't exist - the EP for that key to be taken into the computation of the combination of the EPs would be the chaincode's own EP.     Opinions?   ~ales    ~mne   ~denyeart   ~mastersingh24   ~jyellick   ~C0rWin   ~rickr   ~harrisob@us.ibm.com   ></description> </Issue>
