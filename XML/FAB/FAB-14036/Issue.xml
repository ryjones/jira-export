<Issue id="37392" key="FAB-14036" number="14036" project="10002" reporter="kchristidis" creator="kchristidis" type="10001" summary="As a Fabric ordering service administrator, I want to be able to resume the service&apos;s operation if the Kafka logs have been lost" priority="3" resolution="10001" status="6" created="2019-02-01 19:28:20.0" updated="2021-04-16 15:15:30.0" resolutiondate="2021-04-16 15:15:30.0" votes="0" watches="2" workflowId="48993"> <description><! CDATA Our instructions explicitly call for disabling log retention on the backing Kafka cluster, but this bit goes by unnoticed occasionally: {quote}log.retention.ms = -1. Until the ordering service adds support for pruning of the Kafka logs, you should disable time-based retention and prevent segments from expiring. {quote} If the Kafka cluster is pruning its logs, onboarding a new OSN to the network requires manually copying the ledger from an existing OSN, whose ledger is relatively up-to-date.  If the Kafka cluster has lost _all_ of its logs, the ordering service stops. The ordering service is designed to look at the latest block in its ledger, get the associated Kafka offset (say, 168), and then reach out to Kafka and say "please bring me everything you got _after_ offset 168"). This request will fail on a Kafka cluster that has lost _all_ of its logs, because that cluster won't have an offset this high.  In order to address this problem, I propose that we introduce a {{RESET}} environment variable that, when set to {{true}}, instructs the OSN to just seek to the latest available offset the Kafka cluster has for each channel and call it a day.  The workflow is as follows: # Before moving on with this RESET operation OSN administrators should compare their local ledgers for each channel, and make sure all of them are _identical_. (If they're not, copy ledgers across the board, going with the longest one. Of course, make sure that signatures match, etc.) # Then: ensure no client requests (read/write) are reaching the ordering service. # Restart each OSN (don't have to do it sequentially...) with the RESET flag set to true. # Enable read/write requests from clients to the ordering service. # Things should work.  Ensure that subsequent restarts of OSNs have the RESET flag set to false.  Do note that if you wish to onboard a new OSN in a network that had its Kafka cluster reset, you will need to: # Push at least one transaction across all channels on the existing ordering service. # Then copy the ledger of an existing OSN to the new OSN.  We're doing this to ensure that the donor OSN has encoded offsets in its own ledger that are valid references in the new Kafka cluster.  ></description> </Issue>
