<Action id="51111" issue="30843" author="yuki-kon" type="comment" body="Defer to future. This story needs to follow other improvements of Chaincode like FAB-8812 state-based endorsement, FAB-2809 pagination of query results and FAB-11246 programming model." created="2018-09-24 16:50:03.0" updateauthor="yuki-kon" updated="2018-09-24 16:50:03.0"/>
<Action id="52123" issue="30843" author="yuki-kon" type="comment" created="2018-10-11 21:46:34.0" updateauthor="yuki-kon" updated="2018-10-11 21:46:34.0"> <body><! CDATA Hello  ~denyeart . Could you have a review on the CR below or assign maintainers who are familiar with ChaincodeShim? This is a CR to define new APIs. https://gerrit.hyperledger.org/r/#/c/26943/  ></body> </Action>
<Action id="56601" issue="30843" author="yuki-kon" type="comment" body="Removed GetStateByCompositeKeyRange() from the proposal. This function is discussed in FAB-11281 and FAB-13615." created="2019-02-01 23:03:38.0" updateauthor="yuki-kon" updated="2019-02-01 23:03:38.0"/>
<Action id="59902" issue="30843" author="davidkhala" type="comment" created="2019-05-10 06:48:26.0" updateauthor="davidkhala" updated="2019-05-10 06:50:37.0"> <body><! CDATA Personally point of view:  there is no need to add additional 9 APIs simply for a string builder function. It will bring much of test and work in future to fabric maintainers. So I will put -1 in advance. If it is merged, duplicated work will also happen on java-chaincode, nodejs-chaincode  ></body> </Action>
<Action id="59919" issue="30843" author="yuki-kon" type="comment" created="2019-05-10 16:52:25.0" updateauthor="yuki-kon" updated="2019-05-10 16:52:25.0"> <body><! CDATA Hi  ~davidkhala . Thank you for your comment. I will think more reasonable ways for both fabric maintainers and application developers. Even though Chaincode introduced the new programming model, application developers have to implement the logic to generate composite keys, serialize state and deserialize state before calling ChaincodeShim. These logic are low level and not relevant to business logic. To make application developers focus on their business logic, it seems like better to provide additional libraries in the fabric.  ></body> </Action>
<Action id="59934" issue="30843" author="davidkhala" type="comment" body=" ~yuki-kon Actually I rarely worry about developers since they are always smart enough to build own tools. For my example, my daily work depends on https://github.com/davidkhala/fabric-common-chaincode-golang, but it is full of personal taste, so I would not recommend it as standard. Same for you case , I suggest your proposal can an extension tools or part of fabric-samples. " created="2019-05-11 04:00:53.0" updateauthor="davidkhala" updated="2019-05-11 04:00:53.0"/>
<Action id="59970" issue="30843" author="yuki-kon" type="comment" body=" ~davidkhala  Thank you for sharing your thought and library. I agree that each application developer has their own requirement. Fabric-samples seems better for a starting point. After proposing this JIRA last year, commercial-paper was added to fabric-samples. It has common functions wrapping ChaincodeShim. If many application developers want to use those functions, it will be a sign to make those functions an extension tool in chaincode/shim/ext or contract-api." created="2019-05-13 18:47:57.0" updateauthor="yuki-kon" updated="2019-05-13 18:47:57.0"/>
<Action id="64002" issue="30843" author="yuki-kon" type="comment" body="Close this JIRA. It&apos;s better to follow the new programming model and its future release." created="2019-09-23 20:50:46.0" updateauthor="yuki-kon" updated="2019-09-23 20:50:46.0"/>
