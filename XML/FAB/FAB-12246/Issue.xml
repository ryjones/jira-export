<Issue id="34239" key="FAB-12246" number="12246" project="10002" reporter="sykesm" creator="sykesm" type="10000" summary="Separate user linkable golang code from fabric" priority="3" status="10100" created="2018-10-01 14:36:46.0" updated="2020-02-28 20:13:15.0" votes="0" watches="8" workflowId="45565"> <description><! CDATA The fabric repository is a messy collection of code that implements core services like the peer, orderer, and ledger but it also contains a fair amount of code that users writing in golang are linking into their chaincode and clients.  The fabric repository is not structured as a versioned, user consumable entity. We vendor the dependencies we need and lock them at levels we desire for our implementations. This is at odds with users that wish to use a subset of packages in their apps and chaincode with their own vendored dependencies.  The fabric repository, as an ad-hoc monolith, also has little enforcement of the separation between internal code and user consumable code. As such, many user consumable packages depend on (directly or transitively) internal details that, when changed, can fundamentally impact end users. (Logging library surfaced in the chaincode package, for example.)  Additionally, there are a both existing and missing capabilities which should be exposed as user-linkable packages/libraries.  Some of these capabilities are only exposed via binary tools (e.g. configtxgen, configtxlator) but really should be libraries which users can consume to build their own tools.  Additionally, these libraries should provide functions which today are only in scripts (e.g. add org to channel).  In order to resolve these issues, we need to add order to the chaos and separate and segregate user consumable golang libraries from the core fabric code. We can do this by moving all internal packages into an internal package namespace or by extracting the user libraries to separate repositories.  The favored approach would be to extract the libraries so we can begin to add good semantic version controls to the packages and reinforce that the API surface area for fabric are the grpc services we surface - not the code.  This is gaining new urgency given the number of CRs that have been showing up that wish to add new user-linkable functions to fabric including items like FAB-11246, FAB-11418, and FAB-11419.  ></description> </Issue>
