<Issue id="18071" key="FAB-4768" number="4768" project="10002" reporter="kchristidis" assignee="sanchezl" creator="kchristidis" type="10001" summary="Fix asymmetry in fault tolerance of deliver component (versus the broadcast one)" priority="3" resolution="10000" status="6" created="2017-06-15 17:30:28.0" updated="2018-07-20 18:55:54.0" resolutiondate="2017-10-02 14:55:12.0" votes="0" watches="2" workflowId="39120" security="10001"> <description><! CDATA The high-level overview: * When we issue a Broadcast RPC, the Producer component of the orderer retries a few times before returning a SERVICE_UNAVAILABLE response code. * When we issue a Deliver RPC, the Consumer component of the orderer will return a SERVICE_UNAVAILABLE response code (and close the client connection) right away, at the slightest indication of error.  For example, if the leader broker of a channel goes down and a new leader _is available right away_, we will error (because Kafka returns an error in this case) and drop the connection. (The client can issue a new Deliver RPC almost instantaneously and it will be served. Reacting to the leader change and connecting to the different leader is a process that at most takes a second or two.)  In this exact scenario, it's highly like that Broadcast RPC would go through just fine (even if a leader change happens halfway through), because the retries outlast the "leader change / connect to the different leader" process.  Possible solutions: # Have the Consumer attempt to send a CONNECT message with a very short retry period before closing the error channel (and dropping the connected Deliver clients). This is not suggested because it couples the consumer with the producer. They can fail in different ways. # Examine the incoming error and if it's a leadership change message, increment a counter, `continue` in the for-loop, and only close the error channel if the counter exceeds a threshold. This might be slightly trickier than it sounds. # As  ~jyellick  suggested: Solve this from the `deliver` package side, i.e. don't pull the trigger on returning SERVICE_UNAVAILABLE right away. Might be the most straightforward way of going at it. The only thing that makes me skeptical here is that we're fixing package X to address a concern that stems from package Y.  ></description> </Issue>
