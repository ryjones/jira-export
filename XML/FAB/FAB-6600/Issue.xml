<Issue id="21801" key="FAB-6600" number="6600" project="10002" reporter="denyeart" assignee="denyeart" creator="denyeart" type="10002" summary="Sample chaincode using private data collections" priority="3" resolution="10000" status="6" created="2017-10-12 12:58:19.0" updated="2018-07-20 14:14:39.0" resolutiondate="2018-06-04 13:53:50.0" votes="0" watches="9" workflowId="40260"> <description><! CDATA h1. New instructions for v1.2:  See fabric-samples sample chaincode at:  https://gerrit.hyperledger.org/r/#/c/22255/   See execution instructions at: https://jira.hyperledger.org/browse/FAB-10231       h1. Old instructions from v1.1:  You can test side db private data experimental feature in v1.1.0 and master. To get the experimental feature you will need to build peer yourself and set an environment variable EXPERIMENTAL=true before building.     Sample chaincode using private data collections  For the assets from v1.1 timeframe see  https://gerrit.hyperledger.org/r/#/c/14769/9       *Script for testing private data e2e:*  Make these changes:    */examples/e2e_cli/docker-compose-cli.yaml*  {color:#333333}Update the cli "command:" to execute {color}*{color:#34bd26}./scripts/script_marbles_private.sh{color}* {color:#34bd26}instead of *./scripts/script.sh*{color}    */examples/e2e_cli/base/peer-base.yaml* {color:#34bd26}       - CORE_LOGGING_LEVEL=INFO{color} {color:#34bd26}       - CORE_LOGGING_GOSSIP=DEBUG{color}         - CORE_PEER_GOSSIP_PVTDATA_TRANSIENTSTOREMAXBLOCKRETENTION=500 {color:#34bd26}    {color} {color:#333333} /examples/e2e_cli/configtx.yaml{color} {color:#34bd26}    Application: &ApplicationCapabilities{color}         # V1.1 for Application is a catchall flag for behavior which has been {color:#34bd26}        # determined to be desired for all peers running v1.0.x, but the{color} {color:#34bd26}        # modification of which would cause imcompatibilities.  Users should{color} {color:#34bd26}        # leave this flag set to true.{color} {color:#34bd26}        V1_1: true{color} {color:#34bd26}        V1_1_PVTDATA_EXPERIMENTAL: true  {color} {color:#34bd26} {color} {color:#34bd26} {color} make docker-clean docker   cd examples/e2e_cli  ./network_setup.sh up mychannel    4 peer network will be up now, and chaincode will be installed.  Do the remaining steps via CLI:    docker exec -it cli bash  **    *+Marblesp+* *Instantiate chaincode on org1/peer0* peer chaincode instantiate -o  orderer.example.com:7050|http://orderer.example.com:7050/  --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer. example.com/msp/tlscacerts/tlsca.example.com-cert.pem|http://example.com/msp/tlscacerts/tlsca.example.com-cert.pem  -C mychannel -n marblesp -v 1.0 -c '\{"Args": "init" }' -P "OR ('Org0MSP.member','Org1MSP.member')" {color:#34bd26}--collections-config collections.json{color}    *Create marble1 on org1/peer0* peer chaincode invoke -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n marblesp -c '\{"Args": "initMarble","marble1","blue","35","tom","99" }'    *Query marble on org1/peer0* peer chaincode {color:#000000}query -C mychannel -n{color} marbles{color:#000000}p {color}-c '\{"Args": "{color:#000000}readMarble{color}","marble1" }'  peer chaincode {color:#000000}query -C mychannel -n{color} marbles{color:#000000}p {color}-c '\{"Args": "{color:#000000}readMarblePrivateDetails{color}","marble1" }'    *Query marble on org1/peer1* CORE_PEER_ADDRESS= peer1.org1.example.com:7051|http://peer0.org1.example.com:7051/   peer chaincode {color:#000000}query -C mychannel -n{color} marbles{color:#000000}p {color}-c '\{"Args": "{color:#000000}readMarblePrivateDetails{color}","marble1" }'    *Query marble on org2/peer0 (should not be there as org2 doesn't have access to collection)* CORE_PEER_ADDRESS=peer0.org2.example.com:7051 CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2. example.com/peers/peer0.org2.example.com/tls/server.crt|http://example.com/peers/peer0.org1.example.com/tls/server.crt  peer chaincode query -C mychannel -n marblesp -c '\{"Args": "readMarblePrivateDetails","marble1" }'    docker logs peer0.org1.example.com 2>&1 | grep -i -a -E 'private|pvt|privdata'    *Create marble2 on org1/peer0* peer chaincode invoke -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n marblesp -c '\{"Args": "initMarble","marble2","blue","35","tom","99" }'    *Transfer marble2 on org1/peer0* peer chaincode invoke -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n marblesp -c '\{"Args": "transferMarble","marble2","jerry" }'  ></description> </Issue>
