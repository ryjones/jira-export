<Action id="59566" issue="39542" author="yacovm" type="comment" created="2019-04-29 10:57:21.0" updateauthor="yacovm" updated="2019-04-29 10:58:10.0"> <body><! CDATA I think it's pretty easy to add support for it in the peer side- all we need to do is to add to the  AliveMessage|https://github.com/hyperledger/fabric/blob/master/protos/gossip/message.proto#L266-L270  message an additional field.   Since the discovery service returns the entire gossip envelope of an alive message, an SDK can just prefer that endpoint instead of the external endpoint.  However I'm not sure how complex it is for the SDK, since each SDK implemented discovery support differently.   ~troyronda  ,  ~bstasyszyn  ,  ~rickr ,   ~harrisob@us.ibm.com   - what do you guys think? Is it worth the effort?      Also -  ~C0rWin  ,  ~mastersingh24  ,  ~sykesm  please chime in.  ></body> </Action>
<Action id="59578" issue="39542" author="harrisob@us.ibm.com" type="comment" body="What change is needed for the SDK&apos;s, is it to use a different address just for discovery ?" created="2019-04-29 16:21:07.0" updateauthor="harrisob@us.ibm.com" updated="2019-04-29 16:21:07.0"/>
<Action id="59582" issue="39542" author="yacovm" type="comment" created="2019-04-29 18:51:39.0" updateauthor="yacovm" updated="2019-04-29 18:52:27.0"> <body><! CDATA Instead of doing  this|https://github.com/hyperledger/fabric-sdk-node/blob/release-1.4/fabric-client/lib/Channel.js#L1400  you'll be doing:  {quote}peer.someNewField = q_membership_message.alive_msg.membership.someNewField;{quote}  ></body> </Action>
<Action id="59583" issue="39542" author="harrisob@us.ibm.com" type="comment" body="looks easy enough ... I will update when every it is ready" created="2019-04-29 19:05:15.0" updateauthor="harrisob@us.ibm.com" updated="2019-04-29 19:05:15.0"/>
<Action id="59725" issue="39542" author="denyeart" type="comment" created="2019-05-04 16:45:16.0" updateauthor="denyeart" updated="2019-05-04 16:49:03.0"> <body><! CDATA  ~yacovm  So let me see if I understand this correctly...  *Scenario: Each org hosts peers in their own internal network (typical)*  External peers and clients use the same address to reach a peer.  Address would remain configured in: *peer.gossip.externalEndpoint*     *Scenario: All orgs host peers in the same internal network (less typical)*  Peers would reach peers in other orgs via an 'internal' address configured in *peer.gossip.externalEndpoint*, but clients would reach peers in an external address configured in a new config option like *peer.gossip.externalEndpointForClients*     As you can see the terms 'external' and 'internal' get confusing in the latter scenario.  Things get even more confusing if a client is internal to one of the orgs, it would want to use the internal address for its own peers but external address for other org's peers. I don't think we have any facility to support that currently.     Note, this is essentially the same request that  ~rickr  made for an orderer external endpoint for clients in FAB-11665.  ></body> </Action>
<Action id="59726" issue="39542" author="yacovm" type="comment" created="2019-05-04 17:21:17.0" updateauthor="yacovm" updated="2019-05-04 17:21:17.0"> <body><! CDATA {quote}Note, this is essentially the same request that Rick Rine made for an orderer external endpoint for clients in FAB-11665.{quote}  According to the JIRA opener, the issue here is that: {quote} If I choose to use my host's hostname in that option, the docker containers are unable to bind to that address.{quote}  So it's not a problem for the orderers, as they don't need to be aware of their endpoints. Peers, however - should be aware of their endpoints but can't publish 2 external endpoints.   {quote} Scenario: All orgs host peers in the same internal network (less typical)  Peers would reach peers in other orgs via an 'internal' address configured in peer.gossip.externalEndpoint, but clients would reach peers in an external address configured in a new config option like peer.gossip.externalEndpointForClients{quote} Not quite. Peers prefer to use the "internal endpoint" if they have the same MSP ID, and peers of different MSP IDs only see external endpoints (they don't see the internal endpoint at all).  So in a sense we have 3 networks - the peer's internal network, other peers network, and the client's network.   {quote}As you can see the terms 'external' and 'internal' get confusing in the latter scenario.  Things get even more confusing if a client is internal to one of the orgs, it would want to use the internal address for its own peers but external address for other org's peers. I don't think we have any facility to support that currently.{quote}  We currently do not publish internal endpoints of peers in discovery, yet it's possible to do that with ease. However I haven't seen a demand for that, and this isn't what this JIRA is about.      ></body> </Action>
<Action id="59727" issue="39542" author="denyeart" type="comment" created="2019-05-04 17:46:17.0" updateauthor="denyeart" updated="2019-05-04 17:55:36.0"> <body><! CDATA  ~yacovm  I understand that we can think of it as three networks. In the Description they were talking about a Docker network that had all the peers, so I collapsed it to a peer network and a client network. Regardless, I wanted to summarize to ensure that we're on the same page:  *peer.gossip.endpoint* - endpoint that peers in the same org (same MSPID) use. defaults to *peer.address* if not set.  *peer.gossip.externalEndpoint* - endpoint that peers in different orgs (different MSPID) use. Note - if the peers are all in the same network (e.g. first-network sample network), this would be configured to be the same as *peer.gossip.endpoint*.  *peer.gossip.externalEndpointForClients* - proposed new config for external endpoint that clients use.  Right?     I still assert the same problem exists for orderers... if peers and orderers are on the same network, but clients external (e.g. first-network sample network), then the peers will need to use one orderer address, and the clients will need to use a different external orderer address.  ></body> </Action>
<Action id="59728" issue="39542" author="yacovm" type="comment" body="Yes, and yes - the problem still exists for orderers. " created="2019-05-04 17:51:36.0" updateauthor="yacovm" updated="2019-05-04 17:51:36.0"/>
<Action id="60052" issue="39542" author="rhegde" type="comment" created="2019-05-16 11:27:21.0" updateauthor="rhegde" updated="2019-05-16 11:28:06.0"> <body><! CDATA I am trying to understand the restriction for using the service discovery, can you correct me  1. So a client running as a native host process and is not part of the orderer or peer docker swarm network(s), cannot use the service discovery information for endorsement/broadcast activity on the exposed orderer or peer host port. This currently mandates client to be part of the swarm network to use service discovery?  2.  This further challenges for client to use the service discovery if the other organization peer & orderer node uses Port Forwarding, Firewall (as said by Rick).  ></body> </Action>
<Action id="60059" issue="39542" author="yacovm" type="comment" body="so, discovery simply returns what gossip tells it, and gossip returns what is in the peer&apos;s configuration which is routable only from the docker network. " created="2019-05-16 12:26:39.0" updateauthor="yacovm" updated="2019-05-16 12:26:39.0"/>
