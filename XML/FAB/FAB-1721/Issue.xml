<Issue id="14150" key="FAB-1721" number="1721" project="10002" reporter="ryokawajp" creator="ryokawajp" type="10001" summary="Means for detecting a tamper of Blockchain or State database by checking hash values" priority="3" resolution="10000" status="6" created="2017-01-18 05:51:28.0" updated="2018-07-20 18:56:02.0" resolutiondate="2017-04-14 12:35:23.0" votes="0" watches="3" workflowId="37085"> <description><! CDATA Hello.  Users of our system are curious about how Fabric is tamper proof. However, I understand that not all the modifications are checked because of performance reasons. State Hash is updated only when the state delta of World State is changed.  So,  I and my colleagues did tests of detection capability of tampering to Blockchain and World State databases and found that there is no means to update Block Hash or State Hash to detect those modifications in some test cases. I think  it will be helpful for peer administrators if Fabric has a function which force Fabric to check and update all the blocks and the states at a desired timing.  Here is a summary of our test:  Conditions - Hyperledger Fabric v0.6.0-preview - hfc 0.6.5 - security and privacy enabled. - 4 peers with PBFT consensus. - PBFT Batch = 1 - Modification of World State and Blockchain databases are done by an external tool similar to https://github.com/hyperledger/fabric/tree/v0.6/tools/dbutility if the peer is stopped. - Modification of Blockchain database is done by adding a modification code to github.com/hyperledger/fabric/core/ledger/blockchain.go if a peer is running.  Test cases: # Delete one key in World State when a peer is stopped and see whether State Hash is updated or not after the restart of the peer. #* Result: Not updated. A chaincode may cause an error if it tries to access the key. # Modify a Txid in the latest block in Blockchain when a peer is stopped and see whether Current Block Hash is updated or not, after the restart of the peer. #* Result: Not updated. After processing several transactions, the peer caused a panic and crashed (the log to be attached later.) # Modify a Txid in a past block in Blockchain when a peer is stopped and see whether Current Block Hash is updated or not, after the restart of the peer. #* Result: Updated. Blockchain was checked at the boot sequence of the peer and fixed by the state transfer. # Modify a Txid in a past block in Blockchain when a peer is running and see whether Current Block Hash is updated or not #* Result: Not updated.   (Note that I chosen these test cases as examples of tampering because the values of World State and transaction payloads are encrypted and not easy to decrypt)  As indicated in the test results above, State Hash is updated only when State Delta is changed through the chaincode API. If a key is modified by an external tool, State Delta will not be updated unless the key belongs to a bucket which also contains the state delta. Similarly, consistency of the block hash and the block value is checked only at the beginning of a peer process. Therefore, it is not possible to detect and correct the modification of a past block if it is modified when a peer is running.  Of course, in all of the test cases, the blockchain network made correct consensuses. That is, the tampered data was not accepted by other peers in any cases. However, from a peer administrator point of view, it is important to know that his databases are out-of-sync, because he needs to identify the root cause, write some incident report and fix the modification by the state transfer from other peers.  In Fabric v1.0, I heard that the read set and the write set of a chaincode in a transaction processing are compared with those in other endorser peers, and hence the tampering of World State will be mitigated.  But it will be helpful if Fabric has an option which force the checks and updates of hashes of all the blocks and the states (buckets) so that an administrator can use that function at some occasions like a security audit or after an accident.   ></description> </Issue>
