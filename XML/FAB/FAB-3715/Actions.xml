<Action id="25007" issue="16436" author="muralisr" type="comment" body=" ~mastersingh24   ~yacovm  is this something needed for 1.0 or can it be moved ? If needed looks like we need a &quot;review-needed&quot; label." created="2017-06-01 20:50:22.0" updateauthor="muralisr" updated="2017-06-01 20:50:58.0"/>
<Action id="25571" issue="16436" author="mastersingh24" type="comment" created="2017-06-06 20:06:39.0" updateauthor="mastersingh24" updated="2017-06-06 20:06:39.0"> <body><! CDATA We can probably add a review needed label although this is not really hard and is transparent to users.  But there is always the risk since this involves TLS  ></body> </Action>
<Action id="25578" issue="16436" author="yacovm" type="comment" created="2017-06-06 20:52:05.0" updateauthor="yacovm" updated="2017-06-06 20:52:05.0"> <body><! CDATA Wait, why can't I vote on this? Just because I opened the JIRA? oh well, consider me as voted +1.   ></body> </Action>
<Action id="25713" issue="16436" author="jimthematrix" type="comment" created="2017-06-08 00:55:18.0" updateauthor="jimthematrix" updated="2017-06-08 01:48:10.0"> <body><! CDATA  ~yacovm  I don't understand this part: _ordering service of X is of org A, and the ordering service of Y is of org B_  I thought it's more likely that an organization would want to have all the orderer nodes available so it can distribute the broadcast() and deliver() load. If the orderer nodes use certs that are signed by different CAs, then you have to trust them (the CAs) equally. To eliminate this you'd have to limit the peer to connect to orderers signed by a single CA, isn't that too limiting? Also this attack is predicated on the CA being compromised or the org goes rogue, isn't there a much bigger problem if this is the case?  ></body> </Action>
<Action id="25726" issue="16436" author="yacovm" type="comment" created="2017-06-08 09:40:21.0" updateauthor="yacovm" updated="2017-06-08 09:40:21.0"> <body><! CDATA {quote}it's more likely that an organization would want to have all the orderer nodes available so it can distribute the broadcast() and deliver() load{quote} But this issue is about orderers of different orgs.  {quote} If the orderer nodes use certs that are signed by different CAs, then you have to trust them (the CAs) equally.{quote} Yeah but the trust should be a function over the members of the channel, not cross channels - where it is now (because of the implementation) and this is where the problem lies.  {quote} To eliminate this you'd have to limit the peer to connect to orderers signed by a single CA{quote} Why?  {quote} Also this attack is predicated on the CA being compromised or the org goes rogue, isn't there a much bigger problem if this is the case?{quote} Well, why wouldn't an org be rogue? If you have channels that segregate the information between orgs, and now your implementation of root CA cert pool makes it possible for an orderer not from the channel to impersonate an orderer in the channel, that's a security vulnerability.   ></body> </Action>
<Action id="25769" issue="16436" author="yacovm" type="comment" body="https://gerrit.hyperledger.org/r/#/c/10353/ " created="2017-06-08 16:28:18.0" updateauthor="yacovm" updated="2017-06-08 16:28:18.0"/>
<Action id="25856" issue="16436" author="binhn" type="comment" body="remove review-needed as 5 voted" created="2017-06-09 13:44:48.0" updateauthor="binhn" updated="2017-06-09 13:44:48.0"/>
