<Issue id="37036" key="FAB-13815" number="13815" project="10002" reporter="wenjian" assignee="wenjian" creator="wenjian" type="10003" summary="Design SDK APIs for token commands" priority="3" resolution="10001" status="6" created="2019-01-22 13:08:47.0" updated="2020-01-22 22:31:09.0" resolutiondate="2020-01-22 22:31:09.0" votes="0" watches="2" workflowId="48605"> <description><! CDATA There are 2 kinds of token commands * query commands (ListTokens and Allowance): do not invoke transaction, API returns List<TokenOutput> * transactional commands (Issue, Transfer, Approve, TransferFrom, Swap): invoke transaction, need 2 steps: 1st step communicates to prover peer to get TokenTransaction and 2nd step sends transaction  Proposal: * TokenWallet provides high level API issue/transfer/redeem/…that communicates to prover peer and send transactions to orderer * Low level APIs: call sendTokenCommand and sendTokenTransaction separately.     Implement a TokenWallet class in the same package as the Channel class to process token commands that provides the following APIs. Note that TokenResponse is a placeholder for now. It will contain the response data, e.g., transaction id and transaction event         // Issue allows client to issue new tokens to the system     TokenResponse issue(List<TokenToIssue> tokensToIssue)      throws TokenException, InvalidArgumentException;         // Transfer allows the client to transfer tokens from the owning user to other users      TokenResponse transfer(List<ByteString>tokenIDs, List<RecipientTransferShare> shares)      throws TokenException, InvalidArgumentException;               // Redeem allows client to redeem tokens owned by a user.      // The returned transaction envelope should be submitted via the SubmitTransactin API.    TokenResponse redeem(List<ByteString> tokenIds, *long* quantity)     **   throws TokenException, InvalidArgumentException         // Approve is the function that the client authorizes to transfer his tokens.      // It takes as parameter an array of token.AllowanceRecipientShare that      // identifies who can spend the tokens on behalf of the owner and describes      // how the tokens are distributed.      TokenResponse Approve(List<ByteString> tokenIds, List<AllowanceRecipientShare> shares)      throws TokenException, InvalidArgumentException;            // TransferFrom is the function that the client calls to transfer the tokens that has been      // delegated to him. It takes as parameters an array of tokenIDs and an array of shares      // that identify the recipients and describe how the tokens are going to be distributed.      TokenResponse TransferFrom(List<ByteString> tokenIds, List<RecipientTransferShare> shares)      throws TokenException, InvalidArgumentException;         // Swap allows the client to submit an atomic swap request.      TokenResponse Swap(List<ByteString> tokenIds, List<PlainSwapTerms> terms)      throws TokenException, InvalidArgumentException;         // List communicates to a prover peer to list tokens owned by the calling user      List<TokenOutput> listTokens()      throws TokenException, InvalidArgumentException;         // ListAllowance is the function that the client calls to list the delegated tokens he      // received from the delegator. ListAllowance takes as parameter a delegator identity      List<TokenOutput> listAllowance(ByteString delegatorIdentity)      throws TokenException, InvalidArgumentException;     ></description> </Issue>
