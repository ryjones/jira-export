<Issue id="34626" key="FAB-12431" number="12431" project="10002" reporter="angelo.decaro" assignee="angelo.decaro" creator="angelo.decaro" type="10004" summary="idemix panics during deserialisation to amcl Elements" priority="2" resolution="10000" status="6" created="2018-10-12 11:59:36.0" updated="2019-01-13 18:53:06.0" resolutiondate="2019-01-13 18:53:06.0" votes="0" watches="10" workflowId="46030" security="10000"> <description><! CDATA I was writing additional tests in the fabric/idemix package when I stumbled upon a panic thrown during the verification of a malformed idemix signature.  When a Fabric transaction tx is signed using identity mixer, the tx's creator field contains an idemix signature. Now suppose that such a transaction reaches one of the peers. The peer will deserialise the MSP identity encoded in the creator field and try to validate it. The validation will thrown a panic. The Idemix MSP does not catch the panic. This can be see by running the following test: {code:java} func TestIdentitySerialization2(t *testing.T) { m, err := setup("testdata/idemix/MSP1OU1", "MSP1OU1") assert.NoError(t, err)  id, err := getDefaultSigner(m) assert.NoError(t, err)  // Test serialization of identities serializedID, err := id.Serialize() assert.NoError(t, err)  verID, err := m.DeserializeIdentity(serializedID) err = verID.Validate() assert.NoError(t, err) err = m.Validate(verID) assert.NoError(t, err)  // Now modify underlying idemix objects verID.(*idemixidentity).associationProof.ProofC =   byte{0}  // re-serialise serializedID, err = verID.Serialize() verID, err = m.DeserializeIdentity(serializedID) assert.NoError(t, err) err = verID.Validate() // This generates the panic. assert.NoError(t, err)  err = m.Validate(verID) assert.NoError(t, err) }{code} Now, the ordering service is supposed to have panic handlers to avoid the process crashing. Look at orderer/common/server/server.go functions Broadcast and Deliver. Don't know if this leave the ordered in a non-consisting state though.  The peers do not have any protection in this sense and they will crash if reached by such a transaction or any message that trigger idemix to validate a malformed idemix signature. (i.e., endorsement, gossip, admin commands, and so on).     Now, there are at least three possible approaches to fix this issue: # The first is to modify directly fabric/idemix to avoid that the panic is thrown # The second is to modify the fabric/msp to catch the panics.  # The thirst is to have integrate idemix in bccsp and have bccsp controlling the panics, which sounds preferable to 2) cause in that context is much more clear what is mean to catch a panic from an underlying crypto algorithm. This to avoid also to leave data structures in a non-consistent state.  Opinions?  ~mastersingh24 ,  ~denyeart ,  ~JonathanLevi ?  ></description> </Issue>
