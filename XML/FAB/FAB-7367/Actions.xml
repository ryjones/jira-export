<Action id="35970" issue="24854" author="mastersingh24" type="comment" created="2017-12-07 06:51:26.0" updateauthor="mastersingh24" updated="2017-12-07 06:51:26.0"> <body><! CDATA  ~jeffgarratt  - I'm not sure what the point of this is.  One can clearly also build a client application which does this as well.  That's not really the point at all of the requirement.  I also 100% disagree with these mentions of the existing ACL mechanism - none of that comes for free by just writing more chaincode.   And this "solution" now adds the filtered blocks to the ledger (again).  So we are now adding more data to the ledger for no apparent reason.    Maybe we need to add more detail to FAB-7022 ?  It seems the proposed solution to FAB-7022 (where all I want as a client is to know the status of transactions) is once again to send full blocks to the clients.   FAB-7069 adds a "broader" requirement to actually filter blocks as well.  IMHO, FAB-7022 is a subset of FAB-7069 (i.e. a specific filter).  I also think we might have missed on requirement which is that Fabric v1.0.x is currently missing a channel-based event service.  That's really what adding something like the Deliver Service to the peer solves.  I don't believe that simply sending "full" blocks is the solution to FAB-7022.    ></body> </Action>
<Action id="35977" issue="24854" author="yacovm" type="comment" created="2017-12-07 07:55:48.0" updateauthor="yacovm" updated="2017-12-07 07:55:48.0"> <body><! CDATA I second Gari's comment.     If our current infrastructure is lacking, we should change the infrastructure and improve it instead of re-using parts of it to built itself.  ></body> </Action>
<Action id="35981" issue="24854" author="denyeart" type="comment" body="I would have to agree with Gari and Yacov.  Given the asynchronous nature of transaction submission, there should be a built-in peer API to deliver transaction statuses back to client applications." created="2017-12-07 10:54:36.0" updateauthor="denyeart" updated="2017-12-07 10:54:36.0"/>
<Action id="35983" issue="24854" author="c0rwin" type="comment" created="2017-12-07 11:25:29.0" updateauthor="c0rwin" updated="2017-12-07 11:25:29.0"> <body><! CDATA Joining comments above and I'm failing to see how developing an independent side application could be possible alternative for integrative solution as requested by FAB-7022. Overall I'd -1, proposed alternative as it defeats the purpose, IMO.  ></body> </Action>
<Action id="36008" issue="24854" author="kchristidis" type="comment" created="2017-12-08 11:23:12.0" updateauthor="kchristidis" updated="2017-12-08 11:23:12.0"> <body><! CDATA I have some thoughts on the suggested proposal and some of the comments here but, as Murali would say (:)), "let me make sure I got this right."  You write: {quote}I also 100% disagree with these mentions of the existing ACL mechanism - none of that comes for free by just writing more chaincode. {quote} Could you elaborate on this?  This is in response to the original statement: {quote}The existing ACL mechanism can be leveraged to control access to the filtered channel. {quote} Is there something inaccurate or misleading about that statement? Perhaps an example could help.  ></body> </Action>
<Action id="67194" issue="24854" author="sykesm" type="comment" body="Stale" created="2020-01-22 22:19:47.0" updateauthor="sykesm" updated="2020-01-22 22:19:47.0"/>
