<Action id="21363" issue="15250" author="ratnakar" type="comment" created="2017-03-08 00:17:15.0" updateauthor="ratnakar" updated="2017-03-08 00:30:19.0"> <body><! CDATA  Scripts is availble in this repo https://github.com/asararatnakar/perf-test the docker-compose has been changed to have all the peers as  {panel} - CORE_PEER_GOSSIP_ORGLEADER=true {panel}  How to run the script {code} * git clone https://github.com/hyperledger/fabric * cd fabric * make docker * cd fabric/examples * git clone https://github.com/asararatnakar/perf-test.git e2e * cd e2e ./network_setup.sh restart <channel name> <total channels> <total chaincodes> <total endorsers> ./network_setup.sh restart mychannel 10 10 4 {code}  Changing the non anchor peers orgleader flag to "false" causes the issue *- CORE_PEER_GOSSIP_ORGLEADER=false*    ~2020Nishi  ran the script attached to this jira, please replace *scripts/script.sh* with this file, to reproduce this issue.  ></body> </Action>
<Action id="21378" issue="15250" author="bmos299" type="comment" body="Changing to highest." created="2017-03-08 14:19:30.0" updateauthor="bmos299" updated="2017-03-08 14:19:30.0"/>
<Action id="21382" issue="15250" author="gennadyl" type="comment" created="2017-03-08 14:53:46.0" updateauthor="gennadyl" updated="2017-03-08 14:54:02.0"> <body><! CDATA One question - what exactly written in docker-compose.yaml  CORE_PEER0_GOSSIP_ORGLEADER=true CORE_PEER1_GOSSIP_ORGLEADER=false CORE_PEER2_GOSSIP_ORGLEADER=true CORE_PEER3_GOSSIP_ORGLEADER=false look wrong. In each peer section should be written CORE_PEER_GOSSIP_ORGLEADER flag, not CORE_PEER_AND_NUMBER_GOSSIP_ORGLEADER      ></body> </Action>
<Action id="21384" issue="15250" author="ratnakar" type="comment" created="2017-03-08 15:41:19.0" updateauthor="ratnakar" updated="2017-03-08 15:42:47.0"> <body><! CDATA we still see the issue on commit level *babdeee87981ac92af13ed5d767294588fa89cfd*   Hi  ~gennadyl , Thanks for the pointer. We haven't used the peer number in our docker-compose, we gave that number here to indicate what value is passed to what peer.  You can refer our docker-compose file here https://github.com/asararatnakar/perf-test/blob/master/docker-compose.yaml  https://github.com/asararatnakar/perf-test/blob/master/docker-compose.yaml#L61 https://github.com/asararatnakar/perf-test/blob/master/docker-compose.yaml#L81 https://github.com/asararatnakar/perf-test/blob/master/docker-compose.yaml#L102 https://github.com/asararatnakar/perf-test/blob/master/docker-compose.yaml#L124      A gist of error log here {code} ===================== Querying on PEER1 on xyz0/mycc1... =====================  Attempting to Query PEER ...3 secs Attempting to Query PEER ...6 secs Attempting to Query PEER ...9 secs Attempting to Query PEER ...12 secs Attempting to Query PEER ...15 secs Attempting to Query PEER ...18 secs Attempting to Query PEER ...21 secs Attempting to Query PEER ...24 secs Attempting to Query PEER ...27 secs Attempting to Query PEER ...30 secs Attempting to Query PEER ...33 secs Attempting to Query PEER ...37 secs Attempting to Query PEER ...40 secs Attempting to Query PEER ...43 secs Attempting to Query PEER ...46 secs Attempting to Query PEER ...49 secs Attempting to Query PEER ...52 secs Attempting to Query PEER ...55 secs Attempting to Query PEER ...58 secs Attempting to Query PEER ...62 secs Attempting to Query PEER ...65 secs Attempting to Query PEER ...68 secs Attempting to Query PEER ...71 secs Attempting to Query PEER ...75 secs Attempting to Query PEER ...78 secs Attempting to Query PEER ...81 secs Attempting to Query PEER ...84 secs Attempting to Query PEER ...87 secs Attempting to Query PEER ...90 secs Attempting to Query PEER ...93 secs Attempting to Query PEER ...96 secs Attempting to Query PEER ...99 secs Attempting to Query PEER ...102 secs  2017-03-08 15:36:50.616 UTC  logging  InitFromViper -> DEBU 001 Setting default logging level to DEBUG for command 'chaincode' 2017-03-08 15:36:50.618 UTC  msp  GetLocalMSP -> DEBU 002 Returning existing local MSP 2017-03-08 15:36:50.618 UTC  msp  GetDefaultSigningIdentity -> DEBU 003 Obtaining default signing identity 2017-03-08 15:36:50.620 UTC  msp  Sign -> DEBU 004 Sign: plaintext: 0AAF070A550803220478797A302A4066...796363311A0A0A0571756572790A0161  2017-03-08 15:36:50.620 UTC  msp  Sign -> DEBU 005 Sign: digest: D558A110D9F9565EC2178938BA0F79E0C898944CECBE0A356201CE566CAEF9D4  Error: Error endorsing query: rpc error: code = 2 desc = failed to obtain cds for mycc1 - transaction not found mycc1/xyz0 Usage: peer chaincode query  flags   Flags: -x, --hex   If true, output the query value byte array in hexadecimal. Incompatible with --raw -r, --raw   If true, output the query value as raw bytes, otherwise format as a printable string  Global Flags: -C, --chainID string             The chain on which this command should be executed (default "testchainid") -c, --ctor string                Constructor message for the chaincode in JSON format (default "{}") -E, --escc string                The name of the endorsement system chaincode to be used for this chaincode -l, --lang string                Language the chaincode is written in (default "golang") --logging-level string       Default logging level and overrides, see core.yaml for full syntax -n, --name string                Name of the chaincode -o, --orderer string             Ordering service endpoint -p, --path string                Path to chaincode -P, --policy string              The endorsement policy associated to this chaincode --test.coverprofile string   Done (default "coverage.cov") -t, --tid string                 Name of a custom ID generation algorithm (hashing and decoding) e.g. sha256base64 -u, --username string            Username for chaincode operations when security is enabled -v, --version string             Version of the chaincode specified in install/instantiate/upgrade commands -V, --vscc string                The name of the verification system chaincode to be used for this chaincode  !!!!!!!!!!!!!!! Query result on PEER1 is INVALID !!!!!!!!!!!!!!!! ================== ERROR !!! FAILED to execute End-2-End Scenario ==================  Total execution time 261 secs  {code}  ></body> </Action>
<Action id="21385" issue="15250" author="yacovm" type="comment" body="any chance of a log dump of all 4 peers? (with a logging level of debug)" created="2017-03-08 16:09:57.0" updateauthor="yacovm" updated="2017-03-08 16:24:09.0"/>
<Action id="21386" issue="15250" author="yacovm" type="comment" created="2017-03-08 16:25:46.0" updateauthor="yacovm" updated="2017-03-08 16:25:46.0"> <body><! CDATA Also - I ran examples/e2e-cli/network__setup.sh up with orgleader on non-anchor peers set to true, and on anchor peers set to false, and I didn't see any problems:  ^out.log    ></body> </Action>
<Action id="21387" issue="15250" author="yacovm" type="comment" created="2017-03-08 17:25:02.0" updateauthor="yacovm" updated="2017-03-08 17:25:02.0"> <body><! CDATA I also see that peers 3, 2 are configured to have peer0 as the bootstrap peer. bootstrap peers of a peer should only be peers from the organization of the peer.  ></body> </Action>
<Action id="21390" issue="15250" author="ratnakar" type="comment" created="2017-03-08 17:57:44.0" updateauthor="ratnakar" updated="2017-03-08 17:57:44.0"> <body><! CDATA Just now we reproduced the problem using commit , with the following steps. We create 10 channel creation transaction files. {panel} ./generateCfgTrx.sh testchannel 10 {panel}  Command to launch network and run the tests on CLI container: {panel} CHANNEL_NAME=testchannel CHANNELS_NUM=10 CHAINCODES_NUM=2 ENDORSERS_NUM=4 docker-compose up {panel}  We are attaching the logs file   ^docker-logs.txt   we used, and the docker-compose file  ^docker-compose.yaml  too. Observe in the docker-compose file that it shows that peers 1 and 3 are not leader peers. And note the configtx.yaml file shows that our anchor peers are 0 and 2, which are same as leader peers.  ></body> </Action>
<Action id="21391" issue="15250" author="yacovm" type="comment" created="2017-03-08 18:06:08.0" updateauthor="yacovm" updated="2017-03-08 22:19:14.0"> <body><! CDATA I think there might be a bug, but in the meantime this trick should fix it: For each peer, put the following env var: - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0:7051   EDIT: not a bug   ></body> </Action>
<Action id="21392" issue="15250" author="ratnakar" type="comment" created="2017-03-08 18:06:37.0" updateauthor="ratnakar" updated="2017-03-08 18:06:37.0"> <body><! CDATA  ~yacovm  As per your sugegstion  {panel} I also see that peers 3, 2 are configured to have peer0 as the bootstrap peer. bootstrap peers of a peer should only be peers from the organization of the peer. {panel}  I changed peer3 to have peer2 as the bootstrap peer and removed the bootstrap peer flag *CORE_PEER_GOSSIP_BOOTSTRAP* from peer2 section. However I still see the same issue.   ></body> </Action>
<Action id="21396" issue="15250" author="yacovm" type="comment" body="what about the external endpoint? did you configure that? can you post the yaml file of the docker-compose please?" created="2017-03-08 19:04:47.0" updateauthor="yacovm" updated="2017-03-08 19:04:47.0"/>
<Action id="21397" issue="15250" author="ratnakar" type="comment" created="2017-03-08 19:21:56.0" updateauthor="ratnakar" updated="2017-03-08 19:34:50.0"> <body><! CDATA It didn't make any difference and issue is seen even after adding the configuration *CORE_PEER_GOSSIP_EXTERNALENDPOINT* for each peer {code} peer0: --- - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0:7051 ---  peer1: --- - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1:7051 --- peer2: --- - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer2:7051 ---  peer3: --- - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer3:7051 ---  {code} The docker compose file   ^docker-compose-with-externalendpoint.yaml  that been used with external endpoint configuration changes  Issue is easily reproducible with the below command. {panel} ./network_setup.sh restart testchannel 10 5 4 {panel}  ></body> </Action>
<Action id="21400" issue="15250" author="yacovm" type="comment" created="2017-03-08 21:24:21.0" updateauthor="yacovm" updated="2017-03-08 21:24:21.0"> <body><! CDATA Hmmm, it seems that at least for p0 and p1, the identities are the same, no?   yacovm@fabric1:/opt/gopath/src/github.com/hyperledger/fabric/examples/e2e/crypto/peer$ openssl x509 -in peer0/localMspConfig/signcerts/cert.pem  -text -noout Certificate: Data: Version: 3 (0x2) Serial Number: 58:83:3b:bb:10:25:48:23:2a:15:20:20:a0:b1:09:d5:38:bc:f3:72 Signature Algorithm: ecdsa-with-SHA256 Issuer: C=US, ST=North Carolina, O=Hyperledger, OU=Fabric, CN=fabric-ca-server Validity Not Before: Mar  1 04:29:00 2017 GMT Not After : Jan 28 12:29:00 2018 GMT Subject: C=US, ST=North Carolina, O=Hyperledger, OU=Fabric, CN=admin Subject Public Key Info: Public Key Algorithm: id-ecPublicKey Public-Key: (256 bit) pub: 04:9c:48:b5:07:d6:d7:37:da:f8:bd:ab:32:d2:e4: 28:35:50:7c:d0:c2:34:03:0f:58:db:5e:90:2b:07: bc:04:40:6f:e8:6c:5d:d7:aa:89:fb:91:6f:fd:b9: 99:3c:fd:d2:c1:c4:10:b0:6a:a1:79:0a:94:7a:b3: 50:73:84:dc:6d ASN1 OID: prime256v1 NIST CURVE: P-256 X509v3 extensions: X509v3 Key Usage: critical Certificate Sign X509v3 Basic Constraints: critical CA:FALSE X509v3 Subject Key Identifier: BC:D3:BA:CF:88:CB:42:37:B5:13:CB:68:DC:F7:E1:DF:C1:1D:5F:34 X509v3 Authority Key Identifier: keyid:E3:3B:29:59:7A:F2:02:61:67:74:9A:2D:CC:B4:6F:7B:12:0C:60:F4  X509v3 Subject Alternative Name: DNS:ubuntu Signature Algorithm: ecdsa-with-SHA256 30:45:02:20:41:aa:f0:9d:bc:1c:9b:24:c3:96:4b:c1:d7:f4: 60:6c:90:0f:15:f0:ab:c4:d5:2f:91:16:6f:71:39:46:b9:36: 02:21:00:9d:a8:c6:01:bc:ea:2e:46:25:03:8c:13:fb:71:39: 22:42:46:62:69:5a:a7:5e:5a:a4:6f:74:25:ab:35:ae:9b yacovm@fabric1:/opt/gopath/src/github.com/hyperledger/fabric/examples/e2e/crypto/peer$ openssl x509 -in peer1/localMspConfig/signcerts/cert.pem  -text -noout Certificate: Data: Version: 3 (0x2) Serial Number: 58:83:3b:bb:10:25:48:23:2a:15:20:20:a0:b1:09:d5:38:bc:f3:72 Signature Algorithm: ecdsa-with-SHA256 Issuer: C=US, ST=North Carolina, O=Hyperledger, OU=Fabric, CN=fabric-ca-server Validity Not Before: Mar  1 04:29:00 2017 GMT Not After : Jan 28 12:29:00 2018 GMT Subject: C=US, ST=North Carolina, O=Hyperledger, OU=Fabric, CN=admin Subject Public Key Info: Public Key Algorithm: id-ecPublicKey Public-Key: (256 bit) pub: 04:9c:48:b5:07:d6:d7:37:da:f8:bd:ab:32:d2:e4: 28:35:50:7c:d0:c2:34:03:0f:58:db:5e:90:2b:07: bc:04:40:6f:e8:6c:5d:d7:aa:89:fb:91:6f:fd:b9: 99:3c:fd:d2:c1:c4:10:b0:6a:a1:79:0a:94:7a:b3: 50:73:84:dc:6d ASN1 OID: prime256v1 NIST CURVE: P-256 X509v3 extensions: X509v3 Key Usage: critical Certificate Sign X509v3 Basic Constraints: critical CA:FALSE X509v3 Subject Key Identifier: BC:D3:BA:CF:88:CB:42:37:B5:13:CB:68:DC:F7:E1:DF:C1:1D:5F:34 X509v3 Authority Key Identifier: keyid:E3:3B:29:59:7A:F2:02:61:67:74:9A:2D:CC:B4:6F:7B:12:0C:60:F4  X509v3 Subject Alternative Name: DNS:ubuntu Signature Algorithm: ecdsa-with-SHA256 30:45:02:20:41:aa:f0:9d:bc:1c:9b:24:c3:96:4b:c1:d7:f4: 60:6c:90:0f:15:f0:ab:c4:d5:2f:91:16:6f:71:39:46:b9:36: 02:21:00:9d:a8:c6:01:bc:ea:2e:46:25:03:8c:13:fb:71:39: 22:42:46:62:69:5a:a7:5e:5a:a4:6f:74:25:ab:35:ae:9b   ></body> </Action>
<Action id="21401" issue="15250" author="bmos299" type="comment" body="I did a diff between crypto peer0,peer1,peer2,peer3. For this test they are all the same....which is a config issue by the enduser.  That being said, I can EASILY customers doing the same thing.  This was very difficult to debug.  I am hoping we can add code in gossip to ensure the PKI-ID does not match its own and it does we take appropriate actions, cut an ERROR message, stop talking to this peer? etc.    Thoughts are appreciated.  " created="2017-03-08 21:57:44.0" updateauthor="bmos299" updated="2017-03-08 21:57:44.0"/>
<Action id="21402" issue="15250" author="bmos299" type="comment" body="This is a RAS/Serviceability issue." created="2017-03-08 22:00:58.0" updateauthor="bmos299" updated="2017-03-08 22:00:58.0"/>
<Action id="21403" issue="15250" author="yacovm" type="comment" created="2017-03-08 22:06:41.0" updateauthor="yacovm" updated="2017-03-08 22:06:41.0"> <body><! CDATA It is possible to add a warning message in a case where an alive message is received with an endpoint which is different than the peers endpoint (and the pki-id is the peer's pki-id). However- a separate JIRA issue needs to be opened for that.  ></body> </Action>
<Action id="21408" issue="15250" author="bmos299" type="comment" created="2017-03-09 13:45:43.0" updateauthor="bmos299" updated="2017-03-09 13:45:43.0"> <body><! CDATA Ratnakar Jira Task: https://jira.hyperledger.org/browse/FAB-2710 for this RAS item.    ></body> </Action>
<Action id="21429" issue="15250" author="bmos299" type="comment" created="2017-03-10 13:43:52.0" updateauthor="bmos299" updated="2017-03-10 13:45:02.0"> <body><! CDATA Nishi,  Can you please retest and verify the warning message is issued:   Yacov added the following error message:   {code:java} d.logger.Error("Bad configuration detected: Received AliveMessage from a peer with the same PKI-ID as myself:", m.GossipMessage) {code}   With Gerrit CR: commit 3ad3e43d2e5bee8c2a43e6bd319cda08c1f658ba Author: YACOVM <YACOVM@il.ibm.com> Date:   Thu Mar 9 10:41:28 2017 +0200   FAB-2710  Gossip: Log WARN upon bad network config  This commit adds a log warning in case a peer detects peers with the same PKI-ID as itself but with different endpoints. The only reason that this can happen is that someone configured different peers with the same identity.  https://gerrit.hyperledger.org/r/#/c/7065   ></body> </Action>
<Action id="21433" issue="15250" author="nishi" type="comment" created="2017-03-10 16:02:34.0" updateauthor="nishi" updated="2017-03-10 16:02:52.0"> <body><! CDATA Tested on commit level: *32959205a7ae8fc499a764c8b0e567f000f3a846*  2 channels, 10 chaincodes , sending query/invoke/query on all 4 peers. crypto material on all the 4 peers kept the same to reproduce error message.  Found the following message in all peer logs: {code} 2017-03-10 15:10:25.633 UTC  gossip/discovery#172.18.0.8:7051  handleAliveMessage -> * ERRO 001 Bad configuration detected: Received AliveMessage from a peer with the same PKI-ID as myself: * tag:EMPTY alive_msg:<membership:<endpoint:"peer3:7051" pki_id:"W98\007\357r\305j\207\n\357g:\265\200p\3706\303n\232('\305\032\242\261,\373\033/C" > timestamp:<inc_number:1489158625569456942 seq_num:1 > identity:"\n\007Org1MSP\022\254\006-----BEGIN -----\nMIICOjCCAeCgAwIBAgIUWIM7uxAlSCMqFSAgoLEJ1Ti883IwCgYIKoZIzj0EAwIw\naDELMAkGA1UEBhMCVVMxFzAVBgNVBAgTDk5vcnRoIENhcm9saW5hMRQwEgYDVQQK\nEwtIeXBlcmxlZGdlcjEPMA0GA1UECxMGRmFicmljMRkwFwYDVQQDExBmYWJyaWMt\nY2Etc2VydmVyMB4XDTE3MDMwMTA0MjkwMFoXDTE4MDEyODEyMjkwMFowXTELMAkG\nA1UEBhMCVVMxFzAVBgNVBAgTDk5vcnRoIENhcm9saW5hMRQwEgYDVQQKEwtIeXBl\ncmxlZGdlcjEPMA0GA1UECxMGRmFicmljMQ4wDAYDVQQDEwVhZG1pbjBZMBMGByqG\nSM49AgEGCCqGSM49AwEHA0IABJxItQfW1zfa+L2rMtLkKDVQfNDCNAMPWNtekCsH\nvARAb+hsXdeqifuRb/25mTz90sHEELBqoXkKlHqzUHOE3G2jczBxMA4GA1UdDwEB\n/wQEAwICBDAMBgNVHRMBAf8EAjAAMB0GA1UdDgQWBBS807rPiMtCN7UTy2jc9+Hf\nwR1fNDAfBgNVHSMEGDAWgBTjOylZevICYWd0mi3MtG97Egxg9DARBgNVHREECjAI\nggZ1YnVudHUwCgYIKoZIzj0EAwIDSAAwRQIgQarwnbwcmyTDlkvB1/RgbJAPFfCr\nxNUvkRZvcTlGuTYCIQCdqMYBvOouRiUDjBP7cTkiQkZiaVqnXlqkb3QlqzWumw==\n-----END -----\n" >   2017-03-10 15:10:50.607 UTC  gossip/discovery#172.18.0.8:7051  handleAliveMessage -> *ERRO 002 Bad configuration detected: Received AliveMessage from a peer with the same PKI-ID as myself*: tag:EMPTY alive_msg:<membership:<endpoint:"peer3:7051" pki_id:"W98\007\357r\305j\207\n\357g:\265\200p\3706\303n\232('\305\032\242\261,\373\033/C" > timestamp:<inc_number:1489158625569456942 seq_num:14 > >  2017-03-10 15:11:15.614 UTC  gossip/discovery#172.18.0.8:7051  handleAliveMessage -> *ERRO 003 Bad configuration detected: Received AliveMessage from a peer with the same PKI-ID as myself*: tag:EMPTY alive_msg:<membership:<endpoint:"peer3:7051" pki_id:"W98\007\357r\305j\207\n\357g:\265\200p\3706\303n\232('\305\032\242\261,\373\033/C" > timestamp:<inc_number:1489158625569456942 seq_num:25 > >   {code}  ></body> </Action>
