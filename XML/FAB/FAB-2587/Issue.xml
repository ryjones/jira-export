<Issue id="15154" key="FAB-2587" number="2587" project="10002" reporter="kletkeman" creator="kletkeman" type="10001" summary="can&apos;t install my own chaincode via CLI" priority="3" resolution="10000" status="6" created="2017-03-02 04:22:14.0" updated="2018-07-20 18:56:42.0" resolutiondate="2018-02-05 10:40:26.0" votes="0" watches="6" workflowId="37655"> <description><! CDATA Following the instructions for installation of chaincode onto peer leads to this cli command:  docker exec -it cli bash  And later to this cli command:  CORE_PEER_ADDRESS=peer0:7051 peer chaincode install -n mycc -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 -v v0  The problem I see is that /opt/gopath is mapped into the cli container, but as with vagrant it only maps the hyperledger project. I am always forced to add /local-dev to the vagrant environment so that I can build my own chaincode.  But with the cli container, local-dev is not mapped at all, and so this trick cannot even be attempted.  The philosophy of having all cli instruction based on chaincode that resides in the fabric project itself creates a barrier to entry for those of us building and deploying chaincode from other github projects. Each new feature seems to create the same roadblock.  It would be very useful to use a separate hyperledger project for samples to force developers to accommodate the most common development and production path. Even though there are other ways to perform these tasks, the loss of REST in v1 leaves only the CLI as a reasonably short path to testing chaincode without a significant barrier.   ></description> </Issue>
