<Issue id="27355" key="FAB-8031" number="8031" project="10002" reporter="senthil1" creator="senthil1" type="10000" summary="PostgreSQL as Fabric&apos;s State Database" priority="3" resolution="10001" status="6" created="2018-02-02 08:19:52.0" updated="2020-07-23 08:44:06.0" resolutiondate="2020-01-22 22:25:27.0" votes="4" watches="28" workflowId="35516"> <description><! CDATA Fabirc v1.1 has two state database options: (i) LevelDB, and (ii) CouchDB. LevelDB is the default key/value state database which stores values as binary data. Hence, only the key based query is supported. In the case of CouchDB (a JSON document store), both binary data and JSON documents are supported. Hence, CouchDB enables rich query against the chaincode data (for JSON data).   Ledger component in fabric was reworked in fabric to partly support the v1 transaction flow, mainly the endorsement model ( https://github.com/hyperledger-archives/fabric/wiki/Next-Consensus-Architecture-Proposal ) which requires simulation of transaction and collection of read/write set, ordering of transaction, finally state validation (read set) and commit of valid transactions. Hence, we needed following features from an open-source state database (note that the following is a viewpoint on what we needed during initial ledger design discussion with Dave Enyeart (fabric-maintainer) and Manish Sethi (fabric-maintainer)):  1. Snapshot isolation level & transaction support * To ensure consistent view of data to provide repeatable read property so that chaincode does not get confused. * To allow transaction simulations to run in parallel with no contention for read and write locks which would significantly degrade the performance. * To rollback the transaction at end of the simulation.   2. Collection of read and write set * To validate the transaction during commit phase.  3. Validation of read set & commit the write set * To ensure serializability isolation level needed by most blockchain applications.   However, none of the existing databases provide all the above features (though there are a few research papers that talks about collecting read/write set, etc...). Hence, ledger component in fabric was reworked to support the endorsement model (https://jira.hyperledger.org/browse/FAB-758?jql=text%20~%20%22ledger%22) by collecting read/write set and validating the same on ledger itself rather than within the database. Due to this design, we couldn't use sophisticated queries within transaction (i.e., write).   Instead of building a lot of database concept in ledger, we propose for a modified PostgreSQL as a state database so that we can support the following:  1. Both {color:#000000}relational{color} data model (structural data), and  {color:#000000}JSON{color} data model (non-structural data) * As traditional applications are built using relational data model, it would ease their movement to the fabric. Further, certain applications need to maintain entity relationships between data items (could be done easily with the relational model).  2. Structured Query Language ({color:#000000}SQL{color}) on chaincodes for both data models. * Ease analytics operations.  {color:#000000}3. Sophisticated{color} {color:#000000}queries{color} (both read and write) as a part of {color:#000000}transactions{color}. * With no restriction on the type of queries (i.e., joins, nested queries, group by, etc…) and with the combination of both chaincodes (go, java, nodejs) and SQL, it would become easier to write smart contracts with more power. Even smart-contract can be implemented fully in SQL procedure by still retaining chaincode to do invoke of SQL procedure.   {color:#000000}4. Read Your Own Write{color} (within a chaincode transaction).  {color:#000000}5. History{color}/provenance query {color:#000000}using SQL{color}.  {color:#000000}6. Recovery{color} and new node joining using database {color:#000000}checkpointing{color}.  7. Use of {color:#000000}Access Control{color} (GRANT PERMISSIONS) features along with {color:#000000}row level security policies {color}in PostgreSQL.  8. State replication to Intra organization {color:#000000}committer only{color} node using {color:#000000}selective replication{color}.  {color:#000000}9. Simultaneous{color} execution of both {color:#000000}simulation{color} and final {color:#000000}commit{color}.  We have come up a proposal to modify PostgreSQL v10 to support the fabric's endorsement model so that we can support PostgreSQL as state database. This is a preliminary design and we have already implemented a few required components to ensure that it can be done. We will post a detailed design document soon. We would like to hear feedback on the early design, any flaws/changes required in our design, flaws, the usefulness of this work, etc...    Corda (another blockchain platform) supports relational database.  ></description> </Issue>
