<Action id="19533" issue="13218" author="angelo.decaro" type="comment" body="I think the most important thing is to have the hash function pluggable. It is already to some extend given that once can choose among SHA2 and SHA3 families. The introduction of the BCCSP (https://jira.hyperledger.org/browse/FAB-354) should simplify even more this by allowing everyone to plug in the algorithms that they better prefer." created="2016-10-27 13:35:59.0" updateauthor="angelo.decaro" updated="2016-10-27 13:35:59.0"/>
<Action id="19538" issue="13218" author="binhn" type="comment" body="Today we allow the setting on core.yaml `hashAlgorithm: SHA3`.  We can just simply change that to SHA2, but I agreed with Angelo on pluggability so that we don&apos;t have to check this flag" created="2016-10-28 12:40:15.0" updateauthor="binhn" updated="2016-10-28 12:40:15.0"/>
<Action id="19540" issue="13218" author="bcbrock" type="comment" body="I&apos;ve looked through the issue that Angelo referenced, plus several of his code changes. How does the user specify their choice in this new approach? Are the current YAML options going to be removed?" created="2016-10-28 13:54:55.0" updateauthor="bcbrock" updated="2016-10-28 13:54:55.0"/>
<Action id="19542" issue="13218" author="angelo.decaro" type="comment" body="I&apos;m expecting the current options to go away but, of course, there will be some configuration anyway. In that case, what to choose as default can be discussed. Again, what I care that it is pluggable and that there are from the very beginning multiple options available so that one goes to production can decide really what he wants." created="2016-10-28 15:57:10.0" updateauthor="angelo.decaro" updated="2016-10-28 15:57:10.0"/>
<Action id="19549" issue="13218" author="bcbrock" type="comment" body="I am not arguing against pluggability, but rather noting that pluggability is a one-time-only option. Once a blockchain is initiated with one crypto-suite, clients will not be able to switch to a new suite for their blockchain without great pain. Therefore it is important that we steer clients to crypto suites that have the broadest possible support." created="2016-10-28 19:22:59.0" updateauthor="bcbrock" updated="2016-10-28 19:22:59.0"/>
<Action id="19562" issue="13218" author="angelo.decaro" type="comment" body="Look, Ethereum is using SHA3 and not even a standard version of it. Instantiating a blockchain is not an easy thing. Care must be put in choosing all the parameters, anyway." created="2016-10-31 07:14:12.0" updateauthor="angelo.decaro" updated="2016-10-31 07:14:12.0"/>
<Action id="19743" issue="13218" author="kchristidis" type="comment" created="2016-11-13 06:37:22.0" updateauthor="kchristidis" updated="2016-11-13 06:45:15.0"> <body><! CDATA I think there are two points to make here:  1. I am no crypto expert, but based on the arguments presented here, it seems that SHA-2 should be the default choice. Do we agree on that?  2. The orderer heavily relies on the function, since it is the one that is generating the blockchain. Having a quick look at the codebase, I'm a bit lost as to what the right function to call is anymore. I thought that the (horribly-named) `ComputeCryptoHash` function in the `core/util` package was the single point of reference for all of our hashing needs. However I see that (a) `ComputeCryptoHash` is hardcoded to use sha3, and (b) the `crypto/primitives` package rolls with their own hashing functions. (On top of that, if I'm not mistaken, a `SetSecurityLevel` function in that package needs to be called first.)  Can we reach an agreement on how to do hashing going forward? Specifically, I would like us to settle on: # The function's signature: Hash(data  byte)   byte, or Hash(algo string, data   byte)   byte to avoid the need for a separate `SetSecurityLevel` call (or an editing of a YAML file that's outside of our domain, as is the case with the core YAML file and the orderer) # The package where it belongs: core/util, orderer/common/util, crypto/primitives?  ></body> </Action>
<Action id="19763" issue="13218" author="angelo.decaro" type="comment" body="I would say that the orderer has to have its own way to configure the hash function to use. This might mean that there is a place where an hash.Hash instance can be obtained. Once this is in, one can later decide if the hash.Hash instance has to be provided by the BCCSP or is hardocded or something else. Does this make sense?" created="2016-11-15 14:06:02.0" updateauthor="angelo.decaro" updated="2016-11-15 14:06:02.0"/>
<Action id="20038" issue="13218" author="mastersingh24" type="comment" body="this is not a bug so changing to improvement" created="2016-12-09 13:14:08.0" updateauthor="mastersingh24" updated="2016-12-09 13:14:08.0"/>
