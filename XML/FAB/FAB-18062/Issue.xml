<Issue id="45588" key="FAB-18062" number="18062" project="10002" reporter="caod" assignee="tsharris" creator="caod" type="10001" summary="Support individual Orderer value updates" priority="3" resolution="10000" status="6" created="2020-07-10 20:56:00.0" updated="2020-07-24 14:18:12.0" resolutiondate="2020-07-23 18:23:05.0" votes="1" watches="3" workflowId="59491" archived="N"> <description><! CDATA As a consumer of the fabric-config library, I would like to update individual fields in my orderer configuration without having to go through the existing process of cloning the orderer configuration via `GetConfiguration()` and then modifying the specific fields I want to update. Currently if you wanted to update just the `MaxMessageCount` of an orderer's batchSize config, you would do something like: {code:java} o := c.Orderer() ordererConfig := o.GetConfiguration() ordererConfig.BatchSize.MaxMessageCount = 100 // new value o.SetConfiguration(ordererConfig){code} While the existing `GetConfiguration` -> `SetConfiguration` model has it's own use cases, the above could have simply been supported as    {code:java} o := c.Orderer() o.SetMaxMessageCount(100){code} which is both more in line with how the rest of the API operates and less confusing for having to follow a different process than for say `o.AddCapability`.        For now, lets keep the existence of `SetConfiguration` and `GetConfiguration` and just add the other functions to support a separate path for making individual field updates.     *Acceptance*  There are new api functions for `OrdererGroup` that implement each of the supported values we add via `setOrdererValues`:  https://github.com/hyperledger/fabric-config/blob/7beda2c830d8d474eda0b187ef9cd8ecb3195724/configtx/orderer.go#L585  * SetMaxMessageCount (persist existing values for other BatchSize values) * SetAbsoluteMaxBytes (persist existing values for other BatchSize values) * SetPreferredMaxBytes (persist existing values for other BatchSize values) * SetBatchTimeout * SetMaxChannels * AddCapability (already supported) * SetConsensusType * Up to implementer whether there should be a SetKafkaBrokers/SetEtcdRaftMetadata that also sets the corresponding ConsensusType automatically * Additional support for modifying individual EtcdRaftMetadata values/options (ie similar to what was added for AddConsenter/RemoveConsenter) * SetConsensusState (persists existing consensus type values)  The examples are also updated to either show both methods of updating an orderer configuration.     ></description> </Issue>
