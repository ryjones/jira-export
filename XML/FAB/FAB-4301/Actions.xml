<Action id="25141" issue="17373" author="denyeart" type="comment" created="2017-06-02 16:54:04.0" updateauthor="denyeart" updated="2017-06-02 16:54:04.0"> <body><! CDATA Note on this one:  _history:_     _# enableHistoryDatabase - options are true or false_     _# Indicates if the history of key updates should be stored in goleveldb {color:#ff0000}comment out if using CouchDB?{color}_     _enableHistoryDatabase: true_     Even if using CouchDB as state database, history 'index' is always stored in goleveldb.  No need to comment out.  ></body> </Action>
<Action id="25182" issue="17373" author="markparz" type="comment" body="Excellent, thanks  ~denyeart  made a change in https://gerrit.hyperledger.org/r/#/c/10089/" created="2017-06-02 19:51:56.0" updateauthor="markparz" updated="2017-06-02 21:18:22.0"/>
<Action id="25898" issue="17373" author="markparz" type="comment" body=" ~C0rWin   ~yacovm  Can you guys look at the Gossip section please?  ~elli-androulaki   ~adc  I have a few questions in the security section.  ~muralisr  a question in the Chaincode portion." created="2017-06-09 18:02:08.0" updateauthor="markparz" updated="2017-06-09 18:02:08.0"/>
<Action id="25902" issue="17373" author="yacovm" type="comment" created="2017-06-09 18:46:34.0" updateauthor="yacovm" updated="2017-06-09 18:46:34.0"> <body><! CDATA {quote} # ID of this instance What does this instance mean? I thought it would the peer ID listed above... Seems like it would be a name, but below is "endpoint".{quote} That's not correct and is a mistake. This isn't the ID of the instance. It just overrides the endpoint that the peer publishes to other peers, that's all.  By the way - the peer id isn't in use... it's an ancient remnant of 0.5 and I think it maybe only affects the chaincode name of the container but not 100% sure (can check though) {quote} endpoint: What does it mean being blank? Does it inherit the peer id?{quote} This overrides the endpoint that the peer tells gossip. Imagine that the peer runs in a container and the container tells the peer process that its ip address is 172.20.0.2 which is a virtual ip address that only your computer can access. However- you're in a hackathon and you want other computes to connect to your peer (running in a container). If you set this, this overrides the endpoint that gossip tells other peers and they will be able to reach you, if you put there the ip address of your laptop.  {quote} # Maximum count of blocks we store in memory Does this purge all blocks or just drop the first one that was received off (FIFO)?{quote} Great question!  So if this is set to 100 (for example), Upon receiving a block with index *i* , it evicts every block *j<i* in memory that its sequence number: *| i - j | > 100 *  {quote}        # Number of times a message is pushed to remote peers Why would someone do > 1? wouldn't there be a retry if there was a failure anyway? Does this mean as I think, where it would push the message multiple times regardless of success? propagateIterations: 1{quote} No, if there is a failure to send a message to any peer, not only the message is dropped, but also the connection to the peer is closed. This is because sending messages is in the critical path, and you don't want to "waste" resources on peers that are: * Slow / have network problems * Byzantine This configuration key is used for the gossip forwarding which is optimized for speed and throughput. For data synchronization we have other mechanisms {quote} # Number of peers selected to push messages to Is there a clever ratio to use based on # of pulls for # of peers in a network? or is this optimal to have the least amount of noise, while best chance of accuracy? Are these random peers that gossip picks or defined?{quote} It should be related to number of peers in the network. We are currently evaluating the optimal formula.  They are selected randomly.  {quote} # Number of peers to pull from Is there a clever ratio to use based on # of pulls for # of peers in a network? or is this optimal to have the least amount of noise, while best chance of accuracy? Are these random peers that gossip picks or defined? or the same peers as the push? {quote} Same - random, evaluating.  {quote}   # Determines frequency of pulling state info messages from peers(unit: second) What are the messages above, and how are the different from the state messages noted here? Why would these be different?{quote} StateInfo messages are messages that hold the ledger height of a peer in a certain channel.  No idea what "state" messages you refer to.  # Maximum time a stateInfo message is kept until expired Does blank mean keep til expired? {quote}        stateInfoRetentionInterval:{quote} Oops... we need to remove this as this is not in use anymore. Didn't know this was here.   {quote}        # Should we skip verifying block messages or not reword to "Skip verifying block messages (true/false)" skipBlockVerification: false{quote} Yeah, I'll open a JIRA to address this + the previous one.   {quote}        # Time to wait before pull engine processes incoming digests (unit: second) We need to doc in readthedocs what these all mean in detail. digestWaitTime: 1s{quote} Do you want to open a JIRA for certain documentation aspects you want to be present?  This one is a bit complicated and IMO shouldn't be documented as this isn't something that a user should mess with at all. It's well documented in the  code|https://github.com/hyperledger/fabric/blob/master/gossip/gossip/algo/pull.go#L28-L44 .  {quote}            # Interval gossip membership sampled to check its stability (unit: second) Does this mean it will check the leader every second for a leader, and if it hits 10 consecutive seconds defined below it will start the leader election process?{quote} Precisely.  {quote} # the authentication handshake with remote peers reword "skip verification of remote peer signature when performing the authentication handshake with remote peers (true/false)" skipHandshake: false{quote} This does not exist anymore, I removed it.  {quote}            # Longest time peer wait for stable membership during leader election startup (unit: second) We need to describe what this means, and what happens if it goes over grace. startupGracePeriod: 15s{quote} Can you please open a JIRA that aggregates what you think should be documented?  {quote} # The address that the Event service will be enabled on the validator Need a better description, listening port for events, or something. address: 0.0.0.0:7053{quote} The validator is not even something that exists anymore, it's a 0.5 relic.    ></body> </Action>
