<Action id="21001" issue="14913" author="denyeart" type="comment" created="2017-02-18 13:29:11.0" updateauthor="denyeart" updated="2017-02-18 13:29:11.0"> <body><! CDATA For example, many of us want to run peer with CORE_LOGGING_LEVEL=DEBUG, but want to silence a chatty component like gossip, which is only possible today from CLI such as:  peer logging setlevel gossip/comm#-1 ERROR peer logging setlevel gossip/discovery#0.0.0.0:7051 ERROR peer logging setlevel gossip/gossip#0.0.0.0:7051 ERROR  (Note - ideally the part after the # should not be required).  ></body> </Action>
<Action id="21002" issue="14913" author="denyeart" type="comment" body="I tagged Will Lahti, but anybody else is welcome to pick this up before Will gets to it." created="2017-02-18 13:31:28.0" updateauthor="denyeart" updated="2017-02-18 13:31:28.0"/>
<Action id="21040" issue="14913" author="binhn" type="comment" created="2017-02-19 17:02:30.0" updateauthor="binhn" updated="2017-02-19 17:05:54.0"> <body><! CDATA Somehow we need to figure out and support a hierarchy specification;  that is from CLI, we should be able to do  {{peer logging setlevel gossip ERROR}}  which would set all gossip* to ERROR.  This might be possible if we list all controllable subcomponents in the core.yaml such that the CLI could figure out any subcomponents. For example,   {noformat} gossip: warning  comm: error client: info {noformat}   a subtree extract would provide all the children of gossip, and the CLI may override their logging level.  ></body> </Action>
<Action id="21041" issue="14913" author="yacovm" type="comment" created="2017-02-19 17:09:32.0" updateauthor="yacovm" updated="2017-02-19 17:09:32.0"> <body><! CDATA An idea I thought of was to embed go-logging's Logger, and when someone does: https://github.com/op/go-logging/blob/master/logger.go#L112 register the subcomponent (the prefix before the "/") to a shared map in the flogging package, and then iterate over all these components and adjust the log levels appropriately.  I guess there is a catch in this though- the components might load after the flogging loads.   ~wlahti  what do you think?   ></body> </Action>
<Action id="22031" issue="14913" author="benjsmi" type="comment" created="2017-04-10 13:07:03.0" updateauthor="benjsmi" updated="2017-04-10 13:07:03.0"> <body><! CDATA I would like to +1 or otherwise add my support/request to this issue/work item.  When we deploy networks to our service internally, the tendency/desire is to start them with debug-level logging s.t. we can ensure everything is functioning properly.  The result of this, however is that 99% of the logs that come into the logging service for an _at rest_ (meaning, no one's deploying chaincode or running transactions) are at the DEBUG level.  The description from our SRE folks is there should probably be plenty of logs that are at INFO, TRACE, or even SILLY levels if those are options.  SRE also suggests that if those aren't options, they probably should be.  Example data set from staging Bluemix service: !screenshot-1.png|thumbnail!   This is not just a Bluemix service issue, however. I'm certain that customers will want to have more fine-grained control over the amount and types of logs they receive for a single component.  Taking the peer as an example, we need to not see 99% of logs in the debug level.  SRE suggested that the split should be more even between these more fine-grained/detailed levels.  ></body> </Action>
<Action id="22087" issue="14913" author="wlahti" type="comment" created="2017-04-11 15:05:10.0" updateauthor="wlahti" updated="2017-04-11 15:05:10.0"> <body><! CDATA This JIRA will be addressed through a series of three CRs, the first of which has already been merged.  1. https://gerrit.hyperledger.org/r/#/c/7281/ adds the ability to set log levels using regular expressions - merged 2. https://gerrit.hyperledger.org/r/#/c/7421/ stores the log levels at the end of peer startup to enable a quick revert of all log levels - awaiting code review 3. the final CR will update the Fabric codebase to use flogging.MustGetLogger() in place of logging.MustGetLogger() so that the above CRs can be completely enabled.     ></body> </Action>
<Action id="22088" issue="14913" author="wlahti" type="comment" body=" ~benjsmi  That&apos;s great feedback and should definitely be a point of emphasis going forward. I opened another JIRA a while back (https://jira.hyperledger.org/browse/FAB-1870) to start formalizing a set of logging guidelines. I think that item would be a better place to incorporate your feedback and track the progress." created="2017-04-11 15:10:35.0" updateauthor="wlahti" updated="2017-04-11 15:11:03.0"/>
<Action id="22111" issue="14913" author="benjsmi" type="comment" body="I had added my next point of feedback to FAB-1870." created="2017-04-11 17:34:04.0" updateauthor="benjsmi" updated="2017-04-11 17:34:04.0"/>
<Action id="22781" issue="14913" author="jimthematrix" type="comment" body="+1, a customer is also trying to debug their system so logging is set to debug and the logs are filling up very quickly from the gossip messages" created="2017-04-20 22:19:38.0" updateauthor="jimthematrix" updated="2017-04-20 22:19:38.0"/>
<Action id="23018" issue="14913" author="amber-zhang" type="comment" created="2017-04-26 09:50:35.0" updateauthor="amber-zhang" updated="2017-04-26 09:50:35.0"> <body><! CDATA Hi Will,  In this version, dynamic setting logging level doesn't work. Details, please see below.  root@d842b23d2b16:/opt/gopath/src/github.com/hyperledger/fabric/peer# peer -v  Fabric peer server version 1.0.0-snapshot-d4cc809 2017-04-26 09:47:45.376 UTC  main  main -> INFO 001 Exiting.....  root@d842b23d2b16:/opt/gopath/src/github.com/hyperledger/fabric/peer# peer logging setlevel gossip warning 2017-04-26 09:28:33.889 UTC  cli/logging  setLevel -> INFO 001 Log level set for peer module 'gossip': WARNING 2017-04-26 09:28:33.889 UTC  main  main -> INFO 002 Exiting..... root@d842b23d2b16:/opt/gopath/src/github.com/hyperledger/fabric/peer# peer logging getlevel gossip 2017-04-26 09:28:39.565 UTC  cli/logging  getLevel -> INFO 001 Current log level for peer module 'gossip': DEBUG 2017-04-26 09:28:39.565 UTC  main  main -> INFO 002 Exiting..... root@d842b23d2b16:/opt/gopath/src/github.com/hyperledger/fabric/peer# peer logging getlevel gossip 2017-04-26 09:28:53.288 UTC  cli/logging  getLevel -> INFO 001 Current log level for peer module 'gossip': DEBUG 2017-04-26 09:28:53.288 UTC  main  main -> INFO 002 Exiting..... root@d842b23d2b16:/opt/gopath/src/github.com/hyperledger/fabric/peer# peer logging setlevel gossip WARNING 2017-04-26 09:29:07.352 UTC  cli/logging  setLevel -> INFO 001 Log level set for peer module 'gossip': WARNING 2017-04-26 09:29:07.352 UTC  main  main -> INFO 002 Exiting..... root@d842b23d2b16:/opt/gopath/src/github.com/hyperledger/fabric/peer# peer logging getlevel gossip 2017-04-26 09:29:10.963 UTC  cli/logging  getLevel -> INFO 001 Current log level for peer module 'gossip': DEBUG 2017-04-26 09:29:10.963 UTC  main  main -> INFO 002 Exiting..... root@d842b23d2b16:/opt/gopath/src/github.com/hyperledger/fabric/peer# peer logging setlevel gossip ERROR   2017-04-26 09:45:30.642 UTC  cli/logging  setLevel -> INFO 001 Log level set for peer module 'gossip': ERROR 2017-04-26 09:45:30.642 UTC  main  main -> INFO 002 Exiting..... root@d842b23d2b16:/opt/gopath/src/github.com/hyperledger/fabric/peer# peer logging getlevel gossip 2017-04-26 09:45:35.090 UTC  cli/logging  getLevel -> INFO 001 Current log level for peer module 'gossip': DEBUG 2017-04-26 09:45:35.090 UTC  main  main -> INFO 002 Exiting.....  ></body> </Action>
<Action id="23020" issue="14913" author="wlahti" type="comment" created="2017-04-26 12:07:30.0" updateauthor="wlahti" updated="2017-04-26 12:07:30.0"> <body><! CDATA I posted a variant of this information in a few RocketChat channels and can be sure this information is included in some documentation somewhere:  For environments similar to the one created using `./network_setup.sh up`, I recommend the following method to suppress certain log modules within peer docker containers. : 1. connect to the CLI container `docker exec -it cli bash` 2. run the setlevel command with the CORE_PEER_ADDRESS environment variable provided to specify which peer you'd like to run the command against and the module name you would like to update: for example, `CORE_PEER_ADDRESS=peer1:7051 peer logging setlevel gossip warning` (making sure to update the peer address in the environment variable to the value for your environment).   ></body> </Action>
