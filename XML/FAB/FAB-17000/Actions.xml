<Action id="65265" issue="43097" author="yacovm" type="comment" created="2019-11-04 16:43:23.0" updateauthor="yacovm" updated="2019-11-04 16:43:23.0"> <body><! CDATA What if every node would monitor expiration for its own enrollment certificate? It should be quite easily implemented and tested.  This would only exclude admin certificate warnings and client certificate warnings, and I think it's a good start.   ></body> </Action>
<Action id="65267" issue="43097" author="ptippett" type="comment" body=" ~yacovm  that makes sense to me if it&apos;s easy and could be done pretty quickly.  Then the rest could follow in the future." created="2019-11-04 17:02:51.0" updateauthor="ptippett" updated="2019-11-04 17:02:51.0"/>
<Action id="65268" issue="43097" author="jyellick" type="comment" created="2019-11-04 17:23:29.0" updateauthor="jyellick" updated="2019-11-04 17:23:29.0"> <body><! CDATA Adding a warning for the node's signer-cert is definitely an easy one to do.  That being said, it's probably also the least useful of the warnings.  The only expiration checks we make are against client certs at Proposal, Broadcast, or Deliver time, because otherwise, we don't have a reliable way to know when the actual signature was generated and agree to whether the cert was expired at that time.  Even if these certs caused problems when expired (which, I don't think they do), they're also easy to fix after the fact by simply replacing them.  The local TLS server certs I would think would be more useful to log than signercerts (though fortunately, a fix there after breakage is fairly straightforward)  The most useful cert expirations to check though would be the admin certs, and CA/intermediate CA certs.  These are also the hardest to correct if they are expired.  It would produce a lot of noise (all nodes, logging every near-expiration) though it's probably better than accidentally having them expire.  ></body> </Action>
<Action id="65271" issue="43097" author="yacovm" type="comment" created="2019-11-04 19:04:40.0" updateauthor="yacovm" updated="2019-11-04 19:04:40.0"> <body><! CDATA {quote}The only expiration checks we make are against client certs at Proposal, Broadcast, or Deliver time {quote} But Jason,the *Deliver* API serves not only clients but also peers and other orderer nodes. In addition, if a node has an expired cert it  won't be able to launch|https://github.com/hyperledger/fabric/blob/719e8929cc6dc724ab072991d40c5d64d423d7cc/msp/mspimplsetup.go#L381  at all.  {quote}they're also easy to fix after the fact by simply replacing them.{quote} The question is whether it is always easy to replace them. The whole idea here is to prevent a downtime of the system and alert the operator early on to do a controlled maintenance that might not even require a downtime.   {quote}The local TLS server certs I would think would be more useful to log than signercerts (though fortunately, a fix there after breakage is fairly straightforward){quote} That can be done too.   {quote} The most useful cert expirations to check though would be the admin certs, and CA/intermediate CA certs.  These are also the hardest to correct if they are expired.  It would produce a lot of noise (all nodes, logging every near-expiration) though it's probably better than accidentally having them expire.{quote} Actually if they expire you can just restart the orderers in a mode that doesn't check expiration at Broadcast and then you're good.   However, since now we can issue new admin certs without interaction with Fabric (via issuing a new certificate for the admin OU) I think this is less critical than before.    ></body> </Action>
<Action id="65279" issue="43097" author="jyellick" type="comment" created="2019-11-04 20:39:51.0" updateauthor="jyellick" updated="2019-11-04 20:39:51.0"> <body><! CDATA {quote} But Jason,the Deliver API serves not only clients but also peers and other orderer nodes. In addition, if a node has an expired cert it won't be able to launch at all. {quote}  Yes, agreed, those are both good reasons to warn on signercert expiration.  And I agree on your other points as well.  I was simply trying to say that of the cert expirations which are possible, the signercert is probably the most benign and least impactful.  CAs expiring is worse, and although i sincerely hope the entire world transitions to the new admin OU support, for those MSPs which still rely on explicitly enumerated admin certs, their expiration is probably the most likely to occur, and the least likely to be noticed.  The question is what should we prioritize to report on?  The local MSP ones are certainly easiest, though I'd argue the channel config ones aren't much harder.  ></body> </Action>
<Action id="65286" issue="43097" author="yacovm" type="comment" created="2019-11-04 23:26:34.0" updateauthor="yacovm" updated="2019-11-04 23:26:34.0"> <body><! CDATA https://gerrit.hyperledger.org/r/#/c/fabric/+/34229/   Here you go,  ~ptippett  - warns you a week before, for enrollment certificate and TLS client and server certificates.    ></body> </Action>
<Action id="65383" issue="43097" author="yacovm" type="comment" body="and backported to 1.4 https://gerrit.hyperledger.org/r/#/c/fabric/+/34295/ " created="2019-11-08 13:56:32.0" updateauthor="yacovm" updated="2019-11-08 13:56:32.0"/>
<Action id="72402" issue="43097" author="JIRAUSER22919" type="comment" created="2022-01-20 00:16:31.0" updateauthor="JIRAUSER22919" updated="2022-01-20 20:50:25.0"> <body><! CDATA After being bit by this in production I can say we should have more than a week, at least a month, and then more and more chatty logs as the the date of expiration approaches. I favor adding a startup failure once a week is left with a manual startup override configuration necessary in order to enable startup.  Remediation to this can create unrecoverable states. Thus there should be warnings added ahead of time, much ahead of expiration.  ></body> </Action>
