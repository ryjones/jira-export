<Action id="42228" issue="28758" author="joe-alewine" type="comment" body=" ~markparz " created="2018-03-27 18:04:34.0" updateauthor="joe-alewine" updated="2018-03-27 18:04:34.0"/>
<Action id="42485" issue="28758" author="pandrejko" type="comment" created="2018-04-03 20:32:42.0" updateauthor="pandrejko" updated="2018-04-03 20:32:42.0"> <body><! CDATA Barry feels strongly that the content is still valid and removing it would be a loss to the documentation. He suggested adding a link to the  whitepaper _'For more information on system architecture and performance... '_  I went through the topic and found the following suspect information - there is probably alot more - but some of this is around the version numbers, is it important to update or not? (I'm not sure if specific references to *v1* imply *v1 or higher*?)    # Part I: Elements of the architecture relevant to Hyperledger Fabric *v1*    2. Remark: This document currently assumes that a transaction either creates new chaincode or invokes an operation provided by *one already deployed chaincode. This document does not yet describe: a) optimizations for query (read-only) transactions (*included in v1*), b) support for cross-chaincode transactions (*post-v1 feature).**  3. Under State: Support for cross-chaincode transactions, that modify the state belonging to two or more chaincodes is a *post-v1 feature*  4. Ledger is a new Key Concept, consider does it need to be repeated here?  5. Is the following  still true? Ledger is kept at all peers and, optionally, at a subset of orderers. In the context of an orderer we refer to the Ledger as to OrdererLedger, whereas in the context of a peer we refer to the ledger as to PeerLedger. PeerLedger differs from the OrdererLedger in that peers locally maintain a bitmask that tells apart valid transactions from invalid ones *(see Section XX for more details).*  6. Peers may prune PeerLedger as described in *Section XX (post-v1 feature).*  7. The ledger allows peers to replay the history of all transactions and to reconstruct the state. Therefore, state as described in Sec 1.2.1 is an _*optional datastructure.*_ *<< Is this still true?*  8. Under 3.1 Endorsement Policies: _*dynamic addition of endorsement policies is not allowed*_, but can be supported in future. *<< Is this still true?*  ></body> </Action>
<Action id="44974" issue="28758" author="pandrejko" type="comment" body="New issue has been opened for this topic FAB-10318. Closing this a dup for now since we don&apos;t need to track it in 2 places." created="2018-05-23 12:52:50.0" updateauthor="pandrejko" updated="2018-05-23 12:52:50.0"/>
