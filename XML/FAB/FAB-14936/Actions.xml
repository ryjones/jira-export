<Action id="60074" issue="38923" author="mhbauer" type="comment" body="I&apos;m pretty sure this is the same &quot;one side hangs up the other side&quot; I describe in FAB-13539 " created="2019-05-16 15:56:19.0" updateauthor="mhbauer" updated="2019-05-16 15:56:19.0"/>
<Action id="60429" issue="38923" author="ronenschafferibm" type="comment" body="https://gerrit.hyperledger.org/r/c/fabric/+/31565" created="2019-05-28 11:04:05.0" updateauthor="ronenschafferibm" updated="2019-05-28 11:04:05.0"/>
<Action id="60449" issue="38923" author="mhbauer" type="comment" created="2019-05-28 19:58:39.0" updateauthor="mhbauer" updated="2019-05-28 19:58:39.0"> <body><! CDATA dup with more information in https://jira.hyperledger.org/browse/FAB-14960   ></body> </Action>
<Action id="60457" issue="38923" author="ronenschafferibm" type="comment" created="2019-05-29 13:49:14.0" updateauthor="ronenschafferibm" updated="2019-05-29 13:49:14.0"> <body><! CDATA There might be more than one connection created from comm1 to comm2. That’s because getConnection() in conn.go doesn’t  add |https://github.com/hyperledger/fabric/blob/bf67707e609b1d61392c8f614412ddcf53eabd55/gossip/comm/conn.go#L122 the connection it  creates |https://github.com/hyperledger/fabric/blob/bf67707e609b1d61392c8f614412ddcf53eabd55/gossip/comm/conn.go#L79-L92 into the pki2conn map in the same critical block. The creation of more than one connection alone is not the problem, since there are examples of test running where 2 connection are created, and the test still passes. But, every time the test fails, 2 connection (or more) are created.  When the test fails and there are 2 connections, the following sequence of events happen (the diagram below might help understand). comm1  opens |https://github.com/hyperledger/fabric/blob/842c10043f68bedb606eb7d1ddc04e802c7c271b/gossip/comm/comm_test.go#L639-L645 2 connections to comm2 simultaneously in different goroutines. Then, comm1  closes |https://github.com/hyperledger/fabric/blob/842c10043f68bedb606eb7d1ddc04e802c7c271b/gossip/comm/conn.go#L105-L113 the 2nd connection and keeps the 1st one. According to the  comment|https://github.com/hyperledger/fabric/blob/842c10043f68bedb606eb7d1ddc04e802c7c271b/gossip/comm/conn.go#L105 , it wrongly thinks that the connection it keeps is a connection that a remote peer has initiated.  From comm2 perspective, when it sees the 2nd connection, it  closes |https://github.com/hyperledger/fabric/blob/842c10043f68bedb606eb7d1ddc04e802c7c271b/gossip/comm/conn.go#L164-L173 the older one (the 1st connection). Now, both connections are closed and when comm1 will try to send a new message (on the 1st connection), it’ll fail because the connection is closed.  Basically, there is a race between the goroutines to create a connection when no connection exists. !image-2019-05-29-16-41-43-269.png! One option for a hack to make the test pass is to add a small sleep (50 ms) after the first sending to make all subsequent sendings use the first’s connection.     ></body> </Action>
<Action id="60467" issue="38923" author="swetharepakula" type="comment" created="2019-05-29 16:19:23.0" updateauthor="swetharepakula" updated="2019-05-29 16:19:23.0"> <body><! CDATA This test seems to have the same problem as TestAccept. Essentially because comm.Send starts up a goroutine to send the message they both are doing parallel sends.   ~ronenschafferibm I have already submitted a fix for this problem.  https://gerrit.hyperledger.org/r/#/c/fabric/+/31552/ . Perhaps that fix will fix this test as well.  ></body> </Action>
<Action id="61116" issue="38923" author="ronenschafferibm" type="comment" body="Closing this issue since it&apos;ll be solved by https://jira.hyperledger.org/browse/FAB-15486" created="2019-06-19 11:01:47.0" updateauthor="ronenschafferibm" updated="2019-06-19 11:01:47.0"/>
<Action id="61425" issue="38923" author="mhbauer" type="comment" body="refactored into something that can&apos;t hit this issue as of https://gerrit.hyperledger.org/r/#/c/fabric/+/31841/" created="2019-07-02 19:10:52.0" updateauthor="mhbauer" updated="2019-07-02 19:10:52.0"/>
<Action id="68797" issue="38923" author="denyeart" type="comment" created="2020-04-09 20:53:27.0" updateauthor="denyeart" updated="2020-04-09 20:53:27.0"> <body><! CDATA Hit again on release-1.4:   https://dev.azure.com/Hyperledger/Fabric/_build/results?buildId=11794&view=logs&jobId=a11cdf60-0d11-5130-c801-1b4953009464&j=a11cdf60-0d11-5130-c801-1b4953009464&t=849b73ad-cbaa-5065-7214-c0ac3d42920d      ></body> </Action>
