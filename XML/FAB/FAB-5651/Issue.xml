<Issue id="20018" key="FAB-5651" number="5651" project="10002" reporter="adnanchoudhury" assignee="gennadyl" creator="adnanchoudhury" type="10004" summary="Gossip-non-leader peer unexpectedly receives blocks from a source other than gossip-leader-peer" priority="3" resolution="10000" status="6" created="2017-08-07 21:35:18.0" updated="2018-07-20 14:14:00.0" resolutiondate="2017-08-28 14:37:32.0" votes="0" watches="3" workflowId="39658"> <description><! CDATA A non-leader peer is expected to receive blocks only from the leader peer, but it is observed that it receives blocks from the orderer directly.  *Steps:* 1) Spin up a 2org-4peer network (please see attached docker-compose and configtx file). peer0 of both org is defined as anchor and leader of corresponding org. Gossip leader election is false in all 4 peers. 2) Install and invoke chaincode "example02" 3)After few seconds, stop all the peers except org2 leader (i.e. peer0.org2.example.com is alive, others 3 peers are stopped). 4) 3 transactions on chaincode via peer0org2. 5) In the peer0org2, Corrupt the last block in ledgerfile (/var/hyperledger/production/ledgersData/chains/chains/behavesystest/blockfile_000000)  6) Bring back up the non-leader of org2 (peer1Org2.example.com)  7) Query this non-leader peer.  *Expected*:  The non-leader is supposed to get blocks from the leader only, and thus should have a corrupted/incomplete ledger.  *Observed*: The non-leader peer contains a correct/complete ledger. If the orderer is turned off before non-leader comes back up, it ends up with the expected in-complete ledger, which indicates that  its getting the blocks directly from the orderer.  Non-leader and leader peer logs are attached.  ></description> </Issue>
