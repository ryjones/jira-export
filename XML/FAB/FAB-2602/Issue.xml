<Issue id="15169" key="FAB-2602" number="2602" project="10002" reporter="smithbk" assignee="smithbk" creator="smithbk" type="10001" summary="Add a fabric-ca-client enroll option to store artifacts in MSP directory structure" priority="3" resolution="10000" status="6" created="2017-03-02 16:19:42.0" updated="2018-07-20 18:56:19.0" resolutiondate="2017-03-13 14:17:58.0" votes="0" watches="2" workflowId="37664"> <description><! CDATA The purpose of this feature is to provide a greater degree of integration between fabric-ca and fabric.  In particular, it is meant to hide the structure of the MSP directory for those who are using the fabric-ca.  This is done by adding support for the "-m" option as follows to the enroll (and reenroll) commands: {code} fabric-ca-client enroll -u http://user:pass@host:7054 -M <msp-directory> {code}  This command will store artifacts as follows: 1) the ecert key at <msp-directory>/keystore/<enrollment-ID>.pem 2) the ecert cert at <msp-directory>/signcerts/<enrollment-ID>.pem 3) the root cert at <msp-directory>/cacerts/<root-CA-name>.pem  #1 and #2 are already part of the enroll command. For #3, the fabric-ca-server will support a new GET /info endpoint which returns server public info including the root CA name and root CA cert.   The GET /info call will not require an authorization header.   The root CA name is a unique name given to each root CA in a blockchain network.   The default root CA name is the domain name of the host where the root fabric-ca-server is started.  Also add support for another fabric-ca-client command as follows: {code} fabric-ca-client getcacert -u http://host:7054 -M <msp-directory> {code} This will do only #3 above.  As an example of the use of these commands, consider a blockchain network with 3 root fabric-ca-servers: fca1, fca2, and fca3.  In other words, there are 3 members in the network and they are all using fabric-ca.  In order to initialize the local MSP for peer1 that is associated with fca1, you may do as follows: {code} fabric-ca-client enroll -u http://peer1:peer1secret@fca1:7054 -M <mspdir> fabric-ca-client getcacert -u http://fca2:7054 -M <mspdir> fabric-ca-client getcacert -u http://fca3:7054 -M <mspdir> {code} The resulting MSP directory would contain 3 certs in cacerts (e.g. fca1.pem, fca2.pem, and fca3.pem), peer1's ecert at signcerts/peer1.pem and peer1's ecert key at keystore/peer1.pem.  ></description> </Issue>
