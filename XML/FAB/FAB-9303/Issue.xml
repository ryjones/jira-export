<Issue id="29096" key="FAB-9303" number="9303" project="10002" reporter="jyellick" assignee="wlahti" creator="jyellick" type="10003" summary="Design peer CLI multi-endorsement" priority="3" resolution="10000" status="6" created="2018-04-03 14:30:22.0" updated="2018-07-20 14:16:13.0" resolutiondate="2018-04-23 16:00:34.0" votes="0" watches="2" workflowId="41735"> <description><! CDATA The peer CLI needs to be enhanced to allow collecting multiple endorsements during chaincode invocation. This task is to document the design.  Possible approaches: * Define a new set of flags to specify an array of peers and TLS root certs in order to obtain the necessary endorsements ** Advantages: *** quicker to implement ** Disadvantages: *** specifying more than a few peers and their root certs will be ugly from a usability standpoint ** Example CLI call: ***  {code:java} peer chaincode invoke -o orderer.example.com:7050 --tls --cafile $ORDERER_CA -C $CHANNEL_NAME -n mycc --endorsingPeers peer0.org1.example.com:7051 --endorsingPeers peer0.org2.example.com:7051 --endorsingPeersTLSCerts /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --endorsingPeersTLSCerts /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c '{"Args": "invoke","a","b","10" }' >&log.txt{code}  * Define a new flag that can point to a connection profile (in YAML format) which defines the peers and TLS information for a user performing the lscc.Define() operation (see  https://github.com/hyperledger/composer/wiki/Connection-Profiles  for more info on connection profiles) ** Advantages: *** adds support for the commonly used "connection profile" (already implemented in the Node, Go, and Java SDKs) to the Fabric codebase, which could possibly be used elsewhere in the future (e2e?) *** only one new parameter on the command keeps the user experience cleaner ** Disadvantages: *** more code upfront to define structures for the connection profile ** Example CLI calls: *** typical peer chaincode: **** peer chaincode invoke \{to-be-filled-in} *** LSCC call for lifecycle config **** peer chaincode invoke \{to-be-filled-in}        ></description> </Issue>
