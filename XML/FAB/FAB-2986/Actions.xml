<Action id="22344" issue="15566" author="greg.haskins" type="comment" created="2017-04-13 14:24:14.0" updateauthor="greg.haskins" updated="2017-04-13 14:24:14.0"> <body><! CDATA Should we consider having formal package/installers (msi/deb/rpm type artifacts)?   ></body> </Action>
<Action id="22824" issue="15566" author="mastersingh24" type="comment" body="Yes" created="2017-04-21 16:01:16.0" updateauthor="mastersingh24" updated="2017-04-21 16:01:16.0"/>
<Action id="22849" issue="15566" author="rameshthoomu" type="comment" body="published cryptogen and configtxgen binary tar files to nexus repository.. https://logs.hyperledger.org/sandbox/vex-yul-hyp-jenkins-2/fabric-verify-x86_64/28/. This is temporary location to keep binary files and  ~ryjones  is checking with LF release team to move &quot;log shipping&quot; and &quot;binary tar file&quot; to nexus3 repository. " created="2017-04-21 22:49:38.0" updateauthor="rameshthoomu" updated="2017-04-21 22:49:38.0"/>
<Action id="23308" issue="15566" author="rameshthoomu" type="comment" created="2017-05-03 02:48:40.0" updateauthor="rameshthoomu" updated="2017-05-03 02:48:40.0"> <body><! CDATA  ~jwagantall  and myself are working on publishing binary tar files to nexus repository. We have published tar file https://nexus.hyperledger.org/content/repositories/snapshots/sandbox/vex-yul-hyp-jenkins-2/fabric-bin-test/. Please note this is a temporary location and will move these artifacts to production from production jobs.   ~mastersingh24  Could you please give us your inputs on the below points.  1) How many days we have to keep these artifacts? 2) Do we need to push tar file per platform? 3) Do we need any versioning on these tar files? if yes, what is the versioning approach we have to use?  Please add if I miss any!!     ></body> </Action>
<Action id="23362" issue="15566" author="jwagantall" type="comment" created="2017-05-03 20:32:23.0" updateauthor="jwagantall" updated="2017-05-03 20:32:23.0"> <body><! CDATA posting the comments from the ci-pipeline channel  1) How many days we have to keep these artifacts?  I assume you mean the non-release artifacts (i.e. the artifacts which match published release of Fabric images)? For "release-level" artifacts we should keep them around "forever" although we might just keep the latest patch release for each major version and archive other versions? And for major versions, I'd say we should probably keep 2-3 major versions around.  I don't think we need to build artifacts for every merge build. I'd be OK with weekly release archives from the dev branch and perhaps we need only keep 4 or 5 weeks around?   2) Do we need to push tar file per platform?  Yes - I think we should have per platform tar files. We definitely want people to be able to download the release artifact(s) for each platform individually. We could decide that for non-release artifacts we publish a single tar file, but I assume if we have to do individual ones for releases we might as well do per platform all around.  3) Do we need any versioning on these tar files? if yes, what is the versioning approach we have to use?  We should use the same versioning / naming we use for Fabric release images for the release tar files.  For the weekly ones, we should use the same naming as you are doing for the Docker images you publish (of course it would only match the weekly one you pick)  Hope this makes sense   ></body> </Action>
<Action id="23937" issue="15566" author="denyeart" type="comment" body="https://gerrit.hyperledger.org/r/#/c/8939/" created="2017-05-17 13:38:55.0" updateauthor="denyeart" updated="2017-05-17 13:38:55.0"/>
<Action id="23938" issue="15566" author="rameshthoomu" type="comment" body=" https://gerrit.hyperledger.org/r/#/c/8939/  – Waiting for review comments and +2&apos;s" created="2017-05-17 13:40:03.0" updateauthor="rameshthoomu" updated="2017-05-17 13:40:03.0"/>
<Action id="23943" issue="15566" author="greg.haskins" type="comment" created="2017-05-17 14:27:11.0" updateauthor="greg.haskins" updated="2017-05-17 14:27:11.0"> <body><! CDATA FWIW, I am against this approach for two reasons:  1) The binaries produced in this manner are not truly universal.  For instance, the Linux binaries have LDD linkages to libc and libvdso (amoung others) that will likely limit the distro/platform portability.  2) The URLs proposed do not appear to be long term sustainable nor user friendly.  I can appreciate the sense of urgency, and doing this "right" (packaging up releases in a traditional way) while not complex, hard or time-consuming, is still work that needs to be completed.  Therefore, if others are going to push this through despite my concerns highlighted above, I would suggest that we at least try to do this in a more stable manner such as how maven coordinates are managed in the way they are pushed to nexus.  E.g. I would much rather see *  http://releases.hyperledger.org/fabric/tools-1.0.0-alpha2|http://releases.hyperledger.org/fabric/tools-1.0.0-alpha3-snapshot-e34g4s  *  http://releases.hyperledger.org/fabric/tools-1.0.0-alpha3-snapshot-e34g4s  * etc  ..rather than something with "sandbox/vex-yul" in it, whatever that is.  Having these IMO ugly and likely unstable URLs is not going to do any of our users any favors.  It makes the doc ugly, confusing, and most concerningly, unreliable if the URLs don't work 3 months from now.  I would suggest that we perhaps look at using literal maven tooling (there is a way to push non java artifacts, IIRC).  ></body> </Action>
<Action id="23944" issue="15566" author="greg.haskins" type="comment" created="2017-05-17 14:36:07.0" updateauthor="greg.haskins" updated="2017-05-17 14:36:07.0"> <body><! CDATA And to be clear: I have no qualms with using nexus to host intermediate artifacts of the build.  In fact, I would encourage it: I would love to see us get to the point where the front end up the pipeline builds all the artifacts and pushes them to nexus.  Then other phases like UT, integration, UAT, and when appropriate, release, may simply consume them.  What I do object to is unreliable packaging intended for end-user consumption, unofficial releases that bypass maintainer scrutiny/approval making it into upstream/official documentation, and unreliable/confusing/nonsensical presentation of resources.  I'm sorry if this all seems harsh.  I only aim to address a quality concern where I see it.  ></body> </Action>
<Action id="23948" issue="15566" author="denyeart" type="comment" created="2017-05-17 15:51:16.0" updateauthor="denyeart" updated="2017-05-17 15:56:33.0"> <body><! CDATA  ~greg.haskins  No need to apologize, your points are all good. We simply need to decide what is done in short term for alpha2 vs longer term improvements.  For alpha2, my opinion is that we just need to clean up the URLs ("sandbox/vex-yul" was just a dry run), and defer the other suggestions for next time around (e.g. beta).  Does anybody see issues with that approach?   ~rameshthoomu   ~jwagantall  Can you provide an example of what the 'final' alpha2 URLs will be, per platform?  ></body> </Action>
<Action id="23949" issue="15566" author="jwagantall" type="comment" created="2017-05-17 16:07:18.0" updateauthor="jwagantall" updated="2017-05-17 16:07:18.0"> <body><! CDATA These are the final paths we are expecting to have: *  https://nexus.hyperledger.org/content/repositories/staging/org/hyperledger  for non signed binaries pushed on a regular basis *   https://nexus.hyperledger.org/content/repositories/snapshots/org/hyperledger|https://nexus.hyperledger.org/content/repositories/snapshots/org/hyperledger/  for signed binaries which will be pushed on a regular basis *   https://nexus.hyperledger.org/content/repositories/releases/org/hyperledger|https://nexus.hyperledger.org/content/repositories/releases/org/hyperledger/  for signed binaries just for official releases on a scheduled plan  ></body> </Action>
<Action id="23954" issue="15566" author="greg.haskins" type="comment" created="2017-05-17 17:12:46.0" updateauthor="greg.haskins" updated="2017-05-17 17:12:46.0"> <body><! CDATA Those base URLs are acceptable to me.  Few remaining questions: # What would be the FQP of something like, tools for 1.0.0-alpha2? # What is the retention plan, particularly for releases # Will anything other than /releases/ end up in the docs? # What are the gates controlling the releases namespace?  Thanks  -Greg  ></body> </Action>
<Action id="23972" issue="15566" author="jwagantall" type="comment" created="2017-05-17 21:51:57.0" updateauthor="jwagantall" updated="2017-05-17 21:51:57.0"> <body><! CDATA Hi Greg,   I am more than happy to work on appropriated rules for your previous questions for which I might need to take it offline with Ry and my lead to make sure we have a good structure like in other projects.   For now, we are blocked on being able to push the fabric binaries since the repo was lacking an initial pom file which has been created here:   https://gerrit.hyperledger.org/r/#/c/9487/   I will need the code experts to review it and help us getting this pom file in shape. Right now this is based of fabric-sdk-java with few things corrected. Since I am not too familiar with the fabric code, I couldn't make more improvements.   Can we have any developer helping us with this pom.xml please?  Thanks!  Jess  ></body> </Action>
<Action id="24027" issue="15566" author="denyeart" type="comment" created="2017-05-18 14:49:18.0" updateauthor="denyeart" updated="2017-05-18 14:49:18.0"> <body><! CDATA Due to issues pushing to {color:#444444}staging/deploy/release{color}, Ramesh has pushed alpha2 release tarball to:   https://nexus.hyperledger.org/content/repositories/logs/sandbox/fabric-binary/   Not ideal, but good enough for today.  ></body> </Action>
<Action id="24058" issue="15566" author="rameshthoomu" type="comment" created="2017-05-19 02:33:39.0" updateauthor="rameshthoomu" updated="2017-05-19 02:33:39.0"> <body><! CDATA We had issues with maven-staging-deploy plugin to publish tar balls to nexus repository from Jenkins.. We somehow pushed tar balls per platforms to  https://nexus.hyperledger.org/content/repositories/releases/org/hyperledger/fabric/fabric-binary/   based on latest fabric commits. We will keep this link active all the time in nexus repository.  ~jwagantall  please make sure below links are active all the time.    https://nexus.hyperledger.org/content/repositories/logs/sandbox/fabric-binary/    https://nexus.hyperledger.org/content/repositories/releases/org/hyperledger/fabric/fabric-binary/      ></body> </Action>
<Action id="25814" issue="15566" author="rameshthoomu" type="comment" created="2017-06-09 00:17:25.0" updateauthor="rameshthoomu" updated="2017-06-09 00:17:25.0"> <body><! CDATA We have now fabric-binaries job ready and it's working as expected. Please see the job configuration here https://jenkins.hyperledger.org/view/fabric-binaries/ This job triggers when a tag is created in fabric repository and publish java jar to nexus repository.   This job looks for the IS_RELEASE=TRUE when a ref_updated event is triggered. If false, publish release to https://nexus.hyperledger.org/content/repositories/snapshots/org/hyperledger/fabric/fabric-binary/ repository otherwise to https://nexus.hyperledger.org/content/repositories/releases/org/hyperledger/fabric/fabric-binary/   ></body> </Action>
