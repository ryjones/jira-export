<Action id="41104" issue="28168" author="senthil1" type="comment" body=" ~denyeart   ~manish-sethi   ~chris.elder   Is my observation correct?" created="2018-03-01 19:18:19.0" updateauthor="senthil1" updated="2018-03-01 19:18:19.0"/>
<Action id="41107" issue="28168" author="manish-sethi" type="comment" created="2018-03-01 19:50:52.0" updateauthor="manish-sethi" updated="2018-03-01 19:50:52.0"> <body><! CDATA  ~Senthil1  - I don't think that your observation is correct. The function  `{color:#000000}ValidateAndPrepareBatch{color}` is expected to do any data loading and actual validation.  https://github.com/hyperledger/fabric/blob/master/core/ledger/kvledger/txmgmt/validator/statebasedval/state_based_validator.go#L93. The basic intention of this function had been to perform everything but apply updates in this function and `ApplyUpdates` is supposed to just apply updates so we hold the lock for as small duration as possible.  May be revision numbers are getting added (not loaded) to the batch in the ApplyUpdates. I think that part of these confusions stem from the fact that the state couchdb code needs a refactoring to be more readable. I think that you had expressed interest once to do that but if you do not mind, I can take a shot on this to refactor and during the refactoring I can think moving the adding the revision numbers also under the function `{color:#000000}ValidateAndPrepareBatch{color}`.  If you observed something else, which I have missed, please point it out here and I think that we should fix that.  ></body> </Action>
<Action id="41110" issue="28168" author="senthil1" type="comment" body=" ~manish-sethi  For blind writes, we do not load revision numbers during validation phase. Further, couch documents (checking whether the JSON is formed correctly, adding wrappers) are created during the lock period only. My proposal was to move these two items out of the lock period. Yes, you can do the necessary refactoring of statecouchdb.go but I still feel that my observation is correct. " created="2018-03-01 20:09:18.0" updateauthor="senthil1" updated="2018-03-01 20:09:18.0"/>
<Action id="41111" issue="28168" author="manish-sethi" type="comment" created="2018-03-01 20:23:43.0" updateauthor="manish-sethi" updated="2018-03-01 20:23:43.0"> <body><! CDATA  ~Senthil1   Thanks for the clarification. Indeed, I think that I misinterpreted your comment if it was limited to blind writes - because, you did not explicitly mentioned the blind writes earlier and I could not relate your 'missing key' term with the blind writes. But I think that blind writes is quite a corner case in practice and majority of the workload would not require to load anything during `ApplyUpdates`.  The other processing, such as JSON validity etc. should not be as expensive as loading the data but yes, it's better to move maximum processing under the function `{color:#000000}ValidateAndPrepareBatch` as that is the basic purpose of this function.{color}  ></body> </Action>
<Action id="41112" issue="28168" author="senthil1" type="comment" body=" ~manish-sethi  Based on a survey that  ~balaji.viswanathan  did with the solution teams, certain classes of applications just perform blind writes without even querying the database (mainly provenance use-cases) – just logging the events (without any state machine check). Anyway, it is debatable and leave it to you guys to decide whether such optimizations are required. I agree that spending time on optimizing for corner cases are not that useful. " created="2018-03-01 20:31:37.0" updateauthor="senthil1" updated="2018-03-01 20:37:14.0"/>
<Action id="41113" issue="28168" author="manish-sethi" type="comment" body=" ~Senthil1  - I think this time you misinterpreted me :). I am indeed in the favor of moving maximum processing in the function `{color:#000000}ValidateAndPrepareBatch` - as I explicitly stressed before that this indeed was the `sole` purpose to have two separate functions.{color}" created="2018-03-01 20:44:26.0" updateauthor="manish-sethi" updated="2018-03-01 20:44:26.0"/>
<Action id="41114" issue="28168" author="senthil1" type="comment" body="Ha ha :) " created="2018-03-01 20:58:03.0" updateauthor="senthil1" updated="2018-03-01 20:58:03.0"/>
<Action id="41444" issue="28168" author="denyeart" type="comment" body="Removing v1.2 tag, this item will be prioritized alongside others in the fabric-ledger backlog." created="2018-03-12 06:59:46.0" updateauthor="denyeart" updated="2018-03-12 06:59:46.0"/>
<Action id="41490" issue="28168" author="manish-sethi" type="comment" created="2018-03-12 21:29:38.0" updateauthor="manish-sethi" updated="2018-03-12 21:29:38.0"> <body><! CDATA when we want to take this up - following is one potential strategy to achieve this.  Change the statedb.VersionedDB interface such that there are three functions instead of one function `ApplyUpdate`. Each function carrying out the corresponding stage from the three stages listed below. The write lock is needed only for the stage 2.  Stage 1 - `PrepareForUpdates` - db transforms the given batch in the form of underlying db and keep it in memory Stage 2 - `ApplyUpdates` - push the changes to the DB Stage 3 - ProcessPostUpdates - flush and record savepoint.    While refactoring couch statedb impl for FAB-7692, I have refactored the code keeping the above scheme in mind (https://gerrit.hyperledger.org/r/#/c/19093/1/core/ledger/kvledger/txmgmt/statedb/statecouchdb/statecouchdb.go@298)  So, it should be straight forward to make this change once the above CR gets merged.  ></body> </Action>
<Action id="41527" issue="28168" author="senthil1" type="comment" created="2018-03-13 12:50:51.0" updateauthor="senthil1" updated="2018-03-13 12:51:47.0"> <body><! CDATA Yes, Manish. That makes sense.   So the usage of above functions would be like, In Commit() in lockbased_txmgr.go, first, we would call PrepareForUpdates() (for levelDB, it returns simply), then ApplyPrivacyAwareUpdates() with a RWLock, and finally calls ProcessPostUpdates(). Do you have any suggestion on this? I can take a short at it.   ></body> </Action>
<Action id="41532" issue="28168" author="manish-sethi" type="comment" created="2018-03-13 14:08:31.0" updateauthor="manish-sethi" updated="2018-03-13 14:08:31.0"> <body><! CDATA  ~Senthil1  - Even for the leveldb, `PrepareForUpdates()` can prepare the goleveldb batch and `ProcessPostUpdates` can be used for fsyc (not sure whether in the code, fsync is separable).  But, I guess that better if we take this up after merging the couch refactoring CR, else that would run into conflict - unless you want to do on top of that CR.  ></body> </Action>
<Action id="47717" issue="28168" author="senthil1" type="comment" created="2018-07-24 13:46:07.0" updateauthor="senthil1" updated="2018-07-24 13:46:07.0"> <body><! CDATA  ~manish-sethi  I ran LTE with and without the optimization. I observed a minor improvement due to this optimization.  *with optimization* https://gerrit.hyperledger.org/r/#/c/21855/  # DataDir, NumChains, NumParallelTxPerChain, NumKeysInEachTx, BatchSize, NumKVs, KVSize, *Time_Spent(s)*, Size_chains(mb), Size_index(mb), Size_stateLeveldb(mb), Size_historyLeveldb(mb) /tmp/fabric/test/tools/LTE/data, 1, 500, 4, 500, 40000, 200, *15.53*, 11.71, 0.28, , 1.80 /tmp/fabric/test/tools/LTE/data, 1, 1000, 4, 500, 40000, 200, *21.99*, 11.71, 0.28, , 1.79 /tmp/fabric/test/tools/LTE/data, 1, 1500, 4, 500, 40000, 200, *23.68*, 11.87, 0.29, , 1.79 /tmp/fabric/test/tools/LTE/data, 1, 2000, 4, 500, 40000, 200, *23.35*, 11.71, 0.27, , 1.79  *without optimization* https://gerrit.hyperledger.org/r/#/c/21855/ # DataDir, NumChains, NumParallelTxPerChain, NumKeysInEachTx, BatchSize, NumKVs, KVSize, *Time_Spent(s)*, Size_chains(mb), Size_index(mb), Size_stateLeveldb(mb), Size_historyLeveldb(mb) /tmp/fabric/test/tools/LTE/data, 1, 500, 4, 500, 40000, 200, *15.63*, 11.70, 0.28, , 1.80 /tmp/fabric/test/tools/LTE/data, 1, 1000, 4, 500, 40000, 200, *22.24*, 11.71, 0.28, , 1.79 /tmp/fabric/test/tools/LTE/data, 1, 1500, 4, 500, 40000, 200, *23.86*, 11.88, 0.29, , 1.79 /tmp/fabric/test/tools/LTE/data, 1, 2000, 4, 500, 40000, 200, *24.11*, 11.70, 0.27, , 1.79  If LTE support JSON docs instead of binary, I expect the performance to improve a bit with this optimization.   ></body> </Action>
<Action id="67271" issue="28168" author="sykesm" type="comment" body="Stale" created="2020-01-22 22:31:08.0" updateauthor="sykesm" updated="2020-01-22 22:31:08.0"/>
