<Action id="35867" issue="24033" author="wlahti" type="comment" created="2017-12-05 17:06:17.0" updateauthor="wlahti" updated="2017-12-07 00:56:59.0"> <body><! CDATA - https://gerrit.hyperledger.org/r/#/c/15957/ -  New CR: https://gerrit.hyperledger.org/r/#/c/16009/  ></body> </Action>
<Action id="35969" issue="24033" author="baohua" type="comment" created="2017-12-07 06:41:04.0" updateauthor="baohua" updated="2017-12-07 06:41:04.0"> <body><! CDATA Only curious to understand what's the purpose here?  As all ledgers are at orderers, while peer doesn't have all.  ></body> </Action>
<Action id="35986" issue="24033" author="wlahti" type="comment" created="2017-12-07 12:45:34.0" updateauthor="wlahti" updated="2017-12-07 12:45:34.0"> <body><! CDATA  ~jyellick  added this to the description of FAB-6911, which I believe explains its benefit beyond just as a reliable event service:   "This is doubly useful, in preparation for the addition of BFT ordering, and generally decreasing the trust the client places in the ordering service.  When connecting directly to the orderer to receive blocks, unless the client reimplements the peer functions of checking the hash chain, looking up the block validation policy, and checking the block validation policy against the orderer signatures, then the client is relying on the honesty of the OSN it connects to to return good blocks.  By adding the {{Deliver}} API to the peer, clients may use existing code invoked against the orderer, but exploit the trusted relationship between a client and its org's peers."  ></body> </Action>
<Action id="35987" issue="24033" author="rickr" type="comment" created="2017-12-07 13:19:50.0" updateauthor="rickr" updated="2017-12-07 13:19:50.0"> <body><! CDATA This API should have been a replacement for the event hub service. It's lacking in at least two ways over this previous API. There is no means to know the services is ready and connected until it receives the first block. Current EH API first delivered as Status block with a success to make sure the connection is fully established and from the then on would start receiving blocks. This allowed SDK to easily make this synchronous.  Second this API does not offer an option to return the next block is sees added, but always returns the last block on the ledger regardless if that block may be a year old. This also has the consequences that if for example bad network connections result in reestablishment of the connection it will see that same block repeatedly if there were no new blocks added.  It was first suggested that to me that the SDKs should address these short comings. I don't think each SDKs should have to do this. I plan for the JSDK to expose it for what it is. :) Let applications deal with this behavior.  Given a chance to vote I'd go back to the old API as I think it was better suited for an eventing service. It only lacked one needed feature that would allow it to start receiving blocks from a specific block number.  ></body> </Action>
<Action id="35989" issue="24033" author="baohua" type="comment" created="2017-12-07 14:25:33.0" updateauthor="baohua" updated="2017-12-07 14:25:33.0"> <body><! CDATA  ~wlahti , thanks, that addressed my question.  It would be nice to add FAB-6911 as a related issue.  Btw, about the check peer's liveness problem by  ~rickr , i do not think getting a block is a good solution. We may let peer provide some specific API to get its health status, thoughts?  Thanks!  ></body> </Action>
