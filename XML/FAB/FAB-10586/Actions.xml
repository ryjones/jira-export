<Action id="45743" issue="30965" author="scottz" type="comment" body="PTE will send traffic to the nodes you select. Check with the person who wrote your PTE configuration files, and refer to the Readme for explanations how to configure it. PTE Support Team cannot do anything with this unless those test config files are attached, and analyzed, and show the traffic is not going where it is directed. If you still feel there is a bug in PTE traffic generator, then please explain your configuration and why you feel the traffic is incorrectly generated." created="2018-06-08 21:50:56.0" updateauthor="scottz" updated="2018-06-08 21:50:56.0"/>
<Action id="45785" issue="30965" author="mrihn1" type="comment" created="2018-06-11 14:25:00.0" updateauthor="mrihn1" updated="2018-06-11 14:25:00.0"> <body><! CDATA I am attaching an example of the PTE config files that we used.  We specified OrgAnchor in all of the config files. Looking at the PTE doc it states: *"OrgAnchor*: send to the anchor peer (peer1) of the organization being executed in the current process" Given this description, I would expect to see a higher utilization on the anchor peers instead of the even split between the anchor peers and non-anchor peers. In older measurements with similar PTE config settings, we saw results that were more in line with what we expected (higher CPU utilization on the anchor peers). This may very well turn out not to be a bug with PTE. We were only trying to figure out what would cause Query transactions to drive equivalent CPU utilization on all peers in an organization, and after discussing with Dongming, we were advised to open this issue.  ^samplecc-chan1-constant-q-TLS-3org_1CC.json   ></body> </Action>
<Action id="45791" issue="30965" author="dinotone" type="comment" body="I&apos;ve been looking at recent PTE perf results for Invoke Move in same config . 3 Orgs x 2 peers.  In the past, we&apos;d always see the Endorsing peer ( ie. peer1 ie. Anchor peer ) consume more cp/mem resources then the commit-only peer (ie. peer2).  This no longer appears to be the case.  Even when running with ALLANCHOR which historically resulted in even a larger gap between endorser &amp; committer peer resource consumption, both peers (for each Org) are consuming comparable resources.   Bottom line PTE appears to be routing endorsements to both peers, as opposed to just anchor." created="2018-06-11 15:40:31.0" updateauthor="dinotone" updated="2018-06-11 15:40:31.0"/>
<Action id="45801" issue="30965" author="scottz" type="comment" created="2018-06-11 19:50:06.0" updateauthor="scottz" updated="2018-06-11 19:50:06.0"> <body><! CDATA That config file file seems OK to me.  Is anything else going on in the network at the same time, that might dwarf the query efforts? Please share the rest of the config files and (runCases files).  ></body> </Action>
<Action id="45809" issue="30965" author="mrihn1" type="comment" created="2018-06-11 20:49:17.0" updateauthor="mrihn1" updated="2018-06-11 20:49:17.0"> <body><! CDATA Here are the rest of the config and runCases files. Nothing else should be going on in the network.  ></body> </Action>
<Action id="45823" issue="30965" author="dinotone" type="comment" body="Hey Scott.  As mentioned above. The issue seems to not only be Query.  We just recognized in when running query workload" created="2018-06-12 11:02:17.0" updateauthor="dinotone" updated="2018-06-12 11:02:17.0"/>
<Action id="45871" issue="30965" author="scottz" type="comment" created="2018-06-13 13:42:01.0" updateauthor="scottz" updated="2018-06-13 13:42:01.0"> <body><! CDATA Have you confirmed that the resource utilzation levels are measured without the test running are not the same as with the test running?  When did it first start misbehaving? And when did it last run ok? When did you update your PTE? Identifying when the change in behavior occurred will help identify the cause.  I will take another look at the code more closely. Something was changed 5/1, so it would be interesting to know if that coincides with your observations.  ></body> </Action>
<Action id="45877" issue="30965" author="dinotone" type="comment" created="2018-06-13 14:11:38.0" updateauthor="dinotone" updated="2018-06-13 14:16:09.0"> <body><! CDATA Scott, Not sure I understand the resource utilization question, but if I do, the answer is.... Yes, the resource consumption is definitely different without tests running vs with.   Here's a taste....     Look at Peer CPU columns.   The Commit-Only peer (peer2) should have less cpu consumed then Endorser, especially in the case of AllANCHOR...       ></body> </Action>
<Action id="45879" issue="30965" author="dinotone" type="comment" body="!image-2018-06-13-10-16-14-889.png!" created="2018-06-13 14:16:19.0" updateauthor="dinotone" updated="2018-06-13 14:16:19.0"/>
<Action id="45881" issue="30965" author="scottz" type="comment" created="2018-06-13 14:20:52.0" updateauthor="scottz" updated="2018-06-13 14:31:30.0"> <body><! CDATA I think I found something wrong with that May 1st update to PTE. Looks like we broke this when we added support for the starter plan networks peer names. your CPU data does seem to confirm the behavior. Another way to do that would be to check the peer logs of the committer peer to see if it is doing endorsements.  I was going to ask you to look in your PTE logs for lines containing the string "assignThreadOrgAnchorPeer", and if you see more than one peer listed, then that confirms it. But I just realized that log is commented out of the code. So nevermind.  I think I've seen enough; we will get working on a fix.  ></body> </Action>
<Action id="45886" issue="30965" author="scottz" type="comment" created="2018-06-13 15:10:26.0" updateauthor="scottz" updated="2018-06-13 15:10:26.0"> <body><! CDATA This it the change that broke the code.  https://gerrit.hyperledger.org/r/#/c/21253/1/tools/PTE/pte-execRequest.js   Seems we should simply exit the loop (line 1095) inside function assignThreadOrgAnchorPeer() after the "anchor peer" (first peer in the list) is found.  ></body> </Action>
<Action id="45887" issue="30965" author="dinotone" type="comment" created="2018-06-13 15:11:09.0" updateauthor="dinotone" updated="2018-06-13 15:11:09.0"> <body><! CDATA Glad to hear.      Regarding viewing peer log...    I've never seen anything in peer log that tell us Endorsements. Only committed blocks. If there's some means to get Endorsement info, please let us know.   Thanks    ></body> </Action>
<Action id="45891" issue="30965" author="scottz" type="comment" body="Bug was introduced by FAB-9801." created="2018-06-13 16:12:59.0" updateauthor="scottz" updated="2018-06-13 16:12:59.0"/>
<Action id="45908" issue="30965" author="scottz" type="comment" created="2018-06-13 20:26:03.0" updateauthor="scottz" updated="2018-06-13 20:26:03.0"> <body><! CDATA  https://gerrit.hyperledger.org/r/#/c/23025/   is the changeset under review. Code appeared broken this way for option OrgAnchor and also AllAnchors.     What CORE_LOGGING_LEVEL (core.yaml) do you run with?  ></body> </Action>
<Action id="46155" issue="30965" author="scottz" type="comment" body="This is now fixed in current release (master branch, soon to be v1.2). Do you need a new PTE image for that? I just noticed you set &quot;Affects Version&quot; to v1.1, so now I am wondering if you need a fix and a PTE image for v1.1. ???  ~mrihn1    ~dinotone " created="2018-06-18 21:44:20.0" updateauthor="scottz" updated="2018-06-18 21:44:20.0"/>
<Action id="46190" issue="30965" author="dinotone" type="comment" created="2018-06-19 12:03:21.0" updateauthor="dinotone" updated="2018-06-19 12:03:21.0"> <body><! CDATA Thanks Scott. Yes. We are testing IBP R7, so we would require the fix for the fabric 1.1 version that GAs with IBP R7.    ~tanyana   ~mrihn1   ></body> </Action>
<Action id="46281" issue="30965" author="dinotone" type="comment" body=" ~scottz  Please direct us on if there&apos;s a PTE image with this fix available for V1.1.  And if so, what image.  Thank you!  ~mrihn1 " created="2018-06-20 12:13:37.0" updateauthor="dinotone" updated="2018-06-20 12:13:37.0"/>
