<Issue id="30364" key="FAB-10191" number="10191" project="10002" reporter="scottz" assignee="dongming" creator="scottz" type="10101" summary="Service Discovery Chaos test stopping peers" priority="2" resolution="10000" status="6" created="2018-05-17 16:55:37.0" updated="2018-12-01 18:39:22.0" resolutiondate="2018-06-28 14:14:08.0" votes="0" watches="2" workflowId="44847"> <description><! CDATA In 10190, we plan to revise an existing pte traffic test, to reconfigure the network and the pte client to use service discovery, and run the traffic. In this test, we will rerun 10190 plus restart some peers. However to do so, we need to know what to expect of the SDK behavior (e.g. automatic reselection upon failure if a peer is down, or not), and write pte client application code (possibly a plugin) to make decisions based on the expected behavior (e.g. do we need to abandon and then resend a TX proposal to a different endorser set in certain conditions, if necessary, or, to retrigger the service-discovery-request upon certain conditions and then resubmit TX proposal). Once those things are defined and coded, then we can write a testcase based on proper expectations so we will be able to know whether it passes or fails.  Not sure if all this can get done in v1.2. Extensive testing like this may more likely be done in next release.     Test Name: FAB-10191 performance benchmark: service discovery chaos with stopping peers  Component: Performance (robustness)  Description: Performance constant invokes with service discovery chaos test      chaincode: each channel has one chaincode, sample_cc NodeJS, instantiated      transactions: 4 threads, each thread sends 1 invoke per 100ms for 1 hour to each channel as the following: # thread 1 sends to channel 1 # thread 2 sends to channel 1 # thread 3 sends to channel 2 # thread 4 sends to channel 2      Each invoke has payload size of 1kb-2kb.  Artifact Location: crypto-config  Network Topology: docker containers; 2 channels, 2 organizations, 2 peers per org, 4 kafka, 3 zookeepers, 3 orderers, 2 ca, with mutual TLS (clientauth)  Event:          service: FilteredBlock          listener: block  Client Driver: PTE  Simultaneously, executing test_chaos.sh to restart all orderers, peers, kafkas, and zookeepers one at a time  Output: # The benchmark passes if it completes the transactions resume after containers restored.     ></description> </Issue>
