<Action id="39220" issue="26901" author="christopherferris" type="comment" created="2018-01-27 12:58:04.0" updateauthor="christopherferris" updated="2018-01-27 12:58:04.0"> <body><! CDATA What we learned: * the release is now very (overly, IMO) serialized. fabric must be published before fabric-ca will build, fabric-ca must be published before fabric-sdk-node will build, etc. While this is workable, it is very slow, especially if there are any issues in the build process itself (as there were) * the release managers need to have access to be able to merge the release CRs and to push tags to ALL repositories. It is impractical to have to run down maintainers during the process, and takes part of the responsibility out of the release manager's hands. Suggest that release managers be added as maintainers to all repos. * pushing follow-up CRs (preparing for NEXT release) before the parent CR (preparing for the current release) is also problematic with the rebase requirements. Suggest these be deferred until the parents are merged. This is less of an issue if there are absolutely no issues that need to be mitigated during the release process.  ></body> </Action>
<Action id="39221" issue="26901" author="mastersingh24" type="comment" body="Why is there any dependency between fabric and fabric-ca?" created="2018-01-27 13:39:29.0" updateauthor="mastersingh24" updated="2018-01-27 13:39:29.0"/>
<Action id="39232" issue="26901" author="rameshthoomu" type="comment" created="2018-01-29 02:57:14.0" updateauthor="rameshthoomu" updated="2018-01-29 02:57:14.0"> <body><! CDATA fabric-ca-tools, fabric-ca-peer and fabric-ca-orderer images are looking for fabric-tools, fabric-peer and fabric-orderer images with FABRIC_TAG (1.1.0-alpha). Below are the reference links   https://github.com/hyperledger/fabric-ca/blob/master/Makefile#L46   https://github.com/hyperledger/fabric-ca/blob/master/images/fabric-ca-tools/Dockerfile.in#L6  ></body> </Action>
<Action id="39244" issue="26901" author="denyeart" type="comment" created="2018-01-29 12:51:14.0" updateauthor="denyeart" updated="2018-01-29 12:51:14.0"> <body><! CDATA Another learning -  Base image "0.4.5" had to be hardcoded into bootstrap.sh for third party docker images. You can pass any Fabric release version into bootstrap.sh to download that version's Docker images, but it will always pull third party docker images tagged with "0.4.5".  This appears to be workable for now, as all Fabric releases work with the latest (0.4.5) 3rd party docker images, but this may not always be the case.  We likely will need a matrix of which Fabric versions work with which 3rd party releases.   Also, it is currently impossible to know what 3rd party versions are included under the 0.4.5 tag, without a lot of digging into Fabric repository source.  We may want to tag 3rd party docker images according to the 3rd party version.  This will make the logic in bootstrap.sh more complex, but it will clarify which Fabric releases are verified against which 3rd party versions.   ></body> </Action>
<Action id="39318" issue="26901" author="christopherferris" type="comment" body="One last thing I noticed, while we created a fabric homebrew recipe, we never updated it for dot releases (as we probably should have done) and we will need to update for all major/minor releases (but not -alpha, -beta etc).  ~rameshthoomu " created="2018-01-29 19:45:31.0" updateauthor="christopherferris" updated="2018-01-29 19:48:07.0"/>
