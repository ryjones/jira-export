<Issue id="19351" key="FAB-5378" number="5378" project="10002" reporter="mastersingh24" assignee="yacovm" creator="mastersingh24" type="10001" summary="Pluggable system chaincode (ESCC, VSCC, etc) should have explicitly defined interfaces and be implemented as system plugins rather than generic chaincode" priority="2" resolution="10000" status="6" created="2017-07-19 09:49:57.0" updated="2018-07-20 18:56:39.0" resolutiondate="2017-08-12 13:37:39.0" votes="0" watches="11" workflowId="39492"> <description><! CDATA The original concept of system chaincode (SCC) was to enable to running  chaincode in process and from that perspective it made sense to use the same generic chaincode interface for both user and system chaincode.  But for 1.0.0, SCC became the answer for writing specific system-level plugins as well - e.g. ESCC, VSCC, etc.  And now we have requirements for writing even more type of system plugins and also additional implementations of the existing SCC (e.g. alternative ESCC and VSCC for sidedb / private data store).  Given that we have specific types of plugins, using the original SCC interface / architecture for plugins no longer makes sense. We need to define explicit interfaces for each type of SCC/plugin and not implement them as generic "chaincode". This will also make it possible in the future to exploit the plugin feature of Go 1.8 and later so that we don't need to statically link these in the future.  We *might* still want to allow running of user chaincode in process (and perhaps we keep the current implementation for that purpose) but we should vet that as part of this item.  ></description> </Issue>
