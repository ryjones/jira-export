<Action id="28848" issue="19429" author="kchristidis" type="comment" created="2017-07-22 22:17:48.0" updateauthor="kchristidis" updated="2017-07-23 14:57:32.0"> <body><! CDATA Paul, thanks for submitting this.  A couple of observations:  In our internal thread,  ~jkirke  wrote: {quote}In the example I gave, my invokes follow either the peer A / orderer A path or the peer C / orderer C path but stopping orderer B caused a complete inability to perform invokes on either orderer A or orderer C. {quote} This contradicts the description here: {quote}if you stop the orderer the peer is using, transactions will stop and the peer will not fail over to the other orderer. {quote} So, let's clarify first which one is it.  Furthermore, based on the description, the issue is easily reproducible.   ~jkirke : Can you please perform the following experiment, then attach the corresponding logs: # Set the logging to DEBUG level for both peer and orderer. # Recreate the problem in the shortest amount of steps possible. (I'd assume that would be "invoke once successfully, stop orderer, invoke again unsuccessfully, STOP")  In the logs that I see, the logs are not set to DEBUG level, and there is more noise than there should be. For instance, I see an orderer being restarted 5 times.  --  As best as I can tell, and as I also stated in the internal thread, this does not seem to be an issue with the orderer. (If Jason's version of events is accurate – see request for clarification above –, the stopped orderer doesn't participate in ordering in any way, so its failure is irrelevant to the process. If Paul's version of events is accurate we should look into why the peer is not performing a failover.)  I am therefore un-assigning myself from this, but I'll gladly look into it if in the end it turns out to be an orderer bug.  ></body> </Action>
<Action id="28860" issue="19429" author="jkirke" type="comment" created="2017-07-23 16:00:58.0" updateauthor="jkirke" updated="2017-07-23 16:00:58.0"> <body><! CDATA {quote}In the example I gave, my invokes follow either the peer A / orderer A path or the peer C / orderer C path but stopping orderer B caused a complete inability to perform invokes on either orderer A or orderer C. {quote} {quote}if you stop the orderer the peer is using, transactions will stop and the peer will not fail over to the other orderer. {quote} These statements are not contradictory. No fail over occurs in any case. In addition to no fail over occurring, taking down an orderer that is not being directly called (orderer b) in my example can prevent executions even thought the other two orderers are availablie.     ></body> </Action>
<Action id="28861" issue="19429" author="clayton sims" type="comment" body="Based on text exchange with Kostis yesterday....moving to Murali." created="2017-07-23 16:01:45.0" updateauthor="clayton sims" updated="2017-07-23 16:01:45.0"/>
<Action id="28862" issue="19429" author="clayton sims" type="comment" body="Sunday checkpoint call:  Paul to work with team to provide requested logs" created="2017-07-23 17:14:47.0" updateauthor="clayton sims" updated="2017-07-23 17:14:47.0"/>
<Action id="28868" issue="19429" author="kchristidis" type="comment" created="2017-07-23 20:11:30.0" updateauthor="kchristidis" updated="2017-07-23 20:16:20.0"> <body><! CDATA {quote}These statements are not contradictory. No fail over occurs in any case. {quote} You're saying that you kill an orderer that no peer is using (you do peer A / orderer A and peer C / orderer C and you kill orderer B), while Paul says "kill an orderer that the peer is using". -How is this not contradictory?- Perhaps contradictory is the wrong word. Is "quite different" better?  Also, in your case, why would there be a need for a failover to begin with? Nobody is using that orderer.  ></body> </Action>
<Action id="28871" issue="19429" author="jkirke" type="comment" created="2017-07-24 00:14:03.0" updateauthor="jkirke" updated="2017-07-24 00:17:43.0"> <body><! CDATA Understood. Perhaps there are two issues really then because: 1. fail over does not work and 2. sometimes stopping a single orderer prevents any orders from working.  Will enabled DEBUG logging and tried this out this afternoon. According to him he stopped orderer C and saw the failure. Here are the logs he sent added as an attachment.  ></body> </Action>
<Action id="28888" issue="19429" author="mastersingh24" type="comment" body="Are we sure that the peers know about the other orderer endpoints?" created="2017-07-24 12:37:04.0" updateauthor="mastersingh24" updated="2017-07-24 12:37:04.0"/>
<Action id="28928" issue="19429" author="jkirke" type="comment" created="2017-07-24 20:30:00.0" updateauthor="jkirke" updated="2017-07-24 20:30:00.0"> <body><! CDATA I am not confident that the way the SDK uses our peers and orderers facilitates fail over. I am honestly more concerned with issue 2. (sometimes stopping a single orderer prevents any orders from working). In this case it is impossible to perform any invokes until all the orderers and peers are restarted.  For issue 1, fail over does not work, if we are specifying a single orderer using the SDK and that orderer is down is there anything that would allow for fail over?   ></body> </Action>
<Action id="28935" issue="19429" author="muralisr" type="comment" created="2017-07-24 21:43:00.0" updateauthor="muralisr" updated="2017-07-24 21:43:00.0"> <body><! CDATA Assumptions * peer is configured to multiple orderers A, B and C * SDK is sending transactions to an orderer which is NOT killed (just to eliminate any app errors) * killed one of the other orderers  Expect peer to switch to one of the other running orderers and pick up.  If that's not happening first place to look at is deliveryservice ...  ~C0rWin  can you take a look at this please ?   ~jkirke   ~ptippett  Can you verify the above assumptions ?  ></body> </Action>
<Action id="28937" issue="19429" author="kchristidis" type="comment" created="2017-07-24 22:07:50.0" updateauthor="kchristidis" updated="2017-07-24 22:07:50.0"> <body><! CDATA {quote}I am not confident that the way the SDK uses our peers and orderers facilitates fail over. I am honestly more concerned with issue 2. (sometimes stopping a single orderer prevents any orders from working). In this case it is impossible to perform any invokes until all the orderers and peers are restarted.  For issue 1, fail over does not work, if we are specifying a single orderer using the SDK and that orderer is down is there anything that would allow for fail over?  {quote} This is not helping. Let's please identify _the single issue_ that we wish to address with this JIRA.  ></body> </Action>
<Action id="28940" issue="19429" author="jkirke" type="comment" created="2017-07-24 22:39:35.0" updateauthor="jkirke" updated="2017-07-24 22:54:12.0"> <body><! CDATA I think it is helping since I am attempting to make sure we are using this issue for the issue I reported. The focus should be on the issue where stopping a single orderer prevents all invokes from running on any orderer.  I cannot locate Kostas or Murali on Rocket or Slack to discuss the issue to avoid churn on this issue. Please contact me on either to discuss.  ></body> </Action>
<Action id="28943" issue="19429" author="muralisr" type="comment" body=" ~jkirke  can you verify the assumptions in my previous comment are correct ?" created="2017-07-24 22:55:08.0" updateauthor="muralisr" updated="2017-07-24 22:55:08.0"/>
<Action id="28945" issue="19429" author="jkirke" type="comment" created="2017-07-24 23:38:56.0" updateauthor="jkirke" updated="2017-07-24 23:38:56.0"> <body><! CDATA I talked with Murali on the phone and will gather the configuration information he has requested.     ></body> </Action>
<Action id="28946" issue="19429" author="jkirke" type="comment" body="Here are the configtx.yaml and orderer.yaml files from orderer A and orderer C. Orderer B is off and is has caused invokes to not function on my peer C currently. It also has caused the ledger values for peer A and C to not agree so I do not want to restart it since I am hoping you can meet me tomorrow to look at the issue." created="2017-07-25 01:23:31.0" updateauthor="jkirke" updated="2017-07-25 01:23:31.0"/>
<Action id="28947" issue="19429" author="clayton sims" type="comment" body="Artem - this is an HSBN defect and we want to have all defects included  for 7/26 cutoff for v1.0.1.   I would like to ask you to prioritize this to include into v1.0.1. " created="2017-07-25 01:51:05.0" updateauthor="clayton sims" updated="2017-07-25 01:51:05.0"/>
<Action id="28948" issue="19429" author="jyellick" type="comment" created="2017-07-25 02:14:28.0" updateauthor="jyellick" updated="2017-07-25 02:14:40.0"> <body><! CDATA I see one significant problem immediately based off the files you have uploaded.  Bootstrapping the ordering network must be done **once** and once only. Running {{configtxgen}} multiple times to generate multiple orderer genesis blocks will almost always produce different blocks at each invocation.  I also see in the {{orderer.yaml}} that the {{provisional}} genesis method is specified. This should *never* be used in a production environment, as it causes the genesis block to be dynamically generated (which again, will usually be different at each invocation).  Essentially, what I believe you have done is start three disparate blockchains which were forked at genesis. When a failure occurs, there is no way for the peer to failover, because all blocks from other orderers will not chain with the peer's existing chain.  ></body> </Action>
<Action id="28951" issue="19429" author="muralisr" type="comment" created="2017-07-25 02:44:09.0" updateauthor="muralisr" updated="2017-07-25 02:44:09.0"> <body><! CDATA  ~jkirke  lets take a step back and walk through the configuration and setup tomorrow ?   Moving this back to you just for now. Once we meet up tomorrow we can move to the right owner.  ></body> </Action>
<Action id="28957" issue="19429" author="c0rwin" type="comment" body=" ~Clayton Sims  will make sure to get it right priority, meanwhile it looks like there is misconfiguration issue, will test delivery service fail-over test regardless of this issue, waiting for confirmation about setup and configuration from  ~muralisr ." created="2017-07-25 06:12:48.0" updateauthor="c0rwin" updated="2017-07-25 06:12:48.0"/>
<Action id="28975" issue="19429" author="muralisr" type="comment" created="2017-07-25 14:51:04.0" updateauthor="muralisr" updated="2017-07-25 14:51:04.0"> <body><! CDATA Worked with  ~jkirke  to understand the config better. It does appear  ~jyellick  comment is in play here  {code:java} I also see in the orderer.yaml that the provisional genesis method is specified. This should never be used in a production environment, as it causes the genesis block to be dynamically generated (which again, will usually be different at each invocation). {code}   ~jkirke  lets test with the recommended configuration approach (using a common orderer config file, making sure bootstrapping is done once etc) and test to make sure system behaves as expected (or recreate the problem) and go from there please ?  ></body> </Action>
<Action id="29469" issue="19429" author="clayton sims" type="comment" body=" ~jkirke   can we close this now?" created="2017-08-05 15:52:31.0" updateauthor="clayton sims" updated="2017-08-05 15:52:31.0"/>
<Action id="30350" issue="19429" author="muralisr" type="comment" body=" ~jkirke  can we close this now ?" created="2017-08-30 03:47:06.0" updateauthor="muralisr" updated="2017-08-30 03:47:06.0"/>
<Action id="30624" issue="19429" author="denyeart" type="comment" body="Based on prior comments, switching to medium until we here back from reporter." created="2017-09-07 17:31:09.0" updateauthor="denyeart" updated="2017-09-07 17:31:09.0"/>
<Action id="30633" issue="19429" author="kchristidis" type="comment" body="(Pinged Jason and asked him to update this.)" created="2017-09-07 18:09:09.0" updateauthor="kchristidis" updated="2017-09-07 18:09:09.0"/>
<Action id="30634" issue="19429" author="jkirke" type="comment" body="This issue can be closed. It is no longer occurring with current environment." created="2017-09-07 18:11:15.0" updateauthor="jkirke" updated="2017-09-07 18:11:15.0"/>
