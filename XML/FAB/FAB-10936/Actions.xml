<Action id="46731" issue="31481" author="davidkhala" type="comment" created="2018-06-29 06:50:38.0" updateauthor="davidkhala" updated="2018-06-29 06:50:38.0"> <body><! CDATA Solutions can be found at   https://github.com/google/protobuf/issues/4582   https://github.com/golang/dep/issues/1888   ></body> </Action>
<Action id="50035" issue="31481" author="sykesm" type="comment" created="2018-09-06 17:51:47.0" updateauthor="sykesm" updated="2018-09-06 17:51:47.0"> <body><! CDATA There's not enough information in here to determine where your dep issue was introduced. We've been using dep for our builds since 1.2 and we build various chaincode examples in the tree.  The references that you have flagged ({{proto.InternalMessageInfo}}, {{ipamutils.NetworkToSplit}}) are included or transitively referenced by fabric proper.  Please provide additional information about what you're building/testing as well as the Gopkg.toml and Gopkg.lock.  ></body> </Action>
<Action id="50136" issue="31481" author="davidkhala" type="comment" created="2018-09-10 03:13:44.0" updateauthor="davidkhala" updated="2018-09-10 03:13:44.0"> <body><! CDATA Another is witnessed on latest run after `dep ensure --update`  # github.com/davidkhala/fabric-common-chaincode-golang/vendor/github.com/hyperledger/fabric/idemix vendor/github.com/hyperledger/fabric/idemix/util.go:60:11: not enough arguments in call to E.ToBytes have (  byte) want (  byte, bool)  Attached is my current  ^Gopkg.lock  ^Gopkg.toml   ></body> </Action>
<Action id="50137" issue="31481" author="davidkhala" type="comment" created="2018-09-10 04:12:08.0" updateauthor="davidkhala" updated="2018-09-10 04:12:08.0"> <body><! CDATA  ~sykesm  Dear Matt, and what is your environment? like OS, golang version?   And just to clarify, what I did is not build fabric itself but develop golang chaincode with dep to import fabric source as dependency, are you doing the same way? Surely we can build chaincode based on 1.2 peer/orderer without dep as pkg manager for chaincode?  ></body> </Action>
<Action id="50447" issue="31481" author="arner" type="comment" created="2018-09-14 11:08:05.0" updateauthor="arner" updated="2018-09-14 11:08:05.0"> <body><! CDATA  ~davidkhala  I have the same issue, importing fabric from a tool I'm writing. This workaround in Gopkg.toml worked for me (though it's not pretty): {quote}{{# https://jira.hyperledger.org/browse/FAB-11856}} {{  override  }}    name = "github.com/hyperledger/fabric-amcl"    revision = "ea8d504acd07754482414591d1ae105ff448dea2"  {{#  https://github.com/fsouza/go-dockerclient/issues/736 }} {{  override  }}    name = "github.com/fsouza/go-dockerclient"    version = "=1.2.1"  {{#  https://github.com/protocolbuffers/protobuf/issues/4582 }} {{  override  }}    name= "github.com/golang/protobuf"    version = "=1.2.0" {quote}  ~sykesm  shouldn't the build process catch breaking dependencies?  Docker-client is still the old version on master (https://github.com/hyperledger/fabric/blob/master/Gopkg.toml#L37).  ></body> </Action>
<Action id="50459" issue="31481" author="sykesm" type="comment" created="2018-09-14 14:28:07.0" updateauthor="sykesm" updated="2018-09-14 14:28:07.0"> <body><! CDATA Fabric is not structured as a version-stable repository. We vendor what we need to produce the binaries that are published. I agree that it's a problem that what exists can't be easily used like other conventional golang projects but that's a historical problem. I don't like it but it's not going to change in the very near term.  Assets that are intended to be used as libraries need to be extracted from fabric and all of the golang chaincode support code needs to be extracted or refactored. These are work items that need to be proposed and prioritized and neither has occurred yet.  ></body> </Action>
<Action id="50514" issue="31481" author="davidkhala" type="comment" created="2018-09-17 02:42:32.0" updateauthor="davidkhala" updated="2018-09-26 08:55:14.0"> <body><! CDATA  ~arner  I find a work-around looking more simple     override   name = "github.com/fsouza/go-dockerclient" version = "=1.2.1"    constraint   name = "github.com/hyperledger/fabric" branch = "master"     Well I am also helping on fabric-amcl, thus curious about the problem of why not using master branch.  ></body> </Action>
<Action id="50669" issue="31481" author="davidkhala" type="comment" body="I created a patch to tracking it https://gerrit.hyperledger.org/r/#/c/26386/" created="2018-09-19 14:29:55.0" updateauthor="davidkhala" updated="2018-09-19 14:29:55.0"/>
<Action id="52213" issue="31481" author="mastersingh24" type="comment" body="The fabric repo is NOT a library or set of libraries" created="2018-10-14 14:34:46.0" updateauthor="mastersingh24" updated="2018-10-14 14:34:46.0"/>
<Action id="52229" issue="31481" author="davidkhala" type="comment" created="2018-10-15 04:04:24.0" updateauthor="davidkhala" updated="2018-10-15 04:09:25.0"> <body><! CDATA  ~mastersingh24  Sure, but as  ~sykesm  mentioned,   ??Assets that are intended to be used as libraries need to be extracted from fabric and all of the golang chaincode support code needs to be extracted or refactored. These are work items that need to be proposed and prioritized and neither has occurred yet.??   We are only allowed to make fabric as a library, otherwise we could not use other third-party library for golang chaincode. Third-party library is quite fundamental for large scale production usage of fabric as we are doing.    At first stage, I think  at least "github.com/hyperledger/fabric/core/chaincode/shim" and peer.response struct in "github.com/hyperledger/fabric/protos/peer" could be extracted out from fabric repo   ></body> </Action>
