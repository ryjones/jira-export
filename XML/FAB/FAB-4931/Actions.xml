<Action id="27205" issue="18566" author="adnanchoudhury" type="comment" created="2017-06-22 15:51:31.0" updateauthor="adnanchoudhury" updated="2017-06-22 15:52:10.0"> <body><! CDATA Observed similar issue with  CORE_LOGGING_LEVEL=ERROR and  also with CORE_LOGGING_LEVEL=CRITICAL set in the docker compose file for peer. In both cases the peer log contains Warn/INFO level entries for gossip and ledger.  Attached the peer log from e2ecli both error level andcritical level warning.  ></body> </Action>
<Action id="27519" issue="18566" author="wlahti" type="comment" created="2017-06-28 16:04:25.0" updateauthor="wlahti" updated="2017-06-28 16:04:25.0"> <body><! CDATA This is currently working as designed. CORE_LOGGING_LEVEL sets the overall default logging level and then uses the different component levels (e.g. CORE_LOGGING_GOSSIP, CORE_LOGGING_LEDGER) to override the level for that specific component.   Perhaps to add flexibility in configuring log levels we should add a CORE_LOGGING_OVERRIDE flag to specify when to use the component override levels? There are many developers who want the currently functionality maintained but I definitely understand the desire to not use the component overrides.   ></body> </Action>
<Action id="27528" issue="18566" author="adnanchoudhury" type="comment" created="2017-06-28 16:22:10.0" updateauthor="adnanchoudhury" updated="2017-06-28 16:22:10.0"> <body><! CDATA  ~wlahti  The documentation provided in the sampleconfig/core.yaml indicates that CORE_LOGGING_LEVEL overrides the component logging, not the other way around (or maybe i am reading it wrong?) here is what the file says:    {code:java} logging: # Default logging levels are specified here. # Valid logging levels are case-insensitive strings chosen from # CRITICAL | ERROR | WARNING | NOTICE | INFO | DEBUG # The logging levels specified here can be overridden in various ways, # listed below from strongest to weakest: # # 1. The --logging-level=<level> command line option overrides all other # specifications. # # 2. The environment variable CORE_LOGGING_LEVEL otherwise applies to # all peer commands if defined as a non-empty string. # # 3. Otherwise, the specifications below apply. # Default for all modules running within the scope of a peer {code} Specifically, it seems to indicate that there are multiple ways to override logging levels, and one of the ways is to use core_logging_level.  ></body> </Action>
<Action id="27553" issue="18566" author="adnanchoudhury" type="comment" body="Some relevant discussion is here: https://jira.hyperledger.org/browse/FAB-4937 I will update this JIRA with the summary from there." created="2017-06-28 18:40:06.0" updateauthor="adnanchoudhury" updated="2017-06-28 18:40:06.0"/>
<Action id="27569" issue="18566" author="adnanchoudhury" type="comment" created="2017-06-28 21:16:31.0" updateauthor="adnanchoudhury" updated="2017-06-28 21:16:31.0"> <body><! CDATA Here is the summary after talking with  ~wlahti   1) The default logging level is INFO (if *no* core_logging_level or *no* component  logging level is specified in the core.yaml) 2) if core_logging_level is set, then all the components (that *don't* have specific log levels mentioned in core.yaml) will follow that level. 3) If a component is mentioned to have a specific logging level, (e.g. `gossip:     warning`), it overrides the core_logging_level.  The comment section of core.yaml would be updated to reflect this.     ></body> </Action>
<Action id="27601" issue="18566" author="scottz" type="comment" created="2017-06-29 13:30:29.0" updateauthor="scottz" updated="2017-06-29 13:30:29.0"> <body><! CDATA I recommend we list ALL components in the core,yaml file, so the user knows what options are available. And, set them all to their defaults, and then comment out all of them! That way, someone could override all settings by setting CORE_LOGGING_LEVEL. If you leave some of the components assigned here, then the user could not easily change them all with single command using CORE_LOGGING_LEVEL.  Additionally, someone could override a single one by uncommenting only that component logging level (or in the environment when starting the network, or later dynamically by command). And yes I agree the wording should be made clear, that specifying any individual component levels anywhere would override CORE_LOGGING_LEVEL.  ></body> </Action>
<Action id="27610" issue="18566" author="wlahti" type="comment" created="2017-06-29 14:35:34.0" updateauthor="wlahti" updated="2017-06-29 14:40:47.0"> <body><! CDATA I agree that we should eventually be able to add any component with a log level to override its level in core.yaml. With the current design, however, this is not possible. It can definitely be added in a future release.  The focus of this item will be updating the documentation in core.yaml to accurately reflect the current functionality in v1.0. I've opened FAB-5106 to track this improvement request.  ></body> </Action>
<Action id="27629" issue="18566" author="scottz" type="comment" created="2017-06-29 16:26:29.0" updateauthor="scottz" updated="2017-06-29 16:26:29.0"> <body><! CDATA Sounds good. But I feel I must clarify: # When I said ALL, I initially meant "all components that have logging levels defined". It sounds like you thought I was asking to add new logging capability to other component areas. I was simply asking to add comment lines in core.yaml for any others that exist already, so the users can know about them. I know when we set CORE_LOGGING_LEVEL to DEBUG it turned on more debug logs - but only for components that were NOT already listed and assigned here. #  And I was also asking to comment out the lines that do exist (but still allow those "default" settings to be used by each component); otherwise, if all those components are actually assigned here, then setting CORE_LOGGING_LEVEL does not change them.  ></body> </Action>
<Action id="27630" issue="18566" author="wlahti" type="comment" body="I have pushed a CR to gerrit for review that updates the documentation in core.yaml: https://gerrit.hyperledger.org/r/#/c/11253/" created="2017-06-29 16:28:43.0" updateauthor="wlahti" updated="2017-06-29 16:28:43.0"/>
<Action id="27631" issue="18566" author="wlahti" type="comment" body=" ~scottz  The override components section is currently a hard-coded listed of acceptable components. Anything that doesn&apos;t already exist in the section will not be used, even if it has a logger defined. " created="2017-06-29 16:47:15.0" updateauthor="wlahti" updated="2017-06-29 16:47:15.0"/>
<Action id="27671" issue="18566" author="adnanchoudhury" type="comment" created="2017-06-29 22:08:03.0" updateauthor="adnanchoudhury" updated="2017-06-29 22:08:03.0"> <body><! CDATA  ~wlahti  reporting an unexpected behavior: I see that if I set the msp logging level to ERROR via a docker environment variable, I still see WARN level logging in the peer log.  +*Setup:* +bring-your-first-network from fabric-sample. Added these two lines in the peer-base.yaml (so all peer containers will have these) {code:java} - CORE_LOGGING_LEVEL=ERROR - CORE_LOGGING_LEDGER=WARNING - CORE_LOGGING_MSP=ERROR{code}  +*Expected*+: No logs for msp if its lower than ERROR. +*Observed*+: all peers have these WARN level logs: {code:java} {"log":"\u001b 33m2017-06-29 21:53:33.523 UTC  msp  getMspConfig -\u003e WARN 001\u001b 0m Intermediate certs folder not found at  /etc/hyperledger/fabric/msp/intermediatecerts . Skipping.  stat /etc/hyperledger/fabric/msp/intermediatecerts: no such file or directory \n","stream":"stderr","time":"2017-06-29T21:53:33.523640743Z"} {"log":"\u001b 33m2017-06-29 21:53:33.523 UTC  msp  getMspConfig -\u003e WARN 002\u001b 0m TLS intermediate certs folder not found at  /etc/hyperledger/fabric/msp/tlsintermediatecerts . Skipping.  stat /etc/hyperledger/fabric/msp/tlsintermediatecerts: no such file or directory \n","stream":"stderr","time":"2017-06-29T21:53:33.523676862Z"} {"log":"\u001b 33m2017-06-29 21:53:33.523 UTC  msp  getMspConfig -\u003e WARN 003\u001b 0m crls folder not found at  /etc/hyperledger/fabric/msp/crls . Skipping.  stat /etc/hyperledger/fabric/msp/crls: no such file or directory \n","stream":"stderr","time":"2017-06-29T21:53:33.523681098Z"} {"log":"2017-06-29 21:53:33.523 UTC  msp  getMspConfig -\u003e INFO 004\u001b 0m MSP configuration file not found at  /etc/hyperledger/fabric/msp/config.yaml :  stat /etc/hyperledger/fabric/msp/config.yaml: no such file or directory \n","stream":"stderr","time":"2017-06-29T21:53:33.523684033Z"}{code} More info: Tested with RC1. If I set CORE_LOGGING_MSP=INFO it prints all logs info and up.  Please let me know if you think creating a new JIRA for this is better, as this was supposed to be for the doc only.  ></body> </Action>
<Action id="27711" issue="18566" author="wlahti" type="comment" body="I believe this is just a side effect of the order that the packages are loaded. At the time the MSP code is running at the very start of the peer, the log level specifications from the environment variables/core.yaml haven&apos;t been applied. While not exactly ideal, I think as long as these are the only messages that appear the log level controls are working as expected. " created="2017-06-30 15:37:50.0" updateauthor="wlahti" updated="2017-06-30 15:37:50.0"/>
<Action id="27724" issue="18566" author="adnanchoudhury" type="comment" created="2017-06-30 19:35:11.0" updateauthor="adnanchoudhury" updated="2017-06-30 19:35:11.0"> <body><! CDATA Created a lowest level bug for this: https://jira.hyperledger.org/browse/FAB-5134 Keeping this JIRA for the doc only, as previously intended.  ></body> </Action>
<Action id="27755" issue="18566" author="muralisr" type="comment" body=" https://gerrit.hyperledger.org/r/#/c/11253/  fixes this and has been reviewed by  ~AdnanChoudhury " created="2017-07-02 19:44:44.0" updateauthor="muralisr" updated="2017-07-02 19:44:44.0"/>
