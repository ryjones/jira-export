<Issue id="35088" key="FAB-12708" number="12708" project="10002" reporter="guoger" creator="guoger" type="10001" summary="Add benchmark test for etcdraft" priority="3" resolution="10001" status="6" created="2018-11-05 14:05:41.0" updated="2021-05-11 14:06:54.0" resolutiondate="2021-05-11 14:06:54.0" votes="0" watches="3" workflowId="53433"> <description><! CDATA We should abandon  old orderer performance test|https://github.com/hyperledger/fabric/blob/release-1.3/orderer/common/server/benchmark_test.go  in favor of using nwo        tl;dr, flushing WAL data to disk *in parallel with* writing blocks to ledger significantly slows down ledger io throughput on OSX.  running this benchmark test on *OSX* give very surprising (disappointing) result. {code:java} package foo  import ( 	"io/ioutil" 	"os" 	"syscall" 	"testing" )  func Benchmark_No_WAL(b *testing.B) { 	dir, err := ioutil.TempDir("", "benchsync-*") 	if err != nil { 		b.Fatalf("fail to benchmark: %s", err) 	}  	var ledger *os.File 	if ledger, err = ioutil.TempFile("", "sync-*"); err != nil { 		b.Fatalf("fail to benchmark: %s", err) 	}  	defer func() { 		os.Remove(dir) 	}()  	b.ResetTimer() 	for n := 0; n < b.N; n++ { 		ledger.Write(make(  byte, 1000)) 		ledger.Sync() 	} }  func Benchmark_WAL_OSX(b *testing.B) { 	dir, err := ioutil.TempDir("", "benchsync-*") 	if err != nil { 		b.Fatalf("fail to benchmark: %s", err) 	}  	var wal, ledger *os.File 	if wal, err = ioutil.TempFile("", "sync-*"); err != nil { 		b.Fatalf("fail to benchmark: %s", err) 	}  	if ledger, err = ioutil.TempFile("", "sync-*"); err != nil { 		b.Fatalf("fail to benchmark: %s", err) 	}  	defer func() { 		os.Remove(dir) 	}()  	b.ResetTimer() 	go func() { 		for x := 0; x < b.N; x++ { 			wal.Write(make(  byte, 100)) 			// etcd/wal uses this call on OSX to sync disk, instead of FD.Sync(). 			// See this issue: https://github.com/golang/go/issues/26650 			syscall.Syscall(syscall.SYS_FCNTL, wal.Fd(), uintptr(syscall.F_FULLFSYNC), uintptr(0)) 		} 	}()  	for n := 0; n < b.N; n++ { 		ledger.Write(make(  byte, 1000)) 		ledger.Sync() 	} }  func Benchmark_WAL_Linux(b *testing.B) { 	dir, err := ioutil.TempDir("", "benchsync-*") 	if err != nil { 		b.Fatalf("fail to benchmark: %s", err) 	}  	var wal, ledger *os.File 	if wal, err = ioutil.TempFile("", "sync-*"); err != nil { 		b.Fatalf("fail to benchmark: %s", err) 	}  	if ledger, err = ioutil.TempFile("", "sync-*"); err != nil { 		b.Fatalf("fail to benchmark: %s", err) 	}  	defer func() { 		os.Remove(dir) 	}()  	b.ResetTimer() 	go func() { 		for x := 0; x < b.N; x++ { 			wal.Write(make(  byte, 100)) 			wal.Sync() 		} 	}()  	for n := 0; n < b.N; n++ { 		ledger.Write(make(  byte, 1000)) 		ledger.Sync() 	} } {code}  ></description> </Issue>
