<Action id="50792" issue="33915" author="denyeart" type="comment" created="2018-09-19 20:58:20.0" updateauthor="denyeart" updated="2018-09-19 20:59:47.0"> <body><! CDATA  ~dbshah  I think it would help if you additionally phrase as a User Story, or a set of User Stories (within this one Jira at first), so that we can better understand the personas and objectives.  _As a < type of user >, I want < some goal > so that < some reason >._  ></body> </Action>
<Action id="50889" issue="33915" author="dbshah" type="comment" created="2018-09-20 19:55:16.0" updateauthor="dbshah" updated="2018-09-20 19:55:16.0"> <body><! CDATA As an operator, I want to make it easier for myself to setup a peer in kubernetes environment. Currently, an operator needs access to the filesystem where the peer is running to setup the MSP, which is generally not possible if operator wants to run the peer in kubernetes environment. To make things easier, peer can have an option to pass the MSP certificates as a JSON/YAML file and the peer startup code itself parses the JSON and makes all the folder structures and files required for MSP in proper places. That way the JSON can be passed as kubernetes-secret or kubernetes-configmap, which does not require access to the filesystem.  Similarly, when something needs to be updated lets say tls-certs or admin-certs in the peer's MSP, it will be much easier to update the JSON to add/remove/update particular certs, and the peer can watch for changes on that file, and redo the work of making the MSP folders/files and restart with the new MSP.  As a side note, the peer in this case might not even need the MSPs to be on the file system and always read them from the JSON file. Also, same thing applies to the orderer nodes.  ></body> </Action>
<Action id="52477" issue="33915" author="denyeart" type="comment" body=" ~dbshah   ~mrshah-ibm  Could you clarify exactly how the JSON would be passed to peer or orderer?" created="2018-10-20 19:47:42.0" updateauthor="denyeart" updated="2018-10-20 19:47:42.0"/>
<Action id="52550" issue="33915" author="mrshah-ibm" type="comment" created="2018-10-23 18:15:38.0" updateauthor="mrshah-ibm" updated="2018-10-23 18:15:38.0"> <body><! CDATA Currently, we are looking at something like the following for peer & orderer:  {{ \{ { "msp": { "component": { "privatekey":  "" , "cert":  "" , "cacerts":  "" , "admincerts":  "" , "intermediatecerts":  ""  }, "tls": { "}}{{privatekey}}{{":  "" , "cert":  "" , "cacerts":  "" , "intermediatecerts":  ""  }, "clientauth": \{ "privatekey":  "" , "cert":  "" , "cacerts":  "" , "intermediatecerts":  ""  } } }}}  Please note that the objects for "component", "tls" and "clientauth" are exactly same. The strings in the array can be one of (1) path of the key or (2) the base64 encoded key itself.  {{It will be best if it can be read from an env variable, good if it can be read from a file. The reason to rate env variable higher is because it will be more secure if the config (especially the private keys) is not written down on a file system and available as secrets in env variables.}}  While we are implementing it, can we also look for changes in the msp config (for example the TLS Certs) for changes and reload it without restarting the process.  ></body> </Action>
<Action id="52552" issue="33915" author="yacovm" type="comment" created="2018-10-23 18:38:55.0" updateauthor="yacovm" updated="2018-10-23 18:46:12.0"> <body><! CDATA {quote} it will be more secure if the config (especially the private keys) is not written down on a file system and available as secrets in env variables. {quote} Why is this more secure? environment variables are inherited by spawned processes, and the fact that environment variables are ephemeral, means that they are stored in a "centralized" place (etcd, i guess?)   I would say that ideally (for maximum security) a peer would generate its private key at startup, unknown to anyone, then send an enrollment request to a CA of its organization via some "one-time-key" scheme, to issue a certificate, and then would store the private key on the file system forever, and if the peer is destroyed then the private key would be irrecoverable.   ></body> </Action>
<Action id="52553" issue="33915" author="yacovm" type="comment" created="2018-10-23 18:42:18.0" updateauthor="yacovm" updated="2018-10-23 18:42:18.0"> <body><! CDATA {quote} While we are implementing it, can we also look for changes in the msp config (for example the TLS Certs) for changes and reload it without restarting the process.{quote}   Reloading the local MSP without also taking care of reloading the appropriate subsystems that depend on the local MSP would surely cause problems :)  At least for gossip, it would mean that any message that is signed by the peer, cannot be verified by any other peer, since the peer's certificate is cached, but the signatures would be no longer be verified under the cached certificate...   I'm not saying that it's impossible to support that, of course - but only that special care and coordination needs to be done, so we won't run into unexpected problems.   ></body> </Action>
<Action id="52554" issue="33915" author="mrshah-ibm" type="comment" created="2018-10-23 18:46:28.0" updateauthor="mrshah-ibm" updated="2018-10-23 18:46:28.0"> <body><! CDATA It is good to have certificates with short validity, but it is painful if we have to restart the process (a little bit of downtime) every time (example 90 days) the certificates need to be updated.  Thus, we would like the process to reload the certificates dynamically.  ></body> </Action>
<Action id="52555" issue="33915" author="mrshah-ibm" type="comment" body="Regarding the central storage (etcd for kubernetes), the secrets can be encrypted before being stored - https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/" created="2018-10-23 18:51:27.0" updateauthor="mrshah-ibm" updated="2018-10-23 18:51:27.0"/>
<Action id="52556" issue="33915" author="yacovm" type="comment" body="What about orderers? Are their certificates expected to be rotated too on a timely manner? Should it also be done online, with no downtime?" created="2018-10-23 18:52:36.0" updateauthor="yacovm" updated="2018-10-23 18:52:50.0"/>
<Action id="52558" issue="33915" author="mrshah-ibm" type="comment" created="2018-10-23 19:00:37.0" updateauthor="mrshah-ibm" updated="2018-10-23 19:00:37.0"> <body><! CDATA I understand that TLS and MSP systems are different. And I am fine with the TLS certs being the only ones dynamically updated (which seems to have been already implemented). {quote}What about orderers? Are their certificates expected to be rotated too on a timely manner? Should it also be done online, with no downtime? {quote} I'd expect the same behavior for peers & orderers.  ></body> </Action>
<Action id="52585" issue="33915" author="denyeart" type="comment" body="We could do the format updates in v1.4, and defer the dynamic update (FAB-2072) aspect until MSP is refactored (target v2.0)." created="2018-10-24 13:24:41.0" updateauthor="denyeart" updated="2018-10-26 10:21:55.0"/>
<Action id="52902" issue="33915" author="mne" type="comment" body=" ~mrshah-ibm ,  ~denyeart  - summarizing, we want to be able to (re)configure a peer&apos;s local MSP based on a JSON passed at peer startup as a CLI parameter. Is that correct? Since this is planned for v.1.4 I created a subtask for that and started coding." created="2018-11-01 15:51:06.0" updateauthor="mne" updated="2018-11-01 15:51:06.0"/>
<Action id="53003" issue="33915" author="denyeart" type="comment" created="2018-11-04 12:24:24.0" updateauthor="denyeart" updated="2018-11-04 12:24:24.0"> <body><! CDATA  ~mne   ~mrshah-ibm  It sounds like you two discussed.  Can you summarize the intended flow, both for v1.4 and beyond? e.g. how is the file to be generated and passed to the peer? After being passed to peer would the file remain, or would peer write it's content into it's MSP directories?  If it is intended that the file should be human editable, YAML should probably be used rather than JSON, as it is more human readable, allows for adding comments, and would be more consistent with the other Fabric config files.  ></body> </Action>
<Action id="53062" issue="33915" author="mne" type="comment" created="2018-11-06 09:08:32.0" updateauthor="mne" updated="2018-11-06 09:12:08.0"> <body><! CDATA  ~denyeart  yes we did, let me summarize ( ~mrshah-ibm  correct me if I'm wrong): # Current configuration of the MSP by creating the directory structure and putting in all files makes it hard to use in an automated deployment # Crypto material is stored on the peer's file system in the MSP directory. As I understand from discussing this with Mihir, it is possible to mount an extra file system to put the MSP directory, but this would be cumbersome again. # Configuration of the MSP should not require running additional commands.  As a result, a solution that adds a new command to the peer CLI that would pick up a YAML file and create the MSP directory structure is not an option.  My suggestion is the following: We use the existing CORE_PEER_MSPCONFIGPATH config option. If it points to a directory, the current way of setting up the MSP is used. If it points to a file, a new way of setting up the MSP via a YAML file is used. No commands are changed, no additional parameters added, this is just an alternative way of supplying the MSP config.  In the future, dynamic reconfiguration can be enabled through an additional peer CLI command, which re-reads the MSP configuration.  ></body> </Action>
<Action id="53065" issue="33915" author="denyeart" type="comment" body="Sounds good to me.   ~mrshah-ibm   ~dbshah  are the consumers so we&apos;ll have to defer to them for final acceptance." created="2018-11-06 09:27:26.0" updateauthor="denyeart" updated="2018-11-06 09:27:26.0"/>
<Action id="53076" issue="33915" author="mrshah-ibm" type="comment" body="I like it." created="2018-11-06 12:30:49.0" updateauthor="mrshah-ibm" updated="2018-11-06 12:30:49.0"/>
<Action id="54383" issue="33915" author="denyeart" type="comment" body="Moving to v2.0 since there is still discussion ongoing around the encoding in subtask CR https://gerrit.hyperledger.org/r/#/c/27437/ ." created="2018-12-05 16:14:37.0" updateauthor="denyeart" updated="2018-12-05 16:14:37.0"/>
<Action id="65897" issue="33915" author="denyeart" type="comment" body=" ~sykesm   ~mrshah-ibm  Do you want to make any improvements here in Fabric v2.0?" created="2019-12-02 14:20:35.0" updateauthor="denyeart" updated="2019-12-02 14:20:35.0"/>
