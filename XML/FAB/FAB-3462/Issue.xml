<Issue id="16058" key="FAB-3462" number="3462" project="10002" reporter="c0rwin" creator="c0rwin" type="10003" summary="Add unit tests for gossip message comparator." priority="3" resolution="10000" status="6" created="2017-04-27 15:06:53.0" updated="2018-07-20 14:12:25.0" resolutiondate="2017-04-28 22:03:24.0" votes="0" watches="1" workflowId="38191"> <description><! CDATA There is a gossip message comparator  abstraction which allows creation of message replacement policies.  {code} // MessageReplacingPolicy Returns: // MESSAGE_INVALIDATES if this message invalidates that // MESSAGE_INVALIDATED if this message is invalidated by that // MESSAGE_NO_ACTION otherwise type MessageReplacingPolicy func(this interface{}, that interface{}) InvalidationResult  // InvalidationResult determines how a message affects another message // when it is put into gossip message store type InvalidationResult int  const ( 	// MessageNoAction means messages have no relation 	MessageNoAction InvalidationResult = iota 	// MessageInvalidates means message invalidates the other message 	MessageInvalidates 	// MessageInvalidated means message is invalidated by the other message 	MessageInvalidated ) {code}  {code} // NewGossipMessageComparator creates a MessageReplacingPolicy given a maximum number of blocks to hold func NewGossipMessageComparator(dataBlockStorageSize int) common.MessageReplacingPolicy { 	return (&msgComparator{dataBlockStorageSize: dataBlockStorageSize}).getMsgReplacingPolicy() } {code}  Need to add unit tests to cover functionality of message comparator for different gossip message types.  ></description> </Issue>
