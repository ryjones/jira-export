<Action id="38343" issue="26689" author="ales" type="comment" body=" ~elli-androulaki ,  ~adc ,  ~yacovm ,  ~mastersingh24 ,  ~jyellick  pls weigh in" created="2018-01-09 15:23:17.0" updateauthor="ales" updated="2018-01-09 15:23:17.0"/>
<Action id="38345" issue="26689" author="yacovm" type="comment" created="2018-01-09 15:44:37.0" updateauthor="yacovm" updated="2018-01-09 16:08:03.0"> <body><! CDATA # This is a direct ramification of using system chaincodes for peer infrastructure, instead of only using them for running in-process smart contracts :) # I recommended to you another name which I think is more fit *IsInfrastructureCC* , I don't think "default" should be in the name at any case. This actually has nothing to do with default or not, and everything to do with whether the CC is used for infrastructure, or for user business logic. # Not taking any action, would probably lead some customers to a chain fork, which is pretty bad. I suggest we do this fast, since the time window before code freeze is almost due. I suggest you raise the priority to highest. # If I can expand a bit on the problem - when a SCC (an in-process chaincode) is registered in the peer's memory - it is added to the *systemChaincodes* slice in *importsysccs.go* . Some clients use in-process chaincodes that even can load as plugins (dynamically) without having to recompile the peer and they are also appended to that slice via *RegisterSysCCs* in the same file. Now, this means that the validation logic, when it executes *IsSysCC* would take different decisions based on whether the SCC is installed in the peer, or not.  ></body> </Action>
<Action id="38355" issue="26689" author="elli-androulaki" type="comment" created="2018-01-09 20:31:05.0" updateauthor="elli-androulaki" updated="2018-01-09 20:31:05.0"> <body><! CDATA    I agree with  ~yacovm ; it can be that if scc-s are beyond the infrastructure ones, the isSysCC could cause forks...    ~ales  already submitted the related CR:  https://gerrit.hyperledger.org/r/#/c/16705|https://gerrit.hyperledger.org/r/#/c/16705/ .     ></body> </Action>
<Action id="38358" issue="26689" author="yacovm" type="comment" body="should this be somehow backported to v1.0 ? " created="2018-01-09 22:35:58.0" updateauthor="yacovm" updated="2018-01-09 22:35:58.0"/>
<Action id="38389" issue="26689" author="divyank" type="comment" created="2018-01-10 15:24:31.0" updateauthor="divyank" updated="2018-01-10 15:24:31.0"> <body><! CDATA This solution could break persistence for SCCs that are not on the Infrastructure SCCs list.  For example, if we replace  this|https://github.com/hyperledger/fabric/blob/1c3d63bc63baecce5470aa0e75e2442ca8ecd34a/core/committer/txvalidator/validator.go#L622  IsSysCC() call in the tx validation code with IsInfrastructureCC(), the peer will no longer be able to validate transactions involving SCCs that are not on this list.  ></body> </Action>
<Action id="38410" issue="26689" author="baohua" type="comment" created="2018-01-10 21:48:01.0" updateauthor="baohua" updated="2018-01-10 21:48:01.0"> <body><! CDATA Since the scc might be dynamic, and we may have more scc in future, a radical way might be keeping "scc" suffix as a remaining keyword, and can only be used in scc.   However, I'm not sure it's the good timing to do it now.  ></body> </Action>
<Action id="38421" issue="26689" author="ales" type="comment" body="Agreed, though we have to do something to avoid user chaincodes, infrastructure scc&apos;s and plugin scc&apos;s to be mixed up. " created="2018-01-11 09:46:26.0" updateauthor="ales" updated="2018-01-11 09:46:26.0"/>
<Action id="38422" issue="26689" author="yacovm" type="comment" created="2018-01-11 09:54:01.0" updateauthor="yacovm" updated="2018-01-11 09:54:01.0"> <body><! CDATA {quote}Agreed, though we have to do something to avoid user chaincodes, infrastructure scc's and plugin scc's to be mixed up.  {quote}   There is something we can do. We can just have the peer not use chaincodes for infrastructure management.   ></body> </Action>
<Action id="38423" issue="26689" author="ales" type="comment" created="2018-01-11 10:34:38.0" updateauthor="ales" updated="2018-01-11 10:34:38.0"> <body><! CDATA There are 2 types of scc's: # real infrastructure management (cscc, qscc, lscc) # endorsement policy facilitators (escc, vscc)  There might be a third type of chaincode that a customer might want to be a "system" one because they need functionality that is not provided by the shim (not saying it's a good idea to do that, just stating the fact).  What would be a good/better abstraction for scc's of type 1 than the chaincode abstraction? One good thing of the chaincode abstraction is that the sdk does not need to implement another infrastructure management interface. However I'm not sure that's a strong-enough motivation, I'd like to hear what others think.  As to scc's of type 2, we might replace them by simply implementing an interface (and doing away with the chaincode abstraction altogether).  Thoughts? ( ~jyellick  please weigh in as well, I know you were also thinking along those lines)  ></body> </Action>
<Action id="43843" issue="26689" author="jyellick" type="comment" created="2018-05-04 15:27:47.0" updateauthor="jyellick" updated="2018-05-04 15:27:47.0"> <body><! CDATA Looks like these CRs have been abandoned?  To my mind, there is no requirement to treat SCCs any differently from standard CCs.  I see no reason we need to have a reference to it in our validation path.  Once we have the new lifecycle implemented (which will have no custom validation) I think these calls all simply vanish from the validation.  ></body> </Action>
<Action id="45833" issue="26689" author="kchristidis" type="comment" created="2018-06-12 14:53:03.0" updateauthor="kchristidis" updated="2018-06-12 14:53:03.0"> <body><! CDATA With the new lifecycle work coming in for 1.3, I suggest that this remains in "On Hold" status, and has its "Fix Version" set to 1.3.  When the lifecycle work gets merged, we can hopefully set its status to "Invalid". Any disagreements?  ></body> </Action>
<Action id="62379" issue="26689" author="mastersingh24" type="comment" body="no longer valid with new lifecyle ... not going to invest in old lifecycle" created="2019-07-30 03:00:33.0" updateauthor="mastersingh24" updated="2019-07-30 03:00:33.0"/>
