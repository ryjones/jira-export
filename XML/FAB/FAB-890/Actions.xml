<Action id="19536" issue="13221" author="bcbrock" type="comment" body="-Re: Item 3, I don&apos;t believe that the producers need to route their requests to the partition leader, only the consumers need to do so. I believe that the brokers take care of distributing incoming message, so the producer should send the request to the local Kafka broker (if there is one) to reduce latency and overhead.- This is wrong, I don&apos;t know what I was thinking :)" created="2016-10-27 20:31:15.0" updateauthor="bcbrock" updated="2016-11-07 01:21:12.0"/>
<Action id="19665" issue="13221" author="kchristidis" type="comment" body="Let&apos;s post an update here on where we stand." created="2016-11-06 16:10:43.0" updateauthor="kchristidis" updated="2016-11-06 16:10:43.0"/>
<Action id="19669" issue="13221" author="bcbrock" type="comment" created="2016-11-07 01:28:31.0" updateauthor="bcbrock" updated="2016-11-07 01:28:31.0"> <body><! CDATA If it helps, this is how I redefined newBroker() to work with multiple brokers in my sandbox:  {code} // newBroker creates a connection to the leading broker for a // topic/partition. We first create a connection to the (arbitrary) first // broker in order to make a metadata request for the topic, then search for // the leader by broker ID in the returned list of brokers. func newBroker(conf *config.TopLevel) Broker {  	broker0 := sarama.NewBroker(conf.Kafka.Brokers 0 ) 	if err := broker0.Open(nil); err != nil { 		panic(fmt.Errorf("Failed to open broker0 for metadata request: %v", err)) 	}  	topic := conf.Kafka.Topic 	metaData, err := broker0.GetMetadata(&sarama.MetadataRequest{Topics:   string{topic}}) 	if err != nil { 		panic(fmt.Errorf("GetMetadata failed for topic %s: %v", topic, err)) 	} 	err = broker0.Close() 	if err != nil { 		panic(fmt.Errorf("Close of broker0 failed: %v", err)) 	}  	pid := conf.Kafka.PartitionID 	if (pid < 0) || (pid > int32(len(metaData.Topics 0 .Partitions))) { 		panic(fmt.Errorf("Illegal partition ID %d", pid)) 	} 	leader:= metaData.Topics 0 .Partitions pid .Leader 	logger.Debugf("Leading broker for topic %s/partition %d is broker ID %d", 		topic, pid, leader)  	var broker *sarama.Broker 	for _, b := range metaData.Brokers { 		if b.ID() == leader { 			broker = b 			break 		} 	} 	if broker == nil { 		panic(fmt.Errorf("Can't find leader for topic %s/partition %d", 			topic, pid)) 	}  	if err := broker.Open(nil); err != nil { 		panic(fmt.Errorf("Failed to open Kafka broker: %v", err)) 	}  	return &brokerImpl{ 		broker: broker, 		config: conf, 	} }   {code}   ></body> </Action>
<Action id="19873" issue="13221" author="kchristidis" type="comment" body="Updating the status of this from in review to in progress until we add tests." created="2016-11-28 19:22:45.0" updateauthor="kchristidis" updated="2016-11-28 19:23:41.0"/>
<Action id="19892" issue="13221" author="kchristidis" type="comment" body="Test added, this is practically done - waiting for merging." created="2016-11-29 16:47:54.0" updateauthor="kchristidis" updated="2016-11-29 16:47:54.0"/>
