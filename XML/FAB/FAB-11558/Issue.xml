<Issue id="32768" key="FAB-11558" number="11558" project="10002" reporter="sambhavdutt" assignee="latitiah" creator="sambhavdutt" type="10004" summary="Behave test fails in Gossip and Orderer tests due to Assertion error." priority="3" resolution="10000" status="6" created="2018-08-12 23:06:14.0" updated="2019-03-19 11:13:00.0" resolutiondate="2018-08-31 15:03:07.0" votes="0" watches="4" workflowId="44005"> <description><! CDATA Gossip feature tests and Orderer service fail in behave tests, The errors are copied below  {code:java} gossip.Gossip Service. FAB-4682  In leader-selection, a non-leader peer, that joins an already-active channel--is expected to have all the blocks eventually.  Failing step: Then a user receives a success response of 940 from "peer1.org2.example.com" ... failed in 0.001s Location: gossip.feature:407 Assertion Failed: Expected response was 940; received 1000 When a user queries on the chaincode named "mycc" with args  "query","a"  on "peer1.org2.example.com" ... passed in 26.049s Then a user receives a success response of 940 from "peer1.org2.example.com" ... failed in 0.001s When a user invokes on the chaincode named "mycc" with args  "invoke","a","b","40"  on "peer1.org2.example.com" ... skipped in 0.000s And I wait "5" seconds ... skipped in 0.000s And a user queries on the chaincode named "mycc" with args  "query","a"  on "peer1.org2.example.com" ... skipped in 0.000s Then a user receives a success response of 900 from "peer1.org2.example.com" ... skipped in 0.000s {code}   {code:java} orderer.Orderer Service.FAB-3859: Message Sizes with Configuration Tweaks -- @1.1  Failing step: Then a user receives a response containing a value of length 1048576 ... failed in 0.000s Location: orderer.feature:148 Assertion Failed: Expected response to be of length 1048576; received length 3; Result: "" @daily Scenario Outline: FAB-3859: Message Sizes with Configuration Tweaks -- @1.1  Given the ORDERER_ABSOLUTEMAXBYTES environment variable is 20 MB ... passed in 0.001s And the ORDERER_PREFERREDMAXBYTES environment variable is 2 MB ... passed in 0.000s And the KAFKA_MESSAGE_MAX_BYTES environment variable is 2 MB ... passed in 0.000s And the KAFKA_REPLICA_FETCH_MAX_BYTES environment variable is 2 MB ... passed in 0.000s And the KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES environment variable is 20 MB ... passed in 0.000s Given I have a bootstrapped fabric network of type kafka ... passed in 28.022s And I use the NodeJS SDK interface ... passed in 85.261s When an admin sets up a channel named "configsz" ... passed in 49.365s And an admin deploys chaincode at path "github.com/hyperledger/fabric/examples/chaincode/go/map" with args  "init"  with name "mapIt" on channel "configsz" ... passed in 60.799s When a user invokes on the channel "configsz" using chaincode named "mapIt" with random args  "put","g","{random_value}"  of length 1048576 ... passed in 4.070s And I wait "10" seconds ... passed in 10.010s And a user queries on the channel "configsz" using chaincode named "mapIt" for the random key with args  "get","g"  on "peer0.org1.example.com" ... passed in 3.685s Then a user receives a response containing a value of length 1048576 ... failed in 0.000s And a user receives a response with the random value ... skipped in 0.000s {code}  *Build Log*  https://logs.hyperledger.org/production/vex-yul-hyp-jenkins-3/fabric-test-daily-behave-master-x86_64/1/  https://jenkins.hyperledger.org/view/Daily/job/fabric-test-daily-behave-master-x86_64/1/consoleFull  ></description> </Issue>
