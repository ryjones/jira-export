<Issue id="32550" key="FAB-11473" number="11473" project="10002" reporter="dongming" assignee="dongming" creator="dongming" type="10004" summary="PTE excessive log message with getPeers()" priority="3" resolution="10000" status="6" created="2018-08-03 15:04:50.0" updated="2018-08-08 16:26:24.0" resolutiondate="2018-08-08 16:26:24.0" votes="0" watches="1" workflowId="43767"> <description><! CDATA With  fabric-ca-client@1.3.0-snapshot.14  fabric-client@1.3.0-snapshot.14,Â   channel.getPeers() returns message as follow:  info:  PTE 0 main : stdout: info:  PTE 0 exec :  Nid:chan:org:id=0:testorgschannel1:org1:0 assignThreadOrgAnchorPeer  Peers: _mspid=undefined, _name=testorgschannel1, , _anchor_peers=  , , _kafka_brokers=  , _keySize=256, _hashAlgo=SHA2, domain=null, , _eventsCount=0, _maxListeners=undefined, domain=null, , _eventsCount=0, _maxListeners=undefined, silent=false, raw=false, name=console, formatter=undefined, level=undefined, handleExceptions=false, exceptionsLevel=error, humanReadableUnhandledException=false, json=false, colorize=true, prettyPrint=false, timestamp=false, showLevel=true, label=null, logstash=false, depth=null, align=false, error=true, debug=true, eol= , _onError=function () \{  native code  }, _names= console , padLevels=false, error=0, warn=1, info=2, verbose=3, debug=4, silly=5, error=function () { if (arguments.length > 0) { arguments 0  = ' ' + loggerName + ' : ' + arguments 0 ; }  f.apply(context, arguments); }, warn=function () { if (arguments.length > 0) { arguments 0  = ' ' + loggerName + ' : ' + arguments 0 ; }  f.apply(context, arguments); }, info=function () { if (arguments.length > 0) { arguments 0  = ' ' + loggerName + ' : ' + arguments 0 ; }  f.apply(context, arguments); }, verbose=function (msg) { // build argument list (level, msg, ...  string interpolate ,  \{metadata} ,  callback ) var args =  level .concat(Array.prototype.slice.call(arguments)); target.log.apply(target, args); }, debug=function () { if (arguments.length > 0) { arguments 0  = ' ' + loggerName + ' : ' + arguments 0 ; }  f.apply(context, arguments); }, silly=function (msg) { // build argument list (level, msg, ...  string interpolate ,  \{metadata} ,  callback ) var args =  level .concat(Array.prototype.slice.call(arguments)); target.log.apply(target, args); }, id=null, level=info, emitErrs=false, stripColors=false, exitOnError=true, , , rewriters=  , filters=  , _dir=/tmp/hfc-test-kvs_0_PeerOrg1, superClass=class extends api.KeyValueStore {  /** * constructor * * @param \{Object} options contains a single property <code>path</code> which points to the top-level directory * for the store */ constructor(options) { logger.debug('constructor', \{ options: options });  if (!options || !options.path) { throw new Error('Must provide the path to the directory to hold files for the store.'); }  // Create the keyValStore instance super();  var self = this; this._dir = options.path; return new Promise(function (resolve, reject) { fs.mkdirs(self._dir, function (err) { if (err) { logger.error('constructor, error creating directory, code: %s' , err.code); return reject(err); } return resolve(self); }); }); }  getValue(name) { logger.debug('getValue', \{ key: name });  var self = this;  return new Promise(function (resolve, reject) { var p = path.join(self._dir, name); fs.readFile(p, 'utf8', function (err, data) { if (err) { if (err.code !== 'ENOENT') { return reject(err); } else { return resolve(null); } } return resolve(data); }); }); }  setValue(name, value) { logger.debug('setValue', \{ key: name });  var self = this;  return new Promise(function (resolve, reject) { var p = path.join(self._dir, name); fs.writeFile(p, value, function (err) { if (err) { reject(err); } else { return resolve(value); } }); }); } }, path=/tmp/hfc-test-kvs_0_PeerOrg1, _getKeyStore=function () { const CKS = require('./impl/CryptoKeyStore.js');  const self = this; return new Promise((resolve, reject) => { if (self._store === null) { self.logger.debug(util.format('This class requires a CryptoKeyStore to save keys, using the store: %j', self._storeConfig));  CKS(self._storeConfig.superClass, self._storeConfig.opts) .then((ks) => { self.logger.debug('_getKeyStore returning ks'); self._store = ks; return resolve(self._store); }).catch((err) => { reject(err); }); } else { self.logger.debug('_getKeyStore resolving store'); return resolve(self._store); } });  }, _curveName=secp256r1, type=short, negative=0, words= 67108863, 67108863, 67108863, 262143, 0, 0, 0, 1024, 67043328, 4194303, 0 , length=10, red=null, $ref=$ 0  "_channel"  "_clientContext"  "_cryptoSuite"  "_ecdsaCurve"  "curve"  "p" , prime=null, shift=260, negative=0, words= 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , length=11, red=null, negative=0, words= 768, 0, 66060288, 67108863, 67108859, 67108799, 67108863, 66584575, 16777215, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , length=10, $ref=$ 0  "_channel"  "_clientContext"  "_cryptoSuite"  "_ecdsaCurve"  "curve"  "red" , negative=0, words= 0, 12, 67108352, 32767, 2097152, 0, 67108861, 255, 67100672, 262143 , length=10, red=null, negative=0, words= 67108863, 67108863, 67108863, 66846719, 67108863, 67108863, 67108863, 67106815, 65535, 62914560, 0 , length=10, red=null, negative=0, words= 0 , length=1, $ref=$ 0  "_channel"  "_clientContext"  "_cryptoSuite"  "_ecdsaCurve"  "curve"  "red" , negative=0, words= 16, 0, 0, 62914560, 67108863, 67108863, 67108863, 67092479, 1048575, 0, 0 , length=9, $ref=$ 0  "_channel"  "_clientContext"  "_cryptoSuite"  "_ecdsaCurve"  "curve"  "red" , negative=0, words= 32, 0, 0, 58720256, 67108863, 67108863, 67108863, 67076095, 2097151, 0, 0 , length=9, $ref=$ 0  "_channel"  "_clientContext"  "_cryptoSuite"  "_ecdsaCurve"  "curve"  "red" , negative=0, words= 6497617, 41070783, 32001851, 45522014, 62711546, 67108863, 67108863, 1023, 67043328, 4194303, 0 , length=10, red=null, $ref=$ 0  "_channel"  "_clientContext"  "_cryptoSuite"  "_ecdsaCurve"  "curve" , type=affine, step=4, points= $ref=$ 0  "_channel"  "_clientContext"  "_cryptoSuite"  "_ecdsaCurve"  "curve"  "g" , $ref=$ 0  "_channel"  "_clientContext"  "_cryptoSuite"  "_ecdsaCurve"  "curve" , type=affine, precomputed=null, negative=0, words= 7321605, 2987055, 40599691, 20709259, 25701895, 34592037, 53443628, 29942139, 921659, 1267954, 5985795, 23846700, 15347602, 7090906, 28474176, 8931200, 49294835, 11581115, 238368, 3246789 , length=10, $ref=$ 0  "_channel"  "_clientContext"  "_cryptoSuite"  "_ecdsaCurve"  "curve"  "red" , negative=0, words= 35912118, 7297354, 25686769, 37405401, 57084977, 23083640, 6437809, 8912241, 52829950, 1292254, 50818772, 16908648, 6428529, 40457592, 41599142, 18666950, 52576144, 60462591, 28078227, 1087445 , length=10, $ref=$ 0  "_channel"  "_clientContext"  "_cryptoSuite"  "_ecdsaCurve"  "curve"  "red" , inf=false, $ref=$ 0  "_channel"  "_clientContext"  "_cryptoSuite"  "_ecdsaCurve"  "curve" , type=affine, precomputed=null, negative=0, words= 43282375, 37743013, 23939181, 34763497, 17808493, 63793237, 21118608, 25887631, 23268825, 3208838, 1100514, 56887945, 65662982, 24337302, 51506363, 46508542, 54949895, 57261259, 16586609, 2457728 , length=10, $ref=$ 0  "_channel"  "_clientContext"  "_cryptoSuite"  "_ecdsaCurve"  "curve"  "red" , negative=0, words= 64346291, 66502899, 10872435, 9840511, 7359356, 9180840, 39329781, 60092851, 45880533, 2520359, 3567724, 34021376, 39477777, 48249459, 4765140, 1647733, 58815125, 594977, 52701986, 3188619 , length=10, $ref=$ 0  "_channel"  "_clientContext"  "_cryptoSuite"  "_ecdsaCurve"  "curve"  "red" , inf=false, $ref=$ 0  "_channel"  "_clientContext"  "_cryptoSuite"  "_ecdsaCurve"  "curve" , type=affine, precomputed=null, negative=0, words= 11754020, 46372525, 47146866, 7175082, 30979584, 24008192, 58516601, 7769251, 44572600, 2655156, 2608851, 1481207, 52305463, 30385450, 36190313, 61245857, 22002620, 15118050, 55112042, 3439937 ,  ></description> </Issue>
