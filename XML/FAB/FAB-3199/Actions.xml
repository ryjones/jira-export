<Action id="24372" issue="15786" author="mastersingh24" type="comment" body="I don&apos;t think we need to call CSCC.  We should be able to register a callback / handler function on the configtx manager.  We do this for gossip and TLS already " created="2017-05-25 23:09:19.0" updateauthor="mastersingh24" updated="2017-05-25 23:09:19.0"/>
<Action id="24506" issue="15786" author="binhn" type="comment" created="2017-05-26 19:24:38.0" updateauthor="binhn" updated="2017-05-26 19:34:18.0"> <body><! CDATA +1  In review CR  https://gerrit.hyperledger.org/r/#/c/8403   ></body> </Action>
<Action id="24551" issue="15786" author="c0rwin" type="comment" created="2017-05-27 21:48:53.0" updateauthor="c0rwin" updated="2017-05-27 21:48:53.0"> <body><! CDATA {quote} I don't think we need to call CSCC.  We should be able to register a callback / handler function on the configtx manager.  We do this for gossip and TLS already  {quote}  I think that I'd agree with this approach especially keeping in mind that configuration manager already takes care of updating msp and gossip with callbacks upon configuration update.  {code} 	gossipEventer := service.GetGossipService().NewConfigEventer()  	gossipCallbackWrapper := func(cm configtxapi.Manager) { 		gossipEventer.ProcessConfigUpdate(&chainSupport{ 			Manager:     cm, 			Application: configtxInitializer.ApplicationConfig(), 		}) 		service.GetGossipService().SuspectPeers(func(identity api.PeerIdentityType) bool { 			// TODO: this is a place-holder that would somehow make the MSP layer suspect 			// that a given certificate is revoked, or its intermediate CA is revoked. 			// In the meantime, before we have such an ability, we return true in order 			// to suspect ALL identities in order to validate all of them. 			return true 		}) 	}  	trustedRootsCallbackWrapper := func(cm configtxapi.Manager) { 		updateTrustedRoots(cm) 	}  	configtxManager, err := configtx.NewManagerImpl( 		envelopeConfig, 		configtxInitializer, 		  func(cm configtxapi.Manager){gossipCallbackWrapper, trustedRootsCallbackWrapper}, 	) 	if err != nil { 		return err 	}  	// TODO remove once all references to mspmgmt are gone from peer code 	mspmgmt.XXXSetMSPManager(cid, configtxManager.MSPManager()) {code}  ></body> </Action>
<Action id="24993" issue="15786" author="jyellick" type="comment" created="2017-06-01 18:51:47.0" updateauthor="jyellick" updated="2017-06-01 18:51:47.0"> <body><! CDATA Are we certain we even want to keep these two methods?  {noformat} 	UpdateConfigBlock string = "UpdateConfigBlock" 	GetConfigBlock    string = "GetConfigBlock" {noformat}  The only consumer I found of {{GetConfigBlock}} was {{peer/chaincode/common.go}} the {{GetOrdererEndpointOfChain}} method.  Here, the config block is retrieved, a new manager is constructed, the config block is fed in and parsed, and finally the resulting config is read.  This method probably should simply be retrieving the existing config manager, and querying the config.  The existance of the {{GetConfigBlock}} method seems to encourage users to re-parse configuration which has already been parsed, so seems to invite bad patterns like {{GetOrdererEndpointOfChain}} above.  And as best as I can tell, there are currently no consumers of {{UpdateConfigBlock}}.  My suggestion would be to remove these, rather than update the code to call them.   ></body> </Action>
<Action id="25020" issue="15786" author="christopherferris" type="comment" body="This has received the requisite votes to proceed, but  ~jyellick  has some reasonable feedback that should be considered (IMO).  ~C0rWin  Please work with Jason. Thanks I&apos;ll remove from review-needed." created="2017-06-01 22:03:07.0" updateauthor="christopherferris" updated="2017-06-01 22:03:07.0"/>
<Action id="25036" issue="15786" author="c0rwin" type="comment" created="2017-06-01 22:54:28.0" updateauthor="c0rwin" updated="2017-06-01 22:54:28.0"> <body><! CDATA  ~jyellick  I'd agree that {{UpdateConfigBlock}} API should be removed from the CSCC API, while I think that {{GetConfigBlock}} could not be changed to simply retrieve configuration manager instead of configuration block, simply because the only change in code is peer cli which creates it again to parse the block. CSCC is a public API which invoked via system chaincode invocation and finding usages in the code it not enough to take a decision of removing/changing {{GetConfigBlock}} API.  Will update my CR accordingly.  ></body> </Action>
<Action id="25044" issue="15786" author="c0rwin" type="comment" body="CR updated: https://gerrit.hyperledger.org/r/#/c/8403/" created="2017-06-01 23:22:54.0" updateauthor="c0rwin" updated="2017-06-01 23:22:54.0"/>
<Action id="25062" issue="15786" author="binhn" type="comment" body=" ~C0rWin   ~jyellick   That is correct. CSCC.GetConfigBlock is an external API for App/SDK to retrieve the current configuration block on a channel. " created="2017-06-02 03:00:40.0" updateauthor="binhn" updated="2017-06-02 03:00:40.0"/>
<Action id="25080" issue="15786" author="jonathanlevi" type="comment" body="As noted in Gerrit,  https://gerrit.hyperledger.org/r/#/c/8403  looks good to merge (at least to me), in case we all agree on the behavior functionality. Are we there?" created="2017-06-02 11:05:38.0" updateauthor="jonathanlevi" updated="2017-06-02 11:05:38.0"/>
<Action id="25113" issue="15786" author="jyellick" type="comment" created="2017-06-02 14:25:36.0" updateauthor="jyellick" updated="2017-06-02 14:25:36.0"> <body><! CDATA Thanks for the explanation, although I'll maintain we should not be invoking this call internally within the peer, it makes sense to supply {{GetConfigBlock}} as an external API for the App/SDK.  My primary concern was the {{UpdateConfigBlock}} call, which I see has been removed in  ~C0rWin 's CR.  I can support this as is.  ></body> </Action>
<Action id="25114" issue="15786" author="jonathanlevi" type="comment" body=" ~jyellick  Thank you, can you please formally vote? (top right)" created="2017-06-02 14:27:34.0" updateauthor="jonathanlevi" updated="2017-06-02 14:27:34.0"/>
