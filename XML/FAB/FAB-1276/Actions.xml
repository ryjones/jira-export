<Action id="20050" issue="13610" author="mastersingh24" type="comment" body=" ~adc  Would you mind adding the details about the actual issue and then the solution?  If you can provide a fairly detailed explanation of the solution it will help the various SDKs understand the changes they&apos;ll need to implement" created="2016-12-11 18:20:55.0" updateauthor="mastersingh24" updated="2016-12-11 18:20:55.0"/>
<Action id="20413" issue="13610" author="binhn" type="comment" created="2017-01-18 16:39:48.0" updateauthor="binhn" updated="2017-01-18 16:39:48.0"> <body><! CDATA I took the content from the commit https://gerrit.hyperledger.org/r/#/c/2983/  {quote}ECDSA signatures do not have unique representation and this can facilitate replay attacks and more. In order to have a unique representation, this change-set forses BCCSP to generate and accept only signatures with low-S. Bitcoin has also addressed this issue with the following BIP: https://github.com/bitcoin/bips/blob/master/bip-0062.mediawiki Before merging this change-set, we need to ensure that client-sdks generates signatures properly in order to avoid massive rejection of transactions.  {quote}  ></body> </Action>
<Action id="20415" issue="13610" author="angelo.decaro" type="comment" created="2017-01-18 16:49:30.0" updateauthor="angelo.decaro" updated="2017-01-18 16:49:30.0"> <body><! CDATA Thanks  ~binhn .  ~mastersingh24 , I apologize for not having put the details in before.  So, essentially, an ECDSA signature consists of two elements usually called R and S. By the properties of the elliptic curve, fixed R, there are two possible values that S can take that satisfy the signature verification algorithm. Of course, this does not help breaking the security of the signature scheme itself but may cause problems to protocols that uses it. An example is the malleability of transactions that can result in replay attacks.   One way to fix it is to decide which value among the two possible values that S can take is to be enforced. What Bitcoin has also done is go for what is called low-S values. Meaning that if S is larger than half of the order of the elliptic curve group, it is rejected. At signing time, if the generated S is larger than the modulo halved then, S is reduced.  This is enough to avoid malleability :)   ></body> </Action>
