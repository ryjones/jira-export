<Action id="35888" issue="24800" author="kchristidis" type="comment" created="2017-12-05 22:42:35.0" updateauthor="kchristidis" updated="2017-12-05 22:42:35.0"> <body><! CDATA  ~sanchezl : Let me know if you spot any issues with the description above. I'm also interested in any tools/APIs that we could use to confirm that the Kafka broker / ZK node is a working part of the cluster / ensemble. What I found above is the result of a cursory search, but you may have given it a more thorough look in the past, and thus have better tooling in mind.   ~jeffgarratt : We will need to update {{upgrade.feature}}  accordingly. Making it so that each of the steps above is _actually_ implemented in {{fabric-prototype}} however may be an overkill, and beyond your domain of concern. In this case, we should use the feature to at least _allude_ to the right process (i.e. have the step implementations be no-ops). However, if we do so, how do we ensure that the feature passes? Do we sleep for enough time between each step and _hope_ that the step has completed successfully? Seems unorthodox. Let me know your thoughts.  ></body> </Action>
<Action id="35896" issue="24800" author="jeffgarratt" type="comment" body="Updated in  https://github.com/jeffgarratt/fabric-prototype  to place 6s sleeps after each shutdown of Kafka and ZK instances.  Then ran successfully 3 times consecutively.  Will discuss in the AM with  ~kchristidis " created="2017-12-06 02:12:43.0" updateauthor="jeffgarratt" updated="2017-12-06 02:12:43.0"/>
<Action id="37867" issue="24800" author="grapebaba" type="comment" body="I faced this issue too on kubernetes " created="2017-12-30 16:32:34.0" updateauthor="grapebaba" updated="2017-12-30 16:32:34.0"/>
<Action id="37988" issue="24800" author="bjwswang" type="comment" body="Met same problem in IBM Blockchain Platform update procedures... After we upgrade our IBP version, we need to shut down all of the containers , including peers,orderer,kafka,zookeeper ... When we finished , we tried to recover our network  by sending new transactions , but we found SERVICE_UNAVAILABLE in peers and  error log just like this issue in kafka " created="2018-01-04 02:38:42.0" updateauthor="bjwswang" updated="2018-01-04 02:38:42.0"/>
<Action id="38204" issue="24800" author="scottz" type="comment" body=" ~bjwswang  I think the answer is that you should NOT stop all the kafka containers at once when upgrading. That is not a rolling upgrade. We can talk about that separately, but I believe we are already planing to document the recommended upgrade procedures for fabric and its use of kafka with this JIRA task. In addition, would you be interested in creating a separate JIRA to ask for some documentation of best practices such as the recommended steps to take when trying to limit data loss during recovery, after finding yourself in a situation where more than &apos;f&apos; kafka brokers got stopped at once for any reason, gracefully or otherwise." created="2018-01-04 22:17:00.0" updateauthor="scottz" updated="2018-01-04 22:17:00.0"/>
<Action id="38309" issue="24800" author="clayton sims" type="comment" body="Change from subtask to task and moved to doc after talking to kostas and luis." created="2018-01-08 19:32:37.0" updateauthor="clayton sims" updated="2018-01-08 19:32:37.0"/>
<Action id="38529" issue="24800" author="sanchezl" type="comment" created="2018-01-12 21:59:04.0" updateauthor="sanchezl" updated="2018-01-12 21:59:04.0"> <body><! CDATA • The problem described in the issue should be resolved in Kafka 0.11 and later by  KIP-101|https://cwiki.apache.org/confluence/display/KAFKA/KIP-101+-+Alter+Replication+Protocol+to+use+Leader+Epoch+rather+than+High+Watermark+for+Truncation .  • I have updated the  draft upgrade doc|https://docs.google.com/document/d/16ZogU_InYeLZZ8lTGNdBhd4Iosi7T4KP3ppFSEUcI30/edit?usp=sharing  and the Fabric documentation with the information needed when upgrading orderer (with or without a corresponding Kafka broker upgrade).  • The Kafka upgrade process is documented in  the official Apache Kafka docs|https://kafka.apache.org/0101/documentation.html#upgrade  and I don't think we need to repeat them in our own documentation. Orderer specific considerations to be aware of when upgrading either the orderer binary, orderer docker image, or the Kafka brokers are documented in the links found in the previous bullet.     ></body> </Action>
