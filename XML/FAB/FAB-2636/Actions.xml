<Action id="22133" issue="15203" author="denyeart" type="comment" body=" ~C0rWin Can you be more specific on what validation? Is there existing validation logic? Is this must-do in v1.0.0, that is, is it really a bug if not done, or is this an enhancement that could come in 1.1?" created="2017-04-11 20:07:14.0" updateauthor="denyeart" updated="2017-04-11 20:07:14.0"/>
<Action id="22166" issue="15203" author="c0rwin" type="comment" body=" ~denyeart  Currently peer accepts genesis block via join channel command, I guess there is need to verify orderer signature and ensure this is indeed same block as at orderer service. Currently block accepted without additional checks, as I stated in the description once peer gets block it creates the ledger and commits the block, at the time item was opened no one passed validation on the genesis block, I&apos;d guess validation suppose to be the same as for any other configuration blocks. While I assume there is might be potential chicken and the egg problem, since genesis block includes information on how to validate the block." created="2017-04-12 00:18:41.0" updateauthor="c0rwin" updated="2017-04-12 00:18:41.0"/>
<Action id="24860" issue="15203" author="c0rwin" type="comment" body="Per agreement with  ~binhn  targeting this for post v1.0." created="2017-05-31 21:18:53.0" updateauthor="c0rwin" updated="2017-05-31 21:18:53.0"/>
<Action id="30628" issue="15203" author="muralisr" type="comment" body=" ~C0rWin  is this still a problem ... let me assign it to you for now." created="2017-09-07 17:48:40.0" updateauthor="muralisr" updated="2017-09-07 17:48:40.0"/>
<Action id="33251" issue="15203" author="jeffgarratt" type="comment" body=" ~C0rWin  should this remain open?" created="2017-10-26 19:15:55.0" updateauthor="jeffgarratt" updated="2017-10-26 19:15:55.0"/>
<Action id="33268" issue="15203" author="c0rwin" type="comment" created="2017-10-26 20:26:51.0" updateauthor="c0rwin" updated="2017-10-26 20:26:51.0"> <body><! CDATA Well, currently peer accepts genesis block, w/o verifying whenever it matches genesis block at ordering service. Not sure this is a real concerns since next block hash will have to match to the previous one. But I think for integrity we need to take care of this and do this extra check.   ></body> </Action>
<Action id="33809" issue="15203" author="c0rwin" type="comment" body="Thinking of it a bit more, there is no actual point of verifying the genesis block upon join channel command, since if one would like to provide tampered genesis block it will be also able to provide faked ordering service endpoint. For now, I&apos;d prefer to close this ticket." created="2017-11-01 13:47:20.0" updateauthor="c0rwin" updated="2017-11-01 13:47:20.0"/>
<Action id="51398" issue="15203" author="denyeart" type="comment" created="2018-09-29 04:40:29.0" updateauthor="denyeart" updated="2018-09-29 04:40:29.0"> <body><! CDATA  ~C0rWin  I think this is a problem, I will re-open.  I believe we have a case of it here:   https://stackoverflow.com/questions/52562232/hyperledger-fabric-on-aws-peers-get-crash-after-anchor-peer-update      I've also reproduced the problem.  I did trial1 where I create a channel and join a peer using genesis block1.  Then I do a trial2 and create same channel with a slightly different genesis block2.  But I join peer with old genesis block1.  Everything appears ok, but the join should fail per this bug description.  I believe that is what is happening in the stackoverflow.  In v1.3 extra validation was added to compare prior block hash at commit time.  So when peer gets block1 and notices the hashes don't match, in v1.3 it panics with error:  2018-09-29 00:00:34.665 EDT  gossip/state  commitBlock -> ERRO 02d Got error while committing(unexpected Previous block hash. Expected PreviousHash =  080e75dcd6c9b149154586061e10e58f17a62a92b60414608f119eb7fcd864c9 , PreviousHash referred in the latest block=  7d6ac1e64137f95410962ef4356ad4306feda67c6e63828227cdb29f9bcfe58a   So actually, in v1.3 and beyond we will protect against this case upon receiving next block.  But it would still be good to do the verification per the bug description at join time, so that user can be alerted of their error at the time it happens, otherwise they will not understand the failure at block1, as in the case of stackoverflow scenario.  ></body> </Action>
<Action id="64075" issue="15203" author="jyellick" type="comment" body=" ~C0rWin  are you still working on this?" created="2019-09-24 16:22:38.0" updateauthor="jyellick" updated="2019-09-24 16:22:38.0"/>
<Action id="64102" issue="15203" author="c0rwin" type="comment" body=" ~jyellick  nope, it&apos;s not my current focus." created="2019-09-24 21:47:18.0" updateauthor="c0rwin" updated="2019-09-24 21:47:18.0"/>
<Action id="66494" issue="15203" author="guillaumecisco" type="comment" created="2020-01-07 10:03:29.0" updateauthor="guillaumecisco" updated="2020-01-07 10:03:29.0"> <body><! CDATA Got the same issue when working with the CHFA course... I had to refetch the genesis.block for the peers of my new organization to join correctly the channel. Using the primarily fetched genesis.block for the peers of the first org triggered this error:   2018-09-29 00:00:34.665 EDT  gossip/state  commitBlock -> ERRO 02d Got error while committing(unexpected Previous block hash. Expected PreviousHash =  080e75dcd6c9b149154586061e10e58f17a62a92b60414608f119eb7fcd864c9 , PreviousHash referred in the latest block=  7d6ac1e64137f95410962ef4356ad4306feda67c6e63828227cdb29f9bcfe58a   ></body> </Action>
<Action id="70684" issue="15203" author="manish-sethi" type="comment" body=" ~denyeart  - It&apos;s been open for long. As this will mostly be a problem in a test setup, perhaps that&apos;s the reason it has not received enough attention. Can you take a look at this?" created="2020-11-16 18:51:59.0" updateauthor="manish-sethi" updated="2020-11-16 18:51:59.0"/>
<Action id="70766" issue="15203" author="denyeart" type="comment" created="2020-11-19 23:56:18.0" updateauthor="denyeart" updated="2020-11-19 23:56:18.0"> <body><! CDATA As of v1.3, if block1 (from orderer) does not have reference to peer's block0 hash (from join operation), then peer will not process block1 and panics. While not ideal, there is remediation possible since this issue was first opened. Peer admin can now 'pause' the bad channel so that it doesn't attempt to process subsequent blocks. And in a future story FAB-17801 it will be possible to unjoin a channel. Therefore if a peer admin does provide the wrong genesis block by accident, it will be possible to resolve the situation. I think this is an acceptable resolution, rather than adding significant new logic to the join operation. I'll close the issue.   ></body> </Action>
