<Action id="41688" issue="28490" author="pd93" type="comment" created="2018-03-15 16:18:03.0" updateauthor="pd93" updated="2018-03-15 16:18:03.0"> <body><! CDATA {color:#444444}My initial thought was that the best way to do this would be to add a step to the generated {color}{color:#444444}`{color}{color:#444444}{{Dockerfile}}{color}{color:#444444}`{color}{color:#444444} which will run the {color}{color:#444444}`{color}{color:#444444}{{dep ensure}}{color}{color:#444444}`{color}{color:#444444} command.{color}  ~muralisrini  has previous stated on RC {color:#444444}that this would only effect the CLI, as the SDKs have their own methods for packaging the chaincode. An alternative method would have to be implemented for them.{color}  {color:#444444}I managed to get down to the {color} Golang Platform Dockerfile|https://github.com/hyperledger/fabric/blob/master/core/chaincode/platforms/golang/platform.go {color:#444444}, but I can't find where the chaincode files are copied in - obviously we need to run this command {color}{color:#444444}*{color}*after*{color:#444444}*{color}{color:#444444} the files are copied in.{color}  {color:#444444}There is also the added complexity that we don't want to run {color}{color:#444444}`{color}{color:#444444}{{dep ensure}}{color}{color:#444444}`{color}{color:#444444} if there are no {color}{color:#444444}`{color}{color:#444444}{{Gopkg.lock}}{color}{color:#444444}`{color}{color:#444444} or {color}{color:#444444}`{color}{color:#444444}{{Gopkg.toml}}{color}{color:#444444}`{color}{color:#444444} files. We'll need to test for the presence of these files and make a decision as to whether or not we need to add the {color}{color:#444444}`{color}{color:#444444}{{dep ensure}}{color}{color:#444444}`{color}{color:#444444} command to the {color}{color:#444444}`{color}{color:#444444}{{Dockerfile}}{color}{color:#444444}`{color}{color:#444444}.{color}  ></body> </Action>
<Action id="41981" issue="28490" author="denyeart" type="comment" body="Many issues were bulk moved from v1.0 or v1.1 to v1.2 as part of a cleanup effort, and many of these issues are not high priority or actually intended to be worked for v1.2.  This issue is being bulk moved to Future.  If the issue is indeed high priority for v1.2 and/or very low effort, please move back to v1.2 and add a comment to indicate rationale." created="2018-03-23 05:07:49.0" updateauthor="denyeart" updated="2018-03-23 05:07:49.0"/>
<Action id="45529" issue="28490" author="pd93" type="comment" created="2018-06-05 13:56:15.0" updateauthor="pd93" updated="2018-06-05 13:56:15.0"> <body><! CDATA I'd really like to see this completed for v1.3/v2.0. It's a shame that it won't make it into v1.2, as I feel its a relatively simple feature to add. Most of the complexity for this comes from the fact that it must be implemented in the SDKsÂ *and* CLI.  Other than that, it's just simply running a single command (dep ensure) during the chaincode installation (if the .toml/.lock files are present).  It also occurs to me that now that Fabric is supporting Node.js chaincode, there may be a similar problem with the node_modules folder? Though I haven't experimented with this myself. Golang and Node chaincodes should probably work the same way with regards to 'vendoring' or 'installing' dependencies.  ></body> </Action>
<Action id="45568" issue="28490" author="pd93" type="comment" created="2018-06-06 12:14:00.0" updateauthor="pd93" updated="2018-06-06 12:14:00.0"> <body><! CDATA In addition to the above, I've been reading about the developments in vgo lately, now that its proposal has been accepted and it will replace dep (around end Jan 19 for Go v1.12). Here are some additional thoughts: * 'vgo' does not use Gopkg.lock and Gopkg.toml files. It uses a single go.mod file instead. * 'vgo' is not a separate tool like 'dep', it is a drop-in replacement for the existing 'go' command. * 'vgo build' will build the chaincode as 'go build' does now, but it will also complete the dependency checks at the same time - This effectively, completes this CR for us!  I'd really like to see some of these changes made for Fabric v2. Especially as we can expect a preview of vgo to be included in the Go v1.11 release around the end of July 18.  ></body> </Action>
<Action id="51026" issue="28490" author="denyeart" type="comment" created="2018-09-23 20:18:14.0" updateauthor="denyeart" updated="2018-09-23 20:18:14.0"> <body><! CDATA Bulk Jira update: For remaining tasks with FixVersion v1.3.0, the Reporter should update to v1.4.0 or Future, or Close. Add a comment with any clarification needed, so that release managers can close out v1.3.0 release cleanly.  ></body> </Action>
<Action id="51913" issue="28490" author="denyeart" type="comment" body="Chaincode refactoring is planned for 2.0." created="2018-10-09 14:17:46.0" updateauthor="denyeart" updated="2018-10-09 14:17:46.0"/>
<Action id="51965" issue="28490" author="pd93" type="comment" body="This CR can be fundamentally changed now that vgo is a thing. It works pretty well as an experiment in v1.11 and I expect v1.12 will be around the corner, if not released, by the time Fabric v2 is being planned. In Go v1.12 , &apos;vgo&apos; will be the standard way of building code and no changes will really be required to make this work. When the chaincode is packaged up, go build will be run and all the dependencies will be downloaded at build time. This will cease the requirement to vendor dependencies during development (Though this is still possible if desired)." created="2018-10-10 08:45:10.0" updateauthor="pd93" updated="2018-10-10 08:45:10.0"/>
<Action id="55691" issue="28490" author="denyeart" type="comment" body=" ~sykesm  Assigning to you so that you can comment and/or factor into your other go chaincode work items." created="2019-01-15 21:47:20.0" updateauthor="denyeart" updated="2019-01-15 21:47:20.0"/>
<Action id="55694" issue="28490" author="sykesm" type="comment" created="2019-01-15 22:41:55.0" updateauthor="sykesm" updated="2019-01-15 22:41:55.0"> <body><! CDATA Unfortunately, this does not align with our current direction for chaincode.  Our goal is to extract the responsibility for building chaincode from the peer core as well as the docker requirement. Basically, the peer can't be good at building chaincode in all of the various permutations that are available and, frankly, that really isn't its job.  In terms of module support, while we're transitioning to go 1.12, we are likely to use the presence of a go.mod to indicate that the build should unset the GOPATH.  I will eventually withdraw this story with a reference to the epic(s) that are to be created in 2.x.  ></body> </Action>
<Action id="59045" issue="28490" author="michaelwang" type="comment" created="2019-04-09 05:54:18.0" updateauthor="michaelwang" updated="2019-04-09 05:54:18.0"> <body><! CDATA With this item(https://jira.hyperledger.org/browse/FAB-13582)++  The chaincode will be built outside of the peer and all the dependencies could be managed well. This issue will be gone.  ></body> </Action>
<Action id="65941" issue="28490" author="denyeart" type="comment" body="FAB-15732 was implemented for v2.0 and users are now expected to vendor their own chaincode prior to deployment, therefore this work item is no longer applicable." created="2019-12-02 21:35:51.0" updateauthor="denyeart" updated="2019-12-02 21:35:51.0"/>
