<Issue id="17563" key="FAB-4416" number="4416" project="10002" reporter="adnanchoudhury" assignee="adnanchoudhury" creator="adnanchoudhury" type="10002" summary="Daily ledger perf tests failing" priority="2" resolution="10000" status="6" created="2017-06-06 14:19:18.0" updated="2018-07-20 14:13:10.0" resolutiondate="2017-10-30 16:01:26.0" votes="0" watches="1" workflowId="38858" security="10001"> <description><! CDATA output:   {code:java} 01:21:11  generated xml file: /w/workspace/Ledger_tests/gopath/src/github.com/hyperledger/fabric/test/regression/daily/results_ledger_lte.xml  01:21:11 =================================== FAILURES =================================== 01:21:11 ____________ perf_goleveldb.test_FAB_3790_VaryNumParallelTxPerChain ____________ 01:21:11  01:21:11 self = <ledger_lte.perf_goleveldb testMethod=test_FAB_3790_VaryNumParallelTxPerChain> 01:21:11  01:21:11     def test_FAB_3790_VaryNumParallelTxPerChain(self): 01:21:11         ''' 01:21:11              In this Performance test, we observe the the performance (time to 01:21:11              complete a set number of Ledger operations) of the Ledger component, 01:21:11              with goleveldb as the state database. We vary the number of parallel 01:21:11              transactions per chain and observe the performance. 01:21:11      01:21:11              Passing criteria: all subtests (8) completed successfully 01:21:11             ''' 01:21:11         result = subprocess.check_output( 01:21:11                 "./runbenchmarks.sh varyNumParallelTxPerChain", 01:21:11                 shell=True, stderr=subprocess.STDOUT, 01:21:11                 cwd='../../tools/LTE/scripts') 01:21:11         completion_count = result.count("PASS") 01:21:11 >       self.assertEqual(completion_count, 8) 01:21:11 E       AssertionError: 16 != 8 01:21:11  01:21:11 ledger_lte.py:20: AssertionError 01:21:11 __________________ perf_goleveldb.test_FAB_3795_VaryNumChain ___________________ 01:21:11  01:21:11 self = <ledger_lte.perf_goleveldb testMethod=test_FAB_3795_VaryNumChain> 01:21:11  01:21:11     def test_FAB_3795_VaryNumChain(self): 01:21:11         ''' 01:21:11              In this Performance test, we observe the the performance (time to 01:21:11              complete a set number of Ledger operations) of the Ledger component, 01:21:11              with goleveldb as the state database. We vary the number of chains 01:21:11              (ledgers). 01:21:11      01:21:11              Passing criteria: all subtests (8) completed successfully 01:21:11             ''' 01:21:11         result = subprocess.check_output( 01:21:11                 "./runbenchmarks.sh varyNumChain", 01:21:11                 shell=True, stderr=subprocess.STDOUT, 01:21:11                 cwd='../../tools/LTE/scripts') 01:21:11         completion_count = result.count("PASS") 01:21:11 >       self.assertEqual(completion_count, 8) 01:21:11 E       AssertionError: 0 != 8 01:21:11  01:21:11 ledger_lte.py:36: AssertionError 01:21:11 ________ perf_goleveldb.test_FAB_3798_VaryNumParallelTxWithSingleChain _________ 01:21:11  01:21:11 self = <ledger_lte.perf_goleveldb testMethod=test_FAB_3798_VaryNumParallelTxWithSingleChain> 01:21:11  01:21:11     def test_FAB_3798_VaryNumParallelTxWithSingleChain(self): 01:21:11         ''' 01:21:11              In this Performance test, we observe the the performance (time to 01:21:11              complete a set number of Ledger operations) of the Ledger component, 01:21:11              with goleveldb as the state database. We vary the number of parallel 01:21:11              transactions on a single chain. 01:21:11      01:21:11              Passing criteria: all subtests (8) completed successfully 01:21:11             ''' 01:21:11         result = subprocess.check_output( 01:21:11                 "./runbenchmarks.sh varyNumParallelTxWithSingleChain", 01:21:11                 shell=True, stderr=subprocess.STDOUT, 01:21:11                 cwd='../../tools/LTE/scripts') 01:21:11         completion_count = result.count("PASS") 01:21:11 >       self.assertEqual(completion_count, 8) 01:21:11 E       AssertionError: 16 != 8 01:21:11  01:21:11 ledger_lte.py:52: AssertionError 01:21:11 __________ perf_goleveldb.test_FAB_3799_VaryNumChainWithNoParallelism __________ 01:21:11  01:21:11 self = <ledger_lte.perf_goleveldb testMethod=test_FAB_3799_VaryNumChainWithNoParallelism> 01:21:11  01:21:11     def test_FAB_3799_VaryNumChainWithNoParallelism(self): 01:21:11         ''' 01:21:11              In this Performance test, we observe the the performance (time to 01:21:11              complete a set number of Ledger operations) of the Ledger component, 01:21:11              with goleveldb as the state database. We vary the number of chains 01:21:11              without any parallelism within a single chain. 01:21:11      01:21:11              Passing criteria: all subtests (8) completed successfully 01:21:11             ''' 01:21:11         result = subprocess.check_output( 01:21:11                 "./runbenchmarks.sh varyNumChainWithNoParallelism", 01:21:11                 shell=True, stderr=subprocess.STDOUT, 01:21:11                 cwd='../../tools/LTE/scripts') 01:21:11         completion_count = result.count("PASS") 01:21:11 >       self.assertEqual(completion_count, 8) 01:21:11 E       AssertionError: 0 != 8 01:21:11  01:21:11 ledger_lte.py:68: AssertionError 01:21:11 _______________ perf_goleveldb.test_FAB_3800_VaryNumKeysInEachTX _______________ 01:21:11  01:21:11 self = <ledger_lte.perf_goleveldb testMethod=test_FAB_3800_VaryNumKeysInEachTX> 01:21:11  01:21:11     def test_FAB_3800_VaryNumKeysInEachTX(self): 01:21:11         ''' 01:21:11              In this Performance test, we observe the the performance (time to 01:21:11              complete a set number of Ledger operations) of the Ledger component, 01:21:11              with goleveldb as the state database. We vary the number of keys in 01:21:11              each transaction. 01:21:11      01:21:11              Passing criteria: all subtests (5) completed successfully 01:21:11             ''' 01:21:11         result = subprocess.check_output( 01:21:11                 "./runbenchmarks.sh varyNumKeysInEachTX", 01:21:11                 shell=True, stderr=subprocess.STDOUT, 01:21:11                 cwd='../../tools/LTE/scripts') 01:21:11         completion_count = result.count("PASS") 01:21:11 >       self.assertEqual(completion_count, 5) 01:21:11 E       AssertionError: 0 != 5 01:21:11  01:21:11 ledger_lte.py:115: AssertionError 01:21:11 ___________________ perf_goleveldb.test_FAB_3801_VaryKVSize ____________________ 01:21:11  01:21:11 self = <ledger_lte.perf_goleveldb testMethod=test_FAB_3801_VaryKVSize> 01:21:11  01:21:11     def test_FAB_3801_VaryKVSize(self): 01:21:11         ''' 01:21:11              In this Performance test, we observe the the performance (time to 01:21:11              complete a set number of Ledger operations) of the Ledger component, 01:21:11              with goleveldb as the state database. We vary the size of key-value. 01:21:11      01:21:11              Passing criteria: all subtests (5) completed successfully 01:21:11             ''' 01:21:11         result = subprocess.check_output( 01:21:11                 "./runbenchmarks.sh varyKVSize", 01:21:11                 shell=True, stderr=subprocess.STDOUT, 01:21:11                 cwd='../../tools/LTE/scripts') 01:21:11         completion_count = result.count("PASS") 01:21:11 >       self.assertEqual(completion_count, 5) 01:21:11 E       AssertionError: 10 != 5 01:21:11  01:21:11 ledger_lte.py:83: AssertionError 01:21:11 __________________ perf_goleveldb.test_FAB_3802_VaryBatchSize __________________ 01:21:11  01:21:11 self = <ledger_lte.perf_goleveldb testMethod=test_FAB_3802_VaryBatchSize> 01:21:11  01:21:11     def test_FAB_3802_VaryBatchSize(self): 01:21:11         ''' 01:21:11              In this Performance test, we observe the the performance (time to 01:21:11              complete a set number of Ledger operations) of the Ledger component, 01:21:11              with goleveldb as the state database. We vary the value of the batch 01:21:11              size 01:21:11      01:21:11              Passing criteria: all subtests (4) completed successfully 01:21:11             ''' 01:21:11         result = subprocess.check_output( 01:21:11                 "./runbenchmarks.sh varyBatchSize", 01:21:11                 shell=True, stderr=subprocess.STDOUT, 01:21:11                 cwd='../../tools/LTE/scripts') 01:21:11         completion_count = result.count("PASS") 01:21:11 >       self.assertEqual(completion_count, 4) 01:21:11 E       AssertionError: 8 != 4 01:21:11  01:21:11 ledger_lte.py:99: AssertionError 01:21:11 ___________________ perf_goleveldb.test_FAB_3803_VaryNumTxs ____________________ 01:21:11  01:21:11 self = <ledger_lte.perf_goleveldb testMethod=test_FAB_3803_VaryNumTxs> 01:21:11  01:21:11     def test_FAB_3803_VaryNumTxs(self): 01:21:11         ''' 01:21:11              In this Performance test, we observe the the performance (time to 01:21:11              complete a set number of Ledger operations) of the Ledger component, 01:21:11              with goleveldb as the state database. We vary the number of 01:21:11              transactions carried out. 01:21:11      01:21:11              Passing criteria: all subtests (4) completed successfully 01:21:11             ''' 01:21:11         result = subprocess.check_output( 01:21:11                 "./runbenchmarks.sh varyNumTxs", 01:21:11                 shell=True, stderr=subprocess.STDOUT, 01:21:11                 cwd='../../tools/LTE/scripts') 01:21:11         completion_count = result.count("PASS") 01:21:11 >       self.assertEqual(completion_count, 4) 01:21:11 E       AssertionError: 8 != 4 01:21:11  01:21:11 ledger_lte.py:131: AssertionError 01:21:11 =================== 8 failed, 8 skipped in 39026.55 seconds ==================== {code}  ></description> </Issue>
