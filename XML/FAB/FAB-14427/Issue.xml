<Issue id="38102" key="FAB-14427" number="14427" project="10002" reporter="bur" creator="bur" type="10001" summary="Reduce the use of createTokenKey" priority="3" resolution="10001" status="6" created="2019-02-28 16:45:27.0" updated="2020-01-22 22:32:18.0" resolutiondate="2020-01-22 22:32:18.0" votes="0" watches="1" workflowId="49722"> <description><! CDATA Currently, verifier uses createTokenKey which calls createCompositeKey to build tokenKeys during action validation and commit. createCompositeKey internally validates the input and throws an error in case it can not create a valid CompositeKey.   However, for most transactions, tokenKeys are generated multiple times, first, during validation (check action path), and then again during commit. This looks like unnecessary extra work. In particular, avoiding string concatenation may improve performance.  Also, it seems that during commit the error handling of createTokenKey is never uses, as in presents of an invalid input, it is caught already during check action path.   Proposal: Create tokenKeys during validation and pass them into the commit path of the verify to avoid unnecessary re-creation of the keys including validation.      ></description> </Issue>
