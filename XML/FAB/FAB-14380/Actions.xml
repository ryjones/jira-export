<Action id="57631" issue="38022" author="guoger" type="comment" created="2019-02-27 06:34:05.0" updateauthor="guoger" updated="2019-02-27 06:34:21.0"> <body><! CDATA This is a problem, but could be solved later because I assume to make read-write versioning correct, admins would most likely submit a config, *wait for it to be committed*, before submitting next. Instead of submitting them back-to-back  wdyt  ~kchristidis   ></body> </Action>
<Action id="57662" issue="38022" author="kchristidis" type="comment" body=" ~guoger : Thanks for the write-up. Will discuss during scrum tomorrow and update here with conclusions, and course of action." created="2019-02-27 19:30:09.0" updateauthor="kchristidis" updated="2019-02-27 19:30:09.0"/>
<Action id="57710" issue="38022" author="c0rwin" type="comment" body=" ~guoger  I am missing something, how you can process two configuration transactions simultaneously? I mean you are not supposed to process {{Tx_rm}} before you commit {{Tx_add}}. Not sure that case you describe is valid and if we do allow such situation, I think the problem is somewhat different and current implementation doesn&apos;t really aligned with design doc." created="2019-02-28 11:20:06.0" updateauthor="c0rwin" updated="2019-02-28 11:20:06.0"/>
<Action id="57717" issue="38022" author="guoger" type="comment" created="2019-02-28 12:52:28.0" updateauthor="guoger" updated="2019-02-28 12:52:28.0"> <body><! CDATA  ~C0rWin  What I'm describing here is not really about *processing* a config, instead it's about user *submitting* two config tx back-to-back. {{Tx_rm}} is still processed *after* {{Tx_add}} is committed.    bq. current implementation doesn't really aligned with design doc mind elaborating on this?  ></body> </Action>
<Action id="57724" issue="38022" author="c0rwin" type="comment" body=" ~guoger  read the description again and now realizing you are speaking about the validation part. What am I curious now, is how can you create two back to back config transactions w/o waiting for first one to be committed? I mean you have to maintain config update sequences, no?" created="2019-02-28 13:54:59.0" updateauthor="c0rwin" updated="2019-02-28 13:54:59.0"/>
<Action id="57727" issue="38022" author="guoger" type="comment" body=" ~C0rWin  if the config seq advances, the second one is re-validated  here|https://github.com/hyperledger/fabric/blob/f97797659fe0f7c11ec53ac7af40ad3c29898430/orderer/consensus/etcdraft/chain.go#L822 . However, consenter set check is not part of {{c.support.ProcessConfigMsg}}. The simplest solution i guess is to add it there." created="2019-02-28 14:19:20.0" updateauthor="guoger" updated="2019-02-28 14:19:20.0"/>
<Action id="57728" issue="38022" author="kchristidis" type="comment" created="2019-02-28 14:34:20.0" updateauthor="kchristidis" updated="2019-02-28 14:34:33.0"> <body><! CDATA {quote}The simplest solution i guess is to add it there.{quote}  The {{ProcessConfigMsg}} method is part of the {{msgprocessor}} package and as such, it should be agnostic to the _contents_ of the configuration update. Not sure how this would work then?  ></body> </Action>
<Action id="57730" issue="38022" author="guoger" type="comment" body=" ~kchristidis  ah, by _there_, i didn&apos;t mean {{support.ProcessConfigMsg}}. Instead, i was simply talking about some place around that in chain.go" created="2019-02-28 14:40:46.0" updateauthor="guoger" updated="2019-02-28 14:40:46.0"/>
<Action id="57731" issue="38022" author="kchristidis" type="comment" body="Got it. I&apos;m fine with that fix." created="2019-02-28 14:43:27.0" updateauthor="kchristidis" updated="2019-02-28 14:43:27.0"/>
<Action id="58023" issue="38022" author="guoger" type="comment" body="https://gerrit.hyperledger.org/r/c/29907/" created="2019-03-10 14:49:57.0" updateauthor="guoger" updated="2019-03-10 14:49:57.0"/>
