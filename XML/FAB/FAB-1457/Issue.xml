<Issue id="13866" key="FAB-1457" number="1457" project="10002" reporter="muralisr" assignee="jiangyaoguo" creator="muralisr" type="10001" summary="replace chaincode return value from (  byte,error) to Response" priority="3" resolution="10000" status="6" created="2016-12-21 02:33:14.0" updated="2018-07-20 18:56:50.0" resolutiondate="2017-07-13 01:37:07.0" votes="0" watches="7" workflowId="36922"> <description><! CDATA Currently the "return" processing from chaincode is clouded on error paths * is the error from chaincode or from the fabric ? * if error from chaincode, is this a unexpected/infrastructure error (e.g, "cannot read file") vs business logic error ("invalid account # specified by user") * if error from chaincode, should we proceed with endorsement or halt  Clearly, the return value from chaincode invocation has to be used to decide the above. However the current return value (  byte, error) is ill-suited for interpretation. A simple, conventional, integer error code based approach will be more suitable implement this cleanly.  The proposal is to modify the return values for "Invoke" and "Init" interfaces with a Response structure with an errorCode in it.  So something like  {quote} type Chaincode interface Init(stub ChaincodeStubInterface) *Response* Invoke(stub ChaincodeStubInterface) *Response* {quote}  Where Response could be something like {quote} Response retCode  int payload      byte {quote}  The endorser can then decide treatment of response based on the retCode value where 0 < retCode <= 500 are reserved by fabric * retCode == 0 || retCode == 200 => success and payload will be interpreted as response * retCode > 500 => error, payload will be interpreted as error but will proceed to endorsement * 0 < retCode <= 500 => error, payload will be interpreted as error and endorsement will fail  The work will affect all chaincodes :  system chaincodes and examples   ~binhn ,    ~ChristopherFerris ,   ~mastersingh24 ,  ~jiangyaoguo   ></description> </Issue>
