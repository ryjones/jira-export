<Action id="26734" issue="18300" author="denyeart" type="comment" body=" ~subbu165  Please reproduce on v1.0 beta release and attach peer log at debug level for ledger.  Highlight which key has been added but cannot be queried, as well as the corresponding tx ids.  We can start with this, but if feasible would also be good to have the zipped up ledger from the file system." created="2017-06-19 13:42:09.0" updateauthor="denyeart" updated="2017-06-19 13:42:09.0"/>
<Action id="26766" issue="18300" author="subbu165" type="comment" body="Hi David, Sure. I will Move to Beta and try to reproduce the issue. If its still exist I will attach the required Info as you mentioned above." created="2017-06-19 15:55:03.0" updateauthor="subbu165" updated="2017-06-19 15:55:03.0"/>
<Action id="26858" issue="18300" author="denyeart" type="comment" created="2017-06-20 15:08:18.0" updateauthor="denyeart" updated="2017-06-20 15:08:18.0"> <body><! CDATA Discussed issue with  ~subbu165 .  It turns out their application was trying to update the same record across two different transactions, in quick succession.  Given the fabric transaction model, this approach will introduce failures. If the 2nd transaction attempts to query the record, it will likely not be committed to peer yet and will not be found.  The application cannot assume that transactions are committed the moment they are submitted to ordering.  The recommendation in this case would be to update the application to be aligned with the fabric transaction model.  For example instead of updating the same record across two different transactions, have each transaction update their own record.  Composite keys can be used where the first part of the composite key would be the same across the two transactions, and the second part of the composite key would be unique.  Then it is possible to later query based on the first part of the composite key and get back the two similar records.   ~subbu165  see  https://github.com/hyperledger/fabric/blob/master/core/chaincode/shim/interfaces.go  and look for APIs such as CreateCompositeKey(), GetStateByPartialCompositeKey(), and SplitCompositeKey().  ></body> </Action>
