<Action id="54734" issue="36112" author="scottz" type="comment" body="This could be worth the effort to do this in PTE, but it also depends on the node SDK handling everything asynchronously, instead of promise-based logic.  ~nileshdeotale  did you confirm the SDK does that (at least for all the APIs for invokes and queries, if not the admin functions such as reconfigs, create channels, etc)?" created="2018-12-12 18:26:53.0" updateauthor="scottz" updated="2018-12-12 18:26:53.0"/>
<Action id="54742" issue="36112" author="scottz" type="comment" created="2018-12-12 21:55:24.0" updateauthor="scottz" updated="2018-12-12 21:55:24.0"> <body><! CDATA Bret said: "you have to wait for the proposals to finish before sending to the orderer, so no way to not have a async wait there, since the send to the orderer only waits till the orderer says it got the transaction and does not wait for the transaction to commit, so no real wait here. I do not see where the async waits of the NodeSDK is causing your issue. "  If I understand it, the node SDK is built to wait until a transaction is sent to orderer. Only then can the client regain the thread control and submit a new transaction proposal. The go sdk must do things differently, which is why HFRD an send so many more transactions per thread ingress to the peers. It would take an overhaul of node-sdk and pte to resolve this story enhancement. I am thinking right now it is not worth the effort; PTE is useful for what it can do (a low-level system test traffic driver to exercise features code and validate, good for traffic comparisons between software releases, and automation).    ></body> </Action>
<Action id="66712" issue="36112" author="scottz" type="comment" body="Let HFRD be used for testing with high offered input rates. This is not the way PTE is designed with nodesdk." created="2020-01-15 20:40:44.0" updateauthor="scottz" updated="2020-01-15 20:40:44.0"/>
