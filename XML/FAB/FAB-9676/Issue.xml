<Issue id="29633" key="FAB-9676" number="9676" project="10002" reporter="mne" assignee="mne" creator="mne" type="10003" summary="Chaincode shim interface for key-level endorsement policies" priority="3" resolution="10000" status="6" created="2018-04-24 12:22:36.0" updated="2018-09-05 15:04:00.0" resolutiondate="2018-09-05 15:04:00.0" votes="0" watches="2" workflowId="44467"> <description><! CDATA Extend chaincode shim interface(s) to be able to set and retrieve per-key endorsement policies. The newly introduced functions allow a chaincode developer to set and retrieve the validation parameter for a given key. The functions only involve the endorsement policy and not the value of a key, i.e. it is  {{GetStateValidationParameter(key string) (  byte, error)}}  and not  {{GetState(key string) (  byte,   byte, error)}}  The rationale behind separating the validation parameter from the value of a key in the shim API are as follows: * Endorsement policies are stored as ledger metadata, which is updated independently from the value of a key. This separation allows to change the trust assumptions on modifying a key without changing its value. This is reflected by the shim API. * If value and endorsement policy were set together, for cases where you are doing a blind write of one or the other, you would have to do an artificial retrieve of the other in order to set them both, this would unnecessarily add a read dependency to the transaction. * If value and endorsement policy were set together, the API for delete would get ambiguous... for example it would be unclear how to delete the endorsement policy without deleting the value. * No change of the current API to retrieve ledger state. * No duplication of functionality (e.g. GetState and GetStateWithValidationParameter)  ></description> </Issue>
