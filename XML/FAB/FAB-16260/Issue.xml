<Issue id="41706" key="FAB-16260" number="16260" project="10002" reporter="scottz" creator="scottz" type="10101" summary="Reconfigure raft channels, add ordererorg, new orderers and remove orderers and ordererorg, then update config, onboard a new orderer" priority="3" resolution="10001" status="6" created="2019-08-08 15:55:25.0" updated="2021-01-10 17:33:34.0" resolutiondate="2021-01-10 17:33:34.0" votes="0" watches="3" workflowId="54740"> <description><! CDATA The following description is from the cloned v1.4 testtask FAB-14228. The implementation in v2.0 is expected to differ by using the k8s tool operator functions (yet to be implemented, so there are some dependencies), and the exact scenarios to add/remove may differ too.   Reconfigure to add a new orderer org to system channel some time after network has been running. Add new orderers in new org. Remove old org orderers.   h2. Setup: # Define a fabric network with: ## etcd/raft with 3 OSNs (all in ordererorg1, defined in configtx.yml) ## minimum 1 peer in 1 org ## Set default value of Orderer.BatchSize.MaxMessgeCount = 10 in configtx.yaml # Configure the network with all the 3 OSNs in the {{orderersystemchannel}} consenter set. # Bring up all the orderers  h2. Inputs # Run traffic transactions using orderers 1, 2, 3. # OrdererOrg1 Admin will fetch the latest config.block from orderer1(orderersystemchannel), add ordererorg2 to the Orderer group section, and orderer4 to orderer system channel for ordererorg2 and send the config update to orderer1 to update the orderer system channel # Add orderer5 to orderer system channel for ordererorg2 # OrdererOrg1 Admin will fetch the latest config.block from orderer1(channel1), add ordererorg2 to the Orderer group section, and orderer4 to channel1 for ordererorg2 and send the config update to orderer1 to update the channel1 # Add orderer5 to channel1 for ordererorg2 # Start up orderers 4, 5 to onboard # Add orderer6 to orderer system channel for ordererorg2 # Add orderer6 to channel1 for ordererorg2 # Start up orderer6 to onboard # Run traffic using orderers 4, 5, 6 (throughout remainder of test) # Stop traffic running to orderers 1, 2, 3. # Ordererorg1 Admin will remove orderer1.ordererorg1 from channel1, sending the update to orderer1 # Ordererorg1 Admin will remove orderer2.ordererorg1 from channel1, sending the update to orderer3 # Stop orderer1 # Remove orderer1.ordererorg1 from orderersystemchannel, sending the update to orderer3 # Remove orderer2.ordererorg1 from orderersystemchannel, sending the update to orderer2 # Stop orderer2 # Ordererorg1 Admin will remove orderer3.ordererorg1 from channel1, sending the update to orderer4 # Remove orderer3.ordererorg1 from orderersystemchannel, sending update to orderer4 # Leave orderer3 running, even though it has been removed from all channels # Remove the ordererorg1 group from the Orderer group section, and update the orderer system channel # *Ordererorg1* Admin will fetch the latest config block of *channel1*, change the Orderer.BatchSize.MaxMessgeCount to 2, and update channel1. This should be *rejected*. # *Ordererorg2* Admin will fetch the latest config block of *channel1*, change the Orderer.BatchSize.MaxMessgeCount to 2, and update channel1. This *should be successful*. # Ordererorg2 Admin will Onboard orderer7 to orderer system channel for ordererorg2 # Onboard orderer7 to channel1 for ordererorg2 # Start up orderer7  h2. Expectations # All three orderers in the ordererorg2 are successfully onboarded and remain in service without errors thereafter # No errors in the first 3 orderers logs # Observe in the metrics a higher rate of increasing blocks in channel1 in all 3 remaining orderers after the batchsize is changed.     ></description> </Issue>
