<Action id="29414" issue="19884" author="vpaprots" type="comment" created="2017-08-03 17:14:05.0" updateauthor="vpaprots" updated="2017-08-03 17:14:05.0"> <body><! CDATA Creating a new BCCSP? No issues myself with that, thats what BCCSP was created for, but I am not one of the maintainers. There are several soft spots in the current BCCSP design that we need to revisit, which might cause you churn, if you were to start implementing today.. * Factory code needs some rethinking on how it picks up BCCSPs (i.e. do we _really_ have to call out every BCCSP by name?) * Where this code lives: crypto providers is getting beyond what the fabric does. Can we make things easier to plug, but host BCCSP implementations elsewhere? * As Fabric evolves, we will need more algorithms (today only use ECDSA). Those interfaces are lightly tested in BCCSP or non-existant ** Ciphering ** Key Derivation ** Key Agreement ** KEK ** ...   ~mastersingh24   ~adc  FYI  ></body> </Action>
<Action id="29434" issue="19884" author="warm3snow" type="comment" created="2017-08-04 08:03:01.0" updateauthor="warm3snow" updated="2017-08-04 08:05:15.0"> <body><! CDATA There is no need to create a new BCCSP.  As a matter of fact, this is just an implementation of  BCCSP with SMx functionality, which will not only support international crypto standards but also China crypto standards. When comes to use, modify _peer/core.yaml_ and _orderer/orderer.yaml_  as belows:     ----------  BCCSP: Select which crypto implementation or library to use for the # blockchain crypto service provider. BCCSP: Default: SMxFactory  ----------  Of course, it's ok only to implement SM2 and merge the code to current BCCSP. If so, there is no need to change _core.yaml_ and _orderer.yaml_ files.  Crypto providers' code is a library, just like libsofthsm.so, which will be provided by cryptographic vendors.   If SMx mechanisms'  identifiers of PKCS#11 are the same, we don't  have to change any code when use different HSM.  ></body> </Action>
