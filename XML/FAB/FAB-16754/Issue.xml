<Issue id="42598" key="FAB-16754" number="16754" project="10002" reporter="denyeart" assignee="joe-alewine" creator="denyeart" type="10100" summary="v2.0 upgrade documentation" priority="2" resolution="10000" status="6" created="2019-10-02 17:54:37.0" updated="2019-12-12 20:05:31.0" resolutiondate="2019-12-12 20:05:31.0" votes="0" watches="7" workflowId="55666"> <description><! CDATA +*Capabilities*+  Similar to past upgrades, there are new capabilities to enable.  *Application* V2_0 capability controls new lifecycle.  *Channel* V2_0 capability is defined but doesn't appear to do anything new in v2.0 yet. Will likely be used to require that orderer endpoints are configured at the org level - see below item *Define Orderer endpoint per org.*  *Orderer* V2_0 capability controls UseChannelCreationPolicyAsAdmins // UseChannelCreationPolicyAsAdmins determines whether the orderer should use the name // "Admins" instead of "ChannelCreationPolicy" in the new channel config template.     +*Peer databases upgrade*+ Peer databases need to be upgraded before peer v2.0 becomes operational. Initial start of peer v2.0 will rebuild the databases. However, to trigger the rebuild upon peer start, the databases need to be dropped before peer start using local command *peer node upgrade-dbs*. If the databases are not dropped, the peer start will return an error message stating that databases are in the old format and must be dropped.  Note that the database rebuild may take a long time for long chains.     +*Capability update and new lifecycle*+ When all peers in a channel have moved to v2.0 (or at least a sufficient number of them), then update channel's application capability to V2_0. After application capability update, you must use v2.0 lifecycle procedures to package, install, approve, and commit new chaincode on the channel. Therefore, ensure you are prepared for new lifecycle before updating the channel capability.  The new lifecycle defaults to using the endorsement policy configured in the channel config (e.g. majority of orgs), therefore it should be added when enabling capabilities. Also add endorsement policy for each org.  Below are the instructions to add the endorsement policy.   *1.* +Add endorsement policies to each org in the channel+  An endorsement policy must be added to every org under the system channel and application channels that have been upgraded to V2_0 capabilities. Refer to a sample endorsement policy `org1Policies` in attached policies.json. - For the system channel, add it under `channel_group/groups/Consortiums/groups/<consortium>/groups/<org>/policies` - For an application channel, add it under *`*channel_group/groups/Application/"groups/<org>/policies`.  *2.* +Add application endorsement policies to the channel+  Endorsement policies must be added to each application channel that has been upgraded to V2_0 capabilities, under *`*channel_group/groups/Application/policies*`*. Refer to `appPolicies` in attached policies.json.  *3.* +Enable new lifecycle in core.yaml+ Under chaincode/system, add *`*_lifecycle: enable*`* to the system chaincodes whitelist.    +*Chaincode shim changes in v2.0 (Go chaincode only)*+ If you vendor the shim in v1.4 chaincode before the peer/channel upgrades, no action is needed for the chaincode, this is the recommended approach. If you did not vendor the shim (fabric/core/chaincode/shim) in the v1.4 chaincode, the old v1.4 chaincode images will still work after upgrade, but you are in a risky state. If the chaincode image gets deleted from your environment for whatever reason, the next invoke on v2.0 peer will try to rebuild the chaincode image and you'll get cannot find fabric/core/chaincode/shim error. You have two options at this point:  1) Fix Option (if the entire channel is ready to upgrade chaincode) - Upgrade the chaincode on all peers and on the channel (using either old lifecycle or new lifecycle depending on capability). Note that you should vendor the new shim fabric-chaincode-go/shim , and it's recommended to use modules when vendoring the shim.  2) Workaround Option (in case the channel cannot yet upgrade the chaincode) - Peer environment variable can indicate that v1.4 ccenv be used for building old chaincode images. The old v1.4 ccenv should still work with peer v2.0.     +*Chaincode logger (Go chaincode only...maybe for Node going forward)*+ If chaincodes used the logger from the shim, the chaincode must shift to use their own logger before being upgraded to use the new shim.     +*Define Orderer endpoint per org*+ Orderer endpoint in channel config has moved from global to org scoped - see release notes  https://github.com/hyperledger/fabric/releases/tag/v1.4.2  , we'll want similar text in the upgrade doc.     ></description> </Issue>
