<Issue id="40987" key="FAB-15920" number="15920" project="10002" reporter="dbshah" assignee="dereckluo" creator="dbshah" type="10004" summary="Peer does not respond to any calls while couchdb statedb is rebuilding" priority="1" resolution="10000" status="6" created="2019-07-10 18:59:32.0" updated="2020-06-30 13:44:33.0" resolutiondate="2020-06-30 13:42:45.0" votes="1" watches="7" workflowId="53960"> <description><! CDATA Scenario: Restart peer with thousands of blocks committed, with statedb as couch. The peer starts building couchdb indexes for all the channels that it is part of. During this period, the peer is listening on the webserver for `peerlisten address`, but does not respond to any requests. In fact, the requests fail at tls handshake stage. Once the indexes are built, the peer starts responding to all the requests.  Â  Peer logs: {code:java} 2019-07-09 23:45:10.979 UTC  nodeCmd  serve -> INFO 001 Starting peer: Version: 1.2.1 Commit SHA: 5017e4d Go version: go1.10 OS/Arch: linux/amd64 Experimental features: false Chaincode: Base Image Version: 0.4.10 Base Docker Namespace: <> Base Docker Label: org.hyperledger.fabric Docker Namespace: <> 2019-07-09 23:45:10.979 UTC  ledgermgmt  initialize -> INFO 002 Initializing ledger mgmt 2019-07-09 23:45:10.979 UTC  kvledger  NewProvider -> INFO 003 Initializing ledger provider 2019-07-09 23:45:14.550 UTC  couchdb  handleRequest -> WARN 004 Retrying couchdb request in 125ms. Attempt:1 Error:Get http://localhost:5984/: dial tcp  ::1 :5984: connect: connection refused 2019-07-09 23:45:14.749 UTC  couchdb  handleRequest -> WARN 005 Retrying couchdb request in 250ms. Attempt:2 Error:Get http://localhost:5984/: dial tcp  ::1 :5984: connect: connection refused 2019-07-09 23:45:15.049 UTC  couchdb  handleRequest -> WARN 006 Retrying couchdb request in 500ms. Attempt:3 Error:Get http://localhost:5984/: dial tcp  ::1 :5984: connect: connection refused 2019-07-09 23:45:15.550 UTC  couchdb  handleRequest -> WARN 007 Retrying couchdb request in 1s. Attempt:4 Error:Get http://localhost:5984/: dial tcp  ::1 :5984: connect: connection refused 2019-07-09 23:45:16.551 UTC  couchdb  handleRequest -> WARN 008 Retrying couchdb request in 2s. Attempt:5 Error:Get http://localhost:5984/: dial tcp  ::1 :5984: connect: connection refused 2019-07-09 23:45:18.552 UTC  couchdb  handleRequest -> WARN 009 Retrying couchdb request in 4s. Attempt:6 Error:Get http://localhost:5984/: dial tcp  ::1 :5984: connect: connection refused 2019-07-09 23:45:23.862 UTC  couchdb  CreateDatabaseIfNotExist -> INFO 00a Created state database _users 2019-07-09 23:45:24.056 UTC  couchdb  CreateDatabaseIfNotExist -> INFO 00b Created state database _replicator 2019-07-09 23:45:24.254 UTC  couchdb  CreateDatabaseIfNotExist -> INFO 00c Created state database _global_changes 2019-07-09 23:45:26.275 UTC  kvledger  NewProvider -> INFO 00d ledger provider Initialized 2019-07-09 23:45:26.278 UTC  ledgermgmt  initialize -> INFO 00e ledger mgmt initialized 2019-07-09 23:45:26.278 UTC  peer  func1 -> INFO 00f Auto-detected peer address: 172.30.253.30:31002 2019-07-09 23:45:26.279 UTC  peer  func1 -> INFO 010 Returning xyz:31002 2019-07-09 23:45:26.279 UTC  peer  func1 -> INFO 011 Auto-detected peer address: 172.30.253.30:31002 2019-07-09 23:45:26.279 UTC  peer  func1 -> INFO 012 Returning xyz:31002 2019-07-09 23:45:26.280 UTC  nodeCmd  serve -> INFO 013 Starting peer with TLS enabled 2019-07-09 23:45:26.283 UTC  eventhub_producer  start -> INFO 014 Event processor started 2019-07-09 23:45:26.349 UTC  nodeCmd  computeChaincodeEndpoint -> INFO 015 Entering computeChaincodeEndpoint with peerHostname: xyz 2019-07-09 23:45:26.349 UTC  nodeCmd  computeChaincodeEndpoint -> INFO 016 Exit with ccEndpoint: n7fd8fb7f49e74483b5188e4d0bcf18d5-org1-peer1:31004 2019-07-09 23:45:26.351 UTC  sccapi  registerSysCC -> INFO 017 system chaincode cscc(github.com/hyperledger/fabric/core/scc/cscc) registered 2019-07-09 23:45:26.351 UTC  sccapi  registerSysCC -> INFO 018 system chaincode lscc(github.com/hyperledger/fabric/core/scc/lscc) registered 2019-07-09 23:45:26.351 UTC  sccapi  registerSysCC -> INFO 019 system chaincode qscc(github.com/hyperledger/fabric/core/scc/qscc) registered 2019-07-09 23:45:26.356 UTC  msp  DeserializeIdentity -> INFO 01a Obtaining identity 2019-07-09 23:45:26.358 UTC  gossip/gossip  NewGossipService -> INFO 01b Creating gossip service with self membership of \{     63 206 236 66 22 35 137 73 216 104 87 106 49 5 225 117 205 116 175 190 17 106 200 146 66 252 5 86 141 158 155 114  xyz:31002 <nil> <nil>} 2019-07-09 23:45:26.359 UTC  gossip/gossip  NewGossipService -> WARN 01c External endpoint is empty, peer will not be accessible outside of its organization 2019-07-09 23:45:26.359 UTC  gossip/gossip  start -> INFO 01d Gossip instance xyz:31002 started 2019-07-09 23:45:26.360 UTC  cscc  Init -> INFO 01e Init CSCC 2019-07-09 23:45:26.360 UTC  sccapi  deploySysCC -> INFO 01f system chaincode cscc/(github.com/hyperledger/fabric/core/scc/cscc) deployed 2019-07-09 23:45:26.361 UTC  sccapi  deploySysCC -> INFO 020 system chaincode lscc/(github.com/hyperledger/fabric/core/scc/lscc) deployed 2019-07-09 23:45:26.362 UTC  qscc  Init -> INFO 021 Init QSCC 2019-07-09 23:45:26.362 UTC  sccapi  deploySysCC -> INFO 022 system chaincode qscc/(github.com/hyperledger/fabric/core/scc/qscc) deployed 2019-07-09 23:45:26.362 UTC  nodeCmd  serve -> INFO 023 Deployed system chaincodes 2019-07-09 23:45:26.369 UTC  peer  Initialize -> INFO 024 Loading chain defaultchannel 2019-07-09 23:45:26.369 UTC  ledgermgmt  OpenLedger -> INFO 025 Opening ledger with id = defaultchannel 2019-07-09 23:45:26.963 UTC  couchdb  CreateDatabaseIfNotExist -> INFO 026 Created state database defaultchannel_ 2019-07-09 23:45:28.462 UTC  couchdb  CreateDatabaseIfNotExist -> INFO 027 Created state database defaultchannel_lscc 2019-07-09 23:45:28.549 UTC  cceventmgmt  HandleStateUpdates -> INFO 028 Channel  defaultchannel : Handling LSCC state update for chaincode  cc  2019-07-09 23:45:28.851 UTC  couchdb  CreateDatabaseIfNotExist -> INFO 029 Created state database defaultchannel_cc {code} {noformat} # ss -l Netid State      Recv-Q Send-Q                                         Local Address:Port                                                          Peer Address:Port                 tcp   LISTEN     0      128                                                        *:6984                                                                     *:*                     tcp   LISTEN     0      128                                                127.0.0.1:9001                                                                     *:*                     tcp   LISTEN     0      128                                                        *:5984                                                                     *:*                     tcp   LISTEN     0      128                                                        *:8000                                                                     *:*                     tcp   LISTEN     0      128                                                       :::2375                                                                    :::*                     tcp   LISTEN     24     128                                                       :::31002                                                                   :::*                     tcp   LISTEN     21     128                                                       :::31003                                                                   :::*                     tcp   LISTEN     0      128                                                       :::31004                                                                   :::*      {noformat} 31002 is peer address port, 31003 is the eventhub port, 31004 is the chaincod listen address port.  Calls to 31002 and 31003 get stuck in the tls handshake phase as below. {code:java} # curl -vvvk https://localhost:31002 * Rebuilt URL to: https://localhost:31002/ *   Trying ::1... * TCP_NODELAY set * Connected to localhost (::1) port 31002 (#0) * ALPN, offering h2 * ALPN, offering http/1.1 * Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH * successfully set certificate verify locations: *   CAfile: /etc/ssl/certs/ca-certificates.crt CApath: /etc/ssl/certs * TLSv1.2 (OUT), TLS header, Certificate Status (22): * TLSv1.2 (OUT), TLS handshake, Client hello (1): {code} Expected behavior: The peer should either not open up the webservers while it is still working on the indexes, or should give some error back saying that the peer is not ready.  ></description> </Issue>
