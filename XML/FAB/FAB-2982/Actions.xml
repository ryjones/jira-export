<Action id="21880" issue="15562" author="gbolo" type="comment" created="2017-04-05 18:17:23.0" updateauthor="gbolo" updated="2017-04-05 18:17:23.0"> <body><! CDATA I am also having issues with the kafka orderer type. I can confirm that the orderer successfully connects to the kafka brokers, but when a peer tries to join a channel I get this:  {{Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.229 EDT  orderer/common/broadcast  Handle -> WARN 2ba Rejecting CONFIG_UPDATE because: Error validating DeltaSet: Attempt to set key  Values  /Channel/Orderer/KafkaBrokers to version 0, but key is at version 0 Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.239 EDT  orderer/common/deliver  Handle -> WARN 2bb Error reading from stream: stream error: code = 1 desc = "context canceled"}}   the debug messages before this are: {{Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.219 EDT  orderer/main  Deliver -> DEBU 292 Starting new Deliver handler Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.219 EDT  orderer/common/deliver  Handle -> DEBU 293 Starting new deliver loop Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.219 EDT  orderer/common/deliver  Handle -> DEBU 294 Attempting to read seek info message Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.225 EDT  orderer/main  Broadcast -> DEBU 295 Starting new Broadcast handler Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.226 EDT  orderer/common/broadcast  Handle -> DEBU 296 Preprocessing CONFIG_UPDATE Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.226 EDT  orderer/multichain  Process -> DEBU 297 Processing channel reconfiguration request for channel consortium Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.226 EDT  common/configtx  addToMap -> DEBU 298 Adding to config map:  Groups  /Channel Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.226 EDT  common/configtx  addToMap -> DEBU 299 Adding to config map:  Groups  /Channel/Orderer Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.226 EDT  common/configtx  addToMap -> DEBU 29a Adding to config map:  Groups  /Channel/Orderer/OrdererOrg Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.226 EDT  common/configtx  addToMap -> DEBU 29b Adding to config map:  Values  /Channel/Orderer/OrdererOrg/MSP Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.226 EDT  common/configtx  addToMap -> DEBU 29c Adding to config map:  Policy  /Channel/Orderer/OrdererOrg/Readers Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.226 EDT  common/configtx  addToMap -> DEBU 29d Adding to config map:  Policy  /Channel/Orderer/OrdererOrg/Writers Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.226 EDT  common/configtx  addToMap -> DEBU 29e Adding to config map:  Policy  /Channel/Orderer/OrdererOrg/Admins Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.226 EDT  common/configtx  addToMap -> DEBU 29f Adding to config map:  Values  /Channel/Orderer/CreationPolicy Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.226 EDT  common/configtx  addToMap -> DEBU 2a0 Adding to config map:  Values  /Channel/Orderer/ConsensusType Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.226 EDT  common/configtx  addToMap -> DEBU 2a1 Adding to config map:  Values  /Channel/Orderer/BatchSize Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.226 EDT  common/configtx  addToMap -> DEBU 2a2 Adding to config map:  Values  /Channel/Orderer/BatchTimeout Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.226 EDT  common/configtx  addToMap -> DEBU 2a3 Adding to config map:  Values  /Channel/Orderer/ChannelRestrictions Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.226 EDT  common/configtx  addToMap -> DEBU 2a4 Adding to config map:  Values  /Channel/Orderer/KafkaBrokers Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.226 EDT  common/configtx  addToMap -> DEBU 2a5 Adding to config map:  Policy  /Channel/Orderer/Admins Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.229 EDT  common/configtx  addToMap -> DEBU 2a6 Adding to config map:  Policy  /Channel/Orderer/BlockValidation Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.229 EDT  common/configtx  addToMap -> DEBU 2a7 Adding to config map:  Policy  /Channel/Orderer/Readers Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.229 EDT  common/configtx  addToMap -> DEBU 2a8 Adding to config map:  Policy  /Channel/Orderer/Writers Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.229 EDT  common/configtx  addToMap -> DEBU 2a9 Adding to config map:  Groups  /Channel/Application Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.229 EDT  common/configtx  addToMap -> DEBU 2aa Adding to config map:  Groups  /Channel/Application/Org1MSP Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.229 EDT  common/configtx  addToMap -> DEBU 2ab Adding to config map:  Values  /Channel/Application/Org1MSP/AnchorPeers Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.229 EDT  common/configtx  addToMap -> DEBU 2ac Adding to config map:  Values  /Channel/Application/Org1MSP/MSP Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.229 EDT  common/configtx  addToMap -> DEBU 2ad Adding to config map:  Policy  /Channel/Application/Org1MSP/Admins Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.229 EDT  common/configtx  addToMap -> DEBU 2ae Adding to config map:  Policy  /Channel/Application/Org1MSP/Readers Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.229 EDT  common/configtx  addToMap -> DEBU 2af Adding to config map:  Policy  /Channel/Application/Org1MSP/Writers Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.229 EDT  common/configtx  addToMap -> DEBU 2b0 Adding to config map:  Policy  /Channel/Application/Readers Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.229 EDT  common/configtx  addToMap -> DEBU 2b1 Adding to config map:  Policy  /Channel/Application/Writers Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.229 EDT  common/configtx  addToMap -> DEBU 2b2 Adding to config map:  Policy  /Channel/Application/Admins Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.229 EDT  common/configtx  addToMap -> DEBU 2b3 Adding to config map:  Values  /Channel/BlockDataHashingStructure Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.229 EDT  common/configtx  addToMap -> DEBU 2b4 Adding to config map:  Values  /Channel/OrdererAddresses Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.229 EDT  common/configtx  addToMap -> DEBU 2b5 Adding to config map:  Values  /Channel/HashingAlgorithm Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.229 EDT  common/configtx  addToMap -> DEBU 2b6 Adding to config map:  Policy  /Channel/Writers Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.229 EDT  common/configtx  addToMap -> DEBU 2b7 Adding to config map:  Policy  /Channel/Admins Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.229 EDT  common/configtx  addToMap -> DEBU 2b8 Adding to config map:  Policy  /Channel/AcceptAllPolicy Apr 05 13:33:14 ymr-sbvme-ord1 orderer 17825 : 2017-04-05 13:33:14.229 EDT  common/configtx  addToMap -> DEBU 2b9 Adding to config map:  Policy  /Channel/Readers}}   ></body> </Action>
<Action id="22181" issue="15562" author="viewer" type="comment" created="2017-04-12 08:01:24.0" updateauthor="viewer" updated="2017-04-12 08:01:24.0"> <body><! CDATA *This is the output of cli:* 2017-04-12 07:38:47.563 UTC  msp  GetLocalMSP -> DEBU 001 Returning existing local MSP 2017-04-12 07:38:47.563 UTC  msp  GetDefaultSigningIdentity -> DEBU 002 Obtaining default signing identity 2017-04-12 07:38:49.609 UTC  msp  GetLocalMSP -> DEBU 003 Returning existing local MSP 2017-04-12 07:38:49.611 UTC  msp  GetDefaultSigningIdentity -> DEBU 004 Obtaining default signing identity 2017-04-12 07:38:49.614 UTC  msp  GetLocalMSP -> DEBU 005 Returning existing local MSP 2017-04-12 07:38:49.614 UTC  msp  GetDefaultSigningIdentity -> DEBU 006 Obtaining default signing identity {color:red}2017-04-12 07:38:49.615 UTC  msp  Sign -> DEBU 007 Sign: plaintext: 0AD6040A1508021A060889B3B7C70522...00120D1A0B08FFFFFFFFFFFFFFFFFF01 2017-04-12 07:38:49.615 UTC  msp  Sign -> DEBU 008 Sign: digest: 2D38D5E7E8D537C6F7CF5986C029BE1E54E5D7B2DC25E4F5AAB57FDDB6BE43D5{color} Got status  &{NOT_FOUND} Error receiving: EOF Error: EOF Usage: peer channel create  flags   *This is the log snippet of orderer0:* 2017-04-12 07:38:47.644 UTC  orderer/multichain  newChainSupport -> DEBU 49a  channel: mychannel  Retrieved metadata for tip of chain (block #0): 2017-04-12 07:38:47.644 UTC  orderer/kafka  newChain -> DEBU 49b  channel: mychannel  Starting chain with last persisted offset -3 and last recorded block 0 {color:red}2017-04-12 07:38:49.617 UTC  orderer/common/deliver  Handle -> DEBU 49c Client request for channel mychannel not found{color} 2017-04-12 07:38:50.645 UTC  orderer/kafka  newProducer -> DEBU 49d Connecting to Kafka cluster:  kafka0:9092  2017-04-12 07:38:50.668 UTC  orderer/kafka  newProducer -> DEBU 49e Connected to the Kafka cluster 2017-04-12 07:38:50.669 UTC  orderer/multichain  newChain -> INFO 49f Created and starting new chain mychannel 2017-04-12 07:38:50.669 UTC  orderer/kafka  Start -> DEBU 4a0  channel: mychannel  Posting the CONNECT message... 2017-04-12 07:38:51.083 UTC  orderer/kafka  Send -> DEBU 4a1  channel mychannel  Posted blob to the Kafka cluster (offset number: 0) 2017-04-12 07:38:51.083 UTC  orderer/kafka  Start -> DEBU 4a2  channel: mychannel  CONNECT message posted successfully 2017-04-12 07:38:51.106 UTC  orderer/kafka  newConsumer -> DEBU 4a3  channel: mychannel  Created new consumer for session (beginning offset: -2) 2017-04-12 07:38:51.106 UTC  orderer/multichain  addBlockSignature -> DEBU 4a4 &{ledgerResources:0xc420161c20 chain:0xc420330120 cutter:0xc42031aa50 filters:0xc420161c80 signer:0x11cdd30 lastConfig:0 lastConfigSeq:0} 2017-04-12 07:38:51.106 UTC  orderer/multichain  addBlockSignature -> DEBU 4a5 &{} 2017-04-12 07:38:51.106 UTC  msp  GetLocalMSP -> DEBU 4a6 Returning existing local MSP 2017-04-12 07:38:51.106 UTC  msp  GetDefaultSigningIdentity -> DEBU 4a7 Obtaining default signing identity 2017-04-12 07:38:51.107 UTC  msp  GetLocalMSP -> DEBU 4a8 Returning existing local MSP 2017-04-12 07:38:51.107 UTC  msp  GetDefaultSigningIdentity -> DEBU 4a9 Obtaining default signing identity 2017-04-12 07:38:51.107 UTC  msp  Sign -> DEBU 4aa Sign: plaintext: 0A9F040A0A4F7264657265724D535012...24E1AD73348D8BF93C9C95C4860DF273 2017-04-12 07:38:51.107 UTC  msp  Sign -> DEBU 4ab Sign: digest: 2F3CD03D00EBF80A8C071E7CF939CFEAF9CAF79732F3CDD942762F4A1A461D4D 2017-04-12 07:38:51.107 UTC  msp  GetLocalMSP -> DEBU 4ac Returning existing local MSP 2017-04-12 07:38:51.107 UTC  msp  GetDefaultSigningIdentity -> DEBU 4ad Obtaining default signing identity 2017-04-12 07:38:51.107 UTC  msp  GetLocalMSP -> DEBU 4ae Returning existing local MSP 2017-04-12 07:38:51.107 UTC  msp  GetDefaultSigningIdentity -> DEBU 4af Obtaining default signing identity 2017-04-12 07:38:51.107 UTC  msp  Sign -> DEBU 4b0 Sign: plaintext: 0A9F040A0A4F7264657265724D535012...24E1AD73348D8BF93C9C95C4860DF273 2017-04-12 07:38:51.107 UTC  msp  Sign -> DEBU 4b1 Sign: digest: 1C85D0E74FD9CB7B5BEE1E20C985AC83A07302DC20CE61A55E460EAE1B9556E0 2017-04-12 07:38:51.108 UTC  orderer/ramledger  appendBlock -> DEBU 4b2 Sending signal that block 0 has a successor 2017-04-12 07:38:51.108 UTC  orderer/kafka  loop -> DEBU 4b3  channel: testchainid  Batch filled, just cut block 1 2017-04-12 07:38:51.111 UTC  orderer/kafka  loop -> DEBU 4b4  channel: mychannel  Successfully unmarshalled consumed message. Inspecting type... 2017-04-12 07:38:51.111 UTC  orderer/kafka  loop -> DEBU 4b5  channel: mychannel  It's a connect message - ignoring  In peer/channel/create.go#executeCreate(), it will sleep 2s after the create transaction is sent, then try to get the block. But the channel has not finish starting. That's the problem.  I think the peer may polling to get the block instead of sleep for 2 seconds directly.  ></body> </Action>
<Action id="22185" issue="15562" author="viewer" type="comment" created="2017-04-12 09:32:02.0" updateauthor="viewer" updated="2017-04-12 09:32:02.0"> <body><! CDATA I tried to fetch the block with the following script, then  CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig CORE_PEER_LOCALMSPID="OrdererMSP" peer channel fetch -o orderer0:7050 -c mychannel -f crypto/orderer/channel.tx --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem  After this step, the following steps -- joining channel, chain code installation and so on all succeeded. So, just like the previous comment said, the channel is successfully created, but the peer didn't get block.  ></body> </Action>
<Action id="22276" issue="15562" author="daijianw" type="comment" created="2017-04-13 03:01:51.0" updateauthor="daijianw" updated="2017-04-13 03:01:51.0"> <body><! CDATA Hi Zong Ying,  Thanks for your investigation. I tried your workaround, it works.   ></body> </Action>
<Action id="22491" issue="15562" author="nnao" type="comment" created="2017-04-14 20:13:19.0" updateauthor="nnao" updated="2017-04-14 20:13:19.0"> <body><! CDATA Hi all,  In order to fix the bug, I plan to reduce the processing of getting the block in peer channel create and add the peer channel fetch command to the procedure of e2e. The fetch command does the same thing as getting the block of the create command. The reason why I divided two-phase is because I'd like to want the user to judge how much time is needed to create the channel. it depends on the environment. Also, it is possible to reduce duplication of code.  Do you have any opinions?  ></body> </Action>
<Action id="22499" issue="15562" author="baohua" type="comment" created="2017-04-15 03:21:32.0" updateauthor="baohua" updated="2017-04-15 03:21:32.0"> <body><! CDATA Would like to support the dividing, while we can add some option for the `peer channel create` cmd, e.g., --fetch, to allow the original auto-fetch block operation.  We can set the option disabled by default.  How do u think?  ></body> </Action>
<Action id="22502" issue="15562" author="nnao" type="comment" created="2017-04-15 04:09:10.0" updateauthor="nnao" updated="2017-04-15 04:09:10.0"> <body><! CDATA I think the dividing is a simple solution but I concern about users should need to change original operation. the auto-fetch option is a good idea. Does auto-fetch option solve this bug? or we need to off that option to solve?   ></body> </Action>
<Action id="22504" issue="15562" author="kchristidis" type="comment" created="2017-04-15 04:13:37.0" updateauthor="kchristidis" updated="2017-04-15 04:13:37.0"> <body><! CDATA  ~nnao : The status of this JIRA is set to "In Review" yet I can't seem to find a changeset in Gerrit for it. Can you please point me to it?  Also: I'm going through the comments here and I'm still not 100% sure on what the problem is, or the suggested fix. It seems like it probably has something to do with the E2E expecting the block way too fast for Kafka, but just to be clear, can you spell it out for me? Thanks.  ></body> </Action>
<Action id="22507" issue="15562" author="nnao" type="comment" created="2017-04-15 04:56:48.0" updateauthor="nnao" updated="2017-04-15 04:56:48.0"> <body><! CDATA This is gerrit link (Sorry I need to change something to pass Jenkins test) https://gerrit.hyperledger.org/r/#/c/8059/  As Zhang ZongYing said, The problem is that too fast to get the block by a peer for kafka. Currently, peer waits 2 sec for getting the block In peer/channel/create.go#executeCreate(). But orderer takes to 2 more sec time to start channel in kafka. Changing peer sleep time to 5 seconds will not cause the bug.  I'm not sure this solution is correct or not. But In fabric-sdk-node, joinChannel process gets genesis block. I think the dividing is a simple solution.  ></body> </Action>
<Action id="22508" issue="15562" author="kchristidis" type="comment" body="Excellent, thank you for the update. And thank you for submitting a patch for this." created="2017-04-15 05:05:41.0" updateauthor="kchristidis" updated="2017-04-15 05:06:35.0"/>
<Action id="22510" issue="15562" author="daijianw" type="comment" body="Thanks for patching this. I agree the dividing is a simple solution. One suggestion is, in script.sh, add a comment to explain why we need sleep a while(e.g. 5 seconds here) between channel creation and fetch. This will give the end user a hint that a sleep is necessary here when they automate the end to end operations. " created="2017-04-15 09:25:00.0" updateauthor="daijianw" updated="2017-04-15 09:25:00.0"/>
<Action id="22511" issue="15562" author="baohua" type="comment" created="2017-04-15 10:07:56.0" updateauthor="baohua" updated="2017-04-15 10:07:56.0"> <body><! CDATA By the way, why not we make the timeout variable configurable through cmd parameter or core.yaml?  That maybe more flexible to let users config as his own environment.  Thanks!  ></body> </Action>
<Action id="22599" issue="15562" author="nnao" type="comment" created="2017-04-17 17:41:05.0" updateauthor="nnao" updated="2017-04-17 17:41:05.0"> <body><! CDATA Thank you for comment. I will add timeout configuration for users.  ></body> </Action>
<Action id="23525" issue="15562" author="tonyyang132" type="comment" created="2017-05-08 11:55:53.0" updateauthor="tonyyang132" updated="2017-05-08 11:55:53.0"> <body><! CDATA  ~nnao  First of all thank you for your change to this issue. So I've been trying to run a kafka based e2e test with your 15th patch set. My understanding is I need to modify script.sh so the channel creation command would be something like:  peer channel create -o orderer.example.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/channel.tx --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA -t 5  Would this be all? Or are there more changes I need to make to the script?  ></body> </Action>
<Action id="23540" issue="15562" author="binhn" type="comment" body="CR  https://gerrit.hyperledger.org/r/#/c/8059/" created="2017-05-08 15:41:48.0" updateauthor="binhn" updated="2017-05-08 15:41:48.0"/>
<Action id="23548" issue="15562" author="nnao" type="comment" body="Tony Yang This patches(as mentioned link Binh) does not affect existing tests. This patches has default timeout values(5 sec), it works without -t option. If you want to change the timeout time, use the -t option.  Thanks." created="2017-05-08 16:54:03.0" updateauthor="nnao" updated="2017-05-08 16:54:03.0"/>
<Action id="23556" issue="15562" author="tonyyang132" type="comment" created="2017-05-08 18:21:40.0" updateauthor="tonyyang132" updated="2017-05-08 18:21:40.0"> <body><! CDATA  ~nnao  Thank you for the reply.  I ran into some errors today. This was with your 15th patch set from  https://gerrit.hyperledger.org/r/8059  cherry-picked onto master (c346b06). Orderer type was solo (planning on kafka but haven't got that far yet). After {code}make docker{code} followed by {code}./network_setup.sh up{code} I got the following error:  {code} ____    _____      _      ____    _____           _____   ____    _____ / ___|  |_   _|    / \    |  _ \  |_   _|         | ____| |___ \  | ____| \___ \    | |     / _ \   | |_) |   | |    _____  |  _|     __) | |  _| ___) |   | |    / ___ \  |  _ <    | |   |_____| | |___   / __/  | |___ |____/    |_|   /_/   \_\ |_| \_\   |_|           |_____| |_____| |_____|  Channel name : mychannel CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key CORE_PEER_LOCALMSPID=Org1MSP CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt CORE_PEER_TLS_ENABLED=true CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp CORE_PEER_ID=cli CORE_LOGGING_LEVEL=DEBUG CORE_PEER_ADDRESS=peer0.org1.example.com:7051 2017-05-08 17:33:46.550 UTC  msp  getMspConfig -> INFO 001 intermediate certs folder not found at  /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/intermediatecerts . Skipping.:  stat /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/intermediatecerts: no such file or directory  2017-05-08 17:33:46.550 UTC  msp  getMspConfig -> INFO 002 crls folder not found at  /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/intermediatecerts . Skipping.:  stat /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/crls: no such file or directory  2017-05-08 17:33:46.550 UTC  msp  getMspConfig -> INFO 003 MSP configuration file not found at  /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/config.yaml :  stat /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/config.yaml: no such file or directory  2017-05-08 17:33:46.586 UTC  msp  GetLocalMSP -> DEBU 004 Returning existing local MSP 2017-05-08 17:33:46.586 UTC  msp  GetDefaultSigningIdentity -> DEBU 005 Obtaining default signing identity 2017-05-08 17:33:46.592 UTC  msp  GetLocalMSP -> DEBU 006 Returning existing local MSP 2017-05-08 17:33:46.592 UTC  msp  GetDefaultSigningIdentity -> DEBU 007 Obtaining default signing identity 2017-05-08 17:33:46.592 UTC  msp  GetLocalMSP -> DEBU 008 Returning existing local MSP 2017-05-08 17:33:46.592 UTC  msp  GetDefaultSigningIdentity -> DEBU 009 Obtaining default signing identity 2017-05-08 17:33:46.593 UTC  msp  Sign -> DEBU 00a Sign: plaintext: 0AA4060A074F7267314D53501298062D...53616D706C65436F6E736F727469756D 2017-05-08 17:33:46.593 UTC  msp  Sign -> DEBU 00b Sign: digest: 9BFD3BDC49C51B355066AC43601CCF2305D3A19A42124A7F95022EF871CF68B1 2017-05-08 17:33:46.593 UTC  msp  GetLocalMSP -> DEBU 00c Returning existing local MSP 2017-05-08 17:33:46.593 UTC  msp  GetDefaultSigningIdentity -> DEBU 00d Obtaining default signing identity 2017-05-08 17:33:46.593 UTC  msp  GetLocalMSP -> DEBU 00e Returning existing local MSP 2017-05-08 17:33:46.593 UTC  msp  GetDefaultSigningIdentity -> DEBU 00f Obtaining default signing identity 2017-05-08 17:33:46.593 UTC  msp  Sign -> DEBU 010 Sign: plaintext: 0ADB060A1508021A0608FAD7C2C80522...335EDBAEBDC76A4ACE45C8ACB90D91C4 2017-05-08 17:33:46.593 UTC  msp  Sign -> DEBU 011 Sign: digest: 902CEA097532C3D7E420891B92D03ECC8605A695CE3B79783E315AC2B91E840E 2017-05-08 17:33:46.660 UTC  msp  GetLocalMSP -> DEBU 012 Returning existing local MSP 2017-05-08 17:33:46.660 UTC  msp  GetDefaultSigningIdentity -> DEBU 013 Obtaining default signing identity 2017-05-08 17:33:46.660 UTC  msp  GetLocalMSP -> DEBU 014 Returning existing local MSP 2017-05-08 17:33:46.660 UTC  msp  GetDefaultSigningIdentity -> DEBU 015 Obtaining default signing identity 2017-05-08 17:33:46.660 UTC  msp  Sign -> DEBU 016 Sign: plaintext: 0ADB060A1508021A0608FAD7C2C80522...00120D1A0B08FFFFFFFFFFFFFFFFFF01 2017-05-08 17:33:46.660 UTC  msp  Sign -> DEBU 017 Sign: digest: CDC58CA348C6A8B97255377261001CB312311428E5C20FA27D09E2140DD274DC Got status  &{NOT_FOUND} panic: runtime error: invalid memory address or nil pointer dereference  signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x6e1077   goroutine 1  running : panic(0xc6c140, 0xc420012080) 	/opt/go/src/runtime/panic.go:500 +0x1a1 github.com/hyperledger/fabric/vendor/google.golang.org/grpc.(*ClientConn).Close(0x0, 0xc420177a00, 0xc420170000) 	/opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/clientconn.go:454 +0x37 github.com/hyperledger/fabric/peer/channel.(*deliverClient).Close(0xc420132fc0, 0x0, 0x13631a0) 	/opt/gopath/src/github.com/hyperledger/fabric/peer/channel/deliverclient.go:103 +0x2e github.com/hyperledger/fabric/peer/channel.getGenesisBlock(0xc4202716d0, 0x0, 0x0, 0x0) 	/opt/gopath/src/github.com/hyperledger/fabric/peer/channel/deliverclient.go:117 +0x100 github.com/hyperledger/fabric/peer/channel.executeCreate(0xc4202716d0, 0xc4202716d0, 0x0) 	/opt/gopath/src/github.com/hyperledger/fabric/peer/channel/create.go:177 +0x50 github.com/hyperledger/fabric/peer/channel.create(0xc42023bd40, 0xc42023f900, 0x1, 0xa, 0xc4202716d0, 0xd5010c, 0x5) 	/opt/gopath/src/github.com/hyperledger/fabric/peer/channel/create.go:207 +0x45 github.com/hyperledger/fabric/peer/channel.createCmd.func1(0xc42023bd40, 0xc42023f900, 0x1, 0xa, 0x0, 0x0) 	/opt/gopath/src/github.com/hyperledger/fabric/peer/channel/create.go:59 +0x52 github.com/hyperledger/fabric/vendor/github.com/spf13/cobra.(*Command).execute(0xc42023bd40, 0xc42023f400, 0xa, 0xa, 0xc42023bd40, 0xc42023f400) 	/opt/gopath/src/github.com/hyperledger/fabric/vendor/github.com/spf13/cobra/command.go:599 +0x234 github.com/hyperledger/fabric/vendor/github.com/spf13/cobra.(*Command).ExecuteC(0x135a9c0, 0xf, 0xc420010035, 0x7) 	/opt/gopath/src/github.com/hyperledger/fabric/vendor/github.com/spf13/cobra/command.go:689 +0x367 github.com/hyperledger/fabric/vendor/github.com/spf13/cobra.(*Command).Execute(0x135a9c0, 0x7d, 0xc420010035) 	/opt/gopath/src/github.com/hyperledger/fabric/vendor/github.com/spf13/cobra/command.go:648 +0x2b main.main() 	/opt/gopath/src/github.com/hyperledger/fabric/peer/main.go:118 +0x54e !!!!!!!!!!!!!!! Channel creation failed !!!!!!!!!!!!!!!! ================== ERROR !!! FAILED to execute End-2-End Scenario ================== {code}  I guess I must have missed something here. Can you maybe shed some light? Thank you.  ></body> </Action>
<Action id="23575" issue="15562" author="nnao" type="comment" created="2017-05-08 21:10:14.0" updateauthor="nnao" updated="2017-05-08 21:10:14.0"> <body><! CDATA Oh, it's my fault. I had closed grpc connection second times. So I will fix that bug and will push the code after making test cases. Thanks.  ></body> </Action>
<Action id="23609" issue="15562" author="tonyyang132" type="comment" body=" ~nnao  Glad that what&apos;s been haunting me will be taken care of. Thank you :)" created="2017-05-09 17:00:10.0" updateauthor="tonyyang132" updated="2017-05-09 17:00:10.0"/>
<Action id="23689" issue="15562" author="christopherferris" type="comment" created="2017-05-10 19:15:24.0" updateauthor="christopherferris" updated="2017-05-10 19:15:24.0"> <body><! CDATA hi  ~nnao , thanks for taking this one on! It is important to get this one merged for the alpha2 release. I realize there's been back and forth in comments. Any chance you could give it some focus, please?     Thanks!  ></body> </Action>
<Action id="23709" issue="15562" author="nnao" type="comment" created="2017-05-10 23:16:28.0" updateauthor="nnao" updated="2017-05-10 23:16:28.0"> <body><! CDATA Hi ChristopherFerris, Yes. The patches of adding timeout option were completed, but now I write a unit test of timeout option.  ></body> </Action>
<Action id="28554" issue="15562" author="hanhzf" type="comment" created="2017-07-18 04:23:06.0" updateauthor="hanhzf" updated="2017-07-18 04:23:06.0"> <body><! CDATA  ~nnao   ~ChristopherFerris  seem that we have met the same problem with fabric1.0 release version, when using kafka as the backend for orderer. Error as below:  {color:#d04437}2017-07-17 08:52:11.956 UTC  orderer/kafka  Enqueue -&gt; WARN 4c2  channel: testchainid  Will not enqueue, consenter for this channel hasn&#39;t started yet{color} {color:#d04437}2017-07-17 08:52:11.958 UTC  orderer/common/deliver  Handle -> WARN 4c3 Error reading from stream: rpc error: code = Canceled desc = context canceled{color}  {color:#d04437}2017-07-16 07:45:33.086 UTC  channelCmd  InitCmdFactory -&gt; INFO 109 Endorser and orderer connections initialized Error: timeout waiting for channel creation{color}  {color:#333333}FYI, we will continue investigate on this issue.{color}        ></body> </Action>
<Action id="28599" issue="15562" author="nnao" type="comment" created="2017-07-18 18:01:08.0" updateauthor="nnao" updated="2017-07-18 18:01:08.0"> <body><! CDATA  ~hanhzf  What if you set a timeout option longer? (e.g. -t 10) Does orderer log shows that channel creation succeed?. This patch just waits for channel creation. If channel creation was failed, peer can't know that.  ></body> </Action>
<Action id="28955" issue="15562" author="shanlusun" type="comment" created="2017-07-25 04:10:02.0" updateauthor="shanlusun" updated="2017-07-25 04:10:02.0"> <body><! CDATA Got the same error as  ~hanhzf  with Fabric 1.0, as a workaround I added one more argument: '{color:#d04437}-t 10{color:#333333}'{color}{color} for 'create channel', then kafka works well. {code:java} // code placeholder peer channel create -o orderer.chain.ad.xiaomi.com:7050 -c $CHANNEL_NAME -t 10 -f ./channel-artifacts/channel.tx --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA >&log.txt{code}  ></body> </Action>
