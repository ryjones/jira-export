<Issue id="21048" key="FAB-6333" number="6333" project="10002" reporter="adnanchoudhury" assignee="cbl" creator="adnanchoudhury" type="10004" summary="Chaincode container of a temporarily disconnected peer cannot resume normal function if, while the peer was disconnected, another peer created its CC container in the meantime" priority="2" resolution="10000" status="6" created="2017-09-28 15:27:50.0" updated="2019-03-19 11:12:52.0" resolutiondate="2017-11-28 01:52:11.0" votes="0" watches="5" workflowId="40112"> <description><! CDATA In a regular 2 org-4 peer setup, a peer , after doing an invoke+query, gets disconnected temporarily and comes back up, and meanwhile there are transactions in the other peer, then the connected-back peer fails on a query with "timed out" error.  +*Steps*+ 1) Bootstrap a solo/kafka network with 4 peers (peer0org1, peer1org1, peer0org2, peer1org2),  2) do an invoke in peer0org1 3) Disconnect peer0org1 (docker disconnect that peer from the network that was created for the test in the docker compose) 4) run 2 invokes in other peer of the org peer1org1 5) connect back peer0org1 6) Query on peer0org1  +*Result observed:*+ Step 6 fails with `Error: Error endorsing query: rpc error: code = Unknown desc = error executing chaincode: failed to execute transaction: timeout expired while executing transaction`  *log of the peer attached*  +*Expected:*+ Step 6 passes, gives back the correct value of queried key.  +*More Info:*+ 1) if we swap peer0org1 and peer1org1 functionality (i, e.instead of  invokeQueryPeer0-disconnectPeer0-invokeInPeer1-ConnectbackPeer0 ,  if we do  invokeQueryPeer1-disconnectPeer1-invokeInPeer0-ConnectBackPeer1 ) the test passes as expected.Â   2) Test of disconnecting the CC container from the network did not stop the normal functioning of the of the peers.  ></description> </Issue>
