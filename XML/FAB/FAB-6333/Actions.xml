<Action id="31522" issue="21048" author="scottz" type="comment" body="I upgraded this to High issue, as it is causing failures in fabric-test CI." created="2017-10-02 15:50:45.0" updateauthor="scottz" updated="2017-10-02 15:50:45.0"/>
<Action id="31615" issue="21048" author="adnanchoudhury" type="comment" body="This issue is likely related to FAB-6017. Murali is putting a fix for that and once the fix is in, we will test again to see the results." created="2017-10-04 18:19:39.0" updateauthor="adnanchoudhury" updated="2017-10-04 18:20:07.0"/>
<Action id="31631" issue="21048" author="muralisr" type="comment" body=" ~AdnanChoudhury  the fix is in. However note that it might take a bit of time for the containers to detect disconnect and terminate.  Perhaps manually monitor the peer log to look for chaincode termination and they try the query as a first step to test the fix." created="2017-10-05 12:43:28.0" updateauthor="muralisr" updated="2017-10-05 12:43:28.0"/>
<Action id="31649" issue="21048" author="adnanchoudhury" type="comment" created="2017-10-05 18:13:55.0" updateauthor="adnanchoudhury" updated="2017-10-05 18:13:55.0"> <body><! CDATA  ~muralisr  With the updated Fabric images I observe that: 1) After the peer is disconnected, it takes about *5 minutes* for the attached CC container to exit, and it exits with message:     {code:java} UTC  shim  func1 -> ERRO 001 Received error from server, ending chaincode stream: rpc error: code = Unavailable desc = transport is closing Error starting Simple chaincode: rpc error: code = Unavailable desc = transport is closing {code}     2) Once CC container is down, if I connect the peer back, the peer tries to revive and connect back with the existing CC container, *but fails*, heres the relevant peer log {code:java} ``` 2017-10-05 16:32:06.899 UTC  chaincode  launchAndWaitForRegister -> DEBU 6f0 chaincode mycc:0 is being launched 2017-10-05 16:32:06.899 UTC  chaincode  getLaunchConfigs -> DEBU 6f1 Executable is chaincode 2017-10-05 16:32:06.899 UTC  chaincode  getLaunchConfigs -> DEBU 6f2 Args  chaincode -peer.address=peer0.org1.example.com:7052  2017-10-05 16:32:06.899 UTC  chaincode  getLaunchConfigs -> DEBU 6f3 Envs  CORE_CHAINCODE_ID_NAME=mycc:0 CORE_PEER_TLS_ENABLED=false CORE_CHAINCODE_LOGGING_LEVEL=info CORE_CHAINCODE_LOGGING_SHIM=warning CORE_CHAINCODE_LOGGING_FORMAT=%{color}%{time:2006-01-02 15:04:05.000 MST}  %{module}  %{shortfunc} -> %{level:.4s} %{id:03x}%{color:reset} %{message}  2017-10-05 16:32:06.899 UTC  chaincode  getLaunchConfigs -> DEBU 6f4 FilesToUpload    2017-10-05 16:32:06.899 UTC  chaincode  launchAndWaitForRegister -> DEBU 6f5 start container: mycc:0(networkid:bea15880a9e811e796f4a45e60f04519,peerid:peer0.org1.example.com) 2017-10-05 16:32:06.899 UTC  chaincode  launchAndWaitForRegister -> DEBU 6f6 start container with args: chaincode -peer.address=peer0.org1.example.com:7052 2017-10-05 16:32:06.899 UTC  chaincode  launchAndWaitForRegister -> DEBU 6f7 start container with env: CORE_CHAINCODE_ID_NAME=mycc:0 CORE_PEER_TLS_ENABLED=false CORE_CHAINCODE_LOGGING_LEVEL=info CORE_CHAINCODE_LOGGING_SHIM=warning CORE_CHAINCODE_LOGGING_FORMAT=%{color}%{time:2006-01-02 15:04:05.000 MST}  %{module}  %{shortfunc} -> %{level:.4s} %{id:03x}%{color:reset} %{message} 2017-10-05 16:32:06.899 UTC  container  lockContainer -> DEBU 6f8 waiting for container(bea15880a9e811e796f4a45e60f04519-peer0.org1.example.com-mycc-0) lock 2017-10-05 16:32:06.899 UTC  container  lockContainer -> DEBU 6f9 got container (bea15880a9e811e796f4a45e60f04519-peer0.org1.example.com-mycc-0) lock 2017-10-05 16:32:06.900 UTC  dockercontroller  Start -> DEBU 6fa Cleanup container bea15880a9e811e796f4a45e60f04519-peer0.org1.example.com-mycc-0 2017-10-05 16:32:06.907 UTC  dockercontroller  stopInternal -> DEBU 6fb Stop container bea15880a9e811e796f4a45e60f04519-peer0.org1.example.com-mycc-0(Container not running: bea15880a9e811e796f4a45e60f04519-peer0.org1.example.com-mycc-0) 2017-10-05 16:32:06.908 UTC  dockercontroller  stopInternal -> DEBU 6fc Kill container bea15880a9e811e796f4a45e60f04519-peer0.org1.example.com-mycc-0 (API error (500): {"message":"Cannot kill container bea15880a9e811e796f4a45e60f04519-peer0.org1.example.com-mycc-0: Container 9fec0c984efc39173ea066a2753c900a36e279d3bf99e911e6f1fd35837d2d22 is not running"} ) 2017-10-05 16:32:06.962 UTC  dockercontroller  stopInternal -> DEBU 6fd Removed container bea15880a9e811e796f4a45e60f04519-peer0.org1.example.com-mycc-0 2017-10-05 16:32:06.962 UTC  dockercontroller  Start -> DEBU 6fe Start container bea15880a9e811e796f4a45e60f04519-peer0.org1.example.com-mycc-0 2017-10-05 16:32:06.962 UTC  dockercontroller  createContainer -> DEBU 6ff Create container: bea15880a9e811e796f4a45e60f04519-peer0.org1.example.com-mycc-0 2017-10-05 16:32:07.179 UTC  dockercontroller  createContainer -> DEBU 700 Created container: bea15880a9e811e796f4a45e60f04519-peer0.org1.example.com-mycc-0-3acfb8c2b5da008eb8a6ca2e06c91679c3e26125c90b47ff34ce0fabff3d1570 2017-10-05 16:32:07.760 UTC  dockercontroller  Start -> DEBU 701 Started container bea15880a9e811e796f4a45e60f04519-peer0.org1.example.com-mycc-0 2017-10-05 16:32:07.760 UTC  container  unlockContainer -> DEBU 702 container lock deleted(bea15880a9e811e796f4a45e60f04519-peer0.org1.example.com-mycc-0)               2017-10-05 16:37:06.728 UTC  chaincode  launchAndWaitForRegister -> DEBU 703 stopping due to error while launching: timeout expired while starting chaincode mycc:0(networkid:bea15880a9e811e796f4a45e60f04519,peerid:peer0.org1.example.com,tx:9282ee97895fa861e74216f718de1a074c9a30b0acc125b988d2cf7ef4ed23af) github.com/hyperledger/fabric/core/chaincode.(*ChaincodeSupport).launchAndWaitForRegister /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/chaincode_support.go:533 github.com/hyperledger/fabric/core/chaincode.(*ChaincodeSupport).Launch /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/chaincode_support.go:694 github.com/hyperledger/fabric/core/chaincode.Execute /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/exectransaction.go:45 github.com/hyperledger/fabric/core/chaincode.ExecuteChaincode /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/chaincodeexec.go:85 github.com/hyperledger/fabric/core/endorser.(*Endorser).callChaincode /opt/gopath/src/github.com/hyperledger/fabric/core/endorser/endorser.go:117 github.com/hyperledger/fabric/core/endorser.(*Endorser).simulateProposal /opt/gopath/src/github.com/hyperledger/fabric/core/endorser/endorser.go:262 github.com/hyperledger/fabric/core/endorser.(*Endorser).ProcessProposal /opt/gopath/src/github.com/hyperledger/fabric/core/endorser/endorser.go:477 github.com/hyperledger/fabric/core/handlers/auth.(*filter).ProcessProposal /opt/gopath/src/github.com/hyperledger/fabric/core/handlers/auth/auth.go:38 github.com/hyperledger/fabric/protos/peer._Endorser_ProcessProposal_Handler /opt/gopath/src/github.com/hyperledger/fabric/protos/peer/peer.pb.go:112 github.com/hyperledger/fabric/vendor/google.golang.org/grpc.(*Server).processUnaryRPC /opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/server.go:781 github.com/hyperledger/fabric/vendor/google.golang.org/grpc.(*Server).handleStream /opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/server.go:981 github.com/hyperledger/fabric/vendor/google.golang.org/grpc.(*Server).serveStreams.func1.1 /opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/server.go:551 runtime.goexit /opt/go/src/runtime/asm_amd64.s:2337 2017-10-05 16:37:06.728 UTC  container  lockContainer -> DEBU 704 waiting for container(bea15880a9e811e796f4a45e60f04519-peer0.org1.example.com-mycc-0) lock 2017-10-05 16:37:06.728 UTC  container  lockContainer -> DEBU 705 got container (bea15880a9e811e796f4a45e60f04519-peer0.org1.example.com-mycc-0) lock 2017-10-05 16:37:06.730 UTC  dockercontroller  stopInternal -> DEBU 706 Stop container bea15880a9e811e796f4a45e60f04519-peer0.org1.example.com-mycc-0(Container not running: bea15880a9e811e796f4a45e60f04519-peer0.org1.example.com-mycc-0) 2017-10-05 16:37:06.732 UTC  dockercontroller  stopInternal -> DEBU 707 Kill container bea15880a9e811e796f4a45e60f04519-peer0.org1.example.com-mycc-0 (API error (500): {"message":"Cannot kill container bea15880a9e811e796f4a45e60f04519-peer0.org1.example.com-mycc-0: Container f05138b1ad64425f6602755d8948a239bdf1129b098a37288d86c68cc0d9522d is not running"} ) 2017-10-05 16:37:06.778 UTC  dockercontroller  stopInternal -> DEBU 708 Removed container bea15880a9e811e796f4a45e60f04519-peer0.org1.example.com-mycc-0 2017-10-05 16:37:06.778 UTC  container  unlockContainer -> DEBU 709 container lock deleted(bea15880a9e811e796f4a45e60f04519-peer0.org1.example.com-mycc-0) 2017-10-05 16:37:06.778 UTC  chaincode  func1 -> DEBU 70a chaincode mycc:0 launch seq completed 2017-10-05 16:37:06.778 UTC  chaincode  Launch -> ERRO 70b launchAndWaitForRegister failed: timeout expired while starting chaincode mycc:0(networkid:bea15880a9e811e796f4a45e60f04519,peerid:peer0.org1.example.com,tx:9282ee97895fa861e74216f718de1a074c9a30b0acc125b988d2cf7ef4ed23af) github.com/hyperledger/fabric/core/chaincode.(*ChaincodeSupport).launchAndWaitForRegister /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/chaincode_support.go:533 github.com/hyperledger/fabric/core/chaincode.(*ChaincodeSupport).Launch /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/chaincode_support.go:694 github.com/hyperledger/fabric/core/chaincode.Execute /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/exectransaction.go:45 github.com/hyperledger/fabric/core/chaincode.ExecuteChaincode /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/chaincodeexec.go:85 github.com/hyperledger/fabric/core/endorser.(*Endorser).callChaincode /opt/gopath/src/github.com/hyperledger/fabric/core/endorser/endorser.go:117 github.com/hyperledger/fabric/core/endorser.(*Endorser).simulateProposal /opt/gopath/src/github.com/hyperledger/fabric/core/endorser/endorser.go:262 github.com/hyperledger/fabric/core/endorser.(*Endorser).ProcessProposal /opt/gopath/src/github.com/hyperledger/fabric/core/endorser/endorser.go:477 github.com/hyperledger/fabric/core/handlers/auth.(*filter).ProcessProposal /opt/gopath/src/github.com/hyperledger/fabric/core/handlers/auth/auth.go:38 github.com/hyperledger/fabric/protos/peer._Endorser_ProcessProposal_Handler /opt/gopath/src/github.com/hyperledger/fabric/protos/peer/peer.pb.go:112 github.com/hyperledger/fabric/vendor/google.golang.org/grpc.(*Server).processUnaryRPC /opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/server.go:781 github.com/hyperledger/fabric/vendor/google.golang.org/grpc.(*Server).handleStream /opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/server.go:981 github.com/hyperledger/fabric/vendor/google.golang.org/grpc.(*Server).serveStreams.func1.1 /opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/server.go:551 runtime.goexit /opt/go/src/runtime/asm_amd64.s:2337 2017-10-05 16:37:06.779 UTC  chaincode  ExecuteChaincode -> ERRO 70c timeout expired while starting chaincode mycc:0(networkid:bea15880a9e811e796f4a45e60f04519,peerid:peer0.org1.example.com,tx:9282ee97895fa861e74216f718de1a074c9a30b0acc125b988d2cf7ef4ed23af) github.com/hyperledger/fabric/core/chaincode.(*ChaincodeSupport).launchAndWaitForRegister /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/chaincode_support.go:533 github.com/hyperledger/fabric/core/chaincode.(*ChaincodeSupport).Launch /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/chaincode_support.go:694 github.com/hyperledger/fabric/core/chaincode.Execute /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/exectransaction.go:45 github.com/hyperledger/fabric/core/chaincode.ExecuteChaincode /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/chaincodeexec.go:85 github.com/hyperledger/fabric/core/endorser.(*Endorser).callChaincode /opt/gopath/src/github.com/hyperledger/fabric/core/endorser/endorser.go:117 github.com/hyperledger/fabric/core/endorser.(*Endorser).simulateProposal /opt/gopath/src/github.com/hyperledger/fabric/core/endorser/endorser.go:262 github.com/hyperledger/fabric/core/endorser.(*Endorser).ProcessProposal /opt/gopath/src/github.com/hyperledger/fabric/core/endorser/endorser.go:477 github.com/hyperledger/fabric/core/handlers/auth.(*filter).ProcessProposal /opt/gopath/src/github.com/hyperledger/fabric/core/handlers/auth/auth.go:38 github.com/hyperledger/fabric/protos/peer._Endorser_ProcessProposal_Handler /opt/gopath/src/github.com/hyperledger/fabric/protos/peer/peer.pb.go:112 github.com/hyperledger/fabric/vendor/google.golang.org/grpc.(*Server).processUnaryRPC /opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/server.go:781 github.com/hyperledger/fabric/vendor/google.golang.org/grpc.(*Server).handleStream /opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/server.go:981 github.com/hyperledger/fabric/vendor/google.golang.org/grpc.(*Server).serveStreams.func1.1 /opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/server.go:551 runtime.goexit /opt/go/src/runtime/asm_amd64.s:2337 error executing chaincode 2017-10-05 16:37:06.779 UTC  endorser  callChaincode -> DEBU 70d Exit 2017-10-05 16:37:06.779 UTC  endorser  simulateProposal -> ERRO 70e failed to invoke chaincode name:"mycc"  on transaction 9282ee97895fa861e74216f718de1a074c9a30b0acc125b988d2cf7ef4ed23af, error: timeout expired while starting chaincode mycc:0(networkid:bea15880a9e811e796f4a45e60f04519,peerid:peer0.org1.example.com,tx:9282ee97895fa861e74216f718de1a074c9a30b0acc125b988d2cf7ef4ed23af) github.com/hyperledger/fabric/core/chaincode.(*ChaincodeSupport).launchAndWaitForRegister /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/chaincode_support.go:533 github.com/hyperledger/fabric/core/chaincode.(*ChaincodeSupport).Launch /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/chaincode_support.go:694 github.com/hyperledger/fabric/core/chaincode.Execute /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/exectransaction.go:45 github.com/hyperledger/fabric/core/chaincode.ExecuteChaincode /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/chaincodeexec.go:85 github.com/hyperledger/fabric/core/endorser.(*Endorser).callChaincode /opt/gopath/src/github.com/hyperledger/fabric/core/endorser/endorser.go:117 github.com/hyperledger/fabric/core/endorser.(*Endorser).simulateProposal /opt/gopath/src/github.com/hyperledger/fabric/core/endorser/endorser.go:262 github.com/hyperledger/fabric/core/endorser.(*Endorser).ProcessProposal /opt/gopath/src/github.com/hyperledger/fabric/core/endorser/endorser.go:477 github.com/hyperledger/fabric/core/handlers/auth.(*filter).ProcessProposal /opt/gopath/src/github.com/hyperledger/fabric/core/handlers/auth/auth.go:38 github.com/hyperledger/fabric/protos/peer._Endorser_ProcessProposal_Handler /opt/gopath/src/github.com/hyperledger/fabric/protos/peer/peer.pb.go:112 github.com/hyperledger/fabric/vendor/google.golang.org/grpc.(*Server).processUnaryRPC /opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/server.go:781 github.com/hyperledger/fabric/vendor/google.golang.org/grpc.(*Server).handleStream /opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/server.go:981 github.com/hyperledger/fabric/vendor/google.golang.org/grpc.(*Server).serveStreams.func1.1 /opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/server.go:551 runtime.goexit /opt/go/src/runtime/asm_amd64.s:2337 error executing chaincode 2017-10-05 16:37:06.779 UTC  endorser  simulateProposal -> DEBU 70f Exit 2017-10-05 16:37:06.779 UTC  lockbasedtxmgr  Done -> DEBU 710 Done with transaction simulation / query execution  9282ee97895fa861e74216f718de1a074c9a30b0acc125b988d2cf7ef4ed23af  2017-10-05 16:37:06.779 UTC  endorser  ProcessProposal -> DEBU 711 Exit ```      {code}     and the CC Container , which respawns and then exits, has following in its log: ```    {code:java} 2017-10-05 16:32:10.742 UTC  shim  userChaincodeStreamGetter -> ERRO 001 context deadline exceeded error trying to connect to local peer github.com/hyperledger/fabric/core/chaincode/shim.userChaincodeStreamGetter /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/shim/chaincode.go:119 github.com/hyperledger/fabric/core/chaincode/shim.Start /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/shim/chaincode.go:158 main.main /chaincode/input/src/github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02/chaincode_example02.go:195 runtime.main /opt/go/src/runtime/proc.go:185 runtime.goexit /opt/go/src/runtime/asm_amd64.s:2337 Error starting Simple chaincode: error trying to connect to local peer: context deadline exceeded {code} ```  ></body> </Action>
<Action id="31650" issue="21048" author="muralisr" type="comment" created="2017-10-05 18:28:27.0" updateauthor="muralisr" updated="2017-10-05 18:31:47.0"> <body><! CDATA  ~AdnanChoudhury  so the fact chaincode detects error and dies is a good thing... that's what I'd expect (btw, you might also see an error on the peer side in peer logs sooner than 5 mins).  I do not know why the launch fails. Prima facie that would appear to be a different problem than what we started with ... but don't mind looking into that here :).  Was the docker network connect issued on the peer ?  can you add CORE_CHAINCODE_LOGGING_LEVEL=debug and CORE_VM_DOCKER_ATTACHSTDOUT=true to peer services env and get peer logs please ?   ></body> </Action>
<Action id="31656" issue="21048" author="adnanchoudhury" type="comment" body=" ~muralisr  Attached the log file, yes, both the connect and disconnect were issued from the peer." created="2017-10-05 20:59:21.0" updateauthor="adnanchoudhury" updated="2017-10-05 20:59:21.0"/>
<Action id="31660" issue="21048" author="muralisr" type="comment" created="2017-10-06 02:25:52.0" updateauthor="muralisr" updated="2017-10-06 02:25:52.0"> <body><! CDATA  ~AdnanChoudhury  worked for me with standard e2e_cli test on latest master. Attaching peer0.org1.example.com.log.  Steps # run e2e_cli to success # docker network disconnect e2ecli_default peer0.org1.example.com # wait for "Deregister handler: mycc:1.0"  to show up on peer0.org1.example.com log (for the first test you might as well wait for the chaincode to go away too) # docker network connect e2ecli_default peer0.org1.example.com # docker exec -it cli bash # CORE_PEER_LOCALMSPID="Org1MSP" CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp CORE_PEER_ADDRESS=peer0.org1.example.com:7051  peer chaincode query -C mychannel -n mycc -c '{"Args": "query","a" }'  The chaincode comes up and the query succeeds.     ></body> </Action>
<Action id="31678" issue="21048" author="adnanchoudhury" type="comment" created="2017-10-06 15:20:38.0" updateauthor="adnanchoudhury" updated="2017-10-06 15:20:38.0"> <body><! CDATA  ~muralisr  I also see the same result as yours when I follow your steps (it passes), my scenario was a bit different----I do some invokes on the non-disconnected peer (peer1.org1.example.com) while peer0.org0 is disconnected. So, after your step 3, I did    3a) invoke on peer1.org1 3b) query on peer1.org1  I ran the tests again, your scenario is passing while my one is failing.  ></body> </Action>
<Action id="31690" issue="21048" author="muralisr" type="comment" created="2017-10-06 21:16:16.0" updateauthor="muralisr" updated="2017-10-06 21:18:15.0"> <body><! CDATA worked for me ...  attached peer0.org1.example.com.with.extra.invoke # run e2e_cli to success # docker network disconnect e2ecli_default peer0.org1.example.com # wait for "Deregister handler: mycc:1.0" to show up on peer0.org1.example.com log (for the first test you might as well wait for the chaincode to go away too) # docker exec -it cli bash # CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls/ca.crt CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp CORE_PEER_ADDRESS=peer1.org2.example.com:7051 CORE_PEER_LOCALMSPID=Org2MSP peer chaincode invoke -C mychannel -n mycc -c '\{"Args": "invoke","a", "b", "10" }' -o orderer.example.com:7050 --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem # CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls/ca.crt CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp CORE_PEER_ADDRESS=peer1.org2.example.com:7051 CORE_PEER_LOCALMSPID=Org2MSP peer chaincode query -C mychannel -n mycc -c '\{"Args": "query","a" }' --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pemdocker network connect e2ecli_default peer0.org1.example.com # CORE_PEER_LOCALMSPID="Org1MSP" CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp CORE_PEER_ADDRESS=peer0.org1.example.com:7051 peer chaincode query -C mychannel -n mycc -c ' \{"Args": "query","a" }     I didn't wait after 6 but if you like wait for peer0.org1.example.com to die before doing 6 and 7.     By the way, you say  3a) invoke on peer1.org1 3b) query on peer1.org1  but per e2e_cli it should be peer1.org2 .... I'm assuming typo.  ></body> </Action>
<Action id="31972" issue="21048" author="adnanchoudhury" type="comment" created="2017-10-10 14:48:33.0" updateauthor="adnanchoudhury" updated="2017-10-10 15:44:02.0"> <body><! CDATA Hi  ~muralisr , no that was not a typo, I do the invoke-query in peer1.Org1 during when peer0.Org1 is disconnected. So in short,  1) Bring up the network and channel 2) install chaincode, instantiate-query-invoke in peer0.org1 3) disconnect peer0.org1 4)  query-invoke in peer1.org1 (after seeing "deregister:mycc" in peer0.org1 log) 5) Connect peer0.org1 back 6) Attempt to invoke and query in peer0.org1 fails  Can you please check this scenario? I am using images from a build that includes your CR, but it failed with the same timeout error.  ></body> </Action>
<Action id="32016" issue="21048" author="muralisr" type="comment" created="2017-10-11 20:37:17.0" updateauthor="muralisr" updated="2017-10-11 22:09:07.0"> <body><! CDATA  ~AdnanChoudhury  I had to do a install on peer1.org1. So with that I was able to recreate the problem ... the interesting thing was that I was able to make it work by altering the steps a bit.  *Fails* # run e2e_cli to success # docker network disconnect e2ecli_default peer0.org1.example.com # wait for "Deregister handler: mycc:1.0" to show up on peer0.org1.example.com log (for the first test you might as well wait for the chaincode to go away too) # docker exec -it cli bash # install mycc on peer1.org1  CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp CORE_PEER_LOCALMSPID="Org1MSP" CORE_PEER_ADDRESS=peer1.org1.example.com:7051 peer chaincode install -n mycc -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 # invoke cc on peer1.org1 CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp CORE_PEER_LOCALMSPID="Org1MSP" CORE_PEER_ADDRESS=peer1.org1.example.com:7051 peer chaincode invoke -o orderer.example.com:7050  --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n mycc -c '\{"Args": "invoke","a","b","10" }' # docker network connect e2ecli_default peer0.org1.example.com # invoke cc on peer0.org1 (fails) CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt CORE_PEER_LOCALMSPID="Org1MSP" CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp CORE_PEER_ADDRESS=peer0.org1.example.com:7051 peer chaincode query -C mychannel -n mycc -c ' \{"Args": "query","a" }  *Succeeds (do disconnect after bringing up peer1.org1)* # run e2e_cli to success # docker exec -it cli bash # install mycc on peer1.org1  CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp CORE_PEER_LOCALMSPID="Org1MSP" CORE_PEER_ADDRESS=peer1.org1.example.com:7051 peer chaincode install -n mycc -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 # invoke cc on peer1.org1 CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp CORE_PEER_LOCALMSPID="Org1MSP" CORE_PEER_ADDRESS=peer1.org1.example.com:7051 peer chaincode invoke -o orderer.example.com:7050  --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n mycc -c '\{"Args": "invoke","a","b","10" }' # *docker network disconnect e2ecli_default peer0.org1.example.com* # wait for "Deregister handler: mycc:1.0" to show up on peer0.org1.example.com log (for the first test you might as well wait for the chaincode to go away too) # docker network connect e2ecli_default peer0.org1.example.com # invoke cc on peer0.org1 (works) CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt CORE_PEER_LOCALMSPID="Org1MSP" CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp CORE_PEER_ADDRESS=peer0.org1.example.com:7051 peer chaincode query -C mychannel -n mycc -c ' \{"Args": "query","a" }  *Succeeds (rm newly started CC on peer1.org1 before querying peer0.org1 again)* # run e2e_cli to success # docker network disconnect e2ecli_default peer0.org1.example.com # wait for "Deregister handler: mycc:1.0" to show up on peer0.org1.example.com log (for the first test you might as well wait for the chaincode to go away too) # docker exec -it cli bash # install mycc on peer1.org1  CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp CORE_PEER_LOCALMSPID="Org1MSP" CORE_PEER_ADDRESS=peer1.org1.example.com:7051 peer chaincode install -n mycc -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 # invoke cc on peer1.org1 CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp CORE_PEER_LOCALMSPID="Org1MSP" CORE_PEER_ADDRESS=peer1.org1.example.com:7051 peer chaincode invoke -o orderer.example.com:7050  --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n mycc -c '\{"Args": "invoke","a","b","10" }' # docker network connect e2ecli_default peer0.org1.example.com # *docker rm -f dev-peer1.org1.example.com-mycc-1.0* # invoke cc on peer0.org1 (succeeds) CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt CORE_PEER_LOCALMSPID="Org1MSP" CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp CORE_PEER_ADDRESS=peer0.org1.example.com:7051 peer chaincode query -C mychannel -n mycc -c ' \{"Args": "query","a" }  Need to debug to get to the bottom....but let me know (1) if you see the same thing and (2) if you have any ideas   ></body> </Action>
<Action id="32020" issue="21048" author="adnanchoudhury" type="comment" body=" ~muralisr  For your scenario 3 (remove the CC in peer1.Org1 before querying peer0.org1), the heading says &quot;succeeds&quot; but step 9 says &quot;fails&quot;. if it actually failed, then I observe the exact same behavior for the three cases." created="2017-10-11 21:58:18.0" updateauthor="adnanchoudhury" updated="2017-10-11 21:58:30.0"/>
<Action id="32021" issue="21048" author="muralisr" type="comment" created="2017-10-11 22:09:35.0" updateauthor="muralisr" updated="2017-10-11 22:11:59.0"> <body><! CDATA _the heading says "succeeds" but step 9 says "fails"_  I meant to say succeeds (copy paste error)... fixed that.   I was able to recreate your scenario and found two ways to make it work (on my laptop :) )  ></body> </Action>
<Action id="32970" issue="21048" author="cbl" type="comment" created="2017-10-23 08:23:07.0" updateauthor="cbl" updated="2017-10-23 08:23:07.0"> <body><! CDATA For the scenario 3, I also got a failed result in step 9. The error message is like: {quote}Error: Error endorsing query: rpc error: code = Unknown desc = error executing chaincode: timeout expired while starting chaincode mycc:1.0(networkid:dev,peerid:peer0.org1.example.com,tx:b5cc4b81115f86d01bee4ce767ac614a50058f3b3922d7f1a3434511f0f5ecdb) - <nil> {quote}  ></body> </Action>
<Action id="32976" issue="21048" author="muralisr" type="comment" created="2017-10-23 11:48:02.0" updateauthor="muralisr" updated="2017-10-23 11:48:02.0"> <body><! CDATA  ~cbl  I did work with  ~AdnanChoudhury  to confirm that scenario 3 works for him. Wonder if there's something that's tripping you up.  In any case,  scenarios 2 and 3 are just exploratory.  If we don't do step6 on the first scenario, it works. The real question is why would starting up a new chaincode to a different peer1 cause chaincode on peer0 to fail after reconnect ?  ></body> </Action>
<Action id="34225" issue="21048" author="muralisr" type="comment" created="2017-11-02 03:47:06.0" updateauthor="muralisr" updated="2017-11-02 03:48:46.0"> <body><! CDATA  ~cbl  as discussed offline I traced your suggestion to follow the changed IP address. Sure enough, the changed IP address after reconnect causes a problem as the original chaincode listener on peer0.org1.example.com continues to listen on the old address that was resolved by the peer0.org1.example.com hostname when the peer was started.  We can have CHAINCODE_LISTENADDRESS and CHAINCODE_CONNECTADDRESS with the former typically set to 0.0.0.0:7052 (listen on any IP) and the latter being the connecting host name for the chaincode. So for example, the addresses would like   {code:java} peer0.org1.example.com: container_name: peer0.org1.example.com extends: file: peer-base.yaml service: peer-base environment: .... .... - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052 - CORE_PEER_CHAINCODECONNECTADDRESS=peer0.org1.example.com:7052 .... .... {code}  Note that the peer has a similar pair of addresses too in core.yaml so this pattern is not new.  Do add any comments/corrections too please.   ></body> </Action>
<Action id="34231" issue="21048" author="cbl" type="comment" body="Will submit a CR to separate chaincode listen address and connect address to fix this issue." created="2017-11-02 08:55:09.0" updateauthor="cbl" updated="2017-11-02 08:55:09.0"/>
<Action id="34358" issue="21048" author="cbl" type="comment" created="2017-11-06 09:54:32.0" updateauthor="cbl" updated="2017-11-06 09:54:32.0"> <body><! CDATA The CR has been submitted to:  https://gerrit.hyperledger.org/r/#/c/15217/   Feel free to review it. Thanks.  ></body> </Action>
<Action id="35554" issue="21048" author="scottz" type="comment" body="Boliang, Did you rerun the fabric-test testcase successfully after merging your fix into the fabric repository?" created="2017-11-28 04:33:52.0" updateauthor="scottz" updated="2017-11-28 04:33:52.0"/>
<Action id="35555" issue="21048" author="cbl" type="comment" body="Haven&apos;t test that yet. Could you create a new issue with the error logs and assign it to me? Will take a look at that." created="2017-11-28 06:05:39.0" updateauthor="cbl" updated="2017-11-28 06:05:39.0"/>
<Action id="35657" issue="21048" author="adnanchoudhury" type="comment" created="2017-11-29 22:18:06.0" updateauthor="adnanchoudhury" updated="2017-11-29 22:18:06.0"> <body><! CDATA Tested the behave test specific for this FAB, passed in the CI (one-off test, not part of regular run) https://jenkins.hyperledger.org/job/fabric-test-verify-x86_64/576/console  ></body> </Action>
<Action id="35697" issue="21048" author="cbl" type="comment" created="2017-12-01 03:39:50.0" updateauthor="cbl" updated="2017-12-01 03:39:50.0"> <body><! CDATA Thanks to  ~AdnanChoudhury .    ~scottz , if you find sth wrong, feel free to provide more details in a new issue.  This one has been closed.  ></body> </Action>
<Action id="35707" issue="21048" author="muralisr" type="comment" body=" ~cbl  thank you!" created="2017-12-01 13:04:10.0" updateauthor="muralisr" updated="2017-12-01 13:04:10.0"/>
