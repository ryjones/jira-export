<Issue id="42930" key="FAB-16898" number="16898" project="10002" reporter="guoger" assignee="guoger" creator="guoger" type="10003" summary="Remove invalid test" priority="3" resolution="10000" status="6" created="2019-10-22 07:53:05.0" updated="2019-10-22 14:34:43.0" resolutiondate="2019-10-22 14:34:43.0" votes="0" watches="1" workflowId="56032"> <description><! CDATA  this UT|https://github.com/hyperledger/fabric/blob/4b786b4fe4019315170fe2d48231932f9a626203/orderer/common/multichannel/registrar_test.go#L129-L145  should be removed  {code} 	// Tests a chain which contains blocks with multi-transactions mixed with config txs, 	// and a single tx which is not a config tx, none count as config blocks so nil should return 	t.Run("GetConfigTx - failure", func(t *testing.T) { 		_, rl := newRAMLedgerAndFactory(10, "testchannelid", genesisBlockSys) 		for i := 0; i < 10; i++ { 			rl.Append(blockledger.CreateNextBlock(rl,   *cb.Envelope{ 				makeNormalTx("testchannelid", i), 				makeConfigTx("testchannelid", i), 			})) 		} 		rl.Append(blockledger.CreateNextBlock(rl,   *cb.Envelope{makeNormalTx("testchannelid", 11)})) 		assert.Panics(t, func() { configTx(rl) }, "Should have panicked because there was no config tx")  		block := blockledger.CreateNextBlock(rl,   *cb.Envelope{makeNormalTx("testchannelid", 12)}) 		block.Metadata.Metadata cb.BlockMetadataIndex_LAST_CONFIG  =   byte("bad metadata") 		assert.Panics(t, func() { configTx(rl) }, "Should have panicked because of bad last config metadata") 	}) {code}  - it only works for ram ledger whose capacity can be set - the second sub-test passes due to the same reason as the first, not what it claimed  ></description> </Issue>
