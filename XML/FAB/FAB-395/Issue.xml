<Issue id="12696" key="FAB-395" number="395" project="10002" reporter="tuand" assignee="tuand" creator="tuand" type="10001" summary="As a Hyperledger Fabric system administrator, I want to be able to bootstrap the startup of all orderer nodes" priority="2" resolution="10000" status="6" created="2016-09-14 19:50:29.0" updated="2018-12-12 21:18:19.0" resolutiondate="2017-04-10 22:33:25.0" votes="0" watches="3" workflowId="36240"> <description><! CDATA Assuming that we start with one peer (P0) and one Orderer (O0), we want to be able to add other peers (P1,P2,..., Pn) and other Orderers (O1, O2,...,On) and record these additions on the blockchain.  From current discussions: # O0 provisioned with signing cert # O0 public key exported to file # file imported by P0 # P0 gather  ECert, other data for identification  using O0 public key, encrypts to file # P0 writes its identifying data to blockchain (Note that we will need a special process as consensus is not working yet ) # P0 writes O0 identifying data to blockchain ( again note special consensus process ) # O0 imports file from P0 - P0 and O0 now have a communications channel # Other orderers are added manually like O0 or using a new process using the O0-P0 channel # In some cases, the orderers will have to know which other nodes are authorized orderers and when we can start the consensus protocol. Re-visit the whitelist concept from the original hyperledger fabric implementation # Adding Pn is a proposal with a TBD endorsement policy on P0...Pn-1.  If the ordering service is up then go through consensus and commit.  When Pn starts up , it will do state transfer to sync up with the existing peers. If ordering service is not yet up, fall back on special process same as for P0  ></description> </Issue>
