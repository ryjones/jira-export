<Issue id="24704" key="FAB-7278" number="7278" project="10002" reporter="elli-androulaki" assignee="angelo.decaro" creator="elli-androulaki" type="10001" summary="Define and expose an identity&apos;s owner identifier" priority="3" resolution="10001" status="6" created="2017-12-04 08:34:51.0" updated="2020-01-22 22:17:55.0" resolutiondate="2020-01-22 22:17:55.0" votes="1" watches="4" timeoriginalestimate="57600" timeestimate="57600" workflowId="43208"> <description><! CDATA h2. Motivation   In case of enrollment identities, being able to extract the identity of the identity's owner would allow for deduplication of identities of the same user. This is something to be needed when expiration of identities is considered in Fabric, in which case it will be necessary that there is an overlapping period between expired and renewed identities of the same user.      h2. MSP interface extension   MSP interface would be extended to include the capability of extracting the identifier of the owner of an identity. Notice that in a public verifier setting such a capability is only meaningful for non-privacy-preserving identities.  MSP would be extended with this function:  {{// GetIdentifier returns the provider identifier}} {{GetOwnerIdentifier(ValidatedIdentity) (OwnerIdentifier, error)}}  Exposed by the identity interface as: {code:java} // GetOwnerIdentifier returns the identity's owner identifier GetOwnerIdentifier() (OwnerIdentifier, error) {code} h2. Identity Owner Identifier Format  OwnerIdentifier represents the owner of an identity, and as such there are multiple ways to construct it.    {code:java} type OwnerIdentifier struct { {{   // ProviderIdentifier  is the identifier of the MSP this Owner is    //a member of }}{{    }}{{  MspId string }}    // {{Value is a representation to uniquely identify that user within  }}{{  //the MSP and certifier; for X.509 based }}{{      // identities value can be derived as the concatenation of “DN”    // field of the certificate (or its combinations }}{{with    // enrollment identifier, and/or OUs  included in the    // certificate), with a string uniquely identifying the }}{{      // signing CA in the MSP.}}{{     Owner   byte }}}  {code}    One can set OwnerIdentifier.Owner to be a hashed value including # An identifier of the CA issuing certificates for that user (CertifierIdentifier) # An identifier of the user inside the signing  CA’s namespace/area     _CertifierIdentifier_ should be uniquely identifying the identity issuer for the identity (or identities) of that user. In the standard X.509 based MSP, CertifierIdentifier can be set to * Certifier’s identity IdentityIdentifier * Certifier’s OwnerIdentifier (this could cause nested owner identifiers’ chain) * Certifier’s namespace, i.e., a label attached to a CA’s definition inside the MSP definition to represent a specific CA(to be discussed later)  Options (1) and (2) have the property that if the CA’s identity (certifier’s certificate) ownerIdentifier of the identities produced by it are still valid.     There are multiple ways of defining _OwnerIdentifier.Value_, but to keep it of fixed size, we leverage a hash function H on information that could uniquely identify a user. For the standard X.509 based MSP this information can be the value of the X.509 certificate's DN field. DN stands for Distinguished Name and should be unique among the certificates signed by the same CA). In particular, DB derives from the combination of * CN field, Common Name * OU field, Organisational Unit * O field, Organisation  ></description> </Issue>
