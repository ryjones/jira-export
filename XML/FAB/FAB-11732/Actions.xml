<Action id="58541" issue="33218" author="davidkhala" type="comment" created="2019-03-26 08:11:30.0" updateauthor="davidkhala" updated="2019-03-26 08:11:30.0"> <body><! CDATA I start to watch this since I find an implicit iterator "size" limit ==100,  in StateQueryInterator  returned from `GetPrivateDataByRange` or `GetStateByRange`.  In this limitation, when I try to get the 100th `KV` with iterrator.next(),  error such as following will prompt:  QUERY_STATE_NEXT failed: transaction ID: c84cb2a85b169e4f515c304199c38b22c8c818d55ed3cbf2c4cb91dfb67b0250: query iterator not found  For people seeing same problem, I prepared a quick and dirty work-around here to share.  https://github.com/davidkhala/fabric-common-chaincode-golang/blob/master/stateIterator.go   ></body> </Action>
<Action id="58544" issue="33218" author="davidkhala" type="comment" body="https://gerrit.hyperledger.org/r/#/c/30400/" created="2019-03-26 09:37:13.0" updateauthor="davidkhala" updated="2019-03-26 09:37:13.0"/>
<Action id="65828" issue="33218" author="guoger" type="comment" body=" ~davidkhala  are you still interested in continuing the work via Github?" created="2019-11-28 06:34:55.0" updateauthor="guoger" updated="2019-11-28 06:34:55.0"/>
<Action id="69326" issue="33218" author="JIRAUSER20176" type="comment" created="2020-05-23 22:13:15.0" updateauthor="JIRAUSER20176" updated="2020-05-23 22:14:11.0"> <body><! CDATA To implement this feature, changes are needed on two separate repositories: * fabric-chaincode-go ( https://github.com/hyperledger/fabric-chaincode-go)|https://github.com/hyperledger/fabric-chaincode-go   Introduce a new API function on ChaincodeStubInterface interface, GetPrivateDataQueryResultWithPagination() that accepts a collection, query, pageSize and bookmark parameters. * fabric ( https://github.com/hyperledger/fabric)|https://github.com/hyperledger/fabric   Changes need to be applied on chaincode handler function HandleGetQueryResult() with a new case to  take into account if collection and metadata for pagination are set.  Also a new API function ExecuteQueryOnPrivateDataWithMetadata() is needed for QueryExecutor interface that accepts namespace, collection, query  and metadata parameters, that returns the already implemented ExecuteQueryWithMetadata() of state db interface  Finally a new API function ExecuteQueryOnPrivateDataWithMetadata() is needed for DB interface that accepts       I have already implemented a first version of this feature, although for v1.4 and needs to be ported to v2, that seems to working as expected after comparing the chaincode results with the CouchDB direct mango query results. If anyone is interested, can have a look at these changes at this specific commit  https://github.com/tradeline-tech/fabric/commit/67e4d5842bac3bd1951bd30ed74d16a123170250  of the forked fabric repo.        ></body> </Action>
<Action id="69327" issue="33218" author="davidkhala" type="comment" body=" ~guoger  FYR, in 1.x branch I find a special behavior that this 100 limit will not happens in nodejs chaincode. So I guess it is language-specific problem that not related fabric state storage itselft. " created="2020-05-23 22:47:11.0" updateauthor="davidkhala" updated="2020-05-23 22:47:11.0"/>
<Action id="69336" issue="33218" author="senthil1" type="comment" body=" ~manish-sethi   ~denyeart  Do you see value in adding new data export APIs to chaincode? If data export at a chaincode or collection level is required, we can also introduce new peer CLI commands exploiting snapshot APIs. I am not sure whether smart-contract can be used to export data out of a peer. In the longer run, such a private data export using peer CLI is anyway needed for data backup." created="2020-05-26 19:20:51.0" updateauthor="senthil1" updated="2020-05-26 19:31:01.0"/>
<Action id="69340" issue="33218" author="JIRAUSER20176" type="comment" created="2020-05-27 08:30:37.0" updateauthor="JIRAUSER20176" updated="2020-05-27 08:43:39.0"> <body><! CDATA The motivation and the reason i am looking to implement this feature, to use pagination on rich query results for private data collections, is that currently we are using a frontend client to preview documents from an organisation private collection. Some queries need to be run against sensitive data. (e.g. price range) The frontend is handling this by using pagination on the response data.  Currently the option to achieve this, is to query CouchDB and then filter the results on smart-contract level, to only return the desired subset. I think that's not viable, that each time i want a part of documents (e.g. 20) to retrieve the top limit a peer can return (e.g. 10000). I believe that the CouchDB must handle the pagination, in the same way is happening for the ledger data.  ></body> </Action>
<Action id="70326" issue="33218" author="denyeart" type="comment" created="2020-09-15 12:52:17.0" updateauthor="denyeart" updated="2020-09-15 12:52:17.0"> <body><! CDATA Agreed that it will be more efficient to handle pagination of private data natively in new chaincode shim APIs. In the meantime you can do sorted queries. For key range queries, pass the startKey of where you'd like to start or resume. For JSON queries, utilize a sort and add a filter condition on the sorted field(s) of where you'd like to start or resume. As you iterate through results in chaincode, it will retrieve from CouchDB in batches of 1000, as configured in core.yaml peer.ledger.state.couchDBConfig.internalQueryLimit.  ></body> </Action>
<Action id="70828" issue="33218" author="pancham" type="comment" created="2020-11-29 04:06:54.0" updateauthor="pancham" updated="2020-11-29 04:06:54.0"> <body><! CDATA  ~chanioxaris  Are you working on this?  I have also started to work on this issue. If you are not actively working on this issue, can you please assign this issue to me? Otherwise, will liek co-ordinate our efforts.  ></body> </Action>
<Action id="70830" issue="33218" author="JIRAUSER20176" type="comment" created="2020-11-29 11:55:41.0" updateauthor="JIRAUSER20176" updated="2020-11-29 11:55:41.0"> <body><! CDATA Hello  ~Pancham .  Unfortunately i am not working on this issue.  I have assigned to you  ></body> </Action>
<Action id="70976" issue="33218" author="mcudden" type="comment" body="I guess there is no progress on this ticket, Do we know if it will make it into 2021 at all?" created="2020-12-16 09:04:30.0" updateauthor="mcudden" updated="2020-12-16 09:04:30.0"/>
<Action id="71301" issue="33218" author="icarrascol" type="comment" body="any progress on this? the alternative suggested isnt good enough as you cant retrieve small batches (less than 1000) because the limit on custom query isnt being respected." created="2021-01-22 13:59:52.0" updateauthor="icarrascol" updated="2021-01-22 13:59:52.0"/>
<Action id="72062" issue="33218" author="akoita" type="comment" created="2021-09-01 12:36:04.0" updateauthor="akoita" updated="2021-09-01 12:36:04.0"> <body><! CDATA Hello, Just to say that I am trying to implement the pagination in my project and I also feel the need for this feature as well.  ></body> </Action>
<Action id="72435" issue="33218" author="JIRAUSER23052" type="comment" created="2022-03-07 13:33:21.0" updateauthor="JIRAUSER23052" updated="2022-03-07 13:33:21.0"> <body><! CDATA Hello, I would like to continue with this ticket, in our team we need to implement this functionality.   If someone started to work on that please contact me.  ></body> </Action>
<Action id="72503" issue="33218" author="mffrench" type="comment" created="2022-05-20 11:08:34.0" updateauthor="mffrench" updated="2022-05-20 11:08:34.0"> <body><! CDATA Hello,  that is a a missing feature more and more clients are requesting. Do we have an idea when that feature will be available in HLF ? Maybe  ~yalmonte  do you have one ?   Also awaiting that feature, maybe would it be a good idea to provide some example tutorial of your workaround  ~denyeart  ? Maybe is there an example already documented ? Let me know.  Best  ></body> </Action>
<Action id="72900" issue="33218" author="denyeart" type="comment" created="2023-05-04 14:45:13.0" updateauthor="denyeart" updated="2023-05-04 14:45:13.0"> <body><! CDATA This work item will be tracked in GitHub going forward:  https://github.com/hyperledger/fabric/issues/4197  ></body> </Action>
