<Action id="70664" issue="46316" author="wlahti" type="comment" created="2020-11-11 16:46:03.0" updateauthor="wlahti" updated="2020-11-11 16:55:33.0"> <body><! CDATA I'm not certain this scenario is feasible / valid (at least as written). When we wipe clean orderer3 and restart it, the other raft nodes recognize orderer3 since it uses the same TLS credentials. This leads to a panic since the other raft nodes send the info they think orderer3 needs instead of treating it as a fresh node:  {noformat}  e  OrdererOrg.orderer3  2020-11-11 11:19:46.833 EST  orderer.consensus.etcdraft  commitTo -> PANI 093 tocommit(10) is out of range  lastIndex(0) . Was the raft log corrupted, truncated, or lost? channel=testchannel node=3  e  OrdererOrg.orderer3  panic: tocommit(10) is out of range  lastIndex(0) . Was the raft log corrupted, truncated, or lost?  e  OrdererOrg.orderer3    e  OrdererOrg.orderer3  goroutine 280  running :  e  OrdererOrg.orderer3  go.uber.org/zap/zapcore.(*CheckedEntry).Write(0xc0002bcc60, 0x0, 0x0, 0x0)  e  OrdererOrg.orderer3  	/Users/wlahti/gopath/src/github.com/hyperledger/fabric/vendor/go.uber.org/zap/zapcore/entry.go:230 +0x55f  e  OrdererOrg.orderer3  go.uber.org/zap.(*SugaredLogger).log(0xc000404e20, 0xe996504, 0x4d0d3fa, 0x5d, 0xc000701260, 0x2, 0x2, 0x0, 0x0, 0x0)  e  OrdererOrg.orderer3  	/Users/wlahti/gopath/src/github.com/hyperledger/fabric/vendor/go.uber.org/zap/sugar.go:234 +0xf6  e  OrdererOrg.orderer3  go.uber.org/zap.(*SugaredLogger).Panicf(...)  e  OrdererOrg.orderer3  	/Users/wlahti/gopath/src/github.com/hyperledger/fabric/vendor/go.uber.org/zap/sugar.go:159  e  OrdererOrg.orderer3  github.com/hyperledger/fabric/common/flogging.(*FabricLogger).Panicf(0xc000404e28, 0x4d0d3fa, 0x5d, 0xc000701260, 0x2, 0x2)  e  OrdererOrg.orderer3  	/Users/wlahti/gopath/src/github.com/hyperledger/fabric/common/flogging/zap.go:74 +0x7c  e  OrdererOrg.orderer3  go.etcd.io/etcd/raft.(*raftLog).commitTo(0xc000388230, 0xa)  e  OrdererOrg.orderer3  	/Users/wlahti/gopath/src/github.com/hyperledger/fabric/vendor/go.etcd.io/etcd/raft/log.go:203 +0x135  e  OrdererOrg.orderer3  go.etcd.io/etcd/raft.(*raft).handleHeartbeat(0xc0005f6a00, 0x8, 0x3, 0x1, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, ...)  e  OrdererOrg.orderer3  	/Users/wlahti/gopath/src/github.com/hyperledger/fabric/vendor/go.etcd.io/etcd/raft/raft.go:1324 +0x54  e  OrdererOrg.orderer3  go.etcd.io/etcd/raft.stepFollower(0xc0005f6a00, 0x8, 0x3, 0x1, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, ...)  e  OrdererOrg.orderer3  	/Users/wlahti/gopath/src/github.com/hyperledger/fabric/vendor/go.etcd.io/etcd/raft/raft.go:1269 +0x439  e  OrdererOrg.orderer3  go.etcd.io/etcd/raft.(*raft).Step(0xc0005f6a00, 0x8, 0x3, 0x1, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, ...)  e  OrdererOrg.orderer3  	/Users/wlahti/gopath/src/github.com/hyperledger/fabric/vendor/go.etcd.io/etcd/raft/raft.go:971 +0x1218  e  OrdererOrg.orderer3  go.etcd.io/etcd/raft.(*node).run(0xc00068a6c0, 0xc0005f6a00)  e  OrdererOrg.orderer3  	/Users/wlahti/gopath/src/github.com/hyperledger/fabric/vendor/go.etcd.io/etcd/raft/node.go:357 +0x1178  e  OrdererOrg.orderer3  created by go.etcd.io/etcd/raft.StartNode  e  OrdererOrg.orderer3  	/Users/wlahti/gopath/src/github.com/hyperledger/fabric/vendor/go.etcd.io/etcd/raft/node.go:233 +0x449 {noformat} See WIP here: https://github.com/wlahti/fabric/commit/aabf129b4ed2fe2ff54f6bda948a0843e05a1898  ></body> </Action>
<Action id="70665" issue="46316" author="wlahti" type="comment" body=" ~tock  Can you try to figure out a valid scenario and finish the test here?" created="2020-11-11 16:54:28.0" updateauthor="wlahti" updated="2020-11-11 16:54:28.0"/>
<Action id="70669" issue="46316" author="tock" type="comment" body="Correct. Deleting the WAL of a Raft node and restarting it is not a good idea. I will revise the description." created="2020-11-12 16:07:09.0" updateauthor="tock" updated="2020-11-12 16:07:09.0"/>
