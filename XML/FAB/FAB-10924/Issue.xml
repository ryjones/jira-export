<Issue id="31463" key="FAB-10924" number="10924" project="10002" reporter="sykesm" assignee="sykesm" creator="sykesm" type="10003" summary="Data race between eventProcessor.start and EventsServer.Chat cleaning up handlers" priority="4" resolution="10000" status="6" created="2018-06-28 19:45:52.0" updated="2018-07-20 14:17:04.0" resolutiondate="2018-07-02 20:35:31.0" votes="0" watches="1" workflowId="42569"> <description><! CDATA The following data race was reported:  When sending a message to a handler fails due to session timeout or some other transient failure, the channel range loop in the (misnamed) start method will cleanup the handler from the event processor.  When the event server stream associated with a handler encounters an error, the server will cleanup the handler from the event processor.  When the two things happen concurrently, two go routines will concurrently execute cleanup. This results in a concurrent map modification on the handler's interestedEvents map. {code:java} ================== WARNING: DATA RACE Read at 0x00c4204e1350 by goroutine 83:   runtime.mapiterinit()       /usr/local/Cellar/go/1.10.3/libexec/src/runtime/hashmap.go:691 +0x0   github.com/hyperledger/fabric/events/producer.(*eventProcessor).deregisterAll()       /Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/events/producer/events.go:222 +0xa3   github.com/hyperledger/fabric/events/producer.(*eventProcessor).cleanupHandler()       /Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/events/producer/events.go:131 +0x46   github.com/hyperledger/fabric/events/producer.(*EventsServer).Chat()       /Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/events/producer/producer.go:56 +0x53a  Previous write at 0x00c4204e1350 by goroutine 16:   runtime.mapdelete_faststr()       /usr/local/Cellar/go/1.10.3/libexec/src/runtime/hashmap_fast.go:883 +0x0   github.com/hyperledger/fabric/events/producer.(*eventProcessor).deregisterAll()       /Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/events/producer/events.go:227 +0x2a3   github.com/hyperledger/fabric/events/producer.(*eventProcessor).cleanupHandler()       /Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/events/producer/events.go:131 +0x46   github.com/hyperledger/fabric/events/producer.(*eventProcessor).start()       /Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/events/producer/events.go:113 +0x653  Goroutine 83 (running) created at:   github.com/hyperledger/fabric/events/producer.TestRegister_ExpiredIdentity()       /Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/events/producer/producer_test.go:429 +0x1a8   testing.tRunner()       /usr/local/Cellar/go/1.10.3/libexec/src/testing/testing.go:777 +0x16d  Goroutine 16 (running) created at:   github.com/hyperledger/fabric/events/producer.initializeEvents()       /Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/events/producer/events.go:161 +0x1eb   github.com/hyperledger/fabric/events/producer.NewEventsServer()       /Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/events/producer/producer.go:44 +0x58   github.com/hyperledger/fabric/events/producer.TestMain()       /Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/events/producer/producer_test.go:692 +0x504   main.main()       _testmain.go:70 +0x22a =================={code} In context, it doesn't appear that the map removal is needed since the handler's interests are all being purged.     ></description> </Issue>
