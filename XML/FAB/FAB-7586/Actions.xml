<Action id="39066" issue="26337" author="muralisr" type="comment" created="2018-01-24 15:31:12.0" updateauthor="muralisr" updated="2018-01-24 15:31:12.0"> <body><! CDATA  ~sudheesh001  We went over this on https://stackoverflow.com/questions/48071871/hyperledger-fabric-fails-to-trigger-fsm-event-register.  As stated there this is not a bug.  {code:java} peer will not accepting external chaincode connection name:"chaincode-app:1.0" (except in dev mode) {code}  The above error is due to attempting to start the chaincode manually (ie, peer does not start it in a docker container).  ></body> </Action>
<Action id="39070" issue="26337" author="sudheesh001" type="comment" created="2018-01-24 16:51:49.0" updateauthor="sudheesh001" updated="2018-01-24 16:51:49.0"> <body><! CDATA  ~muralisr  While I agree that the error is because i am in `non-dev` mode, it however doesn't satisfy why the chaincode packaging before deployment fails.   {code:java} docker exec peer0-vm peer chaincode package -n mycc -v 1.0 -p chaincode-app -s -S ccpack.out {code}   ></body> </Action>
<Action id="39071" issue="26337" author="muralisr" type="comment" created="2018-01-24 16:59:11.0" updateauthor="muralisr" updated="2018-01-24 16:59:11.0"> <body><! CDATA  ~sudheesh001  this is addressed in the stackoverflow too... you cannot do CLI packaging using the peer container.  From your response comment there: {code:java} You can obviously use the fabric-tools image or dev-chaincode-docker images to do the required chaincode installation.  {code}  Samples such as e2e_cli contain CLI container definition that can be used as template for CLI commands.  ></body> </Action>
<Action id="39483" issue="26337" author="yacovm" type="comment" body="Closing, as it does not require a change" created="2018-02-01 12:04:58.0" updateauthor="yacovm" updated="2018-02-01 12:04:58.0"/>
<Action id="39487" issue="26337" author="sudheesh001" type="comment" created="2018-02-01 12:58:07.0" updateauthor="sudheesh001" updated="2018-02-01 12:58:07.0"> <body><! CDATA I completely wouldn't agree with the resolution here. # Yes I understand we can use fabric-tools or dev-chaincode-dockers in dev mode to do chaincode installation, but my question was packaging them and signing them before putting them in production. I wouldn't want to use `fabric-tools` (cli) in production servers. # This NEEDS documentation and examples. ** Packaging and signing chaincode before installing them on a production cluster ** A sample for non-dev mode chaincode in fabric-samples which contains the packaging, signing and installing the chaincode.  ></body> </Action>
<Action id="39488" issue="26337" author="yacovm" type="comment" created="2018-02-01 13:10:39.0" updateauthor="yacovm" updated="2018-02-01 13:10:39.0"> <body><! CDATA {quote}This NEEDS documentation and examples. {quote} Well we have  this|http://hyperledger-fabric.readthedocs.io/en/latest/chaincode4noah.html?highlight=packaging  that explains how to package and sign chaincode.  Whether this needs to be implemented in samples or not, is a different story and not related to this JIRA and should be addressed in a separate JIRA item :)   {quote} I wouldn't want to use `fabric-tools` (cli) in production servers.{quote} You don't have to. You can always spin up your own container, or just not use any container and use the standard binaries.  I think that the idea of the peer contains is that it will be minimal and won't include any functionality other than running the peer.  ></body> </Action>
<Action id="39492" issue="26337" author="muralisr" type="comment" created="2018-02-01 13:37:56.0" updateauthor="muralisr" updated="2018-02-01 13:37:56.0"> <body><! CDATA  ~sudheesh001   Couple of things to clarify  _Yes I understand we can use fabric-tools or dev-chaincode-dockers in dev mode to do chaincode installation_ Packaging and installing has nothing to do with devmode... indeed there are no two ways to package for dev mode or production mode.   _I wouldn't want to use `fabric-tools` (cli) in production servers._  This is not "part" of the server. CLI is a client side program. You can just run it directly as `peer chaincode ..., peer channel ... , etc` commands from a fabric installation. `fabric-tools` is just a packaging to make it easy to run the CLI on the client side to talk to the server (basically saying the same thing  ~yacovm  says above).  ></body> </Action>
