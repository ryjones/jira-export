<Action id="46690" issue="28878" author="sykesm" type="comment" created="2018-06-28 16:34:14.0" updateauthor="sykesm" updated="2018-06-28 16:34:14.0"> <body><! CDATA The location of the race has changed a bit but appears to be the same cause:  When the events server is started, it launches a go routine to handle expired event handlers. The test tries for force expiration by changing a handler's sessionEndTime to a time in the past. This modification is done concurrently with the execution of the routine that scans the handler and results in a race. {code:java} ================== WARNING: DATA RACE Read at 0x00c4200d2158 by goroutine 16:   github.com/hyperledger/fabric/events/producer.(*handler).hasSessionExpired()       /Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/events/producer/handler.go:144 +0x84   github.com/hyperledger/fabric/events/producer.(*eventProcessor).start()       /Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/events/producer/events.go:100 +0x383  Previous write at 0x00c4200d2158 by goroutine 38:   github.com/hyperledger/fabric/events/producer.TestRegister_ExpiredIdentity.func2()       /Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/events/producer/producer_test.go:449 +0x1b7   github.com/hyperledger/fabric/events/producer.TestRegister_ExpiredIdentity()       /Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/events/producer/producer_test.go:478 +0x91d   testing.tRunner()       /usr/local/Cellar/go/1.10.3/libexec/src/testing/testing.go:777 +0x16d  Goroutine 16 (running) created at:   github.com/hyperledger/fabric/events/producer.initializeEvents()       /Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/events/producer/events.go:161 +0x1eb   github.com/hyperledger/fabric/events/producer.NewEventsServer()       /Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/events/producer/producer.go:44 +0x58   github.com/hyperledger/fabric/events/producer.TestMain()       /Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/events/producer/producer_test.go:692 +0x504   main.main()       _testmain.go:70 +0x22a  Goroutine 38 (running) created at:   testing.(*T).Run()       /usr/local/Cellar/go/1.10.3/libexec/src/testing/testing.go:824 +0x564   testing.runTests.func1()       /usr/local/Cellar/go/1.10.3/libexec/src/testing/testing.go:1063 +0xa4   testing.tRunner()       /usr/local/Cellar/go/1.10.3/libexec/src/testing/testing.go:777 +0x16d   testing.runTests()       /usr/local/Cellar/go/1.10.3/libexec/src/testing/testing.go:1061 +0x4e1   testing.(*M).Run()       /usr/local/Cellar/go/1.10.3/libexec/src/testing/testing.go:978 +0x2cd   github.com/hyperledger/fabric/events/producer.TestMain()       /Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/events/producer/producer_test.go:707 +0x845   main.main()       _testmain.go:70 +0x22a =================={code}  ></body> </Action>
<Action id="46702" issue="28878" author="sykesm" type="comment" body="A fake clock could be used to resolve this but the scope would be a bit larger." created="2018-06-28 18:28:54.0" updateauthor="sykesm" updated="2018-06-28 18:28:54.0"/>
<Action id="46710" issue="28878" author="sykesm" type="comment" body="https://gerrit.hyperledger.org/r/23835" created="2018-06-28 20:04:41.0" updateauthor="sykesm" updated="2018-06-28 20:04:41.0"/>
