<Action id="31524" issue="21225" author="scottz" type="comment" body="Upgrading this to a HIGH issue, since the fabric-test Daily CI tests are failing." created="2017-10-02 16:05:34.0" updateauthor="scottz" updated="2017-10-02 16:05:34.0"/>
<Action id="34340" issue="21225" author="mastersingh24" type="comment" body=" ~Nishi   ~scottz   - are you doing this against master or release?" created="2017-11-05 10:08:25.0" updateauthor="mastersingh24" updated="2017-11-05 10:08:25.0"/>
<Action id="34341" issue="21225" author="mastersingh24" type="comment" body="I believe that these paths will also result in a 500 error and not a 400 error" created="2017-11-05 10:11:07.0" updateauthor="mastersingh24" updated="2017-11-05 10:11:07.0"/>
<Action id="34349" issue="21225" author="scottz" type="comment" body="Testing is done on master branch. We will take another look at the error code descriptions, and could certainly adjust the expectations to look for 500 instead of 400, if that is more appropriate. But the problem seems to be that no error code is received with the error message." created="2017-11-05 15:29:33.0" updateauthor="scottz" updated="2017-11-05 15:29:33.0"/>
<Action id="34351" issue="21225" author="mastersingh24" type="comment" body="Thanks Scott.  Will also take a other look" created="2017-11-05 18:32:03.0" updateauthor="mastersingh24" updated="2017-11-05 18:32:03.0"/>
<Action id="35424" issue="21225" author="denyeart" type="comment" body=" ~nnao  I see you assigned to yourself.  Could you add a comment on what exactly you intend to fix here?" created="2017-11-27 02:33:17.0" updateauthor="denyeart" updated="2017-11-27 02:33:17.0"/>
<Action id="35519" issue="21225" author="nnao" type="comment" created="2017-11-27 18:36:37.0" updateauthor="nnao" updated="2017-11-27 18:36:37.0"> <body><! CDATA  ~denyeart  Error code is not returned because response value is ignored. - ProcessProposal function in core/endorser/endorser.go returns a response and an error value if an error happens. - After that, a response and an error value are passed to ProcessProposal function in protos/peer/peer.bp.go. - This function only returns the error value if an error value is set. Even though response value is set, the response value is ignored. https://github.com/hyperledger/fabric/blob/release/protos/peer/peer.pb.go#L91  I will fix this problem by changing returned value. - ProposalResponse function returns only response value even if an error happens. - We can get error code because an error value is included in response value.  ></body> </Action>
<Action id="35527" issue="21225" author="nnao" type="comment" created="2017-11-27 19:16:14.0" updateauthor="nnao" updated="2017-11-27 19:16:14.0"> <body><! CDATA https://gerrit.hyperledger.org/r/#/c/15737/ https://gerrit.hyperledger.org/r/#/c/15739/  ></body> </Action>
<Action id="35547" issue="21225" author="denyeart" type="comment" created="2017-11-27 23:53:13.0" updateauthor="denyeart" updated="2017-11-27 23:53:13.0"> <body><! CDATA  ~nnao  thanks for adding the details.  ~muralisr  FYI - see the CRs for detailed review.  ></body> </Action>
<Action id="36044" issue="21225" author="nnao" type="comment" created="2017-12-08 21:56:14.0" updateauthor="nnao" updated="2017-12-08 21:56:14.0"> <body><! CDATA https://gerrit.hyperledger.org/r/#/c/16057/   ></body> </Action>
<Action id="38268" issue="21225" author="denyeart" type="comment" body=" ~muralisr  Could you review FAB-6387 and FAB-6457 and provide your thoughts on next steps?" created="2018-01-08 02:57:33.0" updateauthor="denyeart" updated="2018-01-08 02:57:33.0"/>
<Action id="39226" issue="21225" author="muralisr" type="comment" created="2018-01-27 21:06:31.0" updateauthor="muralisr" updated="2018-01-27 21:08:13.0"> <body><! CDATA  ~denyeart   ~nnao    ~Nishi   ~scottz    A recap of history of a change which led to this issue. {code:java} FAB-4347 - SDK test expected error but got a Proposal Response. The "chaincodeError" was added in addition to returning the ProposalResponse. This fixed SDK failures but as  ~nnao  notes above, gRPC ignores the ProposalResponse and just returns the error. Given that, in retrospect, the right way should have been to fix the SDK to introspect the response.{code}  ~nnao  fixes in this JIRA does the following which looks good to me except for one issue * reverts the ---FAB-4347--- change with  https://gerrit.hyperledger.org/r/#/c/15737  - as mentioned in the CR, looks right except for returning 404 *(expanding on this below)* *  https://gerrit.hyperledger.org/r/#/c/16057/  - fixes the SDK test to look into ProposalResponse instead of error and also introduces a temporary workaround for SDK failure introduced by the reversal so this CR can go through  *About the setting the 404 in endorser :*  Seems we are doing that to fix the behave tests in  https://gerrit.hyperledger.org/r/#/c/15739 . This 404 should really come from the chaincode and not from the fabric. However currently chaincode framework returns error immediately to the endorser code instead of passing it to the chaincode to complete the loop. (This is where  ~nnao  sets 404.)  If the chaincode has the opportunity to handle the error - as it should - the chaincode can return the 404 directly and we wouldn't need for the fabric to set 404. This would be the correct way to handle application level errors.   The chaincode cleanup CRs slated for 1.2 (a batch of CRs starting with  https://gerrit.hyperledger.org/r/#/c/16533/ ) handles this error correctly. For now, recommend we revert the error back to 500 in endorser.go and just check for 500 in the behave tests.     ~denyeart  If everyone agree's with this approach, please create a bug for 1.2 to make sure the cleanup CRs do the right thing (its already fixed by the CRs ...this is just for due diligence) and assign it to me and we can move this set of CRs from  ~nnao  to completion (after reverting the 404 to 500).  ></body> </Action>
<Action id="39313" issue="21225" author="scottz" type="comment" body=" ~muralisr  OK we can keep the behave test in v1.1 for now to look for 500.  The new v1.2 bug is not just for due diligence; we should use it to make sure we change these behave tests again to look for 404, as soon as those other CRs return the error correctly. Please &quot;relate&quot; the new bug to this one, and set the new bug &quot;blocked by&quot; the JIRA used for the cleanup CRs being used for the code correction to return the 404." created="2018-01-29 17:30:18.0" updateauthor="scottz" updated="2018-01-29 17:30:18.0"/>
<Action id="39320" issue="21225" author="muralisr" type="comment" created="2018-01-29 20:25:55.0" updateauthor="muralisr" updated="2018-01-29 20:36:31.0"> <body><! CDATA  ~scottz  makes sense (I was thinking we should use the bug to revert tests to 404 too).  Sounds like we are in agreement.   ~nnao  has reverted 404 to 500 in endorser.go. Opened FAB-7959 and marked it blocked by the cleanup CRs clearing the path to resolving this JIRA.  ></body> </Action>
<Action id="39444" issue="21225" author="wlahti" type="comment" created="2018-01-31 18:37:43.0" updateauthor="wlahti" updated="2018-01-31 18:37:43.0"> <body><! CDATA Discussed this with  ~muralisr . We have one recommendation for the chaincode error handling logic.   What if we have the default ESCC code set the chaincode error status and message at  https://github.com/hyperledger/fabric/blob/master/core/scc/escc/endorser_onevalidsignature.go#L114|https://github.com/hyperledger/fabric/blob/master/core/scc/escc/endorser_onevalidsignature.go#L114?  ? The ESCC is the code that really determines whether a chaincode error should result in an endorsement error, so it seems logical to set the chaincode status/message here.  The existing: {code:java} if response.Status >= shim.ERRORTHRESHOLD { return shim.Error(fmt.Sprintf("Status code less than %d will be endorsed, received status code: %d", shim.ERRORTHRESHOLD, response.Status)) }{code} could become: {code:java} if response.Status >= shim.ERRORTHRESHOLD { return shim.Error(fmt.Sprintf("Chaincode Error(%d, %s)", response.Status, response.Message)) }{code}    Once this has been done, the endorser.go code at  https://github.com/hyperledger/fabric/blob/master/core/endorser/endorser.go#L486  becomes: {code:java} if chainID == "" { pResp = &pb.ProposalResponse{Response: res} } else { pResp, err = e.endorseProposal(ctx, chainID, txid, signedProp, prop, res, simulationResult, ccevent, hdrExt.PayloadVisibility, hdrExt.ChaincodeId, txsim, cd) if err != nil { return &pb.ProposalResponse{Response: &pb.Response{Status: 500, Message: err.Error()}}, err } if pResp.Response.Status >= shim.ERRORTHRESHOLD { endorserLogger.Debugf(" %s  %s  endorseProposal() resulted in chaincode %s error for txid: %s", chainID, shorttxid(txid), hdrExt.ChaincodeId, txid) return pResp, nil } }{code} and the pResp returned by the endorser for this situation contains: {code:java} response:<status:500 message:"Chaincode Error(404, error message from chaincode-ex-02)" >{code}    Does that all seem logical? Anything I missed,  ~muralisr ?  ></body> </Action>
<Action id="39458" issue="21225" author="muralisr" type="comment" created="2018-01-31 20:03:22.0" updateauthor="muralisr" updated="2018-01-31 20:03:22.0"> <body><! CDATA  ~wlahti  Sounds right.   Basically two code changes * change in endorser.go to just return pResp received from escc. * modify https://github.com/hyperledger/fabric/blob/master/core/scc/escc/endorser_onevalidsignature.go#L114 as you have indicated  Let us also update the CR for gerritt tracking.  ></body> </Action>
<Action id="39472" issue="21225" author="scottz" type="comment" created="2018-01-31 23:59:44.0" updateauthor="scottz" updated="2018-01-31 23:59:44.0"> <body><! CDATA  https://gerrit.hyperledger.org/r/#/c/15739/  is being used for fixing the testcases in fabric-test repo using this FAB-6387.  The previous comments seem to apply to another update in the fabric repo.  ></body> </Action>
<Action id="39522" issue="21225" author="muralisr" type="comment" created="2018-02-01 16:29:41.0" updateauthor="muralisr" updated="2018-02-01 16:29:41.0"> <body><! CDATA  ~nnao  -1ed the CR just for now with this comment  {code:java} We need to make sure if SDKs can deal with this change in a sensible manner. Important to keep compatibility in mind. If we think we need more time to everything covered and give users enough notice, then we might want to target 1.2. {code}   ~denyeart   ~Nishi   ~scottz   ></body> </Action>
<Action id="39532" issue="21225" author="nnao" type="comment" created="2018-02-01 17:17:14.0" updateauthor="nnao" updated="2018-02-01 17:17:14.0"> <body><! CDATA  ~muralisr  I agree to keep compatibility and give users enough notice. If we need more time, There is no problem that to move target 1.2. I have a question. How to check those SDK's compatibility? Do we need to add a more response check test case in sdk-* e2e test or fabric-test?  ></body> </Action>
<Action id="39534" issue="21225" author="muralisr" type="comment" created="2018-02-01 17:53:16.0" updateauthor="muralisr" updated="2018-02-01 17:53:16.0"> <body><! CDATA  ~nnao  thank you for the response (and the patience!).  We can add/modify tests appropriately, I think you already started with that - and they pass with your CR which is a good start.  I was thinking more of current users of 1.0.  Hopefully SDKs are processing responses correctly like this ( first of all we have to verify if this is true ) {code:java} if err != nil // Path 1 return err else if response.Status == ERROR //Path 2 return response_error else // good response //Path 3 process good response {code} With your change, callers who were getting error in *Path 1* due to "chaincode error" will now fall into *Path 2*. This is still an error path - which is good - but they need to be able to differentiate between the errors. This is mainly a question of documentation and notification.  Now it is _possible_ SDK does something like this (hope not...) {code:java} if err != nil // Path 1 return err else // good response  //Path 3 process good response {code} With your change, since chaincode errors are no longer on *Path 1*, callers will go through *Path 3* which would break their processing (ie, they are now processing response as "good"). In this case, we should change SDK to move to the first error processing model in addition to documentation. This way clients will still get an error as before but will only have to differentiate the error appropriately.  So I think basically we need to do the following * check each of the SDK's to make sure they handle the response correctly * add docs and notify users of this change * add more SDK tests if needed  ></body> </Action>
<Action id="39535" issue="21225" author="nnao" type="comment" body=" ~muralisr  Thanks. I understood. Firstly, I will try to check SDK-*." created="2018-02-01 18:10:26.0" updateauthor="nnao" updated="2018-02-01 18:10:26.0"/>
<Action id="39557" issue="21225" author="scottz" type="comment" body="This deficiency has been around for a long time. Now you are proposing to delay it to give people time ... to do what exactly? We are not delivering correct success/error codes, which is a major issue and I strongly disagree to regate to a later release. It sounds like we understand the complexity now, so I we should get it done in v1.1!" created="2018-02-02 01:46:15.0" updateauthor="scottz" updated="2018-02-02 01:46:15.0"/>
<Action id="39559" issue="21225" author="denyeart" type="comment" body=" ~scottz  I agree.  Discussed with  ~muralisr  today and we agree the fix should go in as soon as possible in 1.1.  We need to coordinate the fix with SDKs, and then write up a few sentences for 1.1 release notes to make upgrades aware.  ~nnao  is checking with SDKs as next step." created="2018-02-02 02:37:30.0" updateauthor="denyeart" updated="2018-02-02 02:38:17.0"/>
<Action id="39573" issue="21225" author="yacovm" type="comment" body="Can this fix make v1.0.x clients incompatible with v1.1 peers?" created="2018-02-02 09:46:35.0" updateauthor="yacovm" updated="2018-02-02 09:46:35.0"/>
<Action id="39585" issue="21225" author="denyeart" type="comment" body=" ~yacovm  The exact impact is being investigated.  If there is impact release notes will need to explain the corrective action, for example clients may have to move up to a later SDK 1.0.x fix or 1.1. As unappealing as that is, this is considered a defect and there must be a path to fix defects.  Living with defects indefinitely is not an option." created="2018-02-02 12:59:06.0" updateauthor="denyeart" updated="2018-02-02 12:59:06.0"/>
<Action id="39616" issue="21225" author="muralisr" type="comment" created="2018-02-03 16:52:09.0" updateauthor="muralisr" updated="2018-02-03 16:52:09.0"> <body><! CDATA  ~denyeart    _The exact impact is being investigated._   The preference is to fix this in 1.1 if the SDKs already do the right thing in handling responses as outlined in my previous comment.  However if  ~nnao  investigation finds SDKs are not doing the right thing in 1.0, we'll have re-evaluate. Right ?  ></body> </Action>
<Action id="39617" issue="21225" author="denyeart" type="comment" body="Right, let&apos;s get the exact impact well defined first, then re-evaluate." created="2018-02-03 17:01:01.0" updateauthor="denyeart" updated="2018-02-03 17:01:01.0"/>
<Action id="39699" issue="21225" author="nnao" type="comment" created="2018-02-05 21:53:23.0" updateauthor="nnao" updated="2018-02-05 21:53:23.0"> <body><! CDATA I checked SDK node/java.  The SDK java had checked the response status and it is treated as an error except for the response status 200. The SDK node has one place that it doesn't check the response status. SDK node is treated as a success even if response status is 500. I made and send a patch  https://gerrit.hyperledger.org/r/#/c/17553/|https://gerrit.hyperledger.org/r/#/c/17553/.   In SDK java, Maybe SDK v1.0.x will keep compatibility with v1.1 peers. In SDK node, There's a possibility that different behave with v1.0.x and v1.1 when received status not 200  ></body> </Action>
<Action id="39833" issue="21225" author="muralisr" type="comment" created="2018-02-08 03:47:24.0" updateauthor="muralisr" updated="2018-02-08 03:47:24.0"> <body><! CDATA thanks  ~nnao  for the investigation and the patch.  _In SDK node, There's a possibility that different behave with v1.0.x and v1.1 when received status not 200_   ~denyeart ,  ~scottz  This would break node SDK users on chaincode error paths. Delay in merging means more users would have to change behavior when merged.  On the other hand if the focus has been on smooth upgrade to 1.1, it would make sense to give some notice to users and slate this for the next release.   ></body> </Action>
<Action id="39920" issue="21225" author="scottz" type="comment" created="2018-02-09 15:38:38.0" updateauthor="scottz" updated="2018-02-09 15:41:00.0"> <body><! CDATA  ~muralisr   ~nnao  I realize there are several things being changed, making this a complex issue to discuss, let alone fix. (Thank you Nao for all you are trying to do.) Does it make sense if we split it into these steps? I don't see any reason to intentionally delay for any reasons. # Fix the fabric to work correctly, and document (in release notes if necessary, as well as readthedocs) any changes in the API and error codes that are returned by fabric or from chaincodes. ASAP. # Fix the SDKs to work correctly, and document any changes in the API and error codes that are returned by fabric or from chaincodes. ASAP. # The chaincodes owners can upversion them so they work correctly.  ></body> </Action>
<Action id="39977" issue="21225" author="muralisr" type="comment" created="2018-02-10 20:48:08.0" updateauthor="muralisr" updated="2018-02-10 20:48:08.0"> <body><! CDATA  ~scottz  My vote would be for moving it to 1.2 giving us a chance to bolster the doc with samples. Plus we will have the chaincode FSM cleanup to go with it so we can test this along with that change.  However if the majority decides this should go in immediately, I'm fine with that.  Created the following doc if we decided to go with the change immediately. This also gives an idea of what the samples could illustrate {code:java} Pre 1.1 (or 1.2) code returned a successful ProposalResponse (status 0 or 200) or an error. In 1.1 (or 1.2), endorser can return * error with nil ProposalResponse * error ProposalResponse (status >= 400) * successful ProposalResponse (status 0 or 200)  Further, an error ProposalResponse could be from the peer or from the chaincode. Currently peer returns ProposalResponse with status >= 500 which allows users to distinguish user chaincode errors by setting status in the 400-499 range. {code}  ></body> </Action>
<Action id="39983" issue="21225" author="yacovm" type="comment" created="2018-02-10 22:47:24.0" updateauthor="yacovm" updated="2018-02-10 22:49:22.0"> <body><! CDATA I have no real say in the matter but FWIW - I think Murali is right, and assuming this change breaks backward compatibility with v1.0 we should defer this to v1.2, where we will have many changes that would both require and incentivize users to upgrade their SDKs to the latest version.  I also think it's a bit odd to release v1.1-alpha which is compatible with v1.0 clients, and then release the final v1.1 which is not, and lastly - these errors occur when the user provides the wrong input to the peer, not to the chaincode - therefore is that really that bad that we return the wrong error type? If the application is calling the wrong chaincode name or the wrong channel, it is broken regardless of what the peer would return.  ></body> </Action>
<Action id="39984" issue="21225" author="scottz" type="comment" created="2018-02-10 23:53:22.0" updateauthor="scottz" updated="2018-02-10 23:53:22.0"> <body><! CDATA If I understand correctly... fixing this now would break backwards compatibility with v1.0 - because v1.0 was unfinished; v1.0 never returned ANY error codes in some situations, let alone an error code from the appropriate place (from fabric when it is a peer error, or from the chaincode when it is a chaincode error) or the correct error code (400 vs 404 vs 500). See also FAB-6271.   I have already stated a preference to see this fixed sooner rather than later. Sure, the error codes are for error paths rather than success path; but one could argue they are more important now for helping people that are setting up their new networks and channels - moreso now than later after things are already running (or after they have abandoned their attempts to use HF).  That said, I understand I am only part of the team to decide if this is required in the v1.1 release. Moreover, considering all the good points that have been made, I would be amenable to deferring until v1.2. Note, if we do not fix all this in v1.1, I think it would be wise to clearly itemize and document the misbehaving usecases somewhere (are the jiras sufficient?), and reduce some headaches for the chaincode writers by mentioning the shortcomings in the release notes with pointers to the explanations.        ></body> </Action>
<Action id="39985" issue="21225" author="muralisr" type="comment" created="2018-02-11 00:41:27.0" updateauthor="muralisr" updated="2018-02-11 00:41:27.0"> <body><! CDATA  ~scottz   _...v1.0 never returned ANY error codes in some situations..._  Actually, it is returning error with every non-success path and users lost the "ProposalResponse" part of the return value. While not ideal obviously, it did separate error from success cleanly. If it was successful, everything was good. If failure, hard to determine what/why. Returning the ProposalResponse  helps in working with the error paths.     _I think it would be wise to clearly itemize and document the misbehaving usecases somewhere (are the jiras sufficient?), and reduce some headaches for the chaincode writers by mentioning the shortcomings in the release notes with pointers to the explanations._  Something like the following is all we'd need I think (and if we move to 1.2, hopefully we can illustrate with samples)  {code:java} Users who handle errors from chaincode in pre 1.1 (or pre 1.2) need to look for the "chaincode error" string in the error returned from the proposal request and parse out the response status and response message from it. With 1.1 (or 1.2), they can get this information directly from ProposalResponse. {code}    ></body> </Action>
<Action id="40060" issue="21225" author="clayton sims" type="comment" body="Ok based on comments looks like here is agreement to move to 1.2.   If I misunderstood, please move it back with a comment. " created="2018-02-13 13:24:56.0" updateauthor="clayton sims" updated="2018-02-13 13:24:56.0"/>
<Action id="40064" issue="21225" author="muralisr" type="comment" body=" ~Clayton Sims  +1" created="2018-02-13 14:39:47.0" updateauthor="muralisr" updated="2018-02-13 14:39:47.0"/>
<Action id="40080" issue="21225" author="denyeart" type="comment" created="2018-02-13 18:37:46.0" updateauthor="denyeart" updated="2018-02-13 18:37:46.0"> <body><! CDATA I've -1ed the associated CRs to prevent merge into 1.1:   https://gerrit.hyperledger.org/r/#/c/17553/    https://gerrit.hyperledger.org/r/#/c/15739/    https://gerrit.hyperledger.org/r/#/c/15737/      ></body> </Action>
<Action id="40098" issue="21225" author="scottz" type="comment" body="Does this deferral apply to FAB-6271 as well?" created="2018-02-14 01:23:52.0" updateauthor="scottz" updated="2018-02-14 01:23:52.0"/>
<Action id="40184" issue="21225" author="denyeart" type="comment" body="Yes, I believe FAB-6387 and FAB-6271 should be fixed at the same time, latest thinking is that would be 1.2 timeframe.  I&apos;ve tagged each as 1.2." created="2018-02-14 17:58:51.0" updateauthor="denyeart" updated="2018-02-14 17:58:51.0"/>
<Action id="43005" issue="21225" author="sambhavdutt" type="comment" created="2018-04-16 13:22:09.0" updateauthor="sambhavdutt" updated="2018-04-16 13:22:09.0"> <body><! CDATA  ~nnao  Hello,   Can you tell if this issue is resolved or if there are any blockers for this bug. Should we maintain the 'In Review' status for this one.  ></body> </Action>
<Action id="43006" issue="21225" author="muralisr" type="comment" body=" ~sambhavdutt  not resolved yet. We moved this to 1.2 and there are few CRs listed above ready to be reviewed (the main one is  https://gerrit.hyperledger.org/r/#/c/15737 )." created="2018-04-16 13:33:57.0" updateauthor="muralisr" updated="2018-04-16 13:33:57.0"/>
<Action id="43016" issue="21225" author="nnao" type="comment" created="2018-04-16 17:47:40.0" updateauthor="nnao" updated="2018-04-16 17:47:40.0"> <body><! CDATA Hi  ~sambhavdutt   Yes. I am working to fix this JIRA. I had sent 3 patches at FAB-6387. (1) https://gerrit.hyperledger.org/r/c/15737/ at fabric (2) https://gerrit.hyperledger.org/r/c/15739/ at fabric-test  (3) https://gerrit.hyperledger.org/r/c/17553/ at fabic-sdk-test  To fix this problem, we need to merge (1) patches. The patches (1) have +2 from Srinivasan. it needs more one +2 from peer maintainers. (-2 from David, "Decision to defer until 1.2, I will -2 to prevent merge into 1.1")  However, if the patches(1) are merged, some tests will get an error. Since some tests expect a wrong response, we have to merge those test patches(2)(3) as soon as possible after (1) are merged.  So I'd like to discuss patches(2)(3) with fabric-test/fabric-sdk-test maintainers as soon as possible.  Thanks,  ~muralisr   ></body> </Action>
