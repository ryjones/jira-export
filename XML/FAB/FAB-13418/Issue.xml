<Issue id="36361" key="FAB-13418" number="13418" project="10002" reporter="guoger" creator="guoger" type="10002" summary="Make message dissemination in etcdraft UT framework more flexible and deterministic" priority="3" resolution="10001" status="6" created="2018-12-21 03:43:36.0" updated="2020-01-22 22:32:37.0" resolutiondate="2020-01-22 22:32:37.0" votes="0" watches="2" workflowId="47892"> <description><! CDATA The etcdraft UT framework mocks {{cluster.RPC}} by calling the RPC method on dest node in a goroutine, if dest is not stopped/unstarted, nor disconnected, see  here|https://github.com/hyperledger/fabric/blob/6e56e6e30274579b1895d84980a4bd5b8950a52e/orderer/consensus/etcdraft/chain_test.go#L2441-L2467 .  However, this does not give us much flexibility to make assertions on messages being exchanged on RPC. We should implement a producer/consumer queue, where filters and rules can be applied. One potential useful case can be: bq. After node 1 sends X messages of type A to node 2, drop subsequent Y messages of type B sent from node 1 to node 2, and then resume. (X,Y are integers) or bq. Wait till Z messages of type C are sent from node 1 to 2, and perform certain assertions afterwards.  This can also make UT more deterministic and i believe this can be useful for future consensus implementations, i.e. BFT.  /cc  ~kchristidis   ~C0rWin   ></description> </Issue>
