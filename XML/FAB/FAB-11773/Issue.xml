<Issue id="33286" key="FAB-11773" number="11773" project="10002" reporter="rlalgowdar" assignee="dongming" creator="rlalgowdar" type="10101" summary="SIdeDB - Reconciliation - Add New Org to Collection" priority="3" resolution="10000" status="6" created="2018-08-28 13:10:57.0" updated="2020-01-09 23:28:31.0" resolutiondate="2018-12-13 21:53:01.0" votes="0" watches="2" workflowId="44556"> <description><! CDATA *+*Setup:*+  Network Topology: 1 channel, 2 orgs, 2 peers per org, each peer with CouchDB container for stateDB, 3 kafka, 1 zookeepers, 3 orderers, 2 ca, TLS enabled, put only the peers in org1 (NOT org2) in the private collection from the start, require only any 1 peer endorsement, BTL=0,  *push/required=0*. When start network, join only org1 peers to the channel;  *do not join the peers in org2 yet*.  Do submit both the anchor peer updates for both orgs. Client Driver: PTE  +*Test Steps:*+  1) chaincode: install only one chaincode on all peers, https://github.com/hyperledger/fabric/blob/master/examples/chaincode/go/map/map.go Join only the peers in org1 to the channel1, but still include all peers in the privatedb collection, and instantiate on channel1 on org1peer0.  2) Using 1 (or more threads if that is not enough), send 1000 invoke getPutPrivate transactions with private data to org1peer0  *  thread 1 invokes 1000 TXs to org1 peer0 *     ...  thread <n> invokes 1000 TXs to org1 peer0     3) *Add org2 to the collection*: * Perform a cc upgrade (instantiate a new chaincode version) along with a new privatedb collection file. * Add/join a peer in a new org, org2peer0, to the channel1, which already contains a large chain with large amount of private data history, to force reconciliation.  4) Ensure org2peer0 can reconcile old private data efficiently: simultaneously send transactions to both peers, WHILE Query ALL the transactions on the newly joined org peer:  *  thread 2 invokes 1000 TXs to org1 peer0 *  thread 3 invokes 1000 TXs to org2 peer0 and then validates/queries the last few TXs *  thread 4 queries on org2peer0 all 2000 TXs with reconciled data from threads 1 and 2  Analyze TPS on all peers, and ensure all queries work. Note: we may need to use longer pte query timeout values. And/or to configure a reduced timeout value in the peer from 60 secs to 1 or 2 secs to hurry things along (refer to FAB-10599 for details).  +*Report Results in fields TestResult and TestDetails:*+ 1) hardware setup 2) Observe if TPS achieved for queries is too slow, or any other problems 3) CPU and memory usage for the Peers and CouchDB containers  ></description> </Issue>
