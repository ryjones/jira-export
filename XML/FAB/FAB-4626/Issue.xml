<Issue id="17897" key="FAB-4626" number="4626" project="10002" reporter="elli-androulaki" assignee="angelo.decaro" creator="elli-androulaki" type="10004" summary=" SECURITY  Inconsistency of features available for fabric (MSP) and TLS certificates (revocation, expiration)" priority="2" resolution="10000" status="6" created="2017-06-14 13:59:36.0" updated="2018-07-20 14:13:19.0" resolutiondate="2017-06-23 14:46:17.0" votes="0" watches="8" workflowId="39005" security="10001"> <description><! CDATA MSP interface was extended with functions to return the list of CAs an MSP is configured with, with the goal to be used for TLS certificate validation purposes; currently it is the same list of CAs that is used for TLS certification as for enrollment certificate certificate at least as it appears from the FabricMSPConfig object. In this way we have assigned from a configuration perspective a dual role to a certain CA, i.e., signing a TLS cert or/and signing an enrollment cert. This is generally security malpractice and in the long term would need to be avoided.    However, there are some additional concerns here related to the difference of what we provide with enrollment/tls certificates: * for enrollment certificates we do not consider expiration that we do for tls certificates * for enrollment certificates we consider revocation that we do not consider for tls certificates.     It seems that if there is a CA that is used for both types of certificates an enrollment certificate can be used to establish a TLS connection, and even if this certificate is revoked, it will not impact TLS connectivity of that node. In the same spirit certificates expired on TLS layer may be considered valid at the enrollment/ fabric layer.      Relevant tls attack FAB-4625     *Recommended solutions -* also addressing FAB-4625, and FAB-4750 (discussed with  ~ales ,  ~angelo.decaro ,  ~mastersingh24 , and  ~mrshah / ~mrshah-ibm ) :    *Solution 1:* We suggest that we modify FabricMSPConfig to allow for specifying TLS-specific certificates, that are subsequently parsed by fabric MSP and maintained to a group of CAs separated by the fabric ones. Certificates of TLS CAs will be exportable by the MSP interface such that TLS certificates can be certified properly. Components that generate these CA certificates (needed for system bootstrap) need to be updated, i.e., cryptogen tool and fabric-ca. This solution would require the following:  - update of msp.FabricMSPConfig proto message  - update of msp.setup function  - update of msp.getIntermediateCAs, and msp.getRootCAs function (could even make sense to update their names)  - update of documentation  - update of cryptogen tool  - update of configtxgen tool  - update of fabric-ca config generation It is a code change consistent to how admin certs have been organised in the msp configuration.   *Solution 2:* We suggest the inclusion of a distinguishing mark inside the TLS CA certificates, e.g., by leveraging the "KeyUsage" field of certs associated to TLS root/intermediate CAs. These CA certs will be exportable by the MSP interface such that TLS certificates can be certified properly. This solution would require the following:  - update of msp.setup function  - update of msp.getIntermediateCAs, and msp.getRootCAs function (could even make sense to update their names)  - update of documentation  - update of cryptogen tool  - update of fabric-ca config generation  *Solution 3*: We suggest the inclusion of a distinguishing mark inside the TLS client/peer/orderer certificates, e.g., by leveraging the "KeyUsage" field of their certs. E.g., KeyUsageDigitalSignature can be used for platform certs and ExtKeyUsageServerAuth / ExtKeyUsageClientAuth can be used for TLS certificates. Validation of identity (referred to platform identities) would need to ensure that KeyUsageDigitalSignature is listed in the KeyUsage field of the certificate, while validation of TLS certificates (should this be provided via some additional function in the MSP interface /may be already given for free by TLS handshake checks) would look for "ExtKeyUsageServerAuth/ExtKeyUsageClientAuth" in the respective field. Such a solution is much less intrusive, as it requires:    - update of the msp.validateIdentity function    - update of the documentation    - update of cryptogen/fabric-ca (to put the right keyUsage for the respective certs?)  ></description> </Issue>
