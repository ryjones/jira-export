<Action id="26267" issue="17897" author="elli-androulaki" type="comment" body="Adding  ~ales ,  ~angelo.decaro ,  ~binhn ,  ~mastersingh24 ,  ~yacovm ." created="2017-06-14 14:07:44.0" updateauthor="elli-androulaki" updated="2017-06-14 14:07:44.0"/>
<Action id="26275" issue="17897" author="yacovm" type="comment" created="2017-06-14 15:03:56.0" updateauthor="yacovm" updated="2017-06-14 15:03:56.0"> <body><! CDATA My thoughts:  {quote} As immediate actions we require that the "inconsistency" is to be documented, and we add to the "best practices" the advice for users to use separate CAs for TLS certification and enrollment identities. {quote}  {quote}We also need to update cryptogen code accordingly.{quote} Makes sense, should we open a new JIRA as a follow-up?  {quote}and even if this certificate is revoked, it will not impact TLS connectivity of that node{quote} I don't see this as a problem if the certificate is of a peer * When a connection to a peer is attempted, the gossip handshake takes care of that - the TLS connection can be established but the handshake would fail * If it's a peer connecting to an ordering service, it signs the SeekInfo and the orderer would use the policy filter and reject it  However if it's a certificate of an ordering service and it's revoked it can be a problem and the ordering service needs to be evicted from the configuration immediately - otherwise the peer would connect to it, and the ordering service can just wait indefinitely  and not send any blocks - hence starving the peers. However - We currently do not support byzantine ordering services.  ></body> </Action>
<Action id="26380" issue="17897" author="mastersingh24" type="comment" created="2017-06-15 11:32:53.0" updateauthor="mastersingh24" updated="2017-06-15 11:32:53.0"> <body><! CDATA Unfortunately, as far as I can tell in the fabric code, there's no way to enforce separate CAs for enrollment and TLS.  From a quick review of the code, it does not look like we enforce key usage so we would still end up in a situation where a cert issued for TLS could be used as an enrollment / signing certificate (  ~adc  can verify whether or not this is true).  I'm not sure that this is really a big "hole" right now and not sure that we are really more vulnerable to compromise.  On the other hand, I can see the case where someone may want to get TLS certificates from a different authority (e.g. Verisign, etc) and we don't support this today - the assumption / assertion is that you use the same CA to issue all certificates.  We could in the future add separate fields to the MSP for TLS authorities if that would make things more clear but I also think that we could use the current structures as well and support using the same CA for TLS / enrollment as well as separate CAs for TLS / enrollment is we enforce key usage for enrollment / signing certificates.  ></body> </Action>
<Action id="26390" issue="17897" author="mastersingh24" type="comment" body="see also https://jira.hyperledger.org/browse/FAB-4750" created="2017-06-15 13:22:42.0" updateauthor="mastersingh24" updated="2017-06-15 13:22:42.0"/>
<Action id="26501" issue="17897" author="elli-androulaki" type="comment" created="2017-06-16 09:53:50.0" updateauthor="elli-androulaki" updated="2017-06-16 09:53:50.0"> <body><! CDATA So, updated the description with two main alternatives discussed with  ~ales  and  ~adc . We could go either way, but perhaps the second option is less invasive. But the first option maybe cleaner.   ~mastersingh24 ,  ~JonathanLevi ,  ~binhn ,  ~keithsmith  what do you think?  Adding  ~jimthematrix@gmail.com / ~jimthematrix  for awareness.  Also,  ~keithsmith  do you think that someone from fabric-ca could help with the changes associated to fabric-ca?      ></body> </Action>
<Action id="26504" issue="17897" author="mastersingh24" type="comment" created="2017-06-16 10:56:37.0" updateauthor="mastersingh24" updated="2017-06-16 10:56:37.0"> <body><! CDATA  ~elli-androulaki  I think we should most definitely modify the the certificate validation code used by the MSP implementation to restrict the KeyUsages.  If you look at  https://github.com/hyperledger/fabric/blob/master/msp/mspimpl.go#L1007, it would be a trivial change to restrict the KeyUsages to KeyUsageDigitalSignature.  But I also just checked the KeyUsages for some TLS certificates signed by 3rd party CAs such as DigiCert, GeoTrust, etc and they all have KeyUsageDigitalSignature and ExtKeyUsageServerAuth / ExtKeyUsageClientAuth so it seems that in any case TLS certificates could also be used to sign.  So if we really want to *optionally* separate trusted roots for TLS from trusted roots for signing certs, we'd need to go with option 1.  But I don't think they are as many updates required as you think - e.g. we don't need to change configtxgen (since it just uses the MSP code anyway).  Given that it looks like option 1 is the only solution that would be able to guarantee the separation, I think that's the way to go.  But I think we need to decide when to do this.  While sure one could say it's a best practice to separate duties, it's likely that most enterprises will use a single CA (especially those who use their own and not fabric-ca).  So the only gap we have right now is that if someone wanted to use separate CAs they will not be able to do so    ></body> </Action>
<Action id="26551" issue="17897" author="elli-androulaki" type="comment" created="2017-06-16 14:07:09.0" updateauthor="elli-androulaki" updated="2017-06-16 14:07:09.0"> <body><! CDATA Hi  ~mastersingh24 , I just realised what you meant. I added a third option that as you say seems to be way less invasive.   We can go ahead with that one, if you all agree.  ></body> </Action>
<Action id="26552" issue="17897" author="binhn" type="comment" body="At this point, I would prefer option 3, but are these KeyUsageDigitalSignature and ExtKeyUsageServerAuth / ExtKeyUsageClientAuth mutually exclusive?  If not, a cert could contain both KeyUsageDigitalSignature and ExtKeyUsageServerAuth then we would be back to square 1, wouldn&apos;t we?" created="2017-06-16 14:13:49.0" updateauthor="binhn" updated="2017-06-16 14:13:49.0"/>
<Action id="26554" issue="17897" author="smithbk" type="comment" created="2017-06-16 14:24:44.0" updateauthor="smithbk" updated="2017-06-16 14:24:44.0"> <body><! CDATA fabric-ca already supports this as follows ... though we should change the default config to already contain the "tls" profile below.  Add the following "tls" profile to fabric-ca-server-config.yaml: {code} signing: default: usage: - cert sign expiry: 8760h profiles: ca: usage: - cert sign expiry: 43800h caconstraint: isca: true maxpathlen: 0 tls: usage: - server auth - client auth expiry: 8760h {code}  To get a TLS certificate: {code} # fabric-ca-client enroll --enrollment.profile tls -u http://<enrollmentID>:<secret>@localhost:7054 {code}  Here's the resulting cert: {code} Certificate: Data: Version: 3 (0x2) Serial Number: 15:c9:19:84:05:40:5c:5e:89:08:90:81:a3:ea:d4:a2:72:60:98:b8 Signature Algorithm: ecdsa-with-SHA256 Issuer: C=US, ST=North Carolina, O=Hyperledger, OU=Fabric, CN=fabric-ca-server Validity Not Before: Jun 16 14:13:00 2017 GMT Not After : Jun 16 14:13:00 2018 GMT Subject: C=US, ST=North Carolina, O=Hyperledger, OU=Fabric, CN=a Subject Public Key Info: Public Key Algorithm: id-ecPublicKey EC Public Key: pub:  04:c4:2e:88:36:a0:0c:7b:50:3f:33:bb:f6:f2:4a: 69:6d:41:87:f9:63:5f:dc:aa:f7:6f:5f:ef:32:bf: bd:b7:e8:61:d1:87:2f:f4:f6:05:2a:82:47:e1:ab: 41:c0:f2:7a:20:ab:e2:88:79:7b:32:8a:d4:2f:13: 92:de:74:ad:af ASN1 OID: prime256v1 X509v3 extensions: X509v3 Extended Key Usage:  TLS Web Server Authentication, TLS Web Client Authentication X509v3 Basic Constraints: critical CA:FALSE X509v3 Subject Key Identifier:  58:E8:3A:82:BF:F2:A4:E2:B7:B6:FB:B8:0B:4A:25:F6:40:03:5A:31 X509v3 Authority Key Identifier:  keyid:E4:38:12:AC:85:88:AA:74:9E:CB:1E:3B:38:B8:6B:C8:5A:8F:5E:0C  X509v3 Subject Alternative Name:  DNS:Keiths-MBP.nc.rr.com Signature Algorithm: ecdsa-with-SHA256 30:44:02:20:04:df:bd:7b:7d:86:db:4e:9a:40:ad:99:8e:b9: 04:b9:2a:74:f2:c1:65:3f:c6:68:0b:cd:9e:61:31:dc:8d:a9: 02:20:7c:2b:a1:68:68:43:d3:36:da:b9:89:84:56:8f:36:51: 27:22:07:cc:07:ba:15:3c:3f:6f:ad:28:d0:77:42:ab {code}   ></body> </Action>
<Action id="26556" issue="17897" author="smithbk" type="comment" body="What should be the default expiration for TLS certs?" created="2017-06-16 14:26:08.0" updateauthor="smithbk" updated="2017-06-16 14:26:26.0"/>
<Action id="26564" issue="17897" author="binhn" type="comment" created="2017-06-16 14:54:36.0" updateauthor="binhn" updated="2017-06-16 14:54:36.0"> <body><! CDATA Thanks  ~smithbk  for the detail. I don't have a strong recommendation on default expiration, but following fiscal year renewal might be a right choice.  ~mastersingh24 ,  ~elli-androulaki    ~angelo.decaro , re the key `X509v3 Extended Key Usage`, we should put that in the yaml just in case not everyone using the same key.  ></body> </Action>
<Action id="26721" issue="17897" author="angelo.decaro" type="comment" created="2017-06-19 12:07:52.0" updateauthor="angelo.decaro" updated="2017-06-19 12:10:05.0"> <body><! CDATA So, one way to implement solution 3) is to enforce that the certificates of x509-based MSP identities have KeyUsage=KeyUsageDigitalSignature and do not have any of  ExtKeyUsageAny or ExtKeyUsageClientAuth or ExtKeyUsageServerAuth or ExtKeyUsageNetscapeServerGatedCrypto or ExtKeyUsageMicrosoftServerGatedCrypto as ExtKeyUsage.  But for this. we have change cryptogen to generate certificates with those key usages.  As a consequence of that would be to generate different tbs certificates.  Would that be fine?  ~mastersingh24  ~elli-androulaki  ~yacovm  ~binhn   ></body> </Action>
<Action id="26722" issue="17897" author="mastersingh24" type="comment" created="2017-06-19 12:15:36.0" updateauthor="mastersingh24" updated="2017-06-19 12:15:36.0"> <body><! CDATA  ~adc  Are we really going to prohibit people who want to use the same certs for both TLS and endorsement from doing so?  We can claim it's a best practice, but not sure that I agree that we should 100% prohibit this.  We can definitely make changes to cryptogen.  We'd have to basically separate out the generation of TLS and identity certificates (was going to do this in the future anyway but we were trying to limit the scope of changes).  ></body> </Action>
<Action id="26723" issue="17897" author="angelo.decaro" type="comment" created="2017-06-19 12:19:42.0" updateauthor="angelo.decaro" updated="2017-06-19 12:19:42.0"> <body><! CDATA So, solution 3 is not the right one in this case and the other solutions looks anyway more complex in terms of impact on the code.  Anyway, best practices tell us that one should not reuse the same cryptographic material so I would be schooled if fabric would forbid it.  ></body> </Action>
<Action id="26724" issue="17897" author="yacovm" type="comment" created="2017-06-19 12:26:05.0" updateauthor="yacovm" updated="2017-06-19 12:26:05.0"> <body><! CDATA So regarding your change set,  ~adc  - if we just want to enforce the fabric not to use the same certificates for TLS and MSP why enforce it via the extensions? Why can't we instead have some local "registry" in the peer / orderer that each certificate that is used for something (loading the cert for TLS or loading the cert for MSP) would be registered into that registry, and then when a subsequent register for that cert for a different usage would be attempted at the peer / orderer startup, it would prevent it with an error message that says that the user can't use the same cert for both TLS and MSP ?   ></body> </Action>
<Action id="26725" issue="17897" author="angelo.decaro" type="comment" body=" ~yacovm , that&apos;s definitely an option. I sounds like having a bigger impact on the code w.r.t. what I have submitted :(" created="2017-06-19 12:28:17.0" updateauthor="angelo.decaro" updated="2017-06-19 12:28:17.0"/>
<Action id="26726" issue="17897" author="mastersingh24" type="comment" created="2017-06-19 12:33:38.0" updateauthor="mastersingh24" updated="2017-06-19 12:33:38.0"> <body><! CDATA  ~yacovm  - I don't think we need to even go that far.  I think the solution that fits best with the current design constructs would be to simply add a "tlscerts" or "tlsrootcerts" field to the MSP structure.  So we simply need to modify the msp proto to have this field and add he ability to load certs from a directory with the same name (just like the rest of the MSP).    The question is how badly do we need this for v1.0.0?  BTW - with TLS, we need not worry about separating the root and intermediate certs (this is handled by the TLS stack) like we do for the roots/intermediates for the MSP identity certs.  ></body> </Action>
<Action id="26731" issue="17897" author="mastersingh24" type="comment" created="2017-06-19 13:31:36.0" updateauthor="mastersingh24" updated="2017-06-19 13:35:01.0"> <body><! CDATA  ~adc  ~elli-androulaki  On second thought, I'm ok if we really want to restrict MSP identity certs to digital signature usage only.  We would of course need to document this, but I don't think this will have a major impact on the code or the tests.  I think there might be a whole in the fact that I think you can still use those certs for TLS (not all stacks enforce usage), but we can also add those checks in our TLS code as well if needed.   Let me know.  So this would allow us to still have a single CA - but we would actually enforce key usage - which is good and prevent people from using the same certs for TLS and MSP signing identity.  I think that is actually OK  ></body> </Action>
<Action id="26733" issue="17897" author="angelo.decaro" type="comment" body="That&apos;s good then, cryptogen needs to be modified as well. Do you want to take on that,  ~mastersingh24 ?" created="2017-06-19 13:41:24.0" updateauthor="angelo.decaro" updated="2017-06-19 13:41:24.0"/>
<Action id="26735" issue="17897" author="mastersingh24" type="comment" body="Yeah - let&apos;s create some tasks under this JIRA.  I&apos;m happy to take on cryptogen" created="2017-06-19 13:47:43.0" updateauthor="mastersingh24" updated="2017-06-19 13:47:43.0"/>
<Action id="26739" issue="17897" author="elli-androulaki" type="comment" created="2017-06-19 14:01:30.0" updateauthor="elli-androulaki" updated="2017-06-19 14:01:30.0"> <body><! CDATA Ok, great; sounds good to me.  Btw, this will not fix the issue for commercial CA support for TLS right?  ></body> </Action>
<Action id="26764" issue="17897" author="smithbk" type="comment" body="So everyone is OK with the fabric-ca default config change I mentioned previously, right?  If yes, I&apos;ll go ahead and push the change set." created="2017-06-19 15:44:02.0" updateauthor="smithbk" updated="2017-06-19 15:44:02.0"/>
<Action id="26765" issue="17897" author="binhn" type="comment" created="2017-06-19 15:50:01.0" updateauthor="binhn" updated="2017-06-19 15:50:13.0"> <body><! CDATA  ~smithbk   ~elli-androulaki   ~adc   just chatted with Elli on this https://jira.hyperledger.org/browse/FAB-4626?focusedCommentId=26721&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-26721  It sounds to me like impedance mismatch, no?  ></body> </Action>
<Action id="26836" issue="17897" author="elli-androulaki" type="comment" created="2017-06-20 11:40:16.0" updateauthor="elli-androulaki" updated="2017-06-20 11:40:16.0"> <body><! CDATA Related CR:  https://gerrit.hyperledger.org/r/#/c/10825  ></body> </Action>
<Action id="26865" issue="17897" author="clayton sims" type="comment" body="moving status to review" created="2017-06-20 16:55:32.0" updateauthor="clayton sims" updated="2017-06-20 16:55:32.0"/>
<Action id="27153" issue="17897" author="elli-androulaki" type="comment" body="CR  https://gerrit.hyperledger.org/r/#/c/10915  is also related to this item." created="2017-06-21 18:06:50.0" updateauthor="elli-androulaki" updated="2017-06-21 18:06:50.0"/>
<Action id="27188" issue="17897" author="elli-androulaki" type="comment" body="Changing the status to &quot;In Progress&quot; given there are few sub-tasks that are not yet done." created="2017-06-22 12:50:12.0" updateauthor="elli-androulaki" updated="2017-06-22 12:50:12.0"/>
