<Action id="18871" issue="12659" author="christopherferris" type="comment" body="we should stub out java shim build on Z for now." created="2016-09-13 02:48:04.0" updateauthor="christopherferris" updated="2016-09-13 02:48:04.0"/>
<Action id="18880" issue="12659" author="harrijk" type="comment" body="In addition to the stubbing out of the java shim, the javaenv Dockerfile FROM statement needs to be changed to something other than an x86-only base image.  Otherwise, the build will still fail." created="2016-09-13 12:27:24.0" updateauthor="harrijk" updated="2016-09-13 12:27:24.0"/>
<Action id="18886" issue="12659" author="satheeshk" type="comment" created="2016-09-13 14:02:58.0" updateauthor="satheeshk" updated="2016-09-13 14:03:45.0"> <body><! CDATA Java docker env needs only openjdk, gradle and maven. So this can follow the same approach as Base image to figure out the architecture and use that as the base image `FROM _BASE_`, then add openjdk, gradle and maven to it.   Gradle use osdetector plugin to figure out OS architecture information to generate java source from .proto for compilation, and it fails there. We can try the new gradle protobuf plugin that uses maven's latest osdetector plugin.  ></body> </Action>
<Action id="18904" issue="12659" author="sriramasharma" type="comment" created="2016-09-14 15:02:40.0" updateauthor="sriramasharma" updated="2016-09-14 15:02:40.0"> <body><! CDATA The same issue is applicable for ppc64le platform as well.   Maven's osdetector plugin (version >1.3.0 ) has support for s390x and ppc64le. so using that plugin would help surpass the first issue. However subsequently, in build.gradle file, 'protoc' and 'grpc-jaca' is being pulled from public maven repository which only has x86_64 binaries.   So as a next step, if we can make use of 'hyperledger/fabric-baseimage' directly in the javaenv Dockerfile FROM statement,  and add openjdk, gradle, and maven on top of it. Then we could even point the path in build.gradle to pick local 'protoc' which is part of the fabric base image (as against to pulling it from maven repo).  ></body> </Action>
<Action id="18954" issue="12659" author="rameshthoomu" type="comment" created="2016-09-20 18:33:48.0" updateauthor="rameshthoomu" updated="2016-09-20 18:33:48.0"> <body><! CDATA Observed below error while testing  ~SriramaSharma  patch (https://github.com/SriramaSharma/fabric/tree/v0.6) on Power node:  00:21:56.855 ?   	github.com/hyperledger/fabric/core/chaincode/platforms/car	 no test files  00:22:09.645 2016/09/20 17:52:43 setting Number of procs to -1, was 8 00:22:09.645 2016/09/20 17:52:47 Failed Chaincode docker build: 00:22:09.645 Step 1 : FROM hyperledger/fabric-ccenv:ppc64le-0.6.1-preview-snapshot-9fca22a 00:22:09.645  ---> 0baa76e0f8c8 00:22:09.645 Step 2 : COPY package.car /tmp/package.car 00:22:09.645  ---> 0dfc7155ca77 00:22:09.645 Removing intermediate container accd4658da32 00:22:09.645 Step 3 : RUN chaintool buildcar /tmp/package.car -o $GOPATH/bin/c54f83ff2d38a4b9ebf0e7ea1ce35e2022c8144048a664e89bb2a7d43c2f6df063703721c804eef8a53a91e3f74f902fdd7b8e75bc1c5f16b6eba079db4cc55f && rm /tmp/package.car 00:22:09.645  ---> Running in a32c8cdc0ca1 00:22:09.645  91mUnrecognized option: -client 00:22:09.645 Error: Could not create the Java Virtual Machine. 00:22:09.645 Error: A fatal exception has occurred. Program will exit. 00:22:09.645  0m 00:22:09.645 --- FAIL: TestCar_BuildImage (3.40s) 00:22:09.645 	car_test.go:53: Error building Chaincode container: The command '/bin/sh -c chaintool buildcar /tmp/package.car -o $GOPATH/bin/c54f83ff2d38a4b9ebf0e7ea1ce35e2022c8144048a664e89bb2a7d43c2f6df063703721c804eef8a53a91e3f74f902fdd7b8e75bc1c5f16b6eba079db4cc55f && rm /tmp/package.car' returned a non-zero code: 1 00:22:09.645 FAIL 00:22:09.645 coverage: 0.0% of statements 00:22:09.645 FAIL	github.com/hyperledger/fabric/core/chaincode/platforms/car/test	3.438s 00:22:09.657 error: exit status  Build file: https://jenkins.hyperledger.org/sandbox/job/fabric-on-power/27/console.   ~ghaskins   ~bsmita   ~harrijk   ~muralisr  inputs please?  ></body> </Action>
<Action id="18958" issue="12659" author="bsmita" type="comment" created="2016-09-21 15:51:34.0" updateauthor="bsmita" updated="2016-09-21 15:51:34.0"> <body><! CDATA With Power it seems chaintool gives the following error: Unrecognized option: -client Error: Could not create the Java Virtual Machine. Error: A fatal exception has occurred. Program will exit.  This is because JVM on Power does not take -client flag.   Greg Haskins put in a patch for chaintool :  :jvm-opts  "-server"  He will be dropping in this patch soon, may be version v0.9.1  ></body> </Action>
<Action id="18965" issue="12659" author="samding01" type="comment" created="2016-09-21 20:07:03.0" updateauthor="samding01" updated="2016-09-21 20:07:03.0"> <body><! CDATA The issue seems to me that gradle uses os-maven-plugin  that identifies the OS, however the default version (1.2.3) does not know s390x. After replacing it with version 1.4.0, it can progress, but failed in a new place:  git diff core/chaincode/shim/java/build.gradle diff --git a/core/chaincode/shim/java/build.gradle b/core/chaincode/shim/java/build.gradle index 871ae83..1c3f58a 100644 --- a/core/chaincode/shim/java/build.gradle +++ b/core/chaincode/shim/java/build.gradle @@ -22,12 +22,14 @@ buildscript { } dependencies { classpath 'com.google.protobuf:protobuf-gradle-plugin:0.7.6' +        classpath "gradle.plugin.com.google.gradle:osdetector-gradle-plugin:1.4.0" } }  plugins { id "java" id "com.google.protobuf" version "0.7.6" +    id "com.google.osdetector" version "1.4.0" id "eclipse" id "maven-publish"  and {quote} $  gradle -b core/chaincode/shim/java/build.gradle clean ............ FAILURE: Build failed with an exception.  * What went wrong: A problem occurred configuring project ':core:chaincode:shim:java'. > Could not resolve all dependencies for configuration ':core:chaincode:shim:java:protobufToolsLocator_protoc'. > Could not find protoc-linux-s390_64.exe (com.google.protobuf:protoc:3.0.0-beta-2). Searched in the following locations: https://repo1.maven.org/maven2/com/google/protobuf/protoc/3.0.0-beta-2/protoc-3.0.0-beta-2-linux-s390_64.exe  * Try: Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.  BUILD FAILED {quote}  "protoc-3.0.0-beta-2-linux-s390_64.exe"  is not existing.   ></body> </Action>
<Action id="18990" issue="12659" author="harrijk" type="comment" created="2016-09-26 14:26:44.0" updateauthor="harrijk" updated="2016-09-26 14:26:44.0"> <body><! CDATA Hi Sam.  I believe this issue you are seeing was supposed to be addressed with a pull request that was done on Github before they moved to Gerrit.  See https://github.com/hyperledger-archives/fabric/pull/2280  I'm not sure why all of these pull requests didn't get moved into gerrit.  ></body> </Action>
<Action id="18991" issue="12659" author="samding01" type="comment" created="2016-09-26 14:43:51.0" updateauthor="samding01" updated="2016-09-26 14:43:51.0"> <body><! CDATA Hi John,  Yes, the  #2280 lets us build "protoc". but the java images needs another "protoc-gen-grpc-java" from grpc-java,  do yo have any updated information to build    "protoc-gen-grpc-java"?  Thanks,    ></body> </Action>
<Action id="18992" issue="12659" author="harrijk" type="comment" created="2016-09-26 14:57:16.0" updateauthor="harrijk" updated="2016-09-26 14:57:16.0"> <body><! CDATA Hi Sam.  I don't have any information on building protoc-gen-grpc-java.  You can check with Gong Su as he seems to be on top off the latest issues.   ></body> </Action>
<Action id="19677" issue="12659" author="harrijk" type="comment" created="2016-11-07 15:41:13.0" updateauthor="harrijk" updated="2016-11-07 15:41:13.0"> <body><! CDATA Here are the list of issues with building the javaenv docker image for the z Systems (s390x) platform:  *1.* The version of os.detector used in the java shim's build.gradle file does not recognize the s390x platform. *Mitigation Path:* include the classpath "gradle.plugin.com.google.gradle:osdetector-gradle-plugin:1.4.0" in the build.gradle file's buildscript dependency list.  *2.* The protoc:3.0.0-beta-2 and protoc-gen-grpc-java-0.13.2 dependencies to build the java shim do not exist on the maven repositories for the s390x platforms. *Mitigation Path:* Both of the above dependencies (protoc and protoc-gen-grpc-java) need to be manually built for the s390x platform.  I am working on a solution to include both of the dependencies when the javaenv docker image is built with minimal changes to the build.gradle and the main fabric/Makefile files as well as reducing the build time for the s390x version of the javaenv docker image.  As soon as these issues are resolved, we can take the next step of incorporating z Systems into the CI Pipeline for Fabric builds.  ></body> </Action>
<Action id="19679" issue="12659" author="vpaprots" type="comment" created="2016-11-07 16:19:41.0" updateauthor="vpaprots" updated="2016-11-07 16:19:41.0"> <body><! CDATA We need opinion from developers at DTCC,  ~satheeshk  perhaps. If they miss spam from JIRA, it might be good to ask for their opinion/review at #fabric-sdk-java. There are two other considerations: - Greg Haskins had mentioned, why don't we use baseimage for javaenv base? - on #fabric-sdk-java there was talk about moving to maven, which doesn't/shouldn't require as much arm-twisting to get to work on p/z, maybe that is getting ready?  ></body> </Action>
<Action id="19680" issue="12659" author="harrijk" type="comment" created="2016-11-07 16:28:11.0" updateauthor="harrijk" updated="2016-11-07 16:33:58.0"> <body><! CDATA One of the solutions that I'm looking at is to include both of the java shim build dependencies in the s390x fabric-baseimage and then use fabric-baseimage for the javeenv docker image build.  I have not done anything with the #fabric-sdk-java channel, but will take a look.  ></body> </Action>
<Action id="19688" issue="12659" author="satheeshk" type="comment" created="2016-11-08 05:26:01.0" updateauthor="satheeshk" updated="2016-11-08 05:26:01.0"> <body><! CDATA We moved away from the the common base image to make the Java chaincode runtime docker image leaner. If this solves problem with the build then we can start to use the fabric-base image again. The reason we use osdetector plugin is to generate Java classes from proto files using native protoc binaries. Moving to Maven does not actually solve this.  We can work around this with 2 approaches, 1. Checking the generated source files in the repository ( There was some discussion to remove the checked in code from git) 2. Try to use the pure java code generator (https://github.com/psaradhi/protobuf) currently in the works. I am testing this and we can hope to integrate this soon. By doing this we would no longer need protoc:3.0.0-beta-2 and protoc-gen-grpc-java-0.13.2.  Besides, this is something I could see it happen again, if we were to include other native code libraries in the future and its not supported in p/z platforms.   ></body> </Action>
<Action id="19699" issue="12659" author="harrijk" type="comment" created="2016-11-08 21:04:16.0" updateauthor="harrijk" updated="2016-11-08 21:04:16.0"> <body><! CDATA  ~satheeshk , ideally option #1 would be my preference.  If I read it correctly, this option would eliminate any need to compile the proto files into java source files.  Option #2 would be my second choice.  What would it take to move forward with option #1?  Is there anything that I could do to accelerate this effort?   ~ghaskins , your thoughts?  ></body> </Action>
<Action id="22139" issue="12659" author="denyeart" type="comment" created="2017-04-11 20:45:53.0" updateauthor="denyeart" updated="2017-04-11 20:45:53.0"> <body><! CDATA  ~harrijk  ~rameshthoomu  ~sanchezl  ~greg.haskins  Any update on this one? Is it still a valid defect?  Should the target be 1.0.0 or 1.1?  ></body> </Action>
<Action id="22150" issue="12659" author="denyeart" type="comment" body="Is this related to FAB-1794?" created="2017-04-11 21:47:16.0" updateauthor="denyeart" updated="2017-04-11 21:47:16.0"/>
<Action id="22165" issue="12659" author="harrijk" type="comment" created="2017-04-11 22:20:51.0" updateauthor="harrijk" updated="2017-04-11 22:20:51.0"> <body><! CDATA  ~denyeart   ~sanchezl   ~greg.haskins  ...This issue relates for FAB-1794.  Although changes have been made to the Java SHIM build process, the issue still remains that the Java SHIM cannot build on z and p due to architecture specific pre-reqs that are currently not available.  The end result of this issue is that Java chaincode is not currently supported on z or p.  I had attempted to bump up the priority of FAB-1794 to "highest", but it was brought back down to "high".  I would like to have Java chaincode support in HL 1.0, if possible  Luis has started to take a look at what is involved to resolve this Java SHIM build issue for z and p.    ></body> </Action>
<Action id="22168" issue="12659" author="denyeart" type="comment" body=" ~harrijk  Can either FAB-358 or FAB-1794 be closed as dup of the other one?  Or do we need two different fixes?" created="2017-04-12 01:52:19.0" updateauthor="denyeart" updated="2017-04-12 01:52:19.0"/>
<Action id="22195" issue="12659" author="harrijk" type="comment" body=" ~denyeart  You can close out FAB-358 as a dup of FAB-1794. " created="2017-04-12 14:11:30.0" updateauthor="harrijk" updated="2017-04-12 14:11:30.0"/>
