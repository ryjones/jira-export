<Action id="59631" issue="36536" author="mhbauer" type="comment" created="2019-04-30 23:05:01.0" updateauthor="mhbauer" updated="2019-04-30 23:05:01.0"> <body><! CDATA The code looks significantly different now.  The provided has some info from lines 394 & 397. These lines are now in TestHandshake.  TestBasic is now lines 443-462.     I've run the whole package a couple dozen times each with racing on and off and with logging on and off, and haven't seen any failures in the current codebase at 892d4e6e86c59c375d33e8d9483925870a5462c2  ></body> </Action>
<Action id="60045" issue="36536" author="mhbauer" type="comment" created="2019-05-16 00:06:30.0" updateauthor="mhbauer" updated="2019-05-16 00:06:30.0"> <body><! CDATA This is really insidious. It looks like the code is trying to do something clever and use one grpc connection to go both ways. The problem is it doesn't hang up symmetrically.  We need to look very carefully at the logic for onConnected and getConnection and make sure they both do the same thing, or do the simpler thing and let each direction have it's own connection.  This is at the core of everything in gossip so we should be very careful.  ></body> </Action>
<Action id="60142" issue="36536" author="naaman" type="comment" created="2019-05-19 07:04:36.0" updateauthor="naaman" updated="2019-05-19 07:04:36.0"> <body><! CDATA  ~MHBauer  that's correct the code attempts to maintain a single connection between two members. There are important advantages to using a single connection, compared to using a different connection in each direction, so the design is good. The implementation, however, is lacking.  ~ronenschafferibm  has already identified a few issues related to the communication between members. One issue is that the code doesn't properly handle the case where both members establish a connection to the other side at the same time (a common scenario in tests where both members are started together). Changing the bootstrap to include only a single member resolved these issues (only one member is establishing a connection) but that's obviously not an acceptable solution. Ronen is going to take a closer look into these issues.      ></body> </Action>
<Action id="60182" issue="36536" author="mhbauer" type="comment" created="2019-05-20 23:18:12.0" updateauthor="mhbauer" updated="2019-05-20 23:18:12.0"> <body><! CDATA What are the advantages? Where is the design? I would like to be included on finding a solution, where are we talking about this?  ></body> </Action>
<Action id="60192" issue="36536" author="naaman" type="comment" created="2019-05-21 10:25:14.0" updateauthor="naaman" updated="2019-05-21 15:58:48.0"> <body><! CDATA The advantages include the ability to establish bi-directional communication even if one node is behind a firewall, more reliable failure detection, simpler logic of maintaining membership, and more economic use of resources.     ></body> </Action>
<Action id="60230" issue="36536" author="mhbauer" type="comment" body="If we&apos;re going to do open-source, we can&apos;t have secret design documents." created="2019-05-22 02:22:44.0" updateauthor="mhbauer" updated="2019-05-22 02:22:44.0"/>
<Action id="60232" issue="36536" author="mhbauer" type="comment" created="2019-05-22 02:24:34.0" updateauthor="mhbauer" updated="2019-05-22 02:24:34.0"> <body><! CDATA I'll give you the firewall thing. Maybe resource usage.  We don't seem to be able to detect failures, and if we do, we seem to not care about them.  The logic in the code of gossip is hardly simple.  We need something that works, not something that's clever.  ></body> </Action>
<Action id="61117" issue="36536" author="ronenschafferibm" type="comment" created="2019-06-19 11:18:56.0" updateauthor="ronenschafferibm" updated="2019-06-19 11:18:56.0"> <body><! CDATA closing in favor of:  https://jira.hyperledger.org/browse/FAB-15613 https://gerrit.hyperledger.org/r/c/fabric/+/31841  ></body> </Action>
<Action id="61424" issue="36536" author="mhbauer" type="comment" body="test is gone as of https://gerrit.hyperledger.org/r/#/c/fabric/+/31841/" created="2019-07-02 19:10:23.0" updateauthor="mhbauer" updated="2019-07-02 19:10:23.0"/>
