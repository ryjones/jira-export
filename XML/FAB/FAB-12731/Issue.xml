<Issue id="35113" key="FAB-12731" number="12731" project="10002" reporter="senthil1" creator="senthil1" type="10003" summary="Decouple PvtStore Reconciliation from StateDB" priority="3" resolution="10001" status="6" created="2018-11-06 02:38:25.0" updated="2020-06-11 15:31:01.0" resolutiondate="2020-01-07 22:57:54.0" votes="0" watches="2" workflowId="47085"> <description><! CDATA So far the design philosophy was that the scope of block storage is limited to storing and retrieving blocks data with certain guarantees and statedb is for the state management and a higher layer ('kvledger') coordinates the acts between the two. However, with maintaining the state of the consumption of blocks (for pvtstore reconciliation) within private data block storage breaks that assumption.  The knowledge of what blocks have been consumed for the purpose of state update should not lie with the source. Further with these two functions, it assumes that we are fixing the design for apply to the statedb in an on-line fashion.  Rather what we can do is that we maintain a list in a separate leveldb say "OldBlocksAvailable". For maintaining such coordination data, we already have a bookkeeper and it is passed on to the txmgr. As of now, it is used for maintaining for keeping track of the keys that are getting expired with the committing block. However, it is designed to maintain any bookkeeping. With this we can do the following.  In the online commit transaction for old blocks  1) update the bookkeeper with the information "OldBlocksAvailable"  2) Commit the blocks to pvtdata storage  3) syncing of statedb with old data happens in a background goroutine  ></description> </Issue>
