<Issue id="12640" key="FAB-339" number="339" project="10002" reporter="scottz" creator="scottz" type="10004" summary="shout from the mountaintops when non-deterministic chaincode triggers network failure" priority="3" resolution="10000" status="6" created="2016-09-09 21:36:32.0" updated="2018-07-20 14:10:09.0" resolutiondate="2016-10-06 00:29:37.0" votes="0" watches="3" workflowId="36196"> <description><! CDATA Efforts to debug customer issues have uncovered a need for additional capabilities in order to support the product. Currently it takes much longer than it should, in many circumstances.  For example, in one scenario, a real problem is that a major assumption of the hyperledger fabric could be broken by customers writing chaincode: that is, the network assumes the chaincode is deterministic, which means all "good" validating peers will reach the same results with the same inputs. A customer could run non-deterministic chaincode, which breaks that assumption, and can lead to undesirable behavior such as a halting consensus network!  The community may still suggest that chaincode to be deterministic in the next architectural release for the network and chaincode to work most smoothly - although mechanisms are expected to be put in place in the fabric to prevent any customers' non-deterministic chaincode from corrupting the ledger. In the meantime, we can help ourselves and our customers by slightly changing a few things once this situation is discovered. This issue is to request:  Raise the visibility by changing the detail level of any log that does get printed when these circumstances are reached, so it gets printed at ALL log settings, instead of being printed only at the debug level. This is a critical log: the peer is effectively inoperable, and the network could also be inoperable.  Change the log message to more clearly state the critical nature of the problem: that the network has halted because the ledgers have diverged - as a result of the user's non-deterministic chaincode. When a peer cannot obtain a new sequence number, as can happen in this situation, it means that the peer's ledger copy has diverged and the peer can no longer participate in the consensus network. And once the ledger copies diverge on enough (F+1) peers, then the network effectively halts. Once one drops out, then it is very likely that others will drop out too (possibly simultaneously although it could depend on the external inputs), since the same chaincode instance is deployed throughout the network. It was observed that the chaincode ledgers diverged as a result of the chaincodes reaching different results, and committing those variations to their own ledgers.  Do anything else that can be done to raise visibility immediately once any peer realizes that it has effectively dropped out - and especially once there are no longer enough participating peers in the network for consensus to be reached and proceed.  Today, all deployments on a given peer network share the same ledger and thus would be affected. However, it seems best that we do not make the peers intentionally crash, because with just some minor changes the same peers conceivably could be used to provide a service for several networks - each having their own separate ledgers. Separating the ledger behavior from the peer behavior would mean that one customer network chaincode deployment would not totally take down the peers and affect other deployments.  The upcoming release in several months of the new architecture, specifically the endorsers, should prevent such a divergence of the ledgers. But until that time, fixing this issue will reduce the support efforts and help to educate users of the fabric about eliminating any non-deterministic behavior in their chaincode.   ></description> </Issue>
