<Action id="18878" issue="12640" author="kchristidis" type="comment" created="2016-09-13 06:30:56.0" updateauthor="kchristidis" updated="2016-09-13 06:30:56.0"> <body><! CDATA Scott, can you tell me whether the solution outlined here would cover you or not?  https://jira.hyperledger.org/browse/FAB-189  I have submitted two patches for this (and I'll adjust them so that a "network can no longer make progress" message is printed before panicking, according to Gari's request):  https://gerrit.hyperledger.org/r/#/c/985/ https://gerrit.hyperledger.org/r/#/c/989/  ></body> </Action>
<Action id="18894" issue="12640" author="scottz" type="comment" created="2016-09-13 16:08:38.0" updateauthor="scottz" updated="2016-09-13 16:08:38.0"> <body><! CDATA Yes, those planned commits would appear to address this issue, as long as they include log messages requested by reviewers for every instance where we decide to panic. The additional logs must: # share the reason for the panic, # suggest the probable causes, where possible, and how to resolve and prevent, # be customer-friendly.   ></body> </Action>
<Action id="18895" issue="12640" author="kchristidis" type="comment" created="2016-09-13 16:40:52.0" updateauthor="kchristidis" updated="2016-09-13 16:40:52.0"> <body><! CDATA Scott, the problem is we shouldn't be too verbose with our logs. Check this one for instance and look into review #1: https://gerrit.hyperledger.org/r/#/c/585/  I'll gladly take suggestions for what to put in there, but it has to be succinct.  ></body> </Action>
<Action id="18912" issue="12640" author="scottz" type="comment" body="I understand that generally we don&apos;t want verbose logs filling up disk space. But they must be as useful as possible to the intended user. Is there an operations guide published and maintained where we provide more verbose information that is more useful to operations folks? Assuming not, then I see more benefit than harm in adding information useful for operators and support personnel, who are the intended users of the logs. One could easily argue that the log should be MORE verbose, at least in this type of circumstance. The network is halting! What is the operator supposed to do next? What is the recovery action? Am I correct in believing that this particular log will be printed once and only once (per peer), followed by a panic and all processing will stop? It&apos;s not going to fill up any disks." created="2016-09-15 13:32:21.0" updateauthor="scottz" updated="2016-09-15 13:32:21.0"/>
<Action id="19034" issue="12640" author="scottz" type="comment" created="2016-09-28 15:38:35.0" updateauthor="scottz" updated="2016-09-28 15:38:35.0"> <body><! CDATA FAB-189 provided a new message with a panic and the peer halts: "Network unable to find stable certificate for seqNo %d (%d different values observed already)"  I think this could be made more clear by adding that the likely cause is that the client chaincode is non-deterministic. That way the customers know what to do next. A little more text here shouldn't cause a problem with disk space, since the network is halting anyways.  On the other hand, since our v0.5 or v0.6 support people will be involved and reading the logs, I suppose they should know what that message implies, so maybe this is sufficient. I am ok with closing this issue if there are no other plans in the works to enhance this further.  ></body> </Action>
<Action id="19235" issue="12640" author="kletkeman" type="comment" created="2016-10-14 20:18:49.0" updateauthor="kletkeman" updated="2016-10-14 20:18:49.0"> <body><! CDATA Perhaps customers should be encouraged to test locally with a rudimentary tool to signal divergence immediately ... I've put something together that is trivial to set up on node-red and talks to 4 peer networks. While this does not eliminate the risk, it would help to raise awareness.  https://github.com/ibm-watson-iot/blockchain-samples/tree/master/testing/node-red/fabricDivergenceMonitor   ></body> </Action>
<Action id="24770" issue="12640" author="kletkeman" type="comment" created="2017-05-31 14:14:23.0" updateauthor="kletkeman" updated="2017-05-31 14:14:23.0"> <body><! CDATA I'm curious as to why this bug is still around? In Fabric v1, the chaincode is executed on a set of endorsers and the read / write sets are compared by the client SDK or the client itself. The decision to proceed with the transaction is made at that point depending on the local policy. The network does not care what the policy is, and is perfectly happy to commit a flawed read / write set into the chain.  In other words, the system should be designed to prevent non-determinism ofÂ state written to the database, but letting it through has no effect on the operation of the network itself.  ></body> </Action>
<Action id="24778" issue="12640" author="kchristidis" type="comment" created="2017-05-31 15:11:40.0" updateauthor="kchristidis" updated="2017-05-31 15:11:40.0"> <body><! CDATA This is a leftover from 0.6 and is indeed no longer relevant.  Was bumped because of some mass editing. Thanks for the heads up, closing.  ></body> </Action>
