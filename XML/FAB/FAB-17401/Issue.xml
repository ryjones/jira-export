<Issue id="43997" key="FAB-17401" number="17401" project="10002" reporter="tatsu-sato" assignee="tatsu-sato" creator="tatsu-sato" type="10001" summary="Add function to query the details of the approved chaincode definition" priority="3" resolution="10000" status="6" created="2020-01-15 01:31:04.0" updated="2020-07-01 10:43:36.0" resolutiondate="2020-07-01 10:26:58.0" votes="0" watches="2" workflowId="57863"> <description><! CDATA Currently, Fabric peer CLI does not seem to provide a function to see the details of approved chaincode definitions.  On the other hand, Fabric admins will need to confirm/use the information after approval for their operations. For example, the detailed information will be useful to Fabric admins in the following use cases: - When confirming/checking the applied parameters after running `approveformyorg` command - The admins may miss a record the parameters when executing `approveformyorg` - The admins may not notice operation mistakes when executing `approveformyorg` with parameters especially when environment variables are interpolated in the parameters (typically for package ID) - When considering updating the package ID for the current sequence - When giving the approved parameters for the next sequence to other organizations     So, we propose to add a function for querying the details of the approved chaincode definition to Fabric peer CLI.  The following shows a basic design of new command.  *Syntax:* {code:java} Usage: peer lifecycle chaincode queryapproved  flags   Flags: -C, --channelID string               The channel on which this command should be executed --connectionProfile string       The fully qualified path to the connection profile that provides the necessary connection information for the network. Note: currently only supported for providing peer connection information -h, --help                           help for querycommitted -n, --name string                    Name of the chaincode -O, --output string                  The output format for query results. Default is human-readable plain-text. json is currently the only supported format. --peerAddresses stringArray      The addresses of the peers to connect to --sequence int                   The sequence number of the chaincode definition for the channel --tlsRootCertFiles stringArray   If TLS is enabled, the paths to the TLS root cert files of the peers to connect to. The order and number of certs specified should match the --peerAddresses flag {code}    *Example of usage:*  *Case-1: Running with a sequence number (specified)* {code:java} $ peer lifecycle chaincode queryapproved --channelID mychannel –chaincode mycc –sequence 1 -o orderer.example.com:7050 --tls --cafile $ORDERER_CA --peerAddresses peer0.org1.example.com:7051  Approved chaincode definition for chaincode 'mycc' on channel 'mychannel': sequence: 1, version: 1, init-required: true, package-id: myccv1:a7ca45a7cc85f1d89c905b775920361ed089a364e12a9b6d55ba75c965ddd6a9, endorsement-plugin: escc, validation-plugin: vscc (omitted) {code}    *Case-2: Running without a sequence number*  If the parameter of sequence is not provided, this command returns the latest approved chaincode definition　(latest: new one of the currently defined sequence number and the next sequence number). {code:java} $ peer lifecycle chaincode queryapproved --channelID mychannel –chaincode mycc -o orderer.example.com:7050 --tls --cafile $ORDERER_CA --peerAddresses peer0.org1.example.com:7051  Approved chaincode definition for chaincode 'mycc' on channel 'mychannel': sequence: 2, version: 2, init-required: false, package-id: myccv2:a7ca45a7cc85f1d89c905b775920361ed089a364e12a9b6d55ba75c965ddd6a0, endorsement-plugin: escc, validation-plugin: vscc (omitted) {code}    *Case-3: Running with the JSON output format for query results* {code:java} $ peer lifecycle chaincode queryapproved --channelID mychannel –chaincode mycc –sequence 1 -o orderer.example.com:7050 --tls --cafile $ORDERER_CA --peerAddresses peer0.org1.example.com:7051 --output json { "sequence": 1, "version": "1", "endorsement_plugin": "escc", "validation_plugin": "vscc", "validation_parameter": "EiAvQ2hhbm5lbC9BcHBsaWNhdGlvbi9FbmRvcnNlbWVudA==", "collections": {}, "init_required": true, "package_id": "myccv2:a7ca45a7cc85f1d89c905b775920361ed089a364e12a9b6d55ba75c965ddd6a0" } {code}    ></description> </Issue>
