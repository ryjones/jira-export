<Issue id="15718" key="FAB-3131" number="3131" project="10002" reporter="denyeart" assignee="chris.elder" creator="denyeart" type="10004" summary="Peer hangs if CouchDB connection becomes unresponsive - need a timeout" priority="2" resolution="10000" status="6" created="2017-04-12 22:15:14.0" updated="2018-07-20 14:12:12.0" resolutiondate="2017-04-18 17:40:02.0" votes="0" watches="2" workflowId="37974"> <description><! CDATA Need to set a timeout for the couchdb http client connection. See explanation and sample solution here: https://medium.com/@nate510/don-t-use-go-s-default-http-client-4804cb19f779  The timeout can be configurable in core.yaml couchdb section.  Once the timeout is in place, hung connections will error out and retry logic would take over.  Timeout needs to be relatively high, it has nothing to do with how 'close' couchdb is to peer.  Let's look at worst case... CouchDB builds indexes at query time (for any new docs since last index update), not at insert/update time like most databases.  Let's say a new peer has just come up and done state transfer on 1 million blocks.  CouchDB state db will be built out, but the first query during a simulation will have to build out an index covering millions of documents. The amount of time is probably measured in seconds.  The other thing to consider is chaincode timeout.  Chaincode execution timeout is 30 seconds by default.  Given these two facts, I would suggest default timeout for CouchDB to be 20 seconds.  In the case of a CouchDB connection anomaly during simulation, this will allow for one failure after 20s and one subsequent retry before hitting the simulation timeout.  I have created Jira item (for future) to help with the worst case state transfer scenario, by warming up the indexes prior to simulation: https://jira.hyperledger.org/browse/FAB-3183  ></description> </Issue>
