<Action id="42576" issue="29194" author="rameshthoomu" type="comment" created="2018-04-05 16:18:18.0" updateauthor="rameshthoomu" updated="2018-04-05 16:18:18.0"> <body><! CDATA Tested byfn and efyn tests on on baseimage 0.4.6 (Go Version 1.9.2) and 0.4.7 (Go Version 1.10). Below are the observations  - failed to install on 0.4.7 (go version 1.10) but the same worked on 0.4.6  ></body> </Action>
<Action id="42603" issue="29194" author="jyellick" type="comment" created="2018-04-05 19:33:59.0" updateauthor="jyellick" updated="2018-04-05 19:33:59.0"> <body><! CDATA I'm also observing this failure in the e2e with the latest master.   {noformat} 2018-04-05 19:31:57.833 UTC  golang-platform  func1 -> DEBU 041 vendoring src/github.com/hyperledger/fabric/examples/chaincode/go/example02/chaincode.go -> src/github.com/hyperledger/fabric/examples/chaincode/go/example02/cmd/vendor/github.com/hyperledger/fabric/examples/chaincode/go/example02/chaincode.go 2018-04-05 19:31:57.833 UTC  container  WriteFileToPackage -> DEBU 042 Writing file to tarball: src/github.com/hyperledger/fabric/examples/chaincode/go/example02/cmd/main.go 2018-04-05 19:31:57.835 UTC  container  WriteFileToPackage -> DEBU 043 Writing file to tarball: src/github.com/hyperledger/fabric/examples/chaincode/go/example02/cmd/vendor/github.com/hyperledger/fabric/examples/chaincode/go/example02/chaincode.go fatal error: unexpected signal during runtime execution  signal SIGSEGV: segmentation violation code=0x1 addr=0xe5 pc=0x7f770f5fa3f8   runtime stack: runtime.throw(0xf46ef8, 0x2a) 	/opt/go/src/runtime/panic.go:619 +0x81 runtime.sigpanic() 	/opt/go/src/runtime/signal_unix.go:372 +0x28e  goroutine 1  syscall : runtime.cgocall(0xbdc520, 0xc4201eea98, 0xf4547c) 	/opt/go/src/runtime/cgocall.go:128 +0x64 fp=0xc4201eea50 sp=0xc4201eea18 pc=0x4021a4 os/user._Cfunc_mygetpwuid_r(0x3e8, 0xc4202a8030, 0x2623e80, 0x400, 0xc420428010, 0x0) 	_cgo_gotypes.go:170 +0x4d fp=0xc4201eea98 sp=0xc4201eea50 pc=0x905abd os/user.lookupUnixUid.func1.1(0x7f77000003e8, 0xc4202a8030, 0x2623e80, 0x400, 0xc420428010, 0xc4201eeb28) 	/opt/go/src/os/user/cgo_lookup_unix.go:100 +0x13f fp=0xc4201eead8 sp=0xc4201eea98 pc=0x90769f os/user.lookupUnixUid.func1(0x10) 	/opt/go/src/os/user/cgo_lookup_unix.go:100 +0x50 fp=0xc4201eeb18 sp=0xc4201eead8 pc=0x907740 os/user.retryWithBuffer(0xc42036a150, 0xc4201eec08, 0xc42036a150, 0xe8e880) 	/opt/go/src/os/user/cgo_lookup_unix.go:253 +0x3b fp=0xc4201eeb78 sp=0xc4201eeb18 pc=0x906b6b os/user.lookupUnixUid(0x3e8, 0x0, 0x0, 0x0) 	/opt/go/src/os/user/cgo_lookup_unix.go:96 +0x130 fp=0xc4201eec40 sp=0xc4201eeb78 pc=0x905ff0 os/user.lookupUserId(0xc42040c060, 0x4, 0x0, 0x46bfc4, 0x3e8) 	/opt/go/src/os/user/cgo_lookup_unix.go:86 +0x73 fp=0xc4201eec78 sp=0xc4201eec40 pc=0x905e83 os/user.LookupId(0xc42040c060, 0x4, 0x4, 0x0, 0x0) 	/opt/go/src/os/user/lookup.go:41 +0x51 fp=0xc4201eecc8 sp=0xc4201eec78 pc=0x905481 archive/tar.statUnix(0xff8b20, 0xc4202d8000, 0xc4204980e0, 0x16f6860, 0xc420000180) 	/opt/go/src/archive/tar/stat_unix.go:39 +0x4c1 fp=0xc4201eed48 sp=0xc4201eecc8 pc=0x9111b1 archive/tar.FileInfoHeader(0xff8b20, 0xc4202d8000, 0xc420474240, 0x5a, 0x0, 0x0, 0x7f771e246c90) 	/opt/go/src/archive/tar/common.go:699 +0x491 fp=0xc4201eeec8 sp=0xc4201eed48 pc=0x90a681 github.com/hyperledger/fabric/core/container/util.WriteStreamToPackage(0xfe19c0, 0xc42029c000, 0xc420474240, 0x5a, 0xc4204681e0, 0x97, 0xc42046e380, 0x0, 0x0) 	/opt/gopath/src/github.com/hyperledger/fabric/core/container/util/writer.go:181 +0x18b fp=0xc4201ef080 sp=0xc4201eeec8 pc=0x9512eb github.com/hyperledger/fabric/core/container/util.WriteFileToPackage(0xc420474240, 0x5a, 0xc4204681e0, 0x97, 0xc42046e380, 0x0, 0x0) 	/opt/gopath/src/github.com/hyperledger/fabric/core/container/util/writer.go:171 +0x3aa fp=0xc4201ef198 sp=0xc4201ef080 pc=0x9510ba github.com/hyperledger/fabric/core/chaincode/platforms/golang.(*Platform).GetDeploymentPayload(0x171ae58, 0xc420341ce0, 0x0, 0x0, 0x0, 0x0, 0x0) 	/opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/platforms/golang/platform.go:469 +0x1346 fp=0xc4201ef9b8 sp=0xc4201ef198 pc=0x9595d6 github.com/hyperledger/fabric/core/chaincode/platforms.GetDeploymentPayload(0xc420341ce0, 0x0, 0x0, 0xf241ec, 0xe, 0xc4202909c0) 	/opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/platforms/platforms.go:88 +0x89 fp=0xc4201efa00 sp=0xc4201ef9b8 pc=0x95eb19 github.com/hyperledger/fabric/core/container.GetChaincodePackageBytes(0xc420341ce0, 0x0, 0x0, 0xc4203b88c6, 0x6, 0xc42012b31c) 	/opt/gopath/src/github.com/hyperledger/fabric/core/container/vm.go:100 +0x96 fp=0xc4201efa48 sp=0xc4201efa00 pc=0xb6a956 github.com/hyperledger/fabric/peer/chaincode.getChaincodeDeploymentSpec(0xc420341ce0, 0xc420341c01, 0x0, 0x0, 0xf1f000) 	/opt/gopath/src/github.com/hyperledger/fabric/peer/chaincode/common.go:57 +0x115 fp=0xc4201efab8 sp=0xc4201efa48 pc=0xb83c45 ... {noformat}   ></body> </Action>
<Action id="42683" issue="29194" author="rameshthoomu" type="comment" created="2018-04-08 03:08:28.0" updateauthor="rameshthoomu" updated="2018-04-08 03:08:28.0"> <body><! CDATA Observed the same error in fabric-chaincode-node integration tests. see thebuild logs here  https://logs.hyperledger.org/production/vex-yul-hyp-jenkins-3/fabric-chaincode-node-verify-x86_64/171/console.log.gz    ~sanchezl   ></body> </Action>
<Action id="42695" issue="29194" author="denyeart" type="comment" created="2018-04-08 22:25:34.0" updateauthor="denyeart" updated="2018-04-08 22:25:34.0"> <body><! CDATA  ~rameshthoomu   ~jyellick  Does the problem always happen, or intermittent?  I'm wondering why we're not seeing the problem in the smoke tests?     ></body> </Action>
<Action id="43012" issue="29194" author="rameshthoomu" type="comment" body="Not seeing this issue now.." created="2018-04-16 15:18:12.0" updateauthor="rameshthoomu" updated="2018-04-16 15:18:12.0"/>
<Action id="43257" issue="29194" author="christopherferris" type="comment" body="has this been resolved?" created="2018-04-22 14:11:56.0" updateauthor="christopherferris" updated="2018-04-22 14:11:56.0"/>
<Action id="43583" issue="29194" author="scottz" type="comment" body=" ~jyellick  (e2e),   ~rameshthoomu  (eyfn) : Is the problem gone? Are we using go v1.10 everywhere now (except Vagrant in fabric/devenv/setup.sh which I know is using v1.09)? Using baseimage 0.4.7? What else changed between April 5th and April 16th that might have fixed it?" created="2018-04-27 19:39:42.0" updateauthor="scottz" updated="2018-04-27 19:39:42.0"/>
<Action id="43588" issue="29194" author="jyellick" type="comment" body="I am at a bit of a loss, I&apos;m no longer able to reproduce either.  I&apos;m not sure what it might have been.  We could always bisect it, but do we think it&apos;s worthwhile?" created="2018-04-27 21:28:14.0" updateauthor="jyellick" updated="2018-04-27 21:28:14.0"/>
<Action id="43590" issue="29194" author="denyeart" type="comment" created="2018-04-28 00:42:19.0" updateauthor="denyeart" updated="2018-04-28 00:42:19.0"> <body><! CDATA  ~scottz   ~jyellick  I'll go ahead and close it... it can always be re-opened if the problem shows up again.  Note, I have a CR to update vagrant to go 1.10:  https://gerrit.hyperledger.org/r/#/c/21149/   I assume there was no good reason to keep vagrant at 1.9...and in fact I started to get compile errors at that level...  ></body> </Action>
