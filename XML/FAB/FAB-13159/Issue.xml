<Issue id="30831" key="FAB-13159" number="13159" project="10002" reporter="hhasni42" assignee="denyeart" creator="hhasni42" type="10004" summary="CouchDB Index from chaincode - issue with dbArtifactsDir - v1.1.0" priority="3" resolution="10203" status="6" created="2018-06-01 14:32:41.0" updated="2020-01-08 04:42:11.0" resolutiondate="2020-01-08 04:42:11.0" votes="1" watches="5" workflowId="43292"> <description><! CDATA Hello!  *ISSUE ABOUT v1.1.0*  I can't work with CouchDB Index from chaincode at installation/instantiation time following this documentation :  http://hyperledger-fabric.readthedocs.io/en/release-1.1/couchdb_as_state_database.html#using-couchdb-from-chaincode   When I create my index manually it work very well.  {code:java} % curl -X POST http://localhost:5984/hhasni/_index -H "Content-Type: application/json" -d '{ "index": { "fields":  "test"  }, "name" : "test-index", "type" : "json" }'{code}      {code:java} % docker logs -f cdbp0.org0  ...   notice  2018-05-30T10:31:10.356348Z nonode@nohost <0.16485.0> 1f6d4ebb83 localhost:5984 172.27.0.1 undefined POST /hhasni/_index 200 ok 42  ... {code}       But When i try tu use the path "_META-INF/statedb/couchdb/indexes_" it's not working  Indeed I have a build directory named "_build-chaincode"_    {code:java} "chaincode": { "name":"blocktest-cc", "version":"v0.0.1", "chaincode_path":"../gocc/", "build_dir":"build-chaincode", "channel_name":"blocktest-channel", "key_val_store_path":"/resources/tests/test-conf/keyValueStore", "config_path":"/../resources/conf/Org0/p0/blocktest-channel.tx", "state_db_views_conf_path":"/resources/views/testDesignDoc.json" }{code}    So my env look like this:   {code:java} go/ +-- src/ +-- src/build-chaincode/ +-- src/build-chaincode/chaincode.go +-- src/build-chaincode/META-INF/statedb/couchdb/indexes/indexTest.json{code}    I have to do some modifications in order to make it work with my env!  Let me know if it is my misunderstanding or it's is a useful feature.    {code:java} diff --git a/core/common/ccprovider/cc_statedb_artifacts_provider.go b/core/common/ccprovider/cc_statedb_artifacts_provider.go index b145fb8c4..2dd48a4bd 100644 — a/core/common/ccprovider/cc_statedb_artifacts_provider.go +++ b/core/common/ccprovider/cc_statedb_artifacts_provider.go @@ -17,7 +17,7 @@ import ( ) const (  ccPackageStatedbDir = "META-INF/statedb/" + CcPackageStatedbDir = "META-INF/statedb/" ) // tarFileEntry encapsulates a file entry and it's contents inside a tar @@ -72,7 +72,7 @@ func ExtractStatedbArtifactsFromCCPackage(ccpackage CCPackage) (statedbArtifacts return nil, err } ccproviderLogger.Debugf("header.Name = %s", header.Name)  if !strings.HasPrefix(header.Name, ccPackageStatedbDir) { + if !strings.Contains(header.Name, CcPackageStatedbDir){ continue } if err = tw.WriteHeader(header); err != nil { @@ -111,7 +111,9 @@ func ExtractFileEntries(tarBytes   byte, filterDirs map string bool) (  *TarFile } ccproviderLogger.Debugf("Processing entry from tar: %s", tarHeader.Name) //Ensure that this is a file located in the dir present in the 'filterDirs' if !tarHeader.FileInfo().IsDir() && filterDirs filepath.Dir(tarHeader.Name)  { + strings.Index(tarHeader.Name, "/") + tmp := tarHeader.Name strings.Index(tarHeader.Name, CcPackageStatedbDir):  + if !tarHeader.FileInfo().IsDir() && filterDirs filepath.Dir(tmp)  { ccproviderLogger.Debugf("Selecting file entry from tar: %s", tarHeader.Name) //read the tar entry into a byte array fileContent, err := ioutil.ReadAll(tarReader) diff --git a/core/common/ccprovider/metadata/validators.go b/core/common/ccprovider/metadata/validators.go index bb6473cca..0347a4751 100644    a/core/common/ccprovider/metadata/validators.go +++ b/core/common/ccprovider/metadata/validators.go @@ -12,18 +12,18 @@ import ( "path/filepath" "reflect" "strings" - "github.com/hyperledger/fabric/common/flogging" ) var logger = flogging.MustGetLogger("metadata") +var metadataPath = "META-INF/statedb/couchdb/indexes" // fileValidators are used as handlers to validate specific metadata directories type fileValidator func(fileName string, fileBytes   byte) error // Currently, the only metadata expected and allowed is for META-INF/statedb/couchdb/indexes. var fileValidators = map string fileValidator{  "META-INF/statedb/couchdb/indexes": couchdbIndexFileValidator, + metadataPath : couchdbIndexFileValidator, } // UnhandledDirectoryError is returned for metadata files in unhandled directories @@ -57,7 +57,8 @@ func (e *InvalidIndexContentError) Error() string { // according to the validation rules of the metadata directory (metadataType) func ValidateMetadataFile(fileName string, fileBytes   byte, metadataType string) error { // Get the validator handler for the metadata directory  fileValidator, ok := fileValidators metadataType  + tmp := metadataType strings.Index(metadataType, metadataPath):  + fileValidator, ok := fileValidators tmp  // If there is no validator handler for metadata directory, return UnhandledDirectoryError if !ok {   {code}       ></description> </Issue>
