<Issue id="28781" key="FAB-9066" number="9066" project="10002" reporter="jyellick" assignee="mastersingh24" creator="jyellick" type="10001" summary="Remove the fabric/msp/mgmt package" priority="3" status="3" created="2018-03-22 23:39:14.0" updated="2019-10-25 10:07:00.0" votes="0" watches="4" workflowId="35638"> <description><! CDATA Presently, much of the peer depends on the {{fabric/msp/mgmt}} package. This package attempts to serve as the 'crypto source', by maintaining a package level singleton map from channel to MSPManager, and additionally maintains a package level singleton representing the local MSP.  This causes no end of headaches in development, and in support.  From a development perspective: # DevelopersÂ are lured into calling {{mspmgmt.GetManagerForChain}} which introduces an un-mockable external dependency and makes any code which uses it untestable (from a unit testing perspective). # Different portions of the peer will need to use different versions of the MSP managers (for instance, the gossip network might need to use crypto material from the most recent config block to fetch blocks, while the transaction validation code needs to use the MSP manager from the previous config block for validating a transaction) and a common singleton map prevents this. # Because the code creates and then stores (uninitialized) managers for channels which do not exist, errors are cryptic and inconsistent, depending on whether a non-existent channel has been queried before # It is impossible for a single process to load two different local signing identities, so basic single-process multi-party integration tests are not possible. # Tests of code referencing this package end up loading and using real crypto, which although negligible relative to some of the other slowdowns for unit tests, performs unnecessary real crypto computations.  From a support perspective: # The local MSP is initialized before logging takes affect. So, problems with the local MSP are very difficult to debug. # The initialization order of the the singletons matter. If an MSP Manager is initialized before the Local MSP, this can cause the local MSP to be initialized with the wrong (default) config. Attempting to ascertain initialization order is challenging because it occurs via imports and side effect.  We need to fix all of the code which depends upon this package to stop referencing it, and to instead accept the required crypto providers as dependencies. Unit tests can then properly mock this crypto, they can also be run given a particular point in time crypto context (such as gossip using the latest, while validation using another). And finally, logging initialization and debugging becomes much more straightforward, as it can be tracked in the normal execution flow and not as package import side effect.  ></description> </Issue>
