<Issue id="31920" key="FAB-11175" number="11175" project="10002" reporter="angelo.decaro" assignee="angelo.decaro" creator="angelo.decaro" type="10001" summary="As a token infrastructure (committing peer) developer, I can recognise and process an  &quot;issue tokens&quot; transaction without impacting the ledger state" priority="3" resolution="10000" status="6" created="2018-07-16 13:39:46.0" updated="2020-06-11 15:30:48.0" resolutiondate="2018-11-08 09:22:14.0" votes="0" watches="1" workflowId="43309"> <description><! CDATA *Acceptance*: A (simulated) client generates an "issue tokens" transaction. Upon receiving this transaction, a committing peer redirects its processing to its FabToken specific validation & commit components.  The transaction is to be marked as valid during validation and invalid in the end of commit phase and will have no impact on the ledger state.  In more details, these are the points of entry: * *Enabling FabToken Transaction Processor*: Customised transaction processors are setup with a call to *ledgermgmt.Initialize(...)*. This function is invoked in two places: *peer/peer.go* and *node/start.go*. In order to enable fabtoken transaction processing, those two entry points will be modified to include also *fabtoken.TxProcessor*. * *Enabling FabToken Validation:* FabToken Validation is to be considered as a _statically compiled handler_, therefore a new method called *FabTokenValidation* will be added to *library.HandleLibray*. * *The new method will return an instance of *fabtoken.ValidationFactory*.  ></description> </Issue>
