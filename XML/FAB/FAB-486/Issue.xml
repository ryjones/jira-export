<Issue id="12787" key="FAB-486" number="486" project="10002" reporter="bmos299" assignee="bmos299" creator="bmos299" type="10002" summary="Release Notes for Migrating from .5 to .6 Fabric" priority="3" resolution="10000" status="6" created="2016-09-27 16:13:45.0" updated="2018-07-20 14:10:15.0" resolutiondate="2016-10-24 19:49:21.0" votes="0" watches="2" workflowId="36294"> <description><! CDATA New Features Write up:  1.  Custom Events: We believe this was already in .6 and Ratnakar will verify.  Murali's comments: blockchain listener is an example code (along with the fabric/examples/chaincode/go/eventsender chaincode) that excercises the chaincode (custom) events mechanism. And yes, the event listener is on port 7053 by default.. and as Jim points out this has been incorporated in the JDK as well   2,  event handlers - code is being added to the node sdk, Ratnakar has tested and is working on a sample to publish  3.  Docker client upgrade:  Is this something we really want to tell customers?  4.  Java Chaicode shim:   Need to create a little blurb on this.  5.  Ability to build on Power System: Ramesh is working with Smita from the Power team on this....just that Power is part of the CI and gets builds..blah blah   6.  Ability to call chaincode using 64 encoded string:  ---  <murali>I think this is about https://gerrit.hyperledger.org/r/#/c/639/. It is NOT a new feature but just fixes API breakage ... from the issue : The REST/JSON API is more natural to use when taking strings, rather than when taking base64 encoded data. This change also restores the previous API behavior, which suffered compatibility breakage previously. </murali>  7.  Consenus and bug fixes:  All good so far, maybe come up with a list of fixes in .6 for consensus  8.  on chaincode - I'm not positive what this one is saying.  Maybe the go routines when inside the chaincode?  <murali>I think this refers to the known problem with GetRows where a goroutine is spun of to get rows concurrently. This approach is wrong and there is no easy fix without breaking interfaces. Alternative was to make the existing interface inefficient and a memory/latency hog which is not a good thing either. Iterating using GetRows should be warned against.</murali> ..probably dont say anything here.   did not get terminated until later on (memory leak type)- this got fixed  -  Is there specif git issue or Jira issue I can reference? Murali <murali>Barry, I think this is a continuation of the previous "goroutine" crash item and not a new one... if that's correct, I don't think it got fixed at all as mentioned </murali>  ...i think there is nothing in the previous two.  9.  We are looking to add attribute support for role based access control that had not been completely tested/working prior -   The only thing that I recall regarding "attribute support" is adding the ability to register a user with dynamically specified attributes through the SDK. This was not possible before and the attributes had to be hard coded inside the membership services configuration file. Keith worked on this change and it was merged into master, I am not sure about v0.6 branch however. I am CCing Keith to confirm this info. Also, I do not believe our testers have tested this change.    ></description> </Issue>
