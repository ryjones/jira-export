<Action id="70098" issue="45948" author="denyeart" type="comment" created="2020-08-28 18:53:06.0" updateauthor="denyeart" updated="2020-08-28 18:54:57.0"> <body><! CDATA I'm able to reproduce. It looks like when using old lifecycle, that the chaincode cache is not initialized correctly upon peer restart, from the logs: {code:java}  34m2020-08-28 17:16:06.688 UTC  lifecycle  InitializeLocalChaincodes -> INFO 0a2 0m Initialized lifecycle cache with 0 already installed chaincodes{code}  Service discovery therefore doesn't know about the installed chaincode and reports: "required chaincodes are not installed on sufficient peers"  ></body> </Action>
<Action id="70099" issue="45948" author="denyeart" type="comment" created="2020-08-28 19:37:50.0" updateauthor="denyeart" updated="2020-08-28 19:37:50.0"> <body><! CDATA  ~jyellick  If I'm reading this correctly, the chaincode cache initialization was only designed for the new lifecycle?  https://github.com/hyperledger/fabric/blob/master/core/chaincode/lifecycle/cache.go#L142   ></body> </Action>
<Action id="70106" issue="45948" author="jyellick" type="comment" body="Correct, the chaincode cache contains only information related to the new lifecycle.  It should not be populated with any information about legacy chaincodes.  If service discovery is not falling back to the legacy path if the chaincode is not in the new lifecycle, then this is a bug." created="2020-08-31 14:53:59.0" updateauthor="jyellick" updated="2020-08-31 14:53:59.0"/>
<Action id="70107" issue="45948" author="robmurgai" type="comment" body=" ~btl5037 Â Could you add this to the System Test - Functional Test Scenarios, please." created="2020-08-31 18:43:47.0" updateauthor="robmurgai" updated="2020-08-31 18:43:47.0"/>
<Action id="70108" issue="45948" author="yacovm" type="comment" body="shouldn&apos;t this belong to integration tests? " created="2020-08-31 19:00:14.0" updateauthor="yacovm" updated="2020-08-31 19:00:14.0"/>
<Action id="70110" issue="45948" author="btl5037" type="comment" body="Agreed, the migration of 1.4 to 2.0 capabilities and lifecycle functionality should be covered by integration tests. While the failure was induced using the SDK, the underlying functionality that failed was part of Fabric lifecycle itself. Though I do see the potential for other functional tests in this space." created="2020-09-01 02:03:35.0" updateauthor="btl5037" updated="2020-09-01 02:03:35.0"/>
<Action id="70137" issue="45948" author="denyeart" type="comment" body="https://github.com/hyperledger/fabric/pull/1844" created="2020-09-03 20:10:41.0" updateauthor="denyeart" updated="2020-09-03 20:10:41.0"/>
