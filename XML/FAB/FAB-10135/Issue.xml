<Issue id="30300" key="FAB-10135" number="10135" project="10002" reporter="rlalgowdar" assignee="rlalgowdar" creator="rlalgowdar" type="10101" summary="SideDB - CouchDB Performance Test: Concurrent Operation Invoke and Query, 2 orgs, 1 channel" priority="2" resolution="10001" status="6" created="2018-05-16 16:24:08.0" updated="2019-08-01 01:59:36.0" resolutiondate="2018-12-06 23:28:34.0" votes="0" watches="2" workflowId="44566"> <description><! CDATA +*Setup:*+  Network Topology: 1 channel, 2 org, 2 peers per org, each peer with CouchDB container for stateDB, 4 kafka, 3 zookeepers, 2 orderers, 2 ca, TLS enabled, both org associate with all channels. Client Driver: PTE +*Test Steps:*+ 1) chaincode: each channel has one chancode, marbles02_private go chaincode, instantiated  2)transactions: 4 threads, each thread sends 1000 invokes concurrently with tx id from 1 to 1000           thread 1 sends to org1 peer1 on channel 1          thread 2 sends to org2 peer1 on channel 1          thread 3 sends to org1 peer2 on channel 1          thread 4 sends to org2 peer2 on channel 1  3) Concurrently, do  4000 invokes transactions (similar to previous step, using 4 threads each sending 1000 new invokes, starting with index 4000) 4000 private data queries, on all peers in all orgs (similar to previous step, using 4 threads each sending 1000 queries)  Although the invokes in step3 are new keys, the queries use the keys created in step 2. Since queries go faster than invokes, we set it up this way to be sure the invokes (the first 4000 invokes) are all done before the queries are executed. The second set of 4000 invokes (part 1 of step 3) are there simply to have background noise while the queries are running.     +*Result*+ 1)hardware setup 2) RPS (request per second) achieved for queries 3) CPU and memory usage for the Peers and CouchDB containers  ></description> </Issue>
