<Action id="66330" issue="43742" author="mastersingh24" type="comment" body="I intentionally did not add the ability to set this property as I do not believe that we should permit insecure settings." created="2019-12-20 08:47:49.0" updateauthor="mastersingh24" updated="2019-12-20 08:47:49.0"/>
<Action id="66366" issue="43742" author="baohua" type="comment" created="2019-12-20 18:25:50.0" updateauthor="baohua" updated="2019-12-20 18:25:50.0"> <body><! CDATA  ~mastersingh24 , actually, the OSN will check to match the tlscert with those stored inside the channel config. Hence even with this option enabled, the communication is still safe.  Besides, this is useful when the OSN stays behind network middle box or doing tests.  ></body> </Action>
<Action id="66371" issue="43742" author="yacovm" type="comment" created="2019-12-22 19:04:15.0" updateauthor="yacovm" updated="2019-12-22 19:04:15.0"> <body><! CDATA {quote}Besides, this is useful when the OSN stays behind network middle box or doing tests.{quote}  * I don't see why this isn't useful when doing tests. We have already a trillion integration test cases for Raft and we never needed anything like that. * If the network middlebox is on the site of the remote OSN then the certificate should just match the endpoint exposed by the middlebox, or alternatively there could be a DNS entry that routes the host that appears on the TLS certificate to the middlebox.   I agree with  ~mastersingh24  and I am still not convinced there is a need for this, as this can be solved in other ways   ></body> </Action>
<Action id="66382" issue="43742" author="baohua" type="comment" body=" ~yacovm , how about the cases that the network middle-box like Load balancer, needs to handle various back services, and does not have the corresponding TLS for each OSN? This is very usual with load balancer topology, especially with dynamic mode." created="2019-12-23 21:50:55.0" updateauthor="baohua" updated="2019-12-23 21:50:55.0"/>
<Action id="66383" issue="43742" author="yacovm" type="comment" created="2019-12-23 22:33:35.0" updateauthor="yacovm" updated="2019-12-23 22:33:35.0"> <body><! CDATA Why would you configure the Raft endpoint in the channel config to be the address of the load balancer ? You use a load balancer to distribute connections from different clients, but in Raft there is a single connection between the leader and the followers.   If you put more than a single node behind a LB then the rest of the nodes won't work at all because the leader won't connect to them. If you put only a single node, then there is no point in having a LB right?   Of course, you can put a firewall that doesn't terminate TLS and then you should just configure the endpoint in the channel config to be the firewall's address   ></body> </Action>
<Action id="66384" issue="43742" author="baohua" type="comment" created="2019-12-24 01:13:54.0" updateauthor="baohua" updated="2019-12-24 01:13:54.0"> <body><! CDATA The situation is that the Load balancer can be shared by multiple OSNs, while each has a different public port (like a proxy), and *the OSN does not have the certificate matching that public address*.  Besides, the load balancer is in transparent mode, i.e., without TLS termination.  This situation did happen in some real case.  ></body> </Action>
<Action id="66385" issue="43742" author="yacovm" type="comment" created="2019-12-24 08:39:37.0" updateauthor="yacovm" updated="2019-12-24 08:39:37.0"> <body><! CDATA I see, so you mean a port forwarding via a NAT, not a load balancer. Well, I think that this can be easily solved with customizing the DNS environment of the OSNs to route to the right address based on the host that appears on the certificate.  And still - you can just issue the certificate with a proper SAN.  We have TLS CAs in Fabric, so we should put them in use instead of changing the code of Fabric to adjust to all possible network typologies.   ></body> </Action>
<Action id="66390" issue="43742" author="baohua" type="comment" created="2019-12-24 19:41:08.0" updateauthor="baohua" updated="2019-12-24 19:41:08.0"> <body><! CDATA  ~yacovm ,  1. The (public) addresses must be those on the network device, which will be used by each OSN. OSN should connect with each other using the public addresses (across different datacenters);  2. Using SAN can work only when the OSN can define that certificate manually. But from a real case we found, that sometimes, the OSN cannot have that certificate with correct SAN (and CN).  ></body> </Action>
<Action id="66391" issue="43742" author="yacovm" type="comment" created="2019-12-24 20:44:08.0" updateauthor="yacovm" updated="2019-12-24 20:44:08.0"> <body><! CDATA # So redirect the DNS hostnames of the OSNs behind that network device to the network device by altering the DNS configuration of where these OSNs are running.  # Do you mind elaborating on this use case? Why is it not possible? Did the network admins lose all the private keys and are locked outside of the Fabric installation?  ></body> </Action>
<Action id="66393" issue="43742" author="baohua" type="comment" created="2019-12-24 23:33:38.0" updateauthor="baohua" updated="2019-12-24 23:33:38.0"> <body><! CDATA # No, we will not use the DNS hostnames behind the network device, as i mentioned, consider the case to allow crossing datacenters, we should use the public DNS name, which is on the network device. # Yes, this is common when the OSN and the network devices are controlled by different vendors. One is the blockchain vendor, and the other one is the network vendor. And this issue is to resolve such scenario. When we are not able to issue the tls cert as wished, cannot find solutionsÂ  other than allowing to ignore the hostname checking. But this is OK from security perspective, because the OSN will still check the content of the tlscert, to match those inside the channel config.  ></body> </Action>
<Action id="66394" issue="43742" author="yacovm" type="comment" created="2019-12-25 08:04:42.0" updateauthor="yacovm" updated="2019-12-25 08:04:42.0"> <body><! CDATA # Why not make the DNS of the OSNs point to the network device when queried for the hostnames of the OSNs behind the network device?  # The Blockchain vendor can then issue a TLS cert properly with the SAN of the network device, it doesn't need the network vendor :)   ></body> </Action>
<Action id="66418" issue="43742" author="baohua" type="comment" created="2019-12-27 00:25:07.0" updateauthor="baohua" updated="2019-12-27 00:25:07.0"> <body><! CDATA # Exactly, that's what I mean, we should use the public address that binds on the network device for every OSN; # The problem is that the network vendor owns the network device and the certs, and cannot issue a corresponding TLS cert for each OSN behind. While the Blockchain vendor cannot simply use self-generated TLS cert with the SAN of the network device, and it does not have access to the root key of the public domain. I understand sometimes this situation won't happen, but once it happens, I cannot see other solutions. Thanks!  ></body> </Action>
<Action id="66419" issue="43742" author="yacovm" type="comment" created="2019-12-27 13:43:21.0" updateauthor="yacovm" updated="2019-12-27 13:43:21.0"> <body><! CDATA # Let's assume the address of the network device is *1.2.3.4* and the address of an OSN that is behind it, is *10.0.0.1* and it is called *orderer1.org1.acme.org* and its TLS certificate has a DNS SAN with *orderer1.org1.acme.org* in it.  If the network device routes based on port *7051* to *10.0.0.1* that is behind it, then you can just make the DNS of the other orderers to point to *1.2.3.4* whenever they query for *orderer.org1.acme.org* and then the TLS handshake will work without any special Fabric configurations. # You can issue a self signed TLS CA certification chain yourself, you just need to have the admin private key for the Blockchain organization to add it to the config. You don't need any public domain key or anything.   ></body> </Action>
<Action id="66423" issue="43742" author="baohua" type="comment" created="2019-12-27 18:36:20.0" updateauthor="baohua" updated="2019-12-27 18:36:20.0"> <body><! CDATA # Yes, that's the case; # Well, I also thought about this workaround, but using self-signed cert is not acceptable in this product env. Seems either we can have the network vendor issued some cert, or we have to skip the hostname validation?  ></body> </Action>
<Action id="66424" issue="43742" author="yacovm" type="comment" created="2019-12-27 18:41:31.0" updateauthor="yacovm" updated="2019-12-27 18:41:31.0"> <body><! CDATA # So you see that if you follow my instructions, you don't need to use *InsecureSkipVerify*, it will work even without as long as you configure DNS properly. # goto (1)  ></body> </Action>
<Action id="66425" issue="43742" author="baohua" type="comment" created="2019-12-27 22:05:44.0" updateauthor="baohua" updated="2019-12-27 22:05:44.0"> <body><! CDATA I think we are having different assumptions here.  The original requirement is that we cannot use self-signed cert, and that's the problem to resolve.  IMHO, DNS is not the problem, do not know why that will matter this cert issue.  Let me clarify it with a summary:  1) The OSN must use the public address that the middlebox (network device) will manage;  2) The OSN cannot get a correct tls cert that matches the public address (in CN or SAN fields);  3) No self-signed cert is allowed, otherwise, 2) will be no problem.  With these three requirements, cannot see any other options.  ></body> </Action>
<Action id="66427" issue="43742" author="yacovm" type="comment" created="2019-12-28 11:42:54.0" updateauthor="yacovm" updated="2019-12-28 11:42:54.0"> <body><! CDATA So you can just use hostnames for the OSNs and configure the DNS to map all hostnames of the OSNs to the IP address of the network device.  In the channel config, the hostnames of the OSNs should appear, and not the IP address of the network device.   It should work as is, without Fabric modifications.   ></body> </Action>
<Action id="66430" issue="43742" author="baohua" type="comment" created="2019-12-28 18:00:17.0" updateauthor="baohua" updated="2019-12-28 18:00:17.0"> <body><! CDATA Again, there is no problem with the DNS-host mapping, the issue is that there is no correct tls cert (with matched CN or SAN) for the OSN.  How can this work without enabling the tls skip-hostname-checking option?  ></body> </Action>
<Action id="66431" issue="43742" author="yacovm" type="comment" created="2019-12-28 19:05:56.0" updateauthor="yacovm" updated="2019-12-28 19:05:56.0"> <body><! CDATA I  explained|https://jira.hyperledger.org/browse/FAB-17275?focusedCommentId=66419&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-66419  a few comments above: {quote} Let's assume the address of the network device is *1.2.3.4* and the address of an OSN that is behind it, is *10.0.0.1* and it is called *orderer1.org1.acme.org* and its TLS certificate has a DNS SAN with *orderer1.org1.acme.org* in it. If the network device routes based on port *7051* to *10.0.0.1* that is behind it, then you can just make the DNS of the other orderers to point to *1.2.3.4 *whenever they query for *orderer.org1.acme.org* and then the TLS handshake will work without any special Fabric configurations. {quote}  ></body> </Action>
