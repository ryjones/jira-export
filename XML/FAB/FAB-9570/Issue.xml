<Issue id="29473" key="FAB-9570" number="9570" project="10002" reporter="xixuejia" assignee="wlahti" creator="xixuejia" type="10003" summary="Collect orderer Deliver count and latency" priority="3" resolution="10000" status="6" created="2018-04-18 05:25:47.0" updated="2018-12-13 16:10:27.0" resolutiondate="2018-12-13 16:10:27.0" votes="0" watches="1" workflowId="35705"> <description><! CDATA The number of interesting metrics to be exposed by the deliver service is very limited, as the underlying gRPC metrics should account for number of open requests, while the underlying ledger metrics should handle the block creation rate etc.  The processing time to validate deliver requests should be constant, and should generally be insignificant compared to the time spent delivering blocks.  The rate of delivering blocks is generally dependent on the commit rate of the blocks and not of the deliver server.  {noformat} requestCount = metrics.CounterOpts{ Namespace:    "deliver", Name:         "request_count", Help:         "The number of deliver requests received.", LabelNames:     string{"channel", "status"}, StatsdFormat: "%{#fqname}.%{channel}.%{status}", } blockCount = metrics.CounterOpts{ Namespace:    "deliver", Name:         "block_count", Help:         "The number of blocks sent.", LabelNames:     string{"channel"}, StatsdFormat: "%{#fqname}.%{channel}", } {noformat}  The {{requestCount}} is largely a repeat of the gRPC metric, but adds the important differentiation based on channel and status.  The {{blockCount}} similarly should correlated strongly with some gRPC metrics, but adds the additional channel context.  ></description> </Issue>
