<Action id="25140" issue="17409" author="latitiah" type="comment" created="2017-06-02 16:43:50.0" updateauthor="latitiah" updated="2017-06-02 16:43:50.0"> <body><! CDATA Steps executed: # cryptogen generate --output=. --config=./configs/crypto.yaml # cp configtx.yaml ./ordererOrganizations/example.com/msp/config.yaml # cp configtx.yaml ./peerOrganizations/org1.example.com/msp/config.yaml # cp configtx.yaml ./peerOrganizations/org2.example.com/msp/config.yaml # cp configtx.yaml ./peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/config.yaml # cp configtx.yaml ./peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp/config.yaml # configtxgen -profile SampleInsecureSolo -outputBlock orderer.block -channelID behavesystest # configtxgen -profile SysTestChannel -outputCreateChannelTx behavesystest.tx -channelID behavesystest # docker-compose -f docker-compose-solo.yml up -d --force-recreate # configtxgen -profile SysTestChannel -outputCreateChannelTx behavesystest-1.tx -channelID behavesystest-1 # configtxgen -profile SampleInsecureSolo -outputBlock behavesystest-1.block -channelID behavesystest-1 # docker exec peer0.org1.example.com /bin/bash -c "CORE_PEER_MSPCONFIGPATH=/var/hyperledger/configs/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp peer channel create --file /var/hyperledger/configs/behavesystest-1.tx --chain behavesystest-1 --orderer orderer.example.com:7050" # docker exec peer0.org1.example.com /bin/bash -c "CORE_PEER_MSPCONFIGPATH=/var/hyperledger/configs/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp peer channel join --blockpath /var/hyperledger/configs/behavesystest-1.block --chain behavesystest-1 --orderer orderer.example.com:7050"     ></body> </Action>
<Action id="25152" issue="17409" author="latitiah" type="comment" created="2017-06-02 17:47:02.0" updateauthor="latitiah" updated="2017-06-02 17:47:02.0"> <body><! CDATA Ran this scenario again, but this time adding a 5 second delay between the create and join and received the following segfault:    {code:java} 2017-06-02 17:44:33.317 UTC  common/config  initializeProtosStruct -> DEBU 1f7 Processing field: MSP 2017-06-02 17:44:33.317 UTC  common/config  validateMSP -> DEBU 1f8 Setting up MSP for org Org2ExampleCom 2017-06-02 17:44:33.319 UTC  common/config  validateMSP -> DEBU 1f9 Setting up MSP for org Org1ExampleCom 2017-06-02 17:44:33.320 UTC  common/config  validateMSP -> DEBU 1fa Setting up MSP for org ExampleCom panic: runtime error: invalid memory address or nil pointer dereference  signal SIGSEGV: segmentation violation code=0x1 addr=0x8 pc=0x935685  goroutine 184  running : panic(0xc97aa0, 0xc420016040) /opt/go/src/runtime/panic.go:500 +0x1a1 github.com/hyperledger/fabric/common/config.(*ApplicationGroup).Organizations(0x0, 0xc421bfc4e0) <autogenerated>:17 +0x5 github.com/hyperledger/fabric/core/peer.(*chainSupport).Organizations(0xc421bf08a0, 0xda5011) <autogenerated>:25 +0x4a github.com/hyperledger/fabric/gossip/service.(*configEventer).ProcessConfigUpdate(0xc421a0fb20, 0x13d43a0, 0xc421bf08a0) /opt/gopath/src/github.com/hyperledger/fabric/gossip/service/eventer.go:71 +0x126 github.com/hyperledger/fabric/core/peer.createChain.func1(0x13ddb40, 0xc421af8dc0) /opt/gopath/src/github.com/hyperledger/fabric/core/peer/peer.go:191 +0xf4 github.com/hyperledger/fabric/common/configtx.(*configManager).commitCallbacks(0xc421af8dc0) /opt/gopath/src/github.com/hyperledger/fabric/common/configtx/manager.go:134 +0x5f github.com/hyperledger/fabric/common/configtx.NewManagerImpl(0xc421a38210, 0x13dbf00, 0xc421a25400, 0xc421a25420, 0x2, 0x2, 0x0, 0xc4213cdcc0, 0xc421a0d5a8, 0x455ca0) /opt/gopath/src/github.com/hyperledger/fabric/common/configtx/manager.go:127 +0x362 github.com/hyperledger/fabric/core/peer.createChain(0xc4219ff4a0, 0xf, 0x13ddd80, 0xc421a0f8c0, 0xc421a0e6e0, 0x0, 0x0) /opt/gopath/src/github.com/hyperledger/fabric/core/peer/peer.go:209 +0x1f6 github.com/hyperledger/fabric/core/peer.CreateChainFromBlock(0xc421a0e6e0, 0x19f4, 0x19f4) /opt/gopath/src/github.com/hyperledger/fabric/core/peer/peer.go:252 +0x134 github.com/hyperledger/fabric/core/scc/cscc.joinChain(0xc42006d400, 0x19f4, 0x19f4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0) /opt/gopath/src/github.com/hyperledger/fabric/core/scc/cscc/configure.go:155 +0x1ca github.com/hyperledger/fabric/core/scc/cscc.(*PeerConfiger).Invoke(0xc42018dd60, 0x13df0a0, 0xc421a02000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0) /opt/gopath/src/github.com/hyperledger/fabric/core/scc/cscc/configure.go:120 +0xa8a github.com/hyperledger/fabric/core/chaincode/shim.(*Handler).handleTransaction.func1(0xc42030bb20, 0xc4219c2ff0) /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/shim/handler.go:312 +0x770 created by github.com/hyperledger/fabric/core/chaincode/shim.(*Handler).handleTransaction /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/shim/handler.go:327 +0x49 {code}       ></body> </Action>
<Action id="25192" issue="17409" author="muralisr" type="comment" created="2017-06-02 20:46:11.0" updateauthor="muralisr" updated="2017-06-02 22:00:09.0"> <body><! CDATA The full stack trace is   {code:java}  panic: runtime error: invalid memory address or nil pointer dereference  signal SIGSEGV: segmentation violation code=0x1 addr=0x8 pc=0x93a1f5   goroutine 235  running : panic(0xc9cce0, 0xc420016040) 	/opt/go/src/runtime/panic.go:500 +0x1a1 github.com/hyperledger/fabric/common/config.(*ApplicationGroup).Organizations(0x0, 0xc421db5bb0) 	<autogenerated>:17 +0x5 github.com/hyperledger/fabric/core/peer.(*chainSupport).Organizations(0xc421d9dcb0, 0xdadd6c) 	<autogenerated>:25 +0x4a github.com/hyperledger/fabric/gossip/service.(*configEventer).ProcessConfigUpdate(0xc421bdbf20, 0x13dd380, 0xc421d9dcb0) 	/opt/gopath/src/github.com/hyperledger/fabric/gossip/service/eventer.go:71 +0x16c github.com/hyperledger/fabric/core/peer.createChain.func1(0x13e6c00, 0xc421c87240) 	/opt/gopath/src/github.com/hyperledger/fabric/core/peer/peer.go:191 +0xf4 github.com/hyperledger/fabric/common/configtx.(*configManager).commitCallbacks(0xc421c87240) 	/opt/gopath/src/github.com/hyperledger/fabric/common/configtx/manager.go:134 +0x5f github.com/hyperledger/fabric/common/configtx.NewManagerImpl(0xc421bc5680, 0x13e4fc0, 0xc421c02af0, 0xc421c02b10, 0x2, 0x2, 0x0, 0xc421492140, 0xc421bd95d8, 0x455ca0) 	/opt/gopath/src/github.com/hyperledger/fabric/common/configtx/manager.go:127 +0x362 github.com/hyperledger/fabric/core/peer.createChain(0xc421bd0b90, 0xf, 0x13e6e40, 0xc421bdbcc0, 0xc421bdaae0, 0x0, 0x0) 	/opt/gopath/src/github.com/hyperledger/fabric/core/peer/peer.go:209 +0x1f6 github.com/hyperledger/fabric/core/peer.CreateChainFromBlock(0xc421bdaae0, 0x19fc, 0x19fc) 	/opt/gopath/src/github.com/hyperledger/fabric/core/peer/peer.go:259 +0x134 github.com/hyperledger/fabric/core/scc/cscc.joinChain(0xc42006f400, 0x19fc, 0x19fc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0) 	/opt/gopath/src/github.com/hyperledger/fabric/core/scc/cscc/configure.go:147 +0x1ca github.com/hyperledger/fabric/core/scc/cscc.(*PeerConfiger).Invoke(0xc4201dec00, 0x13e80c0, 0xc421bc8a00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0) 	/opt/gopath/src/github.com/hyperledger/fabric/core/scc/cscc/configure.go:119 +0xdc2 github.com/hyperledger/fabric/core/chaincode/shim.(*Handler).handleTransaction.func1(0xc42030a930, 0xc421bb4a50) 	/opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/shim/handler.go:312 +0x770 created by github.com/hyperledger/fabric/core/chaincode/shim.(*Handler).handleTransaction 	/opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/shim/handler.go:327 +0x49 panic: nil msg  goroutine 62  running : panic(0xc4d6e0, 0xc421b86710) 	/opt/go/src/runtime/panic.go:500 +0x1a1 github.com/hyperledger/fabric/core/chaincode/shim.chatWithPeer.func1(0xc421352300, 0xc420306950, 0x13dd200, 0xc420306760, 0xc421352360, 0xc42030a930) 	/opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/shim/chaincode.go:302 +0xe61 created by github.com/hyperledger/fabric/core/chaincode/shim.chatWithPeer 	/opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/shim/chaincode.go:324 +0x500 {code}   The second panic is from the chaincode dying because peer is dying.   The first one could be related to https://gerrit.hyperledger.org/r/#/c/8403 as that was the last change to touch core/peer code.    ~C0rWin  can you take a look please ?  ></body> </Action>
<Action id="25215" issue="17409" author="c0rwin" type="comment" body=" ~muralisr  sure, thing :)" created="2017-06-03 09:48:09.0" updateauthor="c0rwin" updated="2017-06-03 09:48:09.0"/>
<Action id="25217" issue="17409" author="c0rwin" type="comment" created="2017-06-03 09:59:48.0" updateauthor="c0rwin" updated="2017-06-03 09:59:48.0"> <body><! CDATA  ~muralisr  It has nothing to do with the:   {quote} The first one could be related to https://gerrit.hyperledger.org/r/#/c/8403 as that was the last change to touch core/peer code.  {quote}  according to stack traces provided, code fails before change from CR-8403 being executed.   Based on this:  {code} goroutine 235  running : panic(0xc9cce0, 0xc420016040) 	/opt/go/src/runtime/panic.go:500 +0x1a1 github.com/hyperledger/fabric/common/config.(*ApplicationGroup).Organizations(0x0, 0xc421db5bb0) 	<autogenerated>:17 +0x5 github.com/hyperledger/fabric/core/peer.(*chainSupport).Organizations(0xc421d9dcb0, 0xdadd6c) 	<autogenerated>:25 +0x4a github.com/hyperledger/fabric/gossip/service.(*configEventer).ProcessConfigUpdate(0xc421bdbf20, 0x13dd380, 0xc421d9dcb0) 	/opt/gopath/src/github.com/hyperledger/fabric/gossip/service/eventer.go:71 +0x16c {code}  and {{eventer.go:71}} snippet:  {code} 	logger.Debugf("Processing new config for channel %s", config.ChainID()) 	orgMap := cloneOrgConfig(config.Organizations()) 	if ce.lastConfig != nil && reflect.DeepEqual(ce.lastConfig.orgMap, orgMap) { 		logger.Debugf("Ignoring new config for channel %s because it contained no anchor peer updates", config.ChainID()) 		return 	} {code}  I would suspect that {{config.Organizations()}} fails and cause to panic. Will inspect it further.  ></body> </Action>
<Action id="25327" issue="17409" author="c0rwin" type="comment" created="2017-06-05 13:14:38.0" updateauthor="c0rwin" updated="2017-06-05 13:14:38.0"> <body><! CDATA Hi  ~latitiah ,   Here is the thing, you have a mistake in the way you are trying to join peer into the channel.   {quote} cryptogen generate --output=. --config=./configs/crypto.yaml cp configtx.yaml ./ordererOrganizations/example.com/msp/config.yaml cp configtx.yaml ./peerOrganizations/org1.example.com/msp/config.yaml cp configtx.yaml ./peerOrganizations/org2.example.com/msp/config.yaml cp configtx.yaml ./peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/config.yaml cp configtx.yaml ./peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp/config.yaml configtxgen -profile SampleInsecureSolo -outputBlock orderer.block -channelID behavesystest configtxgen -profile SysTestChannel -outputCreateChannelTx behavesystest.tx -channelID behavesystest docker-compose -f docker-compose-solo.yml up -d --force-recreate configtxgen -profile SysTestChannel -outputCreateChannelTx behavesystest-1.tx -channelID behavesystest-1 configtxgen -profile SampleInsecureSolo -outputBlock behavesystest-1.block -channelID behavesystest-1 docker exec peer0.org1.example.com /bin/bash -c "CORE_PEER_MSPCONFIGPATH=/var/hyperledger/configs/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp peer channel create --file /var/hyperledger/configs/behavesystest-1.tx --chain behavesystest-1 --orderer orderer.example.com:7050" docker exec peer0.org1.example.com /bin/bash -c "CORE_PEER_MSPCONFIGPATH=/var/hyperledger/configs/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp peer channel join --blockpath /var/hyperledger/configs/behavesystest-1.block --chain behavesystest-1 --orderer orderer.example.com:7050" {quote}  in the last step  {code} docker exec peer0.org1.example.com /bin/bash -c "CORE_PEER_MSPCONFIGPATH=/var/hyperledger/configs/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp peer channel join --blockpath /var/hyperledger/configs/behavesystest-1.block --chain behavesystest-1 --orderer orderer.example.com:7050" {code}  instead of providing peer genesis block you are providing the ordering genesis block which cause peer to fail with panic and error reported. While there is no real bug here, I think it's worth to add a check and prevent peer from fail with panic, but rather return reasonable error value which indicates the problem.  *NOTE*: Additionally, while I was trying to reproduce the issue, noted that once peer fails with panic upon receiving genesis block of ordering service, restarting the peer is not helpful to heal the problem - peer keeps crashing during initialization.   ></body> </Action>
<Action id="25999" issue="17409" author="c0rwin" type="comment" body="CR submitted: https://gerrit.hyperledger.org/r/#/c/10315/" created="2017-06-11 22:55:06.0" updateauthor="c0rwin" updated="2017-06-11 22:55:06.0"/>
