<Issue id="20564" key="FAB-6002" number="6002" project="10002" reporter="htyagi90" creator="htyagi90" type="10004" summary="&apos;Leaderless Partitions found&apos; while setting up ZK-Kafka and Orderers in different machines" priority="3" resolution="10000" status="6" created="2017-08-31 15:16:28.0" updated="2018-07-20 14:14:16.0" resolutiondate="2017-09-01 20:00:32.0" votes="0" watches="1" workflowId="39899"> <environment><! CDATA * Docker swarm * Orderer containers host  : RHEL 7.3 * Zk-Kafka containers host : Ubuntu 16.04  ></environment> <description><! CDATA Trying to setup a distributed ordering service using zk-kafka cluster. Following is the setup : 1. 3 zookeeper, 3 kafka docker containers on first server.  2. 3 orderers , 1 Organisation with 3 peers on second server.  Using docker swarm to create an overlay network between the two machines. Following is a snippet of the docker-compose for the respective services:  zookeeper_i: {code:java} // zookeeper0: container_name: zookeeper0 image: hyperledger/fabric-zookeeper:x86_64-1.0.0 environment: - ZOO_MY_ID=1 - ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888 ports: - 2181 - 2888 - 3888  networks: - b2b-net - b2b-bridge {code} kafka_i:    {code:java} // # three Kafka Nodes  kafka0: image: hyperledger/fabric-kafka:x86_64-1.0.0 container_name: kafka0 environment: - KAFKA_LOG_RETENTION_MS=-1 - KAFKA_MESSAGE_MAX_BYTES=103809024 - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024 - KAFKA_BROKER_ID=0 - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181 - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false - KAFKA_DEFAULT_REPLICATION_FACTOR=3 - KAFKA_MIN_INSYNC_REPLICAS=2 - KAFKA_ADVERTISED_HOST_NAME=9.167.110.93 - KAFKA_ADVERTISED_PORT=32797 ports: - 32797:9092 depends_on: - zookeeper0 - zookeeper1 - zookeeper2 links: - zookeeper0:zookeeper0 - zookeeper1:zookeeper1 - zookeeper2:zookeeper2 networks: - b2b-net - b2b-bridge {code} KAFKA_ADVERTISED_HOST_NAME is the public IP of the machine hosting the kafka and zookeeper containers.     orderer_i : {code:java} // orderer0.example.com: container_name: orderer0.example.com image: hyperledger/fabric-orderer:x86_64-1.0.0 environment: - ORDERER_GENERAL_LOGLEVEL=debug - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0 - ORDERER_GENERAL_GENESISMETHOD=file - ORDERER_GENERAL_GENESISFILE=/etc/hyperledger/configtx/genesis.block - ORDERER_GENERAL_LOCALMSPID=OrdererMSP - ORDERER_GENERAL_LOCALMSPDIR=/etc/hyperledger/msp/orderer0/msp - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s - ORDERER_KAFKA_RETRY_LONGINTERVAL=10s - ORDERER_KAFKA_RETRY_LONGTOTAL=100s - ORDERER_KAFKA_VERBOSE=true - ORDERER_KAFKA_BROKERS= 9.167.110.93:32797,9.167.110.93:32800,9.167.110.93:32798  {code} The kafka brokers are in `IP:Port` notation, where IP is the public IP of the machine hosting the zookeeper-kafka containers, and the port is the forwarded port.  Following is a snippet of configtx.yaml under the OrdererDefaults section. {code:java} // Kafka: # Brokers: A list of Kafka brokers to which the orderer connects # NOTE: Use IP:port notation Brokers: - 9.167.110.93:32797 - 9.167.110.93:32800 - 9.167.110.93:32798 {code} On inspecting the genesis block, and it corresponds to the above kafka broker(s) details.  Started the zoo-kafka containers first and then the orderers. But keep getting a SERVICE_UNAVAILABLE error on peer channel create. !Screen Shot 2017-08-31 at 11.01.21 AM.png|width=596,height=198!  On checking orderer logs, I see that there is a persistent message of "found some partitions to be leaderless". This shows up after the producer is setup successfully and the co-op CONNECT message is sent. Snippet of the orderer log is as follows: {code:java} // 2017-08-31 15:02:03.145 UTC  orderer/kafka  try -> DEBU 594  channel: testchainid  Attempting to post the CONNECT message...  sarama  2017/08/31 15:02:03.146023 client.go:599: client/metadata fetching metadata for  testchainid  from broker 9.167.110.93:32800  sarama  2017/08/31 15:02:03.292812 client.go:610: client/metadata found some partitions to be leaderless  sarama  2017/08/31 15:02:03.292835 client.go:590: client/metadata retrying after 250ms... (3 attempts remaining)  sarama  2017/08/31 15:02:03.542941 client.go:599: client/metadata fetching metadata for  testchainid  from broker 9.167.110.93:32800  sarama  2017/08/31 15:02:03.689610 client.go:610: client/metadata found some partitions to be leaderless  sarama  2017/08/31 15:02:03.689628 client.go:590: client/metadata retrying after 250ms... (2 attempts remaining)  sarama  2017/08/31 15:02:03.939719 client.go:599: client/metadata fetching metadata for  testchainid  from broker 9.167.110.93:32800  sarama  2017/08/31 15:02:04.086501 client.go:610: client/metadata found some partitions to be leaderless  sarama  2017/08/31 15:02:04.086518 client.go:590: client/metadata retrying after 250ms... (1 attempts remaining)  sarama  2017/08/31 15:02:04.336627 client.go:599: client/metadata fetching metadata for  testchainid  from broker 9.167.110.93:32800  sarama  2017/08/31 15:02:04.484268 client.go:610: client/metadata found some partitions to be leaderless 2017-08-31 15:02:04.484 UTC  orderer/kafka  startThread -> CRIT 595  channel: testchainid  Cannot post CONNECT message = kafka server: In the middle of a leadership election, there is currently no leader for this partition and hence it is unavailable for writes. panic:  channel: testchainid  Cannot post CONNECT message = kafka server: In the middle of a leadership election, there is currently no leader for this partition and hence it is unavailable for writes.  goroutine 9  running : panic(0xb31bc0, 0xc420944e30)     /opt/go/src/runtime/panic.go:500 +0x1a1 github.com/hyperledger/fabric/vendor/github.com/op/go-logging.(*Logger).Panicf(0xc42019ff20, 0xc700bc, 0x2e, 0xc420948d20, 0x2, 0x2)     /opt/gopath/src/github.com/hyperledger/fabric/vendor/github.com/op/go-logging/logger.go:194 +0x127 github.com/hyperledger/fabric/orderer/kafka.startThread(0xc4208786c0)     /opt/gopath/src/github.com/hyperledger/fabric/orderer/kafka/chain.go:159 +0xe57 created by github.com/hyperledger/fabric/orderer/kafka.(*chainImpl).Start     /opt/gopath/src/github.com/hyperledger/fabric/orderer/kafka/chain.go:94 +0x3f {code} Kafka container logs show that zookeeper-kafka connection is setup correctly.  Kafka leaders should be elected automatically.  ></description> </Issue>
