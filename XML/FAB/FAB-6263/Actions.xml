<Action id="31327" issue="20956" author="mastersingh24" type="comment" body="If we are going to start adding support for additional state databases, then I *strongly* recommend that we first implement pluggable state databases using the Go plugin architecture.  This will keep make the code cleaner and more self-contained." created="2017-10-01 13:03:55.0" updateauthor="mastersingh24" updated="2017-10-01 13:03:55.0"/>
<Action id="35899" issue="20956" author="henryhs" type="comment" body="I agree" created="2017-12-06 02:52:55.0" updateauthor="henryhs" updated="2017-12-06 02:52:55.0"/>
<Action id="35904" issue="20956" author="baohua" type="comment" created="2017-12-06 05:32:31.0" updateauthor="baohua" updated="2017-12-06 05:32:31.0"> <body><! CDATA  ~mastersingh24 , thanks for the suggestion, would u like to help give any doc link to follow?  We do believe support multiple database backends is important, as it's reported that couchdb one has several issues.  ></body> </Action>
<Action id="40605" issue="20956" author="mastersingh24" type="comment" body="What&apos;s the status / plan on this one?" created="2018-02-22 21:27:45.0" updateauthor="mastersingh24" updated="2018-02-22 21:27:45.0"/>
<Action id="40613" issue="20956" author="manxiaqu" type="comment" body=" ~mastersingh24 The task for supporting mongodb was finished in fab-6264  https://gerrit.hyperledger.org/r/#/c/14629/ . now we are waiting for the result of review." created="2018-02-23 00:22:22.0" updateauthor="manxiaqu" updated="2018-02-23 00:23:10.0"/>
<Action id="40703" issue="20956" author="baohua" type="comment" created="2018-02-24 11:37:08.0" updateauthor="baohua" updated="2018-02-24 11:37:08.0"> <body><! CDATA This is an important feature!   ~mastersingh24 , i guess we can priority this one after v1.1 next month?  ></body> </Action>
<Action id="40708" issue="20956" author="denyeart" type="comment" body=" ~manxiaqu   ~baohua  Please add a design doc explaining the motivation and supported functions of MongoDB.  For a feature of this size typically that would be a google doc or presentation that can be linked to from the Jira description. The maintainers will be reviewing new feature proposals for inclusion in 1.2, 1.3, etc." created="2018-02-24 13:30:45.0" updateauthor="denyeart" updated="2018-02-24 13:30:45.0"/>
<Action id="40776" issue="20956" author="manxiaqu" type="comment" body=" ~denyeart  Have added a doc on https://docs.google.com/document/d/1BT8yP_24KVnl72BzEHEm1XVhU0D8nvB686S7DzSWL9k/edit?usp=sharing" created="2018-02-26 08:27:03.0" updateauthor="manxiaqu" updated="2018-02-26 08:27:03.0"/>
<Action id="41147" issue="20956" author="binhn" type="comment" created="2018-03-02 14:38:46.0" updateauthor="binhn" updated="2018-03-02 14:39:22.0"> <body><! CDATA I played with MongoDB during the early days of NOSQL, nothing in production. Lately, I revisited it and discovered many issues that people have written about  http://thetechnick.blogspot.com/2016/06/mongodb-good-bad-and-ugly.html.   Unless it has been addressed, I think we should be careful about supporting it.  There is also a large community out there asking about SQL.  https://www.youtube.com/watch?v=b2F-DItXtZs  . I for one would be more interested in SQL on LevelDB, like CockroachDB implementation.   ~mastersingh24  I agreed that we need to define the plugin framework for this first so that others may bring anything they want/need.   ></body> </Action>
<Action id="41198" issue="20956" author="christopherferris" type="comment" created="2018-03-05 17:18:15.0" updateauthor="christopherferris" updated="2018-03-05 17:18:15.0"> <body><! CDATA  ~manxiaqu  thanks for posting the design doc.   ~binhn  the blog post you referenced has been deleted. I wouldn't take a single person's blog post as evidence that we shouldn't be adding pluggable support for what is a very popular NoSQL database with a rather large community.   Yes, there is lots of interest in adding SQL support. However, we have here a completed CR (rather large, but when you factor out all of the vendored mongo lib, it is a bit more manageable) and you are saying we shouldn't merge. This is no way to grow a community.  I do think that we need to seriously consider this for 1.2 when we open up the branch, and that we should add in as experimental until such time as we can get sufficient system test coverage to be confident.  Significant effort has gone into the CR, and that needs to be given consideration.  I do think that we can use this as an opportunity to get the pluggable DB right, but given that we have a contribution in hand, we should not put it off further until as define a framework first. That isn't respectful of the broader community that has contributed to this effort.  ></body> </Action>
<Action id="41211" issue="20956" author="denyeart" type="comment" created="2018-03-05 20:56:52.0" updateauthor="denyeart" updated="2018-03-05 20:58:14.0"> <body><! CDATA My opinion is somewhere between Gari's, Binh's, and Chris'.  CouchDB has had guaranteed data durability from the beginning. MongoDB has had data durability issues in the past, but it looks like those issues have been resolved in more recent MongoDB releases, with various 'write concern' and 'read concern' configurations.  My concern is more around supporting multiple databases with similar capabilities.  When you configure both CouchDB and MongoDB in similar ways (e.g. single instance under peer, with data durability), I expect the behavior and performance will be similar.  I don't doubt that MongoDB will have some capabilities that CouchDB does not, and vice versa. But it will be twice the investment and twice the maintenance to support both CouchDB and MongoDB within the Fabric code.  This is where Gari's suggestion comes in, and I would go one step further saying that we MUST make the state database interface pluggable (using the new Go plugin architecture), before adding additional state database implementations.  This is captured in FAB-8665.  Then contributors can provide plugin implementations on their own lifecycle and support model, without impacting Fabric itself.  ></body> </Action>
<Action id="41221" issue="20956" author="baohua" type="comment" created="2018-03-06 01:23:11.0" updateauthor="baohua" updated="2018-03-06 01:23:11.0"> <body><! CDATA Thanks all the comments,  ~mastersingh24 ,  ~binhn ,  ~ChristopherFerris  and  ~denyeart .  I feel that all those comments are positive to encourage contributions to enhance fabric to have more features (e.g., supporting new Database). Thanks for the continuous effort,  ~manxiaqu .  While the point is that should we wait till the pluggable database interface feature or we can do the work now. The conflicts often happens in community when multiple teams work together to enhance the same dog. Would like to welcome more suggestions from the team, before having the technical decision.  But since it's already there for quite a while (5 months), we should consider to give the feature an initial target, e.g., 1.2? If the pluggable interface feature is done before then, that's good to use it. Otherwise, we can implement in existing way, and then revise after the pluggable feature done.  How do you think?  Thanks!  ></body> </Action>
<Action id="41227" issue="20956" author="senthil1" type="comment" created="2018-03-06 04:07:43.0" updateauthor="senthil1" updated="2018-03-06 04:07:43.0"> <body><! CDATA As  ~denyeart  and  ~mastersingh24  suggest, I would also support for go plugin architecture  We already have a document store support -- CouchDB. The motivation or need for MongoDB is not clear. Do we gain any performance improvement in Fabric throughput/latency? Do we get a very special and important feature which is not available in the CouchDB? For e.g., we need snapshot isolation in DB to perform the tx simulation. We need checkpointing and purging. If such features are not provided, It looks very redundant. Adding additional databases of similar capability would only result in additional code maintenance and related overhead. Hence, using go plugin architecture to enable real pluggable state DB makes more sense. As there are many doc stores ( https://db-engines.com/en/ranking/document+store)  and each developer might prefer a different doc store, it looks like go plugin is the right way.   This is a different take: Doc store and key-value stores were designed for scalability with weak consistency which relational database cannot provide. However, I am not sure how one can use the sharding features & weak consistency in doc store and still provide non-repeatable read isolation level to chaincode and MVCC validation (for serializability) which are required from Fabric. If we need to support additional databases (mainly for SQL), it would be good to add CockroachDB (both scalable and strong consistency/serializable) as  ~binhn  mentioned (the main layer of the CockroachDB can be used on top of any key-value store) or a relational DB (stable, durable, strong consistency/serializable but not scalable).   ></body> </Action>
<Action id="41261" issue="20956" author="binhn" type="comment" created="2018-03-06 16:25:42.0" updateauthor="binhn" updated="2018-03-06 16:25:42.0"> <body><! CDATA Apology for the dead link in my previous post                      Permalink Basically it mentioned ACID issues with MongoDB, but it looks like that has been address according to  ~denyeart .   ~baohua  and  ~ChristopherFerris  As I said in my previous comment, I am fine as long as we have a pluggable mechanism that people can add support for other databases independently from Fabric core development. Without this pluggable framework, it would increase our technical debt another fold in anything we do related to state data, which includes critical features such as checkpoint, archive, and pruning. It would make our new feature development more difficult.     ></body> </Action>
<Action id="41287" issue="20956" author="luomin" type="comment" body="Thanks for all the comments to now. I am also watching this topic for quite a while. I think a pluggable mechanism sounds a more reasonable roadmap and I also agree with  ~ChristopherFerris  and  ~baohua   that MongoDB (a famous NoSQL DB with a quite large community) shall worth great efforts to be supported so as to broaden our community. HOWEVER, before making the efforts any further, an in-depth discussion/explain of the motivation/reasons are high appreciated (such as how will it benefit performance, or why the support of different functions/features are needed, why alternative solutions are not considered). As you may have noticed, FAB-8031 https://jira.hyperledger.org/browse/FAB-8031  explained their motivations for using PostgreSQL as the state-DB, for the parallelization brought by its serializability snapshot isolation capability, which sounds similar to the reason of using CockroachDB as mentioned by  ~binhn  . In addition, if the needs for more sophisticated kv-store are only for the richer data model, some alternative ways based on levelDB were proposed in FAB-60 https://jira.hyperledger.org/browse/FAB-60 (last pages of the attached slides). My point is just, I would like to see our roadmap on extending the DBMS module is decided upon sufficient discussions. Looking forward to more opinions here." created="2018-03-07 08:58:56.0" updateauthor="luomin" updated="2018-03-07 08:58:56.0"/>
<Action id="67133" issue="20956" author="sykesm" type="comment" body="Stale" created="2020-01-22 22:06:39.0" updateauthor="sykesm" updated="2020-01-22 22:06:39.0"/>
