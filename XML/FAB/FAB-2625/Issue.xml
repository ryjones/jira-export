<Issue id="15192" key="FAB-2625" number="2625" project="10002" reporter="kletkeman" creator="kletkeman" type="10001" summary="need GetEvent stub interface so that emitted payload can be built up " priority="2" resolution="10000" status="6" created="2017-03-03 20:17:31.0" updated="2018-07-20 18:54:34.0" resolutiondate="2018-07-09 18:23:34.0" votes="0" watches="2" workflowId="37683"> <description><! CDATA The chaincode stub interface has the following API to allow an Invoke to set an emitted event payload upon commit of the transaction.  	// SetEvent saves the event to be sent when a transaction is made part of a block 	SetEvent(name string, payload   byte) error  The problem with having only a setter is that this appears as a one time operation, which in fact it would be much more useful to build up data in the payload as time goes by. So, for example, our iot contract platform can emit three items today: success code, failure with error string, and alerts status is success.  But customers are asking for us to emit complete state so that there applications can operate on changes without requiring a fast polling solution. Slow polling as backup may be used, but responsiveness is valued.  Our contracts are complex enough that state changes are spread out, but funnelled through a common state writer at the last moment. This state writer would be able to add the state to the emitted event (if configured that way declaratively) by calling GetEvent, unmarshalling the JSON object, then marshalling and calling SetEvent again. This would be a magnificent mechanism for building up the event as a complex process proceeds.  The addition of GetEvent seems like it should be a trivial extension, yet its impact will be huge for our customers. Please consider its inclusion in v1.  ></description> </Issue>
