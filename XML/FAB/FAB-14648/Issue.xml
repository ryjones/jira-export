<Issue id="38468" key="FAB-14648" number="14648" project="10002" reporter="bharadwajambati1" assignee="guoger" creator="bharadwajambati1" type="10004" summary="All existing orderers panic and halt when onboard new orderer incorrect host name" priority="3" resolution="10000" status="6" created="2019-03-14 16:23:37.0" updated="2019-03-21 14:16:38.0" resolutiondate="2019-03-20 23:29:11.0" votes="0" watches="4" workflowId="50111"> <description><! CDATA h3. Expected:  When executing testcase FAB-13702, after restarting network, and running traffic, using a script to onboard orderer to our k8s environment: *     source fabric-test/tools/PTE/scenarios/PTECIutils.sh  *     AddOrderer raft-svt testorgschannel1 169.46.35.154 orderer1st-ordererorg1 oerer4th-ordererorg2  the onboarded orderer should retrieve all blocks in the channel from other orderer and continue thereafter to participate in consensus in the channel. During this process, we expected to see no errors. h3. Observed:  We observed that, except for the onboarded orderer, all the orderers panic. {code:java} Mar 14 10:54:14 orderer1st-ordererorg1-67d6bf8749-27xx8 orderer1st-ordererorg1 panic: Failed to configure communication: invalid PEM block Mar 14 10:54:14 orderer1st-ordererorg1-67d6bf8749-27xx8 orderer1st-ordererorg1 github.com/hyperledger/fabric/vendor/go.uber.org/zap.(*SugaredLogger).Panicf(0xc00015eba0, 0x102db50, 0x25, 0xc00ae27aa8, 0x1, 0x1) 	/opt/gopath/src/github.com/hyperledger/fabric/vendor/go.uber.org/zap/sugar.go:159 +0x79Mar 14 10:54:14 orderer1st-ordererorg1-67d6bf8749-27xx8 orderer1st-ordererorg1 github.com/hyperledger/fabric/common/flogging.(*FabricLogger).Panicf(0xc00015eba8, 0x102db50, 0x25, 0xc00ae27aa8, 0x1, 0x1) {code}    Timestamp: Panic errors found: *Mar 14 10:54:14*.919, after the 3 orderers got to block 1519.  URL for orderer4 logs: Go to  https://cloud.ibm.com/observe/logging  and click on View LogDNA for LogDNA-community-svt-lab    h3. Further observations:  This does NOT occur every time; when doing it manually and correctly, it worked ok.  When we used the script, we discovered that a typo in the line using an incorrect orderer name (oerer4th-ordererorg2) led to us adding an orderer that had no cert stored on the disk volume (because the actual cert was in a different path with the correctly named orderer4th). The AddOrderer command spit out this to stderr:  {{    stderr:  cat: ../keyfiles/ordererorg2/orderers/oerer4th-ordererorg2.ordererorg2/tls/server.crt: No such file or directory}}  This led to the panic in the orderers as they tried to process the config block, “invalid PEM block”  But why do the orderers halt? Stop handling traffic. Even when they restart afterwards, they do not proceed further. *Could they reject this invalid config update, and continue living*?  When we used the correct orderer name(orderer4th-ordererorg2) in the below script, it's working successfully as expected:  {{    AddOrderer raft-svt testorgschannel1 169.46.35.154 orderer1st-ordererorg1 oerer4th-ordererorg2}}     ></description> </Issue>
