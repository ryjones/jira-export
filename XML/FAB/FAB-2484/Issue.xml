<Issue id="15051" key="FAB-2484" number="2484" project="10002" reporter="kchristidis" assignee="kchristidis" creator="kchristidis" type="10003" summary="Prevent unclean leader election" priority="3" resolution="10000" status="6" created="2017-02-25 21:12:28.0" updated="2018-07-20 14:11:49.0" resolutiondate="2017-02-26 21:46:30.0" votes="0" watches="1" workflowId="37609"> <description><! CDATA Kafka ships with the `unclean.leader.election.enable` setting set to `true`. For our use case, this default is wrong as it trades consistency off for availability.  Concretely, consider this worst-case scenario that goes against every proper practice: - Two brokers: B0 and B1 - A replication factor of 2 - `min.insync.replicas` set to 1 (the default)  Assume B1 is the partition leader replica (though this doesn't really matter).  B1 receives a batch of messages from an ordering service node, and writes them to disk. B0 does the same, replicating B1.  We shut B0 down.  We send a new batch of messages to the cluster (read: B1); B1 writes them to disk.  We shut B1 down and then bring B0 up.  If we send a new batch of messages to the cluster (read: B0), it will write them to disk using _re-using (some/all of) the offsets that B1 had used for its last batch of messages. This means we are rewriting the blockchain, which is obviously unacceptable.  This changeset prevents this from happening.  ></description> </Issue>
