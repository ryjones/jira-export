<Action id="24075" issue="16883" author="lehors" type="comment" created="2017-05-19 13:40:20.0" updateauthor="lehors" updated="2017-05-19 13:48:42.0"> <body><! CDATA I've been investigating this problem and made quite a bit of progress. I can now successfully run ./network_setup up on a Windows 7 although this relies on a workaround which begs for further investigation. Here is where things stand:  I'm running everything in the Docker Quickstart Terminal (Docker toolbox) which uses Git's MingW environment.  First the environment doesn't have make. To install it I did the following:  Download and install 7-Zip from  http://www.7-zip.org/    And add it to the system PATH  Then download make for MinGW from  http://sourceforge.net/projects/mingw/files/MinGW/Extension/make/make-3.82.90-cvs/make-3.82.90-2-mingw32-cvs-20120902-bin.tar.lzma   Untar the file with 7z x -so make-3.82.90-2-mingw32-cvs-20120902-bin.tar.lzma |tar xf -  Copy the extracted file: bin/mingw32-make.exe to /usr/bin/make.exe Note that this requires admin privileges so I had to copy it through Windows explorer to C:\Program Files\Git\usr\bin\make.exe  Now, the script bootstrap.sh relies on uname -s which in my environement returns "MINGW64_NT-6.1" which is not what the script expects so it fails.  Attached is a modified version that works for my env.  ^bootstrap.sh   It should still work elsewhere just fine although other Windows environments may require further patching. They change is on line #2: {code:java} export ARCH=$(uname -s|tr ' :upper: ' ' :lower: '|sed 's/mingw64_nt.*/windows/')-$(go env GOARCH){code} With that done bootstrap.sh works for me.  I then cd to release/windows-amd64 but to get ./network_setup up working I had to make several changes.  First generateArtifacts.sh needs to be patched in a similar way.  ^generateArtifacts.sh   Line #12: {code:java} OS_ARCH=$(echo "$(uname -s|tr ' :upper: ' ' :lower: '|sed 's/mingw64_nt.*/windows/')-$(uname -m | sed 's/x86_64/amd64/g')" | awk '{print tolower($0)}'){code} Finally, there is something screwy going on with the mount of the genesis block which makes the orderer fail with: {code:java} ERROR: for orderer.example.com Cannot start service orderer.example.com: oci runtime error: rootfs_linux.go:53: mounting "/mnt/sda1/var/lib/docker/aufs/mnt/233f346f32281d1526d570aa2c866615bd52948c2cb34b916900c455e969683 8/var/hyperledger/orderer/orderer.genesis.block" to rootfs "/mnt/sda1/var/lib/docker/aufs/mnt/233f346f32281d1526d570aa2c866615bd52948c2cb34b916900c455e9696838" caused "not a directory"{code} I found however that copying that file somewhere else and mounting the copy instead works!?  So I changed network_setup.sh to make the copy and changed docker-compose-base.yaml to mount that file instead.  ^network_setup.sh   ^docker-compose-base.yaml   network_setup.sh line #52 insert: {code:java} cp channel-artifacts/orderer.genesis.block myblock{code} docker-compose-base.yaml change line #23 to: {code:java} - ../myblock:/var/hyperledger/orderer/orderer.genesis.block{code} With all that done, then running ./network_setup.sh goes through all right, ending with: {code:java} ===================== Query on PEER3 on channel 'mychannel' is successful ===================== ===================== All GOOD, End-2-End execution completed ===================== {code}    ></body> </Action>
<Action id="24084" issue="16883" author="lehors" type="comment" created="2017-05-19 15:11:03.0" updateauthor="lehors" updated="2017-05-19 17:04:46.0"> <body><! CDATA Further investigation allowed me to pinpoint the problem with the launch of the orderer to the *name* of the genesis block file!  For some reason if it is called orderer.genesis.block the orderer fails to launch with: {code:java} ERROR: for orderer.example.com Cannot start service orderer.example.com: oci runtime error: rootfs_linux.go:53: mounting "/mnt/sda1/var/lib/docker/aufs/mnt/233f346f32281d1526d570aa2c866615bd52948c2cb34b916900c455e9696838/var/hyperledger/orderer/orderer.genesis.block" to rootfs "/mnt/sda1/var/lib/docker/aufs/mnt/233f346f32281d1526d570aa2c866615bd52948c2cb34b916900c455e9696838" caused "not a directory"{code} It turns out that just using another name solves the problem. So, rather than doing the clunky copy I initially used above, I've come up with a solution in which I simply changed generateArtifacts.sh and docker-compose-base.yaml to use the filename genesis.block  Obviously, it would be good to know why that filename triggers a problem with docker but this workaround will do for now.  I submitted a CR:  https://gerrit.hyperledger.org/r/#/c/9567   ></body> </Action>
<Action id="24088" issue="16883" author="lehors" type="comment" body="I need to make it clear that the patching of the scripts bootstrap.sh and generateArtifacts.sh make them work the Windows env I have: Windows 7, running everything in Docker Quickstart Terminal (Docker toolbox). It is very possible that further tweaking is necessary on different Windows setups." created="2017-05-19 15:41:09.0" updateauthor="lehors" updated="2017-05-19 15:41:58.0"/>
<Action id="24092" issue="16883" author="denyeart" type="comment" created="2017-05-19 16:42:46.0" updateauthor="denyeart" updated="2017-05-19 16:42:46.0"> <body><! CDATA  https://gerrit.hyperledger.org/r/#/c/9567/  is merged.  It will not be fully effective until the e2e_cli artifacts are pushed to nexus by  ~rameshthoomu .  ></body> </Action>
<Action id="24101" issue="16883" author="lehors" type="comment" created="2017-05-19 21:38:42.0" updateauthor="lehors" updated="2017-05-19 21:38:42.0"> <body><! CDATA I tried running the test on a second windows box I have and the bootstrap.sh script failed right off the bat because on that machine although it's a 64 bit machine I have a 32 bit go install (because it's a small laptop and I'm trying to keep the size of the programs down) and therefore "go env GOARCH" returns 386!  So the line: {code:java} export ARCH=$(uname -s|tr  :upper:   :lower: |sed s/mingw64_nt.*/windows/)-$(go env GOARCH){code} sets ARCH to windows-386 which makes the rest of the script fails because it tries to download the tar ball:   https://nexus.hyperledger.org/content/repositories/releases/org/hyperledger/fabric/fabric-binary/windows-386-1.0.0-alpha2-testing/fabric-binary-windows-386-1.0.0-alpha2-testing.tar.gz   and then cd to release/windows-386, neither of which exist.  If I simply override ARCH to windows-amd64 in this script, everything runs fine and the getting-started test passes!     ></body> </Action>
