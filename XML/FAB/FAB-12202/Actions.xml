<Action id="51286" issue="34152" author="scottz" type="comment" created="2018-09-27 16:36:23.0" updateauthor="scottz" updated="2018-09-27 16:36:23.0"> <body><! CDATA To clarify: in the case described with 3 orgs each with 2 peers, when using query option targetpeers=allpeers, after two threads each sent 1000 invokes, we expect to see a total of 12000 queries. For every invoke sent to org1.peer1, we should see that same transaction queried from all 6 peers.  What we see is only 6000 queries total. It looks like PTE generates new TX queries from six threads (including two on org3, which of course will not exist). And PTE fails to query ALL the peers in ALL orgs for the existing transactions.  ></body> </Action>
<Action id="51296" issue="34152" author="scottz" type="comment" created="2018-09-27 19:09:19.0" updateauthor="scottz" updated="2018-09-27 19:14:40.0"> <body><! CDATA After discussing with Dongming, it seems that we should remove the "org3" from the orgName list in the pte config data shown in this description (taken from latest version of fab-10135). That would eliminate the queries for keys with "org3"in the name, which means we would see only 4000 queries (nRequest * (2 procPerOrg X len( org1,org2 ))). We only sent 4 threads of invokes, so we should send the same queries. The setting of targetPeers=Allpeers will cause the PTE to tell SDK to send EACH TRANSACTION to all 6 peers. So in fact, the SDK would send 6 X 4000 queries. HOWEVER, the way the code is written in PTE and SDK, this means that for each transaction the PTE would count 1 sent, even though the SDK would send out 6, BUT the SDK responds with ACK/Received after receiving only one response from any one of the 6 peers. So it is something useful to a realworld network and is useful for measuring faster TPS, but it not really the "guarantee to me that every peer received the transaction" functionality we are hoping for in this test. We have a couple ideas on how to proceed and are researching best approach.  For full automation, we will need the PTE enhancement and then probably tweak the testcase settings somehow. However I believe we can reach a satisfactory answer with what we have collected already. As for the test results that you collected already: we can ignore the errors in all the peers logs that contain the "org3" string (all of which lead to the 2000 "TX not received"); they will disappear when you remove "org3" from the orgName list. Rajesh, check all your peer logs for any OTHER errors (look for keys using org1 or org2, after "grep -v" all the org3 error logs); all peers should have received queries for all those keys, and hopefully all the peers found all the keys in their ledgers and responded successfully without error. PTE did not count them, but at least we can see if any peer encountered an error looking for any of those keys. That will allow us to come to a final determination of pass/fail for this v1.3 sidedb testcase 10135, using the logs and the data you have collected already.   ></body> </Action>
<Action id="51339" issue="34152" author="rlalgowdar" type="comment" created="2018-09-28 10:45:46.0" updateauthor="rlalgowdar" updated="2018-09-28 10:45:46.0"> <body><! CDATA    ORG3 peers do get errors for QUERY now with ORG1 and ORG2 is target List:  "transType": "Invoke", "invokeType": "Query", "targetPeers": "AllPeers", "nProcPerOrg": "2", "nRequest": "1000", "runDur": "1200", "TLS": "enabled", "channelOpt": { "name": "testorgschannel1", "action": "create", "orgName":   "org1", "org2"   },     ORG3 peer log:  2018-09-28 10:05:43.320 UTC  chaincode  HandleTransaction -> ERRO 2629  0f3855fd  Failed to handle GET_STATE. error: private data matching public hash version is not available. Public hash version = &version.Height\{BlockNum:0xac, TxNum:0x9}, Private data version = (*version.Height)(nil) github.com/hyperledger/fabric/core/chaincode.(*Handler).HandleGetState /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/handler.go:580  Total number of errors:  ibmadmin@SDBPTE2:~$ docker logs peer0.org3.example.com 2>&1 | grep -ai "Failed to handle GET_STATE" | wc -l 4000 ibmadmin@SDBPTE2:~$ docker logs peer1.org3.example.com 2>&1 | grep -ai "Failed to handle GET_STATE" | wc -l 4000     The PTE Queries gets errors back but does not capture in ERROR stats. I guess Queries are satisfied by other peers.  info:  PTE 1 main : stdout: info:  PTE 1 exec :  Nid:chan:org:id=0:testorgschannel1:org2:1 invoke_query_const  query result: Error: \{"Error":"Failed to get private details for marble_testorgschannel1_org2_0_1_1000: GET_STATE failed: transaction ID: 063de646bf4dfe51d503d23a8635e003a77bee7f2d65405f00ab4b960e6c55e7: private data matching public hash version is not available. Public hash version = &version.Height{BlockNum:0xaa, TxNum:0x17}, Private data version = (*version.Height)(nil)"} info:  PTE 1 exec :  Nid:chan:org:id=0:testorgschannel1:org2:1 invoke_query_const  query result: Error: {"Error":"Failed to get private details for marble_testorgschannel1_org2_0_1_1000: GET_STATE failed: transaction ID: 063de646bf4dfe51d503d23a8635e003a77bee7f2d65405f00ab4b960e6c55e7: *private data matching public hash version is not available.* Public hash version = &version.Height\{BlockNum:0xaa, TxNum:0x17}, Private data version = (*version.Height)(nil)"}  info:  PTE 1 main : stdout: info:  PTE 1 exec :  Nid:chan:org:id=0:testorgschannel1:org2:1 invoke_query_const  pte-exec:*completed 1000 transaction INVOKE(QUERY) with 0 failures* in 925523 ms, timestamp: start 1538128224423 end 1538129149946,Throughput=1.08 TPS  info:  PTE 1 main : Child proc exited, procId=4 ,exit code=0     Query Results:  info:  PTE 1 main : Test Summary 0 :  Nid:chan:org:id=0:testorgschannel1:org1:0 invoke_query_const  pte-exec:completed 1000 transaction INVOKE(QUERY) with 0 failures in 915319 ms, timestamp: start 1538128224429 end 1538129139748,Throughput=1.09 TPS info:  PTE 1 main : Test Summary 1 :  Nid:chan:org:id=0:testorgschannel1:org2:0 invoke_query_const  pte-exec:completed 1000 transaction INVOKE(QUERY) with 0 failures in 921316 ms, timestamp: start 1538128224434 end 1538129145750,Throughput=1.09 TPS info:  PTE 1 main : Test Summary 2 :  Nid:chan:org:id=0:testorgschannel1:org1:1 invoke_query_const  pte-exec:completed 1000 transaction INVOKE(QUERY) with 0 failures in 923405 ms, timestamp: start 1538128224434 end 1538129147839,Throughput=1.08 TPS info:  PTE 1 main : Test Summary 3 :  Nid:chan:org:id=0:testorgschannel1:org2:1 invoke_query_const  pte-exec:completed 1000 transaction INVOKE(QUERY) with 0 failures in 925523 ms, timestamp: start 1538128224423 end 1538129149946,Throughput=1.08 TPS        ></body> </Action>
<Action id="51364" issue="34152" author="dongming" type="comment" body="https://gerrit.hyperledger.org/r/#/c/26676/" created="2018-09-28 18:00:19.0" updateauthor="dongming" updated="2018-09-28 18:00:19.0"/>
<Action id="51554" issue="34152" author="scottz" type="comment" created="2018-10-02 20:40:12.0" updateauthor="scottz" updated="2018-10-02 20:40:12.0"> <body><! CDATA  https://gerrit.hyperledger.org/r/#/c/26700/,  the query *failures* count was appended to this line in pteReport:      CONSTANT QUERY Overall transactions: sent 2000 received 8000 *failures 1000*  ></body> </Action>
