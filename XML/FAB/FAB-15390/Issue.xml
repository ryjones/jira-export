<Issue id="39712" key="FAB-15390" number="15390" project="10002" reporter="sykesm" assignee="sykesm" creator="sykesm" type="10001" summary="As a fabric maintainer, I want to remove unnecessary endpoints and APIs that overlap with the operations service" priority="3" resolution="10000" status="6" created="2019-05-08 13:23:16.0" updated="2019-05-27 11:43:12.0" resolutiondate="2019-05-27 11:43:12.0" votes="0" watches="2" workflowId="52598"> <description><! CDATA The following operations are provided on the peer admin service:  {code} // Interface exported by the server. service Admin { rpc GetStatus(common.Envelope) returns (ServerStatus) {} rpc StartServer(common.Envelope) returns (ServerStatus) {} rpc GetModuleLogLevel(common.Envelope) returns (LogLevelResponse) {} rpc SetModuleLogLevel(common.Envelope) returns (LogLevelResponse) {} rpc RevertLogLevels(common.Envelope) returns (google.protobuf.Empty) {} rpc GetLogSpec(common.Envelope) returns (LogSpecResponse) {} rpc SetLogSpec(common.Envelope) returns (LogSpecResponse) {} } {code}  Of those: - {{GetStatus}} simply returns a constant value of "STARTED". This has minimal value. - {{StartServer}} simply returns a constant value of "STARTED". This has no value. - {{GetModuleLogLevel}} gets the current log level for a name. This functionality overlaps with the http operations service and does not match the concepts of named loggers. - {{SetModuleLogLevel}} activates a new log spec by appending a module=level segment. This functionality overlaps with the http operations service. - {{RevertLogLevels}} restores the log level to the value captured during process initialization. This overlaps with the http operations service and can be accomplished by operators querying the spec before modifying so they can restore it. - {{GetLogSpec}} gets the current log spec and overlaps with the http operations service. - {{SetLogSpec}} sets the current log spec and overlaps with the http operations service.  In summary, the only two operations that are consistent with where we are going are GetLogSpec and SetLogSpec. If having those available to an "admin" instead of an "operator" is desired, we can reduce the scope of the service to those two items. If, instead, we want to use the operations infrastructure, we can remove the service entirely.  Changes in this space will impact the peer cli. In particular, getting and setting the log spec will no longer be possible  signing an admin request with an admin cred, enveloping, and submitting to the grpc service.  Further, since operations was explicitly modeled as distinct from admin, a separate TLS client certificate would be required to support these operations.  So, in summary, if we remove this service entirely, we'll also be removing get/set logging from the peer CLI as the peer CLI should probably not grow to consume ops services.  ></description> </Issue>
