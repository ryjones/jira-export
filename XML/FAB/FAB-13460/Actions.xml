<Action id="68900" issue="36437" author="denyeart" type="comment" created="2020-04-21 16:32:07.0" updateauthor="denyeart" updated="2020-04-21 19:59:44.0"> <body><! CDATA Go 1.12 added opt-in support for TLS 1.3. Go 1.13 uses TLS 1.3 by default. Fabric shifted to Go 1.13 in v2.0 and v1.4.7 (next release).   ~mastersingh24   ~ashutosh_kumar   ~btl5037   ~sykesm  Please keep me honest...  ></body> </Action>
<Action id="68904" issue="36437" author="btl5037" type="comment" body="Will add support on the comm stack for TLS1.3, right now both the min and max version are set to TLS1.2. Ill keep min at 1.2 and set max at 1.3 so we support either, just as I did in the CA" created="2020-04-21 19:05:17.0" updateauthor="btl5037" updated="2020-04-21 19:05:17.0"/>
<Action id="68905" issue="36437" author="ashutosh_kumar" type="comment" created="2020-04-21 19:21:47.0" updateauthor="ashutosh_kumar" updated="2020-04-21 19:39:05.0"> <body><! CDATA What is the ask here ? Only allow TLS 1.3 or allow both TLS 1.2 and 1.3. What go version we are upgrading to ? Seems like 1.13. # Golang 1.13 and only TLS 1.3. # Golang 1.13 and only TLS 1.2. # Golang 1.12 and TLS 1.2 and 1.3 both. # Golang 1.12 and only TLS 1.3. # Golang 1.12 and only TLS 1.2. # Golang 1.12 and TLS 1.2 and 1.3 both.  Config steps that  ~btl5037  has outlined above seems correct for one of the combinations above.TLS 1.3 supopots very limited set of Cipher suite , so that imposes TLS version limitation on client. But Fabric also supports very limited set of Cipher Suite.  ></body> </Action>
<Action id="68906" issue="36437" author="bmos299" type="comment" body="I think allowing both is a safe bet.  If you run into a mixed environment you will have an issue without the configuration setting. " created="2020-04-21 19:35:28.0" updateauthor="bmos299" updated="2020-04-21 19:35:28.0"/>
<Action id="68907" issue="36437" author="ashutosh_kumar" type="comment" created="2020-04-21 19:40:21.0" updateauthor="ashutosh_kumar" updated="2020-04-21 19:40:21.0"> <body><! CDATA Fabric supports very limited set of Cipher Suite. Regardless TLS 1.2 and 1.3 has subtle differences.,     ></body> </Action>
<Action id="69000" issue="36437" author="btl5037" type="comment" created="2020-04-21 23:26:55.0" updateauthor="btl5037" updated="2020-04-22 00:07:55.0"> <body><! CDATA  https://github.com/golang/go/issues/29349   If I'm reading this right, by implementing TLS1.3, we can't configure a set of DefaultCiphersSuites, as Go considers all cipher suites in their CipherSuites list to be secure enough for use. I've tested this, and when TLS1.3 is enabled, I can connect with any cipher suite in the GoLang Supported CipherSuite list when the client is using TLS1.3, even those outside our DefaultList on a gRPC server created with the defaultCipherList set.  ></body> </Action>
<Action id="69002" issue="36437" author="ashutosh_kumar" type="comment" body="That is what I expected and put in PR. So , if you TLS 1.3 on server , only TLS 1.3 client will be supported." created="2020-04-21 23:56:21.0" updateauthor="ashutosh_kumar" updated="2020-04-21 23:56:21.0"/>
<Action id="69004" issue="36437" author="ashutosh_kumar" type="comment" created="2020-04-22 00:42:46.0" updateauthor="ashutosh_kumar" updated="2020-04-22 00:42:46.0"> <body><! CDATA Can you give me the TLS 1.3 enabled Fabric End point with defaultCipherSuite configured ? I'll try to run some tests. Looks like whatever ciphersuite you are selecting for 1.3  , it is being ignored by TLS engine.     ></body> </Action>
<Action id="69005" issue="36437" author="btl5037" type="comment" body="I&apos;ve got it straightened out (required some restructuring of the tests since there are no failure scenarios on TLS1.3)" created="2020-04-22 01:25:59.0" updateauthor="btl5037" updated="2020-04-22 04:32:23.0"/>
<Action id="69008" issue="36437" author="btl5037" type="comment" body=" https://github.com/hyperledger/fabric/pull/1144|https://github.com/hyperledger/fabric/pull/1144/files " created="2020-04-22 04:32:07.0" updateauthor="btl5037" updated="2020-04-22 04:32:39.0"/>
