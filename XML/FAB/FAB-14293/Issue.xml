<Issue id="37875" key="FAB-14293" number="14293" project="10002" reporter="scottz" assignee="suryalnvs" creator="scottz" type="10101" summary="isolate raft orderers, block 1-way or 2-way messaging, and reconnect" priority="3" resolution="10000" status="6" created="2019-02-21 14:28:02.0" updated="2019-07-23 20:49:45.0" resolutiondate="2019-07-23 20:49:45.0" votes="0" watches="2" workflowId="49492"> <description><! CDATA Set up a raft network similar to FAB-14220, but using 3 orderers in 3 different IKS clusters, in different data center locations around the world. This would introduce natural delay/latency, and also allow stopping/starting individual orderers more easily, in different sequences (per FAB_14221).  Using a networking tool, or by modifying linux stack inside an orderer node, disconnect / partition one orderer from the others so it cannot receive msgs from them and they cannot receive messages from it. After awhile, with traffic running, rejoin it and observe it sync up again, catch up, and resume operations without hiccups.  One tool to consider using is  https://istio.io/  to connect, secure, control, and observe services. However, that may be a bit heavy.  Another way to block one-way communications or to fully partition (block 2-way comms) an orderer might be to edit the iptables. For example, find helpful ideas here:  https://www.howtogeek.com/177621/the-beginners-guide-to-iptables-the-linux-firewall/    A possibly better alternative might be to manage the network policies; refer to:  https://console.bluemix.net/docs/containers/cs_network_policy.html#network_policies   Several possible testcase scenarios to try (and we might want to create some separate testtasks): # Fully isolate one orderer (non-leader) for 10 secs or a few minutes, and reconnect. # Fully isolate one orderer (non-leader), restart the leader to cause a leadership reelection among the other three, reconnect. # Fully isolate one orderer (leader) for 10 secs or a few minutes, observe the others elect a new leader; and then reconnect. # Block one-way communications FROM an orderer to the others. Try with a follower, and try with the leader. Examine how this might affect consensus. Reconnect full 2-way communications. # Block one-way communications TO an orderer from the others. Try with a follower, and try with the leader. Examine how this might affect consensus. Reconnect full 2-way communications. For instance what to look for: if it was the leader, then its heartbeats would continue to go out and reach the other orderers, and thus should prevent them from electing a new leader - but their responses would not reach the leader; since it would not be receiving responses, we would expect it to step down (and stop sending heartbeats, resulting in the others to start a new term election).     ></description> </Issue>
