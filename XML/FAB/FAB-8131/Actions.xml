<Action id="39879" issue="27526" author="jyellick" type="comment" created="2018-02-08 19:22:08.0" updateauthor="jyellick" updated="2018-02-08 19:22:08.0"> <body><! CDATA This seems like a good idea to me.  Being able to hide orderer topology behind a reverse proxy would allow a user to do proper load balancing and decrease the on chain configuration burden.  It does seem like we run into a problem if it's possible for the client to bypass the reverse proxy and connect directly to the orderer.  Then, the client could pretend to be the proxy and effectively impersonate any client of its choosing by appropriately setting this header.  Maybe as an accompanying option to the header field, we could include an override for the TLS CA as well.  If the orderer is only to be connected to via the reverse proxy, then it should only expect/accept TLS certs from the reverse proxy (and not from the orgs as defined in the channel config).  With this additional protection, the user could not accidentally expose the backing orderers without use of the proxy.  ></body> </Action>
<Action id="39882" issue="27526" author="yacovm" type="comment" created="2018-02-08 19:53:27.0" updateauthor="yacovm" updated="2018-02-08 19:59:13.0"> <body><! CDATA {quote}Maybe as an accompanying option to the header field, we could include an override for the TLS CA as well{quote}  Sounds like a good idea, Jason. We could either do that, or we could just add an option in the TLS  binding verification method|https://github.com/hyperledger/fabric/blob/master/core/comm/util.go#L96-L108  that constricts the TLS certificate of the connection, to have a specific hash (TLS certificate pinning), meaning - we would first check the TLS hash of the connection matches the pinned hash from the configuration, and then return the value from the http header set by the proxy.  I guess the TLS CA override is more elastic because it gives the ability to add and remove proxies with different TLS certificates and keys without having to restart orderer nodes for configuration updates. The downside is that this option is less restrictive than the TLS pinning, and thus a misconfiguration or a leak of any certificate issued by the CA would compromise the confidentiality of the data. For instance - if the same CA issues certificates for other nodes in the company, and that is not even related to fabric and is compromised.   ~mastersingh24  what do you think?   ></body> </Action>
<Action id="40241" issue="27526" author="yacovm" type="comment" body="OK, in the spirit of &quot;silence is acquiescence&quot; I pushed https://gerrit.hyperledger.org/r/#/c/17883/ and am now moving on to do a similar thing in gossip." created="2018-02-15 12:16:15.0" updateauthor="yacovm" updated="2018-02-15 12:16:15.0"/>
<Action id="43963" issue="27526" author="denyeart" type="comment" body="I noticed this CR is abandoned.Â   ~yacovm  could you update Fix Version and status accordingly (either to Invalid if it will not be done or Todo if it still needs to be done)." created="2018-05-07 02:44:45.0" updateauthor="denyeart" updated="2018-05-07 02:44:45.0"/>
<Action id="43970" issue="27526" author="yacovm" type="comment" created="2018-05-07 06:30:40.0" updateauthor="yacovm" updated="2018-05-07 06:30:40.0"> <body><! CDATA I can't, I don't know if it's needed.   ~mastersingh24  - any news on the  proxy passthrough|https://github.com/envoyproxy/envoy/issues/1843  for envoy, or about this at all?  ></body> </Action>
