<Action id="68814" issue="44795" author="baohua" type="comment" body="This is a good point, and would suggest extend to check whether the channel is healthy, e.g.., leader is elected, quorum exist." created="2020-04-13 21:57:57.0" updateauthor="baohua" updated="2020-04-13 21:57:57.0"/>
<Action id="69108" issue="44795" author="arman19940326" type="comment" created="2020-04-28 20:08:21.0" updateauthor="arman19940326" updated="2020-07-29 19:11:01.0"> <body><! CDATA I know this is not a perfect solution but I use this hack to check if RAFT election is finished. It worked for me.  I run my tests on Kubernetes. I first wait till all orderer pods are up and ready then this snippet in my bash script checks if leader is elected and quorum exists:    {code:java} echo "Wait till RAFT nodes are ready to accept transactions!" ORDERERS=$(kubectl get svc | awk '/orderer 0-9 *-org 0-9 */ {print $3}') while   true  ; do  for ORDERER in $ORDERERS; do IS_LEADER=$(curl -v --silent http://${ORDERER}:8443/metrics 2>&1 | awk '/^consensus_etcdraft_is_leader/ {print $2}')    "${IS_LEADER}" == "1"   && break  done    "${IS_LEADER}" == "1"   && break  sleep 1 done echo "ordering service is ready to accept transactions!" {code} I enabled Prometheus on orderer nodes to get operational metrics. I found out that if in any of the orderer nodes the variable _consensus_etcdraft_is_leader_ is set to one, then we have a leader and election is finished.  Fabric documentation says: {quote}{{consensus_etcdraft_is_leader}}: identifies which node in the cluster is currently leader. If no nodes have this set, you have lost quorum. {quote}    *Edit:  I should've said this a while ago ... After running multiple tests I realized this does not always work. Sometimes it fails when I create a channel right after the above script. I got this error:* {quote} *\{"status":"SERVICE_UNAVAILABLE","info":"no Raft leader"}* {quote} *The script I wrote finishes when a leader is elected in the RAFT network. Maybe there is another RAFT election right after a leader is elected. I don't know...  I'm still waiting for Hyperledger Fabric team to provide a solution to this issue.*  ></body> </Action>
<Action id="71691" issue="44795" author="jyellick" type="comment" body="The issue points out that there are better options in v2.x, we are done with non-bug-fixes for v1.4.x" created="2021-04-16 19:24:22.0" updateauthor="jyellick" updated="2021-04-16 19:24:22.0"/>
<Action id="72059" issue="44795" author="JIRAUSER22323" type="comment" created="2021-08-30 18:14:40.0" updateauthor="JIRAUSER22323" updated="2021-08-30 18:18:06.0"> <body><! CDATA Just two improvements: * WHEN you are not using Kubernetes: Get the orderers from configtx.yaml file. * WHEN you have more than one channel: you need 'grep sys-channel'  {code:bash} echo "#####  Wait till RAFT nodes are ready to accept transactions!  #######" #for kubernetes #ORDERERS=$(kubectl get svc | awk '/orderer 0-9 *-org 0-9 */ {print $3}') ORDERERS=$(yq -j r configtx.yaml | jq '.Orderer.EtcdRaft.Consenters  .Host' | tr -d '"')while   true  ; do for ORDERER in $ORDERERS; do IS_LEADER=$(curl -v --silent http://${ORDERER}:8443/metrics 2>&1 | grep sys-channel | awk '/^consensus_etcdraft_is_leader/ {print $2}')   "${IS_LEADER}" == "1"   && break echo ${ORDERER} : ${IS_LEADER} done   "${IS_LEADER}" == "1"   && break sleep 1 done echo "ordering service is ready to accept transactions!"{code}          ></body> </Action>
<Action id="72061" issue="44795" author="arman19940326" type="comment" created="2021-08-31 05:10:37.0" updateauthor="arman19940326" updated="2021-08-31 05:11:46.0"> <body><! CDATA Yeah, you're right about greping channel name. I had changed my script a long time ago but didn't update my answer here. Since election takes place for each channel independently, I made a bash function to use it for each channel creation.    {code:java} wait_for_raft() { CHANNEL_NAME="$1" echo"################# Wait till RAFT nodes are ready to accept transactions #################" ORDERERS=$(kubectl get svc -l "hyperledger-fabric-component=orderer" | awk '{print $3}') while   true  ;do     for ORDERER in ${ORDERERS};do       IS_LEADER=$(curl -v --silent http://${ORDERER}:8443/metrics 2>&1 | grep "${CHANNEL_NAME}" | awk '/^consensus_etcdraft_is_leader/ {print $2}')         "${IS_LEADER}" == "1"   && break     done       "${IS_LEADER}" == "1"   && break     sleep 1 done echo"ordering service is now ready to accept transactions!" }{code}  ></body> </Action>
