<Action id="30470" issue="20583" author="muralisr" type="comment" created="2017-09-02 15:23:02.0" updateauthor="muralisr" updated="2017-09-02 15:23:02.0"> <body><! CDATA  ~greg.haskins  Killing the peer should tear the chat stream down and take down the grpc connection as well. I'll check to make sure if we are doing everything correctly on both sides of the connection.  Do you know in your scenario if there were multiple hops between chaincode and peer ?  ></body> </Action>
<Action id="30509" issue="20583" author="muralisr" type="comment" created="2017-09-05 14:27:38.0" updateauthor="muralisr" updated="2017-09-05 14:27:38.0"> <body><! CDATA  ~greg.haskins  tried a few variations of "kill peer while chaincode is up" with chaincode in various states such as waiting for requests, processing requests (tried long lived using Sleep).... in all cases chaincode got killed and container exited with message like {code:java} 2017-09-05 13:51:08.859 UTC  shim  func1 -> ERRO 001 Received error from server: rpc error: code = Internal desc = transport is closing, ending chaincode stream{code}  The one way I can think of such a scenario is if an intermediate proxy or something keeps the chaincode side connection open (which is why I was asking about multiple hops). Thoughts please ?  ></body> </Action>
<Action id="30524" issue="20583" author="greg.haskins" type="comment" body=" ~muralisr  context was running in Kubernetes (OpenShift Origin v3.6.0 to be exact).  While definitely funky networking takes place within k8s, I am not aware of any intermediate hops between endpoints." created="2017-09-05 17:54:54.0" updateauthor="greg.haskins" updated="2017-09-05 17:54:54.0"/>
<Action id="31136" issue="20583" author="muralisr" type="comment" created="2017-09-25 15:15:15.0" updateauthor="muralisr" updated="2017-09-25 15:15:15.0"> <body><! CDATA  ~greg.haskins  when testing something else I believe I ran into this situation - the chaincode container was up but the peer had gone away. I was able to get the stack though FWIW   {code:java} goroutine 0  idle : runtime.futex(0x10350d0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7ffcd24f1ad8, 0x40fefb, ...) /opt/go/src/runtime/sys_linux_amd64.s:438 +0x21 runtime.futexsleep(0x10350d0, 0xc400000000, 0xffffffffffffffff) /opt/go/src/runtime/os_linux.go:45 +0x62 runtime.notesleep(0x10350d0) /opt/go/src/runtime/lock_futex.go:151 +0x9b runtime.stopm() /opt/go/src/runtime/proc.go:1670 +0xe5 runtime.findrunnable(0xc420021900, 0x0) /opt/go/src/runtime/proc.go:2125 +0x4d2 runtime.schedule() /opt/go/src/runtime/proc.go:2245 +0x12c runtime.park_m(0xc420068c00) /opt/go/src/runtime/proc.go:2308 +0xb6 runtime.mcall(0x7ffcd24f1c70) /opt/go/src/runtime/asm_amd64.s:286 +0x5b  goroutine 1  chan receive : github.com/hyperledger/fabric/core/chaincode/shim.chatWithPeer(0xc420016017, 0x6, 0x7f28a2cf3068, 0xc420144880, 0xffe200, 0x105af38, 0x0, 0x0) /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/shim/chaincode.go:334 +0x426 github.com/hyperledger/fabric/core/chaincode/shim.Start(0xffe200, 0x105af38, 0x89d1c4, 0xc420161f60) /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/shim/chaincode.go:145 +0x1a2 main.main() /chaincode/input/src/github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02/chaincode_example02.go:203 +0x41 goroutine 20  IO wait : internal/poll.runtime_pollWait(0x7f28a35b8f70, 0x72, 0x0) /opt/go/src/runtime/netpoll.go:173 +0x57 internal/poll.(*pollDesc).wait(0xc4201a2a98, 0x72, 0xffffffffffffff00, 0xffc8c0, 0xff6dd0) /opt/go/src/internal/poll/fd_poll_runtime.go:85 +0xae internal/poll.(*pollDesc).waitRead(0xc4201a2a98, 0xc420266000, 0x8000, 0x8000) /opt/go/src/internal/poll/fd_poll_runtime.go:90 +0x3d internal/poll.(*FD).Read(0xc4201a2a80, 0xc420266000, 0x8000, 0x8000, 0x0, 0x0, 0x0) /opt/go/src/internal/poll/fd_unix.go:125 +0x18a net.(*netFD).Read(0xc4201a2a80, 0xc420266000, 0x8000, 0x8000, 0x3, 0xc420021900, 0xc420021970) /opt/go/src/net/fd_unix.go:202 +0x52 net.(*conn).Read(0xc42014c160, 0xc420266000, 0x8000, 0x8000, 0x0, 0x0, 0x0) /opt/go/src/net/net.go:176 +0x6d bufio.(*Reader).Read(0xc4201821e0, 0xc420276038, 0x9, 0x9, 0xc4202a8330, 0xc420038d48, 0x840d47) /opt/go/src/bufio/bufio.go:213 +0x30b io.ReadAtLeast(0xff8ac0, 0xc4201821e0, 0xc420276038, 0x9, 0x9, 0x9, 0x0, 0x400eae, 0xc420038e5f) /opt/go/src/io/io.go:309 +0x86 io.ReadFull(0xff8ac0, 0xc4201821e0, 0xc420276038, 0x9, 0x9, 0x4ecb1a0501, 0xc50000000000004e, 0x4e) /opt/go/src/io/io.go:327 +0x58 github.com/hyperledger/fabric/vendor/golang.org/x/net/http2.readFrameHeader(0xc420276038, 0x9, 0x9, 0xff8ac0, 0xc4201821e0, 0x0, 0x0, 0xc4201b73b0, 0x0) /opt/gopath/src/github.com/hyperledger/fabric/vendor/golang.org/x/net/http2/frame.go:237 +0x7b github.com/hyperledger/fabric/vendor/golang.org/x/net/http2.(*Framer).ReadFrame(0xc420276000, 0xffdb40, 0xc420188ea0, 0x0, 0x0) /opt/gopath/src/github.com/hyperledger/fabric/vendor/golang.org/x/net/http2/frame.go:492 +0xa4 github.com/hyperledger/fabric/vendor/google.golang.org/grpc/transport.(*framer).readFrame(0xc420188e70, 0xc420188ea0, 0xc420188ea0, 0x0, 0x0) /opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/transport/http_util.go:608 +0x2f github.com/hyperledger/fabric/vendor/google.golang.org/grpc/transport.(*http2Client).reader(0xc420068600) /opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/transport/http2_client.go:1115 +0xc0 created by github.com/hyperledger/fabric/vendor/google.golang.org/grpc/transport.newHTTP2Client /opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/transport/http2_client.go:267 +0xbd8  goroutine 21  select : github.com/hyperledger/fabric/vendor/google.golang.org/grpc/transport.(*http2Client).controller(0xc420068600) /opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/transport/http2_client.go:1188 +0x142 created by github.com/hyperledger/fabric/vendor/google.golang.org/grpc/transport.newHTTP2Client /opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/transport/http2_client.go:297 +0xd0e  goroutine 22  select : github.com/hyperledger/fabric/vendor/google.golang.org/grpc.(*addrConn).transportMonitor(0xc4202501c0) /opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/clientconn.go:995 +0x1de created by github.com/hyperledger/fabric/vendor/google.golang.org/grpc.(*ClientConn).resetAddrConn /opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/clientconn.go:716 +0x67a  goroutine 24  select : github.com/hyperledger/fabric/vendor/google.golang.org/grpc.newClientStream.func3(0x1006320, 0xc420068600, 0xc420250000, 0xc4201922c0, 0xc420164700) /opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/stream.go:255 +0x1cd created by github.com/hyperledger/fabric/vendor/google.golang.org/grpc.newClientStream /opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/stream.go:254 +0xe23 goroutine 25  select : github.com/hyperledger/fabric/core/chaincode/shim.chatWithPeer.func1(0xc420186420, 0xc420144980, 0x7f28a2cf3068, 0xc420144880, 0xc420186480, 0xc420264150) /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/shim/chaincode.go:285 +0x207 created by github.com/hyperledger/fabric/core/chaincode/shim.chatWithPeer /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/shim/chaincode.go:267 +0x40f  goroutine 43  select : github.com/hyperledger/fabric/vendor/google.golang.org/grpc/transport.(*recvBufferReader).Read(0xc4201470c0, 0xc42014a890, 0x5, 0x5, 0x0, 0x0, 0x0) /opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/transport/transport.go:145 +0x2ec github.com/hyperledger/fabric/vendor/google.golang.org/grpc/transport.(*transportReader).Read(0xc420189110, 0xc42014a890, 0x5, 0x5, 0x46ebde, 0xc4201647c0, 0xc4200580c0) /opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/transport/transport.go:349 +0x55 io.ReadAtLeast(0xffa140, 0xc420189110, 0xc42014a890, 0x5, 0x5, 0x5, 0xc420068600, 0xc420164700, 0x5) /opt/go/src/io/io.go:309 +0x86 io.ReadFull(0xffa140, 0xc420189110, 0xc42014a890, 0x5, 0x5, 0x17, 0x1db39, 0x1034580) /opt/go/src/io/io.go:327 +0x58 github.com/hyperledger/fabric/vendor/google.golang.org/grpc/transport.(*Stream).Read(0xc420164700, 0xc42014a890, 0x5, 0x5, 0xa74da0, 0xc420195c20, 0xc420026dd8) /opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/transport/transport.go:333 +0xbf github.com/hyperledger/fabric/vendor/google.golang.org/grpc.(*parser).recvMsg(0xc42014a880, 0x6400000, 0xc420021900, 0x0, 0xbe69bfa8ef99ba28, 0x9eb9dc9ab, 0x1034580, 0x1db39) /opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/rpc_util.go:265 +0x65 github.com/hyperledger/fabric/vendor/google.golang.org/grpc.recv(0xc42014a880, 0x10030c0, 0x105af38, 0xc420164700, 0x0, 0x0, 0xa74da0, 0xc420195c70, 0x6400000, 0x0, ...) /opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/rpc_util.go:361 +0x4d github.com/hyperledger/fabric/vendor/google.golang.org/grpc.(*clientStream).RecvMsg(0xc4201922c0, 0xa74da0, 0xc420195c70, 0x0, 0x0) /opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/stream.go:398 +0xe6 github.com/hyperledger/fabric/protos/peer.(*chaincodeSupportRegisterClient).Recv(0xc420144880, 0xc420264150, 0xc420195c20, 0x0) /opt/gopath/src/github.com/hyperledger/fabric/protos/peer/chaincode_shim.pb.go:372 +0x62 github.com/hyperledger/fabric/core/chaincode/shim.chatWithPeer.func1.1(0xc420144980, 0x7f28a2cf3068, 0xc420144880, 0xc4201864e0) /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/shim/chaincode.go:281 +0x35 created by github.com/hyperledger/fabric/core/chaincode/shim.chatWithPeer.func1 /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/shim/chaincode.go:279 +0xdd1  rax    0xca rbx    0x1034fc0 rcx    0x459d63 rdx    0x0 rdi    0x10350d0 rsi    0x0 rbp    0x7ffcd24f1aa0 rsp    0x7ffcd24f1a58 r8     0x0 r9     0x0 r10    0x0 r11    0x286 r12    0x1 r13    0xc4201864e0 r14    0x1 r15    0x0 rip    0x459d61 rflags 0x286 cs     0x33 fs     0x0 gs     0x0  {code}   I'd have expected    {code:java} github.com/hyperledger/fabric/protos/peer.(*chaincodeSupportRegisterClient).Recv(0xc420144880, 0xc420264150, 0xc420195c20, 0x0) /opt/gopath/src/github.com/hyperledger/fabric/protos/peer/chaincode_shim.pb.go:372 +0x62 github.com/hyperledger/fabric/core/chaincode/shim.chatWithPeer.func1.1(0xc420144980, 0x7f28a2cf3068, 0xc420144880, 0xc4201864e0) /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/shim/chaincode.go:281 +0x35  {code}  to exit  Will try to recreate now that I know it happens in my env too.  ></body> </Action>
<Action id="31501" issue="20583" author="muralisr" type="comment" created="2017-10-02 00:30:42.0" updateauthor="muralisr" updated="2017-10-02 00:30:42.0"> <body><! CDATA  ~greg.haskins  I can now reliably recreate this by doing {noformat} docker network disconnect <peers network ID> <peer container> {noformat} After that the chaincode sticks around even if the peer is killed. Turn grpc keepalive unblocks and triggers errors. Something like that maybe a good thing to do in general to take of network delinks. We can try and see if this works in your environment to quickly check feasibility.  ></body> </Action>
<Action id="31610" issue="20583" author="muralisr" type="comment" created="2017-10-04 16:26:06.0" updateauthor="muralisr" updated="2017-10-04 16:26:06.0"> <body><! CDATA  ~greg.haskins  when the chaincode-peer connection gets disconnected link level, bad things can happen on both sides. This is easily fixed by using gRPC keepalive support https://jira.hyperledger.org/browse/FAB-4305 (thanks  ~mastersingh24  ). Will put out a CR for this ....  As an aside this should also help https://jira.hyperledger.org/browse/FAB-6333  ~AdnanChoudhury  .  ></body> </Action>
