<Issue id="12923" key="FAB-621" number="621" project="10002" reporter="kchristidis" assignee="kchristidis" creator="kchristidis" type="10001" summary="Create a hash-chain for the Kafka orderer" priority="3" resolution="10000" status="6" created="2016-10-06 20:42:12.0" updated="2018-07-20 18:56:54.0" resolutiondate="2016-12-20 04:32:03.0" votes="0" watches="3" workflowId="36401"> <description><! CDATA Remember that our goal is to make this "Kafka orderer" layer that now stands between the client and the broker as thin as possible. We want to let Kafka do most of the work, since it's a well-tested and performant solution and we don't want to replicate any of its functionality.  The Kafka orderer does two things: # It batches transactions into blocks (which we should stop doing by the way, because Kafka can do it for us), and # It creates a hash-chain between the blocks  In this story, we should explore the various ways with which we can create hash-chain with Kafka. Our goal is to find (a) the one that performs best (i.e. is the fastest), and (b) uses as less custom code as possible.  Suggestions: #  ~bcbrock  suggested that it may be worth looking into Kafka Connect. # I haven't studied it carefully but I am wondering whether the new Kafka Streams functionality can get us there. # Finally, there is always the option of creating a hash-chain via checkpoint messages, an idea that was first suggested by Chet Murthy: every K messages received, each client broadcasts a checkpoint message via the orderer that is the hash of this concatenation: (previous checkpoint hash + K most recent messages)  ></description> </Issue>
