<Action id="18959" issue="12716" author="bcbrock" type="comment" created="2016-09-21 17:15:25.0" updateauthor="bcbrock" updated="2016-09-21 17:15:25.0"> <body><! CDATA Dino,  After thinking about it a bit, I'm going to push back on this one. You can already do this in a sense:  1) Run without -interlock 2) use -force to force the job to continue even in the face of errors. 3) (Optional) Use the -txDelay,-netDelay,-peerDelay to control TX issue rates  You can then look at the results and decide if "too many" got dropped.  The idea of a parameter that says "allow 10% of TX to be dropped" and interacts correctly with all of the other possible parameters and checking code would be a lot of work, and may be difficult to do sensibly. For example, imagine you are interlocking. This would require a completely new approach to interlocking, e.g. we might have to register a timeout for every single TX rather than for a block of TX as is done now, and it will probably require more than 1 parameter to cover all of the timeout and sequencing possibilities.  Given that the next generation fabric should (?) provide better reliability, and the workaround mentioned above, I currently do not plan to make this change myself.   ></body> </Action>
<Action id="18961" issue="12716" author="dinotone" type="comment" body="Got it Bishop. Makes sense, and we&apos;ll consider your suggestions. I&apos;m not sure how to close this issue. " created="2016-09-21 17:41:20.0" updateauthor="dinotone" updated="2016-09-21 17:41:20.0"/>
<Action id="18969" issue="12716" author="bcbrock" type="comment" body="I do think this is a good &quot;lesson learned&quot; for a new driver. The way that busywork does interlock could be generalized, so that instead of requiring all TX just issued to be committed before continuing, we could do something like state a maximum # of TX that a client could have outstanding, and allow the client to more or less continuously submit TX (like token-based flow control)." created="2016-09-22 15:54:33.0" updateauthor="bcbrock" updated="2016-09-22 15:54:33.0"/>
