<Issue id="17035" key="FAB-4121" number="4121" project="10002" reporter="kchristidis" assignee="kchristidis" creator="kchristidis" type="10002" summary="Stop conditions for connecting to the Kafka cluster?" priority="3" resolution="10000" status="6" created="2017-05-23 16:49:53.0" updated="2018-07-20 14:12:55.0" resolutiondate="2017-06-06 05:42:19.0" votes="0" watches="6" workflowId="38649" security="10001"> <description><! CDATA When: # A new valid channel creation request comes in, or # An OSN comes up and has channels/ledgers already saved to disk  Then the following happens in the Kafka case (high-level view): # `multichain.newChainSupport()` creates a `chainSupport` object and calls the `Start()` method on the `chainSupport.chain` field (type `Chain`). Two notes: ## At this point we've already created (or already had) a directory on disk, and printed a "Created and starting new chain" message (which is a logger message and not exposed to the end user, but still). ## B. The `Start()` method of the Chain interface returns zero values. # As part of the `Start()` logic, the Kafka-based OSN attempts to create a producer (writer) and consumer (listener) to the Kafka cluster for the channel in question. Low-level details (if these throw you off, please ignore – writing them mostly as notes to self for reference): ## The producer is set up first and posts an empty CONNECT message to prevent the consumer from attempting to listen in on an empty channel (partition) and panic. ## The consumer is set up at a subsequent code block. It uses the same connection established by the producer. # If either the producer or the consumer cannot set up (because the cluster is inaccessible, or because Kafka is in a messy state where a leader for the channel/partition in question cannot be elected), the OSN halts the Chain object that was created for this channel.  This leaves us at a rather odd (and definitely incorrect) zombie state with regards to this channel. Specifically: # Any Broadcast request that comes in to this OSN for the channel in question will fail. # Any Deliver request that comes in will return just the channel's genesis block (if it's a newly-created channel), or all the blocks that were in the channel up until the point we decided to bring up the OSN again (see point 2 in the "When" block in the first paragraph).  I can add retry logic that makes the OSN try to set up a producer/consumer till the end of time. (I have some of that logic in there already, but it's too brittle. I'm in the process of hardening it as we speak. This will address the majority of the bugs that have been reported against the Kafka OSN, incl. those that our friends at HSBN see.)  But is this how we want to handle it?  Should there be a stop condition at which point we give up? And if that's the case, how does this ripple through (feed back to) the multichain manager?  ></description> </Issue>
