<Issue id="34511" key="FAB-12357" number="12357" project="10002" reporter="sykesm" assignee="wlahti" creator="sykesm" type="10001" summary="As a platform operator, I expect a simple, transparent, and consistent mechanism to configure logging levels." priority="3" resolution="10000" status="6" created="2018-10-09 15:19:00.0" updated="2019-04-29 13:48:15.0" resolutiondate="2018-12-10 13:42:44.0" votes="0" watches="4" workflowId="45913"> <description><! CDATA Because of a combination of how we've built our configuration on top of viper and how we rely on package level initialization for logging, we have a situation where setting up a log level is not as simple as it should be. To remove the confusion, we need three things:  - A mechanism to configure a single logging spec that is honored before any log records are written - A mechanism for operators to retrieve the active logging spec - A mechanism for operators specify a new logging spec  In concrete terms, this means we need to use remove the logging levels from our configuration system in favor of an environment variable or a flag. If we decide we need both an environment variable and a flag, the flag will take precedence.  The logging spec will be similar to the existing model used by the admin service. That said, unlike the current spec, it will not be applied incrementally to what's running and will completely override, as atomically as is feasible, the enabled loggers.  Logger names are composed of one or more dot (period) separated names. This is to be consistent with the conventions implied by zap named loggers.  The log spec is a single string that consists of colon separated tokens. Each token declares a logger name prefix and a optional log level. When the logger name prefix ends with a period, it indicates that the log level should only apply to the logger with the exact name when the trailing period is dropped. When the logger name pattern is omitted, it specifies the default log level. In cases where multiple entries reference the same name pattern or multiple instances of a default are provided, the last specification takes precedence.  When prefixes are evaluated against logger names, the longest match from the spec will be used.  Examples: - `info` enables all loggers at the _info_ level - `a=debug` enables loggers with names like `a`, `a.b`, or `a.b.c` at the _debug_ level; all other loggers will log at the _info_ level - `a.=debug:warn` enables the logger named `a` at the _debug_ level; all other loggers will be at the _warn_ level - `a.b=debug:a.b.c.=warn` enables loggers with names that start with `a.b` at the _debug_ level except for the one named `a.b.c` which will log at the _warn_ level. All other loggers will log at the _info_ level. - `info:warn` enables all loggers at the warn level - `broken` is rejected as an error and the logging configuration is unchanged. If a bad spec is provided as the process is starting, the process will execute with the default log specification of `info`.   ></description> </Issue>
