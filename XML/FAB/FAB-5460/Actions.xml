<Action id="29079" issue="19478" author="troyronda" type="comment" body="Note: multiple architectures needs to be handled (e.g., s390 vs x86_64)" created="2017-07-27 12:06:01.0" updateauthor="troyronda" updated="2017-07-27 12:06:01.0"/>
<Action id="30006" issue="19478" author="rameshthoomu" type="comment" body="We purge sandbox builds on every Saturday, so the existing build was deleted from sandbox.. Triggered one more build today in sandbox https://jenkins.hyperledger.org/sandbox/job/fabric-verify-behave-x86_64_1/2/consoleFull" created="2017-08-18 19:25:06.0" updateauthor="rameshthoomu" updated="2017-08-18 19:25:06.0"/>
<Action id="30111" issue="19478" author="sudeshrshetty" type="comment" created="2017-08-23 15:45:07.0" updateauthor="sudeshrshetty" updated="2017-08-23 15:48:39.0"> <body><! CDATA I have a suggestion which will fix this verification build and also it will not impact anyone else’s code push.  If you look at execute shell in   https://jenkins.hyperledger.org/job/fabric-verify-behave-x86_64/configure-readonly/      .  .  .  .    # Build Peer and images     {color:#d04437}_*make peer && make docker*_{color}  docker images | grep hyperledger  cd bddtests  behave -k -D logs=force -D cache-deployment-spec  #behave -k -D cache-deployment-spec features/bootstrap.feature # Deactivate vitrualenv after behave test  Deactivate  .  .  .  .     If you replace ‘{color:#d04437}_*make peer && make docker*_{color}’ with an already existing target for running behave dependencies called {color:#205081}‘make behave-{color}deps’ which does the same job,  will fix this code push as well as it won’t impact others.  ></body> </Action>
<Action id="30235" issue="19478" author="troyronda" type="comment" created="2017-08-26 15:29:16.0" updateauthor="troyronda" updated="2017-08-28 00:45:36.0"> <body><! CDATA Here are some thoughts on the motivations for precompiled/preprocessed chain code in a business blockchain network/consortium.  In general, I think at least two problems can arise from requiring source code distribution to consortium peers: (1) Lack of flexibility in the implementation language. Peers must support every desired language and possibly even language version of fabric users (so far: Go, Java, Node).This issue is mitigated by allowing support for a binary option, and additionally by supporting the popular bytecodes such as jvm, llvm, … in possible future stories. (2) Lack of flexibility in the model for supplying customers/participants with the consortium implementation and certification of the implementation. A consortium should be able to choose who reviews the source code as a decoupled step from distribution of the implementation. There can be sensitive information in the source code that is appropriate for certifiers/reviewers but not appropriate for others in the consortium. The multi-organization aspect of the consortium model can have the side-effect of increasing the non-technical complexity of sensitive source code distribution.  ></body> </Action>
<Action id="30515" issue="19478" author="rickr" type="comment" body=" ~mastersingh24   ~jimthematrix    ~Clayton Sims  FYI. Currently *no plans to support* this for V1.1 Java SDK unless someone  jumps on board to implement and provide test coverage to assure it&apos;s working." created="2017-09-05 15:22:05.0" updateauthor="rickr" updated="2017-09-05 15:22:05.0"/>
<Action id="34455" issue="19478" author="mastersingh24" type="comment" created="2017-11-08 14:33:06.0" updateauthor="mastersingh24" updated="2017-11-08 14:34:34.0"> <body><! CDATA Rather than marking this as WON'T FIX, I'm going to mark this DONE.  While there were many debates and negative opinions on doing this from several of the maintainers, with the move to Go 1.9 as well as -FAB-6613-, it possible to do this by specifying your own chaincode.golang.runtime image in which you would include your compile plugins.  Then you can write standard chaincode which loads the plugin(s).  ></body> </Action>
