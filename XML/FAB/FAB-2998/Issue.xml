<Issue id="15578" key="FAB-2998" number="2998" project="10002" reporter="binhn" creator="binhn" type="10001" summary="External database and data services in Fabric discussion" priority="3" resolution="10001" status="6" created="2017-04-05 15:55:44.0" updated="2020-07-23 08:44:06.0" resolutiondate="2020-01-22 19:01:46.0" votes="0" watches="5" workflowId="35111"> <description><! CDATA Related  FAB-60|https://jira.hyperledger.org/browse/FAB-60   Currently Fabric has a pluggable database used to cache the state of the ledger to provide quick queries. The built-in database is LevelDB, which provides limited queries based on keys. The framework enables plugging in a database by implementing some interfaces. An example provided is CouchDB, a JSON database that allows much richer queries using CouchDB native query language. However there are issues with this approach that we should discuss and find resolutions for. # Once a chaincode uses native query language, wherever the chaincode runs, the supporting database must be present. It could force the entire network to install and support the database. # The result of the query is not guaranteed to be stable between endorsement and validation/commit time, potentially causing phantom reads (e.g. item inserted by another tran that should have been considered in current tran). # The database (like CouchDB) runs in a separate process from the Peer, so additional security considerations must be observed to satisfy the security policies configured on the blockchain network.  So the question is should we define a common abstraction layer (like JDBC) to allow portable OLTP in chaincodes, pick an existing ORM/DAL, or stay with what we have which is DB vendor specific?  ></description> </Issue>
