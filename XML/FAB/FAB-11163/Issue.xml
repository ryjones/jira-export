<Issue id="31899" key="FAB-11163" number="11163" project="10002" reporter="yacovm" assignee="guoger" creator="yacovm" type="10003" summary="Implement barebones etcd/raft consenter" priority="3" resolution="10000" status="6" created="2018-07-15 11:41:38.0" updated="2018-10-09 21:10:47.0" resolutiondate="2018-10-09 21:10:47.0" votes="0" watches="4" workflowId="43783"> <description><! CDATA (This goes hand-in-hand with FAB-11162 and (part of) the contract between these two pieces of work is captured in  Page 1|https://docs.google.com/presentation/d/1olukZUnriPS3HfWMPkQfKjypa3QV_iTacfI1lH8Mtqg/edit#slide=id.g3dec6414ec_0_0 . Please feel free to expand that diagram and the text here as you see fit.)  Create a, say, {{Consenter}} object with a logger and the certificates that correspond to this OSN/replica (so that it can determine its own Raft node ID). Assume that the certificates are passed on to you via a {{etcdraftplugin.New()}} constructor from the configuration,  similar to how the Kafka constructor reads the list of Kafka brokers|https://github.com/hyperledger/fabric/blob/668456b1d37e8b3f6ea48c7ac54cca277d0543de/orderer/common/server/main.go#L258 .  This {{Consenter}} object should implement the {{consensus.Consenter}}Â interface, i.e. it should be able to {{HandleChain}} when asked by the multichannel registrar, and output a {{Chain}} object.  The {{Chain}} (tentative name) object should implement the {{consensus.Chain}} interface, and wrap around the Raft FSM (see FAB-11162), interacting with it according to the diagram shown in  Page 1|https://docs.google.com/presentation/d/1olukZUnriPS3HfWMPkQfKjypa3QV_iTacfI1lH8Mtqg/edit#slide=id.g3dec6414ec_0_0 .  It should be able to pass envelopes coming from the {{FSM}} (FAB-11162) to the {{blockcutter}}, and pass any blocks from the {{blockcutter}} back to the {{FSM}} (so that they can be Proposed to {{raft.Node}} - this last bit is FAB-11162's responsibility).  The {{Chain}} object should also be able to work with blocks coming off of the {{FSM}}, and append them to the local ledger so that they can be returned to {{Deliver}} RPC clients.  ></description> </Issue>
