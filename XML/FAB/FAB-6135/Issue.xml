<Issue id="20789" key="FAB-6135" number="6135" project="10002" reporter="kchristidis" assignee="kchristidis" creator="kchristidis" type="10000" summary="Raft Consensus (etcd/raft)" priority="1" resolution="10000" status="6" created="2017-09-13 03:01:09.0" updated="2020-02-04 14:25:14.0" resolutiondate="2020-02-04 14:25:14.0" votes="8" watches="44" workflowId="43191"> <description><! CDATA If this were titled as a story it would be: {quote}As a Fabric ordering service operator/deployer, I wish to decrease my dependency on third-party binaries. {quote} We propose to achieve this via an ordering service based on etcd/raft.  Raft still keeps us in CFT-land and as such, it is still not the optimal solution (BFT is, and that's also coming), but – # It allows us to have an ordering service without Kafka/ZK depedencies, and # It helps with the BFT development as well, since it gives us a chance to hook into Fabric  a leader-based consensus protocol|https://chat.hyperledger.org/channel/fabric-maintainers?msg=N4qC8n6gKhF9C94B7  and carry those lessons over when writing the BFT plugin.  The  design document|https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit  goes over everything we'll need to do in order to make Raft a consensus option for Fabric.  The spreadsheet|https://docs.google.com/spreadsheets/d/1R02-xjdl4hNw90kN4NZ1kX0f4QoIYn51_1UHlwy-GQs/edit?usp=drive_web&ouid=102678938362176098972  goes over the rough plan of how we will be breaking this epic into stories. The last sheet on that spreadsheet includes a list of recommended resources and reference material.  ></description> </Issue>
