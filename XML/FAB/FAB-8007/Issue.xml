<Issue id="27302" key="FAB-8007" number="8007" project="10002" reporter="yacovm" creator="yacovm" type="10001" summary="Minimize transaction size by saving identities to stateDB and referencing them" priority="3" status="10000" created="2018-02-01 10:38:16.0" updated="2021-01-28 13:58:54.0" votes="1" watches="12" workflowId="35515"> <description><! CDATA As we know, x509 certificates of clients and peers greatly contribute to the abnormal size of transactions in fabric.  a typical x509 PEM is roughly 700 bytes, and a typical transaction has the PEM of the client, and also of the peer, and takes roughly 3KB because it has PEMs in: # Signature header of the client in the transaction payload # Signature header of the client in the TransactionAction # Endorser identity in the endorsement, per endorser.  So, about 2.1KB out of 3KB of data, is x509 certificates, which takes lots of space,  From an experiment I made - when a PEM is compressed via gzip, it goes from ~ 700 to ~ 500 bytes, and when it is compressed as a DER - it is reduced to ~ 400 bytes.  My proposal is to: * Save (per channel) in the stateDB the identities of clients and peers by creating a mapping from the unique representation (hereafter *idRef*) of the identity (i.e the hash over the identity and the type) to the identity bytes. This would reduce the size of a single identity to 32 bytes, and consequently - the total average size of a 1-endorsement transaction to less than 1KB. * Optionally, whenever an identity is needed is placed in the transaction in its raw form, just put *idRef * instead. This is optional, because the criteria for an identity to be inserted into the mapping would be that it was validated at the commit time. So, in order for a peer to use the optimization it would need to proactively know that its identity resides in the mapping, by querying the stateDB at startup or after it endorsed in the old way and as a result, the mapping was created.  Clients, could use the old way and if their transaction was valid, it proves that their identity was valid, which means that it should have been successfully inserted into the mapping. * Validation: When peer validates the transaction, if it sees a full representation it checks if it's already in the mapping, and if not, and the identity is valid - it inserts it into the mapping. When it sees a reference instead of the full representation, it fetches from the stateDB mapping the full representation. Since this is all per channel, total order is preserved in each channel and there is no dependency between channels.  However - I tried compressing a regular block via gzip and it compressed only to 50% of its size, so identity referencing is still superior in terms of space for a single block.  We could, however - have the ledger compress every K blocks, and then the compression rate on the disk would be much higher (for reference - a configuration block in e2e_cli is ~ 15K and is compressed to 5K).  The benefit of reducing the size of the transaction, is that we send less bytes (a third) over the wire and thus it reduces the bandwidth load on orderers, and transfers data faster across the network.  Thoughts?   ~C0rWin   ~mastersingh24   ~jyellick   ~ellaki   ~ales   ~adc   ~denyeart   ~manish-sethi  * Also, this would require a channel capability * The identity should be represented in a well-structured form, i.e for x509 identities, the pem header should be "CERTIFICATE", and the identity should be sanitized to the low/high s according to what fabric wants, so that we won't have multiple entries for the same identity.  ></description> </Issue>
