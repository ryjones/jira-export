<Action id="26252" issue="17858" author="yacovm" type="comment" body="Thanks  ~angelo.decaro  for the quick fix https://gerrit.hyperledger.org/r/#/c/10563/ " created="2017-06-14 08:39:14.0" updateauthor="yacovm" updated="2017-06-14 08:39:14.0"/>
<Action id="26253" issue="17858" author="angelo.decaro" type="comment" created="2017-06-14 09:24:34.0" updateauthor="angelo.decaro" updated="2017-06-14 09:24:34.0"> <body><! CDATA  ~yacovm , thanks a lot for having spotted that. The solution that I have proposed in https://gerrit.hyperledger.org/r/#/c/10563 goes in the direction that you suggested but does checks more carefully what is the best CurrentTime to be used. In more details: As you said validation of a certificate involves validation of its entire chain of trust. Therefore, we have to find a CurrentTime that makes the entire chain of trust valid without having, at this time, the chain of trust. What is done is then finding a CurrentTime that is between cert.NotBefore and cert.NotAfter that matches most of the certificates in msp.rootCerts and msp.intermediateCerts. So if we have the following setup (for the sake of simplicity, we only specify intervals): cert               valid from 13 - 14 (signed by ICA2) root CA            valid from 11 - 30 intermediate CA 1  valid from 16 - 17 (signed by root CA) intermediate CA 2  valid from 12 - 16 (signed by root CA) For sure, cert could not have been signed by ICA1, and its NotBefore is after cert's NotAfter, therefore it needs to be discarded.  What do you think? Thanks again for the feedback.   ></body> </Action>
<Action id="26256" issue="17858" author="angelo.decaro" type="comment" created="2017-06-14 09:40:31.0" updateauthor="angelo.decaro" updated="2017-06-14 09:42:21.0"> <body><! CDATA Let me add also this: what we are discussing here are just heuristics. The ultimate solution would be that that constructs the chain of trust for the certificate without validating the dates but in order to do so we would have to extract the part of the golang library that does that. Probably, this is doable but an assessment is needed.  In addition, as you were saying in a private chat, the issue is caused by the fact that the CA has a NotBefore date that is after the NotBefore date of the certificate which is weird.  ></body> </Action>
<Action id="26257" issue="17858" author="yacovm" type="comment" created="2017-06-14 09:49:16.0" updateauthor="yacovm" updated="2017-06-14 09:50:13.0"> <body><! CDATA {quote} Let me add also this: what we are discussing here are just heuristics {quote} Yeah yeah I know, I wrote that solution of mine just because I thought it makes sense that fabric-CA would output certificates that these stuff "works" for them.   {quote} In addition, as you were saying in a private chat, the issue is caused by the fact that the CA has a NotBefore date that is after the NotBefore date of the certificate which is weird. {quote} Well look at the sample I uploaded. Isn't that the case?   I think what we need to do, to be certain and fix this 100% is just to implement the logic in *buildChains*.  It's a recursive function that finds the validation chain and you can then use it and it will work for all the corner cases.  ></body> </Action>
<Action id="26430" issue="17858" author="clayton sims" type="comment" body="moving to in review." created="2017-06-15 16:42:06.0" updateauthor="clayton sims" updated="2017-06-15 16:42:06.0"/>
<Action id="26530" issue="17858" author="mastersingh24" type="comment" body=" ~adc   ~yacovm  While it is technically possible to to create certificates which have not before / not after outside the scope of the not before / not after of the roots / intermediates in their chain, is this actually something that should / would really happen in practice?  And even so, does this in any way create non-deterministic behavior for processing of blocks?" created="2017-06-16 13:19:27.0" updateauthor="mastersingh24" updated="2017-06-16 13:19:27.0"/>
<Action id="26689" issue="17858" author="yacovm" type="comment" created="2017-06-18 13:23:14.0" updateauthor="yacovm" updated="2017-06-18 13:23:25.0"> <body><! CDATA {quote}  ~adc   ~yacovm  While it is technically possible to to create certificates which have not before / not after outside the scope of the not before / not after of the roots / intermediates in their chain, is this actually something that should / would really happen in practice?  {quote}   ~mastersingh24  Didn't see this until now from some odd reason... I guess due to too many emails from JIRA. So the thing is - this issue was reported by a user that created these using fabric-CA (from what he told me).  {quote}  And even so, does this in any way create non-deterministic behavior for processing of blocks?{quote} I believe not. The peer would simply crash.  ></body> </Action>
<Action id="26715" issue="17858" author="angelo.decaro" type="comment" created="2017-06-19 06:48:49.0" updateauthor="angelo.decaro" updated="2017-06-19 06:48:49.0"> <body><! CDATA  ~yacovm  ~mastersingh24 , I'm not sure the best thing to do is to to implement the login in buildChains because every time that the x509 library changes we would have to update fabric as well. Therefore, either we get in the heuristic or we just fail by saying that the root certificate cannot start be valid after a user certificate.   ~smithbk , may you have your say on the fabric-ca side? Thanks.  ></body> </Action>
<Action id="26786" issue="17858" author="smithbk" type="comment" body="I agree that fabric CA should not issue certs with not before / not after outside the scope of the not before / not after of the roots / intermediates in their chain, so I added to the fabric-ca component.  Do you know how to reproduce?  I&apos;m wondering if this happened because of clock skew between the root and intermediate CA or for some other reason." created="2017-06-19 19:39:17.0" updateauthor="smithbk" updated="2017-06-19 19:39:17.0"/>
<Action id="26797" issue="17858" author="smithbk" type="comment" created="2017-06-19 21:38:29.0" updateauthor="smithbk" updated="2017-06-19 21:38:29.0"> <body><! CDATA By default, fabric CA issues certificates with a NotBefore time which is 5 minutes in the past.  This is CFSSL's default behavior which seems reasonable in order to allow for clock skew, but it is also configurable on a *per profile basis*. What happened in this case is that the root CA cert was generated using cryptogen, which doesn't backdate the cert.  The intermediate CA cert was generated by fabric CA and was therefore backdated, thus the earlier NotBefore.  ></body> </Action>
<Action id="27602" issue="17858" author="elli-androulaki" type="comment" created="2017-06-29 13:35:13.0" updateauthor="elli-androulaki" updated="2017-06-29 13:35:13.0"> <body><! CDATA Btw, having already discussed this, shall we list this as "WONT FIX" as is part of the expected behavior?   ~smithbk  when the certificates are renewed, do they preserve the old NOTBEFORE value? or a new one is added? If the former we may have a small period of time when certificates are failing...   ></body> </Action>
<Action id="29689" issue="17858" author="elli-androulaki" type="comment" created="2017-08-11 09:51:51.0" updateauthor="elli-androulaki" updated="2017-08-11 09:51:51.0"> <body><! CDATA Ok, an update for this.   It is indeed the case that the certificates should not exceed the NOT_AFTER indication of their parent. If this is done, it is wrong.   In the case of renewal of a root/intermediate CA certificate the NOT_BEFORE is not preserved. However, certificates that a CA issues would expire before its certificate expires. To avoid CA availability issues for issuing certificates, there is an period of time where two certificates are valid for the same CA: the old one (used to validate certificates signed by the CA's old certificate), and the new one (used to serve certificate issuing requests.).  Will therefore mark this item as "DONE".  ></body> </Action>
