<Issue id="40469" key="FAB-15652" number="15652" project="10002" reporter="yoheiueda" assignee="yoheiueda" creator="yoheiueda" type="10001" summary="Suppress unnecessary log message formatting for better performance" priority="3" resolution="10002" status="6" created="2019-06-07 14:31:30.0" updated="2019-06-10 18:59:54.0" resolutiondate="2019-06-10 18:59:54.0" votes="0" watches="2" workflowId="53395"> <description><! CDATA Even when logging level is set to a level other than DEBUG (such as FABRIC_LOGGING_SPEC=WARNING), log message formatting (e.g. Sprintf things) for debug logs is always executed.  Due to this behavior, peer's logging mechanism consumes 10.5% of peer's CPU usage in my experiment. I implemented a patch to suppress unnecessary log message formatting, and achieved 21% TPS improvement. Please see attached files for details.  Â The function in {{vendor/go.uber.org/zap/sugar.go}} prepares a log message from a given format. The {{Enabled(lvl)}} checks the log level to decide whether this message is written or not. {code:java} func (s *SugaredLogger) log(lvl zapcore.Level, template string, fmtArgs   interface{}, context   interface{}) { 	// If logging at this level is completely disabled, skip the overhead of 	// string formatting. 	if lvl < DPanicLevel && !s.base.Core().Enabled(lvl) { 		return 	}  	// Format with Sprint, Sprintf, or neither. 	msg := template 	if msg == "" && len(fmtArgs) > 0 { 		msg = fmt.Sprint(fmtArgs...) 	} else if msg != "" && len(fmtArgs) > 0 { 		msg = fmt.Sprintf(template, fmtArgs...) 	}  	if ce := s.base.Check(lvl, msg); ce != nil { 		ce.Write(s.sweetenFields(context)...) 	} } {code} However, {{Enabled(lvl)}} in Fabric always returns true, and log message formatting is always executed. This change was introduced to implement logging based on logger's names.   https://gerrit.hyperledger.org/r/c/fabric/+/27273   To work around the performance issue of this change, I implemented a patch that enables logging decision based on logger's names at {{Enabled(lvl)}}. My patch introduces some complication, but I think 20%+ TPS improvement justifies it.  ></description> </Issue>
