<Issue id="35474" key="FAB-12935" number="12935" project="10002" reporter="scottz" assignee="dongming" creator="scottz" type="10101" summary="SideDB Performance, CouchDB baseline, no private data" priority="3" resolution="10000" status="6" created="2018-11-19 18:16:55.0" updated="2019-08-01 02:02:06.0" resolutiondate="2019-08-01 02:02:06.0" votes="0" watches="2" workflowId="46940"> <description><! CDATA +*Setup:*+  Network Topology: 1 channel, 5 orgs, 2 peers per org, 1 CA per org, *CouchDB*, 3 orderers, 5 kafka, 3 zookeepers, TLS enabled, running in IKS cloud *  Chaincode: "getputcc" GO chaincode installed on all peers and instantiated *  CollectionConfig :  *None; no private data* *  Endorsement policy: 1 peer from two Orgs *  Client Driver: PTE, node SDK *  Number of threads (NT): 4 *  Number of transactions per thread (TPT): 1000 *  Number of transactions Total (TT): 4000  +*Test Steps:*+ 1) invoke transactions: each thread sends #TPT queries concurrently on channel1 using "put" API of getputcc chaincode to define new keys values * thread 1 sends to org1 peer1 and org2 peer1 * thread 2 sends to org1 peer2 and org2 peer2 * thread 3 sends to org3 peer1 on org4 peer1 * thread 4 sends to org3 peer2 on org4 peer2  2) normal queries: each thread sends #TPT queries concurrently using "get" API   +*Analyze Results*+: 1) TPS (transactions per second) for invokes(move), measured from proposal to event 2) TPS (transactions per second) for queries, measured from query proposal to response 3) CPU and memory usage for all containers (peers, cc, couchdb when applicable, orderers, kafka) 4) Compare against SideDB Performance LevelDB Baseline and against other SideDB CouchDB performance tests (linked)   +*Wish List To Do*+:  Scale up this test, using multiples of threads 4, 8, 12, 16, ... until throughput peaks. Consider adding more PTE drivers instead of just more threads, if the bottleneck is the PTE container.   ></description> </Issue>
