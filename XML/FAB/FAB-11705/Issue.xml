<Issue id="33160" key="FAB-11705" number="11705" project="10002" reporter="yacovm" assignee="yacovm" creator="yacovm" type="10004" summary="Large transactions don&apos;t pass validation with with latest protobuf version" priority="1" resolution="10000" status="6" created="2018-08-23 12:57:30.0" updated="2018-08-23 16:01:53.0" resolutiondate="2018-08-23 14:33:48.0" votes="0" watches="1" workflowId="44371"> <description><! CDATA The deduplicateIdentity has a logical flaw in it that is related to  how bytes are appended|https://github.com/hyperledger/fabric/blob/release-1.2/core/handlers/validation/builtin/validation_logic.go#L746-L753 .  The offending code is:  {code} signatureSet = append(signatureSet, &common.SignedData{ 			// set the data that is signed; concatenation of proposal response bytes and endorser ID Data: append(prespBytes, endorsement.Endorser...), {code}  If the proposal response payload (prespBytes) has a capacity that can contain its length + the endorser's identity - then a new slice isn't allocated, and the endorser's identity is then copied into the proposal response payload slice.  In v1.2 it didn't affect anything, because the probobuf version used always allocated field slices with the capacity of the length, so the prespBytes ended up always to be allocated inline. However - the latest protobuf version in fabric doesn't have this property, and thus if we send a transaction with a payload (i.e - via a big PutState) that is large enough - we have a problem with multi-signature endorsements because identities (in the appended slice) always overwrite identities of previous iterations.      *To reproduce:* Clone latest master, and apply the following git patch: {code} diff --git a/examples/chaincode/go/example02/chaincode.go b/examples/chaincode/go/example02/chaincode.go index 87629f4..cd990b7 100644 --- a/examples/chaincode/go/example02/chaincode.go +++ b/examples/chaincode/go/example02/chaincode.go @@ -127,6 +127,12 @@ func (t *SimpleChaincode) invoke(stub shim.ChaincodeStubInterface, args   string 		return shim.Error(err.Error()) 	}  +	// Put 50KB in "blabla" +	err = stub.PutState("blabla", make(  byte, 1024 * 50)) +	if err != nil { +		return shim.Error(err.Error()) +	} + 	return shim.Success(nil) }  diff --git a/examples/e2e_cli/scripts/script.sh b/examples/e2e_cli/scripts/script.sh index 72c0fa8..4a813f5 100755 --- a/examples/e2e_cli/scripts/script.sh +++ b/examples/e2e_cli/scripts/script.sh @@ -260,7 +260,7 @@ chaincodeInvoke () { peer chaincode invoke -o orderer.example.com:7050  --tls --cafile $ORDERER_CA -C $CHANNEL_NAME -n mycc $PEER_CONN_PARMS -c '{"Args": "invoke","a","b","10" }' >&log.txt 	fi 	res=$? -	cat log.txt +	#cat log.txt 	verifyResult $res "Invoke execution on PEER$PEER failed " 	echo "===================== Invoke transaction successful on $PEERS on channel '$CHANNEL_NAME' ===================== " 	echo  {code}  And then run the e2e_cli.  *The peers log the following:* {code} 2018-08-23 13:06:28.415 UTC  vscc  deduplicateIdentity -> DEBU 13d4 Signature set is of size 2 out of 2 endorsement(s) 2018-08-23 13:06:28.422 UTC  vscc  Validate -> WARN 13d7 Endorsement policy failure for transaction txid=2d4af3921d52eed1c8cb26f2892fac39afdfdae6e2dd15d4bd3aecd5f5364c3f, err: signature set did not satisfy policy 2018-08-23 13:06:28.422 UTC  vscc  Validate -> DEBU 13d8 block 4, namespace: mycc, tx 0 validation results is: VSCC error: endorsement policy failure, err: signature set did not satisfy policy 2018-08-23 13:06:28.422 UTC  committer/txvalidator  ValidateWithPlugin -> DEBU 13d9 Transaction 2d4af3921d52eed1c8cb26f2892fac39afdfdae6e2dd15d4bd3aecd5f5364c3f appears to be invalid: VSCC error: endorsement policy failure, err: signature set did not satisfy policy 2018-08-23 13:06:28.422 UTC  committer/txvalidator  VSCCValidateTx -> DEBU 13da VSCCValidateTx completes env bytes 0xc424830000 2018-08-23 13:06:28.422 UTC  committer/txvalidator  validateTx -> ERRO 13db VSCCValidateTx for transaction txId = 2d4af3921d52eed1c8cb26f2892fac39afdfdae6e2dd15d4bd3aecd5f5364c3f returned error: VSCC error: endorsement policy failure, err: signature set did not satisfy policy  {code}    ></description> </Issue>
