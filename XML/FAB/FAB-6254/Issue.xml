<Issue id="20946" key="FAB-6254" number="6254" project="10002" reporter="elli-androulaki" assignee="mathiasb303" creator="elli-androulaki" type="10003" summary="Enhance CSCC with local MSP update capabilities using peer fs access" priority="3" resolution="10000" status="6" created="2017-09-21 12:16:22.0" updated="2018-10-26 07:49:25.0" resolutiondate="2018-05-22 12:31:08.0" votes="0" watches="6" workflowId="46328"> <description><! CDATA Here we assume that the peer's administrator has access to the peer's filesystem, and is able to create a new directory filled in with the new configuration of MSP. The peer's administrator would request from the peer to load its local MSP from that directory, by passing the directory's location.      This work item requires the extension of CSCC (configuration system chaincode) with one more function, e.g., "updateLocalMSP", that takes as arguments a string indicating the new configuration's location. Implementation of this function, would need to leverage fabric/msp/mgmt.go (mgmt package) with a function similar to GetLocalMSP {quote}``` // GetLocalMSP returns the local msp (and creates it if it doesn't exist) func GetLocalMSP() msp.MSP \{    var lclMsp msp.MSP    var created bool = false     \{             m.Lock()             defer m.Unlock()              lclMsp = localMsp             if lclMsp == nil \{                   var err error                   created = true                    bccspMSP, err := msp.NewBccspMsp()                   if err != nil \{                         mspLogger.Fatalf("Failed to initialize local MSP, received err %s", err)                   }                    lclMsp, err = cache.New(bccspMSP)                   if err != nil \{                         mspLogger.Fatalf("Failed to initialize local MSP, received err %s", err)                   }                   localMsp = bccspMSP             }       }        if created \{             mspLogger.Debugf("Created new local MSP")       } else \{             mspLogger.Debugf("Returning existing local MSP")       }        return lclMsp } {quote} {{```}}  ></description> </Issue>
