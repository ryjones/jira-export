<Action id="31594" issue="20946" author="mathiasb303" type="comment" created="2017-10-04 09:41:29.0" updateauthor="mathiasb303" updated="2017-10-04 09:41:29.0"> <body><! CDATA The initial commit allows an admin to ask the peer to reload the local MSP by using the following command:  {{peer chaincode query -n cscc -c '\{"Args": "UpdateMSP" }'}}  In practice, what the admin would have to do to update the local MSP, is: # Copy the new local MSP configuration files to the MSP directory in the filesystem of the peer - the MSP directory is the one configured in the peer yaml file. Instead of overwriting the existing files, the MSP directory could be e.g., a symbolic link, and the link destination is simply changed to the directory containing the new files. # Run the above "UpdateMSP" CSCC function to trigger the updating/reloading of the local MSP in the peer.  The function currently does not take as input a path from where the local MSP configuration should be loaded from. The reason for this is that there is not yet any code that updates the yaml file with the new directory. If the yaml file is not updated, then the next time the peer is restarted, it will read the old configuration. This is sub-optimal.  The next steps for this work item are: # Support updating of the yaml file with a new location for the local MSP configuration # Support passing of the local MSP configuration in the CSCC function, instead of reading it from the peer's local disk. This would also include writing of the new local MSP configuration information to the disk on the peer, so that it would be loaded the next time the peer is restarted.  Tests are also still missing.  ></body> </Action>
<Action id="31595" issue="20946" author="elli-androulaki" type="comment" created="2017-10-04 09:49:28.0" updateauthor="elli-androulaki" updated="2017-10-04 09:49:28.0"> <body><! CDATA Thanks  ~mathiasb303 !  Adding  ~mastersingh24 ,  ~angelo.decaro ,  ~ales  to comment on this.  This aims to be a first step towards supporting local MSP updates without needing to reboot the peer.   ></body> </Action>
<Action id="31596" issue="20946" author="mathiasb303" type="comment" body="The CR is here: https://gerrit.hyperledger.org/r/#/c/14179/" created="2017-10-04 09:52:53.0" updateauthor="mathiasb303" updated="2017-10-04 09:52:53.0"/>
<Action id="35733" issue="20946" author="yacovm" type="comment" created="2017-12-01 18:58:08.0" updateauthor="yacovm" updated="2017-12-01 18:58:08.0"> <body><! CDATA I see that in the change set - you can also set the keystore and the certificate.  Is it intended that the peer would dynamically replace its eCert and key in v1.1 ?   Is there really a need from users to be able to do this?  ~mastersingh24    ></body> </Action>
<Action id="35917" issue="20946" author="mastersingh24" type="comment" created="2017-12-06 11:08:20.0" updateauthor="mastersingh24" updated="2017-12-06 11:08:20.0"> <body><! CDATA The biggest issue we have today is with the admin certs required by the local MSP.  As we know, admin certs are explicit certificates which are added to the MSP.  We currently don't have the ability to update these.  The second biggest issue (although maybe this is the first biggest for some people) is that the fact that you need to have an admin certificate upfront before starting the peer makes automation a little tricky (although we can resolve this in other ways outside of the peer code (for example we can script this with an env variable in a Docker container).  I do worry that the ability to update the actual private key after the network is running will be an issue for several components ( ~yacovm  I believe this will create some serious challenges for gossip based on the PKID code?).   ></body> </Action>
<Action id="35918" issue="20946" author="yacovm" type="comment" created="2017-12-06 11:28:55.0" updateauthor="yacovm" updated="2017-12-06 11:28:55.0"> <body><! CDATA {quote}I do worry that the ability to update the actual private key after the network is running will be an issue for several components ( ~yacovm  I believe this will create some serious challenges for gossip based on the PKID code?). {quote}    Precisely.  Gossip caches the peer's identity (and PKI-ID) in numerous places in the code, but the signing uses the  MessageCryptoService|https://github.com/hyperledger/fabric/blob/d9c320297bd2a4eff2eb253ce84dc431ef860972/gossip/api/crypto.go#L28-L59  which  in its construction|https://github.com/hyperledger/fabric/blob/d9c320297bd2a4eff2eb253ce84dc431ef860972/peer/node/start.go#L159   loads the localMSP|https://github.com/hyperledger/fabric/blob/d9c320297bd2a4eff2eb253ce84dc431ef860972/common/localmsp/signer.go#L62-L74  in every signing invocation.  This would result in peers signing messages with a *new* private key while the *new* public key wasn't disseminated to peers, and would result in all peers suspecting the updated peer(s) and then ceasing communication.  I'm not saying, of course - this can't be solved at all. I'm sure we can sort something out and make the new identities be disseminated, but this needs to be planned, coded, and then tested rigorously.   ~C0rWin  FYI ^        ></body> </Action>
<Action id="35919" issue="20946" author="mastersingh24" type="comment" body="Bottom line, after giving this more thought, I think we need to defer this to a future release and not risk doing this in 1.1 at this point." created="2017-12-06 11:33:33.0" updateauthor="mastersingh24" updated="2017-12-06 11:33:33.0"/>
<Action id="37694" issue="20946" author="lehors" type="comment" body="Sorry for messing up with the status. Totally accidental, due to some delay in page refresh. If only gerrit had an undo..." created="2017-12-20 22:06:15.0" updateauthor="lehors" updated="2017-12-20 22:06:15.0"/>
<Action id="43246" issue="20946" author="kchristidis" type="comment" body=" ~denyeart : Agree that this whole epic should have its {{Fix Version}} set to Future?" created="2018-04-20 22:20:41.0" updateauthor="kchristidis" updated="2018-04-20 22:20:41.0"/>
<Action id="44842" issue="20946" author="elli-androulaki" type="comment" body="Hi  ~kchristidis ,  This one is supposed to refer to a &quot;Future&quot; item. The CR that referred to this JIRA was abandoned not to cause confusion with the 1.2 items, but i believe this is something we want to address in subsequent Fabric versions." created="2018-05-22 13:30:27.0" updateauthor="elli-androulaki" updated="2018-05-22 13:30:27.0"/>
