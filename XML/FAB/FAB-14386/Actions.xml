<Action id="57902" issue="38041" author="pandrejko" type="comment" created="2019-03-05 22:41:41.0" updateauthor="pandrejko" updated="2019-03-06 19:00:12.0"> <body><! CDATA * We need to describe how to build the pkg file which includes the collection definition or point to instructions on how to do that * We need to revamp step 3  Install and instantiate chaincode with a collection|https://hyperledger-fabric.readthedocs.io/en/latest/private_data_tutorial.html#pd-install-instantiate-cc  * Should we remove or update the Private data tutorial video?  Notes:  We need to package the chaincode before it can be installed on our peers. Use the following commands to package a sample Go, Node.js or Java chaincode.  peer lifecycle chaincode package mycc.tar.gz --path github.com/hyperledger/fabric-samples/chaincode/abstore/go/ --lang golang  Install cc # this command installs a chaincode package on your peer peer lifecycle chaincode install mycc.tar.gz --name mycc --version 1.0     A successful command will return a hash of the chaincode package. You should see output similar to the following:  .. code:: bash  2019-02-28 18:25:29.417 UTC  cli.lifecycle.chaincode  submitInstallProposal -> INFO 001 Installed remotely: response:<status:200 payload:"\n \233 2\032\317\006C6\317\246\343}\253\333z\301\345\327;\216\000\331\253\300$5B\234\252\235\305\206" >  2019-02-28 18:25:29.420 UTC  cli.lifecycle.chaincode  submitInstallProposal -> INFO 002 Chaincode code package hash: 9b5b321acf064336cfa6e37dabdb7ac1e5d73b8e00d9abc02435429caa9dc586  The hash of the chaincode package is used by channel members to ensure that each organization has installed and agreed to the same chaincode. You can also find the chaincode package hash by querying your peer for information about the packages you have installed.  .. code:: bash # this returns the details of the packages installed on your peers peer lifecycle chaincode queryinstalled  The command above will return the hash of the mycc.tar.gz package. You should see output similar to the following:  .. code:: bash  Installed chaincodes on peer: Name: mycc, Version: 1.0, Hash: 9b5b321acf064336cfa6e37dabdb7ac1e5d73b8e00d9abc02435429caa9dc586  Save this hash. You will need it when your approve the chaincode definition for your organization in a future command.    After you install the chaincode, you need to approve a chaincode definition for your organization. The chaincode definition includes the important parameters of chaincode governance. The definition also includes the hash of the chaincode package to ensure that channel members are approving the same code.  .. code:: bash # this approves a chaincode definition for your org # make note of the --hash flag that provides the hash of the chaincode package peer lifecycle chaincode approveformyorg --channelID $CHANNEL_NAME --name mycc --version 1.0 --hash 9b5b321acf064336cfa6e37dabdb7ac1e5d73b8e00d9abc02435429caa9dc586 --sequence 1 --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --waitForEvent     All organizations need to agree on the definition before they can use the chaincode. Modify the following four environment variables operate as Org1:  .. code:: bash # Environment variables for PEER0  CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp CORE_PEER_ADDRESS=peer0.org1.example.com:7051 CORE_PEER_LOCALMSPID="Org1MSP" CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt  You can now approve a definition for the ``mycc`` chaincode as Org1. Chaincode is approved at the organization level. You can issue the command once even if you  have multiple peers.        Once a sufficient number of channel members have approved a chaincode definition, one member can commit the definition to the channel. By default a majority of channel members need to approve a definition before it can be committed. Since two out of two channel members have approved the definition, we can now commit the definition to the channel using the following command. You can issue this command as either Org1 or Org2.  .. code:: bash # this commits the chaincode definition to the channel peer lifecycle chaincode commit -o orderer.example.com:7050 --channelID $CHANNEL_NAME --name mycc --version 1.0 --hash 9b5b321acf064336cfa6e37dabdb7ac1e5d73b8e00d9abc02435429caa9dc586 --sequence 1 --init-required --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --waitForEvent --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses peer0.org2.example.com:9051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt    CouchDB indices may not be supported - need to doc this here: https://hyperledger-fabric.readthedocs.io/en/latest/private_data_tutorial.html#using-indexes-with-private-data  ></body> </Action>
<Action id="58407" issue="38041" author="negupta" type="comment" body="https://gerrit.hyperledger.org/r/#/c/30240/" created="2019-03-21 17:16:10.0" updateauthor="negupta" updated="2019-03-21 17:16:10.0"/>
