<Action id="24969" issue="17320" author="christopherferris" type="comment" created="2017-06-01 16:51:28.0" updateauthor="christopherferris" updated="2017-06-01 16:51:28.0"> <body><! CDATA For MacOS, we could easily use homebrew. What is less clear (yet) is whether we can do this directly - I am working on that (legal) aspect.  Anyway, for the homebrew formula, we need a tar file structured like this:  tar xvf hyperledger-fabric-1.0.0.tar.gz  bin/  bin/configtxgen  bin/cryptogen     And the formula:  class HyperledgerFabric < Formula    desc "Hyperledger Fabric native binaries installer"    homepage "https://hyperledger.org/projects/fabric"    url "file:///Users/cbf/dev/gocode/src/github.com/hyperledger/fabric/release/darwin-amd64/hyperledger-fabric-1.0.0.tar.gz"    sha256 "f71335f18149989b6ba1912c52947ff16301dcf888f08d07b59334cf91b5a332"       def install      bin.install "cryptogen"      bin.install "configtxgen"    end       test do      system "#\{bin}/configtxgen --help"      system "#\{bin}/cryptogen --help"    end  end     ></body> </Action>
<Action id="24972" issue="17320" author="christopherferris" type="comment" body="https://gerrit.hyperledger.org/r/#/c/10029/" created="2017-06-01 17:26:11.0" updateauthor="christopherferris" updated="2017-06-01 17:26:11.0"/>
<Action id="26093" issue="17320" author="christopherferris" type="comment" body=" https://gerrit.hyperledger.org/r/#/c/10413/  is more relevant, the home-brew approach is only for MacOS, but would leverage 10413. The important thing is to separate out the binaries from any sample app/demo (e.g. getting started)." created="2017-06-13 00:20:44.0" updateauthor="christopherferris" updated="2017-06-13 00:20:44.0"/>
<Action id="26094" issue="17320" author="christopherferris" type="comment" body="fabric-ca needs to be adapted to this approach (a tar file for bin/fabric-ca-client)." created="2017-06-13 00:21:30.0" updateauthor="christopherferris" updated="2017-06-13 00:21:30.0"/>
