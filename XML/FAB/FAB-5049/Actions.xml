<Action id="27484" issue="18741" author="yacovm" type="comment" body="Note that the max gRPC message size in fabric is currently set to 100MB https://github.com/hyperledger/fabric/blob/master/core/comm/config.go#L23-L24" created="2017-06-28 11:43:43.0" updateauthor="yacovm" updated="2017-06-28 11:43:43.0"/>
<Action id="27492" issue="18741" author="scottz" type="comment" created="2017-06-28 13:27:40.0" updateauthor="scottz" updated="2017-06-29 13:19:16.0"> <body><! CDATA Note we should configure with:     Orderer.AbsoluteMaxBytes < replica.fetch.max.bytes <= message.max.bytes  Defaults: * Orderer.AbsoluteMaxBytes 10, MB (but note: payload+hdrs+signs must be < message.max.bytes=1M default) * Orderer.PreferredMaxBytes 512, KB (limits the msgs in a batch, but not absolute; i.e. a single larger TX is allowed) * kafka.message.max.bytes 1,000,012 bytes * kafka.replica.fetch.max.bytes 1,048,576 bytes (not absolute) * kafka.replica.fetch.response.max.bytes 10,485,760 bytes  Someone would have to write/modify a chaincode to set "thousands of keys/values within one transaction", such as initializing thousands with init function. As for huge tansactions, we can increase TX sizes until reach a current limit, but continuing onward to ever larger sizes may take some iterations to identify and then modify size limits in different components of the system and comm protocols.  ></body> </Action>
<Action id="27624" issue="18741" author="ratnakar" type="comment" created="2017-06-29 15:46:08.0" updateauthor="ratnakar" updated="2017-06-30 13:43:07.0"> <body><! CDATA  ~latitiah   ~scottz  and I did some testing and here are our observations    chaincode|https://github.com/asararatnakar/nodeperf/blob/master/artifacts/src/github.com/uniqueKeyValue/uniqueKeyValue.go   + *Solo Orderer + NodeSDK e2e tests* are used to drive the testing   *+Iteration 1:+* With *10 KB* Payload Invoke/Query works fine With *100 KB* Payload Invoke/Query works fine With *500 KB* Payload Invoke/Query works fine With *1 MB* Payload Invoke/Query works fine With *2 MB* Payload Invoke/Query works fine With *2+ MB (~2.3 MB)* Payload Invoke works fine, however query fails with the below error {code:java} error:  client-utils.js : sendPeersProposal - Promise is rejected: Error: Received message larger than max (4449043 vs. 4194304) at /home/itpc/experims/fabric-sdk-node/node_modules/grpc/src/node/src/client.js:434:17 {code} Repeat the same i.e, send *~2.3 MB* payload again, transaction (invoke) itself fails. Seems this is from the node-sdk client grpc module ?  *+Iteration 2+: I did RESET everything*  With *1 MB* Payload Invoke/Query works fine With *2 MB* Payload Invoke/Query works fine With *2+ MB (~2.5 MB) *Payload Invoke/Query works fine With *4 MB* Payload Invoke works fine, however query fails with the below error {code:java} error:  client-utils.js : sendPeersProposal - Promise is rejected: Error: Received message larger than max (8193044 vs. 4194304) at /home/itpc/experims/fabric-sdk-node/node_modules/grpc/src/node/src/client.js:434:17{code} Repeat the same. i.e., send *4 MB *again, Transaction (invoke) itself fails.  ></body> </Action>
<Action id="27667" issue="18741" author="latitiah" type="comment" created="2017-06-29 21:47:55.0" updateauthor="latitiah" updated="2017-06-29 21:47:55.0"> <body><! CDATA On Kafka (setting the KAFKA environment variables), 1MB, 1.5MB works fine. 2MB has problems on the query. When looking through the peer and orderer logs, there are no errors. The error comes from the sdk during a query. The error is the same as mentioned in the above comment: {code} error:  client-utils.js : sendPeersProposal - Promise is rejected: Error: Received message larger than max (4195347 vs. 4194304) at /home/itpc/experims/fabric-sdk-node/node_modules/grpc/src/node/src/client.js:434:17 error:  client-utils.js : sendPeersProposal - Promise is rejected: Error: Received message larger than max (4195347 vs. 4194304) at /home/itpc/experims/fabric-sdk-node/node_modules/grpc/src/node/src/client.js:434:17 Error: Received message larger than max (4195347 vs. 4194304) Error: Received message larger than max (4195347 vs. 4194304) {code}  What is strange is the message size reported is twice as much as the actual payload.   ></body> </Action>
<Action id="29344" issue="18741" author="denyeart" type="comment" created="2017-08-02 11:31:34.0" updateauthor="denyeart" updated="2017-08-02 11:31:34.0"> <body><! CDATA  ~Ratnakar   ~latitiah   ~scottz   Is there intent to get back to testing larger payloads?  Or is bug FAB-5117 blocking the larger tests?  ></body> </Action>
<Action id="29351" issue="18741" author="latitiah" type="comment" body="Yes, this is currently listed as a test that will be included in our regression suite of tests. Currently, the plan is to test payloads as high as 10MB. (FAB-3851) If you would like to see higher, let us know." created="2017-08-02 14:38:18.0" updateauthor="latitiah" updated="2017-08-02 14:38:18.0"/>
<Action id="29356" issue="18741" author="denyeart" type="comment" created="2017-08-02 15:45:59.0" updateauthor="denyeart" updated="2017-08-02 15:45:59.0"> <body><! CDATA  ~latitiah   Yes, need to stress test much larger than 10MB so that we become aware of all the bottlenecks and configuration points necessary for transactions with large data.  (although the huge payload stress doesn't doesn't have to be in a daily regression bucket, it could be in a test bucket that runs less often).  I didn't initially notice FAB-3851.  That could cover the large payload test.  {color:#444444}Do you want to create another test JIRA item for the huge number of keys/values test?  Then you could close out this JIRA in favor of the two more focused test JIRA items. I'll defer to your judgement... {color}  ></body> </Action>
<Action id="62310" issue="18741" author="mastersingh24" type="comment" body="Open 1 year or more with no activity ... time to cleanup" created="2019-07-30 02:42:05.0" updateauthor="mastersingh24" updated="2019-07-30 02:42:05.0"/>
