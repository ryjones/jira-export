<Action id="57278" issue="37754" author="yacovm" type="comment" created="2019-02-19 00:26:53.0" updateauthor="yacovm" updated="2019-02-19 00:26:53.0"> <body><! CDATA I don't understand what this means... can you elaborate what you had in mind?     ></body> </Action>
<Action id="57318" issue="37754" author="scottz" type="comment" created="2019-02-19 17:55:52.0" updateauthor="scottz" updated="2019-02-19 17:55:52.0"> <body><! CDATA Suppose the client broadcasts an endorsed transaction to an orderer, then waits for the event from the peer for say 2 secs, times out, and tries to send it again (the same transaction) to the same or different orderer.  Maybe that much could be a good FVT test. Do we have something like that?  Our traffic generation clients (PTE, HFRD) currently do NOT have such a capability today to do this automatically. So they would require enhancement to do it. We imagine a real client using this logic, which would accommodate some lost transactions (which is acceptable in our raft implementation because they can occasionally occur due to things like leader changes due to various circumstances) and thus resend them again, so the traffic client/test could still expect all transactions to be successful at the end of the test.  However, the more I think about it, the more this sounds like a way to mask errors. If we do this, then the only time an automated test would fail, based on transaction counts, is if too many orderers halt during the test run. So maybe we should just withdraw this testtask.  ></body> </Action>
<Action id="57319" issue="37754" author="yacovm" type="comment" created="2019-02-19 18:08:29.0" updateauthor="yacovm" updated="2019-02-19 18:08:29.0"> <body><! CDATA we should try to use peers as little as possible when testing Raft.  This sounds to me like an FVT, and not a SVT.     please close this :)   ></body> </Action>
<Action id="57320" issue="37754" author="scottz" type="comment" body="This describes something that would qualify as an FVT test, and not help us much with SVT." created="2019-02-19 18:27:56.0" updateauthor="scottz" updated="2019-02-19 18:27:56.0"/>
