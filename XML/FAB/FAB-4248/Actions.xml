<Action id="24733" issue="17278" author="angelo.decaro" type="comment" body="Hi  ~xixuejia , not sure I&apos;m the right person to address this.  ~jimthematrix , do you have an idea of that can be that?" created="2017-05-31 07:43:22.0" updateauthor="angelo.decaro" updated="2017-05-31 07:43:22.0"/>
<Action id="24793" issue="17278" author="jimthematrix" type="comment" created="2017-05-31 16:02:16.0" updateauthor="jimthematrix" updated="2017-05-31 16:04:28.0"> <body><! CDATA  ~angelo.decaro  hi Angelo, from my observation when  ~xixuejia  showed me the behavior of the policy checker, this is what I think is happening:  - you have two endorsements: endorser1 as a member in org1 (E1) and endorser2 as an admin in org1 (E2) - you have the endorsement policy: "AND (org1.member, org1.admin)"  so the policy should be met. but what we observed was that depending on the order of the two MSP principals in the endorsement policy, the policy checking can fail. and this is why it's failing:  - the code iterates over the principals, so it takes the first one in the array: org1.member - it then iterates over the endorsers  E2, E1  and tries to find which one satisfies the target principal: org1.member - so it takes the first identity from the array, E2, and see that it satisfies the principal org1.member (since admin is a member) - it now marks E2 as used - it then moves on to the next principal: org1.admin - and tries to iterate over the endorsers to match any unused identities, which is now E1 - because E1 is not an admin, it'll mark the policy check as failed  on the other hand, if the endorsers array is set to a different order:  E1, E2 , then the above checking logic will succeed or if the endorsement policy is specified as "AND  org1.admin, org1.member , the checking will also succeed  in fact, the workaround I suggested to the testing team is to always specify admin identity in the policy before the member identity of the same org, which will always work regardless of the order of the endorsers. This can be used as a recommended workaround for v1.0 in case the fix is difficult. but if the fix is straightforward enough, we should get it in.   ></body> </Action>
<Action id="24803" issue="17278" author="xixuejia" type="comment" created="2017-05-31 16:57:25.0" updateauthor="xixuejia" updated="2017-05-31 16:57:25.0"> <body><! CDATA I agree with  ~jimthematrix 's workaround, but this would be a limitation if we force users to specify endorsement policy in certain order when instantiating chaincode.  I would propose we do this from peer side. When peer evaluates the policies, it should preprocess the signed data and identities array  - check whether there's duplicated identities to avoid unwanted attack  --> https://jira.hyperledger.org/browse/FAB-4252 - If there's any Admin identity, put it at the end of the array --> this is similar to the workaround but it's handled from peer side so the limitation would be eliminated.  ></body> </Action>
<Action id="24892" issue="17278" author="angelo.decaro" type="comment" body=" ~xixuejia , ~jimthematrix , are we talking about the server side or the client side here?" created="2017-06-01 08:29:03.0" updateauthor="angelo.decaro" updated="2017-06-01 08:29:03.0"/>
<Action id="24894" issue="17278" author="angelo.decaro" type="comment" created="2017-06-01 08:39:53.0" updateauthor="angelo.decaro" updated="2017-06-01 11:34:41.0"> <body><! CDATA Anyway, we need to assigning weights to the MSP's principal classifications. So, I would say the following:  This is the order of checks:  if MSPPrincipal.PrincipalClassification == MSPPrincipal_IDENTITY and the principal is satisfied then SignedData is marked as used. No ambiguity here.  if MSPPrincipal.PrincipalClassification == MSPPrincipal_ORGANIZATION_UNIT then we can have a conflict again if the identity is part of multiple organizations. We need then a better strategy.  If MSPPrincipal.PrincipalClassification == MSPPrincipal_ROLE and the principal is satisfied then the SignedData corresponding to an administrator (if exists) is marked as used, otherwise the one corresponding to the member is marked, if exists.  Still it might happen that an identity is member of multiple organizations. In this case one can have again a failure. Therefore we need a better strategy also here.   ~ales , ~elli-androulaki ,  ~jyellick , what's your take here?   ></body> </Action>
<Action id="24913" issue="17278" author="jimthematrix" type="comment" created="2017-06-01 12:12:11.0" updateauthor="jimthematrix" updated="2017-06-01 12:12:11.0"> <body><! CDATA  ~angelo.decaro  we were describing the server code's behavior above.  You said: _If MSPPrincipal.PrincipalClassification == MSPPrincipal_ROLE and the principal is satisfied then the SignedData corresponding to an administrator (if exists) is marked as used, otherwise the one corresponding to the member is marked, if exists._  It does sound the right logic (always check the ADMIN role on a per org basis before checking the MEMBER role). You are making a proposal for how it should be fixed right?  ></body> </Action>
<Action id="24919" issue="17278" author="angelo.decaro" type="comment" created="2017-06-01 12:30:50.0" updateauthor="angelo.decaro" updated="2017-06-01 12:40:19.0"> <body><! CDATA Actually, that is code touched by  ~jyellick  and  ~ales . They will probably take on it. Anyway, what I was trying to suggest is that there are multiple ways to satisfy the formula in such a way each signed data is used only once. The evaluation algorithm has to find one of those ways. I hope we are not falling in an NP-complete problem. Will see :)  Priorities on the MSP Principal classifications can definitely reduce the space of the solutions. The principal would be try to use the signed data that fits better the principal. A problem may arise if you have multiple signed data that fit better the same principal.  ></body> </Action>
<Action id="24922" issue="17278" author="angelo.decaro" type="comment" created="2017-06-01 12:51:35.0" updateauthor="angelo.decaro" updated="2017-06-01 12:51:35.0"> <body><! CDATA Let's recap again:  MSPPrincipal_IDENTITY is the easiest. if that principal is satisfied by a signed data. That signed data can be marked as used. No ambiguity here.  MSPPrincipal_ROLE needs to deal with members and admins with admins being also members. So what happens if you have AND(org1.admins, org2.admins) and you have a signed data corresponding to an identity that is administrator in both orgs and another signed data that is admin only in one of the org? You will fall in the same issue, no?  For MSPPrincipal_ORGANIZATION_UNIT, a similar example as before applies, no?          ></body> </Action>
<Action id="24936" issue="17278" author="jyellick" type="comment" created="2017-06-01 14:12:05.0" updateauthor="jyellick" updated="2017-06-01 14:12:05.0"> <body><! CDATA  ~ales  and I actually discussed this very potential for a long time during implementation.  Essentially, the first pass at the policy evaluation allowed a single identity to satisfy multiple principles.  This behavior was concluded to be a problem for rules which for instance, desired multiple admin principles from the same org.  I would be very reluctant to add another layer of policy evaluation logic around principle type.  This is for a number of reasons:  1. This seems to violate the whole idea of MSP abstraction.  Only the MSP itself should need to know how to interpret an MSP Principal. 2. It makes the rules of policy evaluation much more complex.  It's much easier to describe the behavior that "satisfied principles are marked used in order" vs. "satisfied principles are marked used first in order of IDENTITY, then in order of OU, then in order of admin ROLE, and then in order of member role". 3. This can already be expressed if, in authoring a policy, the principles are specified in the order of "IDENTITY, OU, admin ROLE, member role", so it seems like this would be reducing the power of the policy framework. 4. It does not solve all the problems, as you point out, if a signatory satisfies multiple roles of equal weights, we must still degrade to the in order processing.  The same goes for different OUs, where ordering is less obvious.  Essentially,  ~ales  and I had trouble coming up with an evaluation scheme which handled all of the corner cases, and if there are still unhandled corner cases, it seems like a mistake to add significant complexity to the evaluation rules.  Although I'm not certain that I like it, the SDK could sort the policies to the desired 'sane order', or include a function or flag to do so?  ></body> </Action>
<Action id="24941" issue="17278" author="angelo.decaro" type="comment" created="2017-06-01 14:26:00.0" updateauthor="angelo.decaro" updated="2017-06-01 15:04:33.0"> <body><! CDATA  ~jyellick  what if you have an evaluation algorithm that first checks which signed data satisfies each leaf of the formula tree. Once this is done, the algorithm searches for an assignment to the leaves such that each signed data is used only once. Would be this generic enough? The complexity of the second step is actually exponential in the number of leaf in the worst case but probably in practice this might be affordable.   ></body> </Action>
<Action id="24949" issue="17278" author="jyellick" type="comment" created="2017-06-01 14:44:04.0" updateauthor="jyellick" updated="2017-06-01 14:44:04.0"> <body><! CDATA  ~adc    > Once this is done, the algorithm searches for an assignment to the leaves such that each signed data is used only once. Would be this generic enough? Not sure about the complexity of the second step, though.  I agree that this would probably be generic enough, but, this sounds like an NP hard problem to me.  For the order of magnitude we're dealing with, this might be okay, but does seem like it opens a bit of an attack vector for either injecting complex policies, or large signature sets to significantly slow the system.  Do you have any thoughts  ~ales ?  ></body> </Action>
<Action id="24953" issue="17278" author="angelo.decaro" type="comment" body=" ~jyellick , I agree, the complexity of the second step is exponential in the worst case, but maybe in practice it is affordable putting additional constraints." created="2017-06-01 15:05:58.0" updateauthor="angelo.decaro" updated="2017-06-01 15:05:58.0"/>
<Action id="24988" issue="17278" author="ales" type="comment" body="I concur with  ~jyellick : the SDK should sort the policies to the order expected by the policy engine (which is known). It&apos;s also the smallest and safest change to be made at this stage imho." created="2017-06-01 18:47:10.0" updateauthor="ales" updated="2017-06-01 18:47:10.0"/>
<Action id="25014" issue="17278" author="kchristidis" type="comment" body="Same here: I vote for SDK + heuristics for 1.0, and we can revisit how this is handled in a later version." created="2017-06-01 21:18:50.0" updateauthor="kchristidis" updated="2017-06-01 21:18:50.0"/>
<Action id="25105" issue="17278" author="yacovm" type="comment" created="2017-06-02 13:40:30.0" updateauthor="yacovm" updated="2017-06-02 13:40:30.0"> <body><! CDATA {quote}I concur with Jason Yellick: the SDK should sort the policies to the order expected by the policy engine (which is known). It's also the smallest and safest change to be made at this stage imho.{quote} ditto.  ></body> </Action>
<Action id="25106" issue="17278" author="jimthematrix" type="comment" created="2017-06-02 13:45:43.0" updateauthor="jimthematrix" updated="2017-06-02 13:45:43.0"> <body><! CDATA so if we want to do anything at all for v1.0, it would be for the SDKs to: - inspect any "Signed-By" arrays in the policy specification, and find any group of elements belonging to the same org, if the size of the group is > 1, then ensure that they are orderer as IDENTITY > OU > Role.ADMIN > Role.MEMBER. if the size of the group = 1, do not do anything  Alternatively we could just document this edge case  ></body> </Action>
<Action id="25110" issue="17278" author="rickr" type="comment" body="V1 *Alternatively we could just document this edge case*   see how much of an issue it really presents itself and then act on it." created="2017-06-02 14:21:20.0" updateauthor="rickr" updated="2017-06-02 14:21:20.0"/>
<Action id="25112" issue="17278" author="rickr" type="comment" body="I thought the protobufs were the API — ?  Will the protobufs sort this ?" created="2017-06-02 14:24:47.0" updateauthor="rickr" updated="2017-06-02 14:26:18.0"/>
<Action id="25132" issue="17278" author="jimthematrix" type="comment" created="2017-06-02 15:42:26.0" updateauthor="jimthematrix" updated="2017-06-02 15:42:26.0"> <body><! CDATA Given the endorsement policy is an important part of the business contract, I don't think it's right for the SDK to modify it on the application's behalf. if the application passes in a less-than-optimal policy, we should either reject that (may be too harsh) or give them a warning so they can reference the documentation and fix it (by re-arranging the policy)  But again, I still think this is an edge case that doesn't warrant special handling in the SDK at this point. So I would recommend documenting it only.  ></body> </Action>
<Action id="25163" issue="17278" author="weeds" type="comment" body="per discussion with Jim Zhang, he feels this is really an edge case and should be documented,  so changing this to medium priority. Xixue if you do not agree- feel free to change back." created="2017-06-02 18:26:19.0" updateauthor="weeds" updated="2017-06-02 18:26:19.0"/>
<Action id="25174" issue="17278" author="binhn" type="comment" created="2017-06-02 18:58:35.0" updateauthor="binhn" updated="2017-06-02 18:58:35.0"> <body><! CDATA I am not sure that SDK sort would be the answer bc SDK is build on API, and we know some don't use the SDK but the API directly. Do we have the knowledge at the API level to do the sorting? How would the SDK know that an admin is the admin of multiple orgs to begin with? {quote}have an evaluation algorithm that first checks which signed data satisfies each leaf of the formula tree {quote} is generic but as Jason pointed out, and I agreed, an NP problem – solvable but hard.  So I would prefer at this point (unless I missed something about SDK sort) to punt it to the application and document with example code how this should be done.  ></body> </Action>
<Action id="25346" issue="17278" author="markparz" type="comment" body="I agree with with  ~binhn . For now we can doc, but we should investigate a real fix for post v1.0. I opened https://jira.hyperledger.org/browse/FAB-4368, a new bug for doc&apos;ing this issue, and will moved the target release out to v1.1." created="2017-06-05 14:37:19.0" updateauthor="markparz" updated="2017-06-05 14:42:27.0"/>
<Action id="25438" issue="17278" author="bmos299" type="comment" created="2017-06-05 20:57:19.0" updateauthor="bmos299" updated="2017-06-05 20:57:19.0"> <body><! CDATA I think it is ok to fix in v1.1.  However, I think the probability of hitting this issue is high.   ~xixuejia  hit it without even trying to hit it.   The messages during endorsement policy validation are the following, assuming DEBUG is not enabled.   I understand the adding documentation about the ordering of the peer will help.  But do we think this is enough for problem determination?  If not, when an error occurs, can we provide more information on what the VSCC received and what it expected?       31m2017-05-31 03:45:51.281 UTC  txvalidator  VSCCValidateTxForCC -> ERRO 7b7 0m VSCC check failed for transaction txid=fd365645470802eda053749e856e33fb25e02e623a472c1fead42b698a5c18b0, error VSCC error: policy evaluation failed, err Failed to authenticate policy  3  31m2017-05-31 03:45:51.281 UTC  txvalidator  Validate -> ERRO 7b9 0m VSCCValidateTx for transaction txId = fd365645470802eda053749e856e33fb25e02e623a472c1fead42b698a5c18b0 returned error VSCCValidateTxForCC failed for cc end2endnodesdk, error VSCC error: policy evaluation failed, err Failed to authenticate policy    33m2017-05-31 03:45:51.281 UTC  statevalidator  ValidateAndPrepareBatch -> WARN 7be 0m Block  3  Transaction index  0  marked as invalid by committer. Reason code  10         ></body> </Action>
<Action id="25549" issue="17278" author="markparz" type="comment" body="Moving to unassigned as this isn&apos;t going to be solely and SDK fix, if at all, and opened a new issue to track the doc work. as noted above." created="2017-06-06 16:33:04.0" updateauthor="markparz" updated="2017-06-06 16:33:04.0"/>
<Action id="33191" issue="17278" author="markparz" type="comment" body=" ~jimthematrix  I know we discussed this one a couple of months ago, not sure if this is an issue anymore." created="2017-10-25 19:13:04.0" updateauthor="markparz" updated="2017-10-25 19:13:04.0"/>
<Action id="35435" issue="17278" author="denyeart" type="comment" body=" ~jimthematrix  Sounds like you have some history on this one, what in your opinion are next steps?" created="2017-11-27 03:23:48.0" updateauthor="denyeart" updated="2017-11-27 03:23:48.0"/>
<Action id="40180" issue="17278" author="denyeart" type="comment" created="2018-02-14 17:34:27.0" updateauthor="denyeart" updated="2018-02-14 17:34:42.0"> <body><! CDATA  ~ales   ~harrisob@us.ibm.com   Could you (re)-assess this one and provide your thoughts on an SDK update vs a doc update?  ></body> </Action>
<Action id="40185" issue="17278" author="harrisob@us.ibm.com" type="comment" body="The SDK&apos;s are not the place to fix this issue and no doc is required at this time as the issue has been addressed in the trouble shooting section." created="2018-02-14 17:59:46.0" updateauthor="harrisob@us.ibm.com" updated="2018-02-14 17:59:46.0"/>
<Action id="40215" issue="17278" author="denyeart" type="comment" body="Thanks Bret. Could you provide a link to the troubleshooting section?  Both of the gerrit links I found were abandoned.  Just want to be sure it really made it into the docs somewhere." created="2018-02-14 20:53:18.0" updateauthor="denyeart" updated="2018-02-14 20:53:18.0"/>
<Action id="40216" issue="17278" author="harrisob@us.ibm.com" type="comment" created="2018-02-14 21:23:13.0" updateauthor="harrisob@us.ibm.com" updated="2018-02-14 21:23:13.0"> <body><! CDATA Well I see now that it was abandoned ... however there is a nice answer on Stackoverflow by Mark https://stackoverflow.com/questions/44807102/hyperledger-fabric-endorsement-policy-checker-failure  ></body> </Action>
<Action id="40226" issue="17278" author="rickr" type="comment" created="2018-02-14 23:04:48.0" updateauthor="rickr" updated="2018-02-14 23:04:48.0"> <body><! CDATA Is this still an issue? . Been told  In v1.0.x  Peers did the endorsing as member role only. In v1.1 they'll sign with role of Peer role only.   ~jyellick  ?  ></body> </Action>
<Action id="40233" issue="17278" author="angelo.decaro" type="comment" body=" ~rickr , in v1.1 that behaviour needs to be enabled explicitly by configuring the MSP in the proper way. " created="2018-02-15 08:40:42.0" updateauthor="angelo.decaro" updated="2018-02-15 08:40:42.0"/>
<Action id="40511" issue="17278" author="denyeart" type="comment" body="Ok, thanks for the stackoverflow link.  That is indeed where we are pointing people for troubleshooting, so let&apos;s go ahead and close this as Done." created="2018-02-21 15:34:39.0" updateauthor="denyeart" updated="2018-02-21 15:34:39.0"/>
