<Action id="21651" issue="15395" author="honglei" type="comment" created="2017-03-27 10:55:56.0" updateauthor="honglei" updated="2017-03-27 10:55:56.0"> <body><! CDATA The root cause is chaincode-instantiate txn has not been committed yet.  In e2e, query will retry, and wait for the instantiation, but invoke will not. I think it is expected?  ></body> </Action>
<Action id="21668" issue="15395" author="scottz" type="comment" created="2017-03-27 22:55:05.0" updateauthor="scottz" updated="2017-03-27 22:55:05.0"> <body><! CDATA Even if development team members all agree that this is expected to fail based on the current design, then we still have a problem. If this and other early transactions fail due to the instantiation not being completed, then it should say that. This error message seems to be intended for a real problem: any generic situation where the internal data objects are not present when they should be present. However, this is a special case for the first transaction (one or several). It is explainable.   Moreover, I would hope the transaction should not fail but rather should just take a long time (and it is up to the application to avoid time out for say 20 secs to give it time to succeed). If it is expected to fail, then there is a bigger problem because that implies the first transaction(s) will always fail, which is unacceptable. Minimally, we should provide a better error message - so the user can understand and retry. In addition, we should consider propagating the deployment to all peers once one peer is instantiated - so the network is ready when users start to send in transactions.  ></body> </Action>
<Action id="22135" issue="15395" author="denyeart" type="comment" created="2017-04-11 20:24:46.0" updateauthor="denyeart" updated="2017-04-11 20:24:46.0"> <body><! CDATA Since the problem happens when BatchTimeout is increased, my first guess is that the chaincode instantiation has not been committed by the time you do invoke/query.  If you still see this issue and it is in fact not due to a timing issue, please re-open.  ></body> </Action>
<Action id="22196" issue="15395" author="scottz" type="comment" body="Sorry, but closing issues requires verification, not a theory. The problem was not simply due to a large batchtimeout. And please read my comments, written after the description, which describe other work that must be done regardless." created="2017-04-12 14:34:19.0" updateauthor="scottz" updated="2017-04-12 14:34:19.0"/>
<Action id="23021" issue="15395" author="binhn" type="comment" created="2017-04-26 13:30:05.0" updateauthor="binhn" updated="2017-04-26 13:30:05.0"> <body><! CDATA  ~scottz   It looks like we should change the error message to be clearer, which we can take up during serviceability work. I think it is the same as HTTP 404   ></body> </Action>
<Action id="25111" issue="15395" author="scottz" type="comment" created="2017-06-02 14:22:11.0" updateauthor="scottz" updated="2017-06-02 14:22:11.0"> <body><! CDATA Part 1:  I agree this most likely falls under category of serviceability. I don't know, but it may require another check or two in the code to confirm the "failed to instantiate" theory, to differentiate that situation from other error conditions leading to this error, and to print appropriate message.  Part 2: I don't see any responses to my suggestion to instantiate on all peers that have already deployed the chaincode, at the same time when the instantiate is done on the first peer. By not doing that, the first (several) queries/invokes to a peer are significantly delayed and could easily fail due to the delay of the instantiation on each peer.  ></body> </Action>
<Action id="25159" issue="15395" author="binhn" type="comment" created="2017-06-02 18:13:02.0" updateauthor="binhn" updated="2017-06-02 18:13:02.0"> <body><! CDATA  ~scottz   Ok I think we're settled on part 1. I can try to do that with better message when we can't local CDS, meaning the chaincode has not been instantiated.  re part 2:   {quote}my suggestion to instantiate on all peers that have already deployed the chaincode, at the same time {quote} This is a distributed system, so there's no concept of "the same time". Each peer must operate independently, and only through consensus, they agree on a value, again, not at the same time, but the same sequence.  ></body> </Action>
<Action id="25195" issue="15395" author="binhn" type="comment" body="In review https://gerrit.hyperledger.org/r/#/c/10093/" created="2017-06-02 21:15:09.0" updateauthor="binhn" updated="2017-06-02 21:15:09.0"/>
<Action id="25200" issue="15395" author="scottz" type="comment" created="2017-06-03 01:47:51.0" updateauthor="scottz" updated="2017-06-03 01:47:51.0"> <body><! CDATA OK.  We can discuss #2 separately, to see if there is something we can do to prevent the probably failiure of the first transactions on each peer that joins the party. Let me reword the following way, to enable that discussion:  The phrase "at the same time" would make sense if you consider "the moment" when it is first instantiated on any peer with the assumptions that multiple peers have installed the chaincode and have joined the channel. If I am not mistaken, every other peer in the channel is notified, but does not actually start the chaincode running until it is invoked or queried on each peer. (If not, then they could be. And won't they need it to be running to process received delivered transactions anyways?) At that moment, those other peers could start the chaincode running.  A more general way I might express that concept, would be to say whenever any peer reaches the state where it has both joined a channel containing the chaincode and that chaincode is installed on that peer, (and optionally also requiring at least one peer on the channel to instantiate it, which could trigger notification to other peers). Then, as you suggest, yes they would each instantiate/start the chaincode running at different times - but it could be consistently said that would mean each of them would do it as soon as it becomes ready and able and willing to run it (instead of waiting until it is needed - which will undoubtedly result in failures the first time a transaction arrives that requests it).  ></body> </Action>
