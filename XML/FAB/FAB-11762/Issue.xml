<Issue id="33264" key="FAB-11762" number="11762" project="10002" reporter="pandrejko" creator="pandrejko" type="10100" summary="Better doc around channel config" priority="3" status="10100" created="2018-08-27 19:42:36.0" updated="2020-01-06 22:03:28.0" votes="0" watches="2" workflowId="44534"> <description><! CDATA Q: How does authentication and authorization works for the orderer? e.g. what determines who can connect to the orderer rpc and call deliver/broadcast? A: ==> If mutual TLS is enabled, the orderer takes the union of all TLS CAs from all channels for the TLS layer. If mutual TLS is not enabled, then there is no client auth to be had. Orderers never communicate directly with each other (as of v1.2) but instead communicate through Kafka which has its own TLS authentication mechanisms.   Q: How does the orderer know who can create channels? ==>A: The orderer system channel has one or more consortium definitions. The consortium definition defines the orgs in the consortium (including their MSPs) and a channel creation policy (by default, any admin of the orgs in the consortium). This policy is evaluated at channel creation time (selected by the consortium name specified in the channel creation) Q: What about call broadcast/deliver on specific channels? A: ==> The channel configuration defines policies, the /Channel/Readers, and /Channel/Writers policies (which authenticate Deliver and Broadcast respectively). By default, these correspond to any member of any org in the channel.   Q: What has to be true for peers to accept blocks delivered and signed by the orderer? ==>A: The orderer group in `configtx.yaml` defines a `BlockValidation` policy. Peers check that this policy is satisfied before accepting a block. By default, any member of the ordering org may sign blocks.  `configtx.yaml` is only used to generate bootstrapping elements (and some limited updates). Therefore, each channel's config transaction determines the block validation policy   In the channel configuration, it would canonically be called the `/Channel/Orderer/BlockValidation` policy. When a channel is created, it inherits this policy from the orderer system channel, and usually this policy is uniform across all channels (though it could be managed independently) Config is hiercharcial, and at the top level split into orderer parameters and application parameters The orderer parameters include things like the batch size, and the block validation parameters. The application parameters include things like the application orgs, acls, and application level policies. The actual channel creation process first creates a 'template configuration' based on the orderer system channel. It copies the orderer configuration as is, and creates a template for the application portion based on the consortium definition. Then, it applies the 'channel creation transaction' as an update. This update must follow the modification rules dictated by the template configuration. To modify the 'application' parameters, requires satisfying the channel creation policy. To modify the orderer parameters, like the block validation policy, requires satisfying the /Channel/Orderer/Admins policy (by default). So, you may safely allow application admins without worrying about them modifying parameters in ordering they should not have access to. If you wanted, you could certainly not allow consortium members to create channels for themselves, and instead require an orderer admin to do so. If that were the case, then you can modify the channel creation policy to require the approval of an orderer member, instead of an application admin. Although you did not ask, I would also mention that the individaul orgs also have their own modification rules. So, for instance, when creating a channel, the org's MSP cannot be corrupted by the creator. The idea is, that if an admin sees a genesis block signed by the orderer, it has assurance that all of the org definitions are correct according to the consortium definition (as attested by the orderer)   '/Channel/Orderer/Admins' refer to that item in the config tree. The config tree is organized into three types. Groups, Policies, and Values. Each group may have sub-groups, values, and policies. You may think of 'groups' as nodes in a tree, where 'values' and 'policies' are leafs. So, for a policy path `/Channel/Orderer/BlockValidation`, we really mean `/<group>/<group>/<policy>`. The root group is the `Channel` group. It has a sub-group named `Orderer`, which has a policy named `BlockValidation`. Using a tool like `configtxlator` you can see the structure. The `jq` type path would be `.channel_group.groups.Orderer.policies.BlockValidation` Some of this is documented  https://hyperledger-fabric.readthedocs.io/en/latest/config_update.html   https://hyperledger-fabric.readthedocs.io/en/latest/policies.html   https://hyperledger-fabric.readthedocs.io/en/latest/configtx.html    How does the channel msp differ from the local msp (and the differences between client/peer/orderer msps)?  ></description> </Issue>
