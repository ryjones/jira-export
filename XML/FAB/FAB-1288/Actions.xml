<Action id="20049" issue="13623" author="c0rwin" type="comment" body="https://gerrit.hyperledger.org/r/#/c/3175/" created="2016-12-11 13:32:31.0" updateauthor="c0rwin" updated="2016-12-11 13:32:31.0"/>
<Action id="20063" issue="13623" author="mastersingh24" type="comment" body=" ~C0rWin   ~muralisr  Can we add some details / diagrams on the overall flow of how things are supposed to work in terms of connecting to the orderer, posting to gossip, committing blocks, etc?  Without some type of flow diagram, it is really hard to review any of these changes.  If there is an external document, that&apos;s fine but please add a link to this requires and/or create a higher level epic which brings all of these together" created="2016-12-12 11:19:12.0" updateauthor="mastersingh24" updated="2016-12-12 11:19:12.0"/>
<Action id="20064" issue="13623" author="c0rwin" type="comment" created="2016-12-12 12:23:42.0" updateauthor="c0rwin" updated="2016-12-12 12:25:09.0"> <body><! CDATA  ~mastersingh24  There is no new functionality added, the whole design and component interactions remained the same. All intent of current item and attached commit is to expose current gossip implementation in form of single static instance e.g. singleton, such that CSCC will be easily exposed to it. Moreover it provides decoupling facade for future work described here: FAB-1356.  For example now writting CSCC join function might look like:  {code} func joinChain(blockBytes   byte) (  byte, error) { if blockBytes == nil { return nil, fmt.Errorf("Genesis block must not be nil.") }  block, err := getBlockFromBlockBytes(blockBytes) if err != nil { return nil, fmt.Errorf("Failed to reconstruct the genesis block, %s", err) }  // We cache the genesis block here so that we can do the work until // we get the config transaction back from the orderer, at which time, we // follow the normal commit flow via updateConfigBlock call. peer.CacheConfigBlock(block)  committer := // Initialize committer here  service.GetGossipService().JoinChannel(committer, block)  return nil, nil } {code}  ></body> </Action>
<Action id="20065" issue="13623" author="mastersingh24" type="comment" body="fair point - perhaps I should have asked for this on an earlier change set  / JIRA entry.    But I still think it would be helpful to have a flow diagram somewhere that we could reference to understand the change where gossip actually handles committing of blocks" created="2016-12-12 12:28:26.0" updateauthor="mastersingh24" updated="2016-12-12 12:28:26.0"/>
<Action id="20067" issue="13623" author="c0rwin" type="comment" body="Agree will work to sketch something, there is diagram in FAB-1038 which might explain the interaction with gossip." created="2016-12-12 12:43:43.0" updateauthor="c0rwin" updated="2016-12-12 12:59:01.0"/>
