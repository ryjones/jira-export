<Action id="24861" issue="17191" author="kchristidis" type="comment" body="ETA for this: Friday 6/2" created="2017-05-31 21:22:06.0" updateauthor="kchristidis" updated="2017-05-31 21:22:06.0"/>
<Action id="25025" issue="17191" author="christopherferris" type="comment" body=" ~kchristidis  does this need review-needed label? Maybe we should get some others to weigh in?" created="2017-06-01 22:24:42.0" updateauthor="christopherferris" updated="2017-06-01 22:24:42.0"/>
<Action id="25031" issue="17191" author="kchristidis" type="comment" body="Want to be able to point the folks to the code when I&apos;m making my case for the change, otherwise it&apos;ll be too theoretical. Gimme a day and I&apos;ll try to have the changeset up." created="2017-06-01 22:38:08.0" updateauthor="kchristidis" updated="2017-06-01 22:38:08.0"/>
<Action id="25064" issue="17191" author="kchristidis" type="comment" created="2017-06-02 04:20:53.0" updateauthor="kchristidis" updated="2017-06-03 00:01:14.0"> <body><! CDATA Done. UT coverage up to 96.6%. (Update: 97.2%)  Want to run some BDD tests on it tomorrow before posting.  ></body> </Action>
<Action id="25197" issue="17191" author="kchristidis" type="comment" created="2017-06-02 23:54:53.0" updateauthor="kchristidis" updated="2017-06-03 00:00:17.0"> <body><! CDATA Changeset submitted in:  https://gerrit.hyperledger.org/r/#/c/10039/    I wrote a detailed commit message in the changeset which I'd like you to read before weighing in with the final +/- 1. This is indeed too invasive of a refactoring, though FWIW I'd suggest ignoring the aggregate line counts at the end of the changeset: `chain_test.go` alone is 1000 lines of tests. If you fetch the package locally, you should be able to review the non-test path in about an hour or so, assuming you have some base-level knowledge of the `orderer` package.  On top of what I wrote in the commit message, I'll state the obvious: merging this changeset now carries risk, I know. There are pros and cons no matter which way we go: * We merge this changeset and we're able to write unit tests for, say, FAB-4136 much easier, but there's always a risk of breaking the system. Unit tests are good, and we do have a proper integration test now but that alone is not enough. Cue:  https://twitter.com/thepracticaldev/status/687672086152753152   * We decide to defer and unit testing for our remaining bug fixes (and consequently bug fixing) become harder.  I have -2'd my changeset on purpose to prevent merging until we reach consensus on it.  ></body> </Action>
<Action id="25364" issue="17191" author="binhn" type="comment" created="2017-06-05 15:12:46.0" updateauthor="binhn" updated="2017-06-05 15:12:46.0"> <body><! CDATA +1 a quick scan of the cr, risky but I considered the consequences of not merging this    {quote}Cue:  https://twitter.com/thepracticaldev/status/687672086152753152   {quote} What's the problem? Swing out, flip one, or install one higher than the other :)     ></body> </Action>
<Action id="25411" issue="17191" author="jimthematrix" type="comment" created="2017-06-05 18:31:01.0" updateauthor="jimthematrix" updated="2017-06-05 18:31:01.0"> <body><! CDATA  ~kchristidis  I tried to get a sense of the extent of the refactoring by finding the new methods in the old code, haven't done a whole lot but the first few I went through (chain.go -> newChain(), chain.go -> start(), etc.) did have significant implementation changes. I think only the few developers having significant knowledge of the ordering service may be able to do a proper risk assessment.  So here is the big question, both to you and  ~jyellick , how confident are you that the refactoring is solid, and that the added unit tests and integration tests are able to exercise enough of the new implementation to make us feel comfortable it'll hold?  Also, I assume none of these changes are affecting APIs and can be done in an non-intrusive way right after 1.0?   ></body> </Action>
<Action id="25412" issue="17191" author="muralisr" type="comment" created="2017-06-05 18:37:08.0" updateauthor="muralisr" updated="2017-06-05 18:37:08.0"> <body><! CDATA  ~kchristidis   ~binhn  I must be missing something here. If it is just refactoring and cleanup (plus UT of course)  without any other benefits (such as bug fixes) why would we want to do it close to 1.0 ? I guess the answer is it will help with remaining bug fixes per previous comment :  {code:java} We decide to defer and unit testing for our remaining bug fixes (and consequently bug fixing) become harder. {code}  The risk of NOT getting this fix in would make it that much harder to fix bugs ? Or that much harder to write UT for the bugs that will be fixed ?  If its the later then perhaps we can let the UT slide a bit instead of taking a risk with code change. ... (I know, I know... just askin' :-) ).   ></body> </Action>
<Action id="25414" issue="17191" author="kchristidis" type="comment" created="2017-06-05 18:48:49.0" updateauthor="kchristidis" updated="2017-06-05 18:48:49.0"> <body><! CDATA  ~jimthematrix : Thanks for taking a look.  # RE: Significant changes — The old `newChain()` gets the last cut block number, creates a producer and returns the `chainImpl` object. The new `newChain()` does the exact same set of things with some minor shifting of bits and pieces around. Ditto for `Start()` - both the old and the new implementations post a connect message, bring up a consumer, and the start the processLoop. I do get your point about folks familiar with the code base being able to do a proper risk assessment though. # RE: Big question — As I wrote above: "Unit tests are good – and this changeset gives excellent test coverage –  and we do have a proper integration test now in Jeff's bootstrap.feature, but that integration test alone is not enough." I feel confident enough to put it out there, but there's always going to be risk. # RE: Affecting APIs – This change does not affect user-facing APIs. It does make our lives easier when it comes to fixing existing bugs and writing unit tests for them though.  ></body> </Action>
<Action id="25415" issue="17191" author="kchristidis" type="comment" body=" ~muralisr : You&apos;re not missing anything. If we don&apos;t let this CR in, we&apos;ll have to rely on some mix of ad-hoc tests that we won&apos;t be able to check in. (With this CR in on the other hand, I can easily write a unit test that captures the problem.)" created="2017-06-05 18:53:01.0" updateauthor="kchristidis" updated="2017-06-05 18:53:01.0"/>
<Action id="25417" issue="17191" author="jimthematrix" type="comment" body="thanks  ~kchristidis  for the explanation. I feel more comfortable now. Still would like to hear from  ~jyellick  for his &quot;objective&quot;, &quot;unattached&quot; opinion ;-) given the extent of the changes. He said he&apos;ll respond soon." created="2017-06-05 18:59:52.0" updateauthor="jimthematrix" updated="2017-06-05 18:59:52.0"/>
<Action id="25418" issue="17191" author="jyellick" type="comment" created="2017-06-05 19:21:18.0" updateauthor="jyellick" updated="2017-06-05 19:21:18.0"> <body><! CDATA  ~jimthematrix  So, my take on this is I think nothing new.  The new code is simpler, the new code is more testable and covered with better tests, and it passes the integration testing that we have.  Of course there are risks associated with such a big delta, but, I think it's the right way forward, and with all of the work that has gone into covering this change well with test, I think that risk is acceptable.  ></body> </Action>
<Action id="25421" issue="17191" author="jimthematrix" type="comment" body="i think this is a case where we have to defer to the experts on their judgement, and I do trust  ~kchristidis  and  ~jyellick  on their assessment. I&apos;ve certainly done this kind of maneuver before (in other projects) that pays off in the end. so just voted +1." created="2017-06-05 19:29:17.0" updateauthor="jimthematrix" updated="2017-06-05 19:29:17.0"/>
<Action id="25423" issue="17191" author="muralisr" type="comment" created="2017-06-05 19:43:25.0" updateauthor="muralisr" updated="2017-06-05 19:43:25.0"> <body><! CDATA Agree with  ~jimthematrix  above.  Also, the number files and amount of code has shrunk. Even if there are issues, hopefully we can triage quickly.   Given everything (1) simplification (2) benefit to UT and debugging (3) more UT coverage (4) ease of writing more UTs for the remaining issues, does sound like a lot of benefits could be thrown out if we don't use this.  So voting +1.  ></body> </Action>
<Action id="25433" issue="17191" author="christopherferris" type="comment" body="This has met the threshold to be merged The CR can be merged when ready." created="2017-06-05 20:49:47.0" updateauthor="christopherferris" updated="2017-06-05 20:49:47.0"/>
