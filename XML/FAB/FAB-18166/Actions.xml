<Action id="69971" issue="45831" author="sykesm" type="comment" created="2020-08-17 18:50:43.0" updateauthor="sykesm" updated="2020-08-17 18:50:43.0"> <body><! CDATA I'm unable to recreate with v2 in module mode (the current recommended configuration).   ^FAB-18166.tgz  contains a trivial chaincode implementation as a module that uses the 1.4.8 shim. {noformat} module shim-goo  go 1.14  require ( 	github.com/Knetic/govaluate v3.0.0+incompatible // indirect 	github.com/Shopify/sarama v1.27.0 // indirect 	github.com/fsouza/go-dockerclient v1.6.5 // indirect 	github.com/golang/protobuf v1.4.2 // indirect 	github.com/grpc-ecosystem/go-grpc-middleware v1.2.1 // indirect 	github.com/hashicorp/go-version v1.2.1 // indirect 	github.com/hyperledger/fabric v1.4.8 	github.com/hyperledger/fabric-amcl v0.0.0-20200424173818-327c9e2cf77a // indirect 	github.com/miekg/pkcs11 v1.0.3 // indirect 	github.com/op/go-logging v0.0.0-20160315200505-970db520ece7 // indirect 	github.com/pkg/errors v0.9.1 // indirect 	github.com/spf13/viper v1.7.1 // indirect 	github.com/sykesm/zap-logfmt v0.0.3 // indirect 	go.uber.org/zap v1.15.0 // indirect 	golang.org/x/crypto v0.0.0-20200728195943-123391ffb6de // indirect 	golang.org/x/net v0.0.0-20200813134508-3edf25e44fcc // indirect 	google.golang.org/grpc v1.31.0 // indirect 	gopkg.in/yaml.v2 v2.3.0 // indirect ) {noformat} The script vendors the code and packages it. Following the packaging, it compares the contents of the package with the files in the source tree. No differences are highlighted. {noformat} # vendor dependencies pushd shim-goo go mod tidy go mod vendor popd  # package for legacy FABRIC_LOGGING_SPEC=debug ~/workspace/fabric/src/github.com/hyperledger/fabric/build/bin/peer chaincode package -n shim-goo -v v1 -p shim-goo shim-goo@v1.cds  # dump the output go run github.com/btl5037/cdstool -input shim-goo@v1.cds -output /dev/stdout | tail -n +2 | tar ztvf -  # compare the file set after appending trailing slash to directories and # rewriting shim-goo to src diff -u \ <(go run github.com/btl5037/cdstool -input shim-goo@v1.cds -output /dev/stdout | tail -n +2 | tar ztf - | sort) \ <((find shim-goo -type d | sed -e 's,$,/,g' && find shim-goo -type f) | sort | sed -e 's,shim-goo,src,g') {noformat} The (trimmed) output follows: {noformat} $ ./package-diff.sh + export FABRIC_TREE=/Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric + FABRIC_TREE=/Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric + export SAMPLE_CFG_PATH=/Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/sampleconfig + SAMPLE_CFG_PATH=/Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/sampleconfig + export FABRIC_CFG_PATH=/Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/sampleconfig + FABRIC_CFG_PATH=/Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/sampleconfig + pushd shim-goo ~/tmp/FAB-18166/shim-goo ~/tmp/FAB-18166 + go mod tidy + go mod vendor + popd ~/tmp/FAB-18166 + FABRIC_LOGGING_SPEC=debug + /Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/build/bin/peer chaincode package -n shim-goo -v v1 -p shim-goo shim-goo@v1.cds ... 2020-08-17 13:43:46.033 EDT  chaincodeCmd  packageCC -> DEBU 6cb Packaged chaincode into deployment spec of size 3363824, output file shim-goo@v1.cds + go run github.com/btl5037/cdstool -input shim-goo@v1.cds -output /dev/stdout + tail -n +2 + tar ztvf - drwxr-xr-x 500/500           0 1969-12-31 19:00 src/ ... + diff -u /dev/fd/63 /dev/fd/62 ++ go run github.com/btl5037/cdstool -input shim-goo@v1.cds -output /dev/stdout ++ tail -n +2 ++ sort ++ tar ztf - ++ find shim-goo -type d ++ sed -e s,shim-goo,src,g ++ sort ++ sed -e 's,$,/,g' ++ find shim-goo -type f {noformat} If you attempt to use the 1.4 tooling to create a package, then many files are missing because the tool is packaging for the native operating system and architecture instead of the target when in GOPATH mode (the only mode the 1.4 tooling supports).  If you prepend your package command with {{GOOS=linux GOARCH=amd64}} it will pick up the dependencies required for linux/amd64. Alternatively, you can package on the same platform you deploy on. Ultimately, I'd recommend that you simply use the v2 tooling instead.  ></body> </Action>
