<Issue id="32854" key="FAB-11602" number="11602" project="10002" reporter="mne" creator="mne" type="10000" summary="Chaincode access control with MSP support" priority="3" resolution="10001" status="6" created="2018-08-15 15:48:18.0" updated="2020-01-22 22:33:39.0" resolutiondate="2020-01-22 22:33:39.0" votes="1" watches="6" workflowId="44095"> <description><! CDATA The chaincode should be able to reason in terms of who the creator of a proposal is and what their roles are. This functionality enables implementation of chaincode-level access control mechanisms: the chaincode can check that the right creator performs the right operation. If the endorsement policy is properly set, honest peers will have to perform this check. Each way of fulfilling the endorsement policy must include at least 1 honest peer.  An example use case: as client ‘bob’ I’m storing an asset at ‘bank1’. I set ‘bob’ to the "owner" of the asset and set ‘bank1’ as the endorsement policy (it is the most trusted org with peers). Now only client ‘bob’ can initiate transactions that update the asset (e.g. transfer it away from myself), and only ‘bank1’ can endorse such transactions.  The corresponding access control check needs to be able to store this "ownership" information associated with the asset and evaluate it with respect to the proposal creator.  Relationship to CID: Currently the chaincode can parse the creator identity by using the cid (client identity) library. What is needed, however, is the ability to reason about this and other identities through the channel's MSP - the cid library is limited to x509 identities and duplicates code that is already present in x509 peer MSP code. Also, the cid library is just a parser, it can not evaluate, e.g. channel membership. This means its usefulness is mostly limited to identities from a trusted source, such as the transaction creator, but not arbitrary identities supplied via parameters or stored on the ledger, as those have not passed the channel MSP.     ></description> </Issue>
