<Action id="30258" issue="20422" author="yacovm" type="comment" created="2017-08-28 14:40:41.0" updateauthor="yacovm" updated="2017-08-28 14:40:41.0"> <body><! CDATA But don't we have anchor peers just for that?  If the peer is in some channel - there are anchor peers in that channel so it can connect to them, no?  ></body> </Action>
<Action id="30282" issue="20422" author="scottz" type="comment" created="2017-08-28 22:23:41.0" updateauthor="scottz" updated="2017-08-28 22:23:41.0"> <body><! CDATA That is a good idea. But it requires organizations willing to expose their addresses and create anchor peers. I am not sure how networks will progress, and whether that is likely to happen. So... are you saying the official stance (for now) is that the persistence idea is a non-starter? How about the API idea for changing the BOOTSTRAP peer list?  Nevertheless, let's assume we set up anchor peers per your recommendation. Then can you tell us what should we expect? Will we see an anchor peer sharing blocks with the restarted peer from the other organization? Or will the anchor peer share the IP addresses of all peers it knows, including presumably some in the restarted peer's organization, thereby allowing the restarted peer to find and contact other peers within its own organization and elect leader etc. ?  ></body> </Action>
<Action id="30287" issue="20422" author="yacovm" type="comment" created="2017-08-29 07:21:26.0" updateauthor="yacovm" updated="2017-08-29 07:21:26.0"> <body><! CDATA I'm still missing something - in your scenario, when you stop peer0 at step (4) - you still have peer1 and peer2 running, right? Then you stop and start peer1.  Can't you make the bootstrap peer of peer1 be peer2? That'll solve the problem, no?  {quote}you saying the official stance (for now) is that the persistence idea is a non-starter? {quote} No, I am not saying that, but I'm saying we need to think carefully about this,and see if there is a real demand (from customers, users) in doing so, and whether we should include peers from our org only or not, for how much time, etc. etc.  Would like  ~C0rWin  and  ~mastersingh24  to chime in here.   So, regarding the 2nd paragraph of yours - the anchor peer would essentially act as a bootstrap peer for the organization.  ></body> </Action>
<Action id="30312" issue="20422" author="scottz" type="comment" created="2017-08-29 13:27:18.0" updateauthor="scottz" updated="2017-08-29 13:27:18.0"> <body><! CDATA Goal: I am trying to prevent the possibility that there could be multiple peers running in an org that cannot all gossip with each other.  There will be times when people do not know all the peers when starting the network, such as when peer2 is added months later. And we would not know which peers will be stopped or even deleted at some point in future. And when we add peer2, there is no way to change the bootstrap peer (list) of existing peers peer0 and peer1. Hence the idea for an API to be provided for that purpose. That actually might be more desirable than using anchor peers, because we won't know which if any of them would be available when we need them. The most thorough solution would be to provide the ability to make all peers in a network be bootstrap peers of all other peers, whenever a peer is added. That way, each peer has the knowledge it needs, instead of depending on other specific peers. That said, I realize that requires the system operator to manage the lists of bootstrap peers. Which leads me back to the persistence idea; once a peer talks to another peer, keep a list itself; it is an internal extension of the bootstrap peer list to a "known peer list".  ></body> </Action>
<Action id="30339" issue="20422" author="yacovm" type="comment" created="2017-08-29 21:29:08.0" updateauthor="yacovm" updated="2017-08-29 21:29:08.0"> <body><! CDATA Bootstrap peers are used only for contacting peers from the same organization.  {quote}There will be times when people do not know all the peers when starting the network{quote} How do you know that?  {quote} And we would not know which peers will be stopped or even deleted at some point in future.{quote} Fabric is a solution for a permissioned environment, and in such an environment, you have a certificate authority and your servers in your own organization don't wander around, and you know which servers run where. I can argue the opposite thing - if a server migrated to a different ip address, the organization would know that, but the persisted bootstrap entry won't.  I'd expect a network operator to update the bootstrap set when configuration changes are made.  Another thing we can argue, is that an organization that has a DNS server - can just produce a TLS certificate for that subject alternative name for a specific peer, and just update the DNS record each time the peer changes its IP address, and have such for all peers and have all peers be in the bootstrap set or something.  {quote} Hence the idea for an API to be provided for that purpose. That actually might be more desirable than using anchor peers, because we won't know which if any of them would be available when we need them{quote} Anchor peers were meant for organizations to notify other organizations about their peers, via config updates.  Having an API for a peer to locally change the anchor peer's address completely contradicts the anchor peer idea.  I'm not strongly against a local storage for the peer for persisting peers it knew before it crashed, but there are many questions one needs to ask: * How long should each entry be kept? * Should it be restricted to internal peers from your own org, or peers from other orgs too?  ></body> </Action>
<Action id="30382" issue="20422" author="scottz" type="comment" created="2017-08-30 17:02:49.0" updateauthor="scottz" updated="2017-08-30 17:02:49.0"> <body><! CDATA In response to your questions:  `How do you know that?` Providers (e.g. such as Bluemix, providing IBM Blockchain services) can spin up a network for a customer, who can add peers or invite other orgs of peers to join their network. I know that because in the real world, things change. And instability and power outages must be expected and planned for.  `I'd expect a network operator to update the bootstrap set when configuration changes are made.` Sure; they could provide an updated bootstrap set when creating a NEW peer. But today, there is no way to CHANGE the bootstrap set of the peers that are already running. That is the point of this bug. We have suggested two main alternatives for providing this capability: a means for an operator to update the bootstrap list of every peer (new or previously running), and a way for the peers to essentially automatically update their own bootstrap set by persisting a list of "known peers in org". (Note either method is based on the assumption that the bootstrap/persistence list would be useful after a peer is stopped and subsequently restarted - which we realize may be an extension of th intent of the bootstrap list.)  `Another thing we can argue,...` Your discussion in this whole paragraph about how a customer might set things up with DNS could be very useful - although it is a different concern than that which we had raised.  `Anchor peers...` OK; this is just a misunderstanding; we are not asking for this at all. The API requested was for assigning an updated list of bootstrap peers to existing peers in an org.  As for your last 2 bullet point questions about the persisted list of "peers known in my org":  `How long should each entry be kept?` We consider this as an extended form of bootstrap list. As discussed previously, we see this as a replacement or supplemental alternative to providing the API for modifying bootstrap list; we agree there are pros and cons that should be weighed. Don't know how long the identity and address of a neighbor peer should be persisted after losing contact with it; we could brainstorm about it, maybe even keeping it forever - but allowing for deletion when it is proactively de-configured/removed. This might work in a wholly managed permissioned network.  `Should it be restricted to internal peers from your own org, or peers from other orgs too?` It seems it would be a good decision to restrict this to the internal org, just like the bootstrap list.  Let's remember that all of us in this fabric community are trying to provide a flexible fabric to increase its acceptance - and should expect customers to plug in their own chaincodes and policies, and configure it and use it in many ways, some of which are certainly unforeseen today. Many of our requests are attempts to make it easier for service providers to manage their fabric network implementations.  ></body> </Action>
<Action id="30554" issue="20422" author="c0rwin" type="comment" created="2017-09-06 11:02:50.0" updateauthor="c0rwin" updated="2017-09-06 11:02:50.0"> <body><! CDATA I do not think that such API is required, since BOOTSTRAP peers needed only upon peer startup and update is relevant only if peer has been restarted and the old BOOTSTRAP peer no longer available. In case of the restart configuration parameter might be easily updated and peer will reconnect to existing network entities. I do not see any value in API which will allow dynamic configuration of bootstrap peers.  > But today, there is no way to CHANGE the bootstrap set of the peers that are already running. That is the point of this bug.  Just to make it clear, there is no reason to change bootstrap set of the peers which already running. And since this is not a bug but rather a feature request we can issue a review needed so other maintainers will be able to to weight in. At any case I'm lowering the priority of this to minor, since this is definitely should not be targeted for 1.1.  ></body> </Action>
<Action id="30563" issue="20422" author="scottz" type="comment" created="2017-09-06 15:09:54.0" updateauthor="scottz" updated="2017-09-06 15:09:54.0"> <body><! CDATA I understand the BOOTSTRAP peers are useful only at startup, so I agree the feature would need to be implemented in such a way as to be useful at other times too. The current implementation of bootstrap is INSUFFICIENT, and that is why this is a BUG. We can (1) extend the code logic using the bootstrap list so as to be useful at other times (along with providing an API to change the bootstrap peer list), or, we could (2) implement a persistence list that is generated automatically and would be leveraged at other times. For example, whenever a peer needs to retrieve more blocks, it could look for neighbor peers in bootstrap list and/or in this new persistence list before the last choice of connecting to the orderer directly.  Please correct me if I am wrong. It seems you are suggesting that there is a workaround for the situation when a bootstrap peer is stopped or deleted: you are suggesting we could stop each of the other peers in the organization, and start them again with new config parameters. That might work in a lab, but is not acceptable in a live production environment. We cannot expect service providers to accept such a workaround. Theoretically it might work - although it would require outage of every peer, and it would require each peer to rebuild their entire ledger, and of course the peer would lag for a long time while it catches up. That is much more severe even than requiring an upgrade. Since these behaviors are not acceptable, we requested the API and a modified behavior  (to use the new information at times other than startup) as a possible solution.     ></body> </Action>
<Action id="30582" issue="20422" author="c0rwin" type="comment" created="2017-09-06 20:53:48.0" updateauthor="c0rwin" updated="2017-09-06 20:53:48.0"> <body><! CDATA  ~scottz  Bootstrap peer useful at *startup* only, it's pointless to make any type of dynamic updates. Once peers is started it has established membership lost of any of bootstrap peer will not have any effect up until peer will be restarted for some reason.  > Please correct me if I am wrong. It seems you are suggesting that there is a workaround  My suggestion is not a workaround but indented way to go, let me repeat it again if bootstrap peer was crashed or replaced or something else happened it won't have any effect on already running peers, unless you will need to restart them. However if you going to restart a peer for some reason then you can also update list of the bootstrap peers on the same occasion. *In no meaning I was suggesting to intentionally stop the peer to update bootstrapping list.*  > Since these behaviors are not acceptable, we requested the API and a modified behavior  Since you requesting to add new API please consider open a feature request adding review needed tag, btw such request might be valid for many other configuration parameters as well, so I'd suggest to generalize it to something which will take care to add an ability of dynamic configuration reload/update w/o a need of restarting peer.  ></body> </Action>
<Action id="30587" issue="20422" author="scottz" type="comment" created="2017-09-06 23:21:42.0" updateauthor="scottz" updated="2017-09-06 23:21:42.0"> <body><! CDATA Per lengthy and helpful discussion with  ~C0rWin , we will pursue the suggestion to edit config file, for every peer, to set "CORE_PEER_GOSSIP_BOOTSTRAP" to a new value (an updated list of other peers in the organization), every time a peer is added or removed from an org. If this works, then whenever a peer is stopped and started (either power outage or manual stop), then it would use the new value when starting up again. This is not the same as dynamically modifying a bootstrap list with an API, or internally remembering and persisting a list of all known peers in one's organization, but it would still allow each peer to connect and gossip with any/all other available peers in its org. If this is confirmed satisfactory to the customer, we will respond here and potentially close this issue.  We will give further thought to the idea for creating a feature request for an expanded API to change this and many other config parameters.  ></body> </Action>
<Action id="46200" issue="20422" author="scottz" type="comment" body=" ~C0rWin  Please explain why you have marked this as invalid, for the record, before we close this. If it is because the maintainers have discussed and agreed that this is not a necessary, or desirable, or too disruptive, then please share that information here." created="2018-06-19 13:41:32.0" updateauthor="scottz" updated="2018-06-19 13:41:32.0"/>
