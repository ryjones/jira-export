<Action id="34001" issue="23000" author="mastersingh24" type="comment" created="2017-11-01 15:36:47.0" updateauthor="mastersingh24" updated="2017-11-01 15:36:47.0"> <body><! CDATA  ~rhegde  As far as I know, it's always been the case that in order to invoke or query chaincode (both of which are sending endorsement requests) on a given channel you need to be in the Channel/Application/Writers group.   ~muralisr  - anything I may be missing?  ></body> </Action>
<Action id="34004" issue="23000" author="muralisr" type="comment" created="2017-11-01 15:48:01.0" updateauthor="muralisr" updated="2017-11-01 15:48:01.0"> <body><! CDATA  ~mastersingh24  that's right. This behavior of requiring Writers has for both initial proposal and C-2-C calls has not changed.    ~rhegde  in v1.1 (not the preview or alpha, etc.. but the actual release) the "resource based ACL" will kick in and help you set ACLs on these resources in a flexible manner (details in https://jira.hyperledger.org/browse/FAB-3621).  ></body> </Action>
<Action id="34257" issue="23000" author="rhegde" type="comment" created="2017-11-02 18:44:58.0" updateauthor="rhegde" updated="2017-11-02 18:44:58.0"> <body><! CDATA I thought channel-2-channel(c-2-c) calls are always read-only and they wouldn't have write-access.  This considering the read-write-operations from chaincode execution are not part RW-set.  I did tried doing a write operation on the receiver chaincode and that does not get reflected on the ledger. Good!.  Does this not mean - we would require to validate read policy for c-2-c access and this should qualify to use the read-policy?  I have described a scenario in the description which as per current policy check to add all organization forcibly with write permission. Currently we have set the endorsement policy to the TRUE writer of the channel to mitigate this risk. The bad part, there is transaction in the ledger with rejected state.  ></body> </Action>
<Action id="35467" issue="23000" author="denyeart" type="comment" body=" ~muralisr  Can you respond to latest comment?" created="2017-11-27 04:57:13.0" updateauthor="denyeart" updated="2017-11-27 04:57:13.0"/>
<Action id="39229" issue="23000" author="muralisr" type="comment" created="2018-01-28 01:30:14.0" updateauthor="muralisr" updated="2018-01-28 01:30:14.0"> <body><! CDATA  ~rhegde  hope this is still useful to comment on ?   _Does this not mean - we would require to validate read policy for c-2-c access and this should qualify to use the read-policy?_  The original intent was to treat this uniformly with the external chaincode call which always requirea ChannelWriters access. The Resource Base ACL mention in the previous comment hopefully will allow you to define more flexible policies (you can associate your own policy for CC-2-CC calls ).     ></body> </Action>
<Action id="39482" issue="23000" author="yacovm" type="comment" body="can we close this,  ~rhegde  ,  ~mastersingh24  ,  ~muralisr  ? " created="2018-02-01 12:03:06.0" updateauthor="yacovm" updated="2018-02-01 12:03:06.0"/>
<Action id="39596" issue="23000" author="rhegde" type="comment" created="2018-02-02 16:27:32.0" updateauthor="rhegde" updated="2018-02-02 16:27:32.0"> <body><! CDATA Current check on write-policy is a defect if the chaincode tries to access another chaincode installed on a separate channel (named: public).  In our case to mitigate this problem, all organizations will be provided with write authorization to the public channel's with endorsement policy guaranteeing a ledger transaction will be only accepted (valid) from certain organizations.  The same workaround can be used for such defect however this can lead to a case where organization can spam the public channel. There are further ways to protect and monitor this not-required spamming activity.  We are ok with this workaround and as per the above comment since there exist a way in future release - we are ok to close this issue.  ></body> </Action>
