<Issue id="16971" key="FAB-4083" number="4083" project="10002" reporter="kchristidis" assignee="kchristidis" creator="kchristidis" type="10004" summary="Establish sensible defaults for all filesize-related settings" priority="4" resolution="10000" status="6" created="2017-05-21 23:12:27.0" updated="2018-07-20 14:12:53.0" resolutiondate="2017-06-12 16:46:28.0" votes="0" watches="3" workflowId="38622" security="10001"> <description><! CDATA Here's the problem:  1. In the system chain genesis block we allow the setting of the maximum block the orderers will cut (BatchSize.AbsoluteMaxBytes), and of the preferred size for blocks (BatchSize.PreferredMaxBytes).This implies that the OSNs will never process a message (envelope) larger than AbsoluteMaxBytes.  2. For the Kafka-based orderer, we have the Producer.MaxMessageBytes setting which defines the maximum permitted size that we (the OSNs) will send to the Kafka cluster.  3. On the Kafka cluster, we got (a) socket.request.max.bytes which is the maximum number of bytes in a socket request the brokers will accept, (b) message.max.bytes which is the maximum size of message that the brokers will accept, and (c) replica.fetch.max.bytes which is the number of bytes that the broker will attempt to fetch for each channel on every pull (they will fetch messages even larger than that if need be in order to make progress, but at any rate a message cannot be larger than message.max.bytes).  Now, all of these settings need to be in-sync.  If we were to list them in order of descending values, these should go as follows: # socket.request.max.bytes (largest) # message.max.bytes # replica.fetch.max.bytes # Producer.MaxMessageBytes # AbsoluteMaxBytes # PreferredMaxBytes  Corrective steps:  A. Expose Producer.MaxMessageBytes or keep it hidden but calculate it based on the value of `AbsoluteMaxBytes` and make it AbsoluteMaxBytes + delta to account for the wrapping into the KafkaRegular container message type. If we are to expose it, we should do it similar to how the Kafka folks describe restrictions: note that it should be larger than AbsoluteMaxBytes, and smaller or equal to message.max.bytes. Where do we expose this? configtx.yaml (i.e. genesis block), or orderer.yaml (locally)?  B. Come up with sensible defaults for all the values above. (All the Kafka cluster settings will be noted down in the sample Docker Compose configuration files we provide for guidance.) There are headers and thin wrapper message types involved here, so avoid making any of these values equal to each other (e.g. 1 == 2). The only exception is replica.fetch.max.bytes and Producer.MaxMessageBytes which _can_ be equal with each other (I checked:  https://www.mail-archive.com/users@kafka.apache.org/msg25494.html ).  The way I see it, these values should be: # socket.request.max.bytes = 100 MB (current default as set by the Kafka folks themselves) # message.max.bytes = 12 MiB # replica.fetch.max.bytes = 12 MiB # Producer.MaxMessageBytes = 11 MiB # AbsoluteMaxBytes = 10 MiB # PreferredMaxBytes = 512 KiB   Where the 1 MiB between items 3, 4, and 5 is excessive but it is my lazy + safe way of accounting for headers and container types (really a few KiB should get us set here).     ></description> </Issue>
