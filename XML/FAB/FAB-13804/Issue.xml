<Issue id="37013" key="FAB-13804" number="13804" project="10002" reporter="yacovm" assignee="yacovm" creator="yacovm" type="10001" summary="As a Fabric user, I want to interact with a Raft-based ordering service that does not render itself unavailable unnecessarily" priority="3" resolution="10000" status="6" created="2019-01-21 16:32:17.0" updated="2019-02-26 02:59:44.0" resolutiondate="2019-01-31 14:44:20.0" votes="0" watches="4" workflowId="48581"> <description><! CDATA Raft FSM is single-threaded, and the Raft leader periodically sends heartbeats to the followers. Currently - the Step RPC is not a stream, so it means that if the number of nodes is *n* and the RTT time is *T*, then each heart beat cycle takes at least *(n-1)xT*  which might easily balloon to be above the threshold that the followers can tolerate, and as a result - the followers would stop following the leader over and over and the cluster would get into an unrecoverable spin - imagine that if we have 10 nodes, then the leader has 9 followers and the last follower currently waits above 8*T*  time to receive a heartbeat from the start of the heartbeat cycle.  Had it been a stream - it'd wait only *T* time. {code:java} # HeartbeatTick is the number of Node.Tick invocations that must # pass between heartbeats. That is, a leader sends heartbeat # messages to maintain its leadership every HeartbeatTick ticks. HeartbeatTick: 1 # ElectionTick is the number of Node.Tick invocations that must pass # between elections. That is, if a follower does not receive any # message from the leader of current term before ElectionTick has # elapsed, it will become candidate and start an election. # ElectionTick must be greater than HeartbeatTick. ElectionTick: 10{code}  I recommend the following: # Make the cluster Step - a stream (now it's an RPC): We don't use the return value from the Step RPC (the Raft FSM sends messages one way and doesn't expect a synchronous response) anyway so there is no point in waiting for any response from the remote OSN. If Step would be a stream, then the message sending would be asynchronous and as a result a heart beat cycle would finish very quickly. # Make the T {{HeartbeatTick}} number something more sane than 1. Currently, the tick interval is set to 100ms, and the leader sends the followers a heart-beat once per 100ms. I think it's way too harsh for production environments and we should make the leader tick once in 5 seconds, and the  \{{ElectionTick}} should be something like 15 seconds.  I know the leader failover would be slower, but I am a bit uneasy about releasing a default with timeouts that are not lenient. I think we could always document that to make the failover fast, one can make a config update and reduce these times.     Please chime in -  ~kchristidis   ~guoger   ~C0rWin   ~tock   ></description> </Issue>
