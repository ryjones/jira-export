<Issue id="30947" key="FAB-10576" number="10576" project="10002" reporter="c0rwin" assignee="c0rwin" creator="c0rwin" type="10004" summary="Prevent peer from crashing while processing pull request in absense of collection config" priority="2" resolution="10000" status="6" created="2018-06-07 20:36:33.0" updated="2018-07-20 14:16:55.0" resolutiondate="2018-06-09 17:38:31.0" votes="0" watches="1" workflowId="42425"> <description><! CDATA While peer processing response for private data pull requests and not able to find collection config, leads peer to panic  {code}  31m2018-06-07 12:13:56.795 EDT  gossip/privdata  fromLedger -> ERRO 4ce 0m No collection config update below block sequence =  6 collection name = collectionMarblePrivateDetails for chaincode marbles_private is available panic: runtime error: invalid memory address or nil pointer dereference  signal SIGSEGV: segmentation violation code=0x1 addr=0x8 pc=0x10b2630   goroutine 169  running : github.com/hyperledger/fabric/gossip/privdata.(*puller).createResponse(0xc421c96930, 0x1572e40, 0xc422f9b350, 0x0, 0x0, 0x0) 	/opt/go/src/github.com/hyperledger/fabric/gossip/privdata/pull.go:144 +0x190 github.com/hyperledger/fabric/gossip/privdata.(*puller).handleRequest(0xc421c96930, 0x1572e40, 0xc422f9b350) 	/opt/go/src/github.com/hyperledger/fabric/gossip/privdata/pull.go:129 +0x1fc github.com/hyperledger/fabric/gossip/privdata.(*puller).listen(0xc421c96930) 	/opt/go/src/github.com/hyperledger/fabric/gossip/privdata/pull.go:115 +0x1c5 created by github.com/hyperledger/fabric/gossip/privdata.NewPuller 	/opt/go/src/github.com/hyperledger/fabric/gossip/privdata/pull.go:96 +0x22c  {code}  need to check whenever private data has been actually retrieved i.e. not nil:  {code} func (p *puller) createResponse(message proto.ReceivedMessage)   *proto.PvtDataElement { 	authInfo := message.GetConnectionInfo().Auth 	var returned   *proto.PvtDataElement 	defer func() { 		logger.Debug("Returning", message.GetConnectionInfo().Endpoint, len(returned), "elements") 	}() 	msg := message.GetGossipMessage() 	for _, dig := range msg.GetPrivateReq().Digests { 		rwSets := p.CollectionRWSet(dig) 		logger.Debug("Found", len(rwSets.RWSet), "for TxID", dig.TxId, ", collection", dig.Collection, "for", message.GetConnectionInfo().Endpoint) 		if len(rwSets.RWSet) == 0 { 			continue 		}  		colAP, err := p.AccessPolicy(rwSets.CollectionConfig, p.channel) 		if err != nil { 			logger.Debug("No policy found for channel", p.channel, ", collection", dig.Collection, "txID", dig.TxId, ":", err, "skipping...") 			continue 		} 		colFilter := colAP.AccessFilter() 		if colFilter == nil { 			logger.Debug("Collection ", dig.Collection, " has no access filter, txID", dig.TxId, "skipping...") 			continue 		} 		eligibleForCollection := colFilter(fcommon.SignedData{ 			Identity:  message.GetConnectionInfo().Identity, 			Data:      authInfo.SignedData, 			Signature: authInfo.Signature, 		})  		if !eligibleForCollection { 			logger.Debug("Peer", message.GetConnectionInfo().Endpoint, "isn't eligible for txID", dig.TxId, "at collection", dig.Collection) 			continue 		}  		returned = append(returned, &proto.PvtDataElement{ 			Digest:  dig, 			Payload: util.PrivateRWSets(rwSets.RWSet...), 		}) 	} 	return returned } {code}   following  {code} rwSets := p.CollectionRWSet(dig) {code}  the {{rwSets}} has to be checked whenever it's nil or not.  ></description> </Issue>
