<Issue id="46549" key="FAB-18420" number="18420" project="10002" reporter="pandrejko" creator="pandrejko" type="10100" summary="Update Developing Applications on monitoring for events " priority="2" status="10100" created="2021-02-10 13:11:54.0" updated="2021-09-15 15:58:59.0" votes="0" watches="3" workflowId="60493" archived="N"> <description><! CDATA In  https://hyperledger-fabric.readthedocs.io/en/latest/developapps/application.html#submit-transaction  we need to describe best practices for monitoring for events     Something along the lines of     Application clients must ensure that their transaction proposals are validated and that the proposals complete successfully. A proposal can be delayed or lost for multiple reasons, such as a network outage or a component failure. You should code your application for  high availability|https://cloud.ibm.com/docs/blockchain-sw?topic=blockchain-sw-best-practices-app#best-practices-app-ha-app  to handle component failure.   If a chaincode is not running, the first transaction proposal that is sent to this chaincode starts the chaincode. While the chaincode is starting, all other proposals are rejected with an error that indicates that the chaincode is starting. This is different from transaction invalidation. If any proposal is rejected while the chaincode is starting, application clients need to resend the rejected proposals after the chaincode starts. Application clients can use a message queue to avoid losing transaction proposals.  You can use a channel-based event service to monitor transactions and build message queues. The  channelEventHub|https://hyperledger.github.io/fabric-sdk-node/release-1.4/ChannelEventHub.html  class can register listeners based on transaction, block, and chaincode events. Channel-based listeners from the channel eventhub can scale to multiple channels and distinguish between traffic on different channels.     ></description> </Issue>
