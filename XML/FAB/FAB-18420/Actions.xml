<Action id="71387" issue="46549" author="denyeart" type="comment" created="2021-02-10 14:43:05.0" updateauthor="denyeart" updated="2021-09-15 15:58:59.0"> <body><! CDATA {color:#1d1c1d}Some more info to document in Developing Applications - {color}  {color:#1d1c1d}Guidance is needed around retries, there are two different types of retry required:{color} * {color:#1d1c1d}Retry Scenario 1- If you get a timeout (haven't seen commit status), you need to resubmit with the same txid (to protect against an unintended dup tx). You can do this byÂ {color}persisting the original submitted transaction, de-serializing it, and re-submiting to ordering. * {color:#1d1c1d}Retry Scenario 2 - If you get an tx invalidation, you need to re-endorse with a different txid.{color}  We also need more information in Developing Applications around {color:#1d1c1d}load balancing considerations (across endorsing peers and orderers) and connection re-use considerations. It is not clear how these aspects of applications are handled, either with or without service discovery.{color}  ></body> </Action>
<Action id="71507" issue="46549" author="bestbeforetoday" type="comment" created="2021-03-09 17:39:07.0" updateauthor="bestbeforetoday" updated="2021-03-09 17:41:15.0"> <body><! CDATA We should not be encouraging people to use the old v1.4 low-level ChannelEventHub. If the goal is to listen for block events, contract/chaincode events or transaction commits then the high-level fabric-network API provides capabilities that are both much simpler and offer a better quality of service. The high-level API is the only one we should be documenting.  The mix of description of proposal (endorsement) success and events is confusing for me as they are two separate things. Endorsement of proposals happens before transactions are submitted to the orderer and failures with a specific peer are typically handled transparently by a client (particularly one using discovery) as the endorsement process within the SDK will try other peers in the event of a peer endorsement failure. If a proposal cannot be endorsed then the client will generate an error immediately and nothing will be sent to the order so no events will be generated.  As Dave describes, failures can still happen after an endorsed transaction is successfully sent to the orderer. The default behaviour of the SDK is to generate an error when it detects this. The client can also time out before receiving the transaction status, at which point the status is indeterminate and again the SDK generates an error to inform the application. In both cases it is possible for the client using the high-level API to resubmit the same transaction, either with the same transaction ID or a different one. This does not happen automagically. In both cases it will go through the endorsement process again. It might be useful to document the different application code patterns to achieve each behaviour.  ></body> </Action>
<Action id="71857" issue="46549" author="denyeart" type="comment" body="In some cases the application may want to persist the submitted transaction, in case the application fails and needs to resubmit the transaction again upon coming back up with the same endorsements and same txid. See FABN-1714 for more info." created="2021-06-16 11:27:00.0" updateauthor="denyeart" updated="2021-06-16 11:27:00.0"/>
