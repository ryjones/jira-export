<Issue id="20524" key="FAB-5969" number="5969" project="10002" reporter="guoger" assignee="guoger" creator="guoger" type="10001" summary="Block ingress TX when a config TX is resubmitted due to lagged config seq until all in-flight config TXs are committed." priority="4" resolution="10000" status="6" created="2017-08-30 06:23:59.0" updated="2018-07-20 18:49:27.0" resolutiondate="2017-11-23 19:06:38.0" votes="0" watches="2" workflowId="39869"> <description><! CDATA A valid configure message {{TX ~config~}} will advance {{ConfigSeq}} when committed. In this case, while a {{TX ~config~}} is in flight, all messages received between *receipt* and *commit* of {{TX ~config~}} *need to be re-validated*. In the case of Kafka-base OSN, this introduces *overhead of re-submitting those messages to Kafka* (see FAB-5720 for the reason).  A simple, yet native solution is to block ingress TXs when a {{TX ~config~}} is received until that TX is eventually committed. However, there's no mechanism to synchronously block all orderers when only one of them receives a {{TX ~config~}}.  Instead, we block if consecutive {{TX ~config~}} are in-flight and the commitment of *first one* causes all following ones to be re-validated and re-submitted.  So we don't necessarily eliminate all the potential overhead, but hopefully most of it.  ></description> </Issue>
