<Action id="35429" issue="24301" author="denyeart" type="comment" body=" ~muralisr  What is your opinion?" created="2017-11-27 03:01:53.0" updateauthor="denyeart" updated="2017-11-27 03:01:53.0"/>
<Action id="35480" issue="24301" author="yihuang518" type="comment" body="I think the chaincode name+content+version+chaincode path is the same ,the fingerprint should be the same. Our case is to send the chaincode to different orgs, and they will install the chaincode by using their own private key and certificate by themself, but the timestamp issue make the fingerprint mismatch, so we can not work together. The only way to solve the problem is collect all the orgs private key and certificate  on one side and install the chaincode, it is impossible, they won&apos;t do it." created="2017-11-27 06:48:20.0" updateauthor="yihuang518" updated="2017-11-27 07:47:50.0"/>
<Action id="36069" issue="24301" author="mastersingh24" type="comment" created="2017-12-09 14:38:32.0" updateauthor="mastersingh24" updated="2017-12-09 14:38:32.0"> <body><! CDATA  ~muralisr   ~denyeart   There seem to be a number of items somewhat related to this error.  It all seems to boil down to the fact that I believe the intent of the Install design is that everyone should install the same package and not be building their own package from source.  This is exacerbated by the fact that we allow you to optionally combine package and install when running the install command (and it does not help that all of our samples do this as well).  Now I've looked through all the code and I think it might be possible to deterministically generate the fingerprint given identical input parameters, but I'm not sure that we should actually do this given the intent described above.   ></body> </Action>
<Action id="36070" issue="24301" author="muralisr" type="comment" created="2017-12-09 16:01:10.0" updateauthor="muralisr" updated="2017-12-09 16:01:10.0"> <body><! CDATA  ~mastersingh24  let me first address where this "timestamp" could come from.  The targz computation in the CLI itself tries to do the sane thing by ordering the files and nulling out all transients in the tar entry. This includes file timestamps in the file headers in the targz {code:java} //Let's take the variance out of the tar, make headers identical by using zero time oldname := header.Name var zeroTime time.Time header.AccessTime = zeroTime header.ModTime = zeroTime header.ChangeTime = zeroTime header.Name = packagepath header.Mode = 0100644 {code}   {quote}I think it might be possible to deterministically generate the fingerprint given identical input parameters, {quote} So  ~mastersingh24  I think we already do this for CLI. Do let me know if I'm missing something.  Assuming above is true, the following statement needs to be clarified {quote}I find out if you want to make all the chaincode binary the same with each other, you should make sure you load the same chain code, that means in the same directory with the same time stamp {quote}  ~yihuang518  Based on the above analysis, if all orgs have installed the identical chaincode with identical path, then I'd expect at least CLI based installs to work - *even if the timestamps on the files are different.* If that does not work we'd need to fix it. Can you check that please ? If that fails, it would be helpful to provide a sample with detailed steps so we can see whats going on.  Now, for the SDKs, we should make sure SDKs do the sane thing with their targz computation. One thing I noticed is that the node SDK sets the "effective_date" timestamp in the ChaincodeDeploymentSpec {code:java} fabric-client/lib/Client.js:		chaincodeDeploymentSpec.setEffectiveDate(clientUtils.buildCurrentTimestamp()); //TODO may wish to add this as a request setting {code} This would definitely make two separate installs fail even if everything else remains same. As suggested in the comment, one fix would be to let the user provide the "effective date" timestamp. Assuming CLI works, one workaround would be to install using CLI and do the rest with the SDKs ?  Finally... the intent of the fingerprint generation was to use the deploymentspec as is, without discarding fields. This way we don't get involved with language semantics (for example mapping of filesystem path to classpath in Java). I'd hesitate to pull out fields from the deployment spec and compute fingerprint (like the suggested _name+content+version+chaincode path_).  ></body> </Action>
<Action id="36073" issue="24301" author="baohua" type="comment" created="2017-12-10 04:11:44.0" updateauthor="baohua" updated="2017-12-10 04:11:44.0"> <body><! CDATA  ~muralisr , agree.  IMHO, it should be OK to calculate the fingerprint with `name+version+path+content`.  `version` already covers the info at temporal dimension.     ></body> </Action>
<Action id="36089" issue="24301" author="mastersingh24" type="comment" created="2017-12-11 07:31:47.0" updateauthor="mastersingh24" updated="2017-12-11 07:31:47.0"> <body><! CDATA  ~muralisr  - I'll take a look at the SDKs as well, but I did find a way to reproduce this with the CLI. If the user/group who owns the files is different, then you will also get the "data mismatch" error. Looks like adding Uid and Gid to the list of header fields fixes this: {code:java} //Let's take the variance out of the tar, make headers identical by using zero time oldname := header.Name var zeroTime time.Time header.AccessTime = zeroTime header.ModTime = zeroTime header.ChangeTime = zeroTime header.Name = packagepath header.Mode = 0100644 header.Uid = 500 header.Gid = 500 {code}    ></body> </Action>
<Action id="36205" issue="24301" author="muralisr" type="comment" body=" ~mastersingh24  that&apos;s interesting. I did look into that a bit (followed from another related JIRA) but thought it&apos;ll default to 0 uniformly.  I must have missed something. But good to know, Gari... do you want me to fix it ?" created="2017-12-11 12:39:31.0" updateauthor="muralisr" updated="2017-12-11 12:39:31.0"/>
<Action id="36612" issue="24301" author="mastersingh24" type="comment" body=" ~muralisr  - I can take a stab at it as well.  Up to you.  Created FAB-7434 to track" created="2017-12-12 08:55:32.0" updateauthor="mastersingh24" updated="2017-12-12 09:24:22.0"/>
<Action id="36622" issue="24301" author="muralisr" type="comment" body=" ~mastersingh24  either way works." created="2017-12-12 13:04:50.0" updateauthor="muralisr" updated="2017-12-12 13:04:50.0"/>
<Action id="37302" issue="24301" author="yihuang518" type="comment" created="2017-12-15 03:38:35.0" updateauthor="yihuang518" updated="2017-12-15 05:09:36.0"> <body><! CDATA Hi Srinivasan Muralidharan I have done a simple test by useing command line on fabric 1.0.4 last month,  1. do the test by useing e2e-cli example 2. in the script.sh, we will install the chaincode on two peer, after installing the first peer, copy the chaincode away and sleep for 1 or 2 minutes(longer than 1 minute, 15 seconds is successful ,I don't know why...) 3. copy the chaincode back and make sure the timestamp is not the same 4. install the new chaincode on the second peer 5. init the chaincode on the first peer and invoke the seconde peer, you will get the error. You can do the test to verify it. And I am pretty sure it can be reprocduced by using java sdk, becuase I have done the test on java sdk for more than 100 times. I found the problem on javasdk , then I did the test on command line. Please correct me if I am not correct.   ></body> </Action>
<Action id="37512" issue="24301" author="muralisr" type="comment" created="2017-12-15 15:06:24.0" updateauthor="muralisr" updated="2017-12-15 15:06:24.0"> <body><! CDATA Thanks for the detailed steps  ~yihuang518 .  Expanding the steps a little bit to make sure I'm not missing anything # do the test by useing e2e-cli example # install CC on peer1 # copy the chaincode away and sleep for 1 or 2 minutes # copy the chaincode back and make sure the timestamp is not the same # install the new chaincode on the peer2 # init the chaincode on the first peer and invoke the seconde peer, you will get the error.  Can you validate that please ?  ></body> </Action>
<Action id="38270" issue="24301" author="denyeart" type="comment" body=" ~yihuang518  Reminder, can you review prior comment?" created="2018-01-08 03:03:20.0" updateauthor="denyeart" updated="2018-01-08 03:03:20.0"/>
<Action id="39223" issue="24301" author="muralisr" type="comment" body="Assigning to self for investigation. Will try to recreate using above instructions." created="2018-01-27 15:28:56.0" updateauthor="muralisr" updated="2018-01-27 15:28:56.0"/>
<Action id="39227" issue="24301" author="muralisr" type="comment" created="2018-01-28 00:42:29.0" updateauthor="muralisr" updated="2018-01-28 00:42:29.0"> <body><! CDATA  ~yihuang518  I followed the steps above and could not recreate on latest master.     Modified script.sh as follows    {code:java} echo "copy off the examples folder" cp -r /opt/gopath/src/github.com/hyperledger/fabric/examples /tmp/  #get the timestamps of chainode_example02 dir ls -ltr /opt/gopath/src/github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02  ## Install chaincode on Peer0/Org1 and Peer2/Org2 echo "Installing chaincode on org1/peer0..." installChaincode 0 echo "Sleeping...remove examples folder and copy from saved" sleep 120 echo "Awake..."  #get the timestamps of chainode_example02 dir ls -ltr /opt/gopath/src/github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02  echo "Install chaincode on org2/peer2..." installChaincode 2  #Instantiate chaincode on Peer0/Org1 echo "Instantiating chaincode on org1/peer0..." instantiateChaincode 0  #Query on chaincode on Peer0/Org1 ..... instantiated on peer0/org1 and querying on peer2/org2 .... should fail if timestamp issue echo "Querying chaincode on org2/peer2..." chaincodeQuery 2 100 {code}     The logs show a timestamp difference and no query failure    {code:java} copy off the examples folder total 12 -rw-r--r-- 1 root root 3165 Jan 28 00:26 chaincode_example02_test.go -rw-r--r-- 1 root root 5078 Jan 28 00:26 chaincode_example02.go Installing chaincode on org1/peer0 .... ....  Sleeping...remove examples folder and copy from saved Awake... total 12 -rw-r--r-- 1 root root 3165 Jan 28 00:31 chaincode_example02_test.go -rw-r--r-- 1 root root 5078 Jan 28 00:31 chaincode_example02.go  Install chaincode on org2/peer2... ... ... Querying chaincode on org2/peer2... ===================== Querying on PEER2 on channel 'mychannel'... ===================== CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key CORE_PEER_LOCALMSPID=Org2MSP CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt CORE_PEER_TLS_ENABLED=true CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp CORE_PEER_ID=cli CORE_LOGGING_LEVEL=DEBUG CORE_PEER_ADDRESS=peer0.org2.example.com:7051 Attempting to Query PEER2 ...3 secs 2018-01-28 00:31:55.053 UTC  msp  GetLocalMSP -> DEBU 001 Returning existing local MSP 2018-01-28 00:31:55.053 UTC  msp  GetDefaultSigningIdentity -> DEBU 002 Obtaining default signing identity 2018-01-28 00:31:55.053 UTC  chaincodeCmd  checkChaincodeCmdParams -> INFO 003 Using default escc 2018-01-28 00:31:55.053 UTC  chaincodeCmd  checkChaincodeCmdParams -> INFO 004 Using default vscc 2018-01-28 00:31:55.053 UTC  chaincodeCmd  getChaincodeSpec -> DEBU 005 java chaincode enabled 2018-01-28 00:31:55.053 UTC  msp/identity  Sign -> DEBU 006 Sign: plaintext: 0AA6070A6608031A0B08FBB3B4D30510...6D7963631A0A0A0571756572790A0161 2018-01-28 00:31:55.053 UTC  msp/identity  Sign -> DEBU 007 Sign: digest: 85BFB80200046A6059BA08EB39294FA2C8AAEB78A4046BA4C68E0438AAD0A4A3 Query Result: 100 2018-01-28 00:32:04.202 UTC  main  main -> INFO 008 Exiting..... ===================== Query on PEER2 on channel 'mychannel' is successful =====================   ... ... {code}    This seems to follow your steps closely and I cannot recreate the error (on latest master to reemphasize). Please let me know the above recreate steps are correct. Would be helpful if you can try on latest master as well.    ></body> </Action>
<Action id="42595" issue="24301" author="christopherferris" type="comment" body="lowered priority and marked unverified since  ~muralisr  could not reproduce." created="2018-04-05 17:42:25.0" updateauthor="christopherferris" updated="2018-04-05 17:42:25.0"/>
<Action id="44757" issue="24301" author="kchristidis" type="comment" body="Been dormant for too long, closing. If the issue persists, please reopen." created="2018-05-21 17:46:32.0" updateauthor="kchristidis" updated="2018-05-21 17:46:32.0"/>
