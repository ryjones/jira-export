<Issue id="18940" key="FAB-5161" number="5161" project="10002" reporter="yacovm" creator="yacovm" type="10001" summary="Optimize peer selection of channel batches in gossip" priority="3" resolution="10000" status="6" created="2017-07-04 10:11:34.0" updated="2018-07-20 18:57:19.0" resolutiondate="2017-07-04 19:40:45.0" votes="1" watches="1" workflowId="39377"> <description><! CDATA In gossip whenever a batch of channel-scoped messages (either leadership, blocks, stateInfo, etc.) is sent to remote peers, a function goes over all existing alive peers and then selects from them a subset of peers.  This is done in *gossipInChan* function: {code} 		// Select the peers to send the messages to 		// For leadership messages we will select all peers that pass routing factory - e.g. all peers in channel and org 		membership := g.disc.GetMembership() 		allPeersInCh := filter.SelectPeers(len(membership), membership, chanRoutingFactory(gc)) 		peers2Send := filter.SelectPeers(g.conf.PropagatePeerNum, membership, chanRoutingFactory(gc)) 		// Send the messages to the remote peers 		for _, msg := range messagesOfChannel { 			if msg.IsLeadershipMsg() { 				g.comm.Send(msg, allPeersInCh...) 			} else { 				g.comm.Send(msg, peers2Send...) 			} } {code}  In case of leadership messages, the subset is taken from the entire membership set without *an upper bound* (we gossip leadership messages to all peers in the channel), and in case of non-leadership messages the subset is taken with *an upper bound* equal to the propogation fanout (configurable).  Finding peers that are eligible to receive any channel-related data involves cryptographical computations and is non-negligible (measured ~ 25ms in a network of 8 peers)  The 2 possibilities (leadership and non-leadership) are calculated even though each method invocation of *gossipInChan* receives only 1 type of message. Therefore, it would be beneficial performance wise to just calculate the option that is relevant to that method invocation and not calculate both options each time.  ></description> </Issue>
