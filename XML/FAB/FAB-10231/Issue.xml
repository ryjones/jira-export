<Issue id="30415" key="FAB-10231" number="10231" project="10002" reporter="denyeart" assignee="denyeart" creator="denyeart" type="10002" summary="Test: Manually exercise private data chaincode using BYFN network" priority="3" resolution="10000" status="6" created="2018-05-19 19:26:54.0" updated="2019-01-23 05:07:32.0" resolutiondate="2018-06-04 13:51:26.0" votes="0" watches="11" workflowId="42244"> <description><! CDATA These instructions take the dev env single peer test and artifacts from ---------FAB-10162--------- and runs it on top of the BYFN network with 2 orgs of 2 peers each.  It assumes you are already familiar with how to run BYFN with marbles02 chaincode as documented here:   http://hyperledger-fabric.readthedocs.io/en/latest/build_network.html#using-couchdb   The fabric-samples chaincode with the artifacts is at  https://github.com/hyperledger/fabric-samples/tree/master/chaincode/marbles02_private      cd into fabric-samples/first-network.  Make sure V1_2 capability is set in configtx.yaml.  This is required for the channel to process private data.  Make sure any prior network is brought down: {code:java} ./byfn.sh -m down{code} We will spin up the network with docker compose and then run the commands manually. {code:java} ./byfn.sh -m generate  docker-compose -f docker-compose-cli.yaml up -d  docker exec -it cli bash {code}  Or to use couchdb as state database: {code:java} ./byfn.sh -m generate  docker-compose -f docker-compose-cli.yaml -f docker-compose-couch.yaml up -d  docker exec -it cli bash{code} Setup channel and join on two peers    {code:java} export CHANNEL_NAME=mychannel  peer channel create -o orderer.example.com:7050 -c mychannel -f ./channel-artifacts/channel.tx --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem    peer channel join -b mychannel.block  CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp CORE_PEER_ADDRESS=peer0.org2.example.com:7051 CORE_PEER_LOCALMSPID="Org2MSP" CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt peer channel join -b mychannel.block  peer channel update -o orderer.example.com:7050 -c mychannel -f ./channel-artifacts/Org1MSPanchors.tx --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem  CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp CORE_PEER_ADDRESS=peer0.org2.example.com:7051 CORE_PEER_LOCALMSPID="Org2MSP" CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt peer channel update -o orderer.example.com:7050 -c mychannel -f ./channel-artifacts/Org2MSPanchors.tx --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem {code}    Install chaincode on peer0.org1 and instantiate chaincode on channel {code:java} peer chaincode install -n marblesp -v 1.0 -p github.com/chaincode/marbles02_private/go  peer chaincode instantiate -o orderer.example.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n marblesp -v 1.0 -c '{"Args": "init" }' -P "OR ('Org1MSP.peer','Org2MSP.peer')" --collections-config /opt/gopath/src/github.com/chaincode/marbles02_private/collections_config.json {code}    Invoke chaincode and query on peer0.org1 {code:java} peer chaincode invoke -o orderer.example.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n marblesp -c '{"Args": "initMarble","marble1","blue","35","tom","99" }'  peer chaincode query -C mychannel -n marblesp -c '{"Args": "readMarble","marble1" }'   peer chaincode query -C mychannel -n marblesp -c '{"Args": "readMarblePrivateDetails","marble1" }' {code}   Query on peer0.org1, but using an org2 client, this will fail if memberOnlyRead is set to true (available starting in v1.4...prior to that client access control had to be locked down in chaincode) {code:java} CORE_PEER_LOCALMSPID=Org2MSP CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp peer chaincode query -C mychannel -n marblesp -c '{"Args": "readMarblePrivateDetails","marble1" }' {code}  If you want to try an update transaction, do a marble transfer: {code:java} peer chaincode invoke -o orderer.example.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n marblesp -c '{"Args": "transferMarble","marble1","jerry" }'  peer chaincode query -C mychannel -n marblesp -c '{"Args": "readMarble","marble1" }'   peer chaincode query -C mychannel -n marblesp -c '{"Args": "readMarblePrivateDetails","marble1" }' {code}     Query chaincode peer1.org1 - will fail since peer has not yet joined channel {code:java} CORE_PEER_ADDRESS=peer1.org1.example.com:7051  peer chaincode query -C mychannel -n marblesp -c '{"Args": "readMarblePrivateDetails","marble1" }'{code}    Install chaincode and query on peer0.org2 - First query succeeds, second query fails since org2 doesn't have access to collectionMarblePrivateDetails. {code:java} CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp CORE_PEER_ADDRESS=peer0.org2.example.com:7051 CORE_PEER_LOCALMSPID="Org2MSP" CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt peer chaincode install -n marblesp -v 1.0 -p github.com/chaincode/marbles02_private/go     CORE_PEER_ADDRESS=peer0.org2.example.com:7051 CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/server.crt peer chaincode query -C mychannel -n marblesp -c '{"Args": "readMarble","marble1" }'     CORE_PEER_ADDRESS=peer0.org2.example.com:7051 CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/server.crt peer chaincode query -C mychannel -n marblesp -c '{"Args": "readMarblePrivateDetails","marble1" }'{code}  Join peer1.org1, it will catch up to current block height and pull private data as needed, then install chaincode on peer1.org1 and create a new marble on it {code:java} CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp CORE_PEER_ADDRESS=peer1.org1.example.com:7051 CORE_PEER_LOCALMSPID="Org1MSP" CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt peer channel join -b mychannel.block  CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp CORE_PEER_ADDRESS=peer1.org1.example.com:7051 CORE_PEER_LOCALMSPID="Org1MSP" CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt peer chaincode install -n marblesp -v 1.0 -p github.com/chaincode/marbles02_private/go    CORE_PEER_ADDRESS=peer1.org1.example.com:7051 CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/server.crt peer chaincode invoke -o orderer.example.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n marblesp -c '{"Args": "initMarble","marble30","blue","35","tom","99" }' {code}  Create a marble from peer0 and from peer1 in the same block {code:java} peer chaincode invoke -o orderer.example.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n marblesp -c '{"Args": "initMarble","marble40","blue","35","tom","99" }'  CORE_PEER_ADDRESS=peer1.org1.example.com:7051 CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/server.crt peer chaincode invoke -o orderer.example.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n marblesp -c '{"Args": "initMarble","marble50","blue","35","tom","99" }' {code}  Update collections_config.json to make Org2MSP.member a member of collectionMarblePrivateDetails.   Install and upgrade to 2nd version of chaincode: {code:java} peer chaincode install -n marblesp -p github.com/chaincode/marbles02_private/go -v 2.0  peer chaincode upgrade -o orderer.example.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n marblesp -c '{"Args": "init" }' -P "OR ('Org0MSP.peer','Org1MSP.peer')" --collections-config /opt/gopath/src/github.com/chaincode/marbles02_private/collections_config.json -v 2.0{code}   Install chaincode v2 and query on peer0.org2 again - If we use Fabric v1.4 or later, it is able to reconcile the data that was missing previously... Now both queries should succeed: {code:java} CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp CORE_PEER_ADDRESS=peer0.org2.example.com:7051 CORE_PEER_LOCALMSPID="Org2MSP" CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt peer chaincode install -n marblesp -v 2.0 -p github.com/chaincode/marbles02_private/go     CORE_PEER_ADDRESS=peer0.org2.example.com:7051 CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/server.crt peer chaincode query -C mychannel -n marblesp -c '{"Args": "readMarble","marble1" }'     CORE_PEER_ADDRESS=peer0.org2.example.com:7051 CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/server.crt peer chaincode query -C mychannel -n marblesp -c '{"Args": "readMarblePrivateDetails","marble1" }'{code}  Invoke to create marble2: {code:java} peer chaincode invoke -o orderer.example.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n marblesp -c '{"Args": "initMarble","marble2","blue","35","tom","99" }'{code} Install chaincode and query on peer0.org2 - First query succeeds, second query now succeeds since org2 now has access to collectionMarblePrivateDetails. {code:java} CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp CORE_PEER_ADDRESS=peer0.org2.example.com:7051 CORE_PEER_LOCALMSPID="Org2MSP" CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt peer chaincode install -n marblesp -v 2.0 -p github.com/chaincode/marbles02_private/go     CORE_PEER_ADDRESS=peer0.org2.example.com:7051 CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/server.crt peer chaincode query -C mychannel -n marblesp -c '{"Args": "readMarble","marble2" }'     CORE_PEER_ADDRESS=peer0.org2.example.com:7051 CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/server.crt peer chaincode query -C mychannel -n marblesp -c '{"Args": "readMarblePrivateDetails","marble2" }'{code}    Join peer1.org2, it will catch up to current block height and pull private data as needed: {code:java} CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp CORE_PEER_ADDRESS=peer1.org2.example.com:7051 CORE_PEER_LOCALMSPID="Org2MSP" CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls/ca.crt peer channel join -b mychannel.block{code} peer1.org2 will have caught up to block height from the join, and attempts to pull the private data with these results:  marble1 - eligible and not purged - pull successful  marble1 private details - wasn't eligible at that block height, doesn't pull  marble2 - eligible and not purged - pull successful  marble2 private details - eligible but will soon be purged (based on default btlPullMargin of 10), doesn't pull  Finally, install chaincode v2 on peer1.org2 and query to confirm the results: {code:java} CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp CORE_PEER_ADDRESS=peer1.org2.example.com:7051 CORE_PEER_LOCALMSPID="Org2MSP" CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls/ca.crt peer chaincode install -n marblesp -v 2.0 -p github.com/chaincode/marbles02_private/go    CORE_PEER_ADDRESS=peer1.org2.example.com:7051 CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls/server.crt peer chaincode query -C mychannel -n marblesp -c '{"Args": "readMarble","marble1" }'  CORE_PEER_ADDRESS=peer1.org2.example.com:7051 CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls/server.crt peer chaincode query -C mychannel -n marblesp -c '{"Args": "readMarblePrivateDetails","marble1" }'  CORE_PEER_ADDRESS=peer1.org2.example.com:7051 CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls/server.crt peer chaincode query -C mychannel -n marblesp -c '{"Args": "readMarble","marble2" }'  CORE_PEER_ADDRESS=peer1.org2.example.com:7051 CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls/server.crt peer chaincode query -C mychannel -n marblesp -c '{"Args": "readMarblePrivateDetails","marble2" }'{code}  Now, recall the marble1 private details is still there on peer0.org1: {code:java} peer chaincode query -C mychannel -n marblesp -c '{"Args": "readMarblePrivateDetails","marble1" }' {code} marble1 was created at block4 and we are currently at block6  NOTE, THIS IS NO LONGER CORRECT GIVEN ADDITIONS TO THE ABOVE, NEED TO FIX UP THE SCENARIO...   Transfer marble2 2 times, this will cause marble1 private details to pass its blockToLive and get purged at block8. {code:java} peer chaincode invoke -o orderer.example.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n marblesp -c '{"Args": "transferMarble","marble2","jerry" }'{code}  Confirm marble1 private details is now purged... the query will not find marble1: {code:java} peer chaincode query -C mychannel -n marblesp -c '{"Args": "readMarblePrivateDetails","marble1" }' {code}    Other test variations:  1) Now, re-run entire test with these changes to collections_config.json: {code:java}    {      "name": "collectionMarbles",      "policy": "OR('Org1MSP.member', 'Org2MSP.member')",      "requiredPeerCount": 0,      "maxPeerCount": 0,      "blockToLive":1000000 },  {      "name": "collectionMarblePrivateDetails",      "policy": "OR('Org1MSP.member')",      "requiredPeerCount": 0,      "maxPeerCount": 0,      "blockToLive":20  }  {code} Since maxPeerCount is 0 it will not disseminate at endorsement time, forcing private data pulls everywhere.  And the blockToLive of 20 means that the collectionMarblePrivateDetails is always available for pull.   2) Do the upgrade and invoke at the same time, they will appear in the same block and the invoke will therefore get invalidated (transactions cannot appear in the same block as the chaincode's instantiation/upgrade, due to block processing batch processing).  3) Do two invokes at the same time to create different marbles. Check debug log to ensure efficient processing of both transactions in the block.  See defect -FAB-10499- for background. {code:java} peer chaincode invoke -o orderer.example.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n marblesp -c '{"Args": "initMarble","marble3","blue","35","tom","99" }' peer chaincode invoke -o orderer.example.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n marblesp -c '{"Args": "initMarble","marble4","blue","35","tom","99" }'   {code}       You can generate debug log to see what is going on by setting in peer-base.yaml: {code:java} CORE_LOGGING_LEVEL=DEBUG CORE_LOGGING_GOSSIP=DEBUG{code} And then see debug highlights to confirm the functioning using key word grep like this: {code:java} docker logs peer0.org1.example.com 2>&1 | grep -i -a -E 'private|pvt|privdata|collection|apply'{code}  ></description> </Issue>
