<Issue id="23704" key="FAB-6863" number="6863" project="10002" reporter="rennman" assignee="rennman" creator="rennman" type="10002" summary="Create python script to integrate fabric-ca clustering test in daily build" priority="3" resolution="10000" status="6" created="2017-11-01 21:19:22.0" updated="2018-07-20 14:14:51.0" resolutiondate="2017-11-27 17:07:15.0" votes="0" watches="1" workflowId="40436"> <description><! CDATA The fabric ca has multi-ca and intermediate-ca capabilities which, to date, have not been rigorously and regularly tested in an integrated fashion.   The fabric-ca clustering test will test -  - Multiple Root fabric-ca-server instances behind a proxy - Each Root instance will run multiple, independent CA's - Multiple CA's will share a single database; e.g. 'ca<#n>' in the cluster will use database  'fabric_ca_ca<#n>' - There will exist an intermediate CA instance, behind a proxy, for each Root CA server. - Each intermediate CA instance will run multiple, independent CA's - Multiple CA's under the intermediate CA cluster will share a database; e.g. 'intca<#n>' in the cluster will use database 'intfabric_ca_ca<#n>' - The fabric-ca-client will be used to send all types of requests that the fabric-ca-server supports: - register - enroll - reenroll - revoke - getcacert - gencrl     The gnu parallel tool will be used to generate and run multiple requests concurrently.  The script will allow for scaling. The defaults will be:  1 haproxy, directing request to two back-end server clusters:    4 Root fabric-ca-server instances-       8 multi 'sub' CAs per Root instance    4 Intermediate fabirc-ca-server instances-       8 multi 'sub' CAs per Intermediate instance 128 users per CA (for a total of 8192 users) 3072 simultaneous requests comprising a mixture of each type of valid server request.  ></description> </Issue>
