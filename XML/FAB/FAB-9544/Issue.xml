<Issue id="29438" key="FAB-9544" number="9544" project="10002" reporter="yacovm" assignee="nirro" creator="yacovm" type="10001" summary="Add notification about endorsement / collection policy change in filtered events" priority="3" resolution="10000" status="6" created="2018-04-16 22:12:12.0" updated="2018-07-20 18:50:59.0" resolutiondate="2018-04-26 17:56:26.0" votes="0" watches="5" workflowId="41856"> <description><! CDATA Currently, the filtered events don't have any indication of the chaincode name. That is acceptable, as we don't want to leak any data other than the minimal necessary for the application to know that its transaction was validated or not.  Note: The chaincode id appears in the chaincode events, but not every chaincode has an event. {code:java} message ChaincodeEvent { string chaincode_id = 1; string tx_id = 2; string event_name = 3; bytes payload = 4; } {code} Ideally, the SDK would be notified about endorsement policy changes so that it can immediately issue a new query for the endorsers of the chaincode from the peer(s) that act as the discovery servers, so it can have accurate information about which organizations it should or should not send endorsements to. * When normal endorsements are involved, it is sufficient (from confidentiality point of view) to re-query the discovery service only upon a config change. This is possible right now because the filtered events have an indicator of the header type and config transactions also get sent to clients via the peer deliver service (  ~C0rWin  - am I correct?) and thus can be used for the application to determine whether it should re-send an endorser query (or a config query, etc.) However, we might also want to know about endorsement policy changes, so the SDK won't send transactions that are invalid and thus waste resources and time. * When transactions with private data are involved, we need to know whether the collection config changed or not, so the application won't send sensitive data to the peer. I see 2 ways of tackling this: ** Have an LSCC instantiate or upgrade contain a chaincode event via *stub.SetEvent()*, which would be transferred to the SDK. ** Add a new oneof type to the *Data* field and have it indicate an LSCC write. {code:java} message FilteredTransaction { string txid = 1; common.HeaderType type = 2; TxValidationCode tx_validation_code = 3; oneof Data { FilteredTransactionActions transaction_actions = 4; } } {code}  Would like to hear opinions about: # What approach should we take # What version should this be targeted for?   ~C0rWin  ,  ~mastersingh24  ,  ~jyellick  ,  ~ellaki   ~denyeart   ></description> </Issue>
