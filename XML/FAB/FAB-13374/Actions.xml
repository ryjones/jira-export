<Action id="55376" issue="36298" author="denyeart" type="comment" body=" ~Senthil1  mentioned he will take a look." created="2019-01-07 18:10:29.0" updateauthor="denyeart" updated="2019-01-07 18:10:29.0"/>
<Action id="55477" issue="36298" author="senthil1" type="comment" created="2019-01-10 04:14:51.0" updateauthor="senthil1" updated="2019-01-10 04:15:05.0"> <body><! CDATA Thanks  ~manish-sethi  for providing the lead. As you mentioned, we do not have a lock between GetIterator() and Close() in our levelDB helper. After digging a bit deeper, I found that all Get(), Put(), Write(), NewIterator() in the levelDB implementation first checks whether the db is closed if err := db.ok(); err != nil  {       return err }  where db.ok() checks whether db is closed. As you mentioned, when GetIterator() and Close() interleave, we get into nil pointer exception. Though we see this nil pointer exception with GetIterator() call only (due to the test scenario), we could get a similar problem with get, put, writeBatch call too. Hence, instead of using a sync.Mutex, we need to use a sync.RWMutex and acquire a write lock during Close() and read lock for all other functions.   ></body> </Action>
<Action id="55478" issue="36298" author="senthil1" type="comment" created="2019-01-10 04:52:05.0" updateauthor="senthil1" updated="2019-01-10 04:52:05.0"> <body><! CDATA Just recording it here for future reference. Only during a graceful peer shutdown (and in unit-test), we would close the DB. When we implement peer shutdown command, with our new locking mechanism, endorsers and committers would get error (instead of nil pointer exception) while trying to access the DB. As it does not look graceful enough, when we do a peer shutdown, we might need to wait for all txSim to complete execution as well as for the in-progress block commit before closing all DBs for peer shutdown. Given the amount of work and code complexity, not sure whether it is worth to have a graceful peer shutdown command. Having said that, db platform like postgreSQL supports graceful db shutdown command.       ></body> </Action>
