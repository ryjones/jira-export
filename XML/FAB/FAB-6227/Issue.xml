<Issue id="20915" key="FAB-6227" number="6227" project="10002" reporter="jyellick" assignee="manish-sethi" creator="jyellick" type="10003" summary="Add custom processor for peer resource config update transactions." priority="3" resolution="10000" status="6" created="2017-09-19 20:16:41.0" updated="2018-07-20 14:14:26.0" resolutiondate="2017-12-21 19:35:06.0" votes="0" watches="2" workflowId="40053"> <description><! CDATA The ledger supports plugins for processing non-endorser transactions.  One needs to be added which will trigger the standard config processing path, but for the resource config tree instead of the channel config tree.  The pattern should be similar to the channel config, or the existing resources config (for ACLs) processing.  The config should be parsed into immutable structures of a bundle, the bundle should then be set via an atomic store operation to a bundle container structure.  The components of the system may then get a stable view of the configuration for performing endorsements in particular (config should always be stable in the commit path).  Ideally, the config should be stored as flattened key/values where the key is the canonical name of the element and the value is the config element proto (custom marshaled).  Code will need to be written to translate between the flattened storage values and the proto encoded values.  Alternatively, the config could be stored as a single marshaled blob.  However, this is suboptimal for inclusion in MVCC sets, and will cause different state hashes across different peers.  Still, this could be a low-work required solution for v1.1.  ></description> </Issue>
