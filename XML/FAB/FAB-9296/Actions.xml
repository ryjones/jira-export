<Action id="42750" issue="29089" author="scottz" type="comment" created="2018-04-09 21:38:34.0" updateauthor="scottz" updated="2018-04-09 21:38:34.0"> <body><! CDATA Status update: I have a fix ready to test, but cannot yet build a load in Vagrant, which hasn't been upgraded to use the new versions. {code:java} fabric-test/tools/OTE$ diff ote.go ote.go.fixGrpc  105a106,107 > var maxGrpcMsgSize = 1000 * 1024 * 1024 >  330a333 > var err error 337c340 < err := mspmgmt.LoadLocalMsp(fmt.Sprintf("%s/msp", matches 0 ), ordConf.General.BCCSP, orgMSPID) — > err = mspmgmt.LoadLocalMsp(fmt.Sprintf("%s/msp", matches 0 ), ordConf.General.BCCSP, orgMSPID) 345a349 >  347,348c351,353 < var err error < comm.SetMaxRecvMsgSize(1000 * 1024 * 1024) — >  > // OLD: comm.SetMaxRecvMsgSize(1000 * 1024 * 1024) >  352c357,358 < dialOpts = append(dialOpts, grpc.WithDefaultCallOptions(grpc.MaxCallRecvMsgSize(comm.MaxRecvMsgSize()))) — > // OLD: dialOpts = append(dialOpts, grpc.WithDefaultCallOptions(grpc.MaxCallRecvMsgSize(comm.MaxRecvMsgSize()))) > dialOpts = append(dialOpts, grpc.WithDefaultCallOptions(grpc.MaxCallRecvMsgSize(maxGrpcMsgSize))){code}  ></body> </Action>
<Action id="42751" issue="29089" author="nnao" type="comment" created="2018-04-09 22:08:03.0" updateauthor="nnao" updated="2018-04-09 22:08:03.0"> <body><! CDATA  ~scottz  I think "github.com/hyperledger/fabric/core/comm" has MaxRecvMsgSize and some format 'verbs' are wrong. So I succeeded OTE build below some changes.  {code:java} vagrant@ubuntu-xenial:/opt/gopath/src/github.com/hyperledger/fabric-test/regression/daily$ git diff diff --git a/fabric b/fabric --- a/fabric +++ b/fabric @@ -1 +1 @@ -Subproject commit c6515daf3483c9ec02a6bf48e492094051ac8476 +Subproject commit c6515daf3483c9ec02a6bf48e492094051ac8476-dirty diff --git a/tools/OTE/ote.go b/tools/OTE/ote.go index 2d4c570..097f5a1 100644 --- a/tools/OTE/ote.go +++ b/tools/OTE/ote.go @@ -330,7 +330,7 @@ func (b *broadcastClient) getAck() error { func startConsumer(serverAddr string, chanID string, ordererIndex int, channelIndex int, txRecvCntrP *int64, blockRecvCntrP *int64, consumerConnP **grpc.ClientConn, seek int, quiet bool, tlsEnabled bool, orgMSPID string) { myName := clientName("Consumer", ordererIndex, channelIndex) signer := localmsp.NewSigner() -        ordererName := strings.Trim(serverAddr, fmt.Sprintf(":%s", ordStartPort)) +        ordererName := strings.Trim(serverAddr, fmt.Sprintf(":%d", ordStartPort)) matches, _ := filepath.Glob(fmt.Sprintf("/etc/hyperledger/fabric/artifacts/ordererOrganizations/example.com/orderers/%s" + "*", ordererName)) ordConf.General.BCCSP.SwOpts.FileKeystore.KeyStorePath=fmt.Sprintf("%s/msp/keystore", matches 0 ) if ordererIndex == 0 { // Loading the msp's of orderer0 for every channel is enough to create the deliver client @@ -345,11 +345,10 @@ func startConsumer(serverAddr string, chanID string, ordererIndex int, channelIn } var conn *grpc.ClientConn var err error -        comm.SetMaxRecvMsgSize(1000 * 1024 * 1024) if tlsEnabled { var dialOpts   grpc.DialOption // set max send/recv msg sizes -                dialOpts = append(dialOpts, grpc.WithDefaultCallOptions(grpc.MaxCallRecvMsgSize(comm.MaxRecvMsgSize()))) +                dialOpts = append(dialOpts, grpc.WithDefaultCallOptions(grpc.MaxCallRecvMsgSize(comm.MaxRecvMsgSize))) creds, err := credentials.NewClientTLSFromFile(fmt.Sprintf("%s/tls/ca.crt", matches 0 ), fmt.Sprintf("%s", ordererName)) dialOpts = append(dialOpts, grpc.WithTransportCredentials(creds)) conn, err = grpc.Dial(serverAddr, dialOpts...) @@ -550,7 +549,7 @@ func moreDeliveries(txSentP *    int64, totalNumTxSentP *int64, txSentFailuresP func startProducer(serverAddr string, chanID string, ordererIndex int, channelIndex int, txReq int64, txSentCntrP *int64, txSentFailureCntrP *int64, tlsEnabled bool, payload int) { myName := clientName("Producer", ordererIndex, channelIndex) signer := localmsp.NewSigner() -        ordererName := strings.Trim(serverAddr, fmt.Sprintf(":%s", ordStartPort)) +        ordererName := strings.Trim(serverAddr, fmt.Sprintf(":%d", ordStartPort)) matches, _ := filepath.Glob(fmt.Sprintf("/etc/hyperledger/fabric/artifacts/ordererOrganizations/example.com/orderers/%s" + "*", ordererName)) ordConf.General.BCCSP.SwOpts.FileKeystore.KeyStorePath=fmt.Sprintf("%s/msp/keystore", matches 0 ) var conn *grpc.ClientConn {code}   ></body> </Action>
<Action id="42753" issue="29089" author="scottz" type="comment" created="2018-04-10 02:36:30.0" updateauthor="scottz" updated="2018-04-10 02:36:30.0"> <body><! CDATA  ~nnao  yes, if you look at my comment, just prior to yours, you will see a similar fix to MaxRecvMsgSize. If you do as you propose, then we also have to set the max recv msg size somehow locally or find another funtion in comm. The way you fixed it will compile but it will not increase the max allowed msg size as is needed. If you would like to propose a solution and push a patchset, I would be happy to review it and help get it merged quickly, since I have run into some local troubles of my own.  I see you also fixed another problem (%s) too, as did I (err).  ></body> </Action>
<Action id="42782" issue="29089" author="nnao" type="comment" body="https://gerrit.hyperledger.org/r/c/20389/" created="2018-04-10 16:25:26.0" updateauthor="nnao" updated="2018-04-10 16:25:26.0"/>
<Action id="42786" issue="29089" author="scottz" type="comment" body="Thank you Nao. Your solution works! I merged it." created="2018-04-10 17:53:45.0" updateauthor="scottz" updated="2018-04-10 17:53:45.0"/>
