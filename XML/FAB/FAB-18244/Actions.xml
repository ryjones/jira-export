<Action id="70379" issue="46150" author="jyellick" type="comment" created="2020-09-24 16:43:31.0" updateauthor="jyellick" updated="2020-09-24 16:43:31.0"> <body><! CDATA After some further analysis with  ~guoger , I think the resolution is not to flip 3 and 4, since in general we do not want to force WriteBlock to be synchronous for the consensus plugin.  Rather, the important piece is already in place that the entries are persisted to the WAL before the snapshot is  The real problem is that, at startup, we try to state transfer to the latest snapshot before applying everything that is unapplied in the WAL.  If we can apply what's committed to the WAL and catch up to the snapshot, then when we apply the snapshot it will be a no-op.  This is better behavior generally (why replicate over the network what you already have on disk) and should fix this particular crash scenario where the snapshot gets persisted to disk before the blocks are persisted to the blockchain.  ></body> </Action>
<Action id="70427" issue="46150" author="guoger" type="comment" body="https://github.com/hyperledger/fabric/pull/1964" created="2020-10-03 06:39:16.0" updateauthor="guoger" updated="2020-10-03 06:39:16.0"/>
<Action id="70428" issue="46150" author="guoger" type="comment" created="2020-10-03 06:39:57.0" updateauthor="guoger" updated="2020-10-03 06:39:57.0"> <body><! CDATA from commit message: {quote} Support.WriteBlock commits block to ledger asynchronously and can have up to one block in-flight. And there's possibility a node crashes before such block is persisted successfully. Normally when node restarts, Raft loads entries from WAL and attempts to re-apply them. However, when a snapshot is taken at this block, only entries after (if any) the snapshot are loaded, and we end up hanging here forever waiting for missing blocks to be pulled from nowhere in single node situation.  A straightforward solution would be to peek into ledger tip first, and decide whether to load some "old" entries from WAL, instead of blindly load data after latest snapshot. Although it's trickier than it sounds:  today, we don't strictly respect the contract between Raft and state machine, where applied data should not be lossy and it's safe to prune data in WAL after snapshots. For example, in extreme case, if we lose the entire ledger, we should not expect it to be recoverable from WAL  etcd/raft persistence library does not provide friendly interfaces to control what data to load in fine-grained manner. For example, snap.Load() simply looks for latest snapshot available, and loads entries after that. If we'd like to, for example, load older data prior to that snapshot, we'll need to come up with our own utilities  This commit aims to provide a quick fix for bug described in FAB-18244, leveraging the fact that we can have only one async block in-flight, and leave the "correct" solution to future work. {quote}  ></body> </Action>
<Action id="70482" issue="46150" author="denyeart" type="comment" body=" ~guoger   ~jyellick   Is there intent to backport for 2.2.2 and 1.4.10?  If so, please update Fix Versions. If not, please close." created="2020-10-12 02:10:53.0" updateauthor="denyeart" updated="2020-10-12 02:10:53.0"/>
<Action id="70487" issue="46150" author="guoger" type="comment" body=" ~denyeart  I&apos;ll do cherrypicks for both" created="2020-10-12 03:29:27.0" updateauthor="guoger" updated="2020-10-12 03:29:27.0"/>
