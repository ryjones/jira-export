<Issue id="39575" key="FAB-15319" number="15319" project="10002" reporter="ales" assignee="caod" creator="ales" type="10004" summary="LSCC: Deploying a chaincode with the empty namespace allows arbitrary writes to the channel config" priority="2" resolution="10002" status="6" created="2019-05-01 06:40:35.0" updated="2019-08-07 19:45:29.0" resolutiondate="2019-08-07 19:45:29.0" votes="0" watches="12" workflowId="52459" security="10000"> <description><! CDATA h1. Problem  The channel config is stored in the ledger alongside the other application chaincode namespaces. The namespace used for the channel config is the empty namespace.  However, it is entirely possible to deploy a chaincode with the empty namespace, which then gives the deployer the ability to make arbitrary writes to that namespace, including the "{{resourcesconfigtx.CHANNEL_CONFIG_KEY}}" key which stores the channel configuration. h1. Proof of concept  The PoC shows an exploitation of the attack in the following steps # a 1.4. channel is created, a chaincode is deployed in it # the attacker crafts an LSCC transaction to deploy a chaincode with an empty namespace # the attacker now creates a transaction with a read-write set setting the "{{resourcesconfigtx.CHANNEL_CONFIG_KEY}}" key of the empty namespace to {{  byte("BARF")}}. # At this point the network is restarted; this is required because peers keep an in-memory version of the channel config, which they read out of the ledger only at startup time # after restart, we try to invoke a chaincode on the channel and now we fail because the channel no longer exists since the peers can't read its configuration from the ledger. Note the error messages in the log  {code:java}  e  org1.peer1  2019-05-02 11:58:20.544 CEST  peer  Initialize -> ERRO 01b Failed to load chain testchannel(unexpected EOF) {code} This is because unmarshalling {{  byte("BARF")}} to a channel configuration proto results in a failure.  ></description> </Issue>
