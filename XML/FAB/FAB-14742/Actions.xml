<Action id="58352" issue="38623" author="jyellick" type="comment" body=" ~ales  Could you take a look?" created="2019-03-20 23:18:21.0" updateauthor="jyellick" updated="2019-03-20 23:18:21.0"/>
<Action id="58353" issue="38623" author="muralisr" type="comment" created="2019-03-21 00:08:30.0" updateauthor="muralisr" updated="2019-03-21 00:09:23.0"> <body><! CDATA  ~ales  merely trying to be helpful... feel free to ignore if there are better approaches.  This section of code in *kvledger.initTxMgr* is the one that ends up requiring post config block operations.  Just separating this out into a new "postOpen" method and calling after *peer.createChain* should take care of the chicken/egg situation.   {code:java} 	qe, err := l.NewQueryExecutor() 	if err != nil { 		return err 	} 	defer qe.Done() 	for _, sl := range stateListeners { 		if err := sl.Initialize(l.ledgerID, qe); err != nil { 			return err 		} 	} {code}  for  ~manish-sethi  eyes  ></body> </Action>
<Action id="58474" issue="38623" author="manish-sethi" type="comment" created="2019-03-22 19:46:15.0" updateauthor="manish-sethi" updated="2019-03-22 19:47:37.0"> <body><! CDATA Thanks  ~muralisr  for catching this. Yes, your finding is also correct about the dependencies in the initialization cycle.  https://gerrit.hyperledger.org/r/#/c/30333/  ></body> </Action>
<Action id="60086" issue="38623" author="denyeart" type="comment" body="Switching back to In Review since the related tests are still in review: https://gerrit.hyperledger.org/r/#/c/30601/" created="2019-05-16 21:32:06.0" updateauthor="denyeart" updated="2019-05-16 21:32:06.0"/>
<Action id="60332" issue="38623" author="manish-sethi" type="comment" created="2019-05-23 21:23:58.0" updateauthor="manish-sethi" updated="2019-05-23 21:23:58.0"> <body><! CDATA The test for this is included in - https://gerrit.hyperledger.org/r/#/c/fabric/+/31036/ Abandoned - https://gerrit.hyperledger.org/r/#/c/30601/  ></body> </Action>
