<Issue id="30764" key="FAB-10480" number="10480" project="10002" reporter="mgk" assignee="denyeart" creator="mgk" type="10001" summary="New API to prevent &quot;BlindWrite&quot; problem" priority="3" resolution="10001" status="6" created="2018-05-31 10:26:13.0" updated="2020-01-22 22:32:26.0" resolutiondate="2020-01-22 22:32:26.0" votes="1" watches="1" workflowId="35833"> <description><! CDATA As per issue "FAB-10479 - "Blind Writes" not mentioned in the docs / faqs" BlindWrites can be an issue for unwary chaincode developers at present. Therefore, a new API is proposed to better represent the intent behind the code written. The proposal is that "PutState()" is deprecated, and new "CreateState()" and "UpdateState()" APIs are introduced. This would allow a chaincode developer to indicate if they are expecting a new key to be created vs an existing key to be updated. This would prevent the BlindWrite problem as Fabric could catch and reject calls where the current state of the world state did not match the intent.   CreateState("x", ...) - Precondition key "x" must not exist. If at the time this API is called at simulation time in an endorser, key "x" does exist, an error will be returned. This API will also cause an entry for key "x" to be present in the both the Read and Write parts of the RW Set. This means that if the precondition changes before commit it will be caught in the VSCC and rejected.   UpdateState("x", ...) - Precondition key "x" must exist.  If at the time this is called at simulation time in an endorser, key "x" does not exist, an error will be returned. This API will also cause an entry for key "x" to be present in the both the Read and Write parts of the RW Set. This means that if the precondition changes before commit it will be caught in the VSCC and rejected.   Essentially these APIs will enforce an "every write must have a matching read" semantic against the world state.   Using the example from issue FAB-10479, the code would change to:  {{queryThing("x") \{}} {{  //return thing "x" if it exists}} {{}}}   {{createThing("x") \{}} {{  //call CreateState("x") to create thing "x" enforcing the "x" does not previously exist}} {{}}}   {{updateThing("x") \{}} {{  //call UpdateState("x") to update thing "x" enforcing the "x" must previously exist}} {{}}}    ></description> </Issue>
