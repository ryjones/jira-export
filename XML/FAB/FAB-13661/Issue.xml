<Issue id="36727" key="FAB-13661" number="13661" project="10002" reporter="scottz" assignee="dongming" creator="scottz" type="10101" summary="restart leader OSN with multiple-threads sending transactions and multiple TX per block" priority="3" resolution="10000" status="6" created="2019-01-14 02:31:37.0" updated="2019-07-23 20:59:58.0" resolutiondate="2019-07-23 20:59:58.0" votes="0" watches="1" workflowId="48323"> <description><! CDATA +SETUP+: Create network as in FAB-13641: 3 orgs, 2 peers per org, 3 raft orderers, and create 1 application channel.  +INPUTS+ (scenario 1): # Start transactions running in 3 threads with PTE running in "constant mode" which sends the next transaction once the previous transaction is broadcast to an orderer, as in FAB-13641: 1 thread to org1.peer1, 1 thread to org2.peer1, 1 thread to org3.peer1. # The client should be configured to broadcast transactions to different orderers (e.g. the client thread that sends to org1.peer1 could send to orderer1, etc), so all orderers are receiving transactions. # Check orderer logs to determine which orderer is the leader (could be any of the three). # While the traffic is running, stop and start the application channel leader OSN.  +EXPECTATIONS+: * In the orderers that are not stopped, for the system channel and for each channel shared with the stopped orderer, we can expect to see an error log when their connection drops to the stopped orderer (followed by an info log indicating its recovery, whenever it is started again). Or something like that. The exact number of logs and loglevels to expect for each channel are described in FAB-12687. * The orderers that are not stopped will elect a new leader among themselves. This should happen rather quickly within a few seconds. And we should see only one leader change. * Expect something less than the max of 30,002 transactions delivered. Also, with batchsize = 500, we can expect a much smaller number of blocks (athough we do not expect each block to be full). We can expect to see NAK'd transactions reported by the client (e.g. those TXs that are sent blindly to the stopped orderer while it is stopped or not yet rejoined to the consensus group), and more transactions lost if the stopped leader orderer had any partially filled blocks of transactions that had not been replicated to both other orderers yet.  ></description> </Issue>
