<Action id="60495" issue="39451" author="muhammadsalah" type="comment" body="I have followed somewhat a similar approach to the trail, and I found out the charts on the peer are missing some important environment variable declaration, the cause of this problem is &quot;CORE_PEER_CHAINCODEADDRESS&quot; environment variable is not set to the peer service, and since the chaincode container is not kubernetes aware, and can not contact the peer back, it just halts, therefore context deadline." created="2019-05-30 10:22:41.0" updateauthor="muhammadsalah" updated="2019-05-30 10:22:41.0"/>
<Action id="60499" issue="39451" author="muhammadsalah" type="comment" body="I have closed this, as it has nothing to do with fab code, an improvement to the chart is needed indeed." created="2019-05-30 10:36:01.0" updateauthor="muhammadsalah" updated="2019-05-30 10:36:01.0"/>
<Action id="60502" issue="39451" author="muhammadsalah" type="comment" body="Re-opened because I just found out about the address auto-detect, and currently debugging." created="2019-05-30 11:27:56.0" updateauthor="muhammadsalah" updated="2019-05-30 11:27:56.0"/>
<Action id="60504" issue="39451" author="muhammadsalah" type="comment" created="2019-05-30 11:54:17.0" updateauthor="muhammadsalah" updated="2019-05-30 11:54:17.0"> <body><! CDATA !image-2019-05-30-13-53-48-874.png!  Auto-detected address does not reflect on the chaincode runtime in minikube  ></body> </Action>
<Action id="60506" issue="39451" author="czar0" type="comment" created="2019-05-30 12:55:55.0" updateauthor="czar0" updated="2019-05-30 12:59:14.0"> <body><! CDATA Hi  ~MuhammadSalah , indeed I forgot to mention I made some changes to the official charts in order to include the following environment variables otherwise missing: {code:java} CORE_PEER_CHAINCODEADDRESS: {{ .Release.Name }}-hlf-peer:7052  CORE_PEER_CHAINCODELISTENADDRESS: 0.0.0.0:7052  CORE_PEER_ADDRESS: {{ .Release.Name }}-hlf-peer:{{ .Values.service.portRequest }} {code} Where *portRequest* is set to *7051*     I attached the full peer log in case you may find it anyhow helpful.     There are a couple of details I would like to point to your attention: * The address of the peer seems to be correctly detected and the network ID *nid1* correctly assigned    {code:java} 2019-05-30 11:58:38.254 UTC  peer  func1 -> INFO 006 Auto-detected peer address: 10.1.6.22:7051 2019-05-30 11:58:38.255 UTC  peer  func1 -> INFO 007 Auto-detect flag is set, returning 10.1.6.22:7051 2019-05-30 11:58:38.255 UTC  peer  func1 -> INFO 008 Auto-detected peer address: 10.1.6.22:7051 2019-05-30 11:58:38.255 UTC  peer  func1 -> INFO 009 Auto-detect flag is set, returning 10.1.6.22:7051 2019-05-30 11:58:38.267 UTC  nodeCmd  computeChaincodeEndpoint -> INFO 00a Entering computeChaincodeEndpoint with peerHostname: 10.1.6.22 2019-05-30 11:58:38.267 UTC  nodeCmd  computeChaincodeEndpoint -> INFO 00b Exit with ccEndpoint: org1peer1-hlf-peer:7052 2019-05-30 11:58:38.270 UTC  sccapi  registerSysCC -> INFO 00c system chaincode lscc(github.com/hyperledger/fabric/core/scc/lscc) registered 2019-05-30 11:58:38.271 UTC  sccapi  registerSysCC -> INFO 00d system chaincode cscc(github.com/hyperledger/fabric/core/scc/cscc) registered 2019-05-30 11:58:38.271 UTC  sccapi  registerSysCC -> INFO 00e system chaincode qscc(github.com/hyperledger/fabric/core/scc/qscc) registered 2019-05-30 11:58:38.273 UTC  sccapi  registerSysCC -> INFO 00f system chaincode (+lifecycle,github.com/hyperledger/fabric/core/chaincode/lifecycle,true) disabled 2019-05-30 11:58:38.295 UTC  gossip.service  func1 -> INFO 010 Initialize gossip with endpoint 10.1.6.22:7051 and bootstrap set  org1peer1-hlf-peer:7051   2019-05-30 11:58:38.352 UTC  nodeCmd  serve -> INFO 01c Starting peer with ID= name:"org1peer1"  , network ID= nid1 , address= 10.1.6.22:7051  2019-05-30 11:58:38.352 UTC  nodeCmd  serve -> INFO 01d Started peer with ID= name:"org1peer1"  , network ID= nid1 , address= 10.1.6.22:7051 {code}   * But the chaincode container has a wrong peer address. Why? This should be its own address.    {code:java} 2019-05-30 12:00:11.953 UTC  shim  userChaincodeStreamGetter -> DEBU 002 Peer address: org1peer1-hlf-peer:7052  {code}    ></body> </Action>
<Action id="60507" issue="39451" author="muhammadsalah" type="comment" body="I am already taking that same procedure now, while I have the autodetect as false." created="2019-05-30 12:58:41.0" updateauthor="muhammadsalah" updated="2019-05-30 12:58:41.0"/>
<Action id="60512" issue="39451" author="muhammadsalah" type="comment" created="2019-05-30 14:19:16.0" updateauthor="muhammadsalah" updated="2019-05-30 14:19:16.0"> <body><! CDATA  ~czar0  I have found this article, and he seems to have a lot figured out https://medium.com/google-cloud/helm-chart-for-fabric-for-kubernetes-80408b9a3fb6  ></body> </Action>
<Action id="60529" issue="39451" author="denyeart" type="comment" body=" ~MuhammadSalah  I see you assigned this to yourself. Is there some Fabric update that you are suggesting?" created="2019-05-30 19:18:21.0" updateauthor="denyeart" updated="2019-05-30 19:18:21.0"/>
<Action id="60534" issue="39451" author="czar0" type="comment" created="2019-05-30 19:45:27.0" updateauthor="czar0" updated="2019-05-30 19:45:27.0"> <body><! CDATA  ~MuhammadSalah  unluckily that suggested "trick" of adding the peer IP address to its _/etc/hosts_ file did not work out. {code:java} root@org1peer1-hlf-peer-5c8fcc767c-7hcdf:/# cat /etc/hosts # Kubernetes-managed hosts file. 127.0.0.1 localhost ::1 localhost ip6-localhost ip6-loopback fe00::0 ip6-localnet fe00::0 ip6-mcastprefix fe00::1 ip6-allnodes fe00::2 ip6-allrouters 10.1.6.36 org1peer1-hlf-peer-5c8fcc767c-7hcdf 10.1.6.36 org1peer1-hlf-peer {code} Log on CLI (fabric-tool)    {code:java} 2019-05-30 19:31:58.984 UTC  msp.identity  Sign -> DEBU 0ac Sign: digest: FC5C778AC71E55629E3D2365D56BB9CA73111F6D5769D3838304AE11354CDDF5 Error: could not assemble transaction, err proposal response was not successful, error code 500, msg chaincode registration failed: container exited with 0 command terminated with exit code 1 {code}       Log on Peer (org1peer1)    {code:java} 2019-05-30 19:23:39.305 UTC  peer.chaincode.nid1-org1peer1-mychaincode-1.0  func2 -> INFO 04a 2019-05-30 19:23:39.302 UTC  shim  setupChaincodeLogging -> INFO 001 Chaincode (build level: 1.4.1) starting up ... 2019-05-30 19:23:39.305 UTC  peer.chaincode.nid1-org1peer1-mychaincode-1.0  func2 -> INFO 04a 2019-05-30 19:23:39.302 UTC  shim  setupChaincodeLogging -> INFO 001 Chaincode (build level: 1.4.1) starting up ... 2019-05-30 19:23:39.305 UTC  peer.chaincode.nid1-org1peer1-mychaincode-1.0  func2 -> INFO 04b 2019-05-30 19:23:39.302 UTC  shim  userChaincodeStreamGetter -> DEBU 002 Peer address: org1peer1-hlf-peer:7052 2019-05-30 19:23:42.313 UTC  peer.chaincode.nid1-org1peer1-mychaincode-1.0  func2 -> INFO 04c Error starting Sample chaincode: error trying to connect to local peer: context deadline exceeded 2019-05-30 19:23:42.312 UTC  shim  userChaincodeStreamGetter -> ERRO 003 context deadline exceeded 2019-05-30 19:23:42.313 UTC  peer.chaincode.nid1-org1peer1-mychaincode-1.0  func2 -> INFO 04d error trying to connect to local peer 2019-05-30 19:23:42.313 UTC  peer.chaincode.nid1-org1peer1-mychaincode-1.0  func2 -> INFO 04e github.com/hyperledger/fabric/core/chaincode/shim.userChaincodeStreamGetter 2019-05-30 19:23:42.313 UTC  peer.chaincode.nid1-org1peer1-mychaincode-1.0  func2 -> INFO 04f  /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/shim/chaincode.go:112 2019-05-30 19:23:42.313 UTC  peer.chaincode.nid1-org1peer1-mychaincode-1.0  func2 -> INFO 050 github.com/hyperledger/fabric/core/chaincode/shim.Start 2019-05-30 19:23:42.313 UTC  peer.chaincode.nid1-org1peer1-mychaincode-1.0  func2 -> INFO 051  /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/shim/chaincode.go:151 2019-05-30 19:23:42.313 UTC  peer.chaincode.nid1-org1peer1-mychaincode-1.0  func2 -> INFO 052 main.main 2019-05-30 19:23:42.313 UTC  peer.chaincode.nid1-org1peer1-mychaincode-1.0  func2 -> INFO 053  /chaincode/input/src/chaincode/mychaincode/main.go:399 2019-05-30 19:23:42.313 UTC  peer.chaincode.nid1-org1peer1-mychaincode-1.0  func2 -> INFO 054 runtime.main 2019-05-30 19:23:42.313 UTC  peer.chaincode.nid1-org1peer1-mychaincode-1.0  func2 -> INFO 055  /opt/go/src/runtime/proc.go:201 2019-05-30 19:23:42.313 UTC  peer.chaincode.nid1-org1peer1-mychaincode-1.0  func2 -> INFO 056 runtime.goexit 2019-05-30 19:23:42.313 UTC  peer.chaincode.nid1-org1peer1-mychaincode-1.0  func2 -> INFO 057  /opt/go/src/runtime/asm_amd64.s:1333 2019-05-30 19:23:42.473 UTC  dockercontroller  func2 -> INFO 058 Container nid1-org1peer1-mychaincode-1.0 has closed its IO channel 2019-05-30 19:23:42.605 UTC  endorser  callChaincode -> INFO 059  mychannel  3ce7f01f  Exit chaincode: name:"lscc"  (4362ms) 2019-05-30 19:23:42.605 UTC  endorser  SimulateProposal -> ERRO 05a  mychannel  3ce7f01f  failed to invoke chaincode name:"lscc" , error: container exited with 0github.com/hyperledger/fabric/core/chaincode.(*RuntimeLauncher).Launch.func1 /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/runtime_launcher.go:63runtime.goexit /opt/go/src/runtime/asm_amd64.s:1333chaincode registration failed {code}       ></body> </Action>
<Action id="60537" issue="39451" author="muhammadsalah" type="comment" created="2019-05-30 21:49:34.0" updateauthor="muhammadsalah" updated="2019-05-30 21:49:34.0"> <body><! CDATA  ~denyeart  I tried to verify and debug the problem; however, I am not so sure if I can attempt to put an addition but I always wanted to and try. I think the vm controller can be also extended to use kubecli to make fabric kubernetes aware; therefore resolving the chaincode hassle part.  ></body> </Action>
<Action id="60538" issue="39451" author="muhammadsalah" type="comment" body=" ~czar0  I will continue to dive into it; hopefully I find a clue." created="2019-05-30 21:53:43.0" updateauthor="muhammadsalah" updated="2019-05-30 21:53:43.0"/>
<Action id="60565" issue="39451" author="muhammadsalah" type="comment" created="2019-05-31 17:53:27.0" updateauthor="muhammadsalah" updated="2019-05-31 17:53:27.0"> <body><! CDATA  ~czar0  I tried with different setups using NodePorts, I could not get the chaincode to communicate back. Maybe it's minikube problem, maybe nott; but I don't have a kubernetes cluster available to me now.  I am leaving this as un-assigned until someone who knows how to fix it takes over.  ></body> </Action>
<Action id="60569" issue="39451" author="muhammadsalah" type="comment" created="2019-06-01 04:58:33.0" updateauthor="muhammadsalah" updated="2019-06-01 04:58:33.0"> <body><! CDATA  ~czar0  I have solved this issue via a workaround here goes what I did, and it looks neater than proposed in the charts for details can be found here:  https://applatix.com/case-docker-docker-kubernetes-part-2/  I simply created a chaincodevm container which is an official dind docker image I augmented it in the helm chart in the deployment, swapped the host shared daemon socket (which I find a very big plus) runs chaincodes inside that container, drawback its a bit slow, but things work now, and it can reconnect the peer since it's running already inside the same pod.  I'll paste the changes here, and a screen shot of the configuration for you to verify as well.   ~denyeart  See if this closes it.     ></body> </Action>
<Action id="60570" issue="39451" author="muhammadsalah" type="comment" body="deployment.yaml includes the set of changes in the hlf-peer chart" created="2019-06-01 05:01:58.0" updateauthor="muhammadsalah" updated="2019-06-01 05:01:58.0"/>
<Action id="60685" issue="39451" author="czar0" type="comment" created="2019-06-05 11:51:30.0" updateauthor="czar0" updated="2019-06-05 11:51:30.0"> <body><! CDATA  ~MuhammadSalah  thanks for the tip but I did not manage to make it work yet. I am probably doing something wrong in the configuration of the DinD container, even though I followed all the changes you made on the pod, that is: * Adding a new container to the pod. I called it *chaincode*, so configured:   - name: chaincode image: "\{{ .Values.chaincode.image.repository }}:\{{ .Values.chaincode.image.tag }}" imagePullPolicy: \{{.Values.chaincode.image.pullPolicy}} securityContext: privileged: true volumeMounts: - name: dockersocket mountPath: /var/run   * volumeMounts     - mountPath: /host/var/run name: dockersocket   * volumes:   - name: dockersocket emptyDir: {}   * Values   chaincode: image: repository: docker tag: 18.09.6-dind pullPolicy: IfNotPresent     CLI log:    {code:java} 2019-06-05 11:32:56.678 UTC  msp.identity  Sign -> DEBU 0ab Sign: plaintext: 0A9A090A6708031A0C08E8D0DEE70510...1A000A000A04657363630A0476736363  2019-06-05 11:32:56.678 UTC  msp.identity  Sign -> DEBU 0ac Sign: digest: 00BD423054933666E8CF3B666423A0341580365A3AF987EE3D037AC23D9D557A Error: could not assemble transaction, err proposal response was not successful, error code 500, msg chaincode registration failed: container exited with 0 command terminated with exit code 1 {code}       I attach complete logs of peer and chaincode DinD container to the issue.  ></body> </Action>
<Action id="60691" issue="39451" author="muhammadsalah" type="comment" created="2019-06-05 12:25:48.0" updateauthor="muhammadsalah" updated="2019-06-05 12:25:48.0"> <body><! CDATA  ~czar0  The chaincode reports it can not connect to your peer instance yet, however, it has been passed "org1peer1-hlf-peer:7052" as peer address, however; in simple terms a localhost:7052 will do, if you leave the peer setup for the host ip discovery this should work as well, as they all get same host ip (pod ip). So either, just remove the chaincode peer address variable, let the address auto detect be true, it should work, or just set the peer address as "localhost:7052" it will also work hopefully, and let me know.  ></body> </Action>
<Action id="60695" issue="39451" author="denyeart" type="comment" created="2019-06-05 13:33:52.0" updateauthor="denyeart" updated="2019-06-05 13:35:55.0"> <body><! CDATA  ~czar0   ~MuhammadSalah  While this is useful conversation, I don't think there is any change in base Fabric that you are proposing here.  The hlf helm charts found at  https://github.com/helm/charts/tree/master/stable/hlf-peer  are not part of the Fabric open source project managed in this Hyperledger Jira instance. For issues with the hlf helm charts, please open issues in the helm/charts github repository. I will also note that those helm charts are not "official" charts supported or endorsed by the Fabric maintainers.  ></body> </Action>
<Action id="60696" issue="39451" author="muhammadsalah" type="comment" body=" ~denyeart  Agreed, this is why I went to close it at first; but I had second guessed myself." created="2019-06-05 13:38:47.0" updateauthor="muhammadsalah" updated="2019-06-05 13:38:47.0"/>
