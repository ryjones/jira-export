<Issue id="28912" key="FAB-9181" number="9181" project="10002" reporter="elli-androulaki" creator="elli-androulaki" type="10002" summary="Update MSP interrface to account for Validated/Identity" priority="3" resolution="10001" status="6" created="2018-03-27 08:50:14.0" updated="2020-06-11 15:30:37.0" resolutiondate="2020-01-22 22:32:31.0" votes="0" watches="1" workflowId="35655"> <description><! CDATA MSP interface would need to be adjusted to the aforementioned re-organisation, i.e., Validate function would need to return a ValidatedIdentity, while the interface would need to be enhanced with ValidateAt(...) method to accommodate the corresponding method of Identity. SatisfiesPrincipal would also need to be adjusted to take as argument solely a ValidatedIdentity.       {code:java} // MSP is the minimal Membership Service Provider Interface to be implemented // to accommodate peer functionality type MSP interface {    // IdentityDeserializer interface needs to be implemented by MSP  IdentityDeserializer    // Setup the MSP instance according to configuration information  Setup(config *msp.MSPConfig) error    // GetVersion returns the version of this MSP  GetVersion() MSPVersion    // GetType returns the provider type  GetType() ProviderType    // GetIdentifier returns the provider identifier  GetIdentifier() (string, error)    // GetSigningIdentity returns a signing identity corresponding to the provided identifier  GetSigningIdentity(identifier *IdentityIdentifier) (SigningIdentity, error)    // GetDefaultSigningIdentity returns the default signing identity  GetDefaultSigningIdentity() (SigningIdentity, error)    // GetTLSRootCerts returns the TLS root certificates for this MSP  GetTLSRootCerts()     byte    // GetTLSIntermediateCerts returns the TLS intermediate root certificates for this MSP  GetTLSIntermediateCerts()     byte    // Validate checks whether the supplied identity is valid  Validate(id Identity) (ValidatedIdentity, error)    // ValidateAt checks whether the supplied identity is valid on a given timestamp  ValidateAt(id Identity, timestamp timestamp.Timestamp) (ValidatedIdentity, error)    // SatisfiesPrincipal checks whether the identity matches  // the description supplied in MSPPrincipal. The check may  // involve a byte-by-byte comparison (if the principal is  // a serialized identity) or may require MSP validation  SatisfiesPrincipal(id ValidatedIdentity, principal *msp.MSPPrincipal) error } {code}    ></description> </Issue>
