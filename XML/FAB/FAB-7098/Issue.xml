<Issue id="24458" key="FAB-7098" number="7098" project="10002" reporter="satoshifujisawa" creator="satoshifujisawa" type="10004" summary="Peer data synchronization failure due to connection timeout to CouchDB" priority="2" resolution="10000" status="6" created="2017-11-24 05:43:10.0" updated="2018-07-20 14:15:01.0" duedate="2017-11-20 00:00:00.0" resolutiondate="2017-12-19 14:33:22.0" votes="0" watches="3" workflowId="40582"> <environment><! CDATA Environment: * Fabric v1.0.2 * Ubuntu v16.04.3 LTS * Kafka - 2 instances * Zookeeper – 3 instances * Orderer – 2 instance * Organizations – 2 (Org1, Org2) * Peers – 2 peers per Organization (Peer0-Org1, Peer1-Org1, Peer0-Org2, Peer1-Org2) * CouchDB – 1 per peer  ></environment> <description><! CDATA Peer data synchronization failure due to connection timeout to CouchDB. Therefore, it becomes impossible to recover Peer in these cases.     *Case 1*: Existing peer synchronizes with other/anchor peer after it starts execution  Scenario: # All Nodes (zookeepers, orderers, peers, couchDB) are running # Client application is running and adding new transactions to the Blockchain # All the peers are receiving the new blocks and their ledgers are in sync. # Peer1-Org1 is stopped # Client application is still running and adding new transactions to the Blockchain # After sending large transactions which adds approximately 1 million blocks to the ledger, start Peer1-Org1 instance  Expected:  Peer1-Org1 successfully synchronizes with other/anchor peer.  *Actual Observation:*  Peer1-Org1 instance stops execution with error. # dial tcp: lookup couchdb1 on 127.0.0.11:53: read udp 127.0.0.1:43112->127.0.0.11:53: i/o timeout     *Case 2*: New peer synchronizes with other/anchor peer after it starts execution # Peer1-Org1 failed to synchronize with other peers (as described in Case 1) # Remove Peer1-Org1 docker container # Remove CouchDB docker container associated with of Peer1-Org1 # Remove Peer1-Org1 fabric data folder # Remove the CouchDB data folder # Run CouchDB docker image (start the CouchDB instance) # Run Peer1-Org1 docker image (start Peer1-Org1 instance) # Join Peer1-Org1 to channel # Data synchronization of Peer1-Org1 started     Expected:  Peer1-Org1 successfully synchronizes with other/anchor peer.  *Actual Observation:*  Peer1-Org1 instance stops execution with error. # dial tcp: lookup couchdb1 on 127.0.0.11:53: read udp 127.0.0.1:43112->127.0.0.11:53: i/o timeout  (Note: this observation is similar to the Case 1)  *Attachments:* * Case 1 Peer1-Org1 log file * Case 2 Peer1-Org1 log file * CouchDB Peer1-Org1 log file  *Initial analysis*: CouchDB by default accepts 1024 connections. It stopped accepting new connections once this limit reached. This lead to peer failing to connect to the couchdb and stopped eventually with error.  ></description> </Issue>
