<Action id="53769" issue="35561" author="chandergovindarajan" type="comment" created="2018-11-26 05:29:49.0" updateauthor="chandergovindarajan" updated="2018-11-26 05:29:49.0"> <body><! CDATA go-plugins can only be used with dynamically linked binaries. By default the Makefile `peer-docker` build target sets docker flags for a static build. This is the cause of the errors shown above.  So something like `DOCKER_DYNAMIC_LINK=true GO_TAGS+=" pluginsenabled" make peer-docker` should work.   `make peer` does not follow the above path (no docker involved) and does not have this issue.  ></body> </Action>
<Action id="53776" issue="35561" author="rajatsharma" type="comment" created="2018-11-26 08:08:26.0" updateauthor="rajatsharma" updated="2018-11-26 08:08:26.0"> <body><! CDATA still by building using  `DOCKER_DYNAMIC_LINK=true GO_TAGS+=" pluginsenabled" make peer-docker` following error comes and peer exits : {code:java} panic: Error opening plugin at path /opt/lib/myscc.so: plugin.Open("/opt/lib/myscc"): plugin was built with a different version of package internal/cpu  goroutine 1  running : github.com/hyperledger/fabric/core/scc.loadPlugin(0xc4201aa2c0, 0x11, 0x0) /opt/gopath/src/github.com/hyperledger/fabric/core/scc/loadsysccs.go:72 +0x54d github.com/hyperledger/fabric/core/scc.loadSysCCsWithConfig(0xc4201a4878, 0x1, 0x1) /opt/gopath/src/github.com/hyperledger/fabric/core/scc/loadsysccs.go:51 +0x123 github.com/hyperledger/fabric/core/scc.loadSysCCs.func1() /opt/gopath/src/github.com/hyperledger/fabric/core/scc/loadsysccs.go:44 +0x97 sync.(*Once).Do(0x1f0d100, 0x15c8418) /opt/go/src/sync/once.go:44 +0xbe github.com/hyperledger/fabric/core/scc.loadSysCCs(0xc4201b6a50, 0x0, 0xc42009d800, 0x14aef40) /opt/gopath/src/github.com/hyperledger/fabric/core/scc/loadsysccs.go:38 +0x39 github.com/hyperledger/fabric/core/scc.CreatePluginSysCCs(0xc4201b6a50, 0xc42046a5f0, 0x166ae60, 0xc4201b6a50) /opt/gopath/src/github.com/hyperledger/fabric/core/scc/register_pluginsenabled.go:15 +0x40 github.com/hyperledger/fabric/peer/node.registerChaincodeSupport(0xc42025e230, 0xc42017d5c0, 0x1b, 0x1661b20, 0xc420184230, 0xc4202603f0, 0x164fda0, 0xc420565db0, 0xc420242e40, 0xc4200164f0, ...) /opt/gopath/src/github.com/hyperledger/fabric/peer/node/start.go:593 +0x752 github.com/hyperledger/fabric/peer/node.startChaincodeServer(0xc420038102, 0x16, 0x164fda0, 0xc420565db0, 0xc420242e40, 0xc4200164e0, 0x0, 0x0, 0x0, 0x0) /opt/gopath/src/github.com/hyperledger/fabric/peer/node/start.go:628 +0x34b github.com/hyperledger/fabric/peer/node.serve(0xc4205d9160, 0x0, 0x1, 0x0, 0x0) /opt/gopath/src/github.com/hyperledger/fabric/peer/node/start.go:230 +0x9f0 github.com/hyperledger/fabric/peer/node.glob..func1(0x1e04c40, 0xc4205d9160, 0x0, 0x1, 0x0, 0x0) /opt/gopath/src/github.com/hyperledger/fabric/peer/node/start.go:112 +0x9c github.com/hyperledger/fabric/vendor/github.com/spf13/cobra.(*Command).execute(0x1e04c40, 0xc4205d9150, 0x1, 0x1, 0x1e04c40, 0xc4205d9150) /opt/gopath/src/github.com/hyperledger/fabric/vendor/github.com/spf13/cobra/command.go:698 +0x46d github.com/hyperledger/fabric/vendor/github.com/spf13/cobra.(*Command).ExecuteC(0x1e052a0, 0x0, 0x1e045e0, 0x1e053e0) /opt/gopath/src/github.com/hyperledger/fabric/vendor/github.com/spf13/cobra/command.go:783 +0x2e4 github.com/hyperledger/fabric/vendor/github.com/spf13/cobra.(*Command).Execute(0x1e052a0, 0xc4205b7f30, 0x1) /opt/gopath/src/github.com/hyperledger/fabric/vendor/github.com/spf13/cobra/command.go:736 +0x2b main.main() /opt/gopath/src/github.com/hyperledger/fabric/peer/main.go:52 +0x2e5  {code} while it still works fine with peer-make.     ></body> </Action>
<Action id="53784" issue="35561" author="chandergovindarajan" type="comment" created="2018-11-26 08:51:16.0" updateauthor="chandergovindarajan" updated="2018-11-26 08:51:16.0"> <body><! CDATA Ya, this happens. The version of go used for compiling/building fabric (or any plugin host go program for that matter) and the plugin code should be exactly the same.   You can try compiling the plugin inside the fabric container or upgrading your system golang version to match the version inside the peer container. It's go v1.11.1 for v1.3 as far as I can see.  ></body> </Action>
<Action id="53824" issue="35561" author="rajatsharma" type="comment" body="This worked fine, the part related to System Chaincode is evasive. Thanks for helping, The documentation needs to be updated too." created="2018-11-27 07:02:45.0" updateauthor="rajatsharma" updated="2018-11-27 07:02:45.0"/>
