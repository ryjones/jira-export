<Action id="29071" issue="19510" author="muralisr" type="comment" body=" ~Baha-sk  isValidTxSim is called in contexts where a ledger is a must (e.g., for doing a GetState). System chaincode can call ledger operations just like user chaincode. Also  INVOKE_CHAINCODE uses the tx simulator too in general. Adding the ChainID check to isValidTxSim doesn&apos;t look to be a good idea. The  &quot;enterBusyState&quot; should be modified for the the narrow case of INVOKE_CHAINCODE that doesn&apos;t need txsimulator." created="2017-07-27 04:09:03.0" updateauthor="muralisr" updated="2017-07-27 04:09:03.0"/>
<Action id="29256" issue="19510" author="baha-sk" type="comment" created="2017-07-31 18:35:13.0" updateauthor="baha-sk" updated="2017-07-31 18:35:13.0"> <body><! CDATA The logic in "enterBusyState" requires to check if the current call is made by an SCC to avoid calling handler.isValidTxSim.     there is already a flag created in enterBusyStatue for this purpose (isscc). It is created way below isValidTxSim call. The solution is to pull that flag up in the function in order to verify if isValidTxSim can be called.     in short, this call:  txContext, triggerNextStateMsg = handler.isValidTxSim(msg.Txid, " %s No ledger context for %s. Sending %s", shorttxid(msg.Txid), msg.Type.String(), pb.ChaincodeMessage_ERROR)     will become:  if !isscc \{        txContext, triggerNextStateMsg = handler.isValidTxSim(msg.Txid, " %s No ledger context for %s. Sending %s", shorttxid(msg.Txid), msg.Type.String(), pb.ChaincodeMessage_ERROR) } else \{        txContext = handler.getTxContext(msg.Txid) }     with this change, I'm able to invoke an SCC without the peer having to create and join a channel. The change will be introduced with our pluggable SCC poc. Any comments about this solution are welcome.  ></body> </Action>
<Action id="29420" issue="19510" author="baha-sk" type="comment" created="2017-08-03 21:43:48.0" updateauthor="baha-sk" updated="2017-08-03 22:34:48.0"> <body><! CDATA a minor change to the conditions proposed above, I recommend removing the else conditions and make the if condition above for any CC that is not an SCC AND ChainID == "" to avoid impacting any other case requiring isValidTxSim validation. The conditions in my previous comment above will therefore be:  txContext = handler.getTxContext(msg.Txid) if !(isscc && txContext.chainID == "")\{         txContext, triggerNextStateMsg = handler.isValidTxSim(msg.Txid, " %s No ledger context for %s. Sending %s", shorttxid(msg.Txid), msg.Type.String(), pb.ChaincodeMessage_ERROR) }  ></body> </Action>
<Action id="29726" issue="19510" author="aleksandar.likic" type="comment" body="Moved to be a part of FAB-5688, as it logically belongs there." created="2017-08-11 14:36:54.0" updateauthor="aleksandar.likic" updated="2017-08-11 14:36:54.0"/>
<Action id="33323" issue="19510" author="muralisr" type="comment" body=" ~aleksandar.likic   ~Baha-sk  One of the long pending tasks for chaincode framework is to remove the FSM from the chaincode framework that was needed for serialization in 0.5 - https://jira.hyperledger.org/browse/FAB-5424.  Removing that up will also help clean other parts of that code. Rather than fix issues in the existing code, suggest we wait till that cleanup is done (within a couple of weeks tops). As your fix is narrow, it shouldn&apos;t be difficult to re-apply it once that work is done. " created="2017-10-27 19:21:16.0" updateauthor="muralisr" updated="2017-10-27 19:21:16.0"/>
<Action id="33327" issue="19510" author="baha-sk" type="comment" created="2017-10-27 21:04:21.0" updateauthor="baha-sk" updated="2017-10-27 21:04:21.0"> <body><! CDATA Thanks for the updated  ~muralisr   according to Gari, the logic of our fix may not work (i.e. check if isscc and ChainID=="")..     I'm still checking the CC2CC test case in the Unit-test to see why it fails with our logic.   ></body> </Action>
<Action id="33368" issue="19510" author="baha-sk" type="comment" created="2017-10-30 15:33:22.0" updateauthor="baha-sk" updated="2017-10-30 15:33:22.0"> <body><! CDATA  ~muralisr , I've fixed the segmentation fault error in the commit and unit tests are now passing.     The negative scenario invoking VSCC was causing the failure. Please review the latest change and provide your suggestions/recommendation.     Thank  ></body> </Action>
