<Action id="55777" issue="36365" author="sykesm" type="comment" created="2019-01-17 23:10:13.0" updateauthor="sykesm" updated="2019-01-18 12:11:44.0"> <body><! CDATA I'm assuming you're using the fabric images that are published by the project...  The peer image that's published to docker hub is built as a statically linked binary, but cgo isn't explicitly disabled. What that means in practice is that the binary includes some golang code that makes use of cgo. One of these bits of code is is the cgo implementation of DNS resolution. This gets highlighted during the build:  {code} /tmp/go-link-851602395/000004.o: In function `_cgo_18049202ccd9_C2func_getaddrinfo': /tmp/go-build/cgo-gcc-prolog:49: warning: Using 'getaddrinfo' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking  {code}  In most cases, the pure go implementation of DNS resolution is used but, in some scenarios  1 , go will try to use the native resolver library through cgo. This appears to be what is happening in your environment and is probably necessary for your configuration given  {{GODEBUG=netdns=go}} is unable to resolve the names.  Unfortunately, use of dlopen from a static binary is known to have issues. I'd recommend you try to find out why netgo isn't viable in your environment or attempt to build a peer without the static flags.  1: https://golang.org/pkg/net/#hdr-Name_Resolution  ></body> </Action>
<Action id="55790" issue="36365" author="sykesm" type="comment" created="2019-01-18 12:32:15.0" updateauthor="sykesm" updated="2019-01-18 12:32:15.0"> <body><! CDATA A couple of notes: - We’ve recently moved to an alpine based image in master and no longer build static by default. This should improve things in future releases. - https://gist.github.com/sykesm/13d33764b49dd0e7ea6ff5aae1b8da6a contains a simple program that will segfault when linked statically due to name resolution  ></body> </Action>
<Action id="57127" issue="36365" author="knagware9" type="comment" created="2019-02-18 11:37:36.0" updateauthor="knagware9" updated="2019-02-18 11:37:36.0"> <body><! CDATA I am still getting this issue ,  2019-02-18 11:34:44.207 UTC  nodeCmd  computeChaincodeEndpoint -> INFO 00d Exit with ccEndpoint: peer0.org1.example.com:70522019-02-18 11:34:44.207 UTC  nodeCmd  computeChaincodeEndpoint -> INFO 00d Exit with ccEndpoint: peer0.org1.example.com:70522019-02-18 11:34:44.207 UTC  nodeCmd  createChaincodeServer -> WARN 00e peer.chaincodeListenAddress is not set, using peer0.org1.example.com:7052fatal error: unexpected signal during runtime execution signal SIGSEGV: segmentation violation code=0x1 addr=0x63 pc=0x7f1d38323259  runtime stack:runtime.throw(0x123f0ff, 0x2a) /opt/go/src/runtime/panic.go:608 +0x72runtime.sigpanic() /opt/go/src/runtime/signal_unix.go:374 +0x2f2 goroutine 88  syscall :runtime.cgocall(0xe1bdc0, 0xc0003cf600, 0x29) /opt/go/src/runtime/cgocall.go:128 +0x5e fp=0xc0003cf5c8 sp=0xc0003cf590 pc=0x4039eenet._C2func_getaddrinfo(0xc00047da40, 0x0, 0xc000319980, 0xc00000e2e0, 0x0, 0x0, 0x0) _cgo_gotypes.go:92 +0x55 fp=0xc0003cf600 sp=0xc0003cf5c8 pc=0x615b95net.cgoLookupIPCNAME.func1(0xc00047da40, 0x0, 0xc000319980, 0xc00000e2e0, 0x17, 0x17, 0xc00018de60) /opt/go/src/net/cgo_unix.go:149 +0x131 fp=0xc0003cf648 sp=0xc0003cf600 pc=0x61b2b1net.cgoLookupIPCNAME(0xc00047d760, 0x16, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0) /opt/go/src/net/cgo_unix.go:149 +0x153 fp=0xc0003cf738 sp=0xc0003cf648 pc=0x617153net.cgoIPLookup(0xc000338660, 0xc00047d760, 0x16) /opt/go/src/net/cgo_unix.go:201 +0x4d fp=0xc0003cf7c8 sp=0xc0003cf738 pc=0x61780druntime.goexit() /opt/go/src/runtime/asm_amd64.s:1333 +0x1 fp=0xc0003cf7d0 sp=0xc0003cf7c8 pc=0x45dc81created by net.cgoLookupIP /opt/go/src/net/cgo_unix.go:211 +0xad  ></body> </Action>
<Action id="60432" issue="36365" author="mahoney1" type="comment" created="2019-05-28 12:11:46.0" updateauthor="mahoney1" updated="2019-05-28 12:11:46.0"> <body><! CDATA  ~sykesm  I've seen the CGO issue surface too, so just adding a comment here - I am using 1.4.1 images just fyi.  In my case, I'm starting a local Fabric using the VS Code extension on Ubuntu 18.04.2 LTS bionic. Are we saying the resolution is to explicitly set the `- GODEBUG=netdns=go` in your environment section (ie for the nodes in your Fabric docker-compose file - which of course works fine, and I can set it)?.    5/28/2019 12:01:30 PM   INFO  Hyperledger Fabric started in 2 seconds  5/28/2019 12:01:30 PM   INFO  2019-05-28 12:01:30.629 UTC  channelCmd  InitCmdFactory -> INFO 001 Endorser and orderer connections initialized  5/28/2019 12:01:30 PM   INFO  Error: received bad response, status 500: Invalid chain ID, mychannel  5/28/2019 12:01:30 PM   INFO  2019-05-28 12:01:30.847 UTC  channelCmd  InitCmdFactory -> INFO 001 Endorser and orderer connections initialized  5/28/2019 12:01:30 PM   INFO  fatal error: unexpected signal during runtime execution  5/28/2019 12:01:30 PM   INFO   signal SIGSEGV: segmentation violation code=0x1 addr=0x63 pc=0x7f328cba6259   5/28/2019 12:01:30 PM   INFO  runtime stack:  5/28/2019 12:01:30 PM   INFO  runtime.throw(0x1272c18, 0x2a)  5/28/2019 12:01:30 PM   INFO  /opt/go/src/runtime/panic.go:608 +0x72  5/28/2019 12:01:30 PM   INFO  runtime.sigpanic()  5/28/2019 12:01:30 PM   INFO  /opt/go/src/runtime/signal_unix.go:374 +0x2f2  5/28/2019 12:01:30 PM   INFO  goroutine 50  syscall :  5/28/2019 12:01:30 PM   INFO  runtime.cgocall(0xe455e0, 0xc000455600, 0x29)  5/28/2019 12:01:30 PM   INFO  /opt/go/src/runtime/cgocall.go:128 +0x5e fp=0xc0004555c8 sp=0xc000455590 pc=0x4039ee  5/28/2019 12:01:30 PM   INFO  net._C2func_getaddrinfo(0xc000162480, 0x0, 0xc00012b1a0, 0xc0001720c0, 0x0, 0x0, 0x0)  5/28/2019 12:01:30 PM   INFO  _cgo_gotypes.go:91 +0x55 fp=0xc000455600 sp=0xc0004555c8 pc=0x616c85  5/28/2019 12:01:30 PM   INFO  net.cgoLookupIPCNAME.func1(0xc000162480, 0x0, 0xc00012b1a0, 0xc0001720c0, 0x14, 0x14, 0xbf3366a6f294461d)  5/28/2019 12:01:30 PM   INFO  /opt/go/src/net/cgo_unix.go:149 +0x131 fp=0xc000455648 sp=0xc000455600 pc=0x61c3b1  5/28/2019 12:01:30 PM   INFO  net.cgoLookupIPCNAME(0x7ffd3d8faae3, 0x13, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)  5/28/2019 12:01:30 PM   INFO  /opt/go/src/net/cgo_unix.go:149 +0x153 fp=0xc000455738 sp=0xc000455648 pc=0x618243  5/28/2019 12:01:30 PM   INFO  net.cgoIPLookup(0xc000141680, 0x7ffd3d8faae3, 0x13)  5/28/2019 12:01:30 PM   INFO  /opt/go/src/net/cgo_unix.go:201 +0x4d fp=0xc0004557c8 sp=0xc000455738 pc=0x6188fd  5/28/2019 12:01:30 PM   INFO  runtime.goexit()  5/28/2019 12:01:30 PM   INFO  /opt/go/src/runtime/asm_amd64.s:1333 +0x1 fp=0xc0004557d0 sp=0xc0004557c8 pc=0x45de51  5/28/2019 12:01:30 PM   INFO  created by net.cgoLookupIP  5/28/2019 12:01:30 PM   INFO  /opt/go/src/net/cgo_unix.go:211 +0xad  5/28/2019 12:01:30 PM   INFO  goroutine 1  select :  5/28/2019 12:01:30 PM   INFO  github.com/hyperledger/fabric/vendor/google.golang.org/grpc.(*ClientConn).WaitForStateChange(0xc000229080, 0x13b7a60, 0xc000140ea0, 0x1, 0xc00018b301)     ></body> </Action>
<Action id="61497" issue="36365" author="mastersingh24" type="comment" body="Not sure if there&apos;s anything we should really do at this point for the 1.4.x line .... we could explicitly try to disable cgo in our static builds ... but I think moving forward with 2.x things should generally be fine." created="2019-07-07 11:13:09.0" updateauthor="mastersingh24" updated="2019-07-07 11:13:09.0"/>
<Action id="61520" issue="36365" author="sykesm" type="comment" created="2019-07-08 18:33:20.0" updateauthor="sykesm" updated="2019-07-08 18:33:20.0"> <body><! CDATA > Are we saying the resolution is to explicitly set the `- GODEBUG=netdns=go` in your environment section (ie for the nodes in your Fabric docker-compose file - which of course works fine, and I can set it)?.  You should try that. It will force the go runtime to use the pure-go implementation of DNS resolution under linux. If you have a conventional /etc/resolv.conf with a {{nameserver}} line that points to an address that can resolve the names used within your environment, you should be fine. If not, we don't have a good answer until the 2.x stream.  Details on the resolution constraints are in the go source: https://golang.org/src/net/net.go  ></body> </Action>
<Action id="66801" issue="36365" author="mrudav.shukla" type="comment" created="2020-01-20 14:08:09.0" updateauthor="mrudav.shukla" updated="2020-01-20 14:08:09.0"> <body><! CDATA I have my setup on aws eks. For the peer and orderer, I have created my custom images from hyperledger/fabric-peer:1.4.3 and hyperledger/fabric-orderer:1.4.3 and I am pushing and pulling them from aws elastic container repositories. I have been able to setup the network, the peers are able to create and join the channel. When I try to install the chaincode in the peer, I get the following error:    {code:java} fatal error: unexpected signal during runtime execution  signal SIGSEGV: segmentation violation code=0x1 addr=0xe5 pc=0x7f91000763f8  runtime stack: runtime.throw(0x128d76a, 0x2a) /opt/go/src/runtime/panic.go:608 +0x72 runtime.sigpanic() /opt/go/src/runtime/signal_unix.go:374 +0x2f2 goroutine 1  syscall : runtime.cgocall(0xe5b6c0, 0xc00043ed40, 0x29) {code}       However, when I retry consequently, out of 10, 3 times the request completes successfully. Of course, considering if the chaincode is already installed, it shows an appropriate message.     Another thing that I noted is if I use any of the fabric-samples chaincode, say, fabcar. I am able install and instantiate it successfully each time.  Referring to this ticket, I have also checked if GODEBUG path is set correctly in the container and it is set to netdns=go. What could be the cause of this error?  Apart from this, I am not able to instantiate the installed chaincode as well, the peer logs shows the following error: 2020-01-20 12:10:04.166 UTC  endorser  SimulateProposal -> ERRO fe33d  testchannel  526d30b4  failed to invoke chaincode name:"lscc" , error: container exited with 12020-01-20 12:10:04.166 UTC  endorser  SimulateProposal -> ERRO fe33d  testchannel  526d30b4  failed to invoke chaincode name:"lscc" , error: container exited with 1github.com/hyperledger/fabric/core/chaincode.(*RuntimeLauncher).Launch.func1 /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/runtime_launcher.go:63runtime.goexit /opt/go/src/runtime/asm_amd64.s:1333chaincode registration failed    Is it that I've to build my peer images using hyperledger/fabric-peer:amd64-1.4.3 rather than hyperledger/fabric-peer:1.4.3?  ></body> </Action>
<Action id="66866" issue="36365" author="mastersingh24" type="comment" created="2020-01-21 19:53:59.0" updateauthor="mastersingh24" updated="2020-01-21 19:53:59.0"> <body><! CDATA  ~mrudav.shukla  - are you seeing this error when you try to use the peer as a CLI to install chaincode or is your actual peer crashing? Might be helpful if we can see a bit more of the log.  ></body> </Action>
<Action id="66891" issue="36365" author="mrudav.shukla" type="comment" created="2020-01-22 13:59:18.0" updateauthor="mrudav.shukla" updated="2020-01-22 13:59:18.0"> <body><! CDATA  ~mastersingh24 : Yes. I am using peer as a CLI to install the chaincode. Attaching the complete logs here:  ^chaincode_installation_logs.txt         ></body> </Action>
<Action id="66892" issue="36365" author="sykesm" type="comment" created="2020-01-22 14:44:25.0" updateauthor="sykesm" updated="2020-01-22 14:44:25.0"> <body><! CDATA From the logs, you're hitting the other bit of the go runtime that requires cgo: the user and groups from /etc/passwd and friends.  Same basic problems with uid/gid and DNS. When the binaries are built as static, go cannot use the necessary cgo functions.  Same suggestion: build a dynamically linked peer and peer cli and this problem will go away.  ></body> </Action>
<Action id="70786" issue="36365" author="manish-sethi" type="comment" body="Please feel free to open if you see a real issue in this context." created="2020-11-23 15:26:15.0" updateauthor="manish-sethi" updated="2020-11-23 15:26:15.0"/>
