<Action id="42688" issue="29088" author="mastersingh24" type="comment" created="2018-04-08 15:52:12.0" updateauthor="mastersingh24" updated="2018-04-08 15:52:12.0"> <body><! CDATA  ~rhegde  I looked through the code and did not find any path which would result in a transaction being marked as valid if it does not satisfy the endorsement policy.  Note that all transactions will still be included in the block but you can check the status of the transaction in the block metadata.   ~jyellick   ~ales  Can you guys take a look and make sure I did not miss anything?  ></body> </Action>
<Action id="42712" issue="29088" author="ales" type="comment" created="2018-04-09 10:22:15.0" updateauthor="ales" updated="2018-04-09 10:22:15.0"> <body><! CDATA The validator code indeed only verifies endorsement policies for a chaincode if that chaincode is being written to. In particular # namespaces that are being written to are collected here ( https://github.com/hyperledger/fabric/blob/release-1.1/core/committer/txvalidator/validator.go#L680-L682 ) # for each of those, the appropriate VSCC is called ( https://github.com/hyperledger/fabric/blob/release-1.1/core/committer/txvalidator/validator.go#L757-L784 )  If a transaction contains a read-write set for a namespaces, and that read-write set only contains read dependencies (and no writes), then the VSCC for that namespace isn't called. As an example, think of LSCC: every transaction contains a read dependency on a KVS key belonging to the LSCC namespace, but only transactions that write to the LSCC namespace are validated against the custom VSCC for LSCC.   ~rhegde  could you please clarify what attack you have in mind? So far I can see how a peer that doesn't comply with a chaincode's endorsement policy may respond to queries on that chaincode. If this is the attack, I'm tempted to say this is WAD, since a peer is free to respond to chaincode queries to any clients it trusts, free of any fabric security mechanisms (unless encryption or SideDB are employed to protect confidentiality). I'm probably missing something, could you elaborate in more details pls?  ></body> </Action>
<Action id="42781" issue="29088" author="rhegde" type="comment" created="2018-04-10 16:16:28.0" updateauthor="rhegde" updated="2018-04-10 16:18:17.0"> <body><! CDATA Currently the read-write set records are not passed by the committing peer to the client (FAB-9408). So HFC Client in our case 1.0.x passes a JSON information during Endorsement Proposal processing that will help client to understand the action to be taken whenever a ledger transaction is marked as valid.  Rogue Client can now manipulate JSON information and can send to a chaincode business invoke API (apart from query, we use some business invoke API for relaying the information across joined participant to the channel) that does not produces write-set. Client upon receiving this endorsement proposal response will broadcast to the orderer to be delivered to the peer. Peer will not enforce endorsement policy validation for the channel and hence the transaction will be marked as valid. This block transaction will be evented out to every joined participant for that channel to perform action on the (falsely) marked valid ledger transaction using the manipulated JSON information that is passed by rogue client. There is no damage done to the fabric ledger but to the client store across participants joined to that channel.  There are other FABs like -FAB-6816- which is worsening this problem.  ></body> </Action>
<Action id="42816" issue="29088" author="mastersingh24" type="comment" body=" ~rhegde  - do clients include this JSON parameter in query requests as well?" created="2018-04-11 11:05:05.0" updateauthor="mastersingh24" updated="2018-04-11 11:05:05.0"/>
<Action id="42828" issue="29088" author="rhegde" type="comment" body="yes Gari. Client will send the JSON request object where chaincode as recipient will parse only the expected JSON object (and ignore rest) and return a response to it." created="2018-04-11 16:01:10.0" updateauthor="rhegde" updated="2018-04-11 16:01:10.0"/>
