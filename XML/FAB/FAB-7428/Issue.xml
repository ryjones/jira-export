<Issue id="25402" key="FAB-7428" number="7428" project="10002" reporter="ysim" assignee="sykesm" creator="ysim" type="10004" summary="getPemMaterialFromDir does not properly evaluate symlinks" priority="3" resolution="10000" status="6" created="2017-12-11 22:30:03.0" updated="2018-07-20 14:15:14.0" resolutiondate="2018-01-11 18:55:53.0" votes="0" watches="3" timeoriginalestimate="3600" timeestimate="0" workflowId="40775"> <description><! CDATA This issue was discovered while attempting to set up a fabric network using Kubernetes, though I suspect making the requisite changes might be helpful for other deployment setups down the line.   Kubernetes' Secrets management|https://kubernetes.io/docs/concepts/configuration/secret/  is well-suited to store the crypto material (e.g. the contents of the msp and tls directories) of the various peer/orderer/CA components. However, in Kubernetes, Secrets are made available via symlinks. For instance, this is what the msp/cacerts directory looks like when mounted as a volume populated by Kubernetes secrets:    {code:java} root@orderer:/var/hyperledger/orderer/msp/cacerts# ls -al  total 4  drwxrwxrwt 3 root root 100 Dec 11 20:04 .  drwxr-xr-x 7 root root 4096 Dec 11 20:04 ..  drwxr-xr-x 2 root root 60 Dec 11 20:04 ..129812_11_12_20_04_36.809431284  lrwxrwxrwx 1 root root 33 Dec 11 20:04 ..data -> ..129812_11_12_20_04_36.809431284  lrwxrwxrwx 1 root root 31 Dec 11 20:04 ca.example.com-cert.pem -> ..data/ca.example.com-cert.pem {code} The problem is that getPemMaterialFromDir does not traverse symlinks, and if it does, it should also check that the source of the symlink is not a directory. In other words, it should only read from regular files and links to regular files.  This change would make deploying the fabric network using Kubernetes a lot smoother.     ></description> </Issue>
