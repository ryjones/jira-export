<Issue id="35122" key="FAB-12739" number="12739" project="10002" reporter="tparth" creator="tparth" type="10001" summary="Make chaincodes first class citizens on the platform by giving them identity" priority="3" resolution="10001" status="6" created="2018-11-06 07:57:18.0" updated="2020-01-22 22:32:17.0" resolutiondate="2020-01-22 22:32:17.0" votes="1" watches="2" workflowId="46557"> <description><! CDATA Currently, while chaincode-calling-chaincode is supported, the called chaincode doesn't know the identity of the calling chaincode. This prevents applications from developing ERC20-like features. Specifically, the applications cannot implement the {{tranferFrom()}} and {{approve()}} functions in case the addresses involved are those of smart contracts. In the Ethereum world, this is possible because smart contract accounts are not much different from user accounts. The same is not the case in Fabric.  In Fabric, chaincodes do have some form of identity, however. That is how one chaincode can call another chaincode - using its 'identity'. To solve the problem mentioned above, I propose that in chaincode-calling-chaincode scenarios, we make the caller chaincode information available to the callee chaincode, where the information can be some function of Channel and Chaincode Id.  While  this SO answer|https://stackoverflow.com/a/51808454  provides a partial solution, it requires extra work from the platform user and it doesn't handle the case where a complex chain of chaincodes invocation (e.g. C1 calling C2 calling C3)  ></description> </Issue>
