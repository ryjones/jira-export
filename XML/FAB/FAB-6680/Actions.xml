<Action id="35465" issue="22492" author="denyeart" type="comment" created="2017-11-27 04:51:50.0" updateauthor="denyeart" updated="2017-11-27 04:51:50.0"> <body><! CDATA  ~thakkarparth007  Do you intend to fix?  ~yacovm   ~C0rWin  FYI  ></body> </Action>
<Action id="35479" issue="22492" author="thakkarparth007" type="comment" body="I did make a tiny change which _should_ fix it ( https://github.com/thakkarparth007/fabric/commit/0944ca6943fa1ec6afc6699a63aa8d2893c8b513),  but for some reason creating multiple channels at a time still fails. Not entirely sure why. I&apos;ll get back with more details shortly." created="2017-11-27 06:47:58.0" updateauthor="thakkarparth007" updated="2017-11-27 06:47:58.0"/>
<Action id="35723" issue="22492" author="thakkarparth007" type="comment" created="2017-12-01 16:09:27.0" updateauthor="thakkarparth007" updated="2017-12-01 16:09:27.0"> <body><! CDATA Not entirely sure what's going on when I'm trying to create multiple channels at once. There seems to be a deadlock. Only one channel gets created, and the others just get stuck.  I'm using the command line scripts (a modified version of the byfn.sh) to create multiple channels at once. Creating the channels serially works, but in parallel doesn't seem to work. As far as I know the client side isn't at fault here, but not entirely sure of that. The reason I'm not sure is that invoking chaincodes across multiple channels in parallel works fine.  Just reporting the symptoms since I'm not sure what's going on behind the scene here.  ></body> </Action>
<Action id="38920" issue="22492" author="yacovm" type="comment" created="2018-01-20 09:18:04.0" updateauthor="yacovm" updated="2018-01-20 09:18:04.0"> <body><! CDATA  ~thakkarparth007  channel creation isn't related to gossip.   ~scottz  ,  ~bmos299  - do you guys have a system test in which peers participate in multiple channels?  ></body> </Action>
<Action id="38924" issue="22492" author="scottz" type="comment" created="2018-01-20 17:29:45.0" updateauthor="scottz" updated="2018-01-20 17:29:45.0"> <body><! CDATA Yes. The ones we've run most recently with PTE use 2 channels, but we've done more in the past. We use a script to create all the channels and then join all the peers to all of the channels.  ~dongming  is busy with testing the block filtering feature, but I'll ask him to run a test with more channels this week.  I am curious to know exactly what is meant by "serially" versus "in parallel".Â   ~thakkarparth007 , are you using go threads to drive the BYFN script to create the channels in parallel threads? And I haven't looked at it from that perspective, but, is it possible that script is not designed to be threadsafe?  ></body> </Action>
<Action id="39517" issue="22492" author="c0rwin" type="comment" created="2018-02-01 15:48:44.0" updateauthor="c0rwin" updated="2018-02-01 15:48:44.0"> <body><! CDATA {quote} commChan's filtering didn't have an explicit check to see if the message belonged to the same Fabric channel that this GossipState was handling {quote}  so just to clarify, there is a code which explicitly checks whenever the message is belongs to particular channel gossip state responsible to handle, e.g.:  {code} 	remoteStateMsgFilter := func(message interface{}) bool { 		receivedMsg := message.(proto.ReceivedMessage) 		msg := receivedMsg.GetGossipMessage() 		if !(msg.IsRemoteStateMessage() || msg.GetPrivateData() != nil) { 			return false 		} 		// Ensure we  deal only with messages that belong to this channel 		if !bytes.Equal(msg.Channel,   byte(chainID)) { 			return false 		} 		connInfo := receivedMsg.GetConnectionInfo() 		authErr := services.VerifyByChannel(msg.Channel, connInfo.Identity, connInfo.Auth.Signature, connInfo.Auth.SignedData) 		if authErr != nil { 			logger.Warning("Got unauthorized request from", string(connInfo.Identity)) 			return false 		} 		return true 	} {code}  in particular those lines taking care of it:  {code} 		// Ensure we  deal only with messages that belong to this channel 		if !bytes.Equal(msg.Channel,   byte(chainID)) { 			return false 		} {code}  Now, to the serial versus parallel channel creation:  {quote} I'm using the command line scripts (a modified version of the byfn.sh) to create multiple channels at once. Creating the channels serially works, but in parallel doesn't seem to work. As far as I know the client side isn't at fault here, but not entirely sure of that. The reason I'm not sure is that invoking chaincodes across multiple channels in parallel works fine. {quote}   ~thakkarparth007  Could you please open a separate JIRA item with more detailed explanation of what exactly do you mean while talking about parallel channel and how we actually could reproduce your issue?  Closing this item, since per JIRA description and details code works exactly as expected, i.e. gossip state filters inter-peer messages based on channel.  ></body> </Action>
