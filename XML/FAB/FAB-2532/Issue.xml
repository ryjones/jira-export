<Issue id="15099" key="FAB-2532" number="2532" project="10002" reporter="greg.haskins" creator="greg.haskins" type="10001" summary="chaincode.proto schema no longer makes sense and is confusing clients" priority="1" resolution="10001" status="6" created="2017-02-28 14:52:51.0" updated="2020-01-22 18:53:27.0" resolutiondate="2020-01-22 18:53:27.0" votes="0" watches="1" workflowId="35084"> <description><! CDATA We currently have a "one-size fits all" approach in the protocol schema for dealing with chaincode deployment and upgrade.  Part of this is a vestige from the time before upgrade, non-golang code, and the NVP/CLI architecture.  For example: "path" makes sense if you are an NVP from the old architecture and need to know where the find the source.  However, once the code is packaged, we are overloading "path" to mean "golang package".  And this doesn't make sense if you are deploying something != golang, such as CAR or JAVA.  Another thing that doesn't make sense is we include the Type of chaincode in every invoke.  This is only relevant when the chaincode is deployed/upgraded.  This became substantially worse with the advent of CR5555 and the new delineation between install() and instantiate().  We are still using a deployment-spec for instantiate/upgrade when they really should only be referring to an image that was installed by install().  There are numerous examples of this nature in the current schema that I won't outline right here.  However, the net effect of all this is that the overloading is very confusing to clients.  The result is that it's not very clear how to drive the API.  I see a combination of clients hammering fields that have no meaning because either they have to to work-around a bug, or they are unsure if its needed.  In other cases, bugs are cropping up because a field that should have not been relevant to complete the desired function still has validation checks that are enforcing its inclusion.  An overhaul of the chaincode.proto is desperately needed, and I would suggest it is important to get this part of the ABI right now rather than be stuck with it for v1.0 and beyond.  ></description> </Issue>
