<Issue id="26982" key="FAB-7840" number="7840" project="10002" reporter="vdods" creator="vdods" type="10001" summary="Silent failure for certain invalid data" priority="4" resolution="10001" status="6" created="2018-01-22 09:29:12.0" updated="2020-01-22 22:23:40.0" resolutiondate="2020-01-22 22:23:40.0" votes="0" watches="3" workflowId="35498"> <description><! CDATA Running configtxgen on configtx.yaml.bad exits with error but gives no indication of what the cause of error was.     {{rm -f configtx.yaml}} {{ln -s configtx.yaml.bad configtx.yaml}} {{export FABRIC_CFG_PATH=.}} {{configtxgen -profile SimpleOrdererGenesis -outputBlock orderer-genesis.block}}     The problem turned out to be that one element in the config YAML data had the wrong type (list of dicts instead of list of strings) due to the presence of an errant space.  Running configtxgen on configtx.yaml.good gets past that problem (though exits with error as expected, because we're not bothering to provide it with all the MSP materials it's looking for). {code:java} rm -f configtx.yaml ln -s configtx.yaml.good configtx.yaml export FABRIC_CFG_PATH=. configtxgen -profile SimpleOrdererGenesis -outputBlock orderer-genesis.block{code} If one were to provide MSP materials as advertised in configtx.yaml.good, then this command would succeed.  In particular, the error stemmed from this line in configtx.yaml.bad: {code:java} ... Kafka: Brokers: - 127.0.0.1: 9092 ...{code} Notice the space before the port number.  The same line in configtx.yaml.good is {code:java} ... Kafka: Brokers: - 127.0.0.1:9092 ... {code} A fix for this would print an error message indicating that the "Orderer.Kafka.Brokers" element had the wrong type (and what type it expected), and ideally the line number of that element in the file.  ></description> </Issue>
