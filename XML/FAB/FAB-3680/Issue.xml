<Issue id="16363" key="FAB-3680" number="3680" project="10002" reporter="dzhoou" creator="dzhoou" type="10004" summary="Chaincode deployment fails with static Orgleader" priority="3" resolution="10000" status="6" created="2017-05-05 14:46:21.0" updated="2018-07-20 14:12:35.0" resolutiondate="2017-06-07 11:59:11.0" votes="0" watches="3" workflowId="38352"> <description><! CDATA Recently there was an issue deploying chaincode, when we want to obtain the following peer configuration:  {code} peer0                                   peer1 ----------------                        ---------------- |     cc0      | =======channel0======= |     cc0      | ----------------                        ---------------- |              |        channel1======= |     cc1      | ----------------                        ---------------- {code}    where: *     peer0 and peer1 are in the same organization, with peer0 as the OrgLeader (CORE_PEER_GOSSIP_ORGLEADER=true) *     channel0, carrying the chaincode cc0, is joined to peer0 and peer1 *     channel1, carrying cc1, is joined to peer1 only  And cc1 invocations would fail with an error like "failed to obtain cds for cc1 - transaction not found cc1/channel1".  This error indicates that the cc1 was not found on channel1, despite install and instantiate calls coming through in the init script.  Here is my understanding of the problem:  *     Chaincodes instantiations are recorded in a transaction proposal, and when approved, recorded in a block *     Blocks are propagated by the OrgLeader through Gossip messages *     The OrgLeader can only send Gossip messages to channels it is joined to  And the problem occurs when:  *     Chaincodes are instantiated on peer1, channel1 *     Since peer0, the OrgLeader, does not have access to the channel1, it cannot propagate chaincode blocks to channel1 through Gossip *     peer1 does not receive chaincode blocks, even though the endorsement was received  And since peer cannot find deployed chaincodes in its blocks, chaincode invocation fails.  Possible changes: *     "peer chaincode instantiate" should wait for actual chaincode block event before returning success. Right now it returns success despite the fact that chaincode blocks are not added. *     Change the way OrgLeader behaves, either: **        make chaincode block delievery not depend on OrgLeader (have channel-specific leaders instead?) **        make OrgLeader able to deliver blocks to any channel, regardless of its membership in that channel  To reproduce the problem, copy the following attached files:  {code} cp script.sh $GOPATH/src/github.com/hyperledger/fabric/examples/e2e_cli/scripts/ cp peer-base.yaml $GOPATH/src/github.com/hyperledger/fabric/examples/e2e_cli/base/ cp docker-compose-base.yaml $GOPATH/src/github.com/hyperledger/fabric/examples/e2e_cli/base/ {code}  and run {code} cd $GOPATH/src/github.com/hyperledger/fabric/examples/e2e_cli ./network_setup.sh up {code} The script should timeout during query/invoke actions and return error.  ></description> </Issue>
