<Issue id="12541" key="FAB-240" number="240" project="10002" reporter="ryokawajp" creator="ryokawajp" type="10004" summary="Query result of a string which contains &apos;%&apos; (percent symbol) is converted unexpectedly in the REST API" priority="4" resolution="10000" status="6" created="2016-08-24 12:26:05.0" updated="2018-07-20 14:10:05.0" resolutiondate="2017-04-09 21:03:58.0" votes="0" watches="4" workflowId="36124"> <environment><! CDATA - I obtained the source code of Fabric on April 24th. - Go version 1.6 linux/amd64 - security = off   ></environment> <description><! CDATA h3. Migrated from GitHub: Query result of a string which contains '%' (percent symbol) is converted unexpectedly in the REST API. · Issue #1517 · hyperledger/fabric https://github.com/hyperledger/fabric/issues/1517 Please consult the link above for additional comments.  h2. Description When a Query method of a chaincode returns a string which includes '%' character, it causes a problem that the letters after % is converted to unexpected string, or sometimes removed. For example, "100% yuki" becomes "100%!y(MISSING)uki".  This happens in REST API only. CLI is OK.  This behavior is similar to that of fmt.Printf(), where % is a special character. I tried to read the Fabric source code, but I could not identify the code which causes this conversion. Is this a known issue? Any comments are welcome.  h2. Describe How to Reproduce - Deploy the following chaincode. - Run a query from REST API. The returned value will be "100%!y(MISSING)uki", while the expected value is "100% yuki". - Run a query from CLI. The returned value will be "100% yuki". This is correct. - I used --peer-chaincodedev option. - I obtained the source code of Fabric on April 24th. - Go version 1.6 linux/amd64 - security = off  {code} package main import ( 	"fmt" 	"github.com/hyperledger/fabric/core/chaincode/shim" ) type SimpleChaincode struct { } func (t *SimpleChaincode) Init(stub *shim.ChaincodeStub, function string, args   string) (  byte, error) { 	return nil, nil } func (t *SimpleChaincode) Invoke(stub *shim.ChaincodeStub, function string, args   string) (  byte, error) { 	return nil, nil } func (t *SimpleChaincode) Query(stub *shim.ChaincodeStub, function string, args   string) (  byte, error) { 	response := "100% yuki" 	return   byte(response), nil } func main() { 	err := shim.Start(new(SimpleChaincode)) 	if err != nil { 		fmt.Printf("Error starting Simple chaincode: %s", err) 	} } {code} POST /chaincode  body {code} { "jsonrpc": "2.0", "method": "query", "params": { "type": 1, "chaincodeID":{ "name":"chaincode_percentbug" }, "ctorMsg": { "function":"query", "args":   }, "secureContext": "test_user0" }, "id": 5 } {code}  ></description> </Issue>
