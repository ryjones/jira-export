<Issue id="15522" key="FAB-2943" number="2943" project="10002" reporter="yacovm" assignee="yacovm" creator="yacovm" type="10004" summary="Committer implementation reports an error on failure of publishing a block committing event." priority="3" resolution="10000" status="6" created="2017-03-30 11:50:58.0" updated="2018-07-20 14:12:05.0" resolutiondate="2017-04-11 20:27:04.0" votes="0" watches="1" workflowId="37878"> <description><! CDATA Scenario: if from some reason, an events consumer is connected to the peer and subscribes to block events, and from some reason- the publishing to that consumer by the peer fails, the peer logs the following output:  2017-03-30 07:26:43.881 EDT  committer  Commit -> ERRO d10dc Error sending block event could not send the blocking event 2017-03-30 07:26:43.881 EDT  gossip/state  commitBlock -> ERRO d10dd Got error while committing(Error sending block event could not send the blocking event)  The code of the committer that is relevant to the section is below: {code} func (lc *LedgerCommitter) Commit(block *common.Block) error { 	// Validate and mark invalid transactions 	logger.Debug("Validating block") 	if err := lc.validator.Validate(block); err != nil { 		return err 	}  	if err := lc.ledger.Commit(block); err != nil { 		return err 	}  	// send block event *after* the block has been committed 	if err := producer.SendProducerBlockEvent(block); err != nil { 		logger.Errorf("Error sending block event %s", err) 		return fmt.Errorf("Error sending block event %s", err) 	}  	return nil } {code}  When this function fails due to inability of publishing a block event, an error is returned to the gossip state transfer layer, and the ledger height gossiped to peers isn't updated. In my opinion, the committer Commit function shouldn't return an error if it can't publish a block event to a connected events client.    ~muralisr   ~binhn   ~C0rWin   ~mastersingh24   ></description> </Issue>
