<Issue id="35871" key="FAB-13161" number="13161" project="10002" reporter="joe-alewine" assignee="joe-alewine" creator="joe-alewine" type="10100" summary="Add tips and tricks to couchDB doc" priority="2" resolution="10000" status="6" created="2018-12-04 16:56:24.0" updated="2018-12-09 03:17:49.0" resolutiondate="2018-12-09 03:17:49.0" votes="0" watches="1" workflowId="47371"> <description><! CDATA When using JSON queries: * be sure to create indexes in the chaincode package. * avoid query operators such as {{$or}}, {{$in}} and {{$regex}}, which lead to full DB scan  For both range and JSON queries: * donâ€™t query entire state database for purpose of aggregate reporting * utilize paging support (as of v1.3) instead of one large result set  For reporting/aggregate queries, utilize a fit-for-purpose data store. We need some wording in RTD similar to what was added in node.js sdk event tutorial:  Applications may use block or chaincode events to provide channel  data to other applications. For example an application could listen for  block events and write transaction data to a data store for the purpose  of performing queries or other analytics against the channel's data. For each block received, the block listener application could iterate  through the block transactions, and build a data store using the  key/value writes from each valid transaction's 'rwset'  Also, recommend replicating all the ledger data to an off chain database and use the replica for dashboard (client application) queries instead of the blockchain ledger.  To this doc:  https://hyperledger-fabric.readthedocs.io/en/latest/couchdb_as_state_database.html {{}}  ></description> </Issue>
