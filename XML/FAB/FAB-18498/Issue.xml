<Issue id="46946" key="FAB-18498" number="18498" project="10002" reporter="JIRAUSER21452" creator="JIRAUSER21452" type="10004" summary="Chaincode approval is only on metadata, not chaincode implementation" priority="2" resolution="10203" status="6" created="2021-06-16 11:32:29.0" updated="2021-08-17 03:33:18.0" resolutiondate="2021-08-17 03:33:18.0" votes="0" watches="3" workflowId="60857" archived="N"> <description><! CDATA When installing or updating a chaincode on an application channel, this chaincode must first be approved (by a majority of channel participants by default) before it can be used.  Yet, in an experiment, I found that approving the chaincode only takes the metadata of the chaincode into account, such as label, version et cetera. The actual code of the chaincode is never part of the approval phase. As such, every single node in the network can have a different implementation of the chaincode, while still being approved appropriately. This is very simple to try out. You simply add more lines of code to a copy of the smart contract, package it, install them on different peers, and you'll see the approval and txs succeed.   As a consequence, any node is able to add lines such as: _if client identity is (not from) organization X, do not endorse the request_ resulting in greedy/selfish organizations and peers. Another way this can be (ab)used is to interact with local databases to fetch or store data (such as for logging or decision making).     Although I expect this aspect to be a bug, the above examples show how it can be used for legitimate use cases in some scenarios. Either way, it should either be documented that there is no guarantee that all organizations share the same chaincode implementation/code, or the approval process should be revisited to include (a hash of the) chaincode's code.  ></description> </Issue>
