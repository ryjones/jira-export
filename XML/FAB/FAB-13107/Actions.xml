<Action id="54242" issue="35797" author="jyellick" type="comment" body="It does look like there&apos;s some problems with transitive dependencies not being resolved correctly.  As best as I can tell, the direct import of the fabric code is ignored, but then one of its imports also imports fabric, and this is not being stripped out.  I am a little concerned about the potential impacts for users though who may already be used to this behavior.  Would welcome other input.  ~greg.haskins   ~mastersingh24 " created="2018-12-04 06:36:47.0" updateauthor="jyellick" updated="2018-12-04 06:36:47.0"/>
<Action id="54265" issue="35797" author="ping40" type="comment" created="2018-12-04 10:36:43.0" updateauthor="ping40" updated="2018-12-04 10:36:43.0"> <body><! CDATA *Option one：*  If platform.GetDeploymentPayload  excludes all dependency source files of the-two-packages , it means that platform.GetDeploymentPayload  should find the following packages in gopath: "github.com/hyperledger/fabric/core/chaincode/shim""github.com/hyperledger/fabric/protos/peer"    It leads the following unit test fails:    {code:java} func TestGetDeploymentPayload(t *testing.T) { testdataPath, err := filepath.Abs("testdata") ....... { {gopath: defaultGopath, path: "github.com/hyperledger/fabric/examples/chaincode/go/map", succ: true}, {gopath: defaultGopath, path: "github.com/hyperledger/fabric/examples/bad/go/map", succ: false}, {gopath: testdataPath, path: "chaincodes/BadImport", succ: false}, {gopath: testdataPath, path: "chaincodes/BadMetadataInvalidIndex", succ: false}, {gopath: testdataPath, path: "chaincodes/BadMetadataUnexpectedFolderContent", succ: false}, {gopath: testdataPath, path: "chaincodes/BadMetadataIgnoreHiddenFile", succ: true}, {gopath: testdataPath, path: "chaincodes/empty/", succ: false}, }  {code}    Maybe platform.GetDeploymentPayload  can omit the error when it cannot find "github.com/hyperledger/fabric/core/chaincode/shim" in gopath.     *Option two：*  If platform.GetDeploymentPayload  excludes only the two packages: "github.com/hyperledger/fabric/core/chaincode/shim""github.com/hyperledger/fabric/protos/peer"    It leads the chaincode payload is also big when when  sub sub package contains "github.com/hyperledger/fabric/core/chaincode/shim".     ></body> </Action>
<Action id="54320" issue="35797" author="sykesm" type="comment" created="2018-12-04 21:19:10.0" updateauthor="sykesm" updated="2018-12-04 21:19:10.0"> <body><! CDATA Instead of spending more time on writing another vendoring tool disguised as a chaincode builder, we need to move away from this model.  https://jira.hyperledger.org/browse/FAB-12031 is an example of a problem that we can't fix with the current structure. That issue includes some thoughts about where we need to go but we need to understand how we transition before doing that.  ></body> </Action>
<Action id="54332" issue="35797" author="ping40" type="comment" created="2018-12-05 01:08:24.0" updateauthor="ping40" updated="2018-12-05 01:08:24.0"> <body><! CDATA thanks,     discard it.  ></body> </Action>
<Action id="54333" issue="35797" author="ping40" type="comment" created="2018-12-05 01:09:12.0" updateauthor="ping40" updated="2018-12-05 01:09:12.0"> <body><! CDATA Instead of spending more time on writing another vendoring tool disguised as a chaincode builder, we need to move away from this model.  https://jira.hyperledger.org/browse/FAB-12031 is an example of a problem that we can't fix with the current structure. That issue includes some thoughts about where we need to go but we need to understand how we transition before doing that.  ></body> </Action>
<Action id="54335" issue="35797" author="ping40" type="comment" body=" https://gerrit.hyperledger.org/r/#/c/27912/   abandoned" created="2018-12-05 01:35:39.0" updateauthor="ping40" updated="2018-12-05 01:35:39.0"/>
