<Issue id="17737" key="FAB-4535" number="4535" project="10002" reporter="yacovm" assignee="yacovm" creator="yacovm" type="10001" summary="Use deadlines/timeouts in gossip Probing" priority="3" resolution="10000" status="6" created="2017-06-10 21:27:56.0" updated="2018-07-20 18:56:09.0" resolutiondate="2017-07-18 12:16:53.0" votes="0" watches="2" workflowId="38938" security="10001"> <description><! CDATA In gossip we have an RPC call that is used to probe whether a remote peer is responsive or not:  {code} rpc Ping (Empty) returns (Empty) {} {code}  The implementation of the method doesn't do anything and immediately returns. It is used to probe remote peers in 2 situations:  *  Handshake |https://github.com/hyperledger/fabric/blob/master/gossip/comm/comm_impl.go#L299 method (when probing anchor / bootstrap peers ) * When  connecting |https://github.com/hyperledger/fabric/blob/master/gossip/comm/comm_impl.go#L185-L187 to a remote peer for long term connection * Used by the discovery layer to  probe |https://github.com/hyperledger/fabric/blob/master/gossip/comm/comm_impl.go#L281 dead peers to see if they have come back alive  A malicious peer can implement his own implementation of the server-side Ping() method that blocks indefinitely and this would slow down the peer and waste resources for it.  Therefore I suggest that we use  timeouts|https://golang.org/pkg/context/#WithTimeout  when invoking the Ping RPC call in order to defend against this.   ~C0rWin   ~gennadyl     ></description> </Issue>
