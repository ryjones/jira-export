<Issue id="21275" key="FAB-6427" number="6427" project="10002" reporter="ozjc" creator="ozjc" type="10001" summary="Clojure SDK" priority="3" resolution="10001" status="6" created="2017-10-03 20:10:27.0" updated="2020-01-22 22:08:57.0" resolutiondate="2020-01-22 22:08:57.0" votes="0" watches="2" workflowId="35341"> <description><! CDATA About a week ago, I started a Clojure SDK as my pet project - git@github.com:ozjongwon/clojure-fabric.git     I got a suggestion from Gary Singh to gauge interest from the community.  Please feel free to add your thoughts.        *For more details about Clojure SDK, please keep reading.*     Currently almost all Clojure files (which are wrapper of Java files) were generated from Java SDK, and only 'core.clj' is my main focus at the moment. I am going to add some high level abstraction and hopefully the SDK grows as I learn more.     An example client code is like:    {code:java} ;; Make a client (defonce cli (get-or-make-client "Org1MSP" "PeerAdmin"  (-> (slurp <private-key-file>) (keys/str->private-key)) certificate-str {})) ;; Add an orderer (add-channel-end cli "mychannel" (map->OrdererOpts {:name "orderer0" :grpc-url "grpc://localhost:7050"}))   ;; Add a peer (add-channel-end cli "mychannel" (map->PeerOpts {:name "peer0" :grpc-url "grpc://localhost:7051"}))   ;; Proposal & order transaction (->> (map->TransactionOpts {:fcn "createCar" :args (java.util.ArrayList.  "CAR10" "Chevy" "Volt" "Red" "Nick" ) :proposal-wait-time 10000}) ;; Proposal Tx (propose-transaction cli "mychannel" (make-ChaincodeOpts {:name "fabcar" :version "1.0" :path "resources/"})) ;; Order Tx (order-transaction cli "mychannel")) {code}       ></description> </Issue>
