<Issue id="28244" key="FAB-8673" number="8673" project="10002" reporter="andybrucenet" creator="andybrucenet" type="10001" summary="Relax hardcoded limitation on CA endpoint" priority="4" resolution="10200" status="6" created="2018-03-06 14:15:41.0" updated="2019-04-30 18:34:23.0" resolutiondate="2019-04-30 18:34:23.0" votes="0" watches="2" timeoriginalestimate="600" timeestimate="600" workflowId="35587"> <description><! CDATA Underneath fabcar, enrollAdmin.js uses: {quote}{{fabric_ca_client = new Fabric_CA_Client('http://localhost:7054', tlsOptions , 'ca.example.com', crypto_suite);}} {quote} In my case (Docker / Mac OSX), this loses because the CA is actually bound to all host IP addresses but *not* to localhost. The error I receive: {quote}lbambprox300:fabcar l.abruce$ node enrollAdmin.js Store path:/work/hfc-key-store Error: Calling enrollment endpoint failed with error  Error: connect ECONNREFUSED 127.0.0.1:7054  at ClientRequest.<anonymous> (/work/node_modules/fabric-ca-client/lib/FabricCAClientImpl.js:711:12) at ClientRequest.emit (events.js:127:13) at Socket.socketErrorListener (_http_client.js:394:9) at Socket.emit (events.js:127:13) at emitErrorNT (internal/streams/destroy.js:64:8) at process._tickCallback (internal/process/next_tick.js:114:19) Failed to enroll admin: Error: Failed to enroll admin {quote} The CA log ({{docker logs -f ca.example.com}}) shows: {quote}2018/03/06 13:32:11  DEBUG  CA initialization successful 2018/03/06 13:32:11  INFO  Home directory for default CA: /etc/hyperledger/fabric-ca-server 2018/03/06 13:32:11  DEBUG  1 CA instance(s) running on server 2018/03/06 13:32:11  INFO  Listening on  http://0.0.0.0:7054|http://0.0.0.0:7054/  {quote}  On my Mac host, I can see the listening port: {quote}lbambprox300:fabcar l.abruce$ netstat -an | grep 7054 tcp6 0 0 ::1.7054 *.* LISTEN tcp4 0 0 *.7054 *.* LISTEN {quote} I can run a curl command (yup, I have iputils installed on the Mac via brew).  {quote}lbambprox300:fabcar l.abruce$ the_first_host_ip=$(ip a | grep 'inet ' | grep -v 127.0.0.1 | head -n 1 | awk '\{print $2}' | awk -F'/' '\{print $1}') lbambprox300:fabcar l.abruce$ curl -v $the_first_host_ip:7054 * Rebuilt URL to: 192.168.98.100:7054/ * Trying 192.168.98.100... * TCP_NODELAY set * Connected to 192.168.98.100 (192.168.98.100) port 7054 (#0) > GET / HTTP/1.1 > Host: 192.168.98.100:7054 > User-Agent: curl/7.54.0 > Accept: */* > < HTTP/1.1 404 Not Found < Content-Type: text/plain; charset=utf-8 < X-Content-Type-Options: nosniff < Date: Tue, 06 Mar 2018 14:05:54 GMT < Content-Length: 19 < 404 page not found * Connection #0 to host 192.168.98.100 left intact{quote}    The fix is super-simple. In enrollAdmin.js: {quote}{{fabric_ca_client = new Fabric_CA_Client(process.env.FABRIC_CA_ENDPOINT ? process.env.FABRIC_CA_ENDPOINT : 'http://localhost:7054', tlsOptions , 'ca.example.com', crypto_suite);}} {quote} {{When calling, just specify the environment:}} {{lbambprox300:fabcar l.abruce$ FABRIC_CA_ENDPOINT="http://$the_first_host_ip:7054" node enrollAdmin.js}} \{\{ Store path:/work/hfc-key-store}} \{\{ Successfully enrolled admin user "admin"}} \{\{ Assigned the admin user to the fabric client ::(\{"name":"admin","mspid":"Org1MSP","roles":null,"affiliation":"","enrollmentSecret":"","enrollment":(\{"signingIdentity":"eee5a725bf663eb3828e8a0f9b0e7611259b7ac64c8ff394f2c61ebd683ae87d","identity":\{"certificate":"-----BEGIN CERTIFICATE-----\nMIIB8DCCAZegAwIBAgIUbmu+4TT32rq0ZTak7+c7i/wnzbMwCgYIKoZIzj0EAwIw\nczELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNh\nbiBGcmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHDAaBgNVBAMT\nE2NhLm9yZzEuZXhhbXBsZS5jb20wHhcNMTgwMzA2MTQwNTAwWhcNMTkwMzA2MTQw\nNTAwWjAQMQ4wDAYDVQQDEwVhZG1pbjBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IA\nBFIUZ01LZ7n1nshh6/wP/ZZuWrec7VhuYlBGP44v6UC6Mmb41ezfOcvo7MAvU9Jz\nY9QQiddweGR9jfnHw9E5A6WjbDBqMA4GA1UdDwEB/wQEAwIHgDAMBgNVHRMBAf8E\nAjAAMB0GA1UdDgQWBBQd88pJq5KsndCur9ERBJuhXqzw5jArBgNVHSMEJDAigCBC\nOaoNzXba7ri6DNpwGFHRRQTTGq0bLd3brGpXNl5JfDAKBggqhkjOPQQDAgNHADBE\nAiAVNzJarP//sllQu7GuqBohU6vSpvQoJYXUY/BCbhIvPAIgQtosRWEeHNLSYmJu\nPTJJzPwobk4oK/1VD0WskTIePek=\n-----END CERTIFICATE-----\n"}}}}}  Woo. Hoo.  The same logic applies to the other node.js files. I've attached my edits to each.  The final invocation sequence looks like:  {{ the_first_host_ip=$(ip a | grep 'inet ' | grep -v 127.0.0.1 | head -n 1 | awk '\{print $2}' | awk -F'/' '\{print $1}') export FABRIC_CA_ENDPOINT="http://$the_first_host_ip:7054" export FABRIC_PEER0_ENDPOINT="grpc://$the_first_host_ip:7051" export FABRIC_PEER1_ENDPOINT="grpc://$the_first_host_ip:7053" export FABRIC_ORDERER_ENDPOINT="grpc://$the_first_host_ip:7050" node enrollAdmin.js node registerUser.js node query.js node invoke.js }}     ></description> </Issue>
