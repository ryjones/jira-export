<Issue id="37123" key="FAB-13875" number="13875" project="10002" reporter="sykesm" assignee="wlahti" creator="sykesm" type="10004" summary="peer/chaincode tests put production code in tight loop and consume high cpu" priority="3" resolution="10000" status="6" created="2019-01-24 20:54:33.0" updated="2019-01-31 15:44:51.0" resolutiondate="2019-01-31 15:44:51.0" votes="0" watches="2" workflowId="48701"> <description><! CDATA While running the peer/chaincode tests, a go routine gets trapped in a tight loop that calls Recv over and over and over again. It appears this happens when the desired transaction ID is not found in the filtered transaction slice.  {code} func (dg *deliverGroup) ClientWait(dc *deliverClient) { 	defer dg.wg.Done() 	for { 		resp, err := dc.Connection.Recv() 		if err != nil { 			err = errors.WithMessage(err, fmt.Sprintf("error receiving from deliver filtered at %s", dc.Address)) 			dg.setError(err) 			return 		} 		switch r := resp.Type.(type) { 		case *pb.DeliverResponse_FilteredBlock: 			filteredTransactions := r.FilteredBlock.FilteredTransactions 			for _, tx := range filteredTransactions { 				if tx.Txid == dg.TxID { // <---- THIS CAN BE FALSE 					logger.Infof("txid  %s  committed with status (%s) at %s", dg.TxID, tx.TxValidationCode, dc.Address) 					return 				} 			} 		case *pb.DeliverResponse_Status: 			err = errors.Errorf("deliver completed with status (%s) before txid received", r.Status) 			dg.setError(err) 			return 		default: 			err = errors.Errorf("received unexpected response type (%T) from %s", r, dc.Address) 			dg.setError(err) 			return 		} 	} } {code}  This tight loop resulted in massive memory consumption by a counterfeiter fake that recorded over 70k calls in a short period of time.  {code} recordInvocation(0xc00029e480): key: Recv goroutine 60  running : runtime/debug.Stack(0x25, 0xc00007be30, 0x2) 	/usr/local/Cellar/go/1.11.4/libexec/src/runtime/debug/stack.go:24 +0xa7 runtime/debug.PrintStack() 	/usr/local/Cellar/go/1.11.4/libexec/src/runtime/debug/stack.go:16 +0x22 github.com/hyperledger/fabric/peer/chaincode/mock.(*Deliver).recordInvocation(0xc00029e480, 0x4bcff13, 0x4, 0xc00007bea0, 0x0, 0x0) 	/Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/peer/chaincode/mock/deliver.go:201 +0x115 github.com/hyperledger/fabric/peer/chaincode/mock.(*Deliver).Recv(0xc00029e480, 0xc0004cb230, 0x0, 0x0) <====================== !!MJS HERE 	/Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/peer/chaincode/mock/deliver.go:102 +0xee github.com/hyperledger/fabric/peer/chaincode.(*deliverGroup).ClientWait(0xc00021e240, 0xc0004cb170) 	/Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/peer/chaincode/common.go:656 +0x218 created by github.com/hyperledger/fabric/peer/chaincode.(*deliverGroup).Wait 	/Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/peer/chaincode/common.go:632 +0xa1 {code}  /cc  ~wlahti   ></description> </Issue>
