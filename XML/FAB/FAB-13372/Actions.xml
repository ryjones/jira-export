<Action id="54993" issue="36296" author="denyeart" type="comment" body="As this impacts so many users every week, I&apos;ve opened as High.   ~andrew-coleman   ~sstone1   ~odowdaibm   ~harrisob@us.ibm.com  ." created="2018-12-19 17:50:13.0" updateauthor="denyeart" updated="2018-12-19 17:50:13.0"/>
<Action id="54994" issue="36296" author="odowdaibm" type="comment" created="2018-12-19 18:15:48.0" updateauthor="odowdaibm" updated="2018-12-19 18:16:03.0"> <body><! CDATA Thanks  ~denyeart   We should prioritize Fabrcar and Commercial paper as part of this.  ~sstone1   ~andrew-coleman  Do we need to do more than the following to get these errors out per David's comments above?  // |console.log(`Error processing transaction. ${error}`);| |console.log(error.stack);|  //  I think we'd all prefer if the SDK did as much as reasonable here, so that applications can simply generate accurate errors.     ></body> </Action>
<Action id="54998" issue="36296" author="denyeart" type="comment" created="2018-12-19 18:47:30.0" updateauthor="denyeart" updated="2018-12-19 18:47:30.0"> <body><! CDATA The error needs to be extracted from the response.message field:  https://github.com/hyperledger/fabric/blob/release-1.4/protos/peer/proposal_response.proto#L64  ></body> </Action>
<Action id="55003" issue="36296" author="harrisob@us.ibm.com" type="comment" body="I will fix this in 1.4, should we back port the fix to 1.3" created="2018-12-19 20:30:33.0" updateauthor="harrisob@us.ibm.com" updated="2018-12-19 20:56:32.0"/>
<Action id="55018" issue="36296" author="odowdaibm" type="comment" body="Ty, Just making sure that the fabric-network programming model makes it super easy for applications to get this out wherever it&apos;s been read from in the underlying APIs. I&apos;m sure you&apos;re synched with  ~andrew-coleman , so many thanks Bret." created="2018-12-20 08:08:23.0" updateauthor="odowdaibm" updated="2018-12-20 08:08:51.0"/>
<Action id="55054" issue="36296" author="bestbeforetoday" type="comment" created="2018-12-20 14:36:52.0" updateauthor="bestbeforetoday" updated="2018-12-20 14:38:33.0"> <body><! CDATA The error thrown by the fabric-network API when submit of a transaction fails due to bad proposal responses should already include all of the bad proposal response messages (and be logged at error level). Even if some good responses are returned, allowing the transaction to proceed, any bad responses are logged at warning level. So I think any sample code that uses the fabric-network API should be fairly well covered without having to do any special handling in application code.  The example given by Dave in this Jira is an instantiate failure and so is certainly using only the fabric-client API. Here the response.error message returned from the peer should be included as the message property for the Error returned as the proposal response to the application code. It is also logged at debug level but, since we wouldn't expect applications to run normally with debug enabled, we are relying on the application code to do something helpful with that message – exactly Dave's point.  We could change fabric-client to log bad proposal responses at a log level that should be recorded by default (either client_utils.sendPeersProposal() or Peer.sendProposal()), or change the sample code to surface the bad response messages, or (perhaps better) both.  ></body> </Action>
<Action id="55078" issue="36296" author="denyeart" type="comment" body="I would vote for both - logging error messages and surfacing to client applications. Probably want to do this for any return.status &gt;= 400, since status of 400 and greater will not be endorsed by endorsing peer (most often it is a 500... but chaincode can return any status they like)." created="2018-12-20 20:48:32.0" updateauthor="denyeart" updated="2018-12-20 20:48:32.0"/>
<Action id="55109" issue="36296" author="denyeart" type="comment" created="2018-12-22 14:33:16.0" updateauthor="denyeart" updated="2018-12-22 14:33:16.0"> <body><! CDATA Note - I've tested fabcar (new javascript version) and it looks like it does indeed handle errors well.  Invoke failures get logged with the chaincode response error message: {code:java} warn:  Transaction : _validatePeerResponses: Received error response from peer: message=transaction returned with failure: Error: xCAR12 does not exist, stack=Error: transaction returned with failure: Error: xCAR12 does not exist{code} And transaction invalidations get logged with the invalidation reason code: {code:java} Failed to submit transaction: Error: Peer localhost:7051 has rejected transaction "e271a5b4b28e3467efc74a679957f52d73620df781d2eb403b8fe3e7a8b0ae52" with code "MVCC_READ_CONFLICT"{code}  ~harrisob@us.ibm.com  So I'd suggest focus on all the fabric-client based samples.     ></body> </Action>
<Action id="55315" issue="36296" author="denyeart" type="comment" created="2019-01-04 19:27:36.0" updateauthor="denyeart" updated="2019-01-04 19:29:23.0"> <body><! CDATA Fixed for balance transfer in :  https://gerrit.hyperledger.org/r/#/c/28399/    ~harrisob@us.ibm.com  Could you also fix for fabcar low level sample (FAB-13489):  https://github.com/hyperledger/fabric-samples/tree/master/fabcar/javascript-low-level   ></body> </Action>
