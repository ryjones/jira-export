<Issue id="17603" key="FAB-4442" number="4442" project="10002" reporter="ratnakar" assignee="chris.elder" creator="ratnakar" type="10004" summary="Peers crashes when a burst of transactions sent to the peers using ccccheker tool" priority="3" resolution="10000" status="6" created="2017-06-07 04:10:35.0" updated="2018-07-20 14:13:11.0" resolutiondate="2017-06-20 15:48:23.0" votes="0" watches="7" workflowId="38876" security="10001"> <description><! CDATA Fabric Commit Level : *c50e0dd1ca1ea96cb69503fc83a302c53eff96a6*  _*Gist of peer crash stack trace :*_    {code:java} 2017-06-07 00:44:15.639 UTC  kvledger  Commit -> INFO a4c Channel  mychannel0 : Created block  976  with 100 transaction(s) 2017-06-07 00:44:16.920 UTC  statecouchdb  ApplyUpdates -> ERRO a4d Error during Commit(): Put http://couchdb0:5984/mychannel0/mycc0%0039_54: dial tcp 172.20.0.3:5984: getsockopt: connection refused panic: Error during commit to txmgr:Put http://couchdb0:5984/mychannel0/mycc0%0039_54: dial tcp 172.20.0.3:5984: getsockopt: connection refused goroutine 407  running : panic(0xc81060, 0xc42cd5eca0) /opt/go/src/runtime/panic.go:500 +0x1a1 github.com/hyperledger/fabric/core/ledger/kvledger.(*kvLedger).Commit(0xc4217a25c0, 0xc42978c720, 0x0, 0x0) /opt/gopath/src/github.com/hyperledger/fabric/core/ledger/kvledger/kv_ledger.go:229 +0x806 github.com/hyperledger/fabric/core/ledger/ledgermgmt.(*closableLedger).Commit(0xc421a06720, 0xc42978c720, 0x0, 0x0) <autogenerated>:1 +0x54 github.com/hyperledger/fabric/core/committer.(*LedgerCommitter).Commit(0xc42182d410, 0xc42978c720, 0x7fcae9032000, 0x0) /opt/gopath/src/github.com/hyperledger/fabric/core/committer/committer_impl.go:86 +0x14a github.com/hyperledger/fabric/gossip/state.(*GossipStateProviderImpl).commitBlock(0xc4219ef680, 0xc42978c720, 0x4, 0x4) /opt/gopath/src/github.com/hyperledger/fabric/gossip/state/state.go:621 +0x56 github.com/hyperledger/fabric/gossip/state.(*GossipStateProviderImpl).deliverPayloads(0xc4219ef680) /opt/gopath/src/github.com/hyperledger/fabric/gossip/state/state.go:437 +0x478 created by github.com/hyperledger/fabric/gossip/state.NewGossipStateProvider /opt/gopath/src/github.com/hyperledger/fabric/gossip/state/state.go:219 +0x7d9 {code}    Reproduced the issue with the following steps  Clone the repo to execute the test scripts    {code:java} git clone https://github.com/asararatnakar/chaincodechecker cd chaincodechecker ./network_setup.sh{code}    This script will launches the local network with the following configuration {noformat} 3 clusters (Kafka brokers + zookeepers) 3 Ordererers 2 Peer Organizations (each org contains two peers) + 4 couchdbs 4 CLI containers , mounts the ccchecker tool on each container.  ccchecker sends concurrrent transactions (based on configurations) on to each peer{noformat}    when you see the following output with the above script network_setup.sh    {noformat} ===================== Chaincode 'mycc' Instantiation on PEER2 on channel 'mychannel1' is successful ===================== ======Pre-process execution time 94 secs========== Ready to execute the ccchecker  {noformat} Execute the following commands in different terminals    {code:java} docker exec -it peer0.org1.cli /bin/bash -c "./scripts/common.sh org1" docker exec -it peer0.org2.cli /bin/bash -c "./scripts/common.sh org2" docker exec -it peer1.org1.cli /bin/bash -c "./scripts/common.sh org1" docker exec -it peer1.org2.cli /bin/bash -c "./scripts/common.sh org2" {code}    Above commands uses default configurations 'ccchecker1.json' and sends 100 transactions on each peer. To send more transactions use the following configurations    {code:java} docker exec -it peer0.org1.cli /bin/bash -c "./scripts/common.sh org1 testdata/ccchecker_100th_2ch_2cc_1.json" docker exec -it peer0.org2.cli /bin/bash -c "./scripts/common.sh org2 testdata/ccchecker_100th_2ch_2cc_2.json" docker exec -it peer1.org1.cli /bin/bash -c "./scripts/common.sh org1 testdata/ccchecker_100th_2ch_2cc_1.json" docker exec -it peer1.org2.cli /bin/bash -c "./scripts/common.sh org2 testdata/ccchecker_100th_2ch_2cc_2.json" {code}    here testdata input file ccchecker_100th_2ch_2cc_1.json 100th - 100 (threads) concurrency 2ch - 2 channels 2cc - 2 chaincodes 1,2 - Organization1 and Organization2  NOTE: Attached all the logs  ^logs.zip  , except orderer logs (each orderer log size is about 2GB)  ></description> </Issue>
