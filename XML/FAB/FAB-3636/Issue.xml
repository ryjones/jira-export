<Issue id="16266" key="FAB-3636" number="3636" project="10002" reporter="c0rwin" assignee="c0rwin" creator="c0rwin" type="10004" summary="Do not ignore error, while associating between peer id and cert, creating new communication instance" priority="3" resolution="10000" status="6" created="2017-05-03 18:21:22.0" updated="2018-07-20 14:12:33.0" resolutiondate="2017-05-04 15:06:46.0" votes="0" watches="1" workflowId="38320"> <description><! CDATA Currently while creating new communication instance with {{NewCommInstanceWithServer}} method from *comm_impl.go*, there a code which associate peer identity to the peer certificate by storing the mapping. Code:  {code} 	commInst.connStore = newConnStore(commInst, commInst.logger) 	commInst.idMapper.Put(idMapper.GetPKIidOfCert(peerIdentity), peerIdentity) {code}  While the code of the {{Put}} method assumes error case:  {code} // put associates an identity to its given pkiID, and returns an error // in case the given pkiID doesn't match the identity func (is *identityMapperImpl) Put(pkiID common.PKIidType, identity api.PeerIdentityType) error { 	if pkiID == nil { 		return errors.New("PKIID is nil") 	} 	if identity == nil { 		return errors.New("identity is nil") 	}  	if err := is.mcs.ValidateIdentity(identity); err != nil { 		return err 	}  	id := is.mcs.GetPKIidOfCert(identity) 	if !bytes.Equal(pkiID, id) { 		return errors.New("identity doesn't match the computed pkiID") 	}  	is.Lock() 	defer is.Unlock() 	is.pkiID2Cert string(id)  = newStoredIdentity(identity) 	return nil } {code}  That means the error might be returned by calling to  {code} commInst.idMapper.Put(idMapper.GetPKIidOfCert(peerIdentity), peerIdentity) {code}  while this is *VERY* unlikely to happen, we still should not ignore the error and therefore check the result and since there is nothing that could be done and actually having such error is clear indication of something really bad has happened we need to add panic to propagate the error.  ></description> </Issue>
