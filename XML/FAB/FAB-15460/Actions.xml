<Action id="60155" issue="39848" author="mlucc" type="comment" created="2019-05-20 12:34:31.0" updateauthor="mlucc" updated="2019-05-20 13:29:36.0"> <body><! CDATA The problem could be solved by upgrading Hyperledger version to 1.4.1 and updating channels (peer channel update).  My doubts are now the following: # Why should I update the anchor peers if they were specified when starting the network? # Should I update the channel from both organizations (hondaMSPanchors.tx and yamahaMSPanchors.tx)? I tried with both and it works, but it does with only one as well. I certainly don't understand the difference.     ></body> </Action>
<Action id="60158" issue="39848" author="scottz" type="comment" created="2019-05-20 15:26:39.0" updateauthor="scottz" updated="2019-05-20 15:26:39.0"> <body><! CDATA 1. I never really understood this myself, but it seems to be a requirement to send anchor peer updates after bring up network and create a channel. I think it has something to do with what is known at channel creation time. Maybe we can get a simple answer from  ~yacovm  or  ~denyeart .  2. If you only set a peer of honda org to be an anchor peer, then send and endorsement proposal to a peer in the yamaha org, they can find peers in the honda org and push the private data to them.   It also works if you send endorsement proposal to the honda peer - but only if you have enough peers inside honda org to satisfy the requiredPeerCount - because the yamaha peers would still be able to pull the private data upon validation time.  However, if you send endorsement to the honda peers, they could not push the private data to any peer in yamaha org, so if the required peer count is 2, and if you have exactly 2 peers in each org, then it would fail.  It seems you would have one-way communications if you set an anchor peer in only one of the orgs, but that would suffice for private data communications.   If I misrepresented anything, Dave or Yacov please correct me.  ></body> </Action>
<Action id="60161" issue="39848" author="nileshdeotale" type="comment" created="2019-05-20 17:26:09.0" updateauthor="nileshdeotale" updated="2019-05-20 17:33:10.0"> <body><! CDATA  ~scottz   ~yacovm  ~denyeart   Is it not sufficient to have anchor peers and have them figure out number of peers in their org?  otherwise, If peers are added or removed one would have to reload collections with the new required peer count depending on how many peers now exist in the org and how many of those are supposed to get private data disseminated for endorsement?  Example - If I had 4 peers in each org (total peers 8) and I had a collections file with requiredPeerCount = 7  then I removed 2 peers from each org to leave only 2 peers per org (total peers 4), one would need to re-load collections file  with requiredPeerCount =3 , as per current total peer count 4.  Can the requiredPeerCount be determined dynamically at run time by the anchor peers such that collections file update is not needed?   ></body> </Action>
<Action id="60168" issue="39848" author="scottz" type="comment" created="2019-05-20 17:50:35.0" updateauthor="scottz" updated="2019-05-20 17:50:35.0"> <body><! CDATA It is definitely not recommended to use a requiredPeerCount equal to the maximum number of peers. That means a transaction would always fail if one peer were unreachable (even if only temporarily). Reconsider your logic to choose values for max and required peer counts. Consider also the number of endorsement requests sent for the same transaction; if you send it to two and expect two endorsement approvals and each could disseminate the private data to the number of required peers specified in the collections file.  That said, if your network were to evolve to the point where you add several orgs and peers, then it is realistic to expect you may wish to increase your max and required peer counts. But, also keep in mind the other peers would still pull the private data, even if you don't disseminate/push the data to more than a couple peers (which is all that is ever likely required, for robustness sake).  ></body> </Action>
<Action id="60189" issue="39848" author="mlucc" type="comment" created="2019-05-21 07:54:23.0" updateauthor="mlucc" updated="2019-05-21 07:54:35.0"> <body><! CDATA  ~scottz  and  ~nileshdeotale  thanks for your insights.  Regarding topic 2:  What I wanted to know is why only running:  {{peer channel update -f hondaMSPanchors.tx -c motogpchannel -o orderer.motogp.com --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA}}  the communication among organizations is established (bidirectional). It has been checked that is not necessary to run the same command but with yamahaMSPanchors.tx. Then, I'm wondering what this command really does.  Is only required to update the channel once? Having two different anchors.tx make me feel hesistant. Nonetheless, when testing, just running the command for hondaMSPanchors.tx is enough to make the system work in both ways (i.e. invoke/querying from honda and yamaha).  ></body> </Action>
<Action id="60213" issue="39848" author="scottz" type="comment" body=" ~mlucc  Each anchor peer update transaction provides to all members of the channel the (list of) anchor peer(s) of the represented org, so the peers in other orgs can contact it. It makes sense that each org would submit an anchor peer update. There are private data scenarios where it seems necessary to do both, but there are also scenarios where only one is needed. If you are indeed trying a scenario which should require both, in a network with only one of the anchor peer updates, _such as one I suggested above with 2 peers per org and collection requiredPeerCount = 2 and an endorsement policy that requires (and sends) endorsement proposals to a peer in both orgs_, then I would have to reroute your question to a gossip expert such as  ~yacovm . Maybe once the yamaha peers learn about the honda peers via the honda anchor peer update, then the honda peers can communicate with all the yamaha peers via any yamaha peer booted with CORE_PEER_GOSSIP_EXTERNALENDPOINT=true." created="2019-05-21 17:17:48.0" updateauthor="scottz" updated="2019-05-21 17:17:48.0"/>
<Action id="60219" issue="39848" author="yacovm" type="comment" created="2019-05-21 18:07:18.0" updateauthor="yacovm" updated="2019-05-21 18:07:18.0"> <body><! CDATA so, you need to update the anchor peers after the channel is created.  This is by design, see FAB-13096  ></body> </Action>
<Action id="60587" issue="39848" author="mlucc" type="comment" body=" ~yacovm  is right. The issue is solved by updating the channel. However, the anchor peers where already declared in the config used to create the channel. Does it make sense? " created="2019-06-03 12:07:32.0" updateauthor="mlucc" updated="2019-06-03 12:07:32.0"/>
<Action id="60588" issue="39848" author="yacovm" type="comment" body="That&apos;s just because we re-use the same config files to bootstrap the channel... that&apos;s just how it is " created="2019-06-03 12:13:23.0" updateauthor="yacovm" updated="2019-06-03 12:13:23.0"/>
<Action id="60705" issue="39848" author="denyeart" type="comment" body="Sounds like the issue was resolved by configuring anchor peers. Please re-open if you believe there is still some issue, or open a new Story if you are requesting a future improvement." created="2019-06-05 20:42:24.0" updateauthor="denyeart" updated="2019-06-05 20:42:24.0"/>
