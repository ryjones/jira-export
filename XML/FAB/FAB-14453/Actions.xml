<Action id="57952" issue="38137" author="jyellick" type="comment" created="2019-03-07 03:48:40.0" updateauthor="jyellick" updated="2019-03-07 03:48:40.0"> <body><! CDATA The links provided are not useful, as they are not publicly viewable and I believe tied to your cloud instance.  Please provide:  # Your {{configtx.yaml}} file # The {{testorgschannel1.tx}} file # The genesis block which you used as a parameter to join channel # The genesis block of the orderer system channel  Additionally, though not strictly necessary, it would be helpful to see the orderer logs at debug.  ></body> </Action>
<Action id="57993" issue="38137" author="bharadwajambati1" type="comment" body=" ~jyellick  Please find the attachments" created="2019-03-07 21:23:08.0" updateauthor="bharadwajambati1" updated="2019-03-07 21:23:08.0"/>
<Action id="58030" issue="38137" author="jyellick" type="comment" created="2019-03-11 02:31:15.0" updateauthor="jyellick" updated="2019-03-11 02:31:15.0"> <body><! CDATA I really expected looking at the artifacts that something would stand out, but everything looks correct.  The new channel has appropriate Readers/Writers policies at all levels of the configuration (channel, orderer, application, and org level).  We will need to capture the 'warning' level log message which accompanies the rejection of the deliver request from the orderer to progress further.  If the orderer is returning a FORBIDDEN for the channel, it should log the following message just beforehand:  {noformat} logger.Warningf(" channel: %s  Client authorization revoked for deliver request from %s: %s", chdr.ChannelId, addr, err) {noformat}    ></body> </Action>
<Action id="58065" issue="38137" author="jyellick" type="comment" created="2019-03-11 19:43:22.0" updateauthor="jyellick" updated="2019-03-11 19:43:22.0"> <body><! CDATA Okay, finally tracked down the root cause.  In your configtx.yaml there is a section: {noformat} OrdererGenesis: <<: *ChannelDefaults Capabilities: <<: *ChannelCapabilities Orderer: <<: *OrdererDefaults Consortiums: FabricConsortium: Organizations: - *org1 - *org2 {noformat}  Which defines your orderer system channel.  Then your application channel looks like:  {noformat} OrgChannel: <<: *ChannelDefaults {noformat}  What is occurring, is that your genesis block defines new capabilities, which, by default are inherited by channels.  However, when you pass the {{channelCreateTxBaseProfile}} flag, the config update computation recognizes that you have not enabled the capabilities in the desired new channel.  Therefore, in the update, it disables these capabilities.  Consequently, the MSP does not appropriately understand NodeOU based policies, and the peers will always fail to connect.  ></body> </Action>
<Action id="58067" issue="38137" author="jyellick" type="comment" body="The {{channelCreateeTxBaseProfile}} is a double edged sword.  It will produce exactly the configuration specified in your configtx.yaml, including things like regressed capabilities.  Because the configuration for the new channel did not include the v1.3 channel capabilities, the new channel did not understand NodeOUs and therefore will reject deliver requests." created="2019-03-11 19:45:08.0" updateauthor="jyellick" updated="2019-03-11 19:45:08.0"/>
