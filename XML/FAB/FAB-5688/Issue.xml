<Issue id="20075" key="FAB-5688" number="5688" project="10002" reporter="aleksandar.likic" creator="aleksandar.likic" type="10000" summary="External (Out of Process) SCC" priority="2" resolution="10000" status="6" created="2017-08-09 17:45:31.0" updated="2018-07-20 19:09:01.0" resolutiondate="2017-11-06 13:00:43.0" votes="0" watches="2" workflowId="39683"> <description><! CDATA Fabric 1.0 supports adding new features to the platform via System Chaincodes (SCCs). Currently, this approach requires embedding a new SCC code (that implements a new functionality) into the peer code base and recompiling the peer.  In the future, it may be possible to leverage dynamic binding feature in Go (1.8 has added some support), so adding the new SCC will not require recompiling the peer. However, those plugin SCCs still run in the same process with the peer. This proposal introduces a new class of SCCs that run outside of the peer process - hence the name External SCCs.  Design:  https://docs.google.com/document/d/1NXz8fraX3O6PkXrcNyXklNHWZG-UeXHad0yUuP34f7w/edit#|https://docs.google.com/document/d/1NXz8fraX3O6PkXrcNyXklNHWZG-UeXHad0yUuP34f7w/edit   Working proof of concept against v1.0.0 is at  https://github.com/securekey/fabric-next|https://github.com/securekey/fabric-next.  (this repository has also some other changes, like https://jira.hyperledger.org/browse/FAB-5460).  To keep the complexity of the change low and the scope of v1.1 small, we propose that we migrate to master only the changes required to have: * SCC distributed as precompiled binary (using the same solution as in https://jira.hyperledger.org/browse/FAB-5460) * SCC running as a process in the same container along side the peer  v1.1 scope in: * chaincode type = BINARY (relies on https://jira.hyperledger.org/browse/FAB-5460) * execution environment = SYSTEM_EXT  v1.1 scope out: * chaincode type other than BINARY * execution environment DOCKER  ></description> </Issue>
