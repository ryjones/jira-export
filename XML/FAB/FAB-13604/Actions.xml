<Action id="55472" issue="36627" author="kchristidis" type="comment" created="2019-01-09 22:45:45.0" updateauthor="kchristidis" updated="2019-01-09 22:45:45.0"> <body><! CDATA Scott, thanks for capturing this. Do you think there's any point in a scenario where:  1. A = leader, B = follower, C = follower 2. B = ingress OSN 3. We crash C (i.e. a non-leader, non-ingress node)  Then we expect 10002 blocks. Your call.  ></body> </Action>
<Action id="55473" issue="36627" author="scottz" type="comment" created="2019-01-09 22:52:03.0" updateauthor="scottz" updated="2019-01-09 22:52:03.0"> <body><! CDATA Yes, absolutely. We plan to do that and the other follower scenario (crash B) in 13603. This jira is for only crashing the leader, when it is, or is not, the ingress node.  ></body> </Action>
<Action id="55591" issue="36627" author="guoger" type="comment" body="Please note that this test scenario is affected by FAB-13447" created="2019-01-14 06:14:42.0" updateauthor="guoger" updated="2019-01-14 06:14:42.0"/>
<Action id="55693" issue="36627" author="adnanchoudhury" type="comment" created="2019-01-15 22:23:29.0" updateauthor="adnanchoudhury" updated="2019-01-16 15:01:38.0"> <body><! CDATA Scenario 2 successfully passed. pteReport for scenario 2 shows some transaction losses as expected.The qblock file matches with the expected number of Txs. Orderer logs have expected error messages due to the taking down of OSN1.  ></body> </Action>
<Action id="55695" issue="36627" author="kchristidis" type="comment" created="2019-01-15 23:08:13.0" updateauthor="kchristidis" updated="2019-01-15 23:08:13.0"> <body><! CDATA {quote}Orderer logs have error messages due to the taking down of OSN1. {quote} Unclear to the reader whether this is expected or not. Can we clarify?  ></body> </Action>
<Action id="55715" issue="36627" author="adnanchoudhury" type="comment" body="Clarified (edited) my comment  ~kchristidis " created="2019-01-16 15:02:46.0" updateauthor="adnanchoudhury" updated="2019-01-16 15:02:46.0"/>
<Action id="55720" issue="36627" author="kchristidis" type="comment" body="Perfect, thanks!" created="2019-01-16 15:45:54.0" updateauthor="kchristidis" updated="2019-01-16 15:45:54.0"/>
<Action id="55728" issue="36627" author="adnanchoudhury" type="comment" created="2019-01-16 17:48:07.0" updateauthor="adnanchoudhury" updated="2019-01-16 18:54:02.0"> <body><! CDATA Scenario run results below. # pteReprt file for scenario 2 shows 24 txs were dropped during the orderer outage. the ptelog file shows the details of each Tx. ( pteReport file scenario 2|https://jira.hyperledger.org/secure/attachment/16581/pteReport-scenario2.txt ,  ptelog for scenario 2|https://jira.hyperledger.org/secure/attachment/16580/FAB-13604_scenario2_ptelog.log ) # the queryblock file after scenario 2 shows the total block number ("19667") which is consistent with pte report.  ( queryblock after test run|https://jira.hyperledger.org/secure/attachment/16582/queryblock_after_FAB-13604-scenario2.log , look for "returned block") # In the follower orderers, The time elapsed between first report of Orderer disconnect and the leader re-election is about 1.3 seconds. ( OSN1 log|https://jira.hyperledger.org/secure/attachment/16583/snapshot-OSN1-FAB-13604-scenario2.log.zip ,  OSN3 log|https://jira.hyperledger.org/secure/attachment/16586/snapshot-OSN3-FAB-13604-scenario2.log.zip . The leader during start of test was  OSN2 (log)|https://jira.hyperledger.org/secure/attachment/16584/snapshot-OSN2-FAB-13604-scenario2.log.zip  that was stopped. Here is  OSN2new log|https://jira.hyperledger.org/secure/attachment/16585/snapshot-OSN2new-FAB-13604-scenario2.log.zip  that is log after regenerate) #One observation that does not look right is that the `orderersystemchannel` changes leadership about 2:45 minutes into orderer2 stop, even though its leader was not stopped (we stopped orderer2, but that was not the leader for ordererchannel).   ></body> </Action>
<Action id="55738" issue="36627" author="scottz" type="comment" created="2019-01-17 00:28:37.0" updateauthor="scottz" updated="2019-01-17 00:28:37.0"> <body><! CDATA Upon close examination of the logs from the scenario2 of FAB-13604, we see some problems and feel we probably need to open some bugs. I attached a file called “bugs” to the jira to document some sequences of logs. This is the summary of possible problems: ```BUG5 - NO reponse from o1 for TX after channel1 leader change BUG6 - orderersystemchannel changed leader for no apparent reason BUG7 - more errors (connection to o2 failed) seen in o3 AFTER o3 recognized o2 as the leader, for 2 more seconds. WHY? BUG8 - we noticed kafka mentioned in logs, but we are running Raft```   ></body> </Action>
<Action id="55740" issue="36627" author="guoger" type="comment" created="2019-01-17 02:09:27.0" updateauthor="guoger" updated="2019-01-17 02:09:27.0"> <body><! CDATA  ~scottz  Thanks for reporting this!  {quote}BUG5 - NO reponse from o1 for TX after channel1 leader change{quote} Could you elaborate on it? here's what i inferred from log file: - o1 & o2 are follower and o3 is leader - o1 is ingress orderer - o3 was brought down - o2 is elected as new leader - o1 got stuck is this accurate?  {quote}BUG6 - orderersystemchannel changed leader for no apparent reason{quote} No error logs at all? do you happen to have log at hand with etcdraft set to debug level?  {quote}BUG7 - more errors (connection to o2 failed) seen in o3 AFTER o3 recognized o2 as the leader, for 2 more seconds. WHY?{quote} Is network still functioning?  ~yacovm  any thoughts?  {quote}BUG8 - we noticed kafka mentioned in logs, but we are running Raft{quote} I guess this is benign cuz we still have some kafka config options and they are printed. but just to confirm, could you post that particular line of log?  ></body> </Action>
<Action id="55741" issue="36627" author="adnanchoudhury" type="comment" created="2019-01-17 05:02:01.0" updateauthor="adnanchoudhury" updated="2019-01-17 14:35:55.0"> <body><! CDATA  ~guoger  About BUG5:  O1 is ingress, O2 leader, O3 follower. We start traffic, and during traffic, stop the leader (O2), then we see O1 starts giving SERVICE_UNAVAILABLE response to client (expected), meantime O3 is elected leader, and then O1 is stuck for 45 seconds on a connection from client (please see the attached file called "bug" that has more details and logs)  About BUG6:  You can find all the logs in the attached files. Or, please see my prev. comment. As this is scenario 2, so log files will be in snapshot-OSN1-FAB-13604-scenario2.log etc in the attachment section of this jira. etcdraft is I believe is already on debug level.  About BUG7: Yes, it was a functioning network that time.  About BUG8: here are Kafka reference grepped from the OSN2new (OSN2 after regenerating it) {code:java} MacBook-Air-2:Downloads achoudhury$ grep -nriIH "kafka" snapshot-OSN2new-FAB-13604-scenario2.log snapshot-OSN2new-FAB-13604-scenario2.log:1:2019-01-16 15:32:19.855 UTC  viperutil  getKeysRecursively -> DEBU 001 Found map interface{} interface{} value for kafka snapshot-OSN2new-FAB-13604-scenario2.log:2:2019-01-16 15:32:19.855 UTC  viperutil  getKeysRecursively -> DEBU 002 Found map string interface{} value for kafka.TLS snapshot-OSN2new-FAB-13604-scenario2.log:4:2019-01-16 15:32:19.856 UTC  viperutil  getKeysRecursively -> DEBU 004 Found real value for kafka.TLS.Certificate setting to <nil> <nil> snapshot-OSN2new-FAB-13604-scenario2.log:6:2019-01-16 15:32:19.856 UTC  viperutil  getKeysRecursively -> DEBU 006 Found real value for kafka.TLS.RootCAs setting to <nil> <nil> snapshot-OSN2new-FAB-13604-scenario2.log:8:2019-01-16 15:32:19.856 UTC  viperutil  getKeysRecursively -> DEBU 008 Found real value for kafka.TLS.Enabled setting to bool false snapshot-OSN2new-FAB-13604-scenario2.log:10:2019-01-16 15:32:19.857 UTC  viperutil  getKeysRecursively -> DEBU 00a Found real value for kafka.TLS.PrivateKey setting to <nil> <nil> snapshot-OSN2new-FAB-13604-scenario2.log:11:2019-01-16 15:32:19.857 UTC  viperutil  getKeysRecursively -> DEBU 00b Found map string interface{} value for kafka.SASLPlain snapshot-OSN2new-FAB-13604-scenario2.log:13:2019-01-16 15:32:19.857 UTC  viperutil  getKeysRecursively -> DEBU 00d Found real value for kafka.SASLPlain.User setting to <nil> <nil> snapshot-OSN2new-FAB-13604-scenario2.log:15:2019-01-16 15:32:19.857 UTC  viperutil  getKeysRecursively -> DEBU 00f Found real value for kafka.SASLPlain.Password setting to <nil> <nil> snapshot-OSN2new-FAB-13604-scenario2.log:17:2019-01-16 15:32:19.857 UTC  viperutil  getKeysRecursively -> DEBU 011 Found real value for kafka.SASLPlain.Enabled setting to bool false snapshot-OSN2new-FAB-13604-scenario2.log:19:2019-01-16 15:32:19.857 UTC  viperutil  getKeysRecursively -> DEBU 013 Found real value for kafka.Version setting to <nil> <nil> snapshot-OSN2new-FAB-13604-scenario2.log:20:2019-01-16 15:32:19.858 UTC  viperutil  getKeysRecursively -> DEBU 014 Found map string interface{} value for kafka.Retry snapshot-OSN2new-FAB-13604-scenario2.log:22:2019-01-16 15:32:19.858 UTC  viperutil  getKeysRecursively -> DEBU 016 Found real value for kafka.Retry.LongInterval setting to string 5m snapshot-OSN2new-FAB-13604-scenario2.log:24:2019-01-16 15:32:19.858 UTC  viperutil  getKeysRecursively -> DEBU 018 Found real value for kafka.Retry.LongTotal setting to string 12h snapshot-OSN2new-FAB-13604-scenario2.log:25:2019-01-16 15:32:19.858 UTC  viperutil  getKeysRecursively -> DEBU 019 Found map string interface{} value for kafka.Retry.NetworkTimeouts snapshot-OSN2new-FAB-13604-scenario2.log:27:2019-01-16 15:32:19.858 UTC  viperutil  getKeysRecursively -> DEBU 01b Found real value for kafka.Retry.NetworkTimeouts.WriteTimeout setting to string 10s snapshot-OSN2new-FAB-13604-scenario2.log:29:2019-01-16 15:32:19.858 UTC  viperutil  getKeysRecursively -> DEBU 01d Found real value for kafka.Retry.NetworkTimeouts.DialTimeout setting to string 10s snapshot-OSN2new-FAB-13604-scenario2.log:31:2019-01-16 15:32:19.858 UTC  viperutil  getKeysRecursively -> DEBU 01f Found real value for kafka.Retry.NetworkTimeouts.ReadTimeout setting to string 10s snapshot-OSN2new-FAB-13604-scenario2.log:32:2019-01-16 15:32:19.858 UTC  viperutil  getKeysRecursively -> DEBU 020 Found map string interface{} value for kafka.Retry.Metadata snapshot-OSN2new-FAB-13604-scenario2.log:34:2019-01-16 15:32:19.859 UTC  viperutil  getKeysRecursively -> DEBU 022 Found real value for kafka.Retry.Metadata.RetryMax setting to int 3 snapshot-OSN2new-FAB-13604-scenario2.log:36:2019-01-16 15:32:19.859 UTC  viperutil  getKeysRecursively -> DEBU 024 Found real value for kafka.Retry.Metadata.RetryBackoff setting to string 250ms snapshot-OSN2new-FAB-13604-scenario2.log:37:2019-01-16 15:32:19.859 UTC  viperutil  getKeysRecursively -> DEBU 025 Found map string interface{} value for kafka.Retry.Producer snapshot-OSN2new-FAB-13604-scenario2.log:39:2019-01-16 15:32:19.859 UTC  viperutil  getKeysRecursively -> DEBU 027 Found real value for kafka.Retry.Producer.RetryBackoff setting to string 100ms snapshot-OSN2new-FAB-13604-scenario2.log:41:2019-01-16 15:32:19.859 UTC  viperutil  getKeysRecursively -> DEBU 029 Found real value for kafka.Retry.Producer.RetryMax setting to int 3 snapshot-OSN2new-FAB-13604-scenario2.log:42:2019-01-16 15:32:19.859 UTC  viperutil  getKeysRecursively -> DEBU 02a Found map string interface{} value for kafka.Retry.Consumer snapshot-OSN2new-FAB-13604-scenario2.log:44:2019-01-16 15:32:19.860 UTC  viperutil  getKeysRecursively -> DEBU 02c Found real value for kafka.Retry.Consumer.RetryBackoff setting to string 2s snapshot-OSN2new-FAB-13604-scenario2.log:46:2019-01-16 15:32:19.860 UTC  viperutil  getKeysRecursively -> DEBU 02e Found real value for kafka.Retry.ShortInterval setting to string 1s snapshot-OSN2new-FAB-13604-scenario2.log:48:2019-01-16 15:32:19.860 UTC  viperutil  getKeysRecursively -> DEBU 030 Found real value for kafka.Retry.ShortTotal setting to string 30s snapshot-OSN2new-FAB-13604-scenario2.log:49:2019-01-16 15:32:19.860 UTC  viperutil  getKeysRecursively -> DEBU 031 Found map string interface{} value for kafka.Topic snapshot-OSN2new-FAB-13604-scenario2.log:51:2019-01-16 15:32:19.860 UTC  viperutil  getKeysRecursively -> DEBU 033 Found real value for kafka.Topic.ReplicationFactor setting to int 3 snapshot-OSN2new-FAB-13604-scenario2.log:53:2019-01-16 15:32:19.860 UTC  viperutil  getKeysRecursively -> DEBU 035 Found real value for kafka.Verbose setting to string true snapshot-OSN2new-FAB-13604-scenario2.log:181:2019-01-16 15:32:19.870 UTC  viperutil  EnhancedExactUnmarshal -> DEBU 0b5 map kafka:map TLS:map Certificate:<nil> RootCAs:<nil> Enabled:false PrivateKey:<nil>  SASLPlain:map User:<nil> Password:<nil> Enabled:false  Version:<nil> Retry:map LongInterval:5m LongTotal:12h NetworkTimeouts:map ReadTimeout:10s WriteTimeout:10s DialTimeout:10s  Metadata:map RetryMax:3 RetryBackoff:250ms  Producer:map RetryBackoff:100ms RetryMax:3  Consumer:map RetryBackoff:2s  ShortInterval:1s ShortTotal:30s  Topic:map ReplicationFactor:3  Verbose:true  debug:map BroadcastTraceDir:<nil> DeliverTraceDir:<nil>  operations:map ListenAddress:127.0.0.1:8443 TLS:map PrivateKey:<nil> ClientAuthRequired:false RootCAs:   Enabled:false Certificate:<nil>   metrics:map Provider:disabled Statsd:map Address:127.0.0.1:8125 WriteInterval:30s Prefix:<nil> Network:udp   consensus:map WALDir:/shared/data/etcdraft/wal SnapDir:/shared/data/etcdraft/snapshot  general:map GenesisFile:/etc/hyperledger/fabric/artifacts/keyfiles/genesis.block Profile:map Enabled:false Address:0.0.0.0:6060  BCCSP:map Default:SW SW:map Hash:SHA2 Security:256 FileKeyStore:map KeyStore:<nil>    LocalMSPDir:/etc/hyperledger/fabric/artifacts/keyfiles/ordererorg/orderers/orderer2nd-ordererorg.ordererorg/msp LedgerType:file Keepalive:map ServerMinInterval:60s ServerInterval:7200s ServerTimeout:20s  ListenPort:7050 TLS:map PrivateKey:/etc/hyperledger/fabric/artifacts/keyfiles/ordererorg/orderers/orderer2nd-ordererorg.ordererorg/tls/server.key Certificate:/etc/hyperledger/fabric/artifacts/keyfiles/ordererorg/orderers/orderer2nd-ordererorg.ordererorg/tls/server.crt RootCAs: /etc/hyperledger/fabric/artifacts/keyfiles/ordererorg/orderers/orderer2nd-ordererorg.ordererorg/tls/ca.crt  ClientAuthRequired:false ClientRootCAs:<nil> Enabled:true  Cluster:map ReplicationPullTimeout:5s ListenPort:<nil> ServerCertificate:<nil> ReplicationBufferSize:20971520 DialTimeout:5s RPCTimeout:7s ReplicationRetryTimeout:5s RootCAs: /etc/hyperledger/fabric/artifacts/keyfiles/ordererorg/orderers/orderer2nd-ordererorg.ordererorg/tls/ca.crt  ReplicationBackgroundRefreshInterval:5m ClientPrivateKey:/etc/hyperledger/fabric/artifacts/keyfiles/ordererorg/orderers/orderer2nd-ordererorg.ordererorg/tls/server.key ServerPrivateKey:<nil> ListenAddress:<nil> ClientCertificate:/etc/hyperledger/fabric/artifacts/keyfiles/ordererorg/orderers/orderer2nd-ordererorg.ordererorg/tls/server.crt  Authentication:map TimeWindow:15m  ListenAddress:0.0.0.0 LocalMSPID:ordererorg GenesisMethod:file GenesisProfile:SampleInsecureSolo  fileledger:map Prefix:hyperledger-fabric-ordererledger Location:/shared/data  ramledger:map HistorySize:1000   snapshot-OSN2new-FAB-13604-scenario2.log:182:2019-01-16 15:32:19.872 UTC  localconfig  completeInitialization -> INFO 0b6 Kafka.Version unset, setting to 0.10.2.0 snapshot-OSN2new-FAB-13604-scenario2.log:309:	Kafka.Retry.ShortInterval = 1s snapshot-OSN2new-FAB-13604-scenario2.log:310:	Kafka.Retry.ShortTotal = 30s snapshot-OSN2new-FAB-13604-scenario2.log:311:	Kafka.Retry.LongInterval = 5m0s snapshot-OSN2new-FAB-13604-scenario2.log:312:	Kafka.Retry.LongTotal = 12h0m0s snapshot-OSN2new-FAB-13604-scenario2.log:313:	Kafka.Retry.NetworkTimeouts.DialTimeout = 10s snapshot-OSN2new-FAB-13604-scenario2.log:314:	Kafka.Retry.NetworkTimeouts.ReadTimeout = 10s snapshot-OSN2new-FAB-13604-scenario2.log:315:	Kafka.Retry.NetworkTimeouts.WriteTimeout = 10s snapshot-OSN2new-FAB-13604-scenario2.log:316:	Kafka.Retry.Metadata.RetryMax = 3 snapshot-OSN2new-FAB-13604-scenario2.log:317:	Kafka.Retry.Metadata.RetryBackoff = 250ms snapshot-OSN2new-FAB-13604-scenario2.log:318:	Kafka.Retry.Producer.RetryMax = 3 snapshot-OSN2new-FAB-13604-scenario2.log:319:	Kafka.Retry.Producer.RetryBackoff = 100ms snapshot-OSN2new-FAB-13604-scenario2.log:320:	Kafka.Retry.Consumer.RetryBackoff = 2s snapshot-OSN2new-FAB-13604-scenario2.log:321:	Kafka.Verbose = true snapshot-OSN2new-FAB-13604-scenario2.log:322:	Kafka.Version = 0.10.2.0 snapshot-OSN2new-FAB-13604-scenario2.log:323:	Kafka.TLS.Enabled = false snapshot-OSN2new-FAB-13604-scenario2.log:324:	Kafka.TLS.PrivateKey = "" snapshot-OSN2new-FAB-13604-scenario2.log:325:	Kafka.TLS.Certificate = "" snapshot-OSN2new-FAB-13604-scenario2.log:326:	Kafka.TLS.RootCAs =    snapshot-OSN2new-FAB-13604-scenario2.log:327:	Kafka.TLS.ClientAuthRequired = false snapshot-OSN2new-FAB-13604-scenario2.log:328:	Kafka.TLS.ClientRootCAs =    snapshot-OSN2new-FAB-13604-scenario2.log:329:	Kafka.SASLPlain.Enabled = false snapshot-OSN2new-FAB-13604-scenario2.log:330:	Kafka.SASLPlain.User = "" snapshot-OSN2new-FAB-13604-scenario2.log:331:	Kafka.SASLPlain.Password = "" snapshot-OSN2new-FAB-13604-scenario2.log:332:	Kafka.Topic.ReplicationFactor = 3 snapshot-OSN2new-FAB-13604-scenario2.log:358:2019-01-16 15:32:20.530 UTC  common.channelconfig  initializeProtosStruct -> DEBU 0de Processing field: KafkaBrokers snapshot-OSN2new-FAB-13604-scenario2.log:550:2019-01-16 15:32:21.160 UTC  common.channelconfig  initializeProtosStruct -> DEBU 153 Processing field: KafkaBrokers snapshot-OSN2new-FAB-13604-scenario2.log:757:2019-01-16 15:32:21.312 UTC  common.channelconfig  initializeProtosStruct -> DEBU 1d7 Processing field: KafkaBrokers snapshot-OSN2new-FAB-13604-scenario2.log:974:2019-01-16 15:32:21.372 UTC  common.channelconfig  initializeProtosStruct -> DEBU 265 Processing field: KafkaBrokers snapshot-OSN2new-FAB-13604-scenario2.log:1285:2019-01-16 15:32:21.934 UTC  common.channelconfig  initializeProtosStruct -> DEBU 31f Processing field: KafkaBrokers snapshot-OSN2new-FAB-13604-scenario2.log:1433:2019-01-16 15:32:22.028 UTC  common.channelconfig  initializeProtosStruct -> DEBU 39a Processing field: KafkaBrokers {code}  ></body> </Action>
<Action id="55744" issue="36627" author="yacovm" type="comment" created="2019-01-17 08:23:32.0" updateauthor="yacovm" updated="2019-01-17 14:02:03.0"> <body><! CDATA {quote}    BUG7 - more errors (connection to o2 failed) seen in o3 AFTER o3 recognized o2 as the leader, for 2 more seconds. WHY? Yes, it was a functioning network that time. {quote} If you mean:  {quote}2019-01-16 15:32:55.794 UTC  orderer.consensus.etcdraft  serveRaft -> INFO 4f57f^  0m Raft leader changed: 0 -> 2 {"channel": "orderersystemchannel", "node": 3}  2019-01-16 15:32:55.875 UTC  orderer.consensus.etcdraft  send -> ERRO 4f59c^  0m Failed to send StepRequest to 2, because: rpc error: code = Unavailable desc = all SubConns are in TransientFailure{quote}  Then it's not a bug - it can be that someone connected to you, however your gRPC connection still didn't connect to the other node.  It actually makes sense because node 2 was restarted and node 3 tried to probe it on an exponential backoff logic, so node 2 has the timing advantage here over node 3.    ></body> </Action>
<Action id="55797" issue="36627" author="scottz" type="comment" created="2019-01-18 15:20:58.0" updateauthor="scottz" updated="2019-01-18 15:20:58.0"> <body><! CDATA BUG5 : we tested with yacov's developer image; seemed to work BUG6 : still awaiting resolution BUG7 : agree this issue is not a bug, and can be ignored BUG8 : still awaiting resolution  ></body> </Action>
<Action id="55807" issue="36627" author="kchristidis" type="comment" body=" ~scottz : Thanks for updating this. Let&apos;s move on to create Bugs out of BUG5, BUG7, BUG8. Let&apos;s add the relevant artifacts to each JIRA, along with a summary of where we stand (what the issue is, and what the devs think is going on)." created="2019-01-18 17:19:51.0" updateauthor="kchristidis" updated="2019-01-18 17:19:51.0"/>
<Action id="55842" issue="36627" author="kchristidis" type="comment" body="As is the case with FAB-13603, I cannot parse the contents of the table. I suspect the answer will be the same as for FAB-13603 though. Let&apos;s also format this properly as a table, the Jira editor gives us this option." created="2019-01-18 21:32:54.0" updateauthor="kchristidis" updated="2019-01-18 21:32:54.0"/>
<Action id="57268" issue="36627" author="kchristidis" type="comment" created="2019-02-18 22:43:27.0" updateauthor="kchristidis" updated="2019-02-18 22:43:27.0"> <body><! CDATA BUG8 is not a bug.  RE: BUG6 -  ~guoger : I suspect this is a harmless occurence not related to the protocol. But let's confirm so Scott & team can close this.  ></body> </Action>
<Action id="57891" issue="36627" author="scottz" type="comment" body="The bugs were created, and closed or fixed. And this was reexecuted last week during other tests. The basics work fine so we can close this. Another bug FAB-14454 was opened when executing a different restart testcase (chaos monkey) FAB-14220." created="2019-03-05 16:36:59.0" updateauthor="scottz" updated="2019-03-05 16:57:17.0"/>
