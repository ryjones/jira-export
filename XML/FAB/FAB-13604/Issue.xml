<Issue id="36627" key="FAB-13604" number="13604" project="10002" reporter="scottz" assignee="scottz" creator="scottz" type="10101" summary="Crash and restart leader OSN (single-thread invocations, 1 channel, latency mode)" priority="1" resolution="10000" status="6" created="2019-01-09 22:30:12.0" updated="2019-07-23 20:59:49.0" resolutiondate="2019-07-23 20:59:49.0" votes="0" watches="5" workflowId="48325"> <description><! CDATA +SETUP+: Create network as in FAB-13601.  *Note:* The first four rows of this table are simplified versions of the test scenarios described later on in this text. These are executed when no transactions are entered into the system, for simpler debugging. The full objectives of the two scenarios of this testcase are actually outlined by the last four rows.  ||Date Done||Description|| |1/11|A. stop    leader OSN of orderersystemchannel |1/11|B. restart leader OSN of orderersystemchannel |1/11|C. stop    leader OSN of channel1 |1/11|D. restart leader OSN of channel1 |1/12|E. stop non-ingress    leader OSN of channel1 with single-thread transactions and single TX per block |1/15|F. restart non-ingress leader OSN of channel1 with single-thread transactions and single TX per block |1/12|G. stop ingress        leader OSN of channel1 with single-thread transactions and single TX per block |1/15|H. restart ingress     leader OSN of channel1 with single-thread transactions and single TX per block   +INPUTS (scenario 1)+: # Run transactions as in FAB-13601. # Check orderer logs to determine which orderer is the leader of the application channel (could be any of the three; ensure it IS the ingress orderer for this testcase). # While the traffic is running, stop and start the leader orderer (which is also currently the ingress orderer).  +EXPECTATIONS+: Similar as in FAB-13601, but some transactions could be lost (e.g. those TXs that are sent blindly to the leader/ingress orderer while it is stopped will be NAK'd, plus any transactions received but not replicated to other orderers yet). Also, in the running orderers, for the system channel and for each channel shared with the stopped orderer, we can expect to see an error log when their connection drops to the stopped orderer (followed by an info log indicating its recovery, whenever it is started again - refer to FAB-12687 for logging details). For the channels where the stopped orderer is the leader, the remaining active orderers should elect a new leader and be ready once the stopped orderer is restarted and rejoins the channel and starts forwarding transactions to the new leader.  +INPUTS (scenario 2):+ # After the previous test completes, repeat testcase to send another 10,000 transactions. # Check orderer logs to determine which orderer is the leader (expect to be either of the other two (non-ingress) orderers). # While traffic is running, stop and start the leader orderer, which is not the ingress orderer.  +EXPECTATIONS+: More of the same. Expect less that 10,000 more blocks to be added to ledger. It is ok to see a few lost transactions. E.g. Those TXs that are sent to the ingress orderer while a new leader is being elected, possibly a few seconds, should be NAK'd. Plus, any transactions received by the ingress orderer and forwarded to the leader right before it was stopped and before it added them to blocks and replicated the blocks to other orderers yet).  ></description> </Issue>
