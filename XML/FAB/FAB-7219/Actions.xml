<Action id="35639" issue="24614" author="jeffgarratt" type="comment" created="2017-11-29 16:37:32.0" updateauthor="jeffgarratt" updated="2017-11-29 16:39:46.0"> <body><! CDATA The proposal response payload should be a marshaled protobuf structure to support extension, as is demonstrated by the issue arising here.  Currently the behave system does NOT leverage the payload during the install invocation, but simply checks the status for 200, which seems redundant in the context of the current response.  I would side towards changing the payload to a marshaled protobuf to allow for future extension.     I added the ARCH label as the move to a protobuf case would indicate a change in the realtionship between fabric clients and the peer in this case.  ></body> </Action>
<Action id="35640" issue="24614" author="jyellick" type="comment" created="2017-11-29 16:39:50.0" updateauthor="jyellick" updated="2017-11-29 16:39:50.0"> <body><! CDATA I agree with this in principal.  As  ~jeffgarratt  points out, this seems like a good reminder going forward that we should be careful _never_ to return raw strings as part of an API, to only ever return an encapsulating protobuf message.  I would suggest that the message should actually look like:   {noformat} message CCInstallRsponse { bytes hash = 1; } {noformat}  simply because we overload the notion of 'id' already and hash is more specific.  Additionally, as hashes are bytes, encoding it as a string is space inefficient and the receiver must know the string encoding, so bytes seem generally easier to work with this case.  Assuming there are currently no consumers of this API, then modifying the message should not cause problems with old clients, but, new clients will have to take into account the old peer response.  I would expect logic that looks something like:  {noformat} if bytes.equal(  byte("OK"), resp) { // Ignore this, it's a v1.0 peer } else { // decode the proto response } {noformat}  ></body> </Action>
<Action id="41967" issue="24614" author="denyeart" type="comment" body="Many issues were bulk moved from v1.0 or v1.1 to v1.2 as part of a cleanup effort, and many of these issues are not high priority or actually intended to be worked for v1.2.  This issue is being bulk moved to Future.  If the issue is indeed high priority for v1.2 and/or very low effort, please move back to v1.2 and add a comment to indicate rationale." created="2018-03-23 05:07:47.0" updateauthor="denyeart" updated="2018-03-23 05:07:47.0"/>
<Action id="42071" issue="24614" author="jyellick" type="comment" body="This can and should be addressed with the new lifecycle effort, moving back to v1.2" created="2018-03-23 14:06:53.0" updateauthor="jyellick" updated="2018-03-23 14:06:53.0"/>
<Action id="43290" issue="24614" author="jyellick" type="comment" body="By utilizing chaintool for implementing the APIs of the new LSCC, we enforce that functions have proto inputs and outputs.  Closing as a duplicate." created="2018-04-23 16:05:52.0" updateauthor="jyellick" updated="2018-04-23 16:05:52.0"/>
