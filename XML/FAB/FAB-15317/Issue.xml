<Issue id="39571" key="FAB-15317" number="15317" project="10002" reporter="denyeart" creator="denyeart" type="10000" summary="Streamline how peers receive blocks from other peers" priority="3" status="10100" created="2019-04-30 21:06:29.0" updated="2022-07-26 03:54:40.0" votes="0" watches="6" workflowId="52454"> <description><! CDATA In v1.x peers can receive blocks in three ways: # from orderer # from another peer via proactive gossip push # from another peer via 'state transfer' pull  There are some redundancies and inefficiencies in this approach: * Many networks configure peers to receive blocks from ordering service, rendering the gossiping of blocks and state transfer as unnecessary overhead and complication. * Peer may receive same block multiple times via gossip. * Even if peer has a block in memory already, it may request the same block again via state transfer. * Gossip state transfer can try multiple times concurrently, without waiting for prior requests to time out (this was a bug, which may have been fixed already in some releases). * The gossip buffers are per channel, causing memory issues when a peer has joined many channels.  We can consider various options in future releases to streamline how peers receive blocks:  1) Have peers only receive blocks from orderer  2) Streamline peer-to-peer block transmission capability  2a) Remove either gossiping of blocks or state transfer, and improve the other  2b) Remove both gossiping of blocks and state transfer, and utilize simpler peer-to-peer block deliver service instead to read a stream of blocks from another peer (consistent with how peers receive blocks from orderer).       ></description> </Issue>
