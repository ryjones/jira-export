<Action id="21359" issue="15246" author="muralisr" type="comment" created="2017-03-07 17:57:21.0" updateauthor="muralisr" updated="2017-03-07 17:58:08.0"> <body><! CDATA Will work with  ~wlahti  on this.   ~pmullaney  Understand you are out for a bit. The Java SDK (and maybe node too) wants the ability to look at RW set. We can revisit  this later at your convenience to make sure we are doing the right thing but for now we will send out the RW set with the Block event which was nulled out for efficiency.  ></body> </Action>
<Action id="21430" issue="15246" author="wlahti" type="comment" body="Lowering the priority of this item as there are ongoing discussions regarding how to handle this and it is not needed for v1.0." created="2017-03-10 14:41:04.0" updateauthor="wlahti" updated="2017-03-10 14:50:38.0"/>
<Action id="21925" issue="15246" author="wlahti" type="comment" body="Moving this JIRA to v1.1 as it is not needed for v1.0, as mentioned above. " created="2017-04-06 14:54:43.0" updateauthor="wlahti" updated="2017-04-06 14:54:43.0"/>
<Action id="21928" issue="15246" author="rickr" type="comment" body=" ~Clayton Sims  I think this was a CLS requirement." created="2017-04-06 16:23:10.0" updateauthor="rickr" updated="2017-04-06 16:23:10.0"/>
<Action id="22174" issue="15246" author="denyeart" type="comment" created="2017-04-12 02:46:38.0" updateauthor="denyeart" updated="2017-04-12 02:46:38.0"> <body><! CDATA  ~binhn   ~mastersingh24  Can you provide your view? I think when we talked about this last month, that we decided that the solution in the future would be to have clients register for one of two kinds of events: 1) events with (potentially large) read write set, which is now proto-based and therefore easily parseable by SDK 2) events without read write set.    Is that your understanding? I assume that would be for 1.1.  And what do you think the 1.0 behavior should be - events with or without read write set?   ~pmullaney     ></body> </Action>
<Action id="22274" issue="15246" author="troyronda" type="comment" created="2017-04-13 00:17:33.0" updateauthor="troyronda" updated="2017-04-13 00:25:13.0"> <body><! CDATA There should be a way to restrict what's being sent back to clients. i.e., so that they only find out that their transaction has been committed.  And the SDKs shouldn't be depending on having this amount of information. Confidentiality is important and client should be considered less trusted.  I am curious what the client is doing with these RW sets coming back in an event?  ></body> </Action>
<Action id="22298" issue="15246" author="senthil1" type="comment" created="2017-04-13 07:03:47.0" updateauthor="senthil1" updated="2017-04-13 07:04:46.0"> <body><! CDATA For performing ETL from blockchain to outside DB for analytics, RW sets would be required. The record kept outside blockchain will not be used for any blockchain transaction. It will be purely used for analytics. For e.g., (i) can dump RW sets into a graph database and perform provenance queries. (ii) can dump RW sets into elastic search and do fuzzy queries to identify fraud in KYC use-cases. etc...  I implemented a process which receives block_event and convert the whole block data into a JSON. Any solution can take this JSON and transform/store on preferred DB store for analytics. For my use-case, I had to modify the fabric events code to pass whole RW set.   The RW set was removed from Block mainly due to large size as a result of deploy transaction. Now, that we have changed the deployment model (install on each peer), we only store hash(chaincodeprogram) into the write set as given below:  \{"reads": {"key":"mycc1"} ,"writes": {"key":"mycc1","value":"CgVteWNjMRIBMBoYChYIARIKEgVteWNjMRoBMBoGCgRpbml0IgRlc2NjKgR2c2NjMhcSCBIGCAESAggAGgsSCQoHREVGQVVMVA=="} }  As Dave suggested, if we can give two kinds of events: (i) with read-set, and (ii) without read-set, it would help all use-cases.    ></body> </Action>
<Action id="22322" issue="15246" author="denyeart" type="comment" created="2017-04-13 08:54:22.0" updateauthor="denyeart" updated="2017-04-13 08:55:02.0"> <body><! CDATA That's right  ~Senthil1 .  The events may be used for monitoring, auditing, or building a data store, in which case the write set is needed.   ~troyronda  Once side db is in place, the write sets in the block transaction would not include sensitive data.  Does that resolve your concern? It is assumed that members of the channel can see transaction data on that channel (either via api queries or block events).  Regardless, with the intent to provide an option of two kinds of events in the future (with and without rwsets), we need to determine the best default for 1.0.0, which would work well for 1.0.0 as well as enable a seamless transition to the ultimate future behavior.  I will therefore tag as High for 1.0.0 so that we don't miss this decision.  ~binhn   ~mastersingh24   ></body> </Action>
<Action id="22327" issue="15246" author="troyronda" type="comment" created="2017-04-13 11:06:18.0" updateauthor="troyronda" updated="2017-04-13 11:40:03.0"> <body><! CDATA  ~denyeart  FYI: I consider this and the existing block events to be a *confidentiality hole* in fabric. It must not be the case that any client can snoop on all blocks or RW sets.  SideDB helps, of course, but doesn't fully address - not every data item goes into SideDB and even hashes are considered sensitive such that disclosure (outside the peers) is not allowed.   ~binhn   ~mastersingh24   ~denyeart  I urge you to plug this confidentiality hole by introducing configuration on which clients are allowed to be snooping on blocks or RW sets. Most clients should only need to know their transaction committed (by identifier, for example). (so I created FAB-3134).  p.s., is this feature so that someone doesn't need to setup/operate a peer to audit the ongoing block stream?  ></body> </Action>
<Action id="22333" issue="15246" author="rickr" type="comment" created="2017-04-13 12:31:52.0" updateauthor="rickr" updated="2017-04-13 12:35:20.0"> <body><! CDATA  ~mastersingh24   ~denyeart   ~muralisr   ~wlahti    ~pmullaney  So this is officially in and I can expect a change set soon that from the SDK I can give this to the client? I _really need to know where to focus my effort on_. If this is not in then I don't want to be work on the SDK side on it.   I see it marked for v1.0.0 *but it unassigned.*   ></body> </Action>
<Action id="22340" issue="15246" author="troyronda" type="comment" created="2017-04-13 13:17:49.0" updateauthor="troyronda" updated="2017-04-13 13:21:16.0"> <body><! CDATA To cover fabric deployments with confidentiality requirements, we must be able to disable or restrict stuff like this. See above.  So: Client SDKs must not rely on it being available, as there needs to be enforced policy rules on what clients can see.  ></body> </Action>
<Action id="22342" issue="15246" author="denyeart" type="comment" created="2017-04-13 13:49:00.0" updateauthor="denyeart" updated="2017-04-13 13:49:00.0"> <body><! CDATA  ~rickr  No decision yet - I tagged it as 1.0.0 High to ensure a decision is made as soon as possible.   ~troyronda 's comments are broader than event content. It sounds like he doesn't even want channel members to access channel blocks/transactions via API (that were not submitted by that member).  I think this would be a fundamental change, but I defer to experts in access control area such as  ~mastersingh24   ~binhn   ~ellaki  for their thoughts.  ></body> </Action>
<Action id="22356" issue="15246" author="pmullaney" type="comment" body="One potential stumbling block on this one is that the nodejs implementation of GRPC seems to have size limits on messages that get exceeded when these are included in the events. At least, that is what I ran into." created="2017-04-13 15:43:09.0" updateauthor="pmullaney" updated="2017-04-13 15:43:09.0"/>
<Action id="22359" issue="15246" author="denyeart" type="comment" created="2017-04-13 15:57:47.0" updateauthor="denyeart" updated="2017-04-13 15:57:47.0"> <body><! CDATA  ~pmullaney  Can you provide more details? What is the max size? Is it configurable? Is there a ticket against nodejs GRPC? I assume now that Instantiation is much smaller than Deploy used to be, we won't be blocked out of the gate.  But of course there is always a chance normal transactions are large.  ></body> </Action>
<Action id="22376" issue="15246" author="pmullaney" type="comment" body="Sorry David, this was a while back and not deemed an issue mainly because it aligned with stripping out the deploy content as was done in v0.6 and there didn&apos;t seem to be a need for clients to access rwset. Now that we have install and instantiate the sizes will certainly be much smaller.  I did try at the time to resolve/look into changing the max size, but did not get too far. I am now seeing an option that I did not see at the time for max message size that may solve the issue (max_receive_message_length default: 4k) but I also see a recent bug report that indicates setting it to unlimited is broken in released versions ( https://github.com/grpc/grpc/issues/10573 )." created="2017-04-13 16:46:35.0" updateauthor="pmullaney" updated="2017-04-13 16:54:52.0"/>
<Action id="22380" issue="15246" author="pmullaney" type="comment" body="I could address this on the fabric side with a configuration setting to send the rwset if enabled easily if that&apos;s what the consensus is? Default to disabled?" created="2017-04-13 18:28:54.0" updateauthor="pmullaney" updated="2017-04-13 18:32:50.0"/>
<Action id="22381" issue="15246" author="troyronda" type="comment" created="2017-04-13 18:41:19.0" updateauthor="troyronda" updated="2017-04-13 18:45:38.0"> <body><! CDATA  ~denyeart  Yes - I am saying  that it cannot be the case that *any* client can access whatever blocks they want via API, event stream, ...  Access to such information needs to be authorized only to certain clients or have a mechanism to disable.  FAB-3151  ></body> </Action>
<Action id="22385" issue="15246" author="praveen.j" type="comment" body="I agree with  ~denyeart . I would like to have the RW set available with option to turn in on/off. What the client sees should ideally only be the events/RW sets of transactions they initiated." created="2017-04-13 19:29:31.0" updateauthor="praveen.j" updated="2017-04-13 19:29:31.0"/>
<Action id="22386" issue="15246" author="binhn" type="comment" created="2017-04-13 21:21:12.0" updateauthor="binhn" updated="2017-04-13 21:21:42.0"> <body><! CDATA  ~troyronda   As we chatted on some channel, this is the state of 1.0, and it's relying on the application to do further filtering for end-user access. In general, ACL (detail level) has not been addressed.  What we have today is based on org: If an org has access to a channel, any identity issued by that org has access to the same channel. However, this is not cast in concrete; the MSP implementation can be replaced to change this behavior. Someone volunteer? Seriously, event filtering to individual listener is a complex task, especially when privacy matter. We need tcert with attributes.  Thanks for writing up  FAB-3151 .  ></body> </Action>
<Action id="22544" issue="15246" author="mastersingh24" type="comment" body="I am marking this as a new feature as it is not actually a bug" created="2017-04-16 14:56:24.0" updateauthor="mastersingh24" updated="2017-04-16 14:56:24.0"/>
<Action id="66980" issue="15246" author="sykesm" type="comment" body="Stale" created="2020-01-22 18:55:50.0" updateauthor="sykesm" updated="2020-01-22 18:55:50.0"/>
