<Issue id="19288" key="FAB-5333" number="5333" project="10002" reporter="mochechan" creator="mochechan" type="10004" summary="Inconsistent results between in real Fabric chaincode deployment and in unit test" priority="3" resolution="10000" status="6" created="2017-07-17 01:57:13.0" updated="2018-07-20 14:13:47.0" resolutiondate="2017-11-27 04:09:08.0" votes="0" watches="2" workflowId="39462"> <description><! CDATA If we use stub.PutState and stub.GetState in the same Invoke, we will get inconsistent results between in real Fabric chaincode and in unit test. Here gives a simple example:  76 func (t *CC) Invoke(stub shim.ChaincodeStubInterface) peer.Response \{ 77 var err error 78 var byteArray   byte 79  80 err = stub.PutState("just-existing",   byte("just-data")) 81 if err != nil \{ 82 return shim.Error(err.Error()) 83 } 84  85 byteArray,err = stub.GetState("just-existing") 86 if err != nil \{ 87 return shim.Error(err.Error()) 88 } 89 if byteArray == nil \{ 90 fmt.Println("success but no data ") 91 } 92 fmt.Println(string(byteArray)) 93 }  If we run this Invoke only one time in unit test, we will get "just-data".  if we run this Invoke only one time in real Fabric deployment, we will get "success but no data".     ></description> </Issue>
