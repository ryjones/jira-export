<Action id="39365" issue="26654" author="lehors" type="comment" created="2018-01-30 14:49:11.0" updateauthor="lehors" updated="2018-01-30 14:49:11.0"> <body><! CDATA Hi,  Where does this startfabric.sh script come from?  Which platform are you on?  Thanks.     ></body> </Action>
<Action id="39733" issue="26654" author="lehors" type="comment" created="2018-02-06 17:33:52.0" updateauthor="lehors" updated="2018-02-06 17:33:52.0"> <body><! CDATA Ok, I was able to reproduce this same error on Windows 7.  I will investigate further.  ></body> </Action>
<Action id="39749" issue="26654" author="lehors" type="comment" created="2018-02-06 23:19:58.0" updateauthor="lehors" updated="2018-02-06 23:19:58.0"> <body><! CDATA After further investigation I can say that there is at least a workaround: upgrade to fabric-1.1-alpha.  Indeed, while I could reproduce the problem in fabric-1.0.5 it has disappeared in fabric-1.1-alpha.  I'm not sure why but it might just be because of the upgrade from go1.7 to go1.9 because I don't quite understand the source of the problem.  The installation of the node chaincode fails with 1.0.5 because the type is not properly recognized. This can simply be tested by logging into the cli: {code:java} $ docker exec -it -e "CORE_PEER_LOCALMSPID=Org1MSP" -e "CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org 1.example.com/users/Admin@org1.example.com/msp" cli /bin/bash{code} Then executing: {code:java} root@4e258a910ef8:/opt/gopath/src/github.com/hyperledger/fabric# peer chaincode install -n fabcar -v 1.0 -p /opt/gopath/src/github.com/fabcar/node -l node 2018-02-06 22:13:49.476 UTC  msp  GetLocalMSP -> DEBU 001 Returning existing local MSP 2018-02-06 22:13:49.476 UTC  msp  GetDefaultSigningIdentity -> DEBU 002 Obtaining default signing identity 2018-02-06 22:13:49.477 UTC  chaincodeCmd  checkChaincodeCmdParams -> INFO 003 Using default escc 2018-02-06 22:13:49.477 UTC  chaincodeCmd  checkChaincodeCmdParams -> INFO 004 Using default vscc Error: Error getting chaincode code chaincode: Failed to determine platform type: Unknown chaincodeType: NODE  root@5c51ab9f551e:/opt/gopath/src/github.com/hyperledger/fabric/peer# peer version peer:  Version: 1.0.5  Go version: go1.7.5  OS/Arch: linux/amd64  Chaincode:   Base Image Version: 0.3.2   Base Docker Namespace: hyperledger   Base Docker Label: org.hyperledger.fabric   Docker Namespace: hyperledger{code}  The code that's not functioning is in fabric/core/chaincode/platforms/platforms.go: {code:java} // Find returns the platform interface for the given platform type func Find(chaincodeType pb.ChaincodeSpec_Type) (Platform, error) {      switch chaincodeType {     case pb.ChaincodeSpec_GOLANG:         return &golang.Platform{}, nil     case pb.ChaincodeSpec_CAR:         return &car.Platform{}, nil     case pb.ChaincodeSpec_JAVA:         return &java.Platform{}, nil     case pb.ChaincodeSpec_NODE:         return &node.Platform{}, nil     default:         return nil, fmt.Errorf("Unknown chaincodeType: %s", chaincodeType)     }{code} I don't quite see how this could fail but didn't investigate further because the problem no longer exists in 1.1 so I'm not sure it's worth spending more time on it.  Running the 1.1-alpha peer command in the same container, that command succeeds: {code:java} root@4e258a910ef8:/opt/gopath/src/github.com/hyperledger/fabric# build/bin/peer chaincode install -n fabcar -v 1.0 -p /opt/gopath/src/github.com/fabcar/node -l node 2018-02-06 22:12:56.709 UTC  msp  GetLocalMSP -> DEBU 001 Returning existing local MSP 2018-02-06 22:12:56.710 UTC  msp  GetDefaultSigningIdentity -> DEBU 002 Obtaining default signing identity 2018-02-06 22:12:56.712 UTC  chaincodeCmd  checkChaincodeCmdParams -> INFO 003 Using default escc 2018-02-06 22:12:56.713 UTC  chaincodeCmd  checkChaincodeCmdParams -> INFO 004 Using default vscc 2018-02-06 22:12:56.716 UTC  chaincodeCmd  getChaincodeSpec -> DEBU 005 java chaincode enabled 2018-02-06 22:12:56.719 UTC  node-platform  GetDeploymentPayload -> DEBU 006 Packaging node.js project from path /opt/gopath/src/github.com/fabcar/node 2018-02-06 22:12:56.720 UTC  container  WriteFolderToTarPackage -> INFO 007 rootDirectory = /opt/gopath/src/github.com/fabcar/node 2018-02-06 22:12:56.723 UTC  container  WriteFileToPackage -> DEBU 008 Writing file to tarball: src/fabcar.js 2018-02-06 22:12:56.737 UTC  container  WriteFileToPackage -> DEBU 009 Writing file to tarball: src/package.json 2018-02-06 22:12:56.741 UTC  msp/identity  Sign -> DEBU 00a Sign: plaintext: 0A9C070A5C08031A0C08E8D0E8D30510...F3F1EF000000FFFF664C5065001E0000 2018-02-06 22:12:56.742 UTC  msp/identity  Sign -> DEBU 00b Sign: digest: 3D92CF41DFD4A6C8A3FD523EE0FEB8A4DC06CD0D1A328118719C8EA405CCD44A 2018-02-06 22:12:56.779 UTC  chaincodeCmd  install -> DEBU 00c Installed remotely response:<status:200 payload:"OK" > 2018-02-06 22:12:56.780 UTC  main  main -> INFO 00d Exiting.....  root@4e258a910ef8:/opt/gopath/src/github.com/hyperledger/fabric# build/bin/peer version peer:  Version: 1.1.0-beta-snapshot-ec639a6  Go version: go1.9  OS/Arch: linux/amd64  Experimental features: true  Chaincode:   Base Image Version: 0.4.5   Base Docker Namespace: hyperledger   Base Docker Label: org.hyperledger.fabric   Docker Namespace: hyperledger{code}       ></body> </Action>
<Action id="39919" issue="26654" author="lehors" type="comment" created="2018-02-09 14:58:19.0" updateauthor="lehors" updated="2018-02-09 14:58:19.0"> <body><! CDATA Support for Node chaincode was introduced in fabric-1.1. So, this problem actually occurs when trying to use a Node chaincode on a pre 1.1 network.  This is actually working as designed.     ></body> </Action>
