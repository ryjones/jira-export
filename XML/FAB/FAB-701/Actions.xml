<Action id="19875" issue="13003" author="tuand" type="comment" created="2016-11-28 20:37:04.0" updateauthor="tuand" updated="2016-11-28 20:37:45.0"> <body><! CDATA Listing possible authentication scenarios so we're clear on what we want to handle in this story # client (shim) <-> broker :  yes, handle this via TLS # broker <-> broker : yes , handle via TLS # broker <-> zookeeper :  no, do not handle.  As of Kafka 0.9, Kerberos only.  We'll have to document the default kafka network configuration # zookeeper <-> zookeeper : no, do not handle.   ></body> </Action>
<Action id="19876" issue="13003" author="tuand" type="comment" created="2016-11-28 20:44:24.0" updateauthor="tuand" updated="2016-11-28 20:44:24.0"> <body><! CDATA For client <-> broker authentication,  Kafka uses the "system" key/trust stores ( their examples use openssl and keytool ) and use CA certs in their examples. We should probably continue to use CA certs as that simplifies things in not having to gather and distribute individual certs for each client/shim.  Kafka docs mentions using 2 Certificate authorities,  one for the clients and one for the brokers.  In any case,  this calls for having a CA for the ordering service.  Will have to note that as the COP/MSP discussions continue  ></body> </Action>
<Action id="19877" issue="13003" author="tuand" type="comment" body="TLS, Kerberos, etc ... configuration is done via configuration files (JAAS and .properties files in Kafka lingo).  Don&apos;t see a way around this yet, there will be much manual configuration." created="2016-11-28 20:47:37.0" updateauthor="tuand" updated="2016-11-28 20:47:37.0"/>
<Action id="19878" issue="13003" author="tuand" type="comment" created="2016-11-28 20:54:17.0" updateauthor="tuand" updated="2016-11-28 22:13:06.0"> <body><! CDATA Kafka ACL has CLI commands to add/remove consumers and producers. Although, at this point,  I don't see the need for using this. Authentication/authorization for the fabric is already handled at the peer <-> ordering service interface so as long as the client<->broker is allowed via TLS,  is there a need for further Kafka ACL processing ? In addition, given that connections are authorized via CA certs,  is there a need to keep track of individual client or broker entering/leaving the network ?   ></body> </Action>
<Action id="19879" issue="13003" author="kchristidis" type="comment" created="2016-11-28 21:13:13.0" updateauthor="kchristidis" updated="2016-11-28 21:13:13.0"> <body><! CDATA "Kafka ACL has APIs to add/remove consumers and producers."  For what it's worth, this is incorrect. There is a CLI but not an API, unless there was a development on this in the past 2-3 weeks that I've missed.  ></body> </Action>
<Action id="19880" issue="13003" author="tuand" type="comment" body="I need to be more precise  ~kchristidis  . Yes, CLI, not API" created="2016-11-28 22:12:42.0" updateauthor="tuand" updated="2016-11-28 22:12:42.0"/>
<Action id="19963" issue="13003" author="kchristidis" type="comment" body="I am still not sure what the plan of attack is here, esp. w/r/t updating this setup whenever, say, a new org is added as an orderer. Could you provide some details?" created="2016-12-06 15:44:23.0" updateauthor="kchristidis" updated="2016-12-06 15:44:23.0"/>
<Action id="20002" issue="13003" author="tuand" type="comment" body="A decent overview on securing Kafka : http://www.slideshare.net/ConfluentInc/securing-kafka" created="2016-12-06 21:34:32.0" updateauthor="tuand" updated="2016-12-06 21:34:32.0"/>
<Action id="20004" issue="13003" author="tuand" type="comment" created="2016-12-06 21:47:12.0" updateauthor="tuand" updated="2016-12-06 21:47:12.0"> <body><! CDATA I think this is the steps we need to go through : # before startup of fabric/orderer/kafka * create CA certs for all organizations that are providing orderers , call then O_CA1, O_CA2, etc ... * create CA cert for Kafka network, call it K_CA,  i.e. each Kafka broker has a certificate signed by K_CA * for each Kafka broker, create a keystore (containing the cert and private key of the broker) * for each Kafka broker, create a truststore ( containing O_CA1, O_CA2, etc ... ) * for each Kafka broker, edit .properties file to turn TLS on and point to keystore/truststore * for each orderer, create tls.Config struct which contains the orderer's certificate and K_CA, pass config to sarama # Start orderers and Kafka brokers # At this point,  the orderer<->Kafka connection is secured via TLS  ></body> </Action>
<Action id="20005" issue="13003" author="tuand" type="comment" created="2016-12-06 21:54:27.0" updateauthor="tuand" updated="2016-12-06 21:54:27.0"> <body><! CDATA to add an orderer: * if the orderer is part of an organization with an O_CA cert already in the Kafka broker's truststore,  nothing needs to be done on the Kafka broker. The new orderer is confiigured the same as existing orderers * if the orderer is part of a new organization then that organization's CA cert needs to be added to the Kafka broker's truststore.  *+I do not yet know+* if the brokers can dynamically handle a new addition to the truststore or if we have to restart.  ></body> </Action>
<Action id="20006" issue="13003" author="tuand" type="comment" created="2016-12-06 22:02:01.0" updateauthor="tuand" updated="2016-12-06 22:02:01.0"> <body><! CDATA To remove an orderer: *+I do not know yet+* if Kafka supports a Certificate Revocation List.    The one recommendation I've seen so far ( in slide deck in comment above )  is to remove r/w permissions via the authorizer. The authorizer can be a CLI call or we can write a plugin.  And as for addition, I do see yet if removal can be done dynamically or if we have to restart Kafka  ></body> </Action>
<Action id="20012" issue="13003" author="tuand" type="comment" created="2016-12-07 18:38:14.0" updateauthor="tuand" updated="2016-12-07 18:56:47.0"> <body><! CDATA a sample broker TLS configuration ( search for string "ssl" )    ^server.properties    a sample Kafka client TLS configuration   ^client-ssl.properties    The console producer and consumer work with this configuration  The certificates, keystores and truststores are created using keytool and openssl following instructions from  this link|http://docs.confluent.io/2.0.0/kafka/ssl.html   The broker and client each have a certificate.  Both certificates are signed by the same CA.   ></body> </Action>
<Action id="20013" issue="13003" author="tuand" type="comment" created="2016-12-07 20:34:42.0" updateauthor="tuand" updated="2016-12-07 20:34:42.0"> <body><! CDATA For mutual TLS,  the orderer will need to have the CA cert of Kafka. This will be used to populate sarama's tls.Config.RootCAs  field  Probably will need to pass it via orderer config.  And vice versa, Kafka will need to know the orderer's CA certificate(s).  ></body> </Action>
<Action id="20016" issue="13003" author="tuand" type="comment" created="2016-12-07 22:20:26.0" updateauthor="tuand" updated="2016-12-07 22:51:10.0"> <body><! CDATA From asking on the Kafka users mailing list, it doesn't look like Kafka will dynamically pick up SSL changes ( I will add the mailing list thread once the archives catch up )  A new orderer will either have to be part of an existing CA or a Kafka admin will have to devise a strategy to serially bounce all the brokers  Removing an orderer will have to be done via a CLI authorizer call as described  here|https://kafka.apache.org/documentation#security_authz   ></body> </Action>
<Action id="20019" issue="13003" author="kchristidis" type="comment" created="2016-12-07 22:38:54.0" updateauthor="kchristidis" updated="2016-12-07 22:38:54.0"> <body><! CDATA I saw the email on the mailing list and its response.  I'll note that we want to be able to add a new ordering org, so the script will have to serially bounce all the brokers, if that's the only option available.  Likewise for removing orderers, I assume it will be on a per-org basis.  We'll also need BDD tests for this.  ></body> </Action>
<Action id="20020" issue="13003" author="tuand" type="comment" created="2016-12-07 23:09:47.0" updateauthor="tuand" updated="2016-12-07 23:09:47.0"> <body><! CDATA if we only add/remove orderers on an org basis then the process is much simpler.  In all cases then,  we update the kafka truststore then serially bounce the brokers .   There will necessarily be a minutes?hours? time lag from deciding to add/remove till kafka is ready since this is out-of-band work. We'll have to document in detail  ></body> </Action>
<Action id="20071" issue="13003" author="tuand" type="comment" created="2016-12-12 18:49:25.0" updateauthor="tuand" updated="2016-12-12 18:49:25.0"> <body><! CDATA An issue that came up on #fabric-crypto was who should create the cert used by the orderer when setting up mutual auth TLS between orderer and Kafka brokers.  We agreed that you should not the eCert or have COP create another certificate for TLS use. Mainly because COP's use case is for fabric identity/signing/verification use.   Any enterprise will already have processes in place for creation and use of certificates in SSL/TLS .  We then agreed that creation of the TLS certs used by orderers and brokers is the responsibility of the respective administrators outside of fabric. The administrators are also responsible for passing the location of the certs and configuring orderers and brokers to use these certs.    ></body> </Action>
<Action id="20072" issue="13003" author="tuand" type="comment" created="2016-12-12 18:51:13.0" updateauthor="tuand" updated="2016-12-12 18:51:13.0"> <body><! CDATA (continued ... ) For brokers, this entails adding the right certs and keys to the brokers'  keystore and truststore. For orderers, this entails passing the locations of the CA cert, TLS cert and private key to the orderer. Orderer reads this data and maps to the sarama config struct and sarama will take care of the actual TLS connection.  ></body> </Action>
