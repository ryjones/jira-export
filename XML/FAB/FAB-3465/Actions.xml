<Action id="23075" issue="16061" author="angelo.decaro" type="comment" body=" ~elli-androulaki , ~ales , ~yacovm , ~mastersingh24 , ~ChristopherFerris , ~jonathan , ~binhn , ~muralisr , ~vpaprots@ca.ibm.com , please, may you have your say on this approach. I think it can improve readability and simplify testing of a component that is very critical for fabric. Thanks :)" created="2017-04-27 16:04:48.0" updateauthor="angelo.decaro" updated="2017-04-27 16:39:31.0"/>
<Action id="23080" issue="16061" author="vpaprots" type="comment" created="2017-04-27 17:18:28.0" updateauthor="vpaprots" updated="2017-04-27 17:18:28.0"> <body><! CDATA What do you think of trying to common up testing? Across arbitrary BCCSPs? Some whitebox (i.e. ecdsa.Privatekey) test do not make sense, but many of the interfaces are shared so will always stay the same.  As people start creating their own BCCSPs, this will just get worse at duplication. And we want to make sure that BCCSPs are indeed compatible with fabric, having a test suite for that would be good.  I know there is a lot of overlap in code between sw and pkcs11 bccsp today. I think the biggest duplication is actually testing. And that dup test code will stay there, while I intend to replace many functions in pkcs11/impl.go with actual calls to pkcs11, as it makes sense (i.e. pkcs11 bccsp cipher implementation with calls to pkcs11, but didnt, since we don't do ciphering as far as I know in v1.0. Some pkcs11 code might always have switches/fallback fallback-to-SW. i.e. for keyless operations like SHA and public key operations like Verify(), since its more performant in SW)   ></body> </Action>
<Action id="23081" issue="16061" author="angelo.decaro" type="comment" created="2017-04-27 17:28:05.0" updateauthor="angelo.decaro" updated="2017-04-27 17:28:05.0"> <body><! CDATA I agree that there are generic tests that can be performed independently from the specific bccsp implementation (I can add a third point to the list for this) but they would not be able to cover enough lines of code, I fear. Actually, this is a reason why I opened this FAB. The SW-based BCCSP needs to be more agile and mock friendly.  For the pkcs11 package, I leave that to you.  ></body> </Action>
<Action id="23085" issue="16061" author="vpaprots" type="comment" created="2017-04-27 17:53:10.0" updateauthor="vpaprots" updated="2017-04-27 17:53:10.0"> <body><! CDATA Makes sense to me. As long as, as you are working though the SW tests and 'export/generisize' the ones that it makes sense. +1 from me. I will need to do much of the same for pkcs11, so would rather not have to copy all your work ;)  Couple more points  - Just having a shared test framework available would help. (Perhaps a test folder with shared tests, that you&I can then invoke?) - TestMain() for loop of m.Run() for testing with several configurations. Its always a pet-pieve that the negative tests run several times. Can we instead switch to sub-test-style? should also help with sharing of tests, by just switching test function parameters. i.e. https://gerrit.hyperledger.org/r/#/c/6727/16/lib/csputil/bccspsigner_test.go  ></body> </Action>
<Action id="23087" issue="16061" author="binhn" type="comment" body="This sounds good to me.  My only concern (without looking at the code) is any negative impact on performance. This code is being call multiple times per transaction. Let&apos;s keep that in mind." created="2017-04-27 17:58:58.0" updateauthor="binhn" updated="2017-04-27 17:58:58.0"/>
<Action id="23139" issue="16061" author="angelo.decaro" type="comment" created="2017-04-28 08:53:09.0" updateauthor="angelo.decaro" updated="2017-04-28 08:53:09.0"> <body><! CDATA Thanks for the feedback. I will keep in mind the performance aspects.  Please, have a look at this change-set that gives an example of the approach I'm suggesting: https://gerrit.hyperledger.org/r/#/c/8707/  I'm looking forward to read your feedback on it.  ></body> </Action>
<Action id="23144" issue="16061" author="yacovm" type="comment" created="2017-04-28 10:57:39.0" updateauthor="yacovm" updated="2017-04-28 10:58:01.0"> <body><! CDATA The simplest thing to make *KeyGen* be prettier would be to extend the *KeyGenOpts* with a string representation of itself and then instead of switching over the type you'll invoke a method that returns to you that string, and then that string would be used as a key lookup for a map, where you'll have functions.  I don't think it'll impact performance because *KeyGen* isn't in the critical path (or is it?)  ></body> </Action>
<Action id="23145" issue="16061" author="angelo.decaro" type="comment" body="KeyGen is not on the critical path, it is invoked only few times. So, I&apos;m not worried about that. But, one of the key design of BCCSP was to avoid to use string that are confusing. That&apos;s the reason why we switched to types." created="2017-04-28 10:59:37.0" updateauthor="angelo.decaro" updated="2017-04-28 11:08:16.0"/>
