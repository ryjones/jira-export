<Action id="41974" issue="23909" author="denyeart" type="comment" body="Many issues were bulk moved from v1.0 or v1.1 to v1.2 as part of a cleanup effort, and many of these issues are not high priority or actually intended to be worked for v1.2.  This issue is being bulk moved to Future.  If the issue is indeed high priority for v1.2 and/or very low effort, please move back to v1.2 and add a comment to indicate rationale." created="2018-03-23 05:07:48.0" updateauthor="denyeart" updated="2018-03-23 05:07:48.0"/>
<Action id="66750" issue="23909" author="lepar" type="comment" created="2020-01-17 14:22:38.0" updateauthor="lepar" updated="2020-01-17 14:22:38.0"> <body><! CDATA Here's a suggestion on how this can be implemented.  We would add an ACL to the QSCC policy as follows:   # ACL policy for qscc's "GetDataByKey" function qscc/GetDataByKey: /Channel/Application/PolicyDefiningOrg   Then specify a policy for the organizations to have this permission. The organization would then use the query method as follows:   peer chaincode query -C "ChannelName" -n qscc -c '\{"Args": "GetDataByKey", "KEY" }'    ></body> </Action>
<Action id="66768" issue="23909" author="denyeart" type="comment" body="Read-only support is needed beyond just QSCC. I think there should be a Query verb at the same level as Invoke, which only requires channel read priv, that would allow chaincode functions that read/query state, return error if a Put was attempted, and would not build a read-write set for updating ledger, just return chaincode response to client." created="2020-01-17 16:39:04.0" updateauthor="denyeart" updated="2020-01-17 16:40:38.0"/>
<Action id="66769" issue="23909" author="lepar" type="comment" created="2020-01-17 16:54:12.0" updateauthor="lepar" updated="2020-01-17 16:54:12.0"> <body><! CDATA Agreed. How hard would it be to change the chaincode interface to add a "query" function?   This Jira was proposed exactly for that   https://jira.hyperledger.org/browse/FAB-16146   But it's in the backlog and I think it should be prioritized for version 1.4 as a minor feature improvement  ></body> </Action>
<Action id="66772" issue="23909" author="sstone1" type="comment" created="2020-01-17 17:50:16.0" updateauthor="sstone1" updated="2020-01-17 17:50:16.0"> <body><! CDATA  ~denyeart  What is the ACL rule "peer/Propose" for?  https://github.com/hyperledger/fabric/blob/release-1.4/sampleconfig/configtx.yaml#L211   Can you relax that ACL rule to "Readers"? Would the transaction then be rejected later on, after endorsement, but before it's written to the ledger as that's still limited to "Writers"?  ></body> </Action>
<Action id="66778" issue="23909" author="baohua" type="comment" created="2020-01-17 19:35:37.0" updateauthor="baohua" updated="2020-01-17 19:35:37.0"> <body><! CDATA The current permission for peer/Propose is Writers, as both GET and PUT are using the same invoke method.  Agree with  ~denyeart  that to add a new query function.  The peer can check whether the call is query, and relax the permission to Readers when checking it during the `ProcessProposal(...)`.  ></body> </Action>
<Action id="66781" issue="23909" author="yacovm" type="comment" body="I might be missing something here, but - can&apos;t we just exclude the user&apos;s organization from the channel writers, and override the chaincode ACL for &quot;propose&quot; to include that organization? Then you can invoke chaincode but can&apos;t send it to the orderer" created="2020-01-17 20:23:41.0" updateauthor="yacovm" updated="2020-01-17 20:23:41.0"/>
<Action id="66782" issue="23909" author="denyeart" type="comment" created="2020-01-17 22:21:35.0" updateauthor="denyeart" updated="2020-01-17 22:23:13.0"> <body><! CDATA I'm going to have to rescind my response. Yacov's and Simon's comment in the Jira is correct. The Jira stories were opened in 2017 with a pre-fine-grained-ACL mindset. With the fine-grained ACL support (since v1.2), you can now simply exclude the org from the coarse */Channel/Writers* policy so that they can't submit transactions to ordering service:  https://github.com/hyperledger/fabric/blob/release-1.4/sampleconfig/configtx.yaml#L414-L416   and change *peer/Propose* fine-grained ACL to */Channel/Application/Readers* so that they can invoke chaincode:  https://github.com/hyperledger/fabric/blob/release-1.4/sampleconfig/configtx.yaml#L211   I've tested and confirmed this works as expected.  It still may be nice to have a Query function that only supports reads and doesn't generate a read-write set, but that is not critical given the channel configuration solution.     ></body> </Action>
