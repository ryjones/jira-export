<Action id="22024" issue="13496" author="christopherferris" type="comment" body="this needs to be validated against current master (v1.0-alpha) and if relevant, tagged with v1.0.0. If not, mark WON&apos;T FIX and close (DONE).  ~Clayton Sims " created="2017-04-10 11:32:37.0" updateauthor="christopherferris" updated="2017-04-10 11:32:50.0"/>
<Action id="22068" issue="13496" author="jojocheung" type="comment" created="2017-04-11 03:36:23.0" updateauthor="jojocheung" updated="2017-04-11 03:36:23.0"> <body><! CDATA With recent master branch of fabric up till commit  {code} commit cacb292921553900ea808344599b9914632bf1d3 Author: Gregory Haskins <gregory.haskins@gmail.com> Date:   Tue Apr 4 09:21:17 2017 -0400   FAB-2865  Set the chaincode file mode bits  We should force the mode bits, rather than accepting what the filesystem just happened to present.  Fixes FAB-2865  Change-Id: I02618026927607cc78fd5545e05880bf01bea5af Signed-off-by: Gregory Haskins <gregory.haskins@gmail.com> {code} I'm still getting a similar issue {code} ===================== Querying on PEER0 on channel 'MarblesTradingAlliance'... =====================  CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peer/peer0/localMspConfig/cacerts/peerOrg0.pem CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peer/peer0/localMspConfig/keystore/peer0Signer.pem CORE_PEER_LOCALMSPID=Org0MSP CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peer/peer0/localMspConfig/signcerts/peer0Signer.pem CORE_PEER_ADDRESSAUTODETECT=true CORE_PEER_TLS_ENABLED=true CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peer/peer0/localMspConfig CORE_PEER_ID=cli CORE_LOGGING_LEVEL=DEBUG CORE_PEER_ADDRESS=peer0:7051 CORE_PEER_ENDORSER_ENABLED=true CORE_NEXT=true Attempting to Query PEER0 ...3 secs Attempting to Query PEER0 ...7 secs Attempting to Query PEER0 ...10 secs Attempting to Query PEER0 ...13 secs Attempting to Query PEER0 ...16 secs Attempting to Query PEER0 ...31 secs Attempting to Query PEER0 ...35 secs Attempting to Query PEER0 ...38 secs Attempting to Query PEER0 ...41 secs Attempting to Query PEER0 ...44 secs Attempting to Query PEER0 ...47 secs Attempting to Query PEER0 ...50 secs Attempting to Query PEER0 ...53 secs Attempting to Query PEER0 ...57 secs Attempting to Query PEER0 ...61 secs  2017-04-11 03:13:17.849 UTC  logging  InitFromViper -> DEBU 001 Setting default logging level to DEBUG for command 'chaincode' 2017-04-11 03:13:17.856 UTC  msp  GetLocalMSP -> DEBU 002 Returning existing local MSP 2017-04-11 03:13:17.856 UTC  msp  GetDefaultSigningIdentity -> DEBU 003 Obtaining default signing identity 2017-04-11 03:13:17.857 UTC  msp  Sign -> DEBU 004 Sign: plaintext: 0A9C050A66080322164D6172626C6573...0A04726561640A0873656C6674657374  2017-04-11 03:13:17.857 UTC  msp  Sign -> DEBU 005 Sign: digest: B74C8F48331E979F8E1C390AA783686EF35EB876B720E24A680C95D309EEF6C1  2017-04-11 03:13:17.863 UTC  msp  Sign -> DEBU 006 Sign: plaintext: 0A9C050A66080322164D6172626C6573...9D944B2F11B70B8D17343ED36FE8AAA7  2017-04-11 03:13:17.863 UTC  msp  Sign -> DEBU 007 Sign: digest: C2458E142A38E25CACC9996C2B62CDA755CB67F318321043356D2048FF7BA95F  Error: Error sending transaction invoke: Could not send :rpc error: code = 13 desc = transport is closing) Usage: peer chaincode invoke  flags   Global Flags: --cafile string              Path to file containing PEM-encoded trusted certificate(s) for the ordering endpoint -C, --chainID string             The chain on which this command should be executed (default "testchainid") -c, --ctor string                Constructor message for the chaincode in JSON format (default "{}") -E, --escc string                The name of the endorsement system chaincode to be used for this chaincode -l, --lang string                Language the chaincode is written in (default "golang") --logging-level string       Default logging level and overrides, see core.yaml for full syntax -n, --name string                Name of the chaincode -o, --orderer string             Ordering service endpoint -p, --path string                Path to chaincode -P, --policy string              The endorsement policy associated to this chaincode --test.coverprofile string   Done (default "coverage.cov") -t, --tid string                 Name of a custom ID generation algorithm (hashing and decoding) e.g. sha256base64 --tls                        Use TLS when communicating with the orderer endpoint -u, --username string            Username for chaincode operations when security is enabled -v, --version string             Version of the chaincode specified in install/instantiate/upgrade commands -V, --vscc string                The name of the verification system chaincode to be used for this chaincode  !!!!!!!!!!!!!!! Query result on PEER0 is INVALID !!!!!!!!!!!!!!!! ================== ERROR !!! FAILED to execute End-2-End Scenario ==================  {code}  ></body> </Action>
<Action id="22144" issue="13496" author="denyeart" type="comment" created="2017-04-11 21:15:56.0" updateauthor="denyeart" updated="2017-04-11 21:15:56.0"> <body><! CDATA The original problem description would not happen on v1.0.  But a similar problem may happen.    ~jojocheung Please provide replication steps and peer log at debug level.  ></body> </Action>
<Action id="22316" issue="13496" author="muralisr" type="comment" created="2017-04-13 08:02:40.0" updateauthor="muralisr" updated="2017-04-13 08:02:40.0"> <body><! CDATA As  ~denyeart  mentions the crash should be fixed (due to a timeout anyway). Also we now expose an "executetimeout" parameter to control timeout on invokes and inits. Can you check this again and close if agree  ~stylix  ?   ></body> </Action>
<Action id="22323" issue="13496" author="stylix" type="comment" created="2017-04-13 08:54:46.0" updateauthor="stylix" updated="2017-04-13 08:54:46.0"> <body><! CDATA It seemed the problem was escaped by exposing the CORE_CHAINCODE_EXECUTETIMEOUT parameter in https://jira.hyperledger.org/browse/FAB-2767. However, in the case we do not know how long time for the process, or if we do not properly set the timeout enough, then it will crash again, right?  Can anyone confirm this? If the chaincode run over a defined timeout will not goes crash ending, I'm happy to close this issue.  ></body> </Action>
<Action id="22324" issue="13496" author="muralisr" type="comment" body=" ~stylix  I should have been clearer. Your test case was originally on 0.6 (the &quot;Affect Version&quot; field) while  the &quot;Fix Version&quot; points to 1.0.  My suggestion was to try in 1.0 and close if it does not crash there ? Also, note that the &quot;executetimeout&quot; parameter is in 1.0 mentioned in my comment refers to 1.0. " created="2017-04-13 09:42:27.0" updateauthor="muralisr" updated="2017-04-13 09:42:27.0"/>
<Action id="22326" issue="13496" author="stylix" type="comment" created="2017-04-13 11:05:51.0" updateauthor="stylix" updated="2017-04-13 11:05:51.0"> <body><! CDATA Yes, I'm talkig about 1.0 in the previous comment as I gave up on this 0.6 bug already. Now I'm asking for comfirmation if 1.0 will not have the same issue even if it runs over timeout?  Note: Sorry, I cannot test any fabric 0.6 and 1.0. As I do not have access to the test environment  now. That why I'm asking confirmation from the other guys.  ></body> </Action>
<Action id="22330" issue="13496" author="christopherferris" type="comment" created="2017-04-13 12:22:27.0" updateauthor="christopherferris" updated="2017-04-13 12:22:27.0"> <body><! CDATA So, having a property that one can expose to set the timeout value doesn't fix the problem. It simply masks it. The problem is that the process crashes, unless I am mistaken (and if I am, then the description is incorrect). A timeout should not cause a crash, otherwise there's potential for a DoS attack.  Please verify that the process DOES NOT CRASH if the timeout expires before the query is completed.  ></body> </Action>
<Action id="22455" issue="13496" author="muralisr" type="comment" created="2017-04-14 14:36:52.0" updateauthor="muralisr" updated="2017-04-14 14:36:52.0"> <body><! CDATA _> Now I'm asking for comfirmation if 1.0 will not have the same issue even if it runs over timeout ?_   ~stylix  Likely it should not crash in 1.0 but cannot confirm 100% based on the docs provided. Can you share the test case and recreate steps ?   ~ChristopherFerris  the timeout property was pointed out as an aside... just an additional means of control available in 1.0 in case it could be used to unblock while this problem is being looked at.  ></body> </Action>
<Action id="22752" issue="13496" author="jojocheung" type="comment" body="The crash can be replicated in v1 by running http://fabric-rtd.readthedocs.io/en/latest/getting_started.html against https://github.com/IBM-Blockchain/marbles (i.e. replace chaincode_example02.go chaincode with marbles.v3/chaincode/src/marbles/* chaincode and try to run the chaincodeQuery test specified in github.com/hyperledger/fabric/examples/e2e_cli/scripts/script.sh)." created="2017-04-20 07:22:03.0" updateauthor="jojocheung" updated="2017-04-20 07:22:24.0"/>
<Action id="23557" issue="13496" author="muralisr" type="comment" created="2017-05-08 18:44:44.0" updateauthor="muralisr" updated="2017-05-08 18:44:44.0"> <body><! CDATA  ~stylix   ~jojocheung  the chaincode wouldn't build against latest code. That could be the problem....   Attaching  ^read_ledger.go  so marbles builds against the latest fabric. With that change, I was able to get invokes and queries to work. Can you check with this please ?  ></body> </Action>
<Action id="23603" issue="13496" author="muralisr" type="comment" body=" ~stylix   ~jojocheung  I&apos;m going to do some more tests and will update by EOD." created="2017-05-09 15:25:38.0" updateauthor="muralisr" updated="2017-05-09 15:25:38.0"/>
<Action id="23620" issue="13496" author="muralisr" type="comment" body=" ~stylix   ~jojocheung  Can recreate the problem... working on a fix." created="2017-05-09 23:27:42.0" updateauthor="muralisr" updated="2017-05-09 23:27:42.0"/>
