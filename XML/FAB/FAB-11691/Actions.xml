<Action id="49807" issue="33141" author="sykesm" type="comment" body="/cc  ~yacovm " created="2018-09-04 13:15:22.0" updateauthor="sykesm" updated="2018-09-04 13:15:22.0"/>
<Action id="49815" issue="33141" author="yacovm" type="comment" created="2018-09-04 13:50:34.0" updateauthor="yacovm" updated="2018-09-04 13:50:34.0"> <body><! CDATA  ~sykesm  thanks a lot for the tagging, appreciate it :)   ~harrisob@us.ibm.com  :     This is by design.... let me explain. * You can ask SD for several interests in the same query, and then they all either succeed or fail together * You can ask SD for several queries with a single interest in each of them, and then they succeed or fail independently.   If you follow the stuff below you'll see that if you put each chaincode interest in its own query it will work:  I did the following on my laptop and I don't experience what you said:  1) I added to the discover CLI an additional query for a chaincode that doesn't exist: In the place  where the endorser request is built|https://github.com/hyperledger/fabric/blob/release-1.2/discovery/cmd/endorsers.go#L94 , I added a bogus chaincode: {code:java} 	req.AddEndorsersQuery(&ChaincodeInterest{Chaincodes:   *ChaincodeCall{ 		{ 			Name: "unknownChaincode", 		}, 	}}) {code} 2) I recompiled *discover* via *make discover* and ran the *e2e_cli* and replaced the *discover* binary with my compiled binary via *docker cp*. 3) I issued a standard endorser query via the *discover* CLI and looked at the logs of the peer via *docker logs peer0.org1.example.com 2>&1 | grep discovery | grep -v gossip* {code:java} 2018-09-04 13:28:41.802 UTC  discovery  Discover -> DEBU a79b Processing request from 172.26.0.14:37138: authentication:<client_identity:"\n\007Org1MSP\022\252\006-----BEGIN CERTIFICATE-----\nMIICKTCCAdCgAwIBAgIQALdoQjeUfT6vl16qLeG2LjAKBggqhkjOPQQDAjBzMQsw\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\nYW5jaXNjbzEZMBcGA1UEChMQb3JnMS5leGFtcGxlLmNvbTEcMBoGA1UEAxMTY2Eu\nb3JnMS5leGFtcGxlLmNvbTAeFw0xODA5MDQxMzIwMjhaFw0yODA5MDExMzIwMjha\nMGwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1T\nYW4gRnJhbmNpc2NvMQ8wDQYDVQQLEwZjbGllbnQxHzAdBgNVBAMMFlVzZXIxQG9y\nZzEuZXhhbXBsZS5jb20wWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAT8L8akkzfb\n7BVeuyFl4GDF9+5uupS9Gdi/vveeIT1iyj7/hy2/xNIG97lHy+voEjYNhtvospVq\nFfCioViAtksPo00wSzAOBgNVHQ8BAf8EBAMCB4AwDAYDVR0TAQH/BAIwADArBgNV\nHSMEJDAigCBZIicH0KWKYkGGapeWtOlUI1mwpYDVjfkaOkkxqv+mJjAKBggqhkjO\nPQQDAgNHADBEAiAXZS3MSf1BIgLGyjRkfBiS/Iep8Uf7av6QiNODYSjovQIgHuAf\nX/Otmf9Vy4sC3YNya6zU+qoesU+OsOlR/9XXvwU=\n-----END CERTIFICATE-----\n" client_tls_cert_hash:"K\354\225\242\376K\345r\275\266\274c?uTKnN\0053\313/\031\346.\007\357(Q\210\201\310" > queries:<channel:"mychannel" cc_query:<interests:<chaincodes:<name:"mycc" > > > > queries:<channel:"mychannel" cc_query:<interests:<chaincodes:<name:"unknownChaincode" > > > >  {code} Notice the "unknown chaincode" at the end of the request.  Afterwards - the peer logs had: {code:java} 2018-09-04 13:28:41.804 UTC  discovery/lifecycle  Metadata -> DEBU a7d9 Returning metadata for channel mychannel , chaincode mycc : {mycc 1.0  18 12 18 10 8 2 18 2 8 0 18 2 8 1 26 13 18 11 10 7 79 114 103 49 77 83 80 16 3 26 13 18 11 10 7 79 114 103 50 77 83 80 16 3   8 250 161 231 83 21 222 199 137 25 225 35 118 157 140 128 143 154 93 181 79 192 13 127 210 80 110 225 172 36 207 199    } 2018-09-04 13:28:41.805 UTC  discovery/lifecycle  Metadata -> DEBU a7da Returning metadata for channel mychannel , chaincode mycc : {mycc 1.0  18 12 18 10 8 2 18 2 8 0 18 2 8 1 26 13 18 11 10 7 79 114 103 49 77 83 80 16 3 26 13 18 11 10 7 79 114 103 50 77 83 80 16 3   8 250 161 231 83 21 222 199 137 25 225 35 118 157 140 128 143 154 93 181 79 192 13 127 210 80 110 225 172 36 207 199    } 2018-09-04 13:28:41.805 UTC  discovery/endorsement  func1 -> DEBU a7db {peer1.org2.example.com:7051     232 232 56 182 23 49 61 21 250 165 222 30 117 226 86 31 171 216 213 69 120 130 105 223 8 175 166 200 81 205 40 48   <nil> payload:"\030\001*P\n?\n\033peer1.org2.example.com:7051\032 \350\3508\266\0271=\025\372\245\336\036u\342V\037\253\330\325Ex\202i\337\010\257\246\310Q\315(0\022\r\010\356\345\364\257\202\251\315\250\025\020\342\001" signature:"0E\002!\000\336a/\02092rL|w\243\316:M\267\252\364* R\254_\n'om\373\352\272\242\355\250\002 Kz\324\227)\370\301\344\373}\033Xs\021\\\354o:\251\354\314\322@N\271}\263lZH\272\306" } satisfies principal principal:"\n\007Org2MSP\020\003"  2018-09-04 13:28:41.805 UTC  discovery/endorsement  func1 -> DEBU a7dc {peer0.org2.example.com:7051     221 252 76 171 123 246 170 214 65 1 13 220 16 61 13 252 172 152 25 46 28 162 0 161 116 238 124 234 23 183 218 51   <nil> payload:"\030\001*P\n?\n\033peer0.org2.example.com:7051\032 \335\374L\253{\366\252\326A\001\r\334\020=\r\374\254\230\031.\034\242\000\241t\356|\352\027\267\3323\022\r\010\320\264\270\240\203\251\315\250\025\020\345\001" signature:"0E\002!\000\364&\307d\240\263E\350\257D\226\010\331\3115\343\307\301m\332\2401'D\256I\031\031\273\000\000\334\002 \005\223\352+,\321H!qH\343\255\240\024gp\265\016\321\302Ztj\312A_>\365Y\203BT" } satisfies principal principal:"\n\007Org2MSP\020\003"  2018-09-04 13:28:41.805 UTC  discovery/endorsement  func1 -> DEBU a7dd {peer0.org1.example.com:7051     238 166 214 37 177 29 214 159 144 39 39 228 155 86 126 146 184 54 125 222 18 131 230 121 102 72 60 98 34 101 137 210   <nil> payload:"\030\001*P\n?\n\033peer0.org1.example.com:7051\032 \356\246\326%\261\035\326\237\220''\344\233V~\222\2706}\336\022\203\346yfH<b\"e\211\322\022\r\010\350\253\265\314\204\251\315\250\025\020\346\001" } doesn't satisfy principal principal:"\n\007Org2MSP\020\003"  : the identity is a member of a different MSP (expected Org2MSP, got Org1MSP) 2018-09-04 13:28:41.805 UTC  discovery/endorsement  func1 -> DEBU a7de {peer1.org2.example.com:7051     232 232 56 182 23 49 61 21 250 165 222 30 117 226 86 31 171 216 213 69 120 130 105 223 8 175 166 200 81 205 40 48   <nil> payload:"\030\001*P\n?\n\033peer1.org2.example.com:7051\032 \350\3508\266\0271=\025\372\245\336\036u\342V\037\253\330\325Ex\202i\337\010\257\246\310Q\315(0\022\r\010\356\345\364\257\202\251\315\250\025\020\342\001" signature:"0E\002!\000\336a/\02092rL|w\243\316:M\267\252\364* R\254_\n'om\373\352\272\242\355\250\002 Kz\324\227)\370\301\344\373}\033Xs\021\\\354o:\251\354\314\322@N\271}\263lZH\272\306" } doesn't satisfy principal principal:"\n\007Org1MSP\020\003"  : the identity is a member of a different MSP (expected Org1MSP, got Org2MSP) 2018-09-04 13:28:41.805 UTC  discovery/endorsement  func1 -> DEBU a7df {peer0.org2.example.com:7051     221 252 76 171 123 246 170 214 65 1 13 220 16 61 13 252 172 152 25 46 28 162 0 161 116 238 124 234 23 183 218 51   <nil> payload:"\030\001*P\n?\n\033peer0.org2.example.com:7051\032 \335\374L\253{\366\252\326A\001\r\334\020=\r\374\254\230\031.\034\242\000\241t\356|\352\027\267\3323\022\r\010\320\264\270\240\203\251\315\250\025\020\345\001" signature:"0E\002!\000\364&\307d\240\263E\350\257D\226\010\331\3115\343\307\301m\332\2401'D\256I\031\031\273\000\000\334\002 \005\223\352+,\321H!qH\343\255\240\024gp\265\016\321\302Ztj\312A_>\365Y\203BT" } doesn't satisfy principal principal:"\n\007Org1MSP\020\003"  : the identity is a member of a different MSP (expected Org1MSP, got Org2MSP) 2018-09-04 13:28:41.805 UTC  discovery/endorsement  func1 -> DEBU a7e0 {peer0.org1.example.com:7051     238 166 214 37 177 29 214 159 144 39 39 228 155 86 126 146 184 54 125 222 18 131 230 121 102 72 60 98 34 101 137 210   <nil> payload:"\030\001*P\n?\n\033peer0.org1.example.com:7051\032 \356\246\326%\261\035\326\237\220''\344\233V~\222\2706}\336\022\203\346yfH<b\"e\211\322\022\r\010\350\253\265\314\204\251\315\250\025\020\346\001" } satisfies principal principal:"\n\007Org1MSP\020\003"  2018-09-04 13:28:41.805 UTC  discovery/lifecycle  DeployedChaincodes -> INFO a7e3 Chaincode unknownChaincode isn't instantiated 2018-09-04 13:28:41.805 UTC  discovery/lifecycle  DeployedChaincodes -> DEBU a7e4 Returning    2018-09-04 13:28:41.805 UTC  discovery/lifecycle  Metadata -> INFO a7e6 Chaincode unknownChaincode isn't defined in channel mychannel 2018-09-04 13:28:41.805 UTC  discovery  chaincodeQuery -> ERRO a7e7 Failed constructing descriptor for chaincode chaincodes:<name:"unknownChaincode" > ,: No metadata was found for chaincode unknownChaincode in channel mychannel {code} and afterwards the peer returns a request that contains a valid endorsement descriptor for the chaincode mycc and an error for the other chaincode: {code:java} 2018-09-04 13:28:41.806 UTC  discovery  Discover -> DEBU a7e8 Returning to 172.26.0.14:37138 a response containing:  cc_query_res:<content:<chaincode:"mycc" endorsers_by_groups:<key:"G0" value:<peers:<state_info:<payload:"\030\005zk\022\024\010\216\377\227\204\253\251\315\250\025\020\271\303\242\376\372\252\315\250\025\032 \356\246\326%\261\035\326\237\220''\344\233V~\222\2706}\336\022\203\346yfH<b\"e\211\322\" s\334n0\373\355\014!\322\325*IO\204\362\007\033\306$\010\207\315\274\024\260/\214\033\014\263\261\360*\017\010\005\032\013\n\004mycc\022\0031.0" signature:"0D\002 1R?\307\"\304\337\tq:\035\2276\351\271\035Q+\3003 \356C\016Z\315*\007Ux\242\246\002 '\255{x\346B\336\315\017\304L:@/\013\371-\220\264\003<='m\2667j\212\366O\327\327" > membership_info:<payload:"\030\001*P\n?\n\033peer0.org1.example.com:7051\032 \356\246\326%\261\035\326\237\220''\344\233V~\222\2706}\336\022\203\346yfH<b\"e\211\322\022\r\010\350\253\265\314\204\251\315\250\025\020\346\001" > identity:"\n\007Org1MSP\022\252\006-----BEGIN CERTIFICATE-----\nMIICKTCCAc+gAwIBAgIRAJ6wPgDvzUhu2sRKisz1AzcwCgYIKoZIzj0EAwIwczEL\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG\ncmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHDAaBgNVBAMTE2Nh\nLm9yZzEuZXhhbXBsZS5jb20wHhcNMTgwOTA0MTMyMDI4WhcNMjgwOTAxMTMyMDI4\nWjBqMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMN\nU2FuIEZyYW5jaXNjbzENMAsGA1UECxMEcGVlcjEfMB0GA1UEAxMWcGVlcjAub3Jn\nMS5leGFtcGxlLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABEQUBtJuA6+n\nsaiFP079jKRmpjuRRqQlOGIa4seX8+wpim/jLl0O7BaMDkmuPgL5njDCn5dwNXbx\nY/7le1SADe6jTTBLMA4GA1UdDwEB/wQEAwIHgDAMBgNVHRMBAf8EAjAAMCsGA1Ud\nIwQkMCKAIFkiJwfQpYpiQYZql5a06VQjWbClgNWN+Ro6STGq/6YmMAoGCCqGSM49\nBAMCA0gAMEUCIQDGb1YweC7NO/dTSUb+GIJyZ2OXAJbKMWhkgrUpsmrj9gIgbP/N\n0Jsei1VMsqHyP8Hf95WA/cykomz64ousohm8pAM=\n-----END CERTIFICATE-----\n" > > > endorsers_by_groups:<key:"G1" value:<peers:<state_info:<payload:"\030\005zk\022\024\010\230\203\260\222\305\251\315\250\025\020\220\367\203\201\373\252\315\250\025\032 \350\3508\266\0271=\025\372\245\336\036u\342V\037\253\330\325Ex\202i\337\010\257\246\310Q\315(0\" \332\212K\366\205\227g\225\233Z\352\315\177\034\364\021\232hi\231\365\331\372\334\341\277\235\221\353\013;\374*\017\010\005\032\013\n\004mycc\022\0031.0" signature:"0E\002!\000\347\233GV\r\246\031Dbz\003\014\331\020q\240\367L&X \004\271\036\220\001\004\336 \r\026\010\002 \0022\202\262\314\310n\352\254\364\360\234\315\235H \260\345-\007*\375\211\362\314L/\004\203qI\027" > membership_info:<payload:"\030\001*P\n?\n\033peer1.org2.example.com:7051\032 \350\3508\266\0271=\025\372\245\336\036u\342V\037\253\330\325Ex\202i\337\010\257\246\310Q\315(0\022\r\010\356\345\364\257\202\251\315\250\025\020\342\001" signature:"0E\002!\000\336a/\02092rL|w\243\316:M\267\252\364* R\254_\n'om\373\352\272\242\355\250\002 Kz\324\227)\370\301\344\373}\033Xs\021\\\354o:\251\354\314\322@N\271}\263lZH\272\306" > identity:"\n\007Org2MSP\022\252\006-----BEGIN CERTIFICATE-----\nMIICKTCCAc+gAwIBAgIRAJKUXOK5ABcAcXkShW7+OUYwCgYIKoZIzj0EAwIwczEL\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG\ncmFuY2lzY28xGTAXBgNVBAoTEG9yZzIuZXhhbXBsZS5jb20xHDAaBgNVBAMTE2Nh\nLm9yZzIuZXhhbXBsZS5jb20wHhcNMTgwOTA0MTMyMDI4WhcNMjgwOTAxMTMyMDI4\nWjBqMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMN\nU2FuIEZyYW5jaXNjbzENMAsGA1UECxMEcGVlcjEfMB0GA1UEAxMWcGVlcjEub3Jn\nMi5leGFtcGxlLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABOM6mQFuTvOg\nK37vNZqJq3FNDvbRGclIU1JG8oxpF8cflpS0bTmu9X2Seq6Qht0v83xgcZ5jAuoC\nMemyoBjBosKjTTBLMA4GA1UdDwEB/wQEAwIHgDAMBgNVHRMBAf8EAjAAMCsGA1Ud\nIwQkMCKAINP4vAnWtwox9YN3A2ZZ0Kp3v8LotXN0oUCgDPjLSiapMAoGCCqGSM49\nBAMCA0gAMEUCIQCq4buzq02Y1Xn5NCr+BfeTcQD1l1yqTcVpEJniH5aiyQIgJVck\n6/kcx1+uLuNqS4LsSzX9B827YoDqeBeHeF3oh9w=\n-----END CERTIFICATE-----\n" > peers:<state_info:<payload:"\030\005zk\022\024\010\255\254\304\304\274\251\315\250\025\020\207\325\321\367\372\252\315\250\025\032 \335\374L\253{\366\252\326A\001\r\334\020=\r\374\254\230\031.\034\242\000\241t\356|\352\027\267\3323\" \333f\202z\337\204j\255E\002\027d\305R\025\273d\215\200\361P\241L\253\217\372<*s\336\226\320*\017\010\005\032\013\n\004mycc\022\0031.0" signature:"0E\002!\000\3751\215\303\354\314\350\007>\000\263\345\261f\240\324!\004+\315\377\260\004of\212\244\322\273\016\232\352\002 \026\362%\014z\2615\205\017\227p\376=\2419\315\315\313?\037\266\221\303\214\240\351\365~L\307P9" > membership_info:<payload:"\030\001*P\n?\n\033peer0.org2.example.com:7051\032 \335\374L\253{\366\252\326A\001\r\334\020=\r\374\254\230\031.\034\242\000\241t\356|\352\027\267\3323\022\r\010\320\264\270\240\203\251\315\250\025\020\345\001" signature:"0E\002!\000\364&\307d\240\263E\350\257D\226\010\331\3115\343\307\301m\332\2401'D\256I\031\031\273\000\000\334\002 \005\223\352+,\321H!qH\343\255\240\024gp\265\016\321\302Ztj\312A_>\365Y\203BT" > identity:"\n\007Org2MSP\022\246\006-----BEGIN CERTIFICATE-----\nMIICJzCCAc6gAwIBAgIQMDcw9f9oa2ueBAIpKjb8RTAKBggqhkjOPQQDAjBzMQsw\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\nYW5jaXNjbzEZMBcGA1UEChMQb3JnMi5leGFtcGxlLmNvbTEcMBoGA1UEAxMTY2Eu\nb3JnMi5leGFtcGxlLmNvbTAeFw0xODA5MDQxMzIwMjhaFw0yODA5MDExMzIwMjha\nMGoxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1T\nYW4gRnJhbmNpc2NvMQ0wCwYDVQQLEwRwZWVyMR8wHQYDVQQDExZwZWVyMC5vcmcy\nLmV4YW1wbGUuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEXjIj9hhR2c0y\nR4DVZEqFrid/P9O2wzN5hBjEDj0R6QebZnIon1ocXGl3zN9Y9DnkNgt7IOH/sNKH\nTjoQdi7Os6NNMEswDgYDVR0PAQH/BAQDAgeAMAwGA1UdEwEB/wQCMAAwKwYDVR0j\nBCQwIoAg0/i8Cda3CjH1g3cDZlnQqne/wui1c3ShQKAM+MtKJqkwCgYIKoZIzj0E\nAwIDRwAwRAIgDLOfUOvWdmUomSRAQ2JpAzqkEXMTlR7a0o5t8q+gIv0CIDR3btwQ\n98MNZlEoQ4Q35pcZyhIMWuIidgtFJ+wLogPa\n-----END CERTIFICATE-----\n" > > > layouts:<quantities_by_group:<key:"G0" value:1 > quantities_by_group:<key:"G1" value:1 > > > >  error:<content:"failed constructing descriptor for chaincodes:<name:\"unknownChaincode\" > " >   {code} The peer returns a "good" response to the CLI although I made another request with a bogus chaincode as you saw above. {code:java} root@747502c6191c:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/User1@org1.example.com# discover endorsers --configFile conf.yaml --server peer0.org1.example.com:7051 --channel mychannel --chaincode mycc   	{ 		"Chaincode": "mycc", 		"EndorsersByGroups": { 			"G0":   				{ 					"MSPID": "Org1MSP", 					"LedgerHeight": 5, 					"Endpoint": "peer0.org1.example.com:7051", 					"Identity": "-----BEGIN CERTIFICATE-----\nMIICKTCCAc+gAwIBAgIRAJ6wPgDvzUhu2sRKisz1AzcwCgYIKoZIzj0EAwIwczEL\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG\ncmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHDAaBgNVBAMTE2Nh\nLm9yZzEuZXhhbXBsZS5jb20wHhcNMTgwOTA0MTMyMDI4WhcNMjgwOTAxMTMyMDI4\nWjBqMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMN\nU2FuIEZyYW5jaXNjbzENMAsGA1UECxMEcGVlcjEfMB0GA1UEAxMWcGVlcjAub3Jn\nMS5leGFtcGxlLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABEQUBtJuA6+n\nsaiFP079jKRmpjuRRqQlOGIa4seX8+wpim/jLl0O7BaMDkmuPgL5njDCn5dwNXbx\nY/7le1SADe6jTTBLMA4GA1UdDwEB/wQEAwIHgDAMBgNVHRMBAf8EAjAAMCsGA1Ud\nIwQkMCKAIFkiJwfQpYpiQYZql5a06VQjWbClgNWN+Ro6STGq/6YmMAoGCCqGSM49\nBAMCA0gAMEUCIQDGb1YweC7NO/dTSUb+GIJyZ2OXAJbKMWhkgrUpsmrj9gIgbP/N\n0Jsei1VMsqHyP8Hf95WA/cykomz64ousohm8pAM=\n-----END CERTIFICATE-----\n" 				} 			 , 			"G1":   				{ 					"MSPID": "Org2MSP", 					"LedgerHeight": 5, 					"Endpoint": "peer1.org2.example.com:7051", 					"Identity": "-----BEGIN CERTIFICATE-----\nMIICKTCCAc+gAwIBAgIRAJKUXOK5ABcAcXkShW7+OUYwCgYIKoZIzj0EAwIwczEL\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG\ncmFuY2lzY28xGTAXBgNVBAoTEG9yZzIuZXhhbXBsZS5jb20xHDAaBgNVBAMTE2Nh\nLm9yZzIuZXhhbXBsZS5jb20wHhcNMTgwOTA0MTMyMDI4WhcNMjgwOTAxMTMyMDI4\nWjBqMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMN\nU2FuIEZyYW5jaXNjbzENMAsGA1UECxMEcGVlcjEfMB0GA1UEAxMWcGVlcjEub3Jn\nMi5leGFtcGxlLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABOM6mQFuTvOg\nK37vNZqJq3FNDvbRGclIU1JG8oxpF8cflpS0bTmu9X2Seq6Qht0v83xgcZ5jAuoC\nMemyoBjBosKjTTBLMA4GA1UdDwEB/wQEAwIHgDAMBgNVHRMBAf8EAjAAMCsGA1Ud\nIwQkMCKAINP4vAnWtwox9YN3A2ZZ0Kp3v8LotXN0oUCgDPjLSiapMAoGCCqGSM49\nBAMCA0gAMEUCIQCq4buzq02Y1Xn5NCr+BfeTcQD1l1yqTcVpEJniH5aiyQIgJVck\n6/kcx1+uLuNqS4LsSzX9B827YoDqeBeHeF3oh9w=\n-----END CERTIFICATE-----\n" 				}, 				{ 					"MSPID": "Org2MSP", 					"LedgerHeight": 5, 					"Endpoint": "peer0.org2.example.com:7051", 					"Identity": "-----BEGIN CERTIFICATE-----\nMIICJzCCAc6gAwIBAgIQMDcw9f9oa2ueBAIpKjb8RTAKBggqhkjOPQQDAjBzMQsw\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\nYW5jaXNjbzEZMBcGA1UEChMQb3JnMi5leGFtcGxlLmNvbTEcMBoGA1UEAxMTY2Eu\nb3JnMi5leGFtcGxlLmNvbTAeFw0xODA5MDQxMzIwMjhaFw0yODA5MDExMzIwMjha\nMGoxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1T\nYW4gRnJhbmNpc2NvMQ0wCwYDVQQLEwRwZWVyMR8wHQYDVQQDExZwZWVyMC5vcmcy\nLmV4YW1wbGUuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEXjIj9hhR2c0y\nR4DVZEqFrid/P9O2wzN5hBjEDj0R6QebZnIon1ocXGl3zN9Y9DnkNgt7IOH/sNKH\nTjoQdi7Os6NNMEswDgYDVR0PAQH/BAQDAgeAMAwGA1UdEwEB/wQCMAAwKwYDVR0j\nBCQwIoAg0/i8Cda3CjH1g3cDZlnQqne/wui1c3ShQKAM+MtKJqkwCgYIKoZIzj0E\nAwIDRwAwRAIgDLOfUOvWdmUomSRAQ2JpAzqkEXMTlR7a0o5t8q+gIv0CIDR3btwQ\n98MNZlEoQ4Q35pcZyhIMWuIidgtFJ+wLogPa\n-----END CERTIFICATE-----\n" 				} 			  		}, 		"Layouts":   			{ 				"quantities_by_group": { 					"G0": 1, 					"G1": 1 				} 			} 		  	}   {code} This is because the query processing is done in the following manner on the server side: {code:java} func (s *service) Discover(ctx context.Context, request *discovery.SignedRequest) (*discovery.Response, error) { 	addr := util.ExtractRemoteAddress(ctx) 	req, err := validateStructure(ctx, request, s.config.TLS, comm.ExtractCertificateHashFromContext) 	if err != nil { 		logger.Warningf("Request from %s is malformed or invalid: %v", addr, err) 		return nil, err 	} 	logger.Debugf("Processing request from %s: %v", addr, req) 	var res   *discovery.QueryResult 	for _, q := range req.Queries { 		res = append(res, s.processQuery(q, request, req.Authentication.ClientIdentity, addr)) 	} 	logger.Debugf("Returning to %s a response containing: %v", addr, res) 	return &discovery.Response{ 		Results: res, 	}, nil } {code} As you see - as long as your request is "valid" (passes validateStructure) - then the code can't return an error for everything, and just returns an array of responses in which - each response is independent of the other one.  ></body> </Action>
<Action id="49818" issue="33141" author="yacovm" type="comment" created="2018-09-04 13:53:05.0" updateauthor="yacovm" updated="2018-09-04 13:53:05.0"> <body><! CDATA Also, not that from the protobuf schema, there is no way of reporting back a partial success for a query. It either fails entirely, or just succeeds entirely.    {quote}This will force the client code to have to query one at a time for each chaincode(s) and then for config, local peers and channel peers. {quote} That's not the case... you can put as many queries in a single request as you want.  ></body> </Action>
