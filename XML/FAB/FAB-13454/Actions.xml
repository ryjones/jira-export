<Action id="55164" issue="36430" author="yacovm" type="comment" body=" ~denyeart  " created="2018-12-28 23:12:52.0" updateauthor="yacovm" updated="2018-12-28 23:12:52.0"/>
<Action id="55181" issue="36430" author="denyeart" type="comment" created="2018-12-29 15:22:20.0" updateauthor="denyeart" updated="2018-12-29 15:46:00.0"> <body><! CDATA  ~emmanuel.kiametis  I am not able to reproduce.  I've sent multiple invokes with the same txid and the peer always detects this during validation and invalidates the subsequent transactions. I've tested scenarios where the invokes are in the same block and different blocks, and I always get the expected invalidations like: {code:java} 2018-12-29 09:39:06.346 EST  valimpl  preprocessProtoBlock -> WARN db4 Channel  myc : Block  20  Transaction index  1  TxId  008dea72f5fcfef07c5a7a803907eae00c1d76603397c43b68d7704c6b1375ad  marked as invalid by committer. Reason code  DUPLICATE_TXID {code} In these cases, the subsequent invalid transactions are not committed to state database.  What is your ApplicationCapability set to in the config transaction (see configtx.yaml)?  Can you provide a full peer debug, e.g.: {code:java} CORE_LOGGING_LEVEL=DEBUG peer node start{code} Please include just two transactions in the debug, the one that should be valid and the one that should be invalid.   ~ales  Any other ideas on what might cause this? Since you have worked on dup transaction id checks, can you check the debug logs once we receive them?  ></body> </Action>
<Action id="55209" issue="36430" author="emmanuel.kiametis" type="comment" created="2019-01-02 12:47:53.0" updateauthor="emmanuel.kiametis" updated="2019-01-02 12:47:53.0"> <body><! CDATA  ~denyeart  I attached my  ^configtx.yaml  and I don't have this property '*ApplicationCapability*' in this file.  But, I repeated the test case and I could reproduce an output log information. In this case, there were four attempts completed, and after validation block, just one has failed. All attempts has been executed with the same txID *042433e8e1e80784c80fda679e8e4595dc20f77f5c1264beeb81f4a78ae5316e*.    Log:  ^Logfile.txt      ></body> </Action>
<Action id="55213" issue="36430" author="denyeart" type="comment" body=" ~emmanuel.kiametis  Ok, I think the missing capabilities explains it. There is a dup txid fix when using an application capability of 1.1 or greater. Please use the V1_3 application capability as demonstrated in the sample at  https://github.com/hyperledger/fabric/blob/release-1.3/sampleconfig/configtx.yaml#L59-L116  .  You will need to re-create your channel (or send a config update transaction to the channel)." created="2019-01-02 15:00:14.0" updateauthor="denyeart" updated="2019-01-02 15:01:28.0"/>
<Action id="55224" issue="36430" author="emmanuel.kiametis" type="comment" created="2019-01-02 17:45:49.0" updateauthor="emmanuel.kiametis" updated="2019-01-02 17:45:49.0"> <body><! CDATA  ~denyeart  it works!!  I applied the capabilities configuration and it works!! Thank you so much!!  But, I have a question. If I send a config update transaction to the channel, I will not need to re-create my channel in a production network?  ></body> </Action>
<Action id="55226" issue="36430" author="denyeart" type="comment" body=" ~emmanuel.kiametis  Correct, if you send a config update, for example a capability update, it will update an existing channel (no need to re-create the channel). Peers will start behaving with the new capability from that block height onwards.  It is designed as such so that all peers validate transactions deterministically and consistently for any given block height." created="2019-01-02 18:04:26.0" updateauthor="denyeart" updated="2019-01-02 18:04:26.0"/>
<Action id="55227" issue="36430" author="emmanuel.kiametis" type="comment" created="2019-01-02 18:07:20.0" updateauthor="emmanuel.kiametis" updated="2019-01-02 18:07:20.0"> <body><! CDATA  ~denyeart  ok.  Thanks!!  ></body> </Action>
<Action id="55247" issue="36430" author="emmanuel.kiametis" type="comment" created="2019-01-03 13:03:08.0" updateauthor="emmanuel.kiametis" updated="2019-01-03 13:03:08.0"> <body><! CDATA Solution example:  ^configtx.yaml   (y)  ></body> </Action>
