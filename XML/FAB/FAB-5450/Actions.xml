<Action id="29097" issue="19462" author="guoger" type="comment" body=" ~jyellick  Could you elaborate a bit on the case where two genesis block files are generated from same profile? They do have different hash, but the content should be the same, right? Orderers should bootstrap in the same manner as they are using same genesis block?" created="2017-07-27 14:53:03.0" updateauthor="guoger" updated="2017-07-27 14:53:03.0"/>
<Action id="29098" issue="19462" author="jyellick" type="comment" created="2017-07-27 15:10:04.0" updateauthor="jyellick" updated="2017-07-27 15:10:04.0"> <body><! CDATA Certainly.  The fact that things work mostly as expected is actually why this bug is especially insidious.  Each orderer starts with the same config contents, but a different initial block hash.  This means, when the orderer creates the next block, the block has the right contents, but its previous hash is incorrect, which means the current hash will also be incorrect.  All of the orderers build chains with identical transaction contents, but different hash chains.  Because everything but the hash chain is identiical, no problems arise until a peer tries to switch from one orderer to another.  At this point, it cannot find a block which will chain into its blockchain, and the system grinds to a halt.  ></body> </Action>
<Action id="29234" issue="19462" author="guoger" type="comment" body="Created FAB-5542 to track the work of halting orderer upon mismatch." created="2017-07-31 13:49:51.0" updateauthor="guoger" updated="2017-07-31 13:49:51.0"/>
<Action id="29264" issue="19462" author="guoger" type="comment" body="https://gerrit.hyperledger.org/r/#/c/12007/" created="2017-08-01 04:20:32.0" updateauthor="guoger" updated="2017-08-01 04:20:32.0"/>
<Action id="31623" issue="19462" author="baohua" type="comment" created="2017-10-05 07:33:41.0" updateauthor="baohua" updated="2017-10-05 07:33:41.0"> <body><! CDATA Although saw this was fixed, I'm still curious about whether this patchset will help mitigate the problem really, which implicitly require that an orderer node operator check the log info manually and talk with other orderer administrators.  First, the root cause is that different orderer cannot sync info with each other. Hence they will never find they are at different chains until switching to each other (Even when the content are not the same). Hence we may need to fix from this side?  Note that this only makes sense in non-solo cases like kafka or BFT, as solo should not support multi-orderer.  I guess from current design, one possible solution is that:  1) The 1st orderer node bootstrap with the genesis block, and throw its hash value as new msg into kafka.  2) For other orderer nodes, after bootstrap with the genesis block, try checking the kafka msg, and see it the hash value matches. If there's no such hash msg, then throw themselve's.  ></body> </Action>
<Action id="31628" issue="19462" author="guoger" type="comment" body=" ~baohua  Yes you are right, and the problem you described here is logged in FAB-5542 (linked to this jira). As simple the problem may seem to be, solution is actually not that straightforward IMO, as we are essentially dealing with a leader election scenario and we also want it replayable, even if we start pruning old kafka messages and ledger. So it&apos;s marked as improvement for now and we may address that in the future, not prioritized for now. Does this make sense?" created="2017-10-05 11:11:46.0" updateauthor="guoger" updated="2017-10-05 11:11:46.0"/>
<Action id="31633" issue="19462" author="baohua" type="comment" created="2017-10-05 13:40:39.0" updateauthor="baohua" updated="2017-10-05 13:40:39.0"> <body><! CDATA  ~guoger   Glad to see there're further improvement and actions on this problem.  Thanks!  ></body> </Action>
