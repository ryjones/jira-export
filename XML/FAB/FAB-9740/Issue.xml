<Issue id="29743" key="FAB-9740" number="9740" project="10002" reporter="scottz" creator="scottz" type="10001" summary="OTE data collection and error handling" priority="3" resolution="10001" status="6" created="2018-04-26 19:59:49.0" updated="2019-07-30 02:41:55.0" resolutiondate="2019-07-30 02:41:55.0" votes="0" watches="2" workflowId="35723"> <description><! CDATA Today in OTE producers and consumers, there are places where errors occur when attempting to send or receive transactions or when establishing grpc connections. Sometimes we print an error log and continue, and other times it panics and exits. We would like to introduce an error handling routine which could be called from all locatiions and it would: * optionally collect more data immediately by executing bash commands using something like the existing ote.go func executeCmd() to run 'df' or 'free', for example, or exec into a docker container to collect and display logs, i.e. 'docker logs --tail 100  orderer3.example.com' * optionally panic (and if no panic, then just print the error string and any collected data in a log instead of in a panic message string).  Here is a proposal for a function that can be called whenever there is an error log to be printed or a panic/abort action needed - optionally (in both cases) with more data collection:  ``` func handleError(outputStr string, shouldPanic=false, shouldCollectData=false, ordNum=0) \{ // ...Implemention details... if shouldCollectData  \{    cmd := fmt.Sprintf("docker exec -ti df && free")    cmd += fmt.Sprintf(" && docker logs orderer%d.example.com", ordererIndex)    outputStr += executeCmdAndDisplay(cmd) // (we must revise this function a bit) }    if shouldPanic    \{ panic(outputStr) }    else    \{ logger(outputStr) }  } ```  For example, in startConsumer(), when setting up a connection, a function call might look like this:  \{\{(*consumerConnP), err = grpc.DialContext(ctx, serverAddr, dialOpts...) if err != nil \{ handleError( Sprintf( fmt.Sprintf("Error on client %s invoking Deliver() on grpc connection to %s, err: %v", myName, serverAddr, err)), true, true, ordererIndex) }}}     ></description> </Issue>
