<Issue id="34761" key="FAB-12518" number="12518" project="10002" reporter="yacovm" creator="yacovm" type="10001" summary="As a Fabric developer, I want to test the interactions between the cluster framework and the Chain objects" priority="3" status="10100" created="2018-10-17 23:30:27.0" updated="2019-12-02 07:50:36.0" votes="0" watches="3" workflowId="46171"> <description><! CDATA The etcd/raft ordering service work can be roughly divided to the 3 following parts: # etcd/raft consensus core: new consenter and chain types consuming the etcd/raft library and using it to agree on blocks. # Infrastructure for the "cluster" orderer type: inter-node communication, authentication and block replication. # Stitching and gluing the above into the existing orderer code.  Each of the 3 parts have their own unit tests.  However, currently the only tests that check that they work together are the integration tests under the top-level *integration* package.  I argue this isn't enough, and suggest we add extended unit tests that use 1+2 together and spin small raft networks of ~ 3-5 nodes in-process, in order to: * *Check we don't have data races.* The cluster infrastructure, at the time of writing - made certain assumptions about how etcd/raft chains use it, such as: ** Step() is always called from the same goroutine ** Submit() is always called from the same goroutine and we should make sure these assumptions hold. * Check that the orderer handles *more than a single channel* properly. Currently, this isn't tested anywhere. The cluster unit tests have such scenarios, but we should check interoperability across the chains.  Â    ~kchristidis   ~C0rWin   ~guoger   ~adarshsaraf123  please comment your opinions.  ></description> </Issue>
