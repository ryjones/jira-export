<Issue id="36417" key="FAB-13449" number="13449" project="10002" reporter="pandrejko" assignee="negupta" creator="pandrejko" type="10100" summary="Update CouchDB tutorial with more examples of best practices" priority="2" resolution="10000" status="6" created="2018-12-27 16:05:53.0" updated="2019-03-21 12:10:39.0" resolutiondate="2019-02-27 15:30:54.0" votes="0" watches="2" workflowId="47950"> <description><! CDATA Some general notes about indexing in CouchDB:  - All fields in the index must be represented in the query selector in order for the index to be honored by the query engine.  - Indexes should be planned carefully.  Adding indexes increases the overall load on CouchDB since indexes have to be updated following updates.  - More complex queries have a lower chance of matching and performing well with an index.  .. note:: There is no metric for the number of indexes that should be used in CouchDB.  Three to four well planned indexes will have a good impact on supported queries.  Adding large numbers of indexes will increase the processing load for CouchDB to update indexes following every commit.  The following are some examples demonstrating index operations with JSON documents based on the following model:    \{"color":"yellow","docType":"marble","name":"marble100","owner":"tom","size":18}  It is assumed that an index with the following definition is created:    \{"index":{"fields": "docType","owner" },"ddoc":"indexOwnerDoc", "name":"indexOwner","type":"json"}  Example 1:  Query Selector: \{"selector":{"docType":"marble","owner":"tom"}}  Result: This query is fully supported by the index and has the fastest response time since both fields in the index are contained in the selector and no additional fields are included.  Example 2:  Query Selector: \{"selector":{"docType":"marble","owner":"tom","color":"red"}}  Result: This query is supported by the index. The additional field reduces the response time from CouchDB since the index has to be scanned for results due to the additional field.   Since the index is scanned instead of the full table, performance is much better than the full table scan, but not as good as the exact match in Example 1.  Example 3:  Query Selector: \{"selector":{"docType":"marble","owner":"tom","$or": {"color":"red"},\{"color":"yellow"} }}  Result: This query is supported by the index. The additional field including an ``$or`` condition does not invalidate the index since the two fields of the index are represented with an implicit ``$and`` condition at the top level of the query.  Performance of the query will be less than Example 1 due to the scan of the index.  Example 4:  Query Selector: \{"selector":{"docType":"marble"}}  Result: This query is not supported by the index and will cause a full table scan since the fields in the index are not included in the query selector.  Example 5:  Query Selector: \{"selector":{"$or": {"docType":"marble","owner":"tom"} }}  Result: This query is supported by the index but will have extremely poor performance since the ``$or`` condition at the top level of the query will force a full scan of the index.  ></description> </Issue>
