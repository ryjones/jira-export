<Action id="40084" issue="27677" author="jyellick" type="comment" body="Agreed, the contaminated output makes this tool effectively useless for any binary APIs.  The only way I see to fix this without breaking existing clients who might be working around this bug would be to add something like a {{-s}} / {{--silent}} flag to suppress the problematic output.  I&apos;m not sure whether adding a flag like this fits within the context of v1.1." created="2018-02-13 19:48:11.0" updateauthor="jyellick" updated="2018-02-13 19:48:11.0"/>
<Action id="40086" issue="27677" author="yacovm" type="comment" created="2018-02-13 19:54:31.0" updateauthor="yacovm" updated="2018-02-13 19:55:01.0"> <body><! CDATA I second  ~jyellick  and think we should eventually move (in older versions) towards a unix-like output convention in which a successful invocation doesn't contain any "decorating" output, ideally only outputs the relevant information, or is even silent in case there shouldn't be any, and an in-successful one contains decorating data ("the command failed because - foo")  Right now, when we run the peer CLI it starts logging all kinds of completely irrelevant information and when the command fails it... also outputs the usage, even when not asked for it.  ></body> </Action>
<Action id="40129" issue="27677" author="denyeart" type="comment" created="2018-02-14 13:13:26.0" updateauthor="denyeart" updated="2018-02-14 13:13:26.0"> <body><! CDATA I clarified the subject and description to indicate that CLI adds the extra information, rather than the query system chaincode.  I would consider this a bug.  We have the option to fix 1.0 bugs in 1.1 (and also backport to 1.0.x release branch) without adding a new flag, and mentioning it in the 1.1 release notes to notify any current users.  What are your thoughts  ~muralisr  ?  ></body> </Action>
<Action id="40132" issue="27677" author="c0rwin" type="comment" created="2018-02-14 13:48:41.0" updateauthor="c0rwin" updated="2018-02-14 13:49:54.0"> <body><! CDATA If we going to fix this and refine the way we doing output for queries in CLI, I think we also need to consider refactor following peace of code, as it make no real sense and anyway related to the FAB subject:  common.go|https://github.com/hyperledger/fabric/blob/master/peer/chaincode/common.go#L144 : {code} 		if chaincodeQueryRaw { 			if chaincodeQueryHex { 				return fmt.Errorf("Options --raw (-r) and --hex (-x) are not compatible") 			} 			fmt.Print("Query Result (Raw): ") 			os.Stdout.Write(proposalResp.Response.Payload) 		} else { 			if chaincodeQueryHex { 				fmt.Printf("Query Result: %x\n", proposalResp.Response.Payload) 			} else { 				fmt.Printf("Query Result: %s\n", string(proposalResp.Response.Payload)) 			} 		} {code}  I would also consider this is a bug and prefer to fix it rather than adding new flags to masquerade the problem.   ></body> </Action>
<Action id="40160" issue="27677" author="denyeart" type="comment" body=" ~C0rWin  I agree, I suggest go ahead with a CR and let&apos;s try to get this into 1.1 with a release note." created="2018-02-14 16:46:32.0" updateauthor="denyeart" updated="2018-02-14 16:46:32.0"/>
<Action id="40188" issue="27677" author="muralisr" type="comment" created="2018-02-14 18:21:07.0" updateauthor="muralisr" updated="2018-02-14 18:21:07.0"> <body><! CDATA  ~denyeart  Originally the intent was to use query for user chaincodes for doing quick checks. As its getting used for other things (reading blocks with qscc for example) makes sense to remove all decorating text in success cases. Additionally make sure for the failing cases * if err != nil, put an error message fmt.Printf("Error : %s\n", err) * if response.Status != 0 or 200, put a a meaningful message like fmt.Printf("Response Error : status-%d, message-%s \n", status, err)   ~C0rWin  I think the raw, hex options were added later on presumably for some satisfying some needs. I'd hesitate to remove them. What did you have in mind re cleanup with the above comment ?   ></body> </Action>
<Action id="40203" issue="27677" author="c0rwin" type="comment" created="2018-02-14 19:34:49.0" updateauthor="c0rwin" updated="2018-02-14 19:35:15.0"> <body><! CDATA  ~muralisr  didn't mean to remove them, but there is definitely some refactoring to the code, for example:  {code} 			os.Stdout.Write(proposalResp.Response.Payload) {code}  inside  {code} if chaincodeQueryRaw { } {code}  and later inside else  {code} 				fmt.Printf("Query Result: %x\n", proposalResp.Response.Payload) {code}  which IMO doesn't make any sense. Overall I'd prefer this to be restructured.  ></body> </Action>
<Action id="40210" issue="27677" author="denyeart" type="comment" body="Thanks  ~C0rWin  , I&apos;d say go ahead with the minor restructuring as well as removal of the decorating for success cases." created="2018-02-14 20:02:03.0" updateauthor="denyeart" updated="2018-02-14 20:02:03.0"/>
<Action id="40214" issue="27677" author="c0rwin" type="comment" body=" ~denyeart  on my way cap." created="2018-02-14 20:51:00.0" updateauthor="c0rwin" updated="2018-02-14 20:51:00.0"/>
<Action id="40357" issue="27677" author="c0rwin" type="comment" body="https://gerrit.hyperledger.org/r/#/c/18049/" created="2018-02-18 21:49:14.0" updateauthor="c0rwin" updated="2018-02-18 21:49:14.0"/>
<Action id="40518" issue="27677" author="denyeart" type="comment" created="2018-02-21 16:01:37.0" updateauthor="denyeart" updated="2018-02-21 16:02:29.0"> <body><! CDATA The change to remove extra characters from CLI query response will be reverted using FAB-8430 so that existing tests/clients don't break.  FAB-8245 will be re-opened as an Improvement for 1.2, the intent is to use a flag to specify silent or binary mode.  ></body> </Action>
<Action id="40527" issue="27677" author="c0rwin" type="comment" created="2018-02-21 18:05:55.0" updateauthor="c0rwin" updated="2018-02-21 18:05:55.0"> <body><! CDATA While it's sounds reasonable to postpone the change, I do not think that adding new flag make any sense.  As doesn't sounds reasonable to support buggy output.  ></body> </Action>
<Action id="42017" issue="27677" author="denyeart" type="comment" body="Many issues were bulk moved from v1.0 or v1.1 to v1.2 as part of a cleanup effort, and many of these issues are not high priority or actually intended to be worked for v1.2.  This issue is being bulk moved to Future.  If the issue is indeed high priority for v1.2 and/or very low effort, please move back to v1.2 and add a comment to indicate rationale." created="2018-03-23 05:07:56.0" updateauthor="denyeart" updated="2018-03-23 05:07:56.0"/>
<Action id="42069" issue="27677" author="jyellick" type="comment" body="This one I think we should address for v1.2.  It&apos;s the only way we ship to directly query chaincodes, and for doing debugging, say, querying a chaincode and decoding the protobuf, it would be very useful.  Assuming we can agree to an approach, I also don&apos;t think it&apos;s terribly difficult to implement." created="2018-03-23 14:04:04.0" updateauthor="jyellick" updated="2018-03-23 14:04:04.0"/>
<Action id="43048" issue="27677" author="nirro" type="comment" body="https://gerrit.hyperledger.org/r/#/c/20657/" created="2018-04-17 11:22:41.0" updateauthor="nirro" updated="2018-04-17 11:22:41.0"/>
