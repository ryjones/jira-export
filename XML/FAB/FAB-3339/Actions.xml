<Action id="25460" issue="15931" author="baohua" type="comment" body="Great, and this feature can strongly support https://jira.hyperledger.org/browse/CE-7." created="2017-06-06 02:39:19.0" updateauthor="baohua" updated="2017-06-06 02:39:19.0"/>
<Action id="25734" issue="15931" author="chawlanikhil24" type="comment" created="2017-06-08 13:03:16.0" updateauthor="chawlanikhil24" updated="2017-06-08 13:05:10.0"> <body><! CDATA I've begun work on this issue and the initial step I am following so to convert these  compose files |https://github.com/hyperledger/cello/tree/master/src/agent/docker/_compose_files  to Kubernetes manifests and use these manifests to run fabric on top of Kubernetes.   I am using Kompose for now , for the conversion of current docker compose files.   Any other suggestions ?  ></body> </Action>
<Action id="25738" issue="15931" author="baohua" type="comment" created="2017-06-08 13:42:07.0" updateauthor="baohua" updated="2017-06-08 13:42:15.0"> <body><! CDATA I suppose the template file is not very large.  We can first put the converted files under agent/k8s and keep it updated.  ></body> </Action>
<Action id="25759" issue="15931" author="chawlanikhil24" type="comment" body="Sure! I&apos;ll update with successfully generated manifests in the folder you mentioned." created="2017-06-08 16:07:37.0" updateauthor="chawlanikhil24" updated="2017-06-08 16:07:37.0"/>
<Action id="27586" issue="15931" author="chawlanikhil24" type="comment" body="Kubernetes Manifests for Fabric 0.6 and Fabric 1.0 has been developed and can be found  here|https://github.com/chawlanikhil24/hyperledger-fabric-k8s  . There are some issues which are still needed to be debugged." created="2017-06-29 05:34:51.0" updateauthor="chawlanikhil24" updated="2017-06-29 05:34:51.0"/>
<Action id="27806" issue="15931" author="chawlanikhil24" type="comment" body="People! Need your reviews over  this|https://jira.hyperledger.org/projects/CE/issues/CE-7?filter=allopenissues  issue, this might create some troubles in future, please do come forward with your opinions and ideas." created="2017-07-04 08:02:32.0" updateauthor="chawlanikhil24" updated="2017-07-04 08:02:32.0"/>
<Action id="27996" issue="15931" author="chawlanikhil24" type="comment" body="https://gerrit.hyperledger.org/r/#/c/11433/" created="2017-07-07 07:24:28.0" updateauthor="chawlanikhil24" updated="2017-07-07 07:24:28.0"/>
<Action id="28496" issue="15931" author="tongliofcary" type="comment" body="My assessement is that fabric will probably not work on k8s due to how chaincode container gets created. If I understand this correctly, chaincode container gets created by peer container using docker APIs. which will create a bare container in k8s env, that bare container will never be managed by k8s, it won&apos;t know anything about other k8s services, kube-proxy probably will not route correctly with anything else put into k8s pods. Unless fabric peer is configured to create chaincode container in a pod via k8s APIs." created="2017-07-17 13:59:58.0" updateauthor="tongliofcary" updated="2017-07-17 13:59:58.0"/>
<Action id="28519" issue="15931" author="greg.haskins" type="comment" body=" ~tongliofcary   It does actually work, believe it or not.  It&apos;s just that the container is not visible/managed by k8s (its managed by the peer).  The fact is, the chaincode container doesn&apos;t need any services except for the ability to find the peer&apos;s TLS endpoint.  There are a few tricks you can do to help the peer surface the endpoint in a way in which it is conducive to k8s dynamic IP, etc, but it does work." created="2017-07-17 19:14:15.0" updateauthor="greg.haskins" updated="2017-07-17 19:14:15.0"/>
<Action id="28556" issue="15931" author="chawlanikhil24" type="comment" body=" ~greg.haskins  , can you refer any link on net for this ? Any sort of blog,tutorial or anything. K8s managing container. " created="2017-07-18 05:30:37.0" updateauthor="chawlanikhil24" updated="2017-07-18 05:30:37.0"/>
<Action id="28570" issue="15931" author="tongliofcary" type="comment" body="Greg, thanks for your quick response. I think I am missing this &quot;the chaincode container doesn&apos;t need any services except for the ability to find the peer&apos;s TLS endpoint&quot;, I could not really find any document on how this is actually done, starting within a tools container with only peer and orderer container info, then a new chaincode container gets created, this whole process is a mystery to me. Let&apos;s assume that the chaincode container gets created one way or the other, how does it communicate with anybody else once it is born? Your pointer to any doc or direct comment will be really appreciated. Thanks." created="2017-07-18 13:02:47.0" updateauthor="tongliofcary" updated="2017-07-18 13:02:47.0"/>
<Action id="28573" issue="15931" author="baohua" type="comment" created="2017-07-18 13:30:42.0" updateauthor="baohua" updated="2017-07-18 13:30:42.0"> <body><! CDATA  ~greg.haskins   The key here is that fabric currently uses the docker API to boot up cc container. Hence we still need the docker service even with the k8s cluster.  After bootup, the cc container can connect to peer with appropriate address (e.g., if it knows the service ip of the corresponding peer node).  ></body> </Action>
<Action id="28574" issue="15931" author="greg.haskins" type="comment" created="2017-07-18 13:37:15.0" updateauthor="greg.haskins" updated="2017-07-18 13:37:15.0"> <body><! CDATA  ~tongliofcary  you can think of the peer as an application platform like tomcat in a way.  Like tomcat, it can take an application payload (chaincode in this case) and then run that application in a way that it has endpoints surfaced to network clients.  When you launch a chaincode application, it is never just this free-standing thing...its managed by the peer.  The peer compiles, launches, and maintains a connection to the chaincode for its entire lifecycle.  Access to the chaincode from clients always goes through the peer.  As such, operationally, the only thing that the chaincode needs is a connection back to the peer.  This is handled transparently to the application code by the shim library.  Under the covers, the shim library opens a TLS connection back to the peer, and all flows between clients and the application tunnel through this connection.  Therefore, the peer only needs a way to control the building/running of docker containers, and the chaincode only needs a TLS connection back to the peer.  We solve the former by using things like making the peer pod privleged (so that it has permission to connect to /var/lib/docker.sock and to create containers, etc).  We solve the latter by using a few environment variables that allow the peer to surface its TLS endpoint to the chaincode in a k8s friendly way.  Otherwise, that is all that is needed to get a basic environment running.  In the longer term, I would like to see formal support for k8s. What this might mean is that the chaincode containers are no longer "invisible" to k8s but the peer drives them explicitly through the k8s pod-creation APIs. Etc.  Hope that helps.  ></body> </Action>
<Action id="28575" issue="15931" author="greg.haskins" type="comment" body=" ~baohua  Yes, I understand this.  What I was responding to what the comment that &quot;fabric will probably not work on k8s&quot;.  That isn&apos;t true.  It will work, albeit in a slightly awkward/less-than-ideal way.  Longer term, I hope to make it work in a better integrated way, but we aren&apos;t there yet." created="2017-07-18 13:47:57.0" updateauthor="greg.haskins" updated="2017-07-18 13:47:57.0"/>
<Action id="28576" issue="15931" author="baohua" type="comment" created="2017-07-18 13:51:05.0" updateauthor="baohua" updated="2017-07-18 13:51:05.0"> <body><! CDATA  ~greg.haskins   yeap, then the point is clear here.      ~chawlanikhil24  i guess we can start with some workaround solution, as greg suggested. first, let fabric run atop k8s, then make it better with the service discovery support. How do u think?  ></body> </Action>
<Action id="28580" issue="15931" author="chawlanikhil24" type="comment" created="2017-07-18 14:15:29.0" updateauthor="chawlanikhil24" updated="2017-07-18 14:15:29.0"> <body><! CDATA Thanks a lot  ~greg.haskins  , you really shared a lot of useful material .   +*We solve the former by using things like making the peer pod privleged (so that it has permission to connect to /var/lib/docker.sock and to create containers, etc). ,*+ as said by you, is somewhat similar to what i was thinking, since, you mentioned it, So, I'll experiment first that, *a pod creating a container ,* like , nginx container running inside of K8s pod, is enough to solve our current issue or not. Although It looks fine to me, rest is on the machine.   ~baohua  , I am feeling like a mad scientist ;), I should better start with what Greg said !    ~tongliofcary  remember, it is almost the same we discussed on rocket-chat ?     ></body> </Action>
<Action id="28588" issue="15931" author="tongliofcary" type="comment" body=" ~greg.haskins  thanks for your information, I will try to follow your sugguestions and make it working. will report back after. Now on this statement &quot;The peer compiles, launches, and maintains a connection to the chaincode for its entire lifecycle.  Access to the chaincode from clients always goes through the peer.&quot;, what happens when connection between chaincode and peer breaks, how does chaincode finds its peer or the other way around? Will chaincode container simply ends its life cycle, peer will launch a new one? I feel like this topic needs a little section in the formal fabric document if there is none currently." created="2017-07-18 15:02:57.0" updateauthor="tongliofcary" updated="2017-07-18 15:02:57.0"/>
<Action id="29896" issue="15931" author="chawlanikhil24" type="comment" body="https://gerrit.hyperledger.org/r/#/c/12389/" created="2017-08-16 12:47:14.0" updateauthor="chawlanikhil24" updated="2017-08-16 12:47:14.0"/>
<Action id="32054" issue="15931" author="knagware9" type="comment" created="2017-10-12 18:39:46.0" updateauthor="knagware9" updated="2017-10-12 18:39:46.0"> <body><! CDATA Hi All,     I setup fabric1.0 setup on Kubernetes,please use below git lib  https://github.com/knagware9/ibm-container-service  ></body> </Action>
<Action id="32056" issue="15931" author="tongliofcary" type="comment" body="Cello ansible agent already supports setting up fabric network on k8s. It actually also sets up k8s. Please see cello/src/agent/ansible readme files." created="2017-10-12 19:30:07.0" updateauthor="tongliofcary" updated="2017-10-12 19:30:07.0"/>
<Action id="42897" issue="15931" author="remmeier" type="comment" created="2018-04-13 08:09:52.0" updateauthor="remmeier" updated="2018-04-13 08:09:52.0"> <body><! CDATA it would be good to have Helm examples available to setup and upgrade fabric in kubernetes. Helm seems to become the defacto standard how to do packaging and deployment in Kubernetes (and does a very good job at that).  The involved Kubernetes yaml files should then also provide liveness/readiness checks.   Such a setup could also provide an alternative to the current docker compose setup. Personally I don't like Docker compose much. It is good for development, but unsuited for production. And these makes it a bit cumbersome to hand out to developers. Development and production setups should be aligned. With minikube there is the tooling similar to docker compose to run everything locally.  Then there are also issues like  this here:  https://medium.com/kokster/simpler-setup-for-hyperledger-fabric-on-kubernetes-using-docker-in-docker-8346f70fbe80.  Fabric should really become a first class citizen in Kubernetes. The outlined solution there seems quite reasonable. A fairly big no-go is having to modify the underlying docker hosts to be able to run fabric. That is something people are able to do when running kubernetes locally, but rather not when going with managed Kubernetes services by Cloud providers.   To some degree I have the feeling the Kubernetes setup clashes a bit with Cello. At least there seems to a partial overlap. All major cloud providers now supporting managed kubernetes. And there is tooling like Hashicorp Terraform. Potentially cello shifts it focus a bit more on managing a running cluster and let a kubernetes stack do its thing below.  ></body> </Action>
<Action id="57451" issue="15931" author="alexvicegrab" type="comment" created="2019-02-22 12:45:21.0" updateauthor="alexvicegrab" updated="2019-02-22 12:46:03.0"> <body><! CDATA There are Helm charts and basic examples:  https://hub.kubeapps.com/charts?q=hyperledger  https://github.com/aidtechnology/hgf-k8s-workshop  https://github.com/aidtechnology/lf-k8s-hlf-webinar  https://hgf18.sched.com/event/G9QX/deploying-hyperledger-fabric-with-kuberneteshelm-alejandro-sasha-vicente-grabovetsky-nicola-paoli-aidtech  Full disclosure: I am author of all :)  ></body> </Action>
<Action id="60909" issue="15931" author="raft 3" type="comment" created="2019-06-12 10:14:06.0" updateauthor="raft 3" updated="2019-06-12 10:14:06.0"> <body><! CDATA Dear all,   We had recently opened the source code of our work for running and operating HL Fabric in Kubernetes and announced at Fabric mail list. Adding here as a comment for those who are not following the mail list.   https://github.com/APGGroeiFabriek/PIVT   This repository contains a couple of Helm charts to: * Configure and launch the whole HL Fabric network, either: ** A simple one, one peer per organization and Solo orderer ** Or scaled up one, multiple peers per organization and Kafka orderer ** Raft orderer is WIP * Populate the network: ** Create the channels, join peers to channels, update channels for Anchor peers ** Install/Instantiate all chaincodes, or some of them, or upgrade them to newer version * Backup and restore the state of whole network  As mentioned in the repository and also in the mail list, we strongly encourage the HL Fabric community to take ownership of this repository, extend it for further use cases, use it as a test bed and adapt it to the Fabric provided samples to get rid of endless Docker Compose files and Bash scripts.  Cheers, _Hakan (r a f t)_  ></body> </Action>
<Action id="60946" issue="15931" author="baohua" type="comment" created="2019-06-13 09:05:07.0" updateauthor="baohua" updated="2019-06-13 09:05:07.0"> <body><! CDATA Nice work, and that could be integrated into Cello's k8s agent:  https://wiki.hyperledger.org/display/cello/Hyperledger+Cello  ></body> </Action>
