<Issue id="18117" key="FAB-4807" number="4807" project="10002" reporter="scottz" creator="scottz" type="10003" summary="Pausing all kafka brokers after setting MIN_ISR to 2 while sending traffic to 3 orderers, 4 kafka brokers on 1 channel" priority="3" resolution="10000" status="6" created="2017-06-15 20:06:22.0" updated="2018-07-20 14:13:29.0" resolutiondate="2018-07-09 18:23:25.0" votes="0" watches="1" workflowId="39158"> <description><! CDATA * *Test Name*: FAB_4807-ORD99-sending txs to 3 orderers, 4 kafka brokers on 1 channel * *Component*: Orderer * *Description*: 1 Producer per Orderer-channel send 300,000 Tx to 3 orderers on 1 channels with 4 kafka brokers. Confirm all Tx delivered (wait/poll consumer as necessary), with no problems. (1) This will launch the network with the configuration mentioned below, starts the deliver clients first and each client will be connected to each orderer, starts broadcast clients for each orderer and starts sending the traffic to the orderers. (2) Using a separate thread, pause all the kafka brokers, and then unpause all the kafka brokers in reverse order (3) Reconnect the broadcast clients to send the transactions and reconnect deliver clients so they will receive transactions sent both before and after the orderer restarted.  The delay between the pause action and the unpause action is critical; See also ORD-110, which uses a different delay; a shorter delay should go unnoticed, whereas a longer delay could trigger SERVICE_UNAVAILABLE (503) msgs to the consumers (deliver clients) and the broadcast-producers clients. * *Artifact Locations*: fabric/test/tools/OTE * *Network Topology*: 3 orderers, 4 kafka brokers, 3 zookeepers, 2 orgs with 2 peers in each * *Client Driver*: OTE * *Input*: go test -run ORD99 -timeout 50m * *Output*: if the test ran successfully, should be able to see pass as the output  ></description> </Issue>
