<Action id="44530" issue="28464" author="latitiah" type="comment" created="2018-05-17 04:18:56.0" updateauthor="latitiah" updated="2018-05-17 04:18:56.0"> <body><! CDATA  ~yacovm  Can you open up task issues for each item in your test plan that need to be done? We need to be able to track what tests are being done and when they are complete. If these are manual tests, please tag the issue as "manual-test".   ~dongming  Please review what Yacov has here and make sure that it makes sense to you and whether or not there are any further testing that need to take place.  Thanks!  ></body> </Action>
<Action id="44541" issue="28464" author="yacovm" type="comment" body=" ~latitiah  done." created="2018-05-17 10:23:05.0" updateauthor="yacovm" updated="2018-05-17 10:23:05.0"/>
<Action id="44609" issue="28464" author="dongming" type="comment" created="2018-05-17 20:36:51.0" updateauthor="dongming" updated="2018-05-17 20:36:51.0"> <body><! CDATA  ~yacovm  We will test thru PTE (Performance Traffic Engine) which uses Node SDK. I will add service discovery support to PTE once SDK is ready.  PTE does not support mutual TLS.  It will be useful to know the performance impact of service discovery.  Are you suggesting that every transaction needs service discovery? We run a number of transactions sending to the same peers continuously for the performance measurement. If every transaction requires service discovery, then there will be performance impact.  An alternative is to run service discovery for the first transaction and when there is a problem, such as the peer goes down.  ></body> </Action>
<Action id="44610" issue="28464" author="yacovm" type="comment" created="2018-05-17 21:10:02.0" updateauthor="yacovm" updated="2018-05-17 21:14:20.0"> <body><! CDATA {quote}I will add service discovery support to PTE once SDK is ready {quote} Great! Looking forward seeing the node SDK discovery support materialize!    {quote}PTE does not support mutual TLS. {quote} That's really easy to add. You just pass another PEM byte Buffer object to the createSsl command in the node SDK. I can show you where, but I'm sure that Bret also knows and he's in closer proximity than me ;)   Since you're testing, you can just have a self-signed certificate and use it always for PTE. it would work. {quote}It will be useful to know the performance impact of service discovery. {quote} I agree. {quote}Are you suggesting that every transaction needs service discovery? {quote} No. {quote} We run a number of transactions sending to the same peers continuously for the performance measurement. {quote} I think the idea of system testing of service discovery is only to test service discovery.  Not to send transactions while also testing service discovery. Maybe I have the wrong idea what the system test is supposed to do?  What I'd do, had I been a system tester - is to setup a test that sends (in isolation, without sending transactions at the same time...) a trillion discovery queries according to some parametric layout, i.e - *Q* queries per second, over time of *T*, every *t* seconds and measure the mean response time, the error count, and if you want to go wild then also the distribution, i.e standard deviation.  Also it would be nice to see the CPU usage at the test, and memory usage, etc.  Also you'd want to use TLS while doing it, because - that's what customers are expected to do.     ></body> </Action>
<Action id="44670" issue="28464" author="dongming" type="comment" body=" ~yacovm  Thanks for explaining the detail.  Then PTE will not be able to run the test since PTE has no control on SDK to execute service discovery." created="2018-05-18 17:32:16.0" updateauthor="dongming" updated="2018-05-18 17:32:16.0"/>
<Action id="45007" issue="28464" author="bmos299" type="comment" created="2018-05-23 19:43:45.0" updateauthor="bmos299" updated="2018-05-23 19:44:31.0"> <body><! CDATA  ~dongming   ~yacovm   ~harrisob@us.ibm.com   ~latitiah   In the Node SDK Brett is going to modify the Channel initialize() method to now use the service discovery API queries.  The discovery service provides 3 types of queries:  • Peer membership query – either channel scoped, or non-channel scoped (AKA “local”)  • Config query  • Endorsers query    It seems like the most complicated is the Endorser query which contains the Layouts and Groups.   The SDK will be the 'brains' behind this work, via a default plug-in module which we will use.    I think in system testing we can:  1.  Drive the initialize() call in a loop to force all the queries, i.e. service discovery code.   Bret and I had some discussion that after the initialize() it may be better to have a method called refresh() to not confuse the developers. 	- this can include multiple PTE drivers issuing the same initialize() as well as a single PTE driver issuing initialize() on different channels on the peer.  2.  In our multi-host setup with multiple orgs, we can insert some chaos by taking peers up and down and create scenarios we expect the transaction to fail, and then through retry logic (still being determined if this is in the sdk or application) the transaction succeeds again.  Thoughts?  ></body> </Action>
<Action id="45009" issue="28464" author="yacovm" type="comment" created="2018-05-23 20:10:11.0" updateauthor="yacovm" updated="2018-05-23 20:10:11.0"> <body><! CDATA 1 seems sort of OK to me, as long as you: * Use TLS, because that's what is used for production * Don't re-open the connection each time, but reuse the connection with the peer  2 doesn't have anything to do with discovery, you can take peers up and down and throw in chaos, sugar, spice, and everything nice, but it won't be in the context of the discovery.  ></body> </Action>
<Action id="45010" issue="28464" author="dongming" type="comment" body="I will create a PTE testcase for item 1 once channel initialization() and/or refresh() is supported." created="2018-05-23 20:20:51.0" updateauthor="dongming" updated="2018-05-23 20:20:51.0"/>
<Action id="45012" issue="28464" author="denyeart" type="comment" body=" ~yacovm  The intent of #2 was to ensure Service Discovery can tolerate chaos, sugar, spice, and everything nice. e.g. if the peer you are calling goes down and up, the client calls fail gracefully and then resume, and if another peer goes down and up, it falls out of the Service Discovery response list and then comes back into the Service Discovery response list.  Sounds like a good test to me." created="2018-05-23 20:39:59.0" updateauthor="denyeart" updated="2018-05-23 20:39:59.0"/>
<Action id="45018" issue="28464" author="bmos299" type="comment" body="Thanks for the comments  ~yacovm .  As  ~denyeart  test #2 is just ensuring service discovery is part of the real-world system test we hope to accomplish with system/solution testing.  We will continue to discuss with you guys.   " created="2018-05-23 21:18:33.0" updateauthor="bmos299" updated="2018-05-23 21:18:33.0"/>
<Action id="45373" issue="28464" author="dongming" type="comment" body="I have reviewed the test plan and agreed with what Barry suggested." created="2018-05-31 19:34:56.0" updateauthor="dongming" updated="2018-05-31 19:34:56.0"/>
