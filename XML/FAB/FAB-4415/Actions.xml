<Action id="25511" issue="17562" author="ratnakar" type="comment" created="2017-06-06 14:38:31.0" updateauthor="ratnakar" updated="2017-06-06 14:40:41.0"> <body><! CDATA Some times after channel creation is successful,Â we do see failures with instantiate.  Attached Â the logs  ^instantiate_failure.tar.gz   Â   ^Gist of error logs for reference^  Â  {code:java} Instantiating chaincode on on each Organization CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key CORE_PEER_LOCALMSPID=Org1MSP CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt CORE_PEER_TLS_ENABLED=false CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp CORE_PEER_ID=org1.cli CORE_LOGGING_LEVEL=DEBUG CORE_PEER_ADDRESS=peer0.org1.example.com:7051 2017-06-06 14:33:32.517 UTC  msp  getMspConfig -> INFO 001 intermediate certs folder not found at  /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/intermediatecerts . Skipping.:  stat /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/intermediatecerts: no such file or directory  2017-06-06 14:33:32.518 UTC  msp  getMspConfig -> INFO 002 crls folder not found at  /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/intermediatecerts . Skipping.:  stat /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/crls: no such file or directory  2017-06-06 14:33:32.518 UTC  msp  getMspConfig -> INFO 003 MSP configuration file not found at  /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/config.yaml :  stat /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/config.yaml: no such file or directory  2017-06-06 14:33:32.567 UTC  msp  GetLocalMSP -> DEBU 004 Returning existing local MSP 2017-06-06 14:33:32.567 UTC  msp  GetDefaultSigningIdentity -> DEBU 005 Obtaining default signing identity 2017-06-06 14:33:32.570 UTC  chaincodeCmd  checkChaincodeCmdParams -> INFO 006 Using default escc 2017-06-06 14:33:32.570 UTC  chaincodeCmd  checkChaincodeCmdParams -> INFO 007 Using default vscc 2017-06-06 14:33:32.570 UTC  msp/identity  Sign -> DEBU 008 Sign: plaintext: 0AB2070A6808031A0C08BCFADAC90510...324D53500A04657363630A0476736363  2017-06-06 14:33:32.570 UTC  msp/identity  Sign -> DEBU 009 Sign: digest: 3C641BEC4F666A0FCB4B1DAA9C9C42822FF06FD7A9A2B75FE04FD0D9CF0BECC8  2017-06-06 14:33:54.201 UTC  msp/identity  Sign -> DEBU 00a Sign: plaintext: 0AB2070A6808031A0C08BCFADAC90510...107F4C61BE9CFAD41ACA6BBE054F8D80  2017-06-06 14:33:54.201 UTC  msp/identity  Sign -> DEBU 00b Sign: digest: 6D3272D757CD10CF09CA72E34397E6B659DE9234D1ECD4CCF4025628C2CD5250  Error: Got unexpected status: NOT_FOUND Usage: peer chaincode instantiate  flags  Global Flags: --cafile string Path to file containing PEM-encoded trusted certificate(s) for the ordering endpoint -C, --chainID string The chain on which this command should be executed (default "testchainid") -c, --ctor string Constructor message for the chaincode in JSON format (default "{}") -E, --escc string The name of the endorsement system chaincode to be used for this chaincode -l, --lang string Language the chaincode is written in (default "golang") --logging-level string Default logging level and overrides, see core.yaml for full syntax -n, --name string Name of the chaincode -o, --orderer string Ordering service endpoint -p, --path string Path to chaincode -P, --policy string The endorsement policy associated to this chaincode --test.coverprofile string Done (default "coverage.cov") -t, --tid string Name of a custom ID generation algorithm (hashing and decoding) e.g. sha256base64 --tls Use TLS when communicating with the orderer endpoint -u, --username string Username for chaincode operations when security is enabled -v, --version string Version of the chaincode specified in install/instantiate/upgrade commands -V, --vscc string The name of the verification system chaincode to be used for this chaincode !!!!!!!!!!!!!!! Chaincode================== ERROR !!! FAILED to execute End-2-End Scenario ================== {code} Â   ></body> </Action>
<Action id="25529" issue="17562" author="kchristidis" type="comment" body=" ~Ratnakar : Please re-run with the Kafka logs on  https://github.com/hyperledger/fabric/blob/master/bddtests/dc-orderer-base.yml#L17 Â and attach the logs here. Seems like a configuration issue, but I&apos;ll know for sure when I see the logs." created="2017-06-06 15:52:49.0" updateauthor="kchristidis" updated="2017-06-06 15:52:49.0"/>
<Action id="25532" issue="17562" author="kchristidis" type="comment" created="2017-06-06 15:54:44.0" updateauthor="kchristidis" updated="2017-06-06 15:54:44.0"> <body><! CDATA Downgrading to Medium unless the cause turns out to be something that justifies the Highest priority.  (In general, I suggest setting to Medium when submitting and letting the assignees escalate accordingly.)  ></body> </Action>
<Action id="25536" issue="17562" author="ratnakar" type="comment" body=" ~kchristidis  attached the requested logsÂ  ^with_kafka_verbose.tar.gz " created="2017-06-06 15:57:50.0" updateauthor="ratnakar" updated="2017-06-06 15:57:50.0"/>
<Action id="25540" issue="17562" author="kchristidis" type="comment" created="2017-06-06 16:01:57.0" updateauthor="kchristidis" updated="2017-06-06 16:01:57.0"> <body><! CDATA  ~Ratnakar : As I suspected, that is because we're targeting the Kafka cluster way too early. Recall that we're bringing up two clusters (Kafka and ZK) and both need to go through leader election before we release them to the world. In our tests we're pushing transactions to them right away, and that's unrealistic. {quote}2017-06-06 15:56:35.846 UTC  orderer/kafka  Send -> INFO 0e3 0m  channel testchainid  Failed to post blob to the Kafka cluster: kafka server: In the middle of a leadership election, there is currently no leader for this partition and hence it is unavailable for writes. {quote} Nonetheless, this will be fixed with FAB-4136.  ></body> </Action>
<Action id="25820" issue="17562" author="kchristidis" type="comment" created="2017-06-09 06:49:15.0" updateauthor="kchristidis" updated="2017-06-09 06:51:23.0"> <body><! CDATA  ~Ratnakar : Please fetch  this changeset|https://gerrit.hyperledger.org/r/#/c/10323/ Â and rebuild your Docker images:  {{make clean;Â }}{{make docker}}  Please note that the options in the orderer.yaml file have changed (this is why you need to "make clean") and you may want to adjust the values of ShortInterval, ShortTotal. As always, the `dc-*.yml` files under the `bddtests` directory provide guidance.  Also note that the ordering service is designed to drop broadcast/deliver clients when there is an error, so your client will have to reconnect if that is the case. See this threadÂ for context: https://jira.hyperledger.org/browse/FAB-2575?focusedCommentId=25757&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-25757  Please try to reproduce and let me know if the issue persists.  If more help is needed, let me know.  ></body> </Action>
<Action id="25905" issue="17562" author="kchristidis" type="comment" created="2017-06-09 19:10:12.0" updateauthor="kchristidis" updated="2017-06-09 19:13:57.0"> <body><! CDATA This is not a bug. As the log states:   33m2017-06-09 19:02:58.587 UTC  orderer/kafka  Enqueue -> WARN 46a 0m  channel: testchainid  Will not enqueue, consenter for this channel hasn't started yet  You are issuing a request before the orderer has a chance to establish a connection to the Kafka cluster.  Your request is supposed to be dropped in this case.  It is the client's responsibility to repeat the request at a later time.  Let me know if that covers it, or if I'm missing something.  Thanks for repeating the experiment.  ></body> </Action>
<Action id="25907" issue="17562" author="scottz" type="comment" created="2017-06-09 19:13:57.0" updateauthor="scottz" updated="2017-06-09 19:13:57.0"> <body><! CDATA Ratnakar and I discussed this; it seems when we enable laptop networking, while sitting in IBM building, we areÂ seeing some sort of interference / networking problem - which is usuallyÂ first noticed when theÂ "create channel" fails, although sometimes we see an error during the install or instantiate. The test is run on aÂ laptop, using docker containers. Whatever is happening, IBM network traffic seems to be interfering withÂ the communications between his docker containers on his laptop. * TEST PASS: Â on his laptop, using docker containers, at his home,Â when he ENABLES or DISABLES Networking * TEST PASS: Â on one vLaunch server, using docker containers * TEST PASS: Â on his laptop, using docker containers, at his desk in B500 lab, when he DISABLESÂ Networking * +TEST FAIL+: Â on his laptop, using docker containers, at his desk in B500 lab, when he ENABLESÂ Networking (either wireless or ethernet) (Fails 19/20 attempts) * +TEST FAIL+: Â on his laptop, using docker containers, in blockchain dev common area, when he ENABLESÂ Networking (wireless) * +TEST FAIL+: Â on two colleagues'Â laptops, using docker containers, at his desk in B500 lab, when he ENABLESÂ Networking (ethernet) (failed 2/3)  As seen in the most recent logs, the failure occurs - even when inserting "sleep 60" before creating a channel, and while using the recommended changeset.  ></body> </Action>
<Action id="25914" issue="17562" author="ratnakar" type="comment" created="2017-06-09 20:12:19.0" updateauthor="ratnakar" updated="2017-06-09 20:12:19.0"> <body><! CDATA  ~kchristidis , Can you please take a close look at the docker-compose files  ^docker-files.zip Â enclosed.Â   (Increasing sleep to 120 secs didn't helped.)  ></body> </Action>
<Action id="25921" issue="17562" author="kchristidis" type="comment" body="You talk about sleep but nowhere in this issue do I see a simple step-by-step description (not technical explanation) of the steps that this test takes. Can you please list them here?" created="2017-06-09 20:43:41.0" updateauthor="kchristidis" updated="2017-06-09 20:43:41.0"/>
<Action id="25923" issue="17562" author="kchristidis" type="comment" body="Also, can I have the logs from the 120 second sleep run?" created="2017-06-09 21:03:23.0" updateauthor="kchristidis" updated="2017-06-09 21:03:23.0"/>
<Action id="25926" issue="17562" author="ratnakar" type="comment" created="2017-06-09 21:13:31.0" updateauthor="ratnakar" updated="2017-06-09 21:13:31.0"> <body><! CDATA The script `*./network_setup.sh*` will bootstraps the network and starts 4 cli containers. One of the CLI containers *peer0.org1.cli* will create channel, which is similar to what youÂ see in *e2e_cli*Â sample  Â   It used to take 30+ secs to install *libltdl-dev* https://github.com/asararatnakar/chaincodechecker/blob/master/scripts/script.sh#L4 However now that this lib libltdl-dev is available in *fabric-tools* Image, I added 120 secs delay before creating the channel in the aboveÂ  ^script.sh   Please let me know if you need more details.  ></body> </Action>
<Action id="25929" issue="17562" author="kchristidis" type="comment" created="2017-06-09 21:29:10.0" updateauthor="kchristidis" updated="2017-06-09 21:29:10.0"> <body><! CDATA Ratnakar, I'm asking for a simple step-by-step description but instead I'm being pointed to a script.  This is an example of what I'm looking for: https://jira.hyperledger.org/browse/FAB-4012?focusedCommentId=25449&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-25449  Also, I'll need the logs of the 120 sleep run as noted earlier.  ></body> </Action>
<Action id="25946" issue="17562" author="kchristidis" type="comment" created="2017-06-10 09:56:17.0" updateauthor="kchristidis" updated="2017-06-10 09:56:17.0"> <body><! CDATA I'd also note that I'm extremely skeptical about this because `bootstrap.feature` does the exact same things (bring up an ordering service, create a channel, add members, instantiate/invoke chaincode) with none of the issues reported here.  But let's proceed as I described in the comment above.  ></body> </Action>
<Action id="25948" issue="17562" author="kchristidis" type="comment" created="2017-06-10 10:46:30.0" updateauthor="kchristidis" updated="2017-06-10 10:46:30.0"> <body><! CDATA I am reviewing your logs from yesterday. You're bringing up the orderer at 19:01.54. For the next 90 seconds (that's how long the logs are), the orderer attempts to connect to the Kafka cluster, going through the brokers one-by-one but it fails to establish a connection.Â For example, you see this:Â  sarama  2017/06/09 19:03:26.277721 broker.go:96: Failed to connect to broker kafka0:9092: dial tcp 165.160.13.20:9092: i/o timeout  Your Kafka brokers seem to be up and running just fine though (for instance broker0 is up at 19:01:54).Â So as you guys noted earlier, my best guess is that is indeed a networking issue of sorts: https://jira.hyperledger.org/browse/FAB-4415?focusedCommentId=25907&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-25907  This doesn't seem to beÂ an issue with the orderer binary. I will close this by EOD today unless you suggest otherwise.  ></body> </Action>
