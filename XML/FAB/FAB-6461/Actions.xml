<Action id="38223" issue="21320" author="mastersingh24" type="comment" created="2018-01-05 10:33:37.0" updateauthor="mastersingh24" updated="2018-01-05 10:33:37.0"> <body><! CDATA Given this has never really come up, I'm going to push this to the next release.  It's not hard to do, but it's one last thing to test / document for the 1.1 release.  ~ChristopherFerris   ~denyeart  - Any objections?  ></body> </Action>
<Action id="38224" issue="21320" author="mastersingh24" type="comment" body="also - I&apos;m happy to do this one, but marked it as help wanted in case someone else wants to take it on.  It&apos;s a good starter item to take on" created="2018-01-05 10:34:42.0" updateauthor="mastersingh24" updated="2018-01-05 10:34:42.0"/>
<Action id="38260" issue="21320" author="denyeart" type="comment" body="Agree to defer until future release." created="2018-01-08 02:11:07.0" updateauthor="denyeart" updated="2019-05-23 16:08:43.0"/>
<Action id="42066" issue="21320" author="mastersingh24" type="comment" body="this is pretty low effort - not sure if anyone will actually hit this or not as to date no one has, but as people start messing with batch sizes they might hit this limit" created="2018-03-23 13:03:13.0" updateauthor="mastersingh24" updated="2018-03-23 13:03:13.0"/>
<Action id="49502" issue="21320" author="nrohith" type="comment" body="Can someone give clarification on this issue? I went through the code in core/comm and it seems like the feature is already implemented." created="2018-08-28 17:33:10.0" updateauthor="nrohith" updated="2018-08-28 17:33:10.0"/>
<Action id="49504" issue="21320" author="mastersingh24" type="comment" created="2018-08-28 17:49:45.0" updateauthor="mastersingh24" updated="2018-08-28 17:49:45.0"> <body><! CDATA  ~nrohith  So the settings for message size are basically  package scoped|https://github.com/hyperledger/fabric/blob/master/core/comm/config.go#L21  and not client or server instance scoped and there are no actual config settings (e.g. nothing in `core.yaml`).  My thought was that we should add either a struct with both settings or fields for each setting (max send and max recv) to the  ServerConfig|https://github.com/hyperledger/fabric/blob/master/core/comm/config.go#L45  and  ClientConfig|https://github.com/hyperledger/fabric/blob/master/core/comm/config.go#L62  structs and then add corresponding settings to `core.yaml` (similar to how the KeepaliveOptions work).     Alternatively, we could just keep the package scoped variables but would need to add settings for them in `core.yaml` and set them when the peer starts (peer node start).  ></body> </Action>
<Action id="49507" issue="21320" author="mastersingh24" type="comment" body="I&apos;m going to push this out ... still has not been any need for it and we are about to close down the 1.3 cycle" created="2018-08-28 19:26:06.0" updateauthor="mastersingh24" updated="2018-08-28 19:26:06.0"/>
<Action id="49658" issue="21320" author="nrohith" type="comment" created="2018-08-30 22:40:56.0" updateauthor="nrohith" updated="2018-08-30 22:40:56.0"> <body><! CDATA  https://gerrit.hyperledger.org/r/c/26011/   Thanks for the clarification. Please let me know if I misunderstood anything or where I could improve the changes.  Some thoughts:  1) Currently, the max message sizes in `core.yaml` and `orderer.yaml` must be specified in bytes. This is a bit awkward for large sizes like 100MB, which would be written as 104857600. I looked at using the function `viper.GetSizeInBytes`, but I couldn't see a clean way to incorporate this into loading the `orderer.yaml` file. It would have required importing viper into `orderer/server/main.go` and I wasn't sure if it was OK to do that. On the other hand, allowing `core.yaml` to specify sizes in this format is simple.  2) I'm not sure if error handling for invalid (negative) values in the yaml files should be done when loading or inside the comm package. There is code duplication when handling these errors while loading them initially - comm functions could replace invalid values with defaulted values so external packages do not have to know about comm internals. This could be solved by delegating the loading to `viper.GetSizeInBytes`.  ></body> </Action>
<Action id="65827" issue="21320" author="guoger" type="comment" created="2019-11-28 06:33:35.0" updateauthor="guoger" updated="2019-11-28 06:33:35.0"> <body><! CDATA I don't see strong need for this yet, further defer to next release.  meanwhile,  ~nrohith  if you are still interested in contributing, feel free to resubmit via github, and we could continue the discussion there  ></body> </Action>
<Action id="71323" issue="21320" author="JIRAUSER20661" type="comment" created="2021-01-29 14:37:50.0" updateauthor="JIRAUSER20661" updated="2021-01-29 14:37:50.0"> <body><! CDATA I see the issue fixed in 2.1.0, but how?  I don't see any way to make this configurable, and I would like to have more than 100MB payloads.  ></body> </Action>
<Action id="71332" issue="21320" author="denyeart" type="comment" created="2021-02-02 07:09:32.0" updateauthor="denyeart" updated="2021-02-02 07:09:32.0"> <body><! CDATA It is not resolved in v2.1 or any release.  Extremely large transactions are not a good practice in general, hence there has been little desire to increase the max payload size as that may encourage transaction anti-patterns.  ></body> </Action>
<Action id="72012" issue="21320" author="denyeart" type="comment" body="Since keepalive options have been added previously, I&apos;ve updated this task to focus on max message size (DefaultMaxRecvMsgSize and DefaultMaxSendMsgSize)." created="2021-07-30 18:43:14.0" updateauthor="denyeart" updated="2021-07-30 18:43:29.0"/>
<Action id="72055" issue="21320" author="JIRAUSER19830" type="comment" created="2021-08-27 06:33:10.0" updateauthor="JIRAUSER19830" updated="2021-08-27 06:33:10.0"> <body><! CDATA  https://github.com/hyperledger/fabric/pull/2858 |https://github.com/hyperledger/fabric/pull/2858  1.4   https://github.com/hyperledger/fabric/pull/2849  2.2   https://github.com/hyperledger/fabric/pull/2848  2.3   https://github.com/hyperledger/fabric/pull/2805  main  Configurable options to update GRPC max(send/recv) message size. Options added both in peer and orderer node configuration.     ></body> </Action>
