<Action id="26341" issue="18019" author="muralisr" type="comment" body=" ~Nishi  can you add the docker compose and instructions to recreate please ?" created="2017-06-14 21:11:45.0" updateauthor="muralisr" updated="2017-06-14 21:11:45.0"/>
<Action id="26347" issue="18019" author="nishi" type="comment" created="2017-06-14 21:40:06.0" updateauthor="nishi" updated="2017-06-14 22:17:19.0"> <body><! CDATA To reproduce inside vagrant: # Copy attached (.sh) files to folder "fabric/test/regression/daily/chaincodeTests/fabricFeatureChaincodes" # Open testYourChaincode.py from "fabric/test/regression/daily/chaincodeTests/envsetup" #   comment the line +_@unittest.skip("skipping")_+ to unskip chaincode_example04  test by adding  # infront as *#*_@unittest.skip("skipping") to run test the following test_     def test_FAB3796_example04_chaincode_to_chaincode_call_on_occurrence_of_an_event(self) # Open docker-compose.yaml file and update cli container section to use "image: hyperledger/fabric-tools" # cd "fabric/test/regression/daily/chaincodeTests" # run runChaincodes.sh     This should reproduce the failure.  ></body> </Action>
<Action id="26358" issue="18019" author="muralisr" type="comment" created="2017-06-15 03:01:01.0" updateauthor="muralisr" updated="2017-06-15 03:01:01.0"> <body><! CDATA  ~Nishi  I get the following error  ./runChaincodes.sh: line 12: py.test: command not found  I didn't find py.test anywhere. Let me know if I'm missing something.  ></body> </Action>
<Action id="26360" issue="18019" author="muralisr" type="comment" created="2017-06-15 03:11:06.0" updateauthor="muralisr" updated="2017-06-15 03:11:06.0"> <body><! CDATA  ~Nishi  figured I had to do   sudo pip install -U pytest  Perhaps this is there in some instructions ?  ></body> </Action>
<Action id="26368" issue="18019" author="muralisr" type="comment" created="2017-06-15 08:13:07.0" updateauthor="muralisr" updated="2017-06-15 08:13:35.0"> <body><! CDATA  ~Nishi  The *cli* docker service used for installing and instantiating the chaincode creates the image and container for the chaincode. Since we are not packaging everything like we used to (to reduce the chaincode size) it is upto the user to provide import dependencies of the chaincode. In this case, chaincode_example04 imports common/util which further has dependencies on fabric/vendor. As the CLI service does not have those in its image, it must be provided. I did this by mounting those packages from host env  {code:java} volumes: - /var/run/:/host/var/run/ - ../../../../../common:/opt/gopath/src/github.com/hyperledger/fabric/common - ../../../../../vendor:/opt/gopath/src/github.com/hyperledger/fabric/vendor - ../../../../../examples/chaincode/go:/opt/gopath/src/github.com/hyperledger/fabric/examples/chaincode/go - ../../../../../../../decimal/:/opt/gopath/src/github.com/shopspring/decimal/ - ./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto - ./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts1 - ../fabricFeatureChaincodes:/opt/gopath/src/github.com/hyperledger/fabric/test/regression/daily/chaincodeTests/fabricFeatureChaincodes {code}  With that it works as expected. Please close this once confirmed.  ></body> </Action>
<Action id="26393" issue="18019" author="nishi" type="comment" created="2017-06-15 13:24:41.0" updateauthor="nishi" updated="2017-06-15 13:41:13.0"> <body><! CDATA After adding these two lines (as Murali suggested) to already mounted volumes under cli container   - ../../../../../common:/opt/gopath/src/github.com/hyperledger/fabric/common  - ../../../../../vendor:/opt/gopath/src/github.com/hyperledger/fabric/vendor     Could successfully run chaincode_example04 and chaincode_example05 tests inside chaincode tests environment successfully.  fabric commit level:  *0a72230b5d061589a319aaaa0aecd61e7674830c*     ></body> </Action>
<Action id="26396" issue="18019" author="nishi" type="comment" created="2017-06-15 13:56:20.0" updateauthor="nishi" updated="2017-06-15 15:21:27.0"> <body><! CDATA Murali,   How do we expect customers to know this? Is this documented?  Why do we have to mount fabric/common? Is this specific to way 04 and 05 chaincode examples are implemented? Could we have avoided this by providing this via shim?  As a chaincode developer, how would I supply other dependencies that accompany install?  Do these dependencies all exist in vendor package?      Thanks!  -Nishi  ></body> </Action>
<Action id="26405" issue="18019" author="muralisr" type="comment" created="2017-06-15 14:21:24.0" updateauthor="muralisr" updated="2017-06-15 14:54:17.0"> <body><! CDATA  ~Nishi     ~binhn  and I were just discussing documenting this in the ongoing doc work.  Two things to note * CLI is NOT the peer (it is like the SDK) * user has to get the dependencies so install can package it.  For example, if the chaincode imported "github.com/some/external/code", that code has to made available to the CLI so install can package it. The chaincode dev gets the code in his host for testing and now has to make it available in the cli service so it can package and install.  If sh's working directly off the host, then the dependent package is in the GOPATH and nothing more needs to be done (which is why if you ran the test in vagrant or on the host, it'll just work). If she's using a docker cli service, mounting volume is the simplest way to make the code available to the container.   In this test "common/util" is that external dependency (equivalent to the "github.com/some/external/code" example).  Just as you don't vendor if you are using the host or vagrant, you don't have to vendor if you are using the CLI docker service. You just have to make the dependencies available in the GOPATH within the service (which is what we did with the volume mount).  ></body> </Action>
<Action id="26448" issue="18019" author="nishi" type="comment" created="2017-06-15 19:04:32.0" updateauthor="nishi" updated="2017-06-15 19:04:32.0"> <body><! CDATA Would like to review the steps in documentation before marking it as done.  Since customers may run into this situation.  Adding  ~nickgaski      ></body> </Action>
<Action id="26468" issue="18019" author="clayton sims" type="comment" body="Is this in review?  I don&apos;t see change set?" created="2017-06-15 19:48:44.0" updateauthor="clayton sims" updated="2017-06-15 19:48:44.0"/>
<Action id="26473" issue="18019" author="muralisr" type="comment" created="2017-06-15 20:09:24.0" updateauthor="muralisr" updated="2017-06-15 20:10:44.0"> <body><! CDATA  ~Clayton Sims  this is working per design. Developers have to make chaincode dependencies available to the CLI docker container (its already available to the host). This would have been more starkly evident if we had use an external import such as "github.com/some/external/code".  But we can have a CR for docing or add it to ongoing chaincode doc CR https://gerrit.hyperledger.org/r/#/c/9263/.   ~Nishi  Makes sense to have this doced properly. Best with an example even  ~nickgaski .   Can we  change high to medium ?  ></body> </Action>
<Action id="26513" issue="18019" author="mastersingh24" type="comment" created="2017-06-16 12:39:35.0" updateauthor="mastersingh24" updated="2017-06-16 12:39:35.0"> <body><! CDATA While I agree on documenting how packaging works, this actually reveals something worse:  NO EXAMPLE CHAINCODE should be using fabric packages.  Fabric is not an importable library (other than the shim and unfortunately the protos/peer :-( )  IMHO - the use of util should be removed from this example  ></body> </Action>
<Action id="26518" issue="18019" author="muralisr" type="comment" created="2017-06-16 12:53:55.0" updateauthor="muralisr" updated="2017-06-16 12:55:56.0"> <body><! CDATA  ~mastersingh24   Agreed. use of "github.com/hyperledger/fabric/common/util" gives the impression any "fabric" package is available for import directly. Only those in "ccenv" (shim and protos for example) are. We got away with this when we included the world.  (Apologize for repeating this but its worth it... ) This is not a bug or a limitation... the test would have worked if executing directly from the host where these "external" packages were available in the GOPATH. Its just that they have to be made available to the container to pick up for packaging.   ~Nishi  a suggestion... perhaps find a replacement for  "github.com/hyperledger/fabric/common/util" in those chaincodes as part of a future CR ? It'll make the docker compose file a tad simpler.  ></body> </Action>
<Action id="26860" issue="18019" author="binhn" type="comment" body="waiting to be closed – need document on chaincode dependencies accessible from container" created="2017-06-20 15:25:12.0" updateauthor="binhn" updated="2017-06-20 15:25:12.0"/>
<Action id="26890" issue="18019" author="nishi" type="comment" created="2017-06-20 20:01:24.0" updateauthor="nishi" updated="2017-06-20 20:02:19.0"> <body><! CDATA  ~nickgaski  here is what we got for documentation with feedback from  ~muralisr  : {code:java} Chaincode import dependencies =============================  Chaincode has to import three kinds of packages 1 in built packages available via GOROOT (e.g., "fmt", "time") 2 fabric packages needed for the chaincode - github.com/hyperledger/fabric/protos - github.com/hyperledger/fabric/core/chaincode/shim 3 external packages needed by the chaincode  This document deals with 3.  Typically developer should make sure chaincode works in non-docker env before trying it out in docker env.  Non-docker env. development where the fabric is cloned ======================================================  Let us say the chaincode is in GOPATH and imports "github.com/my/dependent/package".  1. do "go get github.com/my/dependent/package" to get the chaincode in the GOPATH 2. test the chaincode (usual install, instantiate, invoke steps)  One could also vendor the package so it appears under "vendor/" in the the chaincode package folder.  Docker compose env. development =============================== The key to docker development is to make the chaincode dependent external package available in the docker service by mounting those packages ("github.com/my/dependent/package") in the docker service so they resolve correctly in the containers GOPATH   {code}       ></body> </Action>
<Action id="27000" issue="18019" author="nickgaski" type="comment" body="this is addressed -  https://gerrit.hyperledger.org/r/#/c/10719/ " created="2017-06-20 22:59:13.0" updateauthor="nickgaski" updated="2017-06-20 22:59:13.0"/>
