<Action id="60442" issue="39611" author="msteiner" type="comment" created="2019-05-28 17:00:59.0" updateauthor="msteiner" updated="2019-05-28 17:00:59.0"> <body><! CDATA Go plugins definitely do have a number of traps and are not easy to work with. From above i'm a bit confused, though, whether the goal is to completely drop plugins or just replace the mechanism the plugins communicate to the peer (e.g., one could imagine replacing go-plugins as mechanism by RPC-based one like for chaincodes).  Can you clarify on this?   Also, any timehorizon of this change, in particular if it is for removal of plugins completly rather replacement of the plugin mechanism?  thanks!  ></body> </Action>
<Action id="61093" issue="39611" author="denyeart" type="comment" body="There is no time horizon yet for the deprecation and removal of Go plugin support (besides BCCSP which is removed in v2.0). Proposals for a replacement to Go plugins are welcome." created="2019-06-18 19:47:09.0" updateauthor="denyeart" updated="2021-12-14 21:19:39.0"/>
<Action id="61169" issue="39611" author="vramaiitkgp" type="comment" created="2019-06-21 09:11:15.0" updateauthor="vramaiitkgp" updated="2019-06-21 09:11:15.0"> <body><! CDATA Is there a rationale for completely eliminating support for custom ESCC and VSCC logic rather than replacing them with mechanisms that are easier to use and maintain?  I'm asking this question because it's always struck me that having custom logic for endorsement at the peer level is a good idea, and necessary given the way Fabric works (the voting model.)  Also, my team's recently discovered a use for custom endorsement logic that cannot be placed anywhere else. Not in chaincode, as chaincode doesn't have visibility into the proposal response structure. Our only alternative, if support for ESCC plugins is removed, is to fork the Fabric code.  Is this topic still up for debate? I discovered this issue just a short while ago.  ></body> </Action>
<Action id="69465" issue="39611" author="robmurgai" type="comment" created="2020-06-15 14:39:16.0" updateauthor="robmurgai" updated="2020-06-15 18:45:26.0"> <body><! CDATA How does removing support for Go Plugins fit with our  recommendation to use Go Plugin|https://hyperledger-fabric.readthedocs.io/en/release-2.0/pluggable_endorsement_and_validation.html  for custom endorsement and validation? {noformat} Pluggable endorsement and validation logic Fabric allows for the implementation and deployment of custom endorsement and validation logic into the peer to be associated with chaincode handling in a pluggable manner. This logic can be either compiled into the peer as built in selectable logic, or compiled and deployed alongside the peer as a Golang plugin. {noformat}    ></body> </Action>
<Action id="69607" issue="39611" author="denyeart" type="comment" created="2020-07-01 19:30:54.0" updateauthor="denyeart" updated="2020-07-01 19:30:54.0"> <body><! CDATA  ~robmurgai  That doc content has been updated to communicate the restrictions that make Go plugin usage challenging at best.   https://hyperledger-fabric.readthedocs.io/en/release-2.2/pluggable_endorsement_and_validation.html#pluggable-endorsement-and-validation-logic  {code:java} Go plugins have a number of practical restrictions that require them to be compiled and linked in the same build environment as the peer. Differences in Go package versions, compiler versions, tags, and even GOPATH values will result in runtime failures when loading or executing the plugin logic.{code}  ></body> </Action>
