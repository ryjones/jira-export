<Issue id="37579" key="FAB-14136" number="14136" project="10002" reporter="yacovm" assignee="yacovm" creator="yacovm" type="10004" summary="expansion of a single node Raft cluster is impossible" priority="3" resolution="10000" status="6" created="2019-02-11 12:42:07.0" updated="2019-03-04 12:11:00.0" resolutiondate="2019-02-18 05:21:46.0" votes="0" watches="2" workflowId="49190"> <description><! CDATA The following facts lead to addition of a node to a single node Raft cluster - impossible:  * We can only add 1 node at a time * A majority of 2 nodes is all of the nodes * When a new node is onboarded - it pulls the system channel and application channels via the Deliver API, prior to starting the etcdraft chain. * When a leader loses the quorum, it rejects Deliver API requests  The following integration test, verifies it.   {code}  			launch := func(o *nwo.Orderer) { 				runner := network.OrdererRunner(o) 				ordererRunners = append(ordererRunners, runner)  				process := ifrit.Invoke(grouper.Member{Name: o.ID(), Runner: runner}) 				Eventually(process.Ready()).Should(BeClosed()) 				ordererProcesses = append(ordererProcesses, process) 			}  			layout := nwo.BasicEtcdRaft() 			network = nwo.New(layout, testDir, client, BasePort(), components) 			orderer := network.Orderer("orderer")  			peer = network.Peer("Org1", "peer1")  			network.GenerateConfigTree() 			network.Bootstrap()  			By("Launching the orderer") 			launch(orderer)  			By("Checking that it elected itself as a leader") 			findLeader(ordererRunners)  			By("Extending the network configuration to add a new orderer") 			orderer2 := &nwo.Orderer{ 				Name:         "orderer2", 				Organization: "OrdererOrg", 			} 			ports := nwo.Ports{} 			for _, portName := range nwo.OrdererPortNames() { 				ports portName  = network.ReservePort() 			} 			network.PortsByOrdererID orderer2.ID()  = ports 			network.Orderers = append(network.Orderers, orderer2) 			network.GenerateOrdererConfig(orderer2) 			extendNetwork(network)  			secondOrdererCertificatePath := filepath.Join(testDir, "crypto", "ordererOrganizations", "example.com", 				"orderers", "orderer2.example.com", "tls", "server.crt") 			secondOrdererCertificate, err := ioutil.ReadFile(secondOrdererCertificatePath) 			Expect(err).NotTo(HaveOccurred())  			By("Adding the second orderer") 			nwo.AddConsenter(network, peer, orderer, "systemchannel", etcdraft.Consenter{ 				ServerTlsCert: secondOrdererCertificate, 				ClientTlsCert: secondOrdererCertificate, 				Host:          "127.0.0.1", 				Port:          uint32(network.OrdererPort(orderer2, nwo.ListenPort)), 			})  			By("Obtaining the last config block from the orderer") 			// Get the last config block of the system channel 			configBlock := nwo.GetConfigBlock(network, peer, orderer, "systemchannel") 			// Plant it in the file system of orderer5, the new node to be onboarded. 			err = ioutil.WriteFile(filepath.Join(testDir, "systemchannel_block.pb"), utils.MarshalOrPanic(configBlock), 0644) 			Expect(err).NotTo(HaveOccurred())  			By("Waiting for the existing orderer to relinquish its leadership") 			Eventually(ordererRunners 0 .Err(), time.Minute, time.Second).Should(gbytes.Say("1 stepped down to follower since quorum is not active"))  			time.Sleep(time.Second * 20) 			By("Launching orderer5") 			launch(orderer2) {code}  ></description> </Issue>
