<Issue id="14820" key="FAB-2259" number="2259" project="10002" reporter="suryalnvs" assignee="kchristidis" creator="suryalnvs" type="10004" summary="Orderer panics when kafka brokers restarted" environment="Lenovo laptop running Linux, vagrant, docker containers for each orderer and kafka-broker" priority="3" resolution="10000" status="6" created="2017-02-15 22:03:49.0" updated="2018-07-20 14:11:39.0" resolutiondate="2017-02-28 16:13:04.0" votes="0" watches="3" workflowId="37456"> <description><! CDATA Orderer is generating panics when kafka brokers are restarted while sending multiple transactions due to which the orderer is getting restarted.  Tested on Feb 15 2017 using: commit: ad986bbf000ff34ebeb8e142cfcd747a01f12617 commit date: Wed Feb 15 15:02:34 2017 +0000  1. Using 1 orderer with 3 kafka brokers, 1 peer and 1 ca 2. cd $GOPATH/src/github.com/hyperledger/fabric/orderer/sampleclients/broadcast_timestamp 3. ./broadcast_timestamp -server 127.0.0.1:5005 -messages 100000 4. docker stop kafka0 kafka1 kafka2; sleep 5; docker start kafka0 kafka1 kafka2 5. After the restart of kafka brokers, a panic happens and orderer restarts and can be seen in orderer logs   panic: runtime error: invalid memory address or nil pointer dereference  signal SIGSEGV: segmentation violation code=0x1 addr=0x28 pc=0x534dfe   goroutine 70  running : panic(0xa40840, 0xc42000c050) 	/opt/go/src/runtime/panic.go:500 +0x1a1 github.com/hyperledger/fabric/orderer/kafka.(*chainImpl).loop(0xc420072090) 	/opt/gopath/src/github.com/hyperledger/fabric/orderer/kafka/orderer.go:233 +0x1fe created by github.com/hyperledger/fabric/orderer/kafka.(*chainImpl).Start 	/opt/gopath/src/github.com/hyperledger/fabric/orderer/kafka/orderer.go:186 +0x567  Expected Result: Even after the restart of kafka brokers, orderers needs to work as usual without getting restarted.  Actual Result: Orderer is getting restarted after the restart of kafka brokers while sending transactions   Here is the output of "docker ps"  which shows the restart of kafka brokers and orderer.  vagrant@hyperledger-devenv:v0.2.2-aeb3f75:/opt/gopath/src/github.com/hyperledger/fabric/orderer/sample_clients/otd$ docker ps CONTAINER ID        IMAGE                           COMMAND                  CREATED             STATUS              PORTS                              NAMES 4d6b096f090d        hyperledger/fabric-peer         "peer node start"        4 minutes ago      Up 4 minutes       0.0.0.0:7061->7061/tcp             peer0 3cafcda235e5        hyperledger/fabric-orderer      "orderer"                4 minutes ago      Up 3 minutes       0.0.0.0:5005->5005/tcp, 7050/tcp   orderer0 d2eee76ca8a7        hyperledger/fabric-kafka        "/docker-entrypoint.s"   4 minutes ago      Up 3 minutes       9092-9093/tcp                      kafka2 76800afdd6c5        hyperledger/fabric-kafka        "/docker-entrypoint.s"   4 minutes ago      Up 3 minutes       9092-9093/tcp                      kafka0 1697251266d1        hyperledger/fabric-kafka        "/docker-entrypoint.s"   4 minutes ago      Up 3 minutes       9092-9093/tcp                      kafka1 171fcb0d3b75        rameshthoomu/fabric-ca-x86_64   "sh -c 'fabric-ca ser"   4 minutes ago      Up 4 minutes       0.0.0.0:7054->7054/tcp             ca0 95ac7ff324bb        hyperledger/fabric-zookeeper    "/docker-entrypoint.s"   4 minutes ago      Up 4 minutes       2181/tcp, 2888/tcp, 3888/tcp       zookeeper  ======================================================================== Below are the successful cases: ======================================================================== 1. When any one of the kafka brokers are restarted, the functioning of the orderer is as expected 2. When any  two of the three kafka brokers are restarted, the functioning of the orderer is as expected.      ></description> </Issue>
