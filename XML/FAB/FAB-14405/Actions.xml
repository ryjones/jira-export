<Action id="58097" issue="38071" author="joe-alewine" type="comment" created="2019-03-12 19:21:16.0" updateauthor="joe-alewine" updated="2019-03-12 19:23:43.0"> <body><! CDATA WIP text:     *Setting up an ordering node*  In this topic, we'll describe the process for bootstrapping an ordering node. If you want more information about the different ordering service implementations and their relative strengths and weaknesses, check out our  conceptual documentation about ordering (../orderer/ordering_service.html).  Broadly, this topic will involve a few interrelated steps: # Compiling the binary # Creating the organization your ordering node belongs to (if you have not already done so) # Configuring your node (using `orderer.yaml`) # Creating the genesis block for the orderer system channel # Bootstrapping the orderer  *Compile the binary*  This topic assumes you have already cloned Hyperledger Fabric. If you have not, check out our documentation on  Prerequisites (prereqs.html). Then, navigate to the  Hyperledger Fabric github repo ( https://github.com/hyperledger/fabric ) and clone it.  After you have cloned Fabric, navigate to the  Ordering Service README ( https://github.com/hyperledger/fabric/tree/master/orderer/#experimenting-with-the-orderer-service ) and follow the instructions to `go build`.  When this process has completed, the orderer binary has been compiled and is ready to be configured and bootstrapped.  *Create an organization definition*  Like peers, all orderers must belong to an organization that must be created before the orderer itself is created. This organization has a definition encapsulated by a  Membership Service Provider (./membership/membership.html) (MSP) that is created by a Certificate Authority (CA) dedicated to creating the certificates and MSP for the organization.  For information about creating a CA and using it to create users and an MSP, check out the  Fabric CA user's guide ( https://hyperledger-fabric-ca.readthedocs.io/en/latest/users-guide.html ).  *Configure your node*  The configuration of the orderer is handled through a `yaml` filed called `orderer.yaml`. The `FABRIC_CFG_PATH` environment variable is used to point to an `orderer.yaml` file you've configured, which will extract a series of files and certificates on your file system.  To look at a sample `orderer.yaml`, check out the  `fabric-samples` github repo ( https://github.com/hyperledger/fabric/blob/release-1.4/sampleconfig/orderer.yaml ), which **should be read and studied closely** before proceeding. Note in particular a few values: * `RootCAs` — this certificate path and name will need to match those of your root CA certificate in your GoPath.  * `GenesisFile` — this is the name of the genesis block you will generate for this ordering service.  * `LocalMSPID` — this is the name of the MSP, generated by your CA, of your orderer organization. This is where your orderer organization admins will be listed.  * `# TLS enabled`, `Enabled: false`. This is where you specify whether you want to  enable TLS (enable_tls.html). If you set this value to `true`, you will have to specify the locations of the relevant TLS certificates. Note that this is mandatory for Raft nodes.  If you are deploying this node as part of a cluster (for example, as part of a cluster of Raft nodes), make note of the `Cluster` and `Consensus` sections.  If you plan to deploy Kafka, you will need to complete `Kafka` section.  *Generate the genesis block of the orderer*  The first block of a newly created channel is known as a "genesis block". If this genesis block is being created as part of the creation of a **new network** (in other words, if the orderer being created will not be joined to an existing cluster of orderers), then this genesis block will be the first block of the "orderer system channel" (also known as the "ordering system channel"), a special channel managed by the orderer admin which includes a list of the organizations permitted to create channels. *The genesis block of the orderer system channel is special: it must be created and included in the configuration of the node before the node can be started.*  To learn how to create a genesis block using the `configtxgen` tool, check out  Channel Configuration (configtx) (configtx.html).  Boostrap the ordering node  Once you have built the images, created the MSP, configured your `orderer.yaml`, and created the genesis block, you're ready to start your orderer using a command that will look similar to:  ``` docker-compose -f docker-compose-cli.yaml up -d --no-deps orderer.example.com ```  With the address of your orderer replacing `orderer.example.com`.  ></body> </Action>
<Action id="58098" issue="38071" author="joe-alewine" type="comment" created="2019-03-12 19:24:57.0" updateauthor="joe-alewine" updated="2019-03-12 19:24:57.0"> <body><! CDATA  ~scottz     ~suryalnvs    ~dongming   Appreciate any comments or additions you guys suggest.  ></body> </Action>
<Action id="58274" issue="38071" author="suryalnvs" type="comment" body="Is this document regarding orderer with raft as consensus type?" created="2019-03-18 20:55:40.0" updateauthor="suryalnvs" updated="2019-03-18 20:55:40.0"/>
<Action id="58275" issue="38071" author="joe-alewine" type="comment" body="No, it&apos;s meant to be implementation agnostic. In other words, it&apos;s the process for standing up an orderer node regardless whether it&apos;s a Solo node, a Raft node, or a Kafka node." created="2019-03-18 21:00:13.0" updateauthor="joe-alewine" updated="2019-03-18 21:00:13.0"/>
<Action id="58276" issue="38071" author="joe-alewine" type="comment" body="That being said, there are fields you need to specify depending on the implementation, so I did try to at least mention what some of them are, though this doc isn&apos;t meant to detail those fields or what you should enter (the config docs themselves are meant to do that)." created="2019-03-18 21:01:07.0" updateauthor="joe-alewine" updated="2019-03-18 21:01:07.0"/>
<Action id="58314" issue="38071" author="scottz" type="comment" created="2019-03-19 19:40:02.0" updateauthor="scottz" updated="2019-03-19 19:40:02.0"> <body><! CDATA The section "*Generate the genesis block of the orderer"* ** should be renamed: "Creating a new network". Inside here you describe generating the first config block (ie. the genesis block) for standing up all the initially defined orderers in the network configuration.  Then add another section "*Adding a new orderer to an existing network*" where you describe how an orderer admin can retrieve config block, edit it, and submit it as a config update of the orderer system channel (with appropriate signatures) to add a new orderer org, and also add the new orderer, and also then fetch the latest config block and use it with orderer.yaml to stand up the new orderer.  Of course, for Raft, it is more complicated because we would need to explain adding the orderer to the appropriate application channel too. But you can just provide a mention and a link to another doc that explains it for Raft.  (Sorry, I don't yet know of any doc that already exists that you could use.)  In addition, it would probably be nice to see us provide somewhere a similar description of removing an orderer and an orderer organization. Do we have similar documentation already for adding peers and orgs?  ></body> </Action>
<Action id="58316" issue="38071" author="joe-alewine" type="comment" created="2019-03-19 20:04:30.0" updateauthor="joe-alewine" updated="2019-03-19 20:04:30.0"> <body><! CDATA Hey, Scott. Thanks for these comments!  I think the material you're suggesting in your second paragraph would be better added to the "Configure Raft" doc, as system channel configuration gets out of the scope of what's involved in standing up a node itself (imo at least). We can give a little more context to the "reconfiguration" sections of the Configure Raft doc, with links out to docs where we discuss channel reconfiguration, for a look at that process.  We don't have anything currently in plan for removing an orderer or orderer org.  ></body> </Action>
<Action id="58321" issue="38071" author="joe-alewine" type="comment" body="https://gerrit.hyperledger.org/r/c/30242/" created="2019-03-19 21:58:33.0" updateauthor="joe-alewine" updated="2019-03-19 21:58:33.0"/>
