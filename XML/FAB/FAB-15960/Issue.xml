<Issue id="41215" key="FAB-15960" number="15960" project="10002" reporter="dhuseby" assignee="angelo.decaro" creator="dhuseby" type="10004" summary="amcl.RAND not receiving enough entropy from idemix.GetRand" priority="3" resolution="10203" status="6" created="2019-07-15 18:22:07.0" updated="2020-04-18 15:50:20.0" resolutiondate="2020-04-18 15:50:20.0" votes="0" watches="5" workflowId="54217" security="10000"> <description><! CDATA From Graham Shaw as part of the 1.4.x and 2.0 security audit:  Not that it would have mattered greatly in this case, because I believe it is some considerable way from bring exploitable, however there is a discrepancy between the amount of entropy which amcl.RAND says that it needs, and the amount which idemix.GetRand supplies:    * amcl.RAND says “initialise from at least 128 byte string of raw random entropy” * idemix.GetRand supplies a string which is 32 bytes long     I’ll provide a full analysis in the final report, but I’m confident that by itself this issue is not going to result in an exploit. However it is an unsatisfactory state of affairs, because idemix.GetRand is relying on amcl.RAND behaving securely outside the envelope promised by the documentation. It also erodes what may have been intended to provide a margin of safety.     Some of the uses of idemix.GetRand are in test code, however the use in idemixca.go appears not to be. This issue applies to both Fabric-1.4 and Fabric-2.0.     Recommended action would be one of the following:    # Supply amcl.RAND with a 128-byte seed, as specified in the relevant header comment. (This would be the simplest and safest course of action, unless there is a good reason not to.) # Arrange for amcl.RAND to be updated with an amendment to this requirement. # Add commentary to idemix.RAND containing an analysis which explains why 32 bytes is considered safe.  ></description> </Issue>
