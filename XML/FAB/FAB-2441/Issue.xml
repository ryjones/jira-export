<Issue id="15004" key="FAB-2441" number="2441" project="10002" reporter="aleksandar.likic@gmail.com" creator="aleksandar.likic@gmail.com" type="10000" summary="Self-Signed TCerts" priority="3" resolution="10000" status="6" created="2017-02-23 03:06:44.0" updated="2018-07-20 19:08:48.0" resolutiondate="2018-03-19 20:02:09.0" votes="0" watches="10" workflowId="37577"> <description><! CDATA Ability for the Client SDK to generate self-signed TCerts.  +*Motivation*+  * Remove need for fetching T-Cert batches from a SPOF Fabric-CA  +*Heigh Level Flow*+  * Client SDK obtains ECert from a CA recognized by the ledger. * Client SDK derives a key from the ECert key. * Client SDK signs transaction with derived key. * Client SDK sends transaction to endorser, along with proof of derivation (ECert and derivation data) as transient. * Endorser runs the appropriate Client Certificate Validator (FAB-2447) * After endorsement the Client uses the same method to broadcast the transaction to the Ordering Service. * The Ordering Service validates the caller the same way the Endorser did, by calling the appropriate Client Certificate Validator.  +*Changes to the Client SDK*+  The application should be able to configure Client SDK to sign transactions with derived keys instead of pulling batches of TCerts from a Fabric-CA.  +*Changes to the Endorser*+  * FAB-2447 * Client Certificate Validator implementation that supports this use case  +*Changes to the Ordering Service*+  * FAB-2447 * Client Certificate Validator implementation that supports this use case  +*Changes to the Committer*+  * FAB-2447 * Client Certificate Validator implementation that supports this use case   ></description> </Issue>
