<Action id="58237" issue="38303" author="frbrkoala" type="comment" created="2019-03-18 07:20:30.0" updateauthor="frbrkoala" updated="2019-03-18 07:20:30.0"> <body><! CDATA Some more requirements based on discussions last week: * Role-based access control to transactions and assets. Ideally similar to the functions that were available in Composer. * Sample code with token lifecycle features. This can be Account-based for now and converted to fabtoken later once it will be available. * API to create MVCC read conflict tolerant data structures. See more here:  https://github.com/hyperledger/fabric-samples/tree/release/high-throughput Â  * Caching for WorldState queries/updates. Sometimes when the algorithm requires to update an asset multiple times across many functions, it's handy to keep it a temporary map object. This can be built into the API that is manipulating the contract object. * JSON documents parsing (for Golang-based implementation) and validation. In our current project we are implementing input data with JSON schemas and open source libraries that already exist for that purpose. * Include in samples examples for writing unit testing and supporting TDD (test driven development).  ></body> </Action>
<Action id="67565" issue="38303" author="sykesm" type="comment" body="Stale" created="2020-01-22 22:33:36.0" updateauthor="sykesm" updated="2020-01-22 22:33:36.0"/>
