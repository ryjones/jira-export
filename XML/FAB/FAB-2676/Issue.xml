<Issue id="15243" key="FAB-2676" number="2676" project="10002" reporter="denyeart" assignee="manish-sethi" creator="denyeart" type="10001" summary="Need to atomically createLedger and commit genesis block" priority="1" resolution="10000" status="6" created="2017-03-07 13:24:09.0" updated="2018-07-20 18:56:14.0" resolutiondate="2017-04-25 14:02:29.0" votes="0" watches="3" workflowId="37719"> <description><! CDATA Currently while peer joins the channel it accepts the configuration/genesis block. Afterwards peers use this block to create the ledger and initialize the entire infrastructure, the actions of ledger creating and block commit are separated.   {code} // CreateChainFromBlock creates a new chain from config block func CreateChainFromBlock(cb *common.Block) error { 	cid, err := utils.GetChainIDFromBlock(cb) 	if err != nil { 		return err 	} 	var ledger ledger.PeerLedger 	if ledger, err = createLedger(cid); err != nil { 		return err 	}  	if err := ledger.Commit(cb); err != nil { 		peerLogger.Errorf("Unable to get genesis block committed into the ledger, chainID %v", cid) 		return err 	}  	return createChain(cid, ledger, cb) } {code}    createLedger() should accept the genesis block, so that the ledger creation and commit of genesis block can atomically succeed or fail.  A ledger should only be created if the corresponding genesis block is committed.    ></description> </Issue>
