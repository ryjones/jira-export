<Issue id="40544" key="FAB-15700" number="15700" project="10002" reporter="yacovm" assignee="yacovm" creator="yacovm" type="10001" summary="Recover Raft cluster with expired certs" priority="3" resolution="10000" status="6" created="2019-06-12 20:21:42.0" updated="2020-12-19 12:38:02.0" resolutiondate="2019-08-05 18:18:18.0" votes="0" watches="5" workflowId="53493"> <description><! CDATA *Background*: Raft clusters use *TLS* pinning to authenticate nodes. *TLS* uses standard *x509* validation for certificates which dictates a certificate is only valid between its *NotBefore* and *NotAfter* attributes.  Thus, the operators need to periodically change *TLS* certificates by: * Issuing config updates to all channels that change the *TLS* certificates of the nodes. * Restarting the nodes with the new *TLS* certificates.  *Disclaimer*: to be clear, this is done one at a time, and this JIRA shouldn't be used as a guide to administer a Raft cluster.  *Problem*: When half or more of the *TLS* certificates of the Raft cluster members expire, it is no longer possible to do config updates due to loss of quorum, so the Blockchain is then stuck forever.  *Observation*: The Golang *TLS* config has a pluggable *time.Time* function that if set (not nil) it overrides the real time used when verifying *TLS* certificates at time of *TLS* handshake. {code:java} 	// Time returns the current time as the number of seconds since the epoch. 	// If Time is nil, *TLS* uses time.Now. 	Time func() time.Time {code} Relevant snippet from the code: {code:java} 			opts := x509.VerifyOptions{ 				Roots:         c.config.RootCAs,  // ------------------------------------------------------------------------                       				CurrentTime:   c.config.time()   // ------------------------------------------------------------------------ 				DNSName:       c.config.ServerName, 				Intermediates: x509.NewCertPool(), 			}  			for i, cert := range certs { 				if i == 0 { 					continue 				} 				opts.Intermediates.AddCert(cert) 			} 			c.verifiedChains, err = certs 0 .Verify(opts) {code}    *Proposal*: To add a config option in the orderer config (it will be hidden but documented) that essentially "brings back time" *T* hours to the past. With this config option, if a network has a failed Raft cluster with expired certs, the administrators can then agree to manually override the time of the *TLS* handshakes (just for the consensus listeners) and this would buy them a configurable amount of time to recover the cluster by doing config updates and rotate *TLS* certificates.   So, the config option to bring back the cluster 1 day would be something like "General.Cluster.TLSHandshakeTimeShift", e.g. in orderer config override:  ORDERER_GENERAL_CLUSTER_TLSHANDSHAKETIMESHIFT="24H"      ~jyellick   ~sykesm   ~mastersingh24   ~C0rWin   ~denyeart   ~guoger  what do you think?  ></description> </Issue>
