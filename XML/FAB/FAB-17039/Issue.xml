<Issue id="43242" key="FAB-17039" number="17039" project="10002" reporter="ryanmathison" assignee="wenjian" creator="ryanmathison" type="10004" summary="Inconsistencies in Log for &quot;No Collection Config ... &quot;" priority="4" resolution="10000" status="6" created="2019-11-08 19:57:09.0" updated="2020-12-18 16:54:49.0" resolutiondate="2020-12-10 17:35:27.0" votes="0" watches="2" workflowId="56348"> <description><! CDATA When we were running a test where peers were brought up and down randomly, we would see the following error off and on  _2019-11-07 19:57:12.140 UTC  gossip.privdata  fromTransientStore -> ERRO 6f2 No collection config was found for chaincode mycc collection name mycc txID_  Now this coupled with logs saying that a block was committed without made us very concerned that somehow we were losing private data.  After days of looking through the source code for the hlf peer and working to reproduce I was able to determine that in fact no private data had been lost and it was just the order in which things went down. However, I have some concerns with how the error is being logged  1. The collection name is not being logged.  In the fromTransientStore function of dataretriever.go we see  _if !found {_    _logger.Error("No collection config was found for chaincode", dig.Namespace, "collection   name",_ _dig.Namespace, "txID", dig.TxId)_    _continue_ _}_  What we see is that the dog.Namespace is getting reported for the collection name instead of dig.Collection  2. Is Error really the correct level for this log? I feel it is more of a warning  What I found is that this error occurs when you have an non-anchor peer that is far enough behind the ledger that it using the pull gossip protocol and it tries to pull blocks from an anchor peer that is even farther behind the ledger than the non-anchor peer.  The peers with the private data are either down or not able to be contacted by either peer.  What happens is the anchor peer gets the request and it sees that the requested block is > than its current ledger height so it goes to check its transient store.  It doesn't have any of the transient data so it logs the error.  Once the peers with the private data come up again everything recovers and the error goes away.   I just wonder if it is really valid for this to be logged as an error when all it means is that the peer has never had the private data and not that it somehow lost it.  3. Why is the transaction id null?  This log is supposed to contain the transaction id that we are fetching the private data, however the log we got had no transaction id. We also get this log  _2019-11-07 19:57:12.140 UTC  transientstore  GetTxPvtRWSetByTxid -> DEBU 6f3 Getting private data from transient store for transaction_  Any ideas as to why there is no transaction id?           ></description> </Issue>
