<Issue id="13763" key="FAB-1356" number="1356" project="10002" reporter="c0rwin" creator="c0rwin" type="10001" summary="Refactor gossip and gossip service external API" priority="3" resolution="10001" status="6" created="2016-12-11 23:09:42.0" updated="2020-01-22 18:44:36.0" resolutiondate="2020-01-22 18:44:36.0" votes="0" watches="2" workflowId="42883"> <description><! CDATA Currently gossip interface is defined as follows  {code}  // Gossip is the interface of the gossip component type Gossip interface {  	// GetPeers returns a mapping of endpoint -->   discovery.NetworkMember 	GetPeers()   discovery.NetworkMember  	// UpdateMetadata updates the self metadata of the discovery layer 	UpdateMetadata(  byte)  	// Gossip sends a message to other peers to the network 	Gossip(msg *proto.GossipMessage)  	// Accept returns a channel that outputs messages from other peers 	Accept(common.MessageAcceptor) <-chan *proto.GossipMessage  	// Stop stops the gossip component 	Stop() } {code}  Whereas functions  {code} 	// GetPeers returns a mapping of endpoint -->   discovery.NetworkMember 	GetPeers()   discovery.NetworkMember  	// UpdateMetadata updates the self metadata of the discovery layer 	UpdateMetadata(  byte) {code}  Doesn't really relate to the message dissemination, therefore current gossip interface should be abstracted out in two separate interfaces:  1. Broadcast/Gossiping taking care of message delivery and reception.  2. Discovery/Metadata managing current gossip view of available nodes/peers.  Moreover GossipService interface currently aligned with Gossip above and serves as adaptor for initialized gossip instance and encapsulates also state management. Because one of the goals for GossipService interface is to expose capabilities of disseminating messages externally, the interface which takes care of messaging and communication should be refactored to decouple the API from protobuf defined messages.   {code} // GossipService encapsulates gossip and state capabilities into single interface type GossipService interface { 	gossip.Gossip  	// JoinChannel joins new chain given the configuration block and initialized committer service 	JoinChannel(committer committer.Committer, block *common.Block) error 	// GetBlock returns block for given chain 	GetBlock(chainID string, index uint64) *common.Block 	// AddPayload appends message payload to for given chain 	AddPayload(chainID string, payload *proto.Payload) error } {code}  and signature of Gossip method is  {code} Gossip(msg *proto.GossipMessage) {code}  Now it should be refactored to generalize usage of gossip API and not to bound it with proto.GossipMessage.  ></description> </Issue>
