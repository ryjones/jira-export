<Action id="65709" issue="41303" author="manish-sethi" type="comment" created="2019-11-21 20:46:56.0" updateauthor="manish-sethi" updated="2019-11-21 20:46:56.0"> <body><! CDATA Rollback is expected to be much inefficient if someone had to rollback to all the way back to near genesis block which is the case of these experimental numbers.  This is because, unlike reset, rollback operation causes reading of blocks from disk that are being rolledback and hence causes a significant i/o as compared to reset but compensates this on a later recommitting stage when peer have to re-pull only blocks that are rolledback. However, on the other hand, reset is very efficient in resetting but needs to pull all the blocks again during re-committing phase. In this experiment, worst side of both seem to happen as the ledger was rolledback from 29k blocks to almost near to the genesis block. In this kind of scenario in real life, it would be advisable to use reset than to rollback. Rollback is meant to be used when someone have to rollback a handful of blocks.   ~denyeart  - as you are planning to do the docs for rollback/reset, you may like to mention this significant difference and a high level guidance for selecting one over the other.  About re-committing, since, rebuilding in this scenario (re-committing from block 10 onward) is pretty much equivalent to new peer joining scenario, I don't think that this could be related to rollback in any manner. The numbers mentioned roughly translates to 6 blocks/sec. If we want to investigate anything here, best would be to first measure the time taken by a new peer to sync-up and be assure that that is significant lesser time.  ></body> </Action>
<Action id="65767" issue="41303" author="denyeart" type="comment" created="2019-11-25 14:26:34.0" updateauthor="denyeart" updated="2019-11-25 14:26:34.0"> <body><! CDATA I will handle the doc updates.  Would be good to understand exactly where the time is taken though  ~suryalnvs   ~dongming   ></body> </Action>
<Action id="65770" issue="41303" author="senthil1" type="comment" created="2019-11-25 15:13:13.0" updateauthor="senthil1" updated="2019-11-25 15:13:13.0"> <body><! CDATA  ~manish-sethi .  ~denyeart   6 block per second for a block size of 500 transactions make sense.   We did experiment by adding a new peer. Similar to rollback, it has to receive blocks and commit them one by one. As this new peer was not doing endorsements, the new peer was able to commit 3000 TX per second (6 blocks x 500 TX) in our study. With endorsement, the throughput dropped to 1800 tps.  The performance of peer rollback command needs to be calculated by prefixing time command as follows: `time peer rollback XXX` — this would give the exact performance of peer rollback.   ></body> </Action>
