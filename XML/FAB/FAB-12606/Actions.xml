<Action id="43999" issue="30010" author="harrisob@us.ibm.com" type="comment" body="This would help separate the two concepts ... the users of chaincode, who just what to get it running on their system and the creators who care about the programming model and what it takes to get it installed on a system." created="2018-05-07 16:49:58.0" updateauthor="harrisob@us.ibm.com" updated="2018-05-07 16:49:58.0"/>
<Action id="52522" issue="30010" author="sstone1" type="comment" created="2018-10-22 14:22:51.0" updateauthor="sstone1" updated="2018-10-22 14:22:51.0"> <body><! CDATA  ~varadatibm  whilst the API looks like you need to send in a chaincode type, you don't need to - and it works just fine if you just specify the name and the version, for example this is how we create the instantiate transaction:  const instantiateRequest: Client.ChaincodeInstantiateUpgradeRequest = { chaincodeId: name, chaincodeVersion: version, txId: transactionId, fcn: fcn, args: args };  As far as I know, the instantiate transaction uses the language that was specified in the install request.  Have you tried not specifying a chaincode type in the instantiate request and instantiating node chaincode?  ></body> </Action>
<Action id="52639" issue="30010" author="dshuffma" type="comment" created="2018-10-25 15:02:40.0" updateauthor="dshuffma" updated="2018-10-25 15:02:40.0"> <body><! CDATA  ~sstone1  leaving chaincode type to null in the instantiate proposal will lead to this error:  {code:java} "chaincode error (status: 500, message: Unknown chaincodeType: UNDEFINED)" {code}  If you are using the fabric-sdk you are probably getting the default of "golang". SDK screen shot below: !screenshot-1.png|thumbnail!   ie: the chaincode type is required in the so called "ChaincodeDeploymentSpec"  ></body> </Action>
<Action id="52640" issue="30010" author="sstone1" type="comment" body=" ~dshuffma  we are using the SDK, so it must be defaulting to &quot;golang&quot;... but it still works and spins up Node.js chaincode ;-)" created="2018-10-25 15:10:54.0" updateauthor="sstone1" updated="2018-10-25 15:10:54.0"/>
<Action id="52641" issue="30010" author="sstone1" type="comment" created="2018-10-25 15:19:42.0" updateauthor="sstone1" updated="2018-10-25 15:20:45.0"> <body><! CDATA Bouncing this to the Fabric queue; it's not an SDK problem. It seems like:  1) The instantiate request to the LSCC requires a valid chaincode type; as above, UNDEFINED doesn't work. 2) The LSCC does not actually *seem* to use the chaincode type in determining what to do; as above, a value of GOLANG still successfully launches a NODE chaincode container if "node" was specified during chaincode install.  Someone needs to validate whether or not the instantiate request to the LSCC actually needs a chaincode type? If not, can it be removed from the protos? If so, why can't it just use the chaincode type specified at chaincode package/install time?    ></body> </Action>
<Action id="52642" issue="30010" author="sstone1" type="comment" body=" ~jyellick   ~sykesm  is this something you guys could take a look at please?" created="2018-10-25 15:20:48.0" updateauthor="sstone1" updated="2018-10-25 15:20:48.0"/>
<Action id="52648" issue="30010" author="dshuffma" type="comment" body=" ~sstone1  aha, good to know.  mystery almost solved." created="2018-10-25 15:48:17.0" updateauthor="dshuffma" updated="2018-10-25 15:48:17.0"/>
<Action id="53967" issue="30010" author="denyeart" type="comment" body=" ~muralisr  Do you have some historical context on this one?" created="2018-11-28 21:56:40.0" updateauthor="denyeart" updated="2018-11-28 21:56:40.0"/>
<Action id="54130" issue="30010" author="mastersingh24" type="comment" created="2018-12-01 12:21:04.0" updateauthor="mastersingh24" updated="2018-12-01 12:21:04.0"> <body><! CDATA These are all leftovers from the old style of doing things pre v1.0.0 and we simply kept most of the proto structures intact when switching to the install / instantiate model.  This is definitely not a bug and I don't think we should do anything given we are *finally* going to update chaincode lifecycle *hopefully* in v2.0.0.  ></body> </Action>
<Action id="54134" issue="30010" author="mastersingh24" type="comment" created="2018-12-01 16:02:42.0" updateauthor="mastersingh24" updated="2018-12-01 16:07:49.0"> <body><! CDATA  ~sstone1   ~dshuffma   - While instantiating with type Go works for Node, if you actually instantiated with Node and had Go it would fail I believe ... see https://github.com/hyperledger/fabric/blob/master/core/scc/lscc/lscc.go#L866     ></body> </Action>
<Action id="54141" issue="30010" author="mastersingh24" type="comment" body="https://gerrit.hyperledger.org/r/27864  should handle this" created="2018-12-01 21:06:27.0" updateauthor="mastersingh24" updated="2018-12-01 21:06:27.0"/>
