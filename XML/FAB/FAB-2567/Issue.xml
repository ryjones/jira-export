<Issue id="15134" key="FAB-2567" number="2567" project="10002" reporter="aleksandar.likic@gmail.com" creator="aleksandar.likic@gmail.com" type="10001" summary="Light Chaincode Event" priority="3" resolution="10001" status="6" created="2017-03-01 16:04:26.0" updated="2020-01-22 18:53:46.0" resolutiondate="2020-01-22 18:53:46.0" votes="0" watches="1" workflowId="35085"> <description><! CDATA Ability to send a chaincode event to client without committing a transaction.  +*Motivation*+  At the moment, the Fabric doesn't have a mechanism for delivery of an asynchronous event to a client in cases when the client doesn't know in advance which peer will deliver the event. For example, if the client requests a global query (FAB-1153, FAB-2440), it doesn't know which peer will perform the service. The result of the global query needs to be delivered somehow to the client. The solution proposed here uses the existing chaincode event mechanism in Fabric to achieve this.  Currently, to raise a chaincode event, one needs to commit a transaction to a ledger. Sometimes the overhead of the transaction commit is not desirable. This is especially true for queries, where there is no change to the system state. This solution doesn't require a transaction commit.  +*API*+  * A client uses Client SDK to register as a chaincode event listener with a peer or a set of peers on a channel dedicated to delivering such events. When registering, the client expresses its interest in an event name. * User CC that wants to deliver an event to a client (that is unknown to it) calls the Light Chaincode Event System Chaincode (LCESCC) on a peer on the messaging channel (where the client is listening on) to create a new chaincode event and deliver it to the client. Passing the parameters required for the User CC to call the LCESCC, like the peers where the the client is listening on and the event name, is left to the application.  +*Security*+  Messages delivered by peers - service providers to clients requesting the service should be private between the service provider and the client. Some of the security measures that should be considered are: * Prevent a client to register to listen to all chaincode events in the system. It should be possible to configure the peer to raise exception if a client attempts to register without expressing its interest in a non-empty event name. * Data encryption at the application level.  +*Changes to the Client SDK*+  Client SDK has to allow the client to register as a listener to a named chaincode event. The Client SDK Specification currently doesn't regulate event handling. For example, Node.JS client SDK currently allows the client to listen only to block events.  +*Changes to Fabric Core*+  Implement a configuration option to prevent a client to register for listening of all chaincode events. When this new feature is turned on, a client would have to express interest in a non-empty event name.   ></description> </Issue>
