<Issue id="44668" key="FAB-17667" number="17667" project="10002" reporter="senthil1" assignee="senthil1" creator="senthil1" type="10003" summary="move couchdb util package to statecouchdb package" priority="3" resolution="10000" status="6" created="2020-03-26 16:29:03.0" updated="2020-04-16 08:30:22.0" resolutiondate="2020-04-16 08:30:22.0" votes="0" watches="1" workflowId="58586" archived="N"> <description><! CDATA We have a  CouchDB util|https://github.com/hyperledger/fabric/tree/master/core/ledger/util/couchdb  package that exposes API to read from and write to CouchDB. This package is used only by the  statecouchdb|https://github.com/hyperledger/fabric/tree/master/core/ledger/kvledger/txmgmt/statedb/statecouchdb  and   the tests package|https://github.com/hyperledger/fabric/tree/master/core/ledger/kvledger/tests  (i.e., ledger level integration test).  In general, a util package is justified only when an API needs to be used by so many other packages. For e.g., if we have 10 packages and each of them need a common API, it is not good to duplicate the API code and instead create a separate util package. One such example can be found in the  volume folder in the Kubernetes repo|https://github.com/kubernetes/kubernetes/tree/master/pkg/volume  â€“ It can be seen that Kubernetes supports 26 different volume types and hence  a util package|https://github.com/kubernetes/kubernetes/tree/master/pkg/volume/util  to hold common APIs are justified. However, in our case, it is not justified to have a separate util package to facilitate CouchDB access.  Hence, we move all files in the CouchDB util package to the statecouchdb package itself. Note that there is a lot of opportunities to refactor couchdb util package but we would do it in a separate JIRA.  ></description> </Issue>
