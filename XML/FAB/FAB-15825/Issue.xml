<Issue id="40813" key="FAB-15825" number="15825" project="10002" reporter="jiwanglai" creator="jiwanglai" type="10004" summary="Orderer can&apos;t connect to Kafka Broker with Kafka.TLS enabled" priority="1" resolution="10000" status="6" created="2019-06-27 10:43:15.0" updated="2019-07-17 14:35:37.0" resolutiondate="2019-07-01 13:48:48.0" votes="0" watches="2" workflowId="53769"> <description><! CDATA When upgrading from 1.4.0 to 1.4.1, new version of orderer can't connect to Kafka broker with `ORDERER_KAFKA_TLS_ENABLED=true`.     Orderer's DEBUG log shows below: {code:java} 2019-06-27 10:29:11.023 UTC  orderer.consensus.kafka  setupTopicForChannel -> INFO 348  channel: orderer-system-channel  Setting up the topic for this channel... 2019-06-27 10:29:11.040 UTC  orderer.consensus.kafka  setupProducerForChannel -> INFO 34e  channel: orderer-system-channel  Setting up the producer for this channel... 2019-06-27 10:29:11.068 UTC  orderer.consensus.kafka  startThread -> INFO 35b  channel: orderer-system-channel  Producer set up successfully 2019-06-27 10:29:11.068 UTC  orderer.consensus.kafka  sendConnectMessage -> INFO 35c  channel: orderer-system-channel  About to post the CONNECT message... 2019-06-27 10:29:11.087 UTC  orderer.consensus.kafka  startThread -> INFO 363  channel: orderer-system-channel  CONNECT message posted successfully 2019-06-27 10:29:11.087 UTC  orderer.consensus.kafka  setupParentConsumerForChannel -> INFO 364  channel: orderer-system-channel  Setting up the parent consumer for this channel... 2019-06-27 10:29:11.207 UTC  orderer.consensus.kafka  startThread -> INFO 371  channel: orderer-system-channel  Parent consumer set up successfully 2019-06-27 10:29:11.207 UTC  orderer.consensus.kafka  setupChannelConsumerForChannel -> INFO 372  channel: orderer-system-channel  Setting up the channel consumer for this channel (star t offset: -2)... 2019-06-27 10:29:11.222 UTC  orderer.consensus.kafka  startThread -> INFO 377  channel: orderer-system-channel  Channel consumer set up successfully 2019-06-27 10:29:11.222 UTC  orderer.consensus.kafka.sarama  subscriptionConsumer -> DEBU 378 consumer/broker/1 added subscription to orderer-system-channel/0 2019-06-27 10:29:11.222 UTC  orderer.consensus.kafka  try -> DEBU 379  channel: orderer-system-channel  Getting list of Kafka brokers replicating the channel 2019-06-27 10:29:11.222 UTC  orderer.consensus.kafka.sarama  func1 -> DEBU 37a Initializing new client 2019-06-27 10:29:11.222 UTC  orderer.consensus.kafka.sarama  NewClient -> DEBU 37b ClientID is the default of 'sarama', you should consider setting it to something application-specific. 2019-06-27 10:29:11.222 UTC  orderer.consensus.kafka.sarama  Open -> DEBU 37c ClientID is the default of 'sarama', you should consider setting it to something application-specific. 2019-06-27 10:29:11.222 UTC  orderer.consensus.kafka.sarama  RefreshMetadata -> DEBU 37d client/metadata fetching metadata for all topics from broker kafkaserver:9094 2019-06-27 10:29:11.223 UTC  orderer.consensus.kafka.sarama  withRecover -> DEBU 37e Connected to broker at kafkaserver:9094 (unregistered) 2019-06-27 10:29:11.224 UTC  orderer.consensus.kafka.sarama  RefreshMetadata -> DEBU 37f client/metadata got error from broker while fetching metadata: unexpected EOF 2019-06-27 10:29:11.224 UTC  orderer.consensus.kafka.sarama  tryRefreshMetadata -> DEBU 380 Closed connection to broker kafkaserver:9094 2019-06-27 10:29:11.224 UTC  orderer.consensus.kafka.sarama  Open -> DEBU 381 ClientID is the default of 'sarama', you should consider setting it to something application-specific. 2019-06-27 10:29:11.224 UTC  orderer.consensus.kafka.sarama  RefreshMetadata -> DEBU 382 client/metadata fetching metadata for all topics from broker kafkaserver:9092 2019-06-27 10:29:11.225 UTC  orderer.consensus.kafka.sarama  withRecover -> DEBU 383 Connected to broker at kafkaserver:9092 (unregistered) 2019-06-27 10:29:11.227 UTC  orderer.consensus.kafka.sarama  RefreshMetadata -> DEBU 384 client/metadata got error from broker while fetching metadata: unexpected EOF 2019-06-27 10:29:11.228 UTC  orderer.consensus.kafka.sarama  tryRefreshMetadata -> DEBU 385 Closed connection to broker kafkaserver:9092 2019-06-27 10:29:11.228 UTC  orderer.consensus.kafka.sarama  Open -> DEBU 386 ClientID is the default of 'sarama', you should consider setting it to something application-specific. 2019-06-27 10:29:11.228 UTC  orderer.consensus.kafka.sarama  RefreshMetadata -> DEBU 387 client/metadata fetching metadata for all topics from broker kafkaserver:9091 2019-06-27 10:29:11.228 UTC  orderer.consensus.kafka.sarama  withRecover -> DEBU 388 Connected to broker at kafkaserver:9091 (unregistered) 2019-06-27 10:29:11.229 UTC  orderer.consensus.kafka.sarama  RefreshMetadata -> DEBU 389 client/metadata got error from broker while fetching metadata: unexpected EOF 2019-06-27 10:29:11.230 UTC  orderer.consensus.kafka.sarama  tryRefreshMetadata -> DEBU 38a Closed connection to broker kafkaserver:9091 2019-06-27 10:29:11.230 UTC  orderer.consensus.kafka.sarama  Open -> DEBU 38b ClientID is the default of 'sarama', you should consider setting it to something application-specific. 2019-06-27 10:29:11.230 UTC  orderer.consensus.kafka.sarama  RefreshMetadata -> DEBU 38c client/metadata fetching metadata for all topics from broker kafkaserver:9093 2019-06-27 10:29:11.230 UTC  orderer.consensus.kafka.sarama  withRecover -> DEBU 38d Connected to broker at kafkaserver:9093 (unregistered) 2019-06-27 10:29:11.234 UTC  orderer.consensus.kafka.sarama  RefreshMetadata -> DEBU 38e client/metadata got error from broker while fetching metadata: unexpected EOF 2019-06-27 10:29:11.234 UTC  orderer.consensus.kafka.sarama  tryRefreshMetadata -> DEBU 38f Closed connection to broker kafkaserver:9093 2019-06-27 10:29:11.234 UTC  orderer.consensus.kafka.sarama  RefreshMetadata -> DEBU 390 client/metadata no available broker to send metadata request to 2019-06-27 10:29:11.234 UTC  orderer.consensus.kafka.sarama  tryRefreshMetadata -> DEBU 391 client/brokers resurrecting 4 dead seed brokers 2019-06-27 10:29:11.234 UTC  orderer.consensus.kafka.sarama  tryRefreshMetadata -> DEBU 392 client/metadata retrying after 250ms... (3 attempts remaining) {code}    With Kafka debug log: {code:java}  2019-06-27 <TIME OMITTED>  DEBUG SSLEngine.closeInBound() raised an exception. (org.apache.kafka.common.network.SslTransportLayer) javax.net.ssl.SSLException: Inbound closed before receiving peer's close_notify: possible truncation attack?         at sun.security.ssl.Alerts.getSSLException(Alerts.java:208)         at sun.security.ssl.SSLEngineImpl.fatal(SSLEngineImpl.java:1647)         at sun.security.ssl.SSLEngineImpl.fatal(SSLEngineImpl.java:1615)         at sun.security.ssl.SSLEngineImpl.closeInbound(SSLEngineImpl.java:1542)         at org.apache.kafka.common.network.SslTransportLayer.handshakeFailure(SslTransportLayer.java:797)         at org.apache.kafka.common.network.SslTransportLayer.handshake(SslTransportLayer.java:257)         at org.apache.kafka.common.network.KafkaChannel.prepare(KafkaChannel.java:79)         at org.apache.kafka.common.network.Selector.pollSelectionKeys(Selector.java:460)         at org.apache.kafka.common.network.Selector.poll(Selector.java:398)         at kafka.network.Processor.poll(SocketServer.scala:535)         at kafka.network.Processor.run(SocketServer.scala:452)         at java.lang.Thread.run(Thread.java:748)  2019-06-27 <TIME OMITTED>  DEBUG  SocketServer brokerId=1  Connection with /10.10.255.41 disconnected due to authentication exception (org.apache.kafka.common.network.Selector) org.apache.kafka.common.errors.SslAuthenticationException: SSL handshake failed Caused by: javax.net.ssl.SSLException: Unrecognized SSL message, plaintext connection?         at sun.security.ssl.EngineInputRecord.bytesInCompletePacket(EngineInputRecord.java:156)         at sun.security.ssl.SSLEngineImpl.readNetRecord(SSLEngineImpl.java:857)         at sun.security.ssl.SSLEngineImpl.unwrap(SSLEngineImpl.java:766)         at javax.net.ssl.SSLEngine.unwrap(SSLEngine.java:624)         at org.apache.kafka.common.network.SslTransportLayer.handshakeUnwrap(SslTransportLayer.java:464)         at org.apache.kafka.common.network.SslTransportLayer.doHandshake(SslTransportLayer.java:328) {code}    It seems the orderer sends plaintext but not tls package to kafka when it tries to refresh metadata of topics. Maybe the newly added kafka healthcheck FAB-13341 has some bug related with this problem.  ></description> </Issue>
