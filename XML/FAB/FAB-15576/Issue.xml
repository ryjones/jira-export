<Issue id="40202" key="FAB-15576" number="15576" project="10002" reporter="sykesm" creator="sykesm" type="10002" summary="Replace gossipSupport and inline function with an adapter" priority="3" resolution="10000" status="6" created="2019-05-29 13:44:17.0" updated="2021-03-08 18:37:36.0" resolutiondate="2021-03-08 18:37:36.0" votes="0" watches="2" workflowId="53105"> <description><! CDATA Within the peer package, {{createChain}} sets up a number of config bundle listeners. One of these supports gossip.  The current implementation for gossip involves a {{gossipSupport}} struct in the peer that embeds 	{{channelconfig.Application}}, {{configtx.Validator}}, and {{channelconfig.Channel}}.   {code} type gossipSupport struct { 	channelconfig.Application 	configtx.Validator 	channelconfig.Channel } {code}  This is rendered as a {{Config}} interface:  {code} // Config enumerates the configuration methods required by gossip type Config interface { 	// ChainID returns the chainID for this channel 	ChainID() string 	// Organizations returns a map of org ID to ApplicationOrgConfig 	Organizations() map string channelconfig.ApplicationOrg 	// Sequence should return the sequence number of the current configuration 	Sequence() uint64 	// OrdererAddresses returns the list of valid orderer addresses to connect to to invoke Broadcast/Deliver 	OrdererAddresses()   string } {code}  In addition to employing the "support" anti-pattern, it violates the tell-don't-ask principle as the object presented to gossip is used to repeatedly _get_ the information from the config bundle.  This needs to be refactored to create a single-responsibility object that acts as an adapter between gossip and the BundleActor. This object should be created with the necessary dependencies and attach a method that satisfies the {{channelconfig.BundleActor}} interface. When the {{BundleActor}} callback is driven, the adapter should create a value object that contains the necessary data for gossip and calls the gossip handler with the value object.  This approach tells gossip the information it needs, allows the adapter layer to be explicitly tested, and it removes the {{gossipSupport}} struct from the peer.   ></description> </Issue>
