<Issue id="20038" key="FAB-5664" number="5664" project="10002" reporter="elli-androulaki" assignee="angelo.decaro" creator="elli-androulaki" type="10000" summary="As a user of an MSP i want to be able to distinguish clients from peers" priority="3" resolution="10000" status="6" created="2017-08-08 17:21:05.0" updated="2019-07-16 16:31:48.0" resolutiondate="2018-03-19 20:04:08.0" votes="1" watches="12" timeoriginalestimate="144000" timeestimate="144000" workflowId="39670"> <description><! CDATA *Background / Motivation:*  MSP identities currently do not list the role of the identity owner in the system. That is, currently it is not possible for a user of an MSP instance to tell if a given identity corresponds to a client or a peer or an orderer( or any combination of the previous fields), unless that user knows the internal organisation of that MSP, e.g., that the MSP maps clients of the system to a certain OU, and peers to another.  This epic aims to enhance MSP functionality (and in particular the types of supported MSP principals and MSP configuration) such that distinguishing among system entities is possible in the context of a specific MSP. In this way, one would be able to leverage MSP interface to understand if a given MSP identity is a peer, client or orderer, without being exposed to the internal structure and rules that govern peer, client or orderer identities in that MSP. Extending to this, policy language can be extended to be able to express principals that represent the peers, clients and/or orderers that reside within an organisation.   Candidate solutions to the issue described above should cover i) specification of the rules distinguishing client/peer/orderer certificates in an MSP configuration,  ii) incorporation of these rules to identity issuing operations in Fabric-CA or methodology on how to incorporate these rules in Commercial CA's certificates, iii) extension of the MSP principal definition to cover also client, peer, orderer roles, iv) extension of the policy language to allow the specification of an organisation's role in the system.      *I. Suggested alternatives for setting the rules distinguishing system entities in Fabric MSP:*  Below we list a couple of alternatives on ways to distinguish identities of clients, peers, and orderers of Fabric MSP. In any case we assume the extension of FabricMSPConfig with an activation flag of the feature.     _Alternative A_*: Leverage KeyUsage/ExtKeyUsage fields of X.509 certificates.*  Distinguish the role of an entity using the KeyUsage/ExtendedKeyUsage fields of X.509 certificates that represent identities in Fabric MSP. That is an identity from Fabric MSP would be considered a  * client by the MSP if it includes a KeyUsage/ExtendedKeyUsage set to include KeyPurposeId = "Client Authentication" (id-kp-1) * peer/orderer by the MSP if it includes a KeyUsage/ExtendedKeyUsage set to include KeyPurposeID = "Server Authentication" (id-kp-2)  More information on the KeyUsage/ExtendedKeyUsage fields of X.509 certificates can be found in  RFC3280|https://tools.ietf.org/rfc/rfc3280.txt .   Potential shortcomings of this approach are that the KeyUsage/ExtendedKeyUsage would allow the separation between clients and peers/orderers, but not distinction between orderers and peers. In addition, current value of KeyPurposeId section of ExtendedKeyUsage refers to TLS authentication (TLS WWW server/client authentication), it may cause confusion, and it is not clear if all commercial CAs even support the inclusion of such fields in the X.509 certificates they issue.  Advantages of this method are that no changes for FabricMSPConfig are required.     _Alternative B_*: Leverage Namespace of EnrollmentID of the subject.*  Distinguish the role of the identity using the enrollmentID (Common Name) of the identity in question. In particular, in this case FabricMSPConfig would be enhanced with fields denoting suffix/prefix of the considered entities. {code:java} string peer-cn-prefix = 11; // namespace of CN of peers string client-cn-prefix = 12; // namespace of CN of clients string orderer-cn-prefix = 13; // namespace of CN of orderers{code}    This would mean that an identity of Fabric's current MSP, would be considered by FabricMSP as  * client if its CN has a namespace equal to client-cn-prefix of the respective FabricMSPConfig * peer if its CN has a namespace equal to peer-cn-prefix of the respective FabricMSPConfig * orderer if its CN has a namespace equal to orderer-cn-prefix of the respective FabricMSPConfig  Advantages of this mechanism are the easiness in describing clients and peers within the Fabric MSP configuration and enforcing it.  Shortcomings of this approach have to do with this approach not necessarily complying with regulations enterprises have sometimes on the format of CNs in their employees' / equipment's certificates.  _Variants of this approach that consider prefix/suffixes of OUs integrated inside the X.509 certificates of entities, are subjected to the same shortcomings._     _Alternative C_*: Leverage Organisational Unit (OU) fields of X.509 certificates*  This proposal has to do with the separation of clients, peers, and orderers based on the list of OUs listed in an identity. That is, at MSP configuration time, three (sets of) OUs need to be specified: one to be included in client identities, one to be considered for peer identities, and one for orderer identities.  Recall that OUs can already be included in the configuration of FabricMSP (FabricMSPConfig) to allow OU-field level of granularity of MSP membership definition. OUs appear in FabricMSPConfig in the form of FabricOUIdentifier.    {code:java} // FabricOUIdentifier represents an organizational unit and // its related chain of trust identifier. message FabricOUIdentifier {  // Certificate represents the second certificate in a certification chain. // (Notice that the first certificate in a certification chain is supposed // to be the certificate of an identity). // It must correspond to the certificate of root or intermediate CA // recognized by the MSP this message belongs to. // Starting from this certificate, a certification chain is computed // and boud to the OrganizationUnitIdentifier specified bytes certificate = 1;  // OrganizationUnitIdentifier defines the organizational unit under the // MSP identified with MSPIdentifier string organizational_unit_identifier = 2; } {code} Essentially, FabricOUIdentifier specifies an OU string in the form that appears inside the subject certificate (organisational_unit_identifier), as well as a reference to the CA whose issued certificates should be considered (certificate). Notice, that allowing wildcard "ANY" in the FabricOUIdentifier.certificate would define simply an OU string that should appear to subject certificates (i.e., independently of the signing CA), while allowing wildcard "ANY" in FabricOUIdentifier.organisational_unit_identifier would specify all issued certificates by (intermediate) CA.   This means that extending FabricOUIdentifier definition to allow for wildcard "ANY" would give us a way to classify client, peer, orderer certificates on a per intermediate CA basis, or per OU field basis, and or any combination of the two.   In this case one would need to extend FabricMSPConfig with three additional field, denoting the FabricOUIdentifier of client, peer, and orderer identities: {code:java} FabricOUIdentifier peer-ou = 11; // FabricOUIdentifier dedicated to peers FabricOUIdentifier client-ou = 12; // FabricOUIdentifier dedicated to clients FabricOUIdentifier orderer-ou = 13; // FabricOUIdentifier dedicated to orderers{code} while at identity validation time an identity would be considered as:  * client if the identity (its signing CA and OUs listed in it) is compliant with the client-ou of the respective FabricMSPConfig * peer if the identity (its signing CA and OUs listed in it) is compliant with the peer-ou of the respective FabricMSPConfig * orderer if the identity (its signing CA and OUs listed in it) is compliant with the orderer-ou of the respective FabricMSPConfig  If an identity is not compliant with any of the OUs specified at FabricMSP configuration time validation would fail.  Advantages of this approach are that it works on top of any regulation on the format of the certificates and their fields. It is also flexible w.r.t. the way peers/clients/orderer identities are separated: intermediate CAs can be used or OU fields alone or any combination of the two.   However this approach would require more extended changes to FabricMSPConfig, FabricOUIdentifier (to capture wildcards), and SatisfiesPrincipal implementation of MSP.      *The JIRA items within this Epic assume we go with Alternative C.*  ></description> </Issue>
