<Action id="29653" issue="20038" author="smithbk" type="comment" created="2017-08-10 13:20:06.0" updateauthor="smithbk" updated="2017-08-10 13:20:06.0"> <body><! CDATA There is only one alternative listed.  Did you mean to list others? I would prefer to see us use attributes (RBAC).   See https://jira.hyperledger.org/browse/FAB-5346  ></body> </Action>
<Action id="29699" issue="20038" author="weeds" type="comment" body="This is estimated 3-5 days of work and we have listed here all intermediate tasks that this involves." created="2017-08-11 12:15:46.0" updateauthor="weeds" updated="2017-08-11 12:15:46.0"/>
<Action id="29704" issue="20038" author="weeds" type="comment" body="would we say member.peer or how do we write a rule that its for a member peer and not for member client? org1.client or org2.client.  Org1.member or org2.member.  You would be specify org2.peer.  We need to enhance the policy language.  It makes sense to work on this, but we must reconcile how we are doing with ACL.  For example- you want to have a rule on event- all clients can get filtered events.  We can start it, but it will depend on how far we get whether it makes it in on 1.1 and what community thinks." created="2017-08-11 12:26:55.0" updateauthor="weeds" updated="2017-08-11 12:26:55.0"/>
<Action id="30001" issue="20038" author="elli-androulaki" type="comment" created="2017-08-18 16:49:33.0" updateauthor="elli-androulaki" updated="2017-08-18 16:49:33.0"> <body><! CDATA Related CRs (in review):  FAB-5666:  https://gerrit.hyperledger.org/r/#/c/12453/   FAB-5667:  https://gerrit.hyperledger.org/r/#/c/12459/   FAB-5668:  https://gerrit.hyperledger.org/r/#/c/12451   FAB-5669:  https://gerrit.hyperledger.org/r/#/c/12455/      ></body> </Action>
<Action id="30310" issue="20038" author="elli-androulaki" type="comment" created="2017-08-29 13:01:00.0" updateauthor="elli-androulaki" updated="2017-08-29 13:01:00.0"> <body><! CDATA So, I believe this was moved for Release 1.1 - Tech preview due to incompatibility issues with 1.0.   Will remove the 1.1 label.   ></body> </Action>
<Action id="31031" issue="20038" author="denyeart" type="comment" created="2017-09-19 22:10:47.0" updateauthor="denyeart" updated="2017-09-19 22:10:47.0"> <body><! CDATA  ~elli-androulaki   ~angelo.decaro  Please clarify the Description text.  Which of the alternatives mentioned has been chosen? How exactly are OUs leveraged (Is it possible to have multiple OUs in a certificate, e.g. this role-based OU as well as other organization/division information)?  How does this work item relate to the attribute support work item (as mentioned by  ~smithbk  in the first comment).  I believe there was general agreement to promote this to Tech Preview 1.1. I have added it to the list of items at  https://wiki.hyperledger.org/projects/fabric/proposedv1_1.  Please edit the description there if necessary.  ></body> </Action>
<Action id="32929" issue="20038" author="smithbk" type="comment" created="2017-10-20 14:12:52.0" updateauthor="smithbk" updated="2017-10-20 14:12:52.0"> <body><! CDATA I spoke with Elli and Angelo to make sure we were on the same page regarding RBAC (Role-Based Access Control). I think we are and I'll try to summarize, but Elli and Angelo can modify as needed.  Our goals are: 1) allow users to define roles for both fabric and chaincode in a consistent way; 2) allow roles to be defined for all identity types, whether the identity is an: a) x509 certificate from fabric CA, b) x509 certificate from 3rd party CA, c) credentials from idemix, or d) some other identity type in the future. 3) allow for separation of duties between: a) the chaincode developer who must decide the names of roles which must be used in the code; b) the channel creator or chaincode deployer who must decide how to map each role name to a group of identities. This separation of duties allows a chaincode to be deployed to multiple environments without code change and can be compared to a servlet being deployed in different environments with different deployment descriptors.  In order to accomplish these goals, MSP and the chaincode library at fabric/core/chaincode/lib/cid (which is a library for performing access control checks based on the Client ID) will use a common RBAC library described at https://jira.hyperledger.org/browse/FAB-6674 (see the change set).  In a nutshell, this RBAC library defines a role to be a <roleName, identityBooleanExpression> such that an identity has a role if the identityBooleanExpression evaluates to true for that identity.  From a fabric perspective, this will be used by MSP to define roles for peer, orderer, and client.  I also think we should add one for "admin" so that users do not have to populate the admincerts folder; this would solve https://jira.hyperledger.org/browse/FAB-3752.  From a chaincode perspective, users can configure roles (i.e. set the boolean expression for the role name) at the chaincode level or at the MSP level which may be shared across multiple chaincodes on a channel.  I suggest that we initially just support this at the chaincode level for multiple reasons: a) it is currently more complex to do a config block update than to instantiate chaincode with args b) I think we would want to allow a role definition in an MSP to both act as a default which a chaincode deployer could override, or which could not be overridden c) walk before we run  ></body> </Action>
<Action id="41766" issue="20038" author="kchristidis" type="comment" body="Err, I believe this should be marked as done?" created="2018-03-16 17:13:05.0" updateauthor="kchristidis" updated="2018-03-16 17:13:05.0"/>
<Action id="41810" issue="20038" author="denyeart" type="comment" body="client and peer types added in 1.1, marking as Done." created="2018-03-19 20:04:59.0" updateauthor="denyeart" updated="2018-03-19 20:04:59.0"/>
