<Action id="55009" issue="36301" author="c0rwin" type="comment" body="https://gerrit.hyperledger.org/r/#/c/28305/" created="2018-12-19 23:57:04.0" updateauthor="c0rwin" updated="2018-12-19 23:57:04.0"/>
<Action id="58326" issue="36301" author="denyeart" type="comment" created="2019-03-20 06:02:43.0" updateauthor="denyeart" updated="2019-03-20 06:02:43.0"> <body><! CDATA  ~C0rWin  Still seeing this one in release-1.4, e.g.:  https://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/10684/consoleFull  I've re-opened the bug.  ></body> </Action>
<Action id="58816" issue="36301" author="c0rwin" type="comment" created="2019-04-01 21:43:44.0" updateauthor="c0rwin" updated="2019-04-01 21:45:46.0"> <body><! CDATA {quote} 08:18:15 --- FAIL: TestDissemination (184.09s) 08:18:15     gossip_test.go:808: Membership establishment took 2.528055227s 08:18:15     gossip_test.go:816: Block dissemination took 985.061415ms 08:18:15     gossip_test.go:819: Metadata dissemination took 2.656175ms 08:18:15     gossip_test.go:848: Leadership message dissemination took 538.403653ms 08:18:15     gossip_test.go:854: Stopping peers 08:18:15     gossip_test.go:1688:  08:18:15         	Error Trace:	gossip_test.go:1688 08:18:15         	            				asm_amd64.s:1333 08:18:15         	Error:      	Didn't stop within a timely manner 08:18:15         	Test:       	TestDissemination 08:18:15     gossip_test.go:1763:  08:18:15         	Error Trace:	gossip_test.go:1763 08:18:15         	            				gossip_test.go:861 08:18:15         	Error:      	Timeout expired, while %s 08:18:15         	Test:       	TestDissemination 08:18:15         	Messages:   	waiting for all instances to stop 08:18:15     gossip_test.go:862: Stop took 3m0.003271464s 08:18:15     gossip_test.go:863: Took 3m4.093595859s 08:18:15 FAIL 08:18:15 coverage: 85.1% of statements 08:18:15 FAIL	github.com/hyperledger/fabric/gossip/gossip	226.146s {quote} related to CI build of following CR: https://gerrit.hyperledger.org/r/#/c/30525/  failure observed in: https://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/11165/consoleFull  {code} 08:18:28 mock: Unexpected Method Call 08:18:28 ----------------------------- 08:18:28  08:18:28 GetMembership() 08:18:28 		 08:18:28  08:18:28 The closest call I have is:  08:18:28  08:18:28 GetMembership() 08:18:28 		 08:18:28  08:18:28  08:18:28 Diff: No differences. 08:18:28  08:18:28 goroutine 130  running : 08:18:28 github.com/hyperledger/fabric/vendor/github.com/stretchr/testify/mock.(*Mock).fail(0xc0003355e0, 0xed82d3, 0x6f, 0xc000656200, 0x4, 0x4) 08:18:28 	/w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/vendor/github.com/stretchr/testify/mock/mock.go:235 +0x16d 08:18:28 github.com/hyperledger/fabric/vendor/github.com/stretchr/testify/mock.(*Mock).MethodCalled(0xc0003355e0, 0x1414da1, 0xd, 0x0, 0x0, 0x0, 0x4, 0xe33240, 0x7f4a4836a801) 08:18:28 	/w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/vendor/github.com/stretchr/testify/mock/mock.go:357 +0x7f1 08:18:28 github.com/hyperledger/fabric/vendor/github.com/stretchr/testify/mock.(*Mock).Called(0xc0003355e0, 0x0, 0x0, 0x0, 0x10, 0x0, 0x10) 08:18:28 	/w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/vendor/github.com/stretchr/testify/mock/mock.go:333 +0x147 08:18:28 github.com/hyperledger/fabric/gossip/gossip/channel.(*gossipAdapterMock).GetMembership(0xc0003355e0, 0x90, 0xc000052190, 0xc000050f00) 08:18:28 	/w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/gossip/gossip/channel/channel_test.go:221 +0x42 08:18:28 github.com/hyperledger/fabric/gossip/gossip/channel.(*gossipChannel).GetPeers(0xc00030b900, 0x1, 0xc0000d8d70, 0xc00021b560) 08:18:28 	/w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/gossip/gossip/channel/channel.go:363 +0x78 08:18:28 github.com/hyperledger/fabric/gossip/gossip/channel.(*gossipChannel).GetPeers-fm(0xc0003dde58, 0xc0003dde28, 0x2) 08:18:28 	/w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/gossip/gossip/channel/channel.go:289 +0x2a 08:18:28 github.com/hyperledger/fabric/gossip/gossip/channel.(*membershipTracker).trackMembershipChanges(0xc0002c8ec0) 08:18:28 	/w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/gossip/gossip/channel/channel.go:1099 +0x326 08:18:28 created by github.com/hyperledger/fabric/gossip/gossip/channel.NewGossipChannel 08:18:28 	/w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/gossip/gossip/channel/channel.go:297 +0xa13 08:18:28 FAIL	github.com/hyperledger/fabric/gossip/gossip/channel	0.133s {code}  seems as not related to current issue, will open a new ticket.   ></body> </Action>
<Action id="58925" issue="36301" author="sykesm" type="comment" created="2019-04-04 00:29:51.0" updateauthor="sykesm" updated="2019-04-04 00:29:51.0"> <body><! CDATA {code} 19:57:15 <<<TestDissemination>>> 19:57:15 --- FAIL: TestDissemination (184.06s) 19:57:15     gossip_test.go:808: Membership establishment took 3.083772055s 19:57:15     gossip_test.go:816: Block dissemination took 443.154336ms 19:57:15     gossip_test.go:819: Metadata dissemination took 482.894µs 19:57:15     gossip_test.go:848: Leadership message dissemination took 516.59666ms 19:57:15     gossip_test.go:854: Stopping peers 19:57:15     gossip_test.go:1688:  19:57:15         	Error Trace:	gossip_test.go:1688 19:57:15         	            				asm_amd64.s:1333 19:57:15         	Error:      	Didn't stop within a timely manner 19:57:15         	Test:       	TestDissemination 19:57:15     gossip_test.go:1763:  19:57:15         	Error Trace:	gossip_test.go:1763 19:57:15         	            				gossip_test.go:861 19:57:15         	Error:      	Timeout expired, while %s 19:57:15         	Test:       	TestDissemination 19:57:15         	Messages:   	waiting for all instances to stop 19:57:15     gossip_test.go:862: Stop took 3m0.001982361s 19:57:15     gossip_test.go:863: Took 3m4.059669415s 19:57:15 FAIL 19:57:15 coverage: 85.0% of statements 19:57:15 FAIL	github.com/hyperledger/fabric/gossip/gossip	220.877s {code}  https://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/11327/console  ></body> </Action>
<Action id="59166" issue="36301" author="denyeart" type="comment" body="Hit again: https://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/11464/consoleFull" created="2019-04-11 17:51:55.0" updateauthor="denyeart" updated="2019-04-11 17:51:55.0"/>
<Action id="59651" issue="36301" author="wlahti" type="comment" body="Hit again here:  https://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/11838/console " created="2019-05-01 16:09:22.0" updateauthor="wlahti" updated="2019-05-01 16:09:22.0"/>
<Action id="59657" issue="36301" author="mhbauer" type="comment" created="2019-05-01 17:01:51.0" updateauthor="mhbauer" updated="2019-05-15 00:23:04.0"> <body><! CDATA This is fairly easy to repro when running the test locally.     With the race detector on it sees a race as well.   ^testdissemination.txt  a local stacktrace from only the test running.  ></body> </Action>
<Action id="60011" issue="36301" author="mhbauer" type="comment" created="2019-05-15 01:24:54.0" updateauthor="mhbauer" updated="2019-05-15 01:24:54.0"> <body><! CDATA In demux.go, the channel buffer fills up in a DeMultiplex(), and holds the lock, which prevents the demux.close() from proceeding, as it also takes the lock. This backs up into comm_impl and then into gossip_impl, and prevents a clean shutdown.  ></body> </Action>
<Action id="60145" issue="36301" author="naaman" type="comment" created="2019-05-19 18:44:29.0" updateauthor="naaman" updated="2019-05-19 18:44:29.0"> <body><! CDATA We should change the ChannelDeMultiplexer code to use non-blocking channel access. This should allow a goroutine that is waiting on a blocked channel to to exit and free up the lock when the channel is closed (as part of the stop procedure).  We should check for similar cases of goroutines that might be blocked on a channel without the ability to get notified that the channel should be closed.  ></body> </Action>
<Action id="60183" issue="36301" author="mhbauer" type="comment" created="2019-05-20 23:32:41.0" updateauthor="mhbauer" updated="2019-05-20 23:32:41.0"> <body><! CDATA  ~naaman  can you make suggestions on   https://gerrit.hyperledger.org/r/#/c/fabric/+/31374/  ? I would appreciate the help to know how you think we should be avoiding a block on the channel. So far I can't tell if the blocking is desired behavior or accidental. Non-blocking would result in dropping of messages.  Given that we're in gossip, I would think that all of this should be capable of handling very lossy message channels.  ></body> </Action>
<Action id="60234" issue="36301" author="mhbauer" type="comment" body="I think the proposed change should be satisfactory to everybody at this point." created="2019-05-22 02:37:23.0" updateauthor="mhbauer" updated="2019-05-22 02:37:23.0"/>
