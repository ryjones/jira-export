<Action id="24428" issue="16851" author="mastersingh24" type="comment" created="2017-05-26 10:58:03.0" updateauthor="mastersingh24" updated="2017-05-26 10:58:03.0"> <body><! CDATA I've added the review-needed to this because there are several issues open which involve connections timing out between components due to inactivity timeouts in the network closing persistent gRPC connections:  https://jira.hyperledger.org/browse/FAB-3310 https://jira.hyperledger.org/browse/FAB-2787  I don't think we can defer fixing the 2 issues listed above and while we can implement some temporary hacks and/or add our own health checking, we get all of this for free in the latest gRPC package(s).  I'm currently working on the CR and will submit so we can make an educated decision on the risk of doing this now, but my current position is that we better do this now else we are going to get burned with a number of defects around connectivity issues which will be hard to solve with down-level of grpc-go  ></body> </Action>
<Action id="24433" issue="16851" author="christopherferris" type="comment" body="If we go this path, of upgrading gRPC then sooner rather than later so we have more time with it before 1.0. It may be the simplest approach to bite the bullet, and it will be more robust than anything we can do near term. It does present a bit of risk though," created="2017-05-26 11:38:32.0" updateauthor="christopherferris" updated="2017-05-26 11:38:32.0"/>
<Action id="24453" issue="16851" author="mastersingh24" type="comment" body="Agreed" created="2017-05-26 14:00:38.0" updateauthor="mastersingh24" updated="2017-05-26 14:00:38.0"/>
<Action id="24454" issue="16851" author="mastersingh24" type="comment" body="https://gerrit.hyperledger.org/r/#/c/9861/" created="2017-05-26 14:36:07.0" updateauthor="mastersingh24" updated="2017-05-26 14:36:07.0"/>
<Action id="24464" issue="16851" author="binhn" type="comment" body="So it looks like early changeset shows the actual code changes (our code) are minimum. Only the vendors and the protos regen. I vote to get it in as soon as the CR is ready so that we can run CI tests on it." created="2017-05-26 15:36:38.0" updateauthor="binhn" updated="2017-05-26 15:36:38.0"/>
<Action id="24467" issue="16851" author="christopherferris" type="comment" body="+1" created="2017-05-26 15:40:41.0" updateauthor="christopherferris" updated="2017-05-26 15:40:41.0"/>
<Action id="24546" issue="16851" author="yacovm" type="comment" created="2017-05-27 10:19:49.0" updateauthor="yacovm" updated="2017-05-27 10:19:49.0"> <body><! CDATA {quote} * Keep alive {quote} Uh, this doesn't come activated though, right? We need to manually add a dial option (WithKeepaliveParams?) in our code to activate it?  ></body> </Action>
<Action id="24548" issue="16851" author="mastersingh24" type="comment" body=" ~yacovm  - Correct - we will need to leverage the keep alive feature when we fix the bug(s) I listed above" created="2017-05-27 16:31:13.0" updateauthor="mastersingh24" updated="2017-05-27 16:31:13.0"/>
<Action id="24566" issue="16851" author="jimthematrix" type="comment" body=" ~mastersingh24  what&apos;s the impact on SDKs? would the SDKs also need to upgrade grpc to corresponding level? I see end-2-end failed because java SDK&apos;s e2e timed out (so e2e_cli or node SDK&apos;s e2e didn&apos;t even run) at the step to send transaction to orderer. not sure what&apos;s causing it but may be related to usage of the stream rpc.  ~rickr  can you take a look?" created="2017-05-29 04:15:47.0" updateauthor="jimthematrix" updated="2017-05-29 04:20:19.0"/>
<Action id="24571" issue="16851" author="yacovm" type="comment" created="2017-05-29 05:37:35.0" updateauthor="yacovm" updated="2017-05-29 18:12:06.0"> <body><! CDATA  ~mastersingh24  Currently e2e doesn't test gossip state transfer as you know because every peer is configured to use leader election so it might simply connect to the ordering service itself.  Perhaps someone should test before it is merged that the state transfer between peers works in production? I know that the gossip tests use TLS, but I think it should also be tested in a prod environment with real certificates, etc. What do you think? Or, if you have tested it yourself then there is no need.  ></body> </Action>
<Action id="24609" issue="16851" author="mastersingh24" type="comment" body="Of course I vote for getting this in, but probably not fair for me to vote given I created and implemented the CR for this already  ;)" created="2017-05-29 19:47:14.0" updateauthor="mastersingh24" updated="2017-05-29 19:47:14.0"/>
<Action id="24669" issue="16851" author="jimthematrix" type="comment" created="2017-05-30 15:09:15.0" updateauthor="jimthematrix" updated="2017-05-30 15:09:51.0"> <body><! CDATA  ~jimthematrix  looks like the SDKs are able to work with the updated grpc in peers and fabric (node and java e2e tests both passing in https://gerrit.hyperledger.org/r/#/c/9861/) so that's good.  I still have a question on the fundamental level if I may: why can't we implement the keepalive ourselves similar to the keepalive messages being sent b/w the peer and chaincode containers? also  ~harrisob@us.ibm.com  has been working on similar solutions for the event stream (b/w the app/SDK and peers) which has been discussed wth Gari. that seems much less risky and requires much limited scope of impact at this point.  ~mastersingh24  can you comment?  ></body> </Action>
<Action id="24771" issue="16851" author="christopherferris" type="comment" body="Has the five needed votes, removing from review-needed. This can now be merged." created="2017-05-31 14:21:14.0" updateauthor="christopherferris" updated="2017-05-31 14:21:14.0"/>
