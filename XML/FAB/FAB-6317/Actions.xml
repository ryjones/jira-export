<Action id="31212" issue="21027" author="muralisr" type="comment" body=" Regardless of release and other mechanics, this is something that has been talked about for a while. So gets my +2." created="2017-09-28 00:25:51.0" updateauthor="muralisr" updated="2017-09-28 00:25:51.0"/>
<Action id="31213" issue="21027" author="aleksandar.likic" type="comment" body="The CR is at https://gerrit.hyperledger.org/r/#/c/13851/" created="2017-09-28 00:32:26.0" updateauthor="aleksandar.likic" updated="2017-09-28 00:32:26.0"/>
<Action id="31216" issue="21027" author="baohua" type="comment" created="2017-09-28 08:23:21.0" updateauthor="baohua" updated="2017-09-28 08:23:21.0"> <body><! CDATA IMHO, after the Go sdk finished, the fabric-cli should be built on top of it easily.  But I do agree that the separation is a good step to start.  ></body> </Action>
<Action id="31224" issue="21027" author="muralisr" type="comment" body=" ~baohua  true. This would be orthogonal to that and help get the build mechanics squared away." created="2017-09-28 11:21:53.0" updateauthor="muralisr" updated="2017-09-28 11:21:53.0"/>
<Action id="31225" issue="21027" author="aleksandar.likic" type="comment" created="2017-09-28 11:29:54.0" updateauthor="aleksandar.likic" updated="2017-09-28 11:29:54.0"> <body><! CDATA  ~baohua   ~muralisr  Can we agree on the binary name?  fabriccli  fabric-client  fc  fabric-cli  <other>?  ></body> </Action>
<Action id="31238" issue="21027" author="baohua" type="comment" created="2017-09-28 14:29:10.0" updateauthor="baohua" updated="2017-09-28 14:29:10.0"> <body><! CDATA Dislike the "fabriccli" one, hard to recognize at the first glance.  Others look good to me.   ></body> </Action>
<Action id="31500" issue="21027" author="muralisr" type="comment" body="How about with a &quot;-&quot; ?  &quot;fabric-cli&quot;  has a venerable precedent in &quot;bitcoin-cli&quot; :-)" created="2017-10-02 00:21:53.0" updateauthor="muralisr" updated="2017-10-02 00:21:53.0"/>
<Action id="31502" issue="21027" author="baohua" type="comment" created="2017-10-02 03:34:23.0" updateauthor="baohua" updated="2017-10-02 03:34:23.0"> <body><! CDATA  ~muralisr , it sounds OK.  And currently for fabric, we have 5 kinds components: * peer: The server for peer node role * orderer: The server for orderer node role * fabric-ca: CA for fabric networks * fabric-cli: Client binary for fabric networks. * fabric-sdk-xxx: Client SDK for various languages.  ></body> </Action>
<Action id="31537" issue="21027" author="aleksandar.likic" type="comment" created="2017-10-02 19:02:17.0" updateauthor="aleksandar.likic" updated="2017-10-02 20:31:15.0"> <body><! CDATA Great, thanks  ~baohua  and  ~muralisr . I updated the code to use "fabric-cli". You can review it at  https://gerrit.hyperledger.org/r/#/c/13851/      ></body> </Action>
<Action id="33199" issue="21027" author="c0rwin" type="comment" body="I think that instead of splitting peer binary we should just implement normal cli tool (we might be reusing some of the existing code)." created="2017-10-25 22:11:33.0" updateauthor="c0rwin" updated="2017-10-25 22:11:33.0"/>
<Action id="33206" issue="21027" author="aleksandar.likic" type="comment" created="2017-10-26 09:55:04.0" updateauthor="aleksandar.likic" updated="2017-10-26 09:57:47.0"> <body><! CDATA  ~C0rWin  There are many ways to do it. This CR would allow a quick path to: * using different build strategies for peer client and peer server (e.g. static vs dynamic) * decoupling client and server protos and libs  The latter is actually a prerequisite for building a proper go-based client library, the one that doesn't force the application using the client to import the server protos and libs. One can do it without this decoupling, but at the cost of dealing with the problem of importing server protos and libs in a way similar to how the Go SDK does it (  https://github.com/hyperledger/fabric-sdk-go/tree/master/internal/github.com/hyperledger  ), that involves copying Fabric code used by the client lib into another namespace (to isolate the application from Fabric server code) and patching it (to remove transitive imports of server go libraries imported by Fabric). Unless, of course, one wants to re-write all the logic currently re-used from Fabric.  ></body> </Action>
<Action id="33227" issue="21027" author="muralisr" type="comment" body=" ~C0rWin  I think  ~baohua  raised similar point on  28/Sep comment ? Just to drive home  ~aleksandar.likic  point this will pave the path for such a CLI tool." created="2017-10-26 16:06:51.0" updateauthor="muralisr" updated="2017-10-26 16:08:38.0"/>
<Action id="67135" issue="21027" author="sykesm" type="comment" body="Stale" created="2020-01-22 22:07:05.0" updateauthor="sykesm" updated="2020-01-22 22:07:05.0"/>
