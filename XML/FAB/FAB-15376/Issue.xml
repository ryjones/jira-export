<Issue id="39661" key="FAB-15376" number="15376" project="10002" reporter="tock" assignee="tock" creator="tock" type="10004" summary="msgprocessor sizefilter not taking configuration updates" priority="3" resolution="10000" status="6" created="2019-05-07 07:13:20.0" updated="2019-06-19 06:41:06.0" resolutiondate="2019-06-04 06:11:44.0" votes="0" watches="5" workflowId="52546"> <description><! CDATA *The problem* The orderer/common/msgprocessor package has an array of filters, one of which is sizefilter.go.  The filters are created when a channel is created. The expiration filter and the sigfiilter are given a reference to (filterSupport channelconfig.Resources), which allows them to get what they need via an intermediate call to the StableBundle. That is good.   In contrast, the sizefilter is given a reference to a OrdereConfig at creation, which allows it to access BatchSize() when evaluating messages.  When the configuration changes, the sizefilter will remain holding a reference to the configuration that was in effect when the respective channel was created. Subsequent calls will not go through StableBundle(), which means that the filter will not apply new values configured.  *Implications* - A change to batch-size will not take effect until restart - A restart to the orderer process will cause the filter to be recreated according to the newest configuration. This means that if the batch-size is updated, and only a subset of orderers are restarted, we end up with two sets of orderers with different batch-size limits.   In rare conditions this may create a fork:  - the batch-size is updated, e.g. from 1000 to 2000 - orderer A is restarted, orderer B remains - A is running with batch-size=2000, B is running with batch-size=1000 - A receives a tx of size 1500 and passes it, after ordering it commits.  - B receives the tx after ordering, and (*) if the sqn changes, will re-evaluate and reject it => fork - (*) for the sqn to change the tx mast follow a config-tx that is not yet committed at the time tx is submitted to ordering.  *The fix* Follow the pattern of sigfilter, OrdererConfig must be retrieved every time a message is evaluated. (~10 lines of code)   ></description> </Issue>
