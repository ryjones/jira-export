<Issue id="45129" key="FAB-17924" number="17924" project="10002" reporter="shimos" assignee="tsharris" creator="shimos" type="10004" summary="chaincode package command does not detect module mode with import path" priority="3" resolution="10203" status="6" created="2020-05-22 15:47:17.0" updated="2020-07-06 15:41:38.0" resolutiondate="2020-07-06 15:41:38.0" votes="0" watches="3" workflowId="59039" archived="N"> <description><! CDATA The `chaincode package` function in the peer command is not detecting legacy and go module mode properly in the following cases:  - (Case 1) When `peer chaincode package` is called with the import path and the chaincode is using go module, unless you are in `$GOPATH/src`, packaging is performed with the legacy mode. This may lead to an issue when the dependent packages are only found in `$GOPATH/pkg`.  - (Case 2) On the other hand, when `go.mod` exists in an ancestor directory (which may be beyond GOPATH), packaging is performed with go module mode.   *(Example for Case 1)*  Suppose GOPATH is `/opt/gopath`, and the chaincode is in `/opt/gopath/src/github.com/hyperledger/fabric-samples/chaincode/fabcar/go`,  When path is relative (`.`), it works with module mode.  {noformat} $ cd /opt/gopath/src/github.com/hyperledger/fabric-samples/chaincode/fabcar/go $ peer lifecycle chaincode package -l golang --label fabcar_1.0 -p . /tmp/fabcar.tar.gz 2020-05-21 16:47:03.933 PDT  bccsp  GetDefault -> DEBU 001 Before using BCCSP, please call InitFactories(). Falling back to bootBCCSP. 2020-05-21 16:47:03.943 PDT  bccsp  GetDefault -> DEBU 002 Before using BCCSP, please call InitFactories(). Falling back to bootBCCSP. 2020-05-21 16:47:03.944 PDT  main  InitCmd -> DEBU 003 peer lifecycle chaincode package does not need to init crypto 2020-05-21 16:47:04.602 PDT  chaincode.platform.util  WriteFileToPackage -> DEBU 004 Writing file to tarball: src/fabcar.go 2020-05-21 16:47:04.602 PDT  chaincode.platform.util  WriteFileToPackage -> DEBU 005 Writing file to tarball: src/go.mod 2020-05-21 16:47:04.602 PDT  chaincode.platform.util  WriteFileToPackage -> DEBU 006 Writing file to tarball: src/go.sum {noformat}  But when path is import path, it goes to legacy mode.  {noformat} $ peer lifecycle chaincode package -l golang --label fabcar_1.0 -p github.com/hyperledger/fabric-samples/chaincode/fabcar/go /tmp/fabcar.tar.gz (snip) 2020-05-21 16:47:52.691 PDT  bccsp  GetDefault -> DEBU 001 Before using BCCSP, please call InitFactories(). Falling back to bootBCCSP. 2020-05-21 16:47:52.701 PDT  bccsp  GetDefault -> DEBU 002 Before using BCCSP, please call InitFactories(). Falling back to bootBCCSP. 2020-05-21 16:47:52.702 PDT  main  InitCmd -> DEBU 003 peer lifecycle chaincode package does not need to init crypto 2020-05-21 16:47:53.425 PDT  chaincode.platform.util  WriteFileToPackage -> DEBU 004 Writing file to tarball: src/github.com/PuerkitoBio/purell/purell.go 2020-05-21 16:47:53.426 PDT  chaincode.platform.util  WriteFileToPackage -> DEBU 005 Writing file to tarball: src/github.com/PuerkitoBio/urlesc/urlesc.go (snip) 2020-05-21 16:47:54.297 PDT  chaincode.platform.util  WriteFileToPackage -> DEBU 259 Writing file to tarball: src/gopkg.in/yaml.v2/yaml.go 2020-05-21 16:47:54.298 PDT  chaincode.platform.util  WriteFileToPackage -> DEBU 25a Writing file to tarball: src/gopkg.in/yaml.v2/yamlh.go 2020-05-21 16:47:54.299 PDT  chaincode.platform.util  WriteFileToPackage -> DEBU 25b Writing file to tarball: src/gopkg.in/yaml.v2/yamlprivateh.go {noformat}  *(Example for Case 2)*  For example, chaincode is BadImport of the test data in the fabric repository, and the repository is located at `/opt/gopath/src/github.com/hyperledger/fabric`. It goes with the module mode and does not produce error for non-existent modules.  Without `go.mod` in the root directory of the fabric repository, it returns an error as expected.  {noformat} $ cd /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/platforms/golang/testdata/src/chaincodes/BadImport $ ls . main.go $ GOPATH=/opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/platforms/golang/testdata peer lifecycle chaincode package -l golang --label bad_1.0 -p . /tmp/bad.tar.gz 2020-05-21 16:54:13.467 PDT  bccsp  GetDefault -> DEBU 001 Before using BCCSP, please call InitFactories(). Falling back to bootBCCSP. 2020-05-21 16:54:13.477 PDT  bccsp  GetDefault -> DEBU 002 Before using BCCSP, please call InitFactories(). Falling back to bootBCCSP. 2020-05-21 16:54:13.478 PDT  main  InitCmd -> DEBU 003 peer lifecycle chaincode package does not need to init crypto 2020-05-21 16:54:13.639 PDT  chaincode.platform.util  WriteFileToPackage -> DEBU 004 Writing file to tarball: src/.dockerignore 2020-05-21 16:54:13.640 PDT  chaincode.platform.util  WriteFileToPackage -> DEBU 005 Writing file to tarball: src/.gitattributes 2020-05-21 16:54:13.640 PDT  chaincode.platform.util  WriteFileToPackage -> DEBU 006 Writing file to tarball: src/.gitignore (snip) 2020-05-21 16:54:28.533 PDT  chaincode.platform.util  WriteFileToPackage -> DEBU 144a Writing file to tarball: src/vendor/gopkg.in/yaml.v2/yaml.go 2020-05-21 16:54:28.533 PDT  chaincode.platform.util  WriteFileToPackage -> DEBU 144b Writing file to tarball: src/vendor/gopkg.in/yaml.v2/yamlh.go 2020-05-21 16:54:28.534 PDT  chaincode.platform.util  WriteFileToPackage -> DEBU 144c Writing file to tarball: src/vendor/gopkg.in/yaml.v2/yamlprivateh.go 2020-05-21 16:54:28.534 PDT  chaincode.platform.util  WriteFileToPackage -> DEBU 144d Writing file to tarball: src/vendor/modules.txt  $ rm /opt/gopath/src/github.com/hyperledger/fabric/go.mod $ GOPATH=/opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/platforms/golang/testdata peer lifecycle chaincode package -l golang --label bad_1.0 -p . /tmp/bad.tar.gz 2020-05-21 16:55:03.010 PDT  bccsp  GetDefault -> DEBU 001 Before using BCCSP, please call InitFactories(). Falling back to bootBCCSP. 2020-05-21 16:55:03.020 PDT  bccsp  GetDefault -> DEBU 002 Before using BCCSP, please call InitFactories(). Falling back to bootBCCSP. 2020-05-21 16:55:03.021 PDT  main  InitCmd -> DEBU 003 peer lifecycle chaincode package does not need to init crypto Error: error getting chaincode bytes: failed to calculate dependencies: incomplete package: bogus/package {noformat}   ></description> </Issue>
