<Issue id="30171" key="FAB-10036" number="10036" project="10002" reporter="manish-sethi" assignee="manish-sethi" creator="manish-sethi" type="10003" summary="Add support for metadata in the ledger commit path" priority="3" resolution="10000" status="6" created="2018-05-14 16:03:47.0" updated="2018-08-25 13:18:14.0" resolutiondate="2018-08-25 13:16:30.0" votes="0" watches="2" workflowId="44454"> <description><! CDATA During validation and preparation of the update batch, make change in the ledger to handle the presence of metadata in the RWSet.  Following are the semantics:  For each *key* that is present in the writes in the read-write set (either because of an update to value, or an update to metadata, or both), the final *value* and *metadata* that should be committed to the state-db (along with the block commit) is derived as follows - Take the value from the highest valid transaction (*Tv*) that updates the value - Take the metadata from the highest valid transaction (*Tm*) that updates the metadata - Construct the the final tuple < value, metadata, version > for the key as < value in *Tv*, metadata in *Tm*, _max_(version of *Tv*, version of *Tm*) > - If *Tv* indicates delete of the key, the  final tuple also indicates the delete of the key  Note that both *Tv* and *Tm* may be either: * The same transaction * Different transactions in the same block  * One of them may already be committed to the state-db as of last committed block.  Further, note that if only *Tv* is present and there is no corresponding *Tm*, the tuple <value, metadata, version> is created with a *nil* metadata. However, if only *Tm* is present with no corresponding *Tv* ( i.e, a transaction tries to update the metadata for a non-existing key), the metadata update of *Tm* has no effect on state.  In other words, *Tv* implies the upsert semantics for a key, while the *Tm* carries update semantics. The main reason of this difference in semantics is to allow the same semantics of a read-write set as as of fabric version 1.1 for the existing protobuf messages (_KVWrite_) and hence the event listeners keep behaving in the same manner  ></description> </Issue>
