<Issue id="26260" key="FAB-7547" number="7547" project="10002" reporter="ales" creator="ales" type="10001" summary="Alternative computation of txid" priority="3" resolution="10001" status="6" created="2017-12-22 08:43:08.0" updated="2020-01-22 22:22:01.0" resolutiondate="2020-01-22 22:22:01.0" votes="0" watches="5" workflowId="35475"> <description><! CDATA The txid is currently computed as H(nonce || creator). This approach was chosen (among other reasons) to ensure that no two transactions could have the same txid. In particular, if H is a cryptographic hash function, two different creators cannot create two transactions with the same txid.  Theoretically however, Bob may force a txid collision on a txid from Alice (who uses cert_A as her creator certificate) as follows: Bob contacts its CA and attempts to generate a certificate cert_B that has as a suffix the bytes of cert_A (e.g. cert_B := prefix || cert_A) which is valid under its MSP. Then assume that Alice chooses a nonce N_A and creates  txid_A = H(N_A || cert_A)  Also assume that N_A := N_A' || prefix  Then Bob can pick as its nonce N_A' and force a collision on the txid since  H(N_A || cert_A) = H(N_A' || prefix || cert_A) = H(N_A' || cert_B)  This scenario is possible because we don't enforce any length checks on either field (nonce and creator). Note that Bob (who can naturally collude with its CA), may generate multiple certificates to increase his chances of success.  It is unclear whether it is actually possible to create this scenario in practice.  We propose to compute txid as H(H(nonce) || H(creator)). This approach follows security best-practices and would ensure that this theoretical scenario cannot occur.  ></description> </Issue>
