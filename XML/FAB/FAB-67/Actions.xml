<Action id="21994" issue="12366" author="christopherferris" type="comment" body="I keep hearing from people this is important. Otomate for instance. I marked as v1.1 but possibly needs to be high.  ~muralisr  please comment." created="2017-04-09 15:02:56.0" updateauthor="christopherferris" updated="2017-04-09 15:02:56.0"/>
<Action id="32556" issue="12366" author="fredbi" type="comment" created="2017-10-17 11:47:23.0" updateauthor="fredbi" updated="2017-10-17 11:48:28.0"> <body><! CDATA I believe too that it is an important feature. It is a difficult problem, though.  Below, I explain why it is important in my view. In short, I think that cross-chaincode TX support allows for more flexible chaincode design/data isolation.  What I would need at least is a clear roadmap for this feature (v1.1, v1.x, won't fix, ...?). h3. Feature: cross-chaincode transaction h3. Use-cases: * SDK initiated transactions * CC initiated transactions * CC triggered transactions within the same transaction context  Bottom line:  {{begin tran}}  {{invoke cc A (x<=10)}}  {{invoke cc B (y <=34)}}  {{commit tran}} h3. Why?  Basically a chaincode is an autonomous object encapsulating all required data and methods to manipulate its data. Fabric ensures that all changes to the persistent state of a chaincode are atomic and consistent (e.g. serializable).  Now let's assume the designer needs to ensure confidentiality on some data items by creating distinct chaincodes, each providing a different view of one single fact, thus creating data redundancy, and thus the need for synchronization.     Example: * an issuer (e0) of some asset (a0) wants to know about the holders of this asset: chaincode instance A0 implements the registry of asset holders (in) * an investor (i0) in asset may also hold assets (ak) from other issuers (ek): chaincode instance I0 implements the portfolio of holdings for this investor  The "ownership fact", i.e. (i0) detains x units of asset (a0) is redundant here and stored in both A0 and I0.  Obviously, the prefered way would be to avoid redundancy and record a unitary "ownership fact" in one single chaincode (BTW, this looks like the pattern followed by "Fabric Composer").  However, this raises important issues: * such an omniscient smart contract would know everything about all (ik) and all (ek) * this smart contract would be loaded with features (e.g. in our example: portfolio management AND asset servicing) * data privacy would require fine-grained data encryption, which is manageable when access is bilateral, but less so when multi-lateral. * no matter how strong encryption we use, such a component would become a highly sensitive logical point of failure, with expected difficulties ahead to maintain it * some customers might be unwilling to distribute private data across the population of all (ik) and all (ek) * The portfolio and asset registry may follow different validation rules. I might be impossible to define a single endorsing policy ruling this universe     Separating chaincodes brings redundancy, which is a synchronization headache. On the other hand, this brings greater flexibility: * Chaincode components are more specialized and simpler. There act more like 'IOTs' than a central notary * It becomes possible to rule them with different set of endorsers and committers  ></body> </Action>
<Action id="32557" issue="12366" author="fredbi" type="comment" created="2017-10-17 11:53:47.0" updateauthor="fredbi" updated="2017-10-17 11:53:47.0"> <body><! CDATA Additional note: my current plan for implementation covering the needs for my own projects is to provide an implementation at the applicative level.  Basically, this implies deploying a "blind TX coordinator" chaincode implementing a 2-phase commit protocol and enforcing all SDK/CC using it.  Quite possible, but will be a drag on performances and code complexity.  ></body> </Action>
<Action id="47015" issue="12366" author="christopherferris" type="comment" body=" ~ellaki  is this still needed?" created="2018-07-06 12:47:56.0" updateauthor="christopherferris" updated="2018-07-06 12:47:56.0"/>
