<Issue id="20559" key="FAB-5999" number="5999" project="10002" reporter="jyellick" creator="jyellick" type="10003" summary="Backwards compatibility non-determinism in validation tracking issue." priority="3" resolution="10000" status="6" created="2017-08-31 14:08:58.0" updated="2018-07-20 14:14:16.0" resolutiondate="2018-01-08 16:23:26.0" votes="0" watches="4" workflowId="39896"> <description><! CDATA All components, please link to this issue as a blocker if you have any new features or bug fixes which will alter the behavior of the transaction validation path.  For example, a new MSP Role which is understood only by version 1.1 fabric could cause a transaction to be flagged as invalid on a v1.0 peer while being flagged as valid on a v1.1 peer. This would cause a state DB fork which creates all sorts of problems like enabling double spending etc.  These issues should not be merged until there is a compatibility mechanism in place to make the validation deterministic across versions. If there is code which has already merged, please re-open the issue and add this as a blocker and make a note that the code has already been merged below.  *SUMMARY OF MERGED CAPABILITIES*  This section will provide a summary of 1.1 capabilities, which can be extended as new capabilities are merged. See /fabric/common/channelconfig code/api.go for the full list. Test suggestions are included.     */Channel capabilities* {noformat} 	// MSPVersion specifies the version of the MSP this channel must understand, including the MSP types 	// and MSP principal types. 	MSPVersion() msp.MSPVersion {noformat} To test, create policies (endorsement or otherwise) utilizing the new Node.OUs such as Org1.Peer, Org2.Client, Org3.Orderer, etc.  Additionally, test defining a network with identity mixer MSPs in the orderer consortium definition,then defining new channels.     */Channel/Application capabilities* {noformat} 	// ForbidDuplicateTXIdInBlock specifies whether two transactions with the same TXId are permitted 	// in the same block or whether we mark the second one as TxValidationCode_DUPLICATE_TXID 	ForbidDuplicateTXIdInBlock() bool {noformat} To test, set the batch count to be high for higher probability. Submit a tx with no readset (only write-set) and then without waiting, immediately resubmit it. You should see two txes in the block, the first marked valid and the second invalid. In v1.0, they would both be marked valid.     */Channe/Orderer capabilities* {noformat} // SetChannelModPolicyDuringCreate specifies whether the v1.0 undesirable behavior of setting the /Channel 	// group's mod_policy to "" should be fixed or not. 	SetChannelModPolicyDuringCreate() bool {noformat} Create a channel at v1.0, and use the `configtxgen -inspectBlock` to confirm that the `/Channel` group has an empty `mod_policy`. Do the same with the capability enabled, and see that this `mod_policy` now reads `Admins` {noformat} // Resubmission specifies whether the v1.0 non-deterministic commitment of tx should be fixed by re-submitting 	// the re-validated tx. 	Resubmission() bool {noformat} This is internal to the orderer only, so is harder to test. But, submit a channel configuration while submitting a stream of txes. Ensure that no txes are lost.     ></description> </Issue>
