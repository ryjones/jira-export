<Action id="72008" issue="47101" author="JIRAUSER19830" type="comment" created="2021-07-29 12:58:05.0" updateauthor="JIRAUSER19830" updated="2021-07-29 12:58:05.0"> <body><! CDATA I tried to recreate the problem with integration testcase by manipulating the envelope, but not successful.     https://github.com/hyperledger/fabric/blob/87ea070abead1c9df5b42d54a2ff8fae21ba5c63/integration/raft/client.go#L46   If you can provide more information on the invocation/payload or tweaking any orderer IT testcase(https://github.com/hyperledger/fabric/blob/87ea070abead1c9df5b42d54a2ff8fae21ba5c63/integration/raft/channel_participation_test.go#L1106) would help to debug this issue.  ></body> </Action>
<Action id="72020" issue="47101" author="JIRAUSER22201" type="comment" created="2021-08-12 01:15:41.0" updateauthor="JIRAUSER22201" updated="2021-08-12 01:15:41.0"> <body><! CDATA Sorry for delay response.   ~Param-S   Similar to the FAB-18528,  the constructed message sent from other orderers (through the interface "chain.rpc.SendSubmit(dest uint64, request *orderer.SubmitRequest, report func(err error))") do not have a proper validation check, which can easily trigger this crash, leads to the breakdown of the orderer.     The base64 encoding message of *orderer.SubmitRequest can be found in the  ^fuzz input2 in base64   This vulnerability can break down as many orderers as you want without effort. And It can be fixed easily by adding a nil pointer check.              ></body> </Action>
<Action id="72038" issue="47101" author="JIRAUSER19830" type="comment" body="Added null check: PR  https://github.com/hyperledger/fabric/pull/2838/files " created="2021-08-19 13:04:57.0" updateauthor="JIRAUSER19830" updated="2021-08-19 13:04:57.0"/>
