<Issue id="12337" key="FAB-38" number="38" project="10002" reporter="gennadyl" assignee="gennadyl" creator="gennadyl" type="10001" summary="Flow control and communcation code centralization" priority="3" resolution="10000" status="6" created="2016-08-12 12:20:57.0" updated="2018-07-20 18:58:14.0" resolutiondate="2017-03-13 07:36:32.0" votes="0" watches="2" workflowId="36014"> <description><! CDATA There are 3 messages streams in the code - Chat in fabric.proto, Chat in events.proto and Register in chaincode.proto.  All three streams are created more or less in the same manner (upon stream creation a handler object is created and from that point it handles all the stream communication) and all three lack a mechanism of user / applications level configurable flow control, only grpc level flow control.  The idea is to leave those handlers relatively unchanged, but instead of sending messages directly to the stream they will send messages to channels and some comm layer code will actually send them to the real streams. The same pattern will be used to handle incoming messages - instead of calling the handler handleMessage method directly after stream.Recv(), messages will be put in a channel and another go routine will call handler.handleMessage.  Handling messages in and out channels, go routines, etc will be placed in a separate module in core/comm package.  Gerrit: https://gerrit.hyperledger.org/r/#/c/535/   ></description> </Issue>
