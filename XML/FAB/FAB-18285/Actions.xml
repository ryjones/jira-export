<Action id="70685" issue="46230" author="manish-sethi" type="comment" body=" ~denyeart  - can you triage this?" created="2020-11-16 18:53:17.0" updateauthor="manish-sethi" updated="2020-11-16 18:53:17.0"/>
<Action id="70691" issue="46230" author="JIRAUSER20970" type="comment" created="2020-11-17 01:34:05.0" updateauthor="JIRAUSER20970" updated="2020-11-17 01:34:05.0"> <body><! CDATA addition：  peer0、peer1 container are on the same virtual machine.  org1、org2、org3 are on the different VMs.  maybe its not the factor that cause this problem  mention it in case.  ></body> </Action>
<Action id="70767" issue="46230" author="denyeart" type="comment" created="2020-11-20 00:03:26.0" updateauthor="denyeart" updated="2020-11-20 00:04:12.0"> <body><! CDATA  ~sennri  What error do you receive? Please post peer log showing the issue. Note that joining a channel should not have anything to do with chaincode definition (init-required), so I'm not seeing the connection. Please explain why you think the join issue is related to init-required.  I've returned the bug for more information. After you provide more information, please click the "Information Provided" button.  ></body> </Action>
<Action id="70774" issue="46230" author="JIRAUSER20970" type="comment" created="2020-11-20 13:48:57.0" updateauthor="JIRAUSER20970" updated="2020-11-20 13:48:57.0"> <body><! CDATA -What error do you receive?  Please post peer log showing the issue  No error, so i adjust the log level to debug to show more information.  i hope that it would help you.  -Please explain why you think the join issue is related to init-required.  Sorry. in my opinion, it does not make sense too, maybe this is the reason why we call them bugs,  right?  i just control the conditions,   when i skipped other operation, this bug would still appear.  i succeed to join peer1 to a new channel for many times.   at first i guessed something wrong with my chaincode.   so i tried to approve fabcar using init-requied=false, the bug still existed.  Afterwards, i use init-requied=true to approve the former chaincode,  peer1 worked normally.  it is hard to believe the init-required flag would affect the peer node itself,  it's weird but true.  ></body> </Action>
<Action id="70777" issue="46230" author="denyeart" type="comment" created="2020-11-21 12:34:02.0" updateauthor="denyeart" updated="2020-11-21 12:34:02.0"> <body><! CDATA After joining the channel, the peer cannot connect with the orderer to get blocks:   33m2020-11-20 20:26:06.334 CST  peer.blocksprovider  DeliverBlocks -> WARN 1f87 0m Could not connect to ordering service: could not dial endpoint 'orderer0.FZU:7050': failed to create new connection: connection error: desc = "transport: error while dialing: dial tcp: lookup orderer0.FZU on 127.0.0.11:53: no such host" channel=mychannel  The peer does receive blocks from other peers via gossip however, and commits blocks 1 through 6:   34m2020-11-20 20:26:10.831 CST  kvledger  CommitLegacy -> INFO 2c10 0m  mychannel  Committed block  6  with 1 transaction(s) in 326ms (state_validation=218ms block_and_pvtdata_commit=15ms state_commit=87ms) commitHash= 67541960336fbb3c8ee7c78e3bd3f78b9619f041b40fa668256b66d9e6dee37e   It is recommended to keep the gossip defaults as of v2.2:   {code:java} peer.gossip.orgLeader: true peer.gossip.useLeaderElection: false {code}   This will help to rule out any gossip issues. But first you need to make sure your peer can connect to orderer. Closing due to environmental issue.  BTW, if you need to re-open, this is a recommended debug string to disable useless debug noise:   {code:java} FABRIC_LOGGING_SPEC=debug:cauthdsl,policies,msp,grpc,peer.gossip.mcs,gossip,leveldbhelper=info {code}   ></body> </Action>
<Action id="70779" issue="46230" author="JIRAUSER20970" type="comment" created="2020-11-21 13:30:11.0" updateauthor="JIRAUSER20970" updated="2020-11-21 13:57:24.0"> <body><! CDATA i am sorry, i don't familiar with the docker logs operation. no bug reported anyway. why not try out for at least one time to reproduce this bug in your fresh? i think it is easy to reproduce, and then you can lock on the problem in your container. maybe using peer.gossip.orgLeader: true peer.gossip.useLeaderElection: false is another workaround, but we still don't know why it happended and the weird connection is still there. in addition, i just use - CORE_PEER_GOSSIP_USELEADERELECTION=true - CORE_PEER_GOSSIP_ORGLEADER=false  in the composer yaml file, is it wrong? what‘s more , the orderer0 didn‘t exit.  and i can ping 127.0.0.11:53 in the peer1 container as well. if the peer can't connect to orderer container,  i think it is impossible for me to fetch the 0 block and join the channel either.  ></body> </Action>
<Action id="70780" issue="46230" author="denyeart" type="comment" created="2020-11-21 16:22:38.0" updateauthor="denyeart" updated="2020-11-21 16:22:38.0"> <body><! CDATA I'm not seeing any bug in your log.  In your log, the peer does indeed get the blocks and commit them.  In the problem statement you said it does not get the blocks.  If you still think there is some bug, clarify what the problem is, and mention where it occurs in the log's timestamp.  ></body> </Action>
<Action id="70781" issue="46230" author="JIRAUSER20970" type="comment" created="2020-11-22 07:37:02.0" updateauthor="JIRAUSER20970" updated="2020-11-22 07:40:11.0"> <body><! CDATA log of *cli.peer1 of org2*  {code:bash} bash-5.0# peer channel list 2020-11-22 15:08:48.559 CST  channelCmd  InitCmdFactory -> INFO 001 Endorser and orderer connections initialized Channels peers has joined: mychannel bash-5.0# peer channel getinfo -c mychannel 2020-11-22 15:09:08.388 CST  channelCmd  InitCmdFactory -> INFO 001 Endorser and orderer connections initialized Blockchain info:{"height":1,"currentBlockHash":"IswvIu9v8VrnaDwLQQQaS8peTkFLTzEyuK67TwSO+JY="} {code}   sigh. this channel has 7 blocks already. i just can't execute any command about channel operation after “join” the channel. Such as peer chaincode invoke & query. it think it is 'joined' itself， and can't get any info about the channel at the same time. it acts just like it has no block other than 0 block. it contradicts to what the container log said（get all blocks already）.  And this is the what common peer cli would show（*log of cli.peer1 of org1*）  {code:bash} bash-5.0# peer channel list 2020-11-22 15:08:03.194 CST  channelCmd  InitCmdFactory -> INFO 001 Endorser and orderer connections initialized Channels peers has joined: mychannel bash-5.0# peer channel getinfo -c mychannel 2020-11-22 15:08:13.107 CST  channelCmd  InitCmdFactory -> INFO 001 Endorser and orderer connections initialized Blockchain info: {"height":7,"currentBlockHash":"4Y5AlotAsbpZZykEjrgflWkVppgIgSUK+uime1Z65B0=","previousBlockHash":"mwjlgcCbLTEbklaxAAb0x2ntmCBW54I1Tsw/tUO0knc="} {code}    in addition. the peer1.org1 eccountered the same problem yesterday， but when i entered the container just now，everything went right. peer1.org2 is just not as “lucky” as peer1.org1.  ></body> </Action>
