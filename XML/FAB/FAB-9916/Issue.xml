<Issue id="29988" key="FAB-9916" number="9916" project="10002" reporter="denyeart" assignee="senthil1" creator="denyeart" type="10002" summary="TEST PLAN: Side DB Private data" priority="3" resolution="10001" status="6" created="2018-05-07 01:43:53.0" updated="2020-01-22 22:32:44.0" resolutiondate="2020-01-22 22:32:44.0" votes="0" watches="4" workflowId="43271"> <description><! CDATA Before closing this testplan task, coverage must be reviewed and approved (via upvote or comment) by the epic feature owner and the test leads identified below.  +*Location / Description of*+ docs, APIs, config vars, system configuration (fabric, SDKs, fabric-samples) :   WHERE IS THE CONFIGURATION INFORMATION - description, defaults, recommendations or sample?     +*Unit Test (UT) leader*+:  ~Senthil1  / Manish  Automated unit tests are merged in repo, as go tests or otherwise part of build/verify jenkins jobs. Code coverage tracked in Jenkins:  https://jenkins.hyperledger.org/view/Daily/job/fabric-unit-test-coverage-daily-master-x86_64/   The following ledger sub-packages have <= 90% coverage. Some packages are directly related to SideDB whereas others are indirectly related. We need to see whether we can increase the test coverage to > 90% and if impossible, we need to state the reason. # github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/validator/valinternal 0% # github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/validator/valimpl 23% – FAB-10070  FAB-10077 # github.com/hyperledger/fabric/core/ledger/ledgerconfig 56%          --              --              --      -- -FAB-10104-------- # github.com/hyperledger/fabric/core/ledger/pvtdatapolicy 61% - ------FAB-10090------ # github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/privacyenabledstate 68% # github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/txmgr/lockbasedtxmgr 70% # github.com/hyperledger/fabric/core/ledger/ledgerstorage 72% - ------FAB-10093------ # github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/pvtstatepurgemgmt 78% - ----FAB-10092---- # github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/rwsetutil 86% # github.com/hyperledger/fabric/gossip/privdata 84.7% - FAB-10155  +*Function Test (FVT) leader*+:  ~Senthil1  / Manish In v1.2 the peer is not well structured for integration tests, therefore we will compensate with expanded Unit tests and expanded E2E tests using ginkgo. Describe function test coverage approach here:  A.  Expand unit testcases beyond traditional UT coverage, for the following integration scenarios that otherwise might be done using the ginko framework): # FAB-10094 - For testing drop and rebuild of dbs/indexes #  FAB-10095 - For testing sidedb (pvt data related) functions at the ledger level  B.  E2E testcases scenarios (Add one individual jira TASK within this feature Epic for each of these): We would do the following 4 tests using e2e cli scripts for the time being.  # FAB-9992 – to test collection membership upgrades in v1.2 # FAB-9993 – to test SideDB behavior with a mix of peer executables, i.e., a mix of v1.1 and v1.2 peer executables (such scenario would happen during a rolling upgrade) # FAB-9994 – to test SideDB behavior before and after rolling upgrade from v1.1 to v1.2 # FAB-9995 – to test ledger integrity after adding a new v1.2 peer in a recently upgraded fabric network (i.e., from v1.1 network to v1.2 network) # FAB-10156 - Dissemination of the private data to for organization added to collection config # FAB-10157 - Test network partition with respect of private data distribution and availability # FAB-10262 - Check that while endorsing private data against peer with different ledger height pick most recent collection config # FAB-10482 - Test: private data is not disseminated to organization removed from collection config # FAB-10484 - Test: Add integration test for side db, to check peers respects BTL parameter # FAB-10486 Test: Dissemination of the private data to organization removed and then added back to collection config  C.  Other functional testing required:  Function tests to verify e2e function from user experience # --FAB-10162-- - Test: Manually exercise private data chaincode in dev env (one peer using native binary) # --FAB-10231-- - Test: Manually exercise private data chaincode using BYFN network (2 orgs of 2 peers each, using docker containers)  +*System Verification Test (SVT) leader*+:  ~rlalgowdar  V1.2 System Test Plan (Epic) FAB- Covers stress, load, performance, full system integration, resiliency, recover, etc.  Considering this feature, what scenarios are of particular interest and concern: #  FAB-10137 SideDB - LevelDB Performance Test: 1 Million Query #  FAB-10136  SideDB - LevelDB Performance Test: Concurrent operation of 1) 1 Million Query 2) 1 million Invoke #  FAB-10135  SideDB - CouchDB Performance Test: 1 Million Query of 2-Field Rich Query #  FAB-10134  SideDB - CouchDB Performance Test: 1 Million Query of 4-Field Rich Query #  FAB-10131  SIdeDB - CouchDB Performance Test: Concurrent operation of: 1)1 Million Invoke And 2) 1 million Query of 2-Field Rich Query #  FAB-10130  SideDB - CouchDB Performance Test: Concurrent operation of: 1)1 Million Invoke And 2) 1 million Query of 4-Field Rich Query #  FAB-10129  SideDB - CouchDB Performance Test: Concurrent operation of: 1)1 Million Invoke , 2) 1 million Query of 2-Field Rich Query, 3) Index rebuild #  FAB-10128 SideDB-CouchDB Performance Test: Concurrent operation of: 1)1 Million Invoke , 2) 1 million Query of 4-Field Rich Query, 3) Index rebuild #  FAB-10146 SideDB-LevelDB Long Run (24 Hrs) Baseline Traffic #  FAB-10145 SideDB-CouchDB Long Run (24 Hrs) Baseline Traffic  Dave Enyeart system test feedback:   ~rlalgowdar  The system tests highlighted came from the couchdb index tests.  While it is important to test couchdb queries and indexes for private data, that will largely use the same path as normal channel data queries, and therefore no need to re-run ALL the couchdb scenarios for private data.  Rather, I would take a couple of the tests, and add some variants that are interesting from the perspective of private data, for example:  Test aggressive endorsement-time push to all peers (maxPeerCount equal to number of peers) vs no push and only pull at validation/commit time (maxPeerCount of 0 ensures no pushing).  This could be done in two different tests (for isolation), or a single test could have one collection that only pushes and another collection that only pulls.  Send invokes to one set of peers, and then do queries on another set of peers to ensure the private data got disseminated.  Configure a blockToLive so that collection data gets purged after N blocks.  Take peers down and up and ensure private data still gets disseminated (any peer that was not up at push time will have to pull the private data upon later block commit).  Join a new peer to the channel and ensure it can catch up in block height, in the presence of both purged data and remaining data.  Do all of the above with 2 orgs / 2 peers each as a start, and then increase the concurrent load and number of orgs/peers.     ></description> </Issue>
