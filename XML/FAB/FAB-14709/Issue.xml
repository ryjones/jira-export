<Issue id="38580" key="FAB-14709" number="14709" project="10002" reporter="dbshah" creator="dbshah" type="10002" summary="Operations missing config ClientRootCAs from orderer.yaml" priority="3" resolution="10000" status="6" created="2019-03-19 18:21:37.0" updated="2019-11-18 18:17:07.0" resolutiondate="2019-03-21 19:36:58.0" votes="0" watches="3" workflowId="50223"> <description><! CDATA In orderer logs the configs for operations are: {code:java} Operations.ListenAddress = "0.0.0.0:8443" Operations.TLS.Enabled = true Operations.TLS.PrivateKey = "/certs/tls/keystore/key.pem" Operations.TLS.Certificate = "/certs/tls/signcerts/cert.pem" Operations.TLS.RootCAs =  /certs/tls/cacerts/cacert.pem  Operations.TLS.ClientAuthRequired = false Operations.TLS.ClientRootCAs =    {code}    In orderer.yaml:    {code:java} Operations:    # host and port for the operations server ListenAddress: 127.0.0.1:8443 # TLS configuration for the operations endpoint TLS:        # TLS enabled Enabled: false # Certificate is the location of the PEM encoded TLS certificate Certificate: # PrivateKey points to the location of the PEM-encoded key PrivateKey: # Require client certificate authentication to access all resources ClientAuthRequired: false # Paths to PEM encoded ca certificates to trust for client authentication RootCAs:    {code}    Comparing the above two, ClientRootCAs is missing from orderer.yaml. The only way to add that or override the config is to update the orderer.yaml. If we are running hyperledger fabric images, that means editing the `orderer.yaml` in the image and adding that field, only after that does the environment variable override work.     Can someone please look into if it was deliberately left or was missed. Also, comparing with the peer's operations config from core.yaml, the peer's config does not have a field for Operations.TLS.RootCAs but only has Operations.TLS.clientRootCAs.files.     ></description> </Issue>
