<Issue id="45727" key="FAB-18104" number="18104" project="10002" reporter="tock" creator="tock" type="10001" summary="Improve robustness of cluster.BlockPuller" priority="3" status="10100" created="2020-07-30 13:27:08.0" updated="2020-07-30 13:41:21.0" votes="0" watches="1" workflowId="59628" archived="N"> <description><! CDATA The BlockPuller from the cluster package fetches a batch of blocks from another orderer, and then uses the following function to verify the batch.   https://github.com/hyperledger/fabric/blob/84396aaa4164a0d992b3b3e61e55b6ad7a9878c8/orderer/common/cluster/util.go#L202   However, that function does not verify all the signatures of the blocks, only config blocks and the last block.  In addition, it verifies the hash chain only within the batch, disregarding the block just previous to the batch.    https://github.com/hyperledger/fabric/blob/84396aaa4164a0d992b3b3e61e55b6ad7a9878c8/orderer/common/cluster/util.go#L210   As a result, code that uses the BlockPuller is forced to verify the hash chain itself, and worse, there is a danger of accepting blocks with corrupt signatures.     In this task the block verification BlockPuller should be augmented and made to resemble what the peer does: check every signature and verify the hash chain completely, skipping no blocks.     When this task is done, it will be possible to remove the redundant hash chain checks from code that uses the BlockPuller.  ></description> </Issue>
