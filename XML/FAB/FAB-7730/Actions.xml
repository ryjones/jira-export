<Action id="38615" issue="26801" author="c0rwin" type="comment" created="2018-01-15 07:47:49.0" updateauthor="c0rwin" updated="2018-01-15 07:47:49.0"> <body><! CDATA So current implementation were based on the existing filtering events  {{eventhelper.go}}|https://github.com/hyperledger/fabric/blob/master/events/producer/eventhelper.go#L97 :  {code} 						ccEvent, err := utils.GetChaincodeEvents(caPayload.Events) 						if err != nil { 							return nil, nil, "", fmt.Errorf("error unmarshalling chaincode event for block event: %s", err) 						}  						chaincodeAction := &pb.FilteredChaincodeAction{} 						if ccEvent.GetChaincodeId() != "" { 							filteredCcEvent := ccEvent 							// nil out ccevent payload 							filteredCcEvent.Payload = nil 							chaincodeAction.CcEvent = filteredCcEvent 						} 						transactionActions.ChaincodeActions = append(transactionActions.ChaincodeActions, chaincodeAction) {code}  Please update if the payload *DO* need to be populated, since it wasn't beforehand.  ></body> </Action>
<Action id="38621" issue="26801" author="denyeart" type="comment" body="Per FAB-5481 the design was that only event name got populated, not the event payload.  This alerts a client that there was an event, but the client would have to then retrieve the full block if they want the event payload.  I&apos;m not suggesting I agree with this, that&apos;s just what was written in FAB-5481 design.  We&apos;ll need to check with  ~wlahti  and  ~muralisr  on the original rationale." created="2018-01-15 11:10:32.0" updateauthor="denyeart" updated="2018-01-15 11:10:32.0"/>
<Action id="38631" issue="26801" author="harrisob@us.ibm.com" type="comment" body="as a side note is there a reason the new event proto has a mix of camel case names and underscore names along with a mix of repeated names that end in &apos;s&apos; and those do not ?" created="2018-01-15 14:21:15.0" updateauthor="harrisob@us.ibm.com" updated="2018-01-15 14:21:15.0"/>
<Action id="38636" issue="26801" author="c0rwin" type="comment" created="2018-01-15 14:33:47.0" updateauthor="c0rwin" updated="2018-01-15 14:33:47.0"> <body><! CDATA {quote} as a side note is there a reason the new event proto has a mix of camel case names and underscore names along with a mix of repeated names that end in 's' and those do not ? {quote}  apparently this is a mistake  ></body> </Action>
<Action id="38637" issue="26801" author="c0rwin" type="comment" body=" ~harrisob@us.ibm.com  to address your question please see FAB-7731 and consequent CR https://gerrit.hyperledger.org/r/16839" created="2018-01-15 14:43:02.0" updateauthor="c0rwin" updated="2018-01-15 14:43:02.0"/>
<Action id="38638" issue="26801" author="jyellick" type="comment" created="2018-01-15 14:50:10.0" updateauthor="jyellick" updated="2018-01-15 14:50:10.0"> <body><! CDATA Can we identify the original requirement for including the chaincode event in the filtered block?  To me, this sounds like a bad idea.  If the purpose of the filtered block is security oriented, then including the chaincode events (and especially their payload) seems to defeat the purpose, as it would very likely leak at least the chaincode being invoked, if not much more.  ></body> </Action>
<Action id="38640" issue="26801" author="denyeart" type="comment" body="I&apos;ve heard the requirement to include chaincode events from a few people, I know this is important for  ~troyronda  .  I agree that it can leak information.  I think Troy mentioned previously that he thought it was ok, since chaincodes can opt not to send chaincodes events.  Let&apos;s hear full rationale from Troy&apos;s perspective.  Also Troy, can you comment on the original question in Description (if including chaincode event name but not chaincode event payload is helpful)?" created="2018-01-15 15:26:54.0" updateauthor="denyeart" updated="2018-01-15 15:27:22.0"/>
<Action id="38643" issue="26801" author="troyronda" type="comment" body=" ~denyeart  - The chaincode event name (not payload) is important for notification purposes in the filtered events. If the client is interested in that event then the client calls back to chaincode. This handling is similar to when a client receives an event for a transaction of interest then the client calls back. We are careful to ensure that chaincode event names minimize leaking." created="2018-01-15 16:01:51.0" updateauthor="troyronda" updated="2018-01-15 16:15:24.0"/>
<Action id="38644" issue="26801" author="c0rwin" type="comment" body="Closing this item since it works as expected " created="2018-01-15 16:19:47.0" updateauthor="c0rwin" updated="2018-01-15 16:19:47.0"/>
<Action id="38646" issue="26801" author="muralisr" type="comment" body=" ~C0rWin  just my two cents (great after closing the JIRA eh ? :-) but just saw the mention on RC)...  The rationale for the original requirement  was to take a middle course to _minimize leaking_  (just to piggyback on  ~troyronda  comment above) but give enough information to avoid churn.  Users can further play with the CC event name to reduce the leakage if they so wish." created="2018-01-15 17:24:17.0" updateauthor="muralisr" updated="2018-01-15 17:24:17.0"/>
