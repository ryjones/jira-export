<Action id="69274" issue="45080" author="JIRAUSER20158" type="comment" created="2020-05-19 09:13:35.0" updateauthor="JIRAUSER20158" updated="2020-05-19 09:20:32.0"> <body><! CDATA I've done an additional test:  1. I modified the "default" orderer.yaml in ...hyperledger/fabric/sampleconfig 2. I rebuild the Orderer Docker Image GO_TAGS=pkcs11 make orderer-docker 3. I comment out the PKCS#11 stuff (environment) from my own myOrderer.yaml (as in Test 1 ..3)  ---------------------------------------- Test 4 ---------------------------------------- Modified "default" orderer.yaml in ...hyperledger/fabric/sampleconfig: BCCSP: Default: PKCS11 PKCS11: Library: /etc/hyperledger/fabric/HSM_lib/libsofthsm2.so Label: ForFabric Pin: 98765432 Hash: SHA2 Security: 256 Immutable: false  Configuration of my own myOrderer.yaml: services: myOrderer:  container_name: myOrderer  image: "hyperledger/fabric-orderer:${IMAGE_TAG}" environment: -- SOFTHSM2_CONF=/etc/hyperledger/fabric/HSM_config/softhsm2.conf -- FABRIC_LOGGING_SPEC=debug -- ORDERER_GENERAL_LISTENADDRESS=0.0.0.0 -- ORDERER_GENERAL_GENESISMETHOD=file -- ORDERER_GENERAL_GENESISFILE=/etc/hyperledger/configtx/genesis.block -- ORDERER_GENERAL_LOCALMSPID=myMSP -- ORDERER_GENERAL_LOCALMSPDIR=/etc/hyperledger/msp/orderer/msp  Output of myOrderer during start myOrderer    | 2020-05-19 08:03:28.045 UTC  viperutil  EnhancedExactUnmarshal -> DEBU 0ce map consensus:map SnapDir:/var/hyperledger/production/orderer/etcdraft/snapshot WALDir:/var/hyperledger/production/orderer/etcdraft/wal  debug:map BroadcastTraceDir:<nil> DeliverTraceDir:<nil>  fileledger:map Location:/var/hyperledger/production/orderer Prefix:hyperledger-fabric-ordererledger  general:map Authentication:map NoExpirationChecks:<nil> TimeWindow:15m  BCCSP:map Default:PKCS11 PKCS11:map Hash:SHA2 Immutable:false Label:ForFabric Library:/etc/hyperledger/fabric/HSM_lib/libsofthsm2.so Pin:98765432 Security:256   Cluster:map CertExpirationWarningThreshold:<nil> ClientCertificate:<nil> ClientPrivateKey:<nil> DialTimeout:<nil> ListenAddress:<nil> ListenPort:<nil> RPCTimeout:<nil> ReplicationBackgroundRefreshInterval:<nil> ReplicationBufferSize:<nil> ReplicationMaxRetries:<nil> ReplicationPullTimeout:<nil> ReplicationRetryTimeout:<nil> RootCAs:<nil> SendBufferSize:10 ServerCertificate:<nil> ServerPrivateKey:<nil> TLSHandshakeTimeShift:<nil>  ConnectionTimeout:<nil> GenesisFile:/etc/hyperledger/configtx/genesis.block GenesisMethod:file GenesisProfile:SampleInsecureSolo Keepalive:map ServerInterval:7200s ServerMinInterval:60s ServerTimeout:20s  LedgerType:file ListenAddress:0.0.0.0 ListenPort:7050 LocalMSPDir:/etc/hyperledger/msp/orderer/msp LocalMSPID:MyMSP Profile:map Address:0.0.0.0:6060 Enabled:false  SystemChannel:<nil> TLS:map Certificate:tls/server.crt ClientAuthRequired:false ClientRootCAs:<nil> Enabled:false PrivateKey:tls/server.key RootCAs: tls/ca.crt    kafka:map Retry:map Consumer:map RetryBackoff:2s  LongInterval:5m LongTotal:12h Metadata:map RetryBackoff:250ms RetryMax:3  NetworkTimeouts:map DialTimeout:10s ReadTimeout:10s WriteTimeout:10s  Producer:map RetryBackoff:100ms RetryMax:3  ShortInterval:5s ShortTotal:10m  SASLPlain:map Enabled:false Password:<nil> User:<nil>  TLS:map Certificate:<nil> ClientAuthRequired:<nil> ClientRootCAs:<nil> Enabled:false PrivateKey:<nil> RootCAs:<nil>  Topic:map ReplicationFactor:3  Verbose:false Version:<nil>  metrics:map Provider:disabled Statsd:map Address:127.0.0.1:8125 Network:udp Prefix:<nil> WriteInterval:30s   operations:map ListenAddress:127.0.0.1:8443 TLS:map Certificate:<nil> ClientAuthRequired:false ClientRootCAs:   Enabled:false PrivateKey:<nil> RootCAs:<nil>   ramledger:map HistorySize:1000   myOrderer    | 2020-05-19 08:03:28.052 UTC  orderer.common.server  Main -> ERRO 0cf failed to parse config:  Error unmarshaling config into struct: 1 error(s) decoding: myOrderer    |  myOrderer    | * error decoding 'General.BCCSP': could not decode bcssp type: 1 error(s) decoding: myOrderer    |  myOrderer    | * 'PKCS11.pin' expected type 'string', got unconvertible type 'int' myOrderer exited with code 1  User friendly formated output of map: LocalMSPDir:/etc/hyperledger/msp/orderer/msp  LocalMSPID:MyMSP  BCCSP:map  Default:PKCS11  PKCS11:map  Hash:SHA2  Immutable:false  Label:ForFabric  Library:/etc/hyperledger/fabric/HSM_lib/libsofthsm2.so  Pin:98765432  Security:256     ></body> </Action>
<Action id="69331" issue="45080" author="JIRAUSER20158" type="comment" created="2020-05-26 12:00:36.0" updateauthor="JIRAUSER20158" updated="2020-05-26 12:00:36.0"> <body><! CDATA Result of further analysis: The problem is, that during unmashaling the type of the PKCS11.pin is set to int - but the following decoder run expects a string.   'PKCS11.pin' expected type 'string', got unconvertible type 'int'  Start of Orderers: myOrderer    | 2020-05-26 09:22:09.924 UTC  viperutil  unmarshalJSON -> DEBU 06a Unmarshal JSON: value is not a string: 98765432 myOrderer    | 2020-05-26 09:22:09.924 UTC  viperutil  getKeysRecursively -> DEBU 06b Found real value for general.BCCSP.PKCS11.Pin setting to int 98765432  Output of my code instrumentation: myOrderer    | decodeString() - name = PKCS11.pin myOrderer    | decodeString() - dataVal = %!s(int=98765432) myOrderer    | decodeString() - unknown dataKind = int myOrderer    | decodeString() - PKCS11.pin not converted  --------------------------------------- Fix/correction: For the test the "default" orderer.yaml in ...hyperledger/fabric/sampleconfig was changed:  PKCS11: # Location of the PKCS11 module library Library: /etc/hyperledger/fabric/HSM_lib/libsofthsm2.so # Token Label Label: ForFabric # User PIN Pin: "98765432"         <== now a String !!! Hash: SHA2 Security: 256 Immutable: false  Start des Orderers: orderer.unibw.de    | 2020-05-26 09:46:43.534 UTC  viperutil  unmarshalJSON -> DEBU 059 Unmarshal JSON: value cannot be unmarshalled: json: cannot unmarshal number into Go value of type map string string orderer.unibw.de    | 2020-05-26 09:46:43.534 UTC  viperutil  getKeysRecursively -> DEBU 05a Found real value for general.BCCSP.PKCS11.Pin setting to string 98765432  Die Instrumentierung des Codes brachte folgende Ausgabe: orderer.unibw.de    | decodeString() - name = PKCS11.pin orderer.unibw.de    | decodeString() - dataVal = 98765432 orderer.unibw.de    | decodeString() - dataKind = string  --------------------------------------- Result/Summary: Change the doc or the code to correct the misbehavior!   ></body> </Action>
<Action id="69355" issue="45080" author="sykesm" type="comment" created="2020-05-29 17:08:52.0" updateauthor="sykesm" updated="2020-05-29 17:08:52.0"> <body><! CDATA As you’ve observed, {{orderer.yaml}} is a {{yaml}} document and in our configuration model, the pin is typed as a {{string}} and the security field is an {{int}}. When you don’t quote a numeric value in yaml, it is treated as a number instead of a string. (The same thing happens with boolean values.)  {code} type PKCS11Opts struct {                                                                                                    // Default algorithms when not specified (Deprecated?)                                                                    SecLevel   int    `mapstructure:"security" json:"security"`                                                               HashFamily string `mapstructure:"hash" json:"hash"`                                                                        // Keystore options                                                                                                       Ephemeral bool `mapstructure:"tempkeys,omitempty" json:"tempkeys,omitempty"`                                               // PKCS11 options                                                                                                         Library    string `mapstructure:"library" json:"library"`                                                                 Label      string `mapstructure:"label" json:"label"`                                                                     Pin        string `mapstructure:"pin" json:"pin"`                                                                         SoftVerify bool   `mapstructure:"softwareverify,omitempty" json:"softwareverify,omitempty"`                               Immutable  bool   `mapstructure:"immutable,omitempty" json:"immutable,omitempty"`                                         }  {code}  From what I can tell, the examples in the documentation should be quoting the pin.  The SecLevel field (named “security” in the configuration document) is a different story. If setting the environment variable causes a problem, that’s a bug in the code that needs to be addressed.  I’d also suggest that a pull request is often the easiest way to “Change the doc or the code to correct the misbehavior!” and, in general, we welcome such changes.  ></body> </Action>
<Action id="69357" issue="45080" author="tsharris" type="comment" body=" https://github.com/hyperledger/fabric/pull/1353 " created="2020-05-29 19:49:37.0" updateauthor="tsharris" updated="2020-05-29 19:49:37.0"/>
