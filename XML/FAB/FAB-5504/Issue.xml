<Issue id="19534" key="FAB-5504" number="5504" project="10002" reporter="jyellick" assignee="jyellick" creator="jyellick" type="10001" summary="Vendor github.com/pkg/errors" priority="3" resolution="10000" status="6" created="2017-07-27 15:01:18.0" updated="2018-07-20 18:50:35.0" resolutiondate="2017-08-02 18:39:45.0" votes="5" watches="6" workflowId="39567" security="10001"> <description><! CDATA This issue was originally created as a sub-task for some orderer work around improving serviceability.  Doing some reading on the internet around best practices for handling errors in Go, I found this article:  https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully  and thought that using the https://github.com/pkg/errors package sounded like a good idea within the orderer.  I submitted a CR to vendor this package, but  ~yacovm  pointed out that this duplicates the error handling already created in {{fabric/common/errors}}.  Some discussion ensued with  ~C0rWin  and  ~kchristidis  on Gerrit via:  https://gerrit.hyperledger.org/r/#/c/11981/  On rocketchat.   ~wlahti  indicated that he and Gabor were unaware of this package during the implementation of {{fabric/common/errors}} and sees that the existing error framework could be reworked on top of it but did not have a strong preference for picking up the package or not.  Per suggestion from  ~C0rWin  I'm adding this review-needed tag to this issue so that the maintainers can weigh in on whether we should bring in this package or not.  Although I welcome discussion below, a quick summary from existing discussions:  Pros of including this package: 1. We do not have to maintain it 2. It's a popular package other developers already know and understand 3. Eschewing a standard package in favor of duplicating its function on our own smells a bit of "Not Invented Here" syndrome and might be off-putting to potential contributors  Cons of including this package: 1. We already have an implementation which does not require it 2. We have more control over our own implementation for features which might not mesh with the standard package  Full disclosure: My personal preference is to move to this package, so my pro/con statements may be a little skewed.  ></description> </Issue>
