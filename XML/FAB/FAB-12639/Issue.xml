<Issue id="34949" key="FAB-12639" number="12639" project="10002" reporter="davidkhala" creator="davidkhala" type="10001" summary="MVCC_READ_CONFLICT in stub.InvokeChaincode corner case" priority="3" resolution="10001" status="6" created="2018-10-29 07:47:34.0" updated="2020-01-22 22:32:33.0" resolutiondate="2020-01-22 22:32:33.0" votes="0" watches="2" workflowId="46377"> <description><! CDATA I find a corner case during writing complex system with multiple chaincode and cross chaincode calling  Environments - set individual couchdb(as docker container) for each peer (as docker container) - org ASTRI.org, has 1 peer, `peer0.ASTRI.org` - org icdd, has 1 peer, `peer0.icdd` - we have 3 golang smartContract, all 3 are installed on each peer, - chaincode：mainCC ** `chaincodePath`:  https://github.com/davidkhala/chaincode/tree/master/golang/mainChain  - chaincode：sideCC ** `chaincodePath`:  https://github.com/davidkhala/chaincode/tree/master/golang/sideChain  - chaincode：sideCC2 ** `chaincodePath`:  https://github.com/davidkhala/chaincode/tree/master/golang/sideChain2|https://github.com/davidkhala/chaincode/tree/master/golang/sideChain2   - instantiate： both `peer0.ASTRI.org` and `peer0.icdd` are target peers - all parts are under 1 channel `allchannel`  How to reproduce * follow README in my own fabric-sdk-node based project **  https://github.com/davidkhala/delphi-fabric  * Or if a fabric network exist, please choose your own way to do that ## invoke chaincode `sideCC` with *** fcn: 'put' *** target peers:  `peer0.ASTRI.org`  ## Get the response of invoke as `key` ## invoke chaincode `sideCC2` with ### fcn: 'get' ### target peers:  `peer0.icdd`  ### args:  key    the txEvent after the second invoke will prompt with code 'MVCC_READ_CONFLICT'     More details * What those chaincode do ## mainCC: simple key-value setter, getter *** fcn=='put': setter *** fcn=='get': putter ## sideCC: when invoked with fcn=='put', ###   generate a new key not exist in mainCC #### randomly generate a new string `rKey` #### use stub.InvokeChaincode to call mainCC with fcn='get', args= rkey  #### if non-empty response from mainCC, recurse the process; other wise, return the `rKey`. ### use stub.InvokeChaincode to call mainCC with fcn='put', args= rkey,${anything}  ## sideCC2: when invoked with fcn=='get', use stub.InvokeChaincode to call mainCC with fcn='get', args= params 0    * timing: after half a second passed, we could retry the the second invoke and get a success * couchdb exclusive: this error will not appear when we use default leveldb for all peers  ></description> </Issue>
