<Issue id="44524" key="FAB-17595" number="17595" project="10002" reporter="kevinxiong1977" creator="kevinxiong1977" type="10002" summary="Lifecycle chaincode issue under non-AND endorsement policy" priority="3" resolution="10200" status="6" created="2020-03-09 04:09:53.0" updated="2020-03-09 17:08:02.0" resolutiondate="2020-03-09 17:08:02.0" votes="0" watches="2" workflowId="58437" archived="N"> <description><! CDATA In Fabric 2.0, different versions of the chaincode package are allowed to be deployed on different peer nodes, including different chaincode development languages. When we are in the lifecycle chaincode under the *non-AND endorsement policy*, different peers may execute different business logic methods of the same chaincode.  {color:#ff0000}*Org1MSP*{color}  *+peer lifecycle chaincode package abstore1_go.tar.gz --path /root/go/src/github.com/hyperledger/fabric-samples/chaincode/abstore/go --lang golang --label abstore1+*  +*peer lifecycle chaincode queryinstalled*+ Installed chaincodes on peer: Package ID: abstore1:1e56a9b84ce52e75991b2ed9c8f61ec0f87e5a5f41737b4acf6a303eca4fee2c, Label: abstore1  +*peer lifecycle chaincode approveformyorg --channelID mychannel --name mycc --version 1.0 --signature-policy "OR('Org1MSP.member','Org2MSP.member')" --init-required --package-id abstore1:1e56a9b84ce52e75991b2ed9c8f61ec0f87e5a5f41737b4acf6a303eca4fee2c --sequence 1 --tls true --cafile $ORDERER_CA*+  {color:#ff0000}*Org2MSP*{color}  *vim /root/go/src/github.com/hyperledger/fabric-samples/chaincode/abstore/go/abstore.go*  func (t *ABstore) invoke(stub shim.ChaincodeStubInterface, args   string) pb.Response  ............  Aval = Aval - X  - X  Bval = Bval + X + X  peer lifecycle chaincode package abstore1_go.tar.gz --path /root/go/src/github.com/hyperledger/fabric-samples/chaincode/abstore/go --lang golang --label abstore1   peer lifecycle chaincode install abstore1_go.tar.gz   peer lifecycle chaincode queryinstalled  Installed chaincodes on peer: Package ID: abstore1:1e56a9b84ce52e75991b2ed9c8f61ec0f87e5a5f41737b4acf6a303eca4fee2c, Label: abstore1   *peer lifecycle chaincode approveformyorg* --channelID mychannel --name mycc --version 1.0 --signature-policy "OR('Org1MSP.member','Org2MSP.member')" --init-required --package-id abstore1:1e56a9b84ce52e75991b2ed9c8f61ec0f87e5a5f41737b4acf6a303eca4fee2c --sequence 1 --tls true --cafile $ORDERER_CA   *peer lifecycle chaincode commit* -o orderer1.example.com:7050 --channelID mychannel --name mycc --version 1.0 --sequence 1 --signature-policy "OR('Org1MSP.member','Org2MSP.member')" --init-required --tls true --cafile $ORDERER_CA --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles $ORG1_CA --peerAddresses peer0.org2.example.com:9051 --tlsRootCertFiles $ORG2_CA   *peer chaincode invoke* -o orderer1.example.com:7050 --isInit --tls true --cafile $ORDERER_CA -C mychannel -n mycc --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles $ORG1_CA  --peerAddresses peer0.org2.example.com:9051 --tlsRootCertFiles $ORG2_CA -c '\{"Args": "Init","a","1000","b","1000" }' --waitForEvent  *Org1MSP*  peer chaincode query -C mychannel -n mycc -c '{"Args": "query","a" }' 1000  peer chaincode query -C mychannel -n mycc -c '{"Args": "query","b" }' 1000  {color:#ff0000}+When executing the chain code on Org1MSP, the amount is reduced by 100+{color}  *peer chaincode invoke* -o orderer1.example.com:7050 --tls true --cafile $ORDERER_CA -C mychannel -n mycc --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles $ORG1_CA  -c '{"Args": "invoke","a","b","100" }' --waitForEvent  peer chaincode query -C mychannel -n mycc -c '{"Args": "query","a" }' 900  peer chaincode query -C mychannel -n mycc -c '{"Args": "query","b" }' 1100  *Org2MSP*  peer chaincode query -C mychannel -n mycc -c '{"Args": "query","a" }' 900  peer chaincode query -C mychannel -n mycc -c '{"Args": "query","b" }' 1100  +{color:#ff0000}When executing the chain code on Org2MSP, the amount is reduced *by 200*{color}+  *peer chaincode invoke* -o orderer1.example.com:7050 --tls true --cafile $ORDERER_CA -C mychannel -n mycc  --peerAddresses peer0.org2.example.com:9051 --tlsRootCertFiles $ORG2_CA -c '{"Args": "invoke","a","b","100" }' --waitForEvent  peer chaincode query -C mychannel -n mycc -c '{"Args": "query","a" }' *{color:#ff0000}700{color}*  peer chaincode query -C mychannel -n mycc -c '{"Args": "query","b" }' *{color:#ff0000}1300{color}*  Only when using the AND endorsement policy, the system will correctly report the error：  *peer chaincode invoke* -o orderer1.example.com:7050 --tls true --cafile $ORDERER_CA -C mychannel -n mycc --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles $ORG1_CA --peerAddresses peer0.org2.example.com:9051 --tlsRootCertFiles $ORG2_CA -c '{"Args": "invoke","a","b","100" }' --waitForEvent  {color:#ff0000}Error: could not assemble transaction: ProposalResponsePayloads do not match - proposal response: version:1 response:<status:200 > payload:"{color}           ></description> </Issue>
