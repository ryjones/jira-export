<Issue id="12637" key="FAB-336" number="336" project="10002" reporter="scottz" creator="scottz" type="10004" summary="no http response from Peer0 after deploy and invoke, when peers 1 and 2 are docker paused" priority="3" resolution="10000" status="6" created="2016-09-09 20:30:29.0" updated="2018-07-20 14:10:09.0" resolutiondate="2017-04-07 20:06:31.0" votes="0" watches="3" workflowId="36194"> <description><! CDATA Problem Summary  This issue is a port to Jira from GitHub hyperledger fabric issue #2357 https://github.com/hyperledger-archives/fabric/issues/2357  * GO SDK Testcase hangs when it gets no http response from peer0 during processing of invoke after sending a Deploy. This only happens when I have executed "docker pause" on two peers (leaving only 2 running, so not enough for consensus).  * When rerun test with just one paused, there is no problem. * When using Stop/Restart instead of Pause/Unpause, there is no problem even with two peers. * (I could add an http timeout to the testcase code, but that would not change the peers' behavior when all peers in the network cannot receive messages from each other). * Attached testcase, testcase output file, and DEBUG Logs for all 4 peers:  failCAT11pause.tar.gz  Here is the snippet of code from peerrest/rest.go. It hangs, waiting for the "client.Do()" to return:  if verbose { fmt.Println("PostChainAPI() call http.Client.Do") } client := &http.Client{} resp, err := client.Do(req) if verbose { fmt.Println("PostChainAPI() AFTER call http.Client.Do") }  How to Reproduce  Detailed steps of testcase CAT_11_S2S1_IQDIQ.go (aka  CAT_201_S2S1_IQDIQ.go  in new test suite): # Establish vagrant/docker network with security and 4 validating peers. # Pause Peers(  2, 1  ) # Invoke On Peer 0 # Invoke On Peer 3 # QueryAllPeers( "STEP 3, after STOP PEERS 2 and 1, and Invokes" ) # Deploy (5000,5000) to Peer3 # Invoke On Peer 0    <------------------- testcase gets stuck here # Invoke On Peer 3 # QueryAllPeers("STEP 6")  Note: this is a key section of LOGFILE_PEER0 when the invoke is being processed and the test hangs, while peers 1 and 2 are paused.  15:28:27.883  rest  ProcessChaincode -> INFO d6d^  0m REST processing chaincode request... 15:28:27.883  rest  processChaincodeInvokeOrQuery -> INFO d6e^  0m REST invoke chaincode... 15:28:27.884  rest  processChaincodeInvokeOrQuery -> INFO d6f^  0m Local user 'test_user0' is already logged in. Retrieving login token. ^  36m15:28:27.884  devops  invokeOrQuery -> DEBU d70^  0m Initializing secure devops using context test_user0 15:28:27.884  crypto  invokeOrQuery -> INFO d71^  0m Initializing client  test_user0 ... 15:28:27.950  crypto  invokeOrQuery -> INFO d72^  0m Initializing client  test_user0 ...done! ^  36m15:28:27.950  devops  createExecTx -> DEBU d73^  0m Creating secure invocation transaction 925e3e47-f699-4851-9123-464789decf8c ^  36m15:28:27.950  devops  invokeOrQuery -> DEBU d74^  0m Sending invocation transaction (925e3e47-f699-4851-9123-464789decf8c) to validator ^  36m15:28:27.951  peer  sendTransactionsToLocalEngine -> DEBU d75^  0m Marshalling transaction CHAINCODE_INVOKE to send to local engine ^  36m15:28:27.951  peer  sendTransactionsToLocalEngine -> DEBU d76^  0m Sending message CHAIN_TRANSACTION with timestamp seconds:1470151707 nanos:951055649 to local engine  +++ This is where the test script hangs. the SDK never gets a response for the invoke transaction to peer 0 (when peers 1 & 2 are paused).   Below is a similar section of logs for comparison, from a successful testcase when peers 1 and 2 are stopped (instead of paused, all else being equal). Observe at the end: REST successfully submitted invoke transaction.  15:56:22.513  rest  ProcessChaincode -> INFO 138c^  0m REST processing chaincode request... 15:56:22.513  rest  processChaincodeInvokeOrQuery -> INFO 138d^  0m REST invoke chaincode... 15:56:22.515  rest  processChaincodeInvokeOrQuery -> INFO 138e^  0m Local user 'test_user0' is already logged in. Retrieving login token. ^  36m15:56:22.517  devops  invokeOrQuery -> DEBU 138f^  0m Initializing secure devops using context test_user0 15:56:22.517  crypto  invokeOrQuery -> INFO 1390^  0m Initializing client  test_user0 ... 15:56:22.596  crypto  invokeOrQuery -> INFO 1391^  0m Initializing client  test_user0 ...done! ^  36m15:56:22.596  devops  createExecTx -> DEBU 1392^  0m Creating secure invocation transaction 31883cd9-7fe3-44d0-be43-a93f678481fb ^  36m15:56:22.597  devops  invokeOrQuery -> DEBU 1393^  0m Sending invocation transaction (31883cd9-7fe3-44d0-be43-a93f678481fb) to validator ^  36m15:56:22.597  peer  sendTransactionsToLocalEngine -> DEBU 1394^  0m Marshalling transaction CHAINCODE_INVOKE to send to local engine ^  36m15:56:22.597  peer  sendTransactionsToLocalEngine -> DEBU 1395^  0m Sending message CHAIN_TRANSACTION with timestamp seconds:1470153382 nanos:597205991 to local engine 15:56:22.597  crypto  CloseClient -> INFO 1396^  0m Closing client  test_user0 ... ^  36m15:56:22.597  consensus/obcpbft  ProcessEvent -> DEBU 1397^  0m Replica 0 batch main thread looping ^  36m15:56:22.598  peer  SendMessage -> DEBU 1398^  0m Sending message to stream of type: CONSENSUS ^  36m15:56:22.600  consensus/obcpbft  logAddTxFromRequest -> DEBU 1399^  0m Replica 0 adding request from 0 with transaction 31883cd9-7fe3-44d0-be43-a93f678481fb into outstandingReqs ^  36m15:56:22.600  consensus/obcpbft  startTimerIfOutstandingRequests -> DEBU 139a^  0m Replica 0 not starting timer because skip in progress or current exec or in view change 15:56:22.612  rest  processChaincodeInvokeOrQuery -> INFO 139b^  0m Successfully submitted invoke transaction with txuuid (31883cd9-7fe3-44d0-be43-a93f678481fb) 15:56:22.612  rest  ProcessChaincode -> INFO 139c^  0m REST successfully submitted invoke transaction: {"jsonrpc":"2.0","result":{"status":"OK","message":"31883cd9-7fe3-44d0-be43-a93f678481fb"},"id":22}   Important Note: I also reproduced the stuck condition with another testcase once, where we paused VP2 and VP1 separately, then send 100 Invoke requests. (Without any new deployment request when only two nodes running, as in previous testcase.) This time, after sending about 20 Invokes to VP0, it got stuck when PostChainAPI() call http.Client.Do  CAT_16_S2_IQ_S1_IQ_R1_IQ.go  (aka  CAT_207_S2_IQ_S1_R1_IQ.go) # Stop VP2, and sleep 15 secs # Send 11 Invokes. # Query all running peers # Stop VP1, and sleep 15 secs # Send 50 invokes to VP0 # Stuck on the 21st one   ></description> </Issue>
