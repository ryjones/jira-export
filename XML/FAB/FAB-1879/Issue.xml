<Issue id="14380" key="FAB-1879" number="1879" project="10002" reporter="yacovm" assignee="grapebaba" creator="yacovm" type="10002" summary="Connect gossip configuration to yaml configuration" priority="3" resolution="10000" status="6" created="2017-01-26 23:55:27.0" updated="2018-07-20 14:11:21.0" resolutiondate="2017-02-08 11:43:36.0" votes="0" watches="3" workflowId="37186"> <description><! CDATA Currently, gossip configuration is hard-coded, and is initialized in gossip/integration/integration.go  We need to connect that configuration to the  peer/core.yaml|https://github.com/hyperledger/fabric/blob/master/peer/core.yaml#L70-L73   There is a gossip related section in *core.yaml*  {code} gossip: bootstrap: 0.0.0.0:7051 # For debug - is peer is its org leader and should pass blocks from orderer to other peers in org orgLeader: true {code}  Which need to be extended to include all set of parameters such as  {code} type Config struct { 	BindPort            int      // Port we bind to, used only for tests 	ID                  string   // ID of this instance 	SelfEndpoint        string   // Endpoint we publish to remote peers 	BootstrapPeers        string // Peers we connect to at startup 	PropagateIterations int      // Number of times a message is pushed to remote peers 	PropagatePeerNum    int      // Number of peers selected to push messages to  	MaxBlockCountToStore       int           // Maximum count of blocks we store in memory 	StateInfoRetentionInterval time.Duration // TODO: this would be a maximum time a stateInfo message is kept until expired  	MaxPropagationBurstSize    int           // Max number of messages stored until it triggers a push to remote peers 	MaxPropagationBurstLatency time.Duration // Max time between consecutive message pushes  	PullInterval time.Duration // Determines frequency of pull phases 	PullPeerNum  int           // Number of peers to pull from  	SkipBlockVerification bool // Should we skip verifying block messages or not  	PublishCertPeriod        time.Duration    // Time from startup certificates are included in Alive messages 	PublishStateInfoInterval time.Duration    // Determines frequency of pushing state info messages to peers 	RequestStateInfoInterval time.Duration    // Determines frequency of pulling state info messages from peers 	TLSServerCert            *tls.Certificate // TLS certificate of the peer } {code}  The *integration.go* file need to extended to read the gossip section and initialize configuration based on it.  ></description> </Issue>
