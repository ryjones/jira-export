<Issue id="29572" key="FAB-9629" number="9629" project="10002" reporter="christopherferris" assignee="christopherferris" creator="christopherferris" type="10000" summary="Docker multi-arch support" priority="3" resolution="10001" status="6" created="2018-04-20 22:27:01.0" updated="2020-01-22 22:33:41.0" resolutiondate="2020-01-22 22:33:41.0" votes="0" watches="6" workflowId="43266"> <description><! CDATA publishing multi-arch images is actually fairly trivial task. It involves creating a manifest and pushing it to the repository with manifest-tool (until such time as docker makes the manifest feature non-experimental, which should be soon).  I tested this out and pushed the following manifest yaml:  {{image: christo4ferris/fabric-peer:latest}} {{tags:  '1.1.0', 'latest' }} {{manifests:}} {{  -}} {{    image: hyperledger/fabric-peer:ppc64le-1.1.0}} {{    platform:}} {{      architecture: ppc64le}} {{      os: linux}} {{  -}} {{    image: hyperledger/fabric-peer:x86_64-1.1.0}} {{    platform:}} {{      architecture: amd64}} {{      os: linux}} {{  -}} {{    image: hyperledger/fabric-peer:s390x-1.1.0}} {{    platform:}} {{      architecture: s390x}} {{      os: linux}}  you can test it out on any platform by pulling christo4ferris/fabric-peer:latest, christo4ferris/fabric-peer or christo4ferris/fabric-peer:1.1.0  the image sha should be the same as the published hyperledger/fabric-peer image for your architecture.  What this means is that we can periodically push images with arbitrary tags (like x86_64-1.2.0-snapshot-a25e722f) and then create a manifest list for a tag such as 1.2-dev-stable and then when we are ready retag it as latest and 1.2.0 etc.  This can also be DECOUPLED from CI, which will make publishing a release a much simpler process.  ></description> </Issue>
