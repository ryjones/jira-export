<Issue id="20101" key="FAB-5709" number="5709" project="10002" reporter="guoger" assignee="guoger" creator="guoger" type="10004" summary="LastOffsetPersisted is off by 1 in a corner case" priority="3" resolution="10000" status="6" created="2017-08-10 14:52:59.0" updated="2018-07-20 14:14:03.0" resolutiondate="2017-08-14 14:11:45.0" votes="0" watches="3" workflowId="39698"> <description><! CDATA {{LastOffsetPersisted}} is calculated with formula: {code:java} // If more than one batch is produced, exactly 2 batches are produced. // The receivedOffset for the first batch is one less than the supplied // offset to this function. offset := receivedOffset - int64(len(batches)-i-1) {code} This is not alway correct. Consider following case: - there are 2 tx in {{blockcutter.receiver}}'s {{pendingBatch}}, {{MaxMessageCount}} is 5 - total size of these 2 tx is _8KB_, {{PreferredMaxBytes}} is _10KB_ - now, a new tx comes in, whose {{receivedOffset}} is *x+1*, size is _5KB_ - {{Ordered}} cuts {{pendingBatch}} into *one* batch because of size overflow. Latest tx, however, is enqueued into {{pendingBatch}} - according to the formula aforementioned, {{LastOffsetPersisted = receivedOffset - int64(len(batches)-i-1) = (x+1) - (1-0-1) = x+1}}, however the actual {{LastOffsetPersisted}} should be *x*. It ends up being off by 1  So, we need to precisely determine *if the newest tx is encapsulated into current batch or not*, in order to infer correct {{LastOffsetPersisted}}  ></description> </Issue>
