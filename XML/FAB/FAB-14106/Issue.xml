<Issue id="37512" key="FAB-14106" number="14106" project="10002" reporter="sykesm" assignee="angelo.decaro" creator="sykesm" type="10004" summary="Token client spams meaningless info messages" priority="2" resolution="10000" status="6" created="2019-02-07 21:43:29.0" updated="2019-04-11 13:56:45.0" resolutiondate="2019-04-11 13:56:45.0" votes="0" watches="3" workflowId="49123"> <description><! CDATA When running tests, the following output is generated: {code} 2019-02-07 16:35:44.834 EST  token.client  BroadcastReceive -> INFO 001 calling OrdererClient.broadcastReceive 2019-02-07 16:35:50.669 EST  token.client  BroadcastReceive -> INFO 002 calling OrdererClient.broadcastReceive 2019-02-07 16:35:50.699 EST  token.client  BroadcastReceive -> INFO 003 calling OrdererClient.broadcastReceive â€¢2019-02-07 16:35:52.124 EST  token.client  BroadcastReceive -> INFO 004 calling OrdererClient.broadcastReceive 2019-02-07 16:35:57.967 EST  token.client  BroadcastReceive -> INFO 005 calling OrdererClient.broadcastReceive 2019-02-07 16:35:57.976 EST  token.client  BroadcastReceive -> INFO 006 calling OrdererClient.broadcastReceive {code}  This comes from the following code: {code} // broadReceive waits until it receives the response from broadcast stream func BroadcastReceive(broadcast Broadcast, addr string, responses chan common.Status, errs chan error) { 	logger.Infof("calling OrdererClient.broadcastReceive") {code}  Client libraries are intended to be used by external programs. In this context, we should _minimize_ the drag on dependencies **and** our opinions on logging. This includes what and when to log.  The existing logging that's been added to the token clients needs to be removed and replaced with a mechanism for the user to provide a logging implementation that satisfies an extremely simple contract. In most cases, the contract should be a subset of, yet compatible with, the default 'log' package in go.  ></description> </Issue>
