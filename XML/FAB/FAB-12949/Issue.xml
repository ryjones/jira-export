<Issue id="35498" key="FAB-12949" number="12949" project="10002" reporter="c0rwin" assignee="c0rwin" creator="c0rwin" type="10003" summary="Restarted Raft cluster should be able to finish reconfiguration" priority="2" resolution="10000" status="6" created="2018-11-20 15:08:07.0" updated="2019-03-01 13:12:06.0" resolutiondate="2018-12-11 22:19:05.0" votes="0" watches="1" workflowId="47003"> <description><! CDATA Currently reconfiguration of Raft ordering service of type B, capable to handle {{failover}} as long as quorum is alive. Newly elected leader will take care of continuing to propose changes  {code} 			if rd.SoftState != nil { 				newLead := atomic.LoadUint64(&rd.SoftState.Lead) 				lead := atomic.LoadUint64(&c.leader) 				if newLead != lead { 					c.logger.Infof("Raft leader changed: %d -> %d", lead, newLead) 					atomic.StoreUint64(&c.leader, newLead)  					if lead == c.raftID { 						c.resignC <- struct{}{} 					}  					// becoming a leader and configuration change is in progress 					if newLead == c.raftID && c.configChangeInProgress { 						// need to read recent config updates of replica set 						// and finish reconfiguration 						c.handleReconfigurationFailover() 					}  					// notify external observer 					select { 					case c.observeC <- newLead: 					default: 					} 				} 			} {code}   However if cluster has been restarted right after configuration block of type B committed, but before Raft config proposed, during the restart Raft nodes has to take care to complete second phase of reconfiguration, i.e. propose Raft configuration changes to the replica set.  During the bootstrap, nodes need to check whenever recently committed block is configuration and whenever there is a difference between Raft membership mapping persisted in block metadata differs from Raft cluster configuration. If there is such difference leader has to complete reconfiguration by proposing the change.  ></description> </Issue>
