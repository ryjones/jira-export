<Issue id="30698" key="FAB-10428" number="10428" project="10002" reporter="echigo" creator="echigo" type="10001" summary="The examples of byfn.sh output in &quot;Generate Network Artifacts&quot; seems to be old" priority="4" resolution="10000" status="6" created="2018-05-29 06:05:33.0" updated="2019-08-11 09:11:50.0" resolutiondate="2019-08-11 09:11:50.0" votes="0" watches="2" workflowId="35821"> <description><! CDATA When I execute byfn.sh to generate the fabric network artifacts using fabric v1.1.0, I found that the actual output of byfn.sh is different with the tutorials.  I suggest to update the information.  * byfn.sh provides new option "upgrade" and other options {code:java}  root@ first-network # ./byfn.sh --help Usage: byfn.sh up|down|restart|generate|upgrade  -c <channel name>   -t <timeout>   -d <delay>   -f <docker-compose-file>   -s <dbtype>   -i <imagetag>  byfn.sh -h|--help (print this message) <mode> - one of 'up', 'down', 'restart' or 'generate' - 'up' - bring up the network with docker-compose up - 'down' - clear the network with docker-compose down - 'restart' - restart the network - 'generate' - generate required certificates and genesis block - 'upgrade'  - upgrade the network from v1.0.x to v1.1 -c <channel name> - channel name to use (defaults to "mychannel") -t <timeout> - CLI timeout duration in seconds (defaults to 10) -d <delay> - delay duration in seconds (defaults to 3) -f <docker-compose-file> - specify which docker-compose file use (defaults to docker-compose-cli.yaml) -s <dbtype> - the database backend to use: goleveldb (default) or couchdb -l <language> - the chaincode language: golang (default) or node -i <imagetag> - the tag to be used to launch the network (defaults to "latest")  Typically, one would first generate the required certificates and genesis block, then bring up the network. e.g.:  byfn.sh generate -c mychannel byfn.sh up -c mychannel -s couchdb byfn.sh up -c mychannel -s couchdb -i 1.1.0-alpha byfn.sh up -l node byfn.sh down -c mychannel byfn.sh upgrade -c mychannel  Taking all defaults: byfn.sh generate byfn.sh up byfn.sh down {code}  * Â byfn.sh shows the command line for debugging using "set +x"? {code:java}  root@ first-network # ./byfn.sh -m generate Generating certs and genesis block for with channel 'mychannel' and CLI timeout of '10' seconds and CLI delay of '3' seconds Continue?  Y/n  y proceeding ... /root/fabric-samples/bin/cryptogen  ########################################################## ##### Generate certificates using cryptogen tool ######### ########################################################## + cryptogen generate --config=./crypto-config.yaml org1.example.com org2.example.com + res=0 + set +x  /root/fabric-samples/bin/configtxgen ########################################################## #########  Generating Orderer Genesis block ############## ########################################################## + configtxgen -profile TwoOrgsOrdererGenesis -outputBlock ./channel-artifacts/genesis.block 2018-05-29 05:11:03.402 UTC  common/tools/configtxgen  main -> INFO 001 Loading configuration 2018-05-29 05:11:03.411 UTC  msp  getMspConfig -> INFO 002 Loading NodeOUs 2018-05-29 05:11:03.411 UTC  msp  getMspConfig -> INFO 003 Loading NodeOUs 2018-05-29 05:11:03.411 UTC  common/tools/configtxgen  doOutputBlock -> INFO 004 Generating genesis block 2018-05-29 05:11:03.411 UTC  common/tools/configtxgen  doOutputBlock -> INFO 005 Writing genesis block + res=0 + set +x  ################################################################# ### Generating channel configuration transaction 'channel.tx' ### ################################################################# + configtxgen -profile TwoOrgsChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID mychannel 2018-05-29 05:11:03.427 UTC  common/tools/configtxgen  main -> INFO 001 Loading configuration 2018-05-29 05:11:03.435 UTC  common/tools/configtxgen  doOutputChannelCreateTx -> INFO 002 Generating new channel configtx 2018-05-29 05:11:03.436 UTC  msp  getMspConfig -> INFO 003 Loading NodeOUs 2018-05-29 05:11:03.436 UTC  msp  getMspConfig -> INFO 004 Loading NodeOUs 2018-05-29 05:11:03.460 UTC  common/tools/configtxgen  doOutputChannelCreateTx -> INFO 005 Writing new channel tx + res=0 + set +x  ################################################################# #######    Generating anchor peer update for Org1MSP   ########## ################################################################# + configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org1MSPanchors.tx -channelID mychannel -asOrg Org1MSP 2018-05-29 05:11:03.476 UTC  common/tools/configtxgen  main -> INFO 001 Loading configuration 2018-05-29 05:11:03.484 UTC  common/tools/configtxgen  doOutputAnchorPeersUpdate -> INFO 002 Generating anchor peer update 2018-05-29 05:11:03.484 UTC  common/tools/configtxgen  doOutputAnchorPeersUpdate -> INFO 003 Writing anchor peer update + res=0 + set +x  ################################################################# #######    Generating anchor peer update for Org2MSP   ########## ################################################################# + configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org2MSPanchors.tx -channelID mychannel -asOrg Org2MSP 2018-05-29 05:11:03.499 UTC  common/tools/configtxgen  main -> INFO 001 Loading configuration 2018-05-29 05:11:03.508 UTC  common/tools/configtxgen  doOutputAnchorPeersUpdate -> INFO 002 Generating anchor peer update 2018-05-29 05:11:03.508 UTC  common/tools/configtxgen  doOutputAnchorPeersUpdate -> INFO 003 Writing anchor peer update + res=0 + set +x {code}  ></description> </Issue>
