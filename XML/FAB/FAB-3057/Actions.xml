<Action id="22022" issue="15638" author="ales" type="comment" body=" ~binhn   ~muralisr   ~elli-androulaki   ~angelo.decaro  " created="2017-04-10 11:05:00.0" updateauthor="ales" updated="2017-04-10 11:05:00.0"/>
<Action id="22033" issue="15638" author="angelo.decaro" type="comment" body="Let me mention the following issue that could be addressed in the context of this JIRA item, if you think so. So, one might perform some access control just by using the output of the GetCreator without any need to deserialize that output. The problem is that the output of the GetCreator is serialized version of the protobuf message SerializedIdentity. Because protobuf does not guarantee deterministic serialization we might want either discourage this practice or provide a fix." created="2017-04-10 13:25:26.0" updateauthor="angelo.decaro" updated="2017-04-10 13:25:26.0"/>
<Action id="22034" issue="15638" author="ales" type="comment" created="2017-04-10 13:40:27.0" updateauthor="ales" updated="2017-04-10 13:40:27.0"> <body><! CDATA Adding some discussion about the use-case: as a chaincode developer I may want to perform some application-level access control on top of what fabric already does.   By default, fabric ensures that only a creator that is a writer on a channel can invoke a chaincode on that channel. However, the set of writers might be too wide and the chaincode developer may want to further restrict access.   For example, imagine a channel with orgA and orgB. Both are writers and both can invoke chaincode mycc. However, the chaincode developer wants to enforce that one of the functions (say, "sensitiveFunc") can only be invoked by orgA whereas "nonSensitiveFunc" can be invoked by either org. In theory this requirement can be captured very simply at the chaincode level by having the chaincode deserialize the creator and inspecting the certificate. However this is very hard to do because  1) the certificate is not immediately accessible, because it's actually a SerializedIdentity serialized protobuf 2) the chaincode has not access to the channel MSP manager and so it doesn't have access to the CA certificates on that channel  This scenario would easily be handled with the proposed new system chaincode by creating an MSPPrincipal instance identifying a member of orgA and invoking the "SatisfiesPrincipal" function.  ></body> </Action>
<Action id="22036" issue="15638" author="angelo.decaro" type="comment" created="2017-04-10 13:52:15.0" updateauthor="angelo.decaro" updated="2017-04-10 13:52:15.0"> <body><! CDATA Indeed :) Another thought, I think this scc should not be directly accessible from the external. Or at most an administrator of a peer might do that. No?  ></body> </Action>
<Action id="22037" issue="15638" author="ales" type="comment" body="Agreed - and FAB-2997 already helps with that." created="2017-04-10 13:55:15.0" updateauthor="ales" updated="2017-04-10 13:55:15.0"/>
<Action id="22048" issue="15638" author="elli-androulaki" type="comment" created="2017-04-10 18:35:56.0" updateauthor="elli-androulaki" updated="2017-04-10 18:35:56.0"> <body><! CDATA  ~ales , +1 for the the SCC interface/use. Thanks!  Taking incentive from the mention of CC2CC case, and an earlier discussion we had on cross chain CC2CC, adding here my thoughts as a reference for a future discussion.   To be able to address cross chain CC2CC when the writers of the callee is too restrictive (moving to the other side) we would need to "relax" the ACL check at the peer side or perhaps use a dedicated flag where a cc deployer specifies chaincodes that should be eligible for doing (?), and/or ensure that the SCC this jira is meant for, is able to assess MSP membership for MSPs that do not necessarily govern the channel of the callee's chaincode. The latter can be tedious if we do not have an identity channel in place.. Of course, we can consider this for the future, as to have something already in place now we try to accommodate rights within the same chain's MSP through this SCC and then see how it makes sense to move from there(?)   ></body> </Action>
<Action id="22300" issue="15638" author="muralisr" type="comment" body=" ~ales   ~binhn  are we doing this for 1.0 ? If not, move it to 1.1 ?" created="2017-04-13 07:19:19.0" updateauthor="muralisr" updated="2017-04-13 07:19:19.0"/>
<Action id="22314" issue="15638" author="elli-androulaki" type="comment" body=" ~muralisr ,  ~ales , yesterday  ~binhn  suggested that we move it to a v1.1 feature." created="2017-04-13 08:00:45.0" updateauthor="elli-androulaki" updated="2017-04-13 08:00:45.0"/>
<Action id="42015" issue="15638" author="denyeart" type="comment" body="Many issues were bulk moved from v1.0 or v1.1 to v1.2 as part of a cleanup effort, and many of these issues are not high priority or actually intended to be worked for v1.2.  This issue is being bulk moved to Future.  If the issue is indeed high priority for v1.2 and/or very low effort, please move back to v1.2 and add a comment to indicate rationale." created="2018-03-23 05:07:55.0" updateauthor="denyeart" updated="2018-03-23 05:07:55.0"/>
<Action id="67001" issue="15638" author="sykesm" type="comment" body="Stale" created="2020-01-22 19:02:45.0" updateauthor="sykesm" updated="2020-01-22 19:02:45.0"/>
