<Issue id="33986" key="FAB-12097" number="12097" project="10002" reporter="sykesm" assignee="sykesm" creator="sykesm" type="10004" summary="Data race in orderer/consensus/kafka/chain.go" priority="4" resolution="10000" status="6" created="2018-09-21 17:02:59.0" updated="2018-09-28 13:55:19.0" resolutiondate="2018-09-28 13:55:19.0" votes="0" watches="1" workflowId="45305"> <description><! CDATA {code} ================== WARNING: DATA RACE Read at 0x00c000548d50 by goroutine 110: github.com/hyperledger/fabric/orderer/consensus/kafka.(*chainImpl).Errored() /Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/orderer/consensus/kafka/chain.go:120 +0x59 github.com/hyperledger/fabric/orderer/consensus/kafka.TestDeliverSession.func3() /Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/orderer/consensus/kafka/chain_test.go:3464 +0xecd testing.tRunner() /usr/local/Cellar/go/1.11/libexec/src/testing/testing.go:827 +0x162  Previous write at 0x00c000548d50 by goroutine 31: github.com/hyperledger/fabric/orderer/consensus/kafka.startThread() /Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/orderer/consensus/kafka/chain.go:295 +0xf97  Goroutine 110 (running) created at: testing.(*T).Run() /usr/local/Cellar/go/1.11/libexec/src/testing/testing.go:878 +0x650 github.com/hyperledger/fabric/orderer/consensus/kafka.TestDeliverSession() /Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/orderer/consensus/kafka/chain_test.go:3409 +0x140 testing.tRunner() /usr/local/Cellar/go/1.11/libexec/src/testing/testing.go:827 +0x162  Goroutine 31 (running) created at: github.com/hyperledger/fabric/orderer/consensus/kafka.(*chainImpl).Start() /Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/orderer/consensus/kafka/chain.go:129 +0x64 github.com/hyperledger/fabric/orderer/consensus/kafka.TestDeliverSession.func3() /Users/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/orderer/consensus/kafka/chain_test.go:3430 +0x49d testing.tRunner() /usr/local/Cellar/go/1.11/libexec/src/testing/testing.go:827 +0x162 ================== {code}  This is another example of the orderer pattern of trying to create, use, discard, and get a new channel without serialization.  {code} // Errored returns a channel which will close when a partition consumer error // has occurred. Checked by Deliver(). func (chain *chainImpl) Errored() <-chan struct{} { 	return chain.errorChan // line 120 } {code}  races with the code in startThread run as a go routine   {code} 	close(chain.startChan)                // Broadcast requests will now go through 	chain.errorChan = make(chan struct{}) // Deliver requests will also go through {code}   ></description> </Issue>
