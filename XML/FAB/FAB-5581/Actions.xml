<Action id="29755" issue="19895" author="jimthematrix" type="comment" created="2017-08-11 18:29:58.0" updateauthor="jimthematrix" updated="2017-08-11 18:29:58.0"> <body><! CDATA https://gerrit.hyperledger.org/r/#/c/12113/ https://gerrit.hyperledger.org/r/#/c/12119/  ></body> </Action>
<Action id="31571" issue="19895" author="christopherferris" type="comment" body="https://gerrit.hyperledger.org/r/c/13571/" created="2017-10-03 17:59:51.0" updateauthor="christopherferris" updated="2017-10-03 17:59:51.0"/>
<Action id="31572" issue="19895" author="christopherferris" type="comment" body=" ~ksachdeva  can you please let us know if you plan to address Jim&apos;s comments in the CR? Thanks" created="2017-10-03 18:01:29.0" updateauthor="christopherferris" updated="2017-10-03 18:01:29.0"/>
<Action id="31603" issue="19895" author="ksachdeva" type="comment" body="Yes I do. Submitting again (in next hour or so) with his feedback incorporated. However now would submit first with out tests as merging/re-basing is consuming too much time. Would follow up with a separate submission once the definitions are accepted." created="2017-10-04 14:42:29.0" updateauthor="ksachdeva" updated="2017-10-04 14:42:29.0"/>
<Action id="31606" issue="19895" author="ksachdeva" type="comment" created="2017-10-04 15:35:40.0" updateauthor="ksachdeva" updated="2017-10-04 15:35:40.0"> <body><! CDATA Have submitted it again as   https://gerrit.hyperledger.org/r/c/14203|https://gerrit.hyperledger.org/r/c/14203/    ~jimthematrix  I have included all your comments (that you provided on  https://gerrit.hyperledger.org/r/#/c/12119/  ) on the typescript definitions and have added few more.  I will submit the tests (will require some mods given the changes in the master branch) once this changeset has been merged.  ></body> </Action>
<Action id="31683" issue="19895" author="denyeart" type="comment" created="2017-10-06 16:52:21.0" updateauthor="denyeart" updated="2017-10-06 16:52:21.0"> <body><! CDATA  ~ksachdeva  Now that this one is merged, what remains to be done for this feature, unit tests?  Also, could you add more information to the Description around what should be documented for the typescript support?  For example do application authors need to do anything to start exploiting the benefits? Or is it automatic depending on the IDE that people use?  ></body> </Action>
<Action id="31933" issue="19895" author="ksachdeva" type="comment" created="2017-10-09 14:25:36.0" updateauthor="ksachdeva" updated="2017-10-09 14:25:36.0"> <body><! CDATA Hi David,  From feature point of view it is done. All that is needed to make sure is that when you the package is published on npm then index.d.ts is included in the bundle.   Since the index.d.ts will be part of the package itself, the app authors (using typescript) do not have to do anything special.               ></body> </Action>
<Action id="31939" issue="19895" author="denyeart" type="comment" body="Thanks  ~ksachdeva .  And what else remains to be delivered with this item?  In your prior comment you mentioned you would provide some additional tests, can you create a child subtask for that, as well as an ETA?" created="2017-10-09 16:20:04.0" updateauthor="denyeart" updated="2017-10-09 16:20:04.0"/>
<Action id="31940" issue="19895" author="ksachdeva" type="comment" created="2017-10-09 16:32:37.0" updateauthor="ksachdeva" updated="2017-10-09 16:32:37.0"> <body><! CDATA Hi David,  I can do that (had already written them). Need few mods to incorporate latest changes in the master branch.  However, I do have two concerns - * Maintenance and synchronization of the tests * Value provided by the tests in typescript since they are exercising the same scenarios as the javascript ones.   I will still submit the tests that I have but here is a suggestion and see if it makes sense -  In near future, remove the existing tests (written using javascript) with the ones written using typescript. This would bring following benefits -  a) Same tests that would exercise the typings as well as the underlying javascript implementation.   b) No duplication and maintenance issue.  c) The tests written using typescript are terse and cleaner than the ones written using javascript (primarily thanks to async/await). Usage of typescript will make sure that the tests can be run on node 6 or earlier where async/await support is not implemented.  I will submit the tests in next few days.     ></body> </Action>
<Action id="31941" issue="19895" author="ksachdeva" type="comment" created="2017-10-09 16:38:58.0" updateauthor="ksachdeva" updated="2017-10-09 16:38:58.0"> <body><! CDATA Also from app developers point of view it would be good to have a sample written using typescript. I have an example (https://github.com/ksachdeva/hyperledger-fabric-example) but it is written to make sure that it is neither quite basic nor overtly complex.   May be a port of  https://github.com/hyperledger/fabric-samples/tree/release/balance-transfer  would serve better as it exercises majority of the APIs of the SDK. If you and  ~jimthematrix  thinks it is worth it then I can write it and submit it to the samples repo.   ></body> </Action>
<Action id="31951" issue="19895" author="jimthematrix@gmail.com" type="comment" created="2017-10-09 19:32:46.0" updateauthor="jimthematrix@gmail.com" updated="2017-10-09 19:32:46.0"> <body><! CDATA  ~ksachdeva  I agree with the idea to add samples with typescript syntax to demonstrate how the API can be used in typescript style. But that should be in addition to the sample written in native javascript, instead of replacing it because not all javascript developers use typescript.  In addition, if you can add unit tests to cover the testing of the declarations in index.d.ts that would be great. It can be done rather easily by stubbing out the underlying SDK API (using sinon) and simply making sure the calling code using ts definitions successfully compiled and invoked the underlying APIs.  ></body> </Action>
<Action id="31952" issue="19895" author="ksachdeva" type="comment" created="2017-10-09 20:07:51.0" updateauthor="ksachdeva" updated="2017-10-09 20:07:51.0"> <body><! CDATA Hi Jim,  I was not suggesting to replace the "sample" rather the existing "tests" (i.e. re-write the tests using typescript and then remove the existing javascript tests). This way there is no need to maintain the same test cases in two languages.  The sample would be a new one i.e. in addition to the existing javascript one.     ></body> </Action>
<Action id="32035" issue="19895" author="denyeart" type="comment" body="Another CR with fixes: https://gerrit.hyperledger.org/r/#/c/14397/" created="2017-10-12 10:52:28.0" updateauthor="denyeart" updated="2017-10-12 10:52:28.0"/>
<Action id="32053" issue="19895" author="jimthematrix@gmail.com" type="comment" body="https://gerrit.hyperledger.org/r/#/c/14383/ for sample" created="2017-10-12 18:17:17.0" updateauthor="jimthematrix@gmail.com" updated="2017-10-12 18:17:17.0"/>
<Action id="34727" issue="19895" author="holocron" type="comment" created="2017-11-17 20:56:12.0" updateauthor="holocron" updated="2017-11-18 03:19:24.0"> <body><! CDATA Hello, I'm having some trouble with this. It seems typescript doesn't like the module definition.  {{ vmorris@oc1744501623 procon-ui $ tsc}} {{node_modules/fabric-client/index.d.ts(197,11): error TS2304: Cannot find name 'ByteBuffer'.}} {{node_modules/fabric-client/index.d.ts(198,12): error TS2304: Cannot find name 'ByteBuffer'.}} {{node_modules/fabric-client/index.d.ts(199,14): error TS2304: Cannot find name 'ByteBuffer'.}} {{node_modules/fabric-client/index.d.ts(203,19): error TS2304: Cannot find name 'ByteBuffer'.}} {{node_modules/fabric-client/index.d.ts(204,21): error TS2304: Cannot find name 'ByteBuffer'.}} {{src/app/client.service.ts(2,24): error TS2306: File '/home/vmorris/programming/procon/procon-ui/node_modules/fabric-client/index.d.ts' is not a module.}}     !image-2017-11-17-14-55-52-294.png!        UPDATE:     Never mind, I read the fine typescript documentation and saw: {quote}When importing a module using {{export =}}, TypeScript-specific \{\{import module = require("module")}}must be used to import the module. {quote}  ></body> </Action>
<Action id="45391" issue="19895" author="jamesruan" type="comment" created="2018-06-01 02:20:47.0" updateauthor="jamesruan" updated="2018-06-01 02:20:47.0"> <body><! CDATA I'm using  {code:java} import hfc = require('fabric-client'){code} It reports no problem with ts-node, but {code:java} node_modules/fabric-client/types/index.d.ts(435,13): error TS2304: Cannot find name 'ByteBuffer'. node_modules/fabric-client/types/index.d.ts(436,14): error TS2304: Cannot find name 'ByteBuffer'. node_modules/fabric-client/types/index.d.ts(437,16): error TS2304: Cannot find name 'ByteBuffer'. node_modules/fabric-client/types/index.d.ts(441,21): error TS2304: Cannot find name 'ByteBuffer'. node_modules/fabric-client/types/index.d.ts(442,23): error TS2304: Cannot find name 'ByteBuffer'. {code} reported with 'tsc -p .'     Any suggestion to solve it?  ></body> </Action>
<Action id="48479" issue="19895" author="clydedacruz" type="comment" body=" npm install --save @types/bytebuffer   does the trick for the ByteBuffer related issue" created="2018-08-07 08:29:10.0" updateauthor="clydedacruz" updated="2018-08-07 08:29:10.0"/>
