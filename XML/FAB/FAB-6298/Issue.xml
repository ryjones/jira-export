<Issue id="21001" key="FAB-6298" number="6298" project="10002" reporter="mrkiouak" creator="mrkiouak" type="10001" summary="Add Transaction Id or Standin Cognate id to Fabric component log entries" priority="3" resolution="10001" status="6" created="2017-09-26 16:29:22.0" updated="2020-01-22 22:06:51.0" resolutiondate="2020-01-22 22:06:51.0" votes="0" watches="2" workflowId="35331"> <description><! CDATA Today, many chaincode framework components enter log entries with either a 8 letter id consisting of the first 8 characters in the txid  (e.g. {quote}```2017-09-26 13:48:46.135 UTC  chaincode  sendExecuteMessage -> DEBU 472  fc084744 Inside sendExecuteMessage. Message TRANSACTIONfc084744``), or embeds the entire transaction (e.g. ```017-09-26 13:48:46.135 UTC  endorser  simulateProposal -> DEBU 46c Entry - txid: fc084744dd831d39533012104e13522d1b7427d0a6ecc8fb915416f8d388f872 channel id: com.ChaincodeOrg.channel 2017-09-26 13:48:46.135 UTC  endorser  callChaincode -> DEBU 46d Entry - txid: fc084744dd831d39533012104e13522d1b7427d0a6ecc8fb915416f8d388f872 channel id: com.ChaincodeOrg.channel version: 1.0.1-pre3 2017-09-26 13:48:46.135 UTC  ccprovider  NewCCContext -> DEBU 46e NewCCCC (chain=com.ChaincodeOrg.channel,chaincode=lscc,version=1.0.1-pre3,txid=fc084744dd831d39533012104e13522d1b7427d0a6ecc8fb915416f8d388f872,syscc=true,proposal=0xc420123ea0,canname=lscc:1.0.1-pre3  ``` {quote} )  Â   Other components do not include any unique per tx identifier, e.g. see every line after the 1st line of this output from a chaincode instantiate proposal:  ``` {quote} 36m2017-09-26 13:48:46.150 UTC  ccprovider  NewCCContext -> DEBU 4ac 0m NewCCCC (chain=com.chaincodeorg.ec.channel,chaincode=ChaincodeName,version=1,txid=fc084744dd831d39533012104e13522d1b7427d0a6ecc8fb915416f8d388f872,syscc=false,proposal=0xc420123ea0,canname=ChaincodeName:1  36m2017-09-26 13:48:46.163 UTC  chaincode  Launch -> DEBU 4ad 0m launchAndWaitForRegister fetched 1067035 bytes from file system  36m2017-09-26 13:48:46.164 UTC  chaincode  launchAndWaitForRegister -> DEBU 4ae 0m chaincode ChaincodeName:1 is being launched  36m2017-09-26 13:48:46.164 UTC  chaincode  getArgsAndEnv -> DEBU 4af 0m Executable is chaincode  36m2017-09-26 13:48:46.164 UTC  chaincode  getArgsAndEnv -> DEBU 4b0 0m Args  chaincode -peer.address=172.17.0.8:7051   36m2017-09-26 13:48:46.164 UTC  chaincode  launchAndWaitForRegister -> DEBU 4b1 0m start container: ChaincodeName:1(networkid:dev,peerid:peer1)  36m2017-09-26 13:48:46.164 UTC  chaincode  launchAndWaitForRegister -> DEBU 4b2 0m start container with args: chaincode -peer.address=172.17.0.8:7051  36m2017-09-26 13:48:46.164 UTC  chaincode  launchAndWaitForRegister -> DEBU 4b3 0m start container with env: CORE_CHAINCODE_ID_NAME=ChaincodeName:1 CORE_PEER_TLS_ENABLED=true CORE_PEER_TLS_SERVERHOSTOVERRIDE=peer1 CORE_CHAINCODE_LOGGING_LEVEL=INFO CORE_CHAINCODE_LOGGING_SHIM=INFO  36m2017-09-26 13:48:46.164 UTC  container  lockContainer -> DEBU 4b4 0m waiting for container(dev-peer1-ChaincodeName-1) lock  36m2017-09-26 13:48:46.164 UTC  container  lockContainer -> DEBU 4b5 0m got container (dev-peer1-ChaincodeName-1) lock  36m2017-09-26 13:48:46.164 UTC  dockercontroller  Start -> DEBU 4b6 0m Cleanup container dev-peer1-ChaincodeName-1  36m2017-09-26 13:48:46.166 UTC  dockercontroller  stopInternal -> DEBU 4b7 0m Stop container dev-peer1-ChaincodeName-1(No such container: dev-peer1-ChaincodeName-1)  36m2017-09-26 13:48:46.167 UTC  dockercontroller  stopInternal -> DEBU 4b8 0m Kill container dev-peer1-ChaincodeName-1 (No such container: dev-peer1-ChaincodeName-1)  36m2017-09-26 13:48:46.167 UTC  dockercontroller  stopInternal -> DEBU 4b9 0m Remove container dev-peer1-ChaincodeName-1 (No such container: dev-peer1-ChaincodeName-1)  36m2017-09-26 13:48:46.167 UTC  dockercontroller  Start -> DEBU 4ba 0m Start container dev-peer1-ChaincodeName-1  36m2017-09-26 13:48:46.168 UTC  dockercontroller  getDockerHostConfig -> DEBU 4bb 0m docker container hostconfig NetworkMode: host  36m2017-09-26 13:48:46.168 UTC  dockercontroller  createContainer -> DEBU 4bc 0m Create container: dev-peer1-ChaincodeName-1  36m2017-09-26 13:48:46.171 UTC  dockercontroller  Start -> DEBU 4bd 0m start-could not find image <dev-peer1-ChaincodeName-1-1dad4519feb80c019db9c5f53558c682ec54ae78a944f56417ed426d38bdd130> (container id <dev-peer1-ChaincodeName-1>), because of <no such image>...attempt to recreate image  36m2017-09-26 13:48:46.172 UTC  chaincode-platform  generateDockerfile -> DEBU 4be 0m  FROM hyperledger/fabric-baseos:x86_64-0.3.1 ADD binpackage.tar /usr/local/bin LABEL org.hyperledger.fabric.chaincode.id.name="ChaincodeName" \ org.hyperledger.fabric.chaincode.id.version="1" \ org.hyperledger.fabric.chaincode.type="CAR" \ org.hyperledger.fabric.version="1.0.1-pre3" \ org.hyperledger.fabric.base.version="0.3.1" ENV CORE_CHAINCODE_BUILDLEVEL=1.0.1-pre3 ENV CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/peer.crt COPY peer.crt /etc/hyperledger/fabric/peer.crt {quote} ```  In the common scenario of N>1 upstream services submitting transactions to a particular peer for N>=1 chaincodes, identifying what log entries correspond to what execution chain is currently difficult for non-chaincode framework components.  This JIRA proposes extending and improving fabric logging by generating a short reasonably unique id (6-8 characters) to be included in every fabric component log entry. Each unique log id should correspond to one and only one transaction id, but many log ids may correspond to a single transactionid. Upon creation of the unique log id, a log entry should be created indicating a given transaction id correspond to a given newly created log id, e.g. ```e.g. "Received new transaction \{txnid: xxxxxxxx client: yyyyyyy foo: zzzzzz} with TXSEQ 35``` (example credit to @ghaskins). Where non-problematic, the implementation of this feature should match the current chaincode framework use of the first 8 characters of the transaction id.  Issue discussed with  ~ghaskins Â &  ~muralisr   ></description> </Issue>
