<Issue id="15200" key="FAB-2633" number="2633" project="10002" reporter="scottz" assignee="suryalnvs" creator="scottz" type="10004" summary="some blocks not delivered to peer/client connecting to orderer after orderer is docker stop/paused and restarted" priority="3" resolution="10000" status="6" created="2017-03-03 23:39:29.0" updated="2018-07-20 14:11:54.0" resolutiondate="2017-06-05 21:10:09.0" votes="0" watches="3" workflowId="37688"> <description><! CDATA Using commit 25dbdeeab8f3d4e431a5434bcee149ee30cf556e from Wed Mar 1, running continual transactions through the orderer service (kafka in this testcase), then "docker stop" and start an orderer, then connect a new peer client to the orderer after it recovers, and we observe that many of the blocks from the beginning of the chain are not delivered to that new consumer (peer) client.  Same behavior is observed when "docker pause" and unpause, instead of stop and start.  EXPECTED Behavior: all blocks, from genesis up to the latest block, should be delivered, as is the case when no restarts are performed. In this example (test output logs are attached), we see that the first block delivered to the MasterConsumer-o3-c1 is block number 1687 containing 10 transactions (and therefore is NOT the genesis block), and in fact only 1713 blocks are delivered to that consumer (when all 3400 blocks are delivered to other consumers).  Some key points in the log are:  ===Stopping orderer1 at  2017-03-03 23:13:06.190899593 +0000 UTC ===Producer-o1-c0 failed to broadcast TX 646 (ACK=646 NACK=1), 2017-03-03 23:13:06.267421243 +0000 UTC, err: rpc error: code = 13 desc = transport is closing ===Consumer-o1-c0 CLOSING. Totals received numtrans=1891 numBlocks=190 ===Started  orderer1 at  2017-03-03 23:13:39.201764559 +0000 UTC ===Started client MasterConsumer-o3-c1 to recv delivered batches from ord 3  ch 0  srvr=127.0.0.1:5006 chID=testchainid ===Consumer-o3-c0 recvd blockNum 1687 with numtrans=10/10; numBlocks=1, 2017-03-03 23:14:47.578756839 +0000 UTC ===Consumer-o3-c0 recvd blockNum 1688 with numtrans=10/10; numBlocks=2, 2017-03-03 23:14:47.57969228 +0000 UTC  ===Consumer-o3-c0 CLOSING. Totals received numtrans=17121 numBlocks=1713, 2017-03-03 23:15:17.43225854 +0000 UTC ===Consumer-o0-c0 CLOSING. Totals received numtrans=33982 numBlocks=3400, 2017-03-03 23:15:17.432255955 +0000 UTC ===Consumer-o2-c0 CLOSING. Totals received numtrans=33982 numBlocks=3400, 2017-03-03 23:15:17.432390377 +0000 UTC   To reproduce, run the following tests: $  cd  $GOPATH/github.com/hyperledger/fabric/bddtests/regression/go/ote $  go test -run ORD92 $  go test -run ORD93  func Test_ORD92_50000TX_1ch_3ord_kafka_3kbs(t *testing.T) { go stopAndStart("orderer1") // sleep 40 && docker stop orderer1 && sleep 30 && docker start orderer1 spyOnOrdererAfterSecs(1, 120)  // returns immediately after starting a go thread which waits (20=launchDelaySecs + 120) seconds and then starts MasterSpy on orderer1 passResult, finalResultSummaryString := ote("ORD-92", 50000, 1, 3, "kafka", 3, spyDefer, 1 ) if !passResult { t.Error(finalResultSummaryString) } }  //93 pause an orderer (not orderer0, so we can still see progress logs) func Test_ORD93_50000TX_1ch_3ord_kafka_3kbs(t *testing.T) { go pauseAndUnpause("orderer1") spyOnOrdererAfterSecs(1, 120)  // returns immediately after starting a go thread which waits (20=launchDelaySecs + 120) seconds and then starts MasterSpy on orderer1 passResult, finalResultSummaryString := ote("ORD-93", 50000, 1, 3, "kafka", 3, spyDefer, 1 ) if !passResult { t.Error(finalResultSummaryString) } }   ></description> </Issue>
