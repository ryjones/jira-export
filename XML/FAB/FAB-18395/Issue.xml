<Issue id="46478" key="FAB-18395" number="18395" project="10002" reporter="arman19940326" creator="arman19940326" type="10001" summary="Achieving high TPS in a token based platform with fees" priority="3" status="10100" created="2021-01-11 16:42:38.0" updated="2021-01-11 17:43:09.0" votes="0" watches="1" workflowId="60420" archived="N"> <description><! CDATA Suppose I have a token based business platform with millions of users each having a unique account number. For every transaction, sender  or sometimes receiver  has to pay a nominal fee. After a successful transaction, this fee will be deposited to a specific account, say with account number 1. Since this account's balance is frequently updated, I store the fees as a series of deltas which have to be aggregated at a later time in the future. In other words, for every transaction, a delta key-value pair is created that is associated with account number 1. If I want this system to have a TPS of 1000, then I have to somehow periodically prune the deltas and add their equivalent amount to the balance of the account with account number 1.  My first thought was that I might be able to prune the deltas at midnight of each day. To do this, I have to stop the system for some time, say 15 minutes. However, with TPS of 1000, there are 1000*60*60*24=86400000 deltas to be pruned. My platform needs to be able to delete 96000 deltas per second! This sounds kinda not possible. Then I thought of another solution. I thought of pruning a smaller number of deltas at shorter intervals, let's say every minute. But I think this approach would seriously decrease TPS. As a last resort, I thought I'd better handle the fees offchain but in this way I can't enjoy blockchain features and if anything goes wrong I have to handle it on my own. I have to prepare for every issue possible so as not to lose the fees.  In Hyperledfer Fabric, how would you implement a token based platform in which for every transaction, a nominal fee goes to one  or multiple  account s ?   ></description> </Issue>
