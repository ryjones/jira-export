<Action id="45982" issue="30850" author="jyellick" type="comment" created="2018-06-15 16:12:00.0" updateauthor="jyellick" updated="2018-06-15 16:14:44.0"> <body><! CDATA This is not a bug.  Changing to feature.  Could you add some more detail as well? I'm not sure how signing the config sequence would add byzantine fault tolerance.  A byzantine node may still sign.  The config sequence passed to the consenter is used as an optimization for CFT orderers so that not all orderers must reverify the transaction.  In the BFT case, all orderers should ignore the config sequence and revalidate regardless.  ></body> </Action>
<Action id="45988" issue="30850" author="kchristidis" type="comment" created="2018-06-15 16:39:56.0" updateauthor="kchristidis" updated="2018-06-15 16:39:56.0"> <body><! CDATA {quote}In the BFT case, all orderers should ignore the config sequence and revalidate regardless. {quote}  ^^ This.  Changing status to "Returned" until we hear back how signing adds BFT tolerance.  ></body> </Action>
<Action id="46379" issue="30850" author="tudordavid" type="comment" body="Indeed, all nodes revalidate. But it&apos;s still possible that a client sends a transaction assuming an old configuration (which would normally be rejected), but the leader of the BFT protocol ends up proposing the request with the current configuration number and thus gets it accepted. In most cases this isn&apos;t a problem, but I could see something like this being problematic in scenarios where the transaction is submitted with certain assumptions about the configuration under which it is executed (such as, for example, in a scenario where we include some form of incentivization for the replicas participating in the ordering)." created="2018-06-21 14:23:26.0" updateauthor="tudordavid" updated="2018-06-21 14:23:26.0"/>
<Action id="46385" issue="30850" author="kchristidis" type="comment" body="Still not sure I follow. Can you enumerate all the steps in your scenario and explain how the attack happens, if all nodes revalidate?" created="2018-06-21 14:52:41.0" updateauthor="kchristidis" updated="2018-06-21 14:52:41.0"/>
<Action id="46389" issue="30850" author="tudordavid" type="comment" created="2018-06-21 15:34:57.0" updateauthor="tudordavid" updated="2018-06-21 15:34:57.0"> <body><! CDATA Actually, you can disregard the previous comment. Indeed, if the client submitting a transaction knows in advance that it should not rely on the config sequence used as a parameter for correctness in any way, then it can include the required checks in the transaction itself and this is not an issue. Â  What I was wondering about was a scenario where a transaction is issued that depends on parameters of the current configuration (for example, transfer X tokens to the current set of orderers). If the client operated under an out-of-date configuration, it would transfer tokens to the wrong set of nodes. But indeed if the client knows not to rely on the config sequence number sent as a parameter to the ordering service for this, it is not an issue.  ></body> </Action>
<Action id="46453" issue="30850" author="jyellick" type="comment" created="2018-06-22 14:55:19.0" updateauthor="jyellick" updated="2018-06-22 14:55:19.0"> <body><! CDATA Just to clarify.  Clients do not send the config sequence.  The OSNs validate the transaction in context of a particular configuration (which has a sequence number).  To eliminate redundant checks in the CFT case, the OSN forwards the message to the other the other consenters along with the config sequence number that that OSN validated the message at.  So long as the config sequence has not advanced when the OSN receives the message, it may skip re-validating that transaction, because in a CFT model, it trusts the original OSN's validation.  Of course in a BFT model, there is no trust between nodes, so the receiving OSN must _always_ revalidate the transaction, regardless of any included sequence number.  Hope this helps.  ></body> </Action>
