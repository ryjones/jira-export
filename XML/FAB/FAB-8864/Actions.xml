<Action id="42639" issue="28525" author="ales" type="comment" created="2018-04-06 15:26:24.0" updateauthor="ales" updated="2018-04-06 15:26:24.0"> <body><! CDATA I think we should turn this into a first class ledger citizen. By doing so, we would solve once and for all the problem of agreement in fabric. Here's a strawman: * assume for each organization we have a special ledger namespace (let's call it the voting namespace for lack of a better word) with ** name = the org ** endorsement policy = the org * the chaincode can decide to issue PutState calls into its own voting namespace after checking that the creator of that transactor has certain properties (e.g. an admin of the same org) * clients of an org can signal to peers of that org their agreement with something by asking the chaincode to do a PutState(voting_namespace, agreement_id, agreement_terms) * the peer of an org will endorse a particular agreement by first looking at the voting namespace to see if it received instructions from clients of its org to endorse it  This way, you can solve the problem of cc lifecycle AND the more general problem of application-level agreements on fabric. For instance if Alice and Bob want to exchange an apple for an orange, each can vote on the terms of the agreement first and then their peer will endorse the transaction.  I think this should become a proper ledger citizen, with data stored on the ledger and read dependencies introduced. There's an issue with read dependencies (because peers of different org will attempt to read the same key from their respective, different voting namespace, and so the read-write set should be the same -  ~manish-sethi  seemed to think that this was feasible).     Thoughts  ~jyellick ,  ~manish-sethi ,  ~denyeart ?  ></body> </Action>
<Action id="55353" issue="28525" author="jyellick" type="comment" body="This is no longer necessary." created="2019-01-07 03:18:32.0" updateauthor="jyellick" updated="2019-01-07 03:18:32.0"/>
