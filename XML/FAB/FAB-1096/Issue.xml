<Issue id="13427" key="FAB-1096" number="1096" project="10002" reporter="corecode" creator="corecode" type="10001" summary="system needs to handle (sbft) orderer with gaps in raw ledger" priority="3" resolution="10001" status="6" created="2016-11-14 13:01:29.0" updated="2019-07-12 11:22:06.0" resolutiondate="2019-07-12 11:22:06.0" votes="0" watches="3" workflowId="35016"> <description><! CDATA the sbft implementation currently creates gaps in its raw ledger.  The system as a whole needs to handle this situation.  There are several options to achieve this:  # committer connects to all consensus peers.  Deliver() receives a "only report headers" option (probably needed anyways for FAB-1095), and the committer retrieves batches selectively from different atomic broadcast services so that the committer assembles one contiguous block chain. # sbft orderers use their established grpc connections to actively fill gaps in their own raw ledger.  This implementation would live outside of sbft. # committer gossip automatically propagates missing batches so that the atomic broadcast client can advance its window beyond the gap in the atomic broadcast server's raw ledger.  Does this only work probabilistically?  What happens if no atomic broadcast client is connected to those replicas that have a batch which can fill the gap of all connected atomic broadcast servers?  ></description> </Issue>
