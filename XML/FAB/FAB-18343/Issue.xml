<Issue id="46328" key="FAB-18343" number="18343" project="10002" reporter="tock" creator="tock" type="10004" summary="Onboarding does not discover channels" priority="5" resolution="10204" status="6" created="2020-11-17 08:01:30.0" updated="2020-11-17 11:01:22.0" resolutiondate="2020-11-17 11:00:55.0" votes="0" watches="2" workflowId="60244" archived="N"> <description><! CDATA *What* Onboarding an orderer using the last config block of the system channel. If the system channel has channel creation transactions after the last config block, onboarding will not discover them.   This affects onboarding with a bootstrap block (BootstrapMethod: file) as well as onboarding with a system channel join block via the channel participation API.  *How* Creating the system channel with config block with number >0, when there are already channels referenced (created) by it, such that on boarding is needed for both the system channel and additional channels.  * Define a 2 node raft network. Generate the genesis block of the system channel. * Start 3 empty OSNs. * Join 2 OSNs with a genesis block - OSN1 OSN2.  * Restart said 2 servers * create channel A - this one will have only 2 consenters * configure the system channel to include OSN3 (to make last config block height > 1) * create channel B - this one will have 3 consenters. Note: system channel now has 4 blocks: genesis, channel generation tx (A), config (add OSN3), channel generation tx (B). Last config block is the 3rd, i.e. block number 2. * get last config block of system channel and join the 3rd OSN with it.  Note   * verify onboarding on all channels - OSN3 should have: A inactive/config-tracker, B active/consenter * verify correct behavior by transacting on all channels.  *Probelm* The discovery logic missed to discover channels that were created after the last config block:  {quote}  e  OrdererOrg.orderer3  2020-11-17 09:25:18.935 IST  orderer.common.server  initSystemChannelWithJoinBlock -> INFO 011 Join-block was found for the system channel: systemchannel, number: 2  e  OrdererOrg.orderer3  2020-11-17 09:25:18.948 IST  orderer.common.server  Main -> INFO 012 Starting with system channel: systemchannel, consensus type: etcdraft  e  OrdererOrg.orderer3  2020-11-17 09:25:18.949 IST  orderer.common.server  Main -> INFO 013 Setting up cluster  e  OrdererOrg.orderer3  2020-11-17 09:25:18.949 IST  orderer.common.cluster  loadVerifier -> ERRO 014 Channel systemchannel has no blocks, skipping it  e  OrdererOrg.orderer3  2020-11-17 09:25:18.951 IST  orderer.common.cluster  replicateNeededChannels -> INFO 015 Will now replicate chains  e  OrdererOrg.orderer3  2020-11-17 09:25:18.955 IST  orderer.common.cluster.replication  fetchLastBlockSeq -> INFO 016 127.0.0.1:26500 is at block sequence of 3 channel=systemchannel  e  OrdererOrg.orderer3  2020-11-17 09:25:18.955 IST  orderer.common.cluster.replication  fetchLastBlockSeq -> INFO 017 127.0.0.1:26505 is at block sequence of 3 channel=systemchannel  e  OrdererOrg.orderer3  2020-11-17 09:25:18.955 IST  orderer.common.cluster.replication  connectToSomeEndpoint -> INFO 018 Connected to 127.0.0.1:26505 with last block seq of 3 channel=systemchannel  e  OrdererOrg.orderer3  2020-11-17 09:25:18.955 IST  orderer.common.cluster.replication  obtainStream -> INFO 019 Sending request for block  0  to 127.0.0.1:26505 channel=systemchannel  e  OrdererOrg.orderer1  2020-11-17 09:25:18.956 IST  comm.grpc.server  1 -> INFO 0ae streaming call completed grpc.service=orderer.AtomicBroadcast grpc.method=Deliver grpc.peer_address=127.0.0.1:39592 grpc.peer_subject="CN=orderer3.example.com,L=San Francisco,ST=California,C=US" error="context finished before block retrieved: context canceled" grpc.code=Unknown grpc.call_duration=1.860405ms  e  OrdererOrg.orderer2  2020-11-17 09:25:18.956 IST  comm.grpc.server  1 -> INFO 09d streaming call completed grpc.service=orderer.AtomicBroadcast grpc.method=Deliver grpc.peer_address=127.0.0.1:34884 grpc.peer_subject="CN=orderer3.example.com,L=San Francisco,ST=California,C=US" error="context finished before block retrieved: context canceled" grpc.code=Unknown grpc.call_duration=1.730162ms  e  OrdererOrg.orderer3  2020-11-17 09:25:18.956 IST  orderer.common.cluster.replication  pullBlocks -> INFO 01a Got block  0  of size 15 KB from 127.0.0.1:26505 channel=systemchannel  e  OrdererOrg.orderer3  2020-11-17 09:25:18.956 IST  orderer.common.cluster.replication  pullBlocks -> INFO 01b Got block  1  of size 20 KB from 127.0.0.1:26505 channel=systemchannel  e  OrdererOrg.orderer3  2020-11-17 09:25:18.957 IST  orderer.common.cluster.replication  pullBlocks -> INFO 01c Got block  2  of size 26 KB from 127.0.0.1:26505 channel=systemchannel  e  OrdererOrg.orderer3  2020-11-17 09:25:18.957 IST  orderer.common.cluster.replication  pullBlocks -> INFO 01d Got block  3  of size 21 KB from 127.0.0.1:26505 channel=systemchannel  e  OrdererOrg.orderer3  2020-11-17 09:25:18.957 IST  orderer.common.cluster  Channels -> INFO 01e Block 0 doesn't contain a new channel  e  OrdererOrg.orderer3  2020-11-17 09:25:18.957 IST  orderer.common.cluster  Channels -> INFO 01f Block 1 contains channel testchannel {color:#DE350B} e  OrdererOrg.orderer3  2020-11-17 09:25:18.958 IST  orderer.common.cluster  *discoverChannels -> INFO 020 Discovered 1 channels:  testchannel *{color}  e  OrdererOrg.orderer3  2020-11-17 09:25:18.958 IST  orderer.common.cluster  channelsToPull -> INFO 021 Evaluating channels to pull:  testchannel   e  OrdererOrg.orderer3  2020-11-17 09:25:18.958 IST  orderer.common.cluster  channelsToPull -> INFO 022 Probing whether I should pull channel testchannel {quote}  *Why* The logic that scans the blocks of the system channel for channel creation (`cluster.ChainInspector`) stops at the config block number, rather than at the last block of the system channel.  https://github.com/hyperledger/fabric/blob/1f6fb0849c6cfb7be9818d40f1e40e35ff5c5a1d/orderer/common/cluster/replication.go#L540  *Impact* Impact is very low because this behavior can be avoided by adding a consenter to the system channel and then blocking the ability to create channels until it is fully onboard.   Moreover, as the system channel starts and catches up, the channels are discovered and pulled to the new node. See:  https://github.com/tock-ibm/fabric/tree/onboarding-does-not-discover-channels-but-eventually-catchup    ></description> </Issue>
