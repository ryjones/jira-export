<Action id="70693" issue="46328" author="yacovm" type="comment" created="2020-11-17 09:02:08.0" updateauthor="yacovm" updated="2020-11-17 09:02:08.0"> <body><! CDATA {quote}Onboarding an orderer using the last config block of the system channel. If the system channel has channel creation transactions after the last config block, onboarding will not discover them. {quote}    In the past, when raft replication and onboarding was made, you had to add a node to the system channel in order to make it onboard the cluster. So until the node was onboarded, the cluster was in a degraded redundancy mode since you have a replicating node and you increased your quorum size. It was expected that you let the node sync up before you create channels, which happens rarely.     In any case: # After the node sync up it will get the channel creation blocks and will spin up a chain for each # It is impossible to know what is the last channel creation block at the time of replication, since we are in an asynchronous system and you can create channels while replicating, and nodes come and go. What you can be sure of, however, is that the bootstrap block you are given, exists. So that's why this sequence is used for the system channel.  ></body> </Action>
<Action id="70696" issue="46328" author="tock" type="comment" created="2020-11-17 10:57:46.0" updateauthor="tock" updated="2020-11-17 10:57:46.0"> <body><! CDATA  ~yacovm   You are correct.   Here is a test to verify that: As the system channel starts and catches up, the channels are discovered and pulled to the new node. See: https://github.com/tock-ibm/fabric/tree/onboarding-does-not-discover-channels-but-eventually-catchup    ></body> </Action>
<Action id="70697" issue="46328" author="tock" type="comment" body="Works as expected. Had to alter the test to wait for the system channel to spin up and fetch the rest of the blocks, at which point the new channel was detected." created="2020-11-17 11:00:55.0" updateauthor="tock" updated="2020-11-17 11:01:22.0"/>
