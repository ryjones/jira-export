<Issue id="35111" key="FAB-12729" number="12729" project="10002" reporter="yacovm" assignee="yacovm" creator="yacovm" type="10003" summary="Support membership that is a subset of system channel" priority="3" resolution="10000" status="6" created="2018-11-05 20:30:52.0" updated="2019-03-01 13:12:06.0" resolutiondate="2018-12-12 09:34:10.0" votes="0" watches="4" workflowId="46546"> <description><! CDATA Each raft OSN needs to be a member of the system channel. However - not every member of the system channel, needs to service all channels. For example - if a system channel contains 5 OSNs, we should support a channel that is serviced by 3 OSNs.  This is useful for use cases that involve: * Confidentiality requirements * Higher throughput of broadcast (block cutting) preferred over high availability * Low latency requirements  Even though all OSNs receive the transaction of the channel creation through the system channel, only some of them should process it, and some should ignore it, and not create a new chain for that channel.  This, however - cannot be achieved from the multichannel common code that creates the new chain, as it needs to stay oblivious of consensus-implementation.  Therefore, I propose to add logic in the etcdraft chain implementation to skip calling *support.WriteConfigBlock* (which triggers the creation of the genesis block of a new channel) in case the OSN isn't in the consenter set (via a certificate lookup).  Every chain knows its own name (ID) and the consenter has the *conf *localconfig.TopLevel* reference, which contains the system channel name. With this, we can have this check appear only in the system channel and not in every chain so that we minimize the performance hit on users.  As part of FAB-12704 I'm going to add a method in the etcdraft chain to detect whether our own OSN is in the consenter set given a config block, so we can just reuse it.  Â   Thoughts? Comments?   ~jyellick   ~kchristidis   ~guoger   ~C0rWin   ></description> </Issue>
