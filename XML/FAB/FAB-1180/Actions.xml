<Action id="19834" issue="13513" author="kchristidis" type="comment" created="2016-11-22 14:33:14.0" updateauthor="kchristidis" updated="2016-11-22 14:49:29.0"> <body><! CDATA The bar graphs are definitely interesting. I'd be curious to see how they look like with your modified goroutine scheduler.  We'll always be to the right of the area that you graph, so it makes sense for us to support this.  As is the case with FAB-1171, we'll go for it. Thank you for submitting this.  ></body> </Action>
<Action id="29520" issue="13513" author="guoger" type="comment" created="2017-08-08 04:13:33.0" updateauthor="guoger" updated="2017-08-08 04:13:33.0"> <body><! CDATA Given current code, I feel the changes needed are too invasive (especially for fsblkstorage, which is not available at the time of this JIRA if my archaeological knowledge is correct), comparing to the performance gain. I'm not sure if we should sacrifice readability and code genericness for such improvement. I tried to implement custom codec and modify deliver path, but not finished with block storage yet. If you think it is something worth pursuing, I could continue. cc  ~kchristidis   ~bcbrock   ~jyellick   ></body> </Action>
<Action id="29670" issue="13513" author="kchristidis" type="comment" body=" ~manish-sethi : What are your thoughts on this? Would it be easy (and/or a useful exercise) to experiment with storing SerializedDeliverResponse in the ledger instead of blocks?" created="2017-08-10 23:31:13.0" updateauthor="kchristidis" updated="2017-08-10 23:31:13.0"/>
<Action id="29784" issue="13513" author="jyellick" type="comment" body="This is not containable for v1.1, moving to backlog." created="2017-08-13 17:44:37.0" updateauthor="jyellick" updated="2017-08-13 17:44:37.0"/>
<Action id="30903" issue="13513" author="manish-sethi" type="comment" created="2017-09-14 22:00:53.0" updateauthor="manish-sethi" updated="2017-09-14 22:00:53.0"> <body><! CDATA This is how I would have approached this personally -  First, we are not using protos to their best possible manner. By default protos in golang uses reflection instead of code generation based approach. I had done some measurement and found the code generation based approach performs twice as fast when compared to the default refection based approach. Dave had created a JIRA on this (https://jira.hyperledger.org/browse/FAB-2784).  Second, for the most recent blocks (that are expected to be delivered most of the time), I can always cache the serialized delivery response.  Third, in order to measure any potential performance benefits, (assuming, the above two optimization in place) - I would measure how much gain I get  under the normal workload scenario (not just 100% `deliver` workload scenario).... may be a mix workload of 50% arrival of new trans + 50% of deliver to see the real gain I may get in the production. If I see the significant benefits, then only I would go for this change.  BTW, just for the sake of an interesting read - I came across this  https://capnproto.org/  which does not require marshal/unmarshall at all...     ></body> </Action>
<Action id="66927" issue="13513" author="sykesm" type="comment" body="Stale" created="2020-01-22 18:42:27.0" updateauthor="sykesm" updated="2020-01-22 18:42:27.0"/>
