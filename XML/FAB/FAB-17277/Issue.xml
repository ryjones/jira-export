<Issue id="43746" key="FAB-17277" number="17277" project="10002" reporter="senthil1" assignee="senthil1" creator="senthil1" type="10004" summary="Too many TCP connections and no reuse of connection pool" priority="3" resolution="10000" status="6" created="2019-12-17 11:21:56.0" updated="2020-02-11 16:46:54.0" resolutiondate="2020-02-11 16:46:43.0" votes="0" watches="2" workflowId="57598"> <description><! CDATA When the CouchDB is used as the StateDB, we observe too many TCP connections at the {{time_wait}} state.  $ {{netstat -n | grep -i 5984 | grep -i time_wait | wc -l}} {{34000}}  As the {{/proc/sys/net/ipv4/tcp_fin_timeout}} (i.e., keep-alive timeout) is usually set to 60 seconds in the Linux server, we quickly get into the following error when the peer tries to access the CouchDB:  {{connect: cannot assign requested address}}  *Reason for the above behavior.* The peer creates a large number of TCP connections to CouchDB because the default reusable connection pool size is 2 per host while the max pool size is 100 (combining all hosts) – refer to  transport.go|https://github.com/golang/go/blob/master/src/net/http/transport.go  and  golang http doc|https://golang.org/pkg/net/http/ . Thus only 2 TCP connections can be reused by the peer when it accesses CouchDB. When more than two goroutines in the peer try to simultaneously access the CouchDB, it results in new non-reusable connections (i.e., creation of new TCP connection outside the pool). Hence, when the peer runs for around 30 seconds at a high load, it results in too many TCP connections at the {{{{time_wait}}}} state.  *Fix:* We need set {{MaxIdleConns}} and {{MaxIdleConnsPerHost}} to 2000. This would create 2000 TCP connections in the pool and it would be reused whenever the peer accesses the CouchDB. As the peer is the only host for the CouchDB, we set the same value for both parameters.  ></description> </Issue>
