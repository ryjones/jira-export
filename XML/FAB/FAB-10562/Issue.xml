<Issue id="30918" key="FAB-10562" number="10562" project="10002" reporter="pd93" creator="pd93" type="10001" summary="Move from &apos;dep&apos; &amp; &apos;govendor&apos; to &apos;vgo&apos; (Go Modules)" priority="3" resolution="10000" status="6" created="2018-06-06 12:46:26.0" updated="2020-04-24 00:57:06.0" resolutiondate="2020-04-17 05:56:33.0" votes="1" watches="6" workflowId="35843"> <description><! CDATA *Edited 13/03/2019 to reflect the changes made to Golang's toolchain*  Now that modules are enabled by default in Golang v1.12, the Fabric team should consider what changes need to be made to the project to support this new dependency management system. You can read more about 'Go Modules' on the  Golang Wiki|https://github.com/golang/go/wiki/Modules .  Unlike existing dependency management tools such as 'govendor' or 'dep', modules are built into the toolchain and the go command itself. When you run 'go build', dependencies will automatically be downloaded for you (like dep does). Instead of a `Gopkg.lock` and `Gopkg.toml` files, 'go modules' use `go.mod` and `go.sum` files to track dependencies.  Adding module support will also allow things like vendored chaincode dependencies to be automatically downloaded and imported into our binary during install. This means *no more vendoring!*  Related: -  FAB-8841|https://jira.hyperledger.org/browse/FAB-8841  -  FAB-13667|https://jira.hyperledger.org/browse/FAB-13667   ></description> </Issue>
