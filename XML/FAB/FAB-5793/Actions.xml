<Action id="29880" issue="20206" author="yacovm" type="comment" body="https://gerrit.hyperledger.org/r/#/c/12495/" created="2017-08-15 23:02:04.0" updateauthor="yacovm" updated="2017-08-15 23:02:04.0"/>
<Action id="30127" issue="20206" author="scottz" type="comment" created="2017-08-23 22:36:23.0" updateauthor="scottz" updated="2017-08-23 22:36:23.0"> <body><! CDATA Surya and I have been testing this solution for this bug. Part of the solution was to read the environment configuration variable every time when AddPayload() is entered: viper.GetBool("peer.gossip.nonBlockingCommitMode").  In the lab, we can set CORE_PEER_GOSSIP_NONBLOCKINGCOMMITMODE to true and successfully override the fix - but only if the variable is set BEFORE we START the peer. In other words, in a production environment that is already running with this code fixed, the operations manager would have to set this to true in their shell/environment AND then stop and start each peer again. This helps, because it prevents the need to upgrade, should we wish to disable the fix.   I was originally expecting that we would be able to change this behavior "on the fly". But, the way this was implemented, I understand why that won't work; the task is started with its own copy of environment variables and changing them in the parent shell would not change it in the child shell. Thus, it makes sense in our test scenario because we spin up a docker container with a specified set of env vars, and then we start the peer from within the docker container. Even when we remote login to the docker container and set the variable, it does not change behavior because the peer has already started (and has its own copy of the original env variable which it reads repeatedly). The only way to "change this on the fly" would be do provide a new API - code that would modify internal variable contents, similar to how we can dynamically change the logging levels for some components.   Which means, if there was no intent to be able to change the variable "on the fly", then there was no need to read it EVERY time we enter AddPayload(). The proper implementation would have been read it once upon initialization.   That said, we see no harm leaving it the way it is now. And so far, our testing has not found any problems with the solution, so I cannot foresee a need to use the variable to disable his fix. That bodes well for anyone planning to completely remove this override variable in future, leaving the fix permanently in place.   Other observations:  * We confirmed the new code is hit only on a peer that is a gossip orgLeader, which retrieves blocks directly from an orderer. * Lagging nonLeader peers use the gossip state transfer protocol to request groups of up to 11 blocks from a neighboring peer. This has a flow-control mechanism built-in, as the peer would request more blocks ONLY AFTER writing the first group to the ledger. * We recommend that network operators set the CORE_PEER_GOSSIP_BOOTSTRAP to point to an existing stable peer, when starting the new peer. (If erroneously set to self, then that new peer would not find other peers in the org, so it would be isolated and therefore elect itself as a leader and connect to orderer). It is preferable for a new peer to be a non-leader, since its ledger would lag the other peers for possibly a considerable time (potentially hours or days, based on number of blocks on the ledger and the traffic rate) until after it slowly catches up.  ></body> </Action>
