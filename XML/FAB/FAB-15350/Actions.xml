<Action id="59734" issue="39628" author="yacovm" type="comment" created="2019-05-05 21:50:44.0" updateauthor="yacovm" updated="2019-05-05 21:53:56.0"> <body><! CDATA I assume this was inspired by the Algorand paper.  I don't see any value of adding a VRF to the code base before we know that the Byzantine tolerant consensus algorithm actually chooses committees in a random manner.  Some Byzantine tolerant consensus algorithms don't choose committees, but instead they just either rotate leaders, or just do other stuff that doesn't use provable randomness.  If I recall correctly  from the paper|https://people.csail.mit.edu/nickolai/papers/gilad-algorand-eprint.pdf , committee selection when the number of nodes is low (a few hundreds) can tolerate a small ratio of byzantine nodes. Even with a committee of 500 nodes, the percentage of honest nodes is 90%, which in your example would lead to impractical assumptions.     !Screenshot from 2019-05-06 00-40-44.png!   So, clearly - using committee selection is good for large networks with thousands of nodes, and I don't think we'll have a Byzantine ordering service oriented for large networks in the near future.  Last but not least - Using VRFs may sound cool, but I think that it's an overkill and we can just use plain old hashes.  The reason VRF was picked in the Algorand paper is that they had an insanely strong adversary that can corrupt instantly, in any round - a specific percentage of nodes. With a VRF only the user can calculate its ranking at block *n*, and thus an attacker cannot predict the highest ranking node that can propose block *n+1* and corrupt that node before it gets the chance to propose the block.   However - real life doesn't work that way, and in real life hackers don't take over computers in less than a minute (like in the paper), and if they do - they don't stop controlling the machines because the rules of the game say they can only control *f* at a time.  Therefore we shouldn't really care about the winner being predictable before it has the chance to propose the block, and we can just use a hash, instead of a VRF.    CC  ~marko.vukolic          ></body> </Action>
