<Action id="20330" issue="12915" author="grapebaba" type="comment" body=" ~kchristidis It is interesting. If any plan to do it, I want to take if you can guide" created="2017-01-11 07:16:17.0" updateauthor="grapebaba" updated="2017-01-11 07:16:17.0"/>
<Action id="21197" issue="12915" author="daveryibm" type="comment" created="2017-02-27 22:46:08.0" updateauthor="daveryibm" updated="2017-02-27 22:49:55.0"> <body><! CDATA For what it's worth, I created a draft CR that attaches grpc unary and stream interceptors to Gari Singh's GRPCServer in fabric/core/comm.  This interceptor uses a statsd  https://www.datadoghq.com/blog/statsd/  client to send a counter metrics for the number of messages that have been sent through the GRPCServer.  In an earlier version of the code, I was keeping a count of the number of messages sent to each GRPC endpoint or "method".  Anyway, I'll leave the draft up in case anyone is interested in the code, and I've also published it on Github, as it has a prettier UI to view the changes.  Github: https://github.com/masterDev1985/fabric/commit/9256ee4f28440272569f037b52240fa2f86b82c8  Gerrit: https://gerrit.hyperledger.org/r/#/c/6353/  I should point out that I didn't publish the CR because I wasn't sure what I was implementing was a compelling addition to the fabric and because I think others are already working on something similar.  I think the value of my CR at this point is in how it demonstrates how lightweight the statsd client is for go.  ></body> </Action>
<Action id="21200" issue="12915" author="grapebaba" type="comment" body=" ~daveryIBM Nice to see，will you lead development of this story?" created="2017-02-28 01:26:19.0" updateauthor="grapebaba" updated="2017-02-28 01:54:06.0"/>
<Action id="21217" issue="12915" author="daveryibm" type="comment" created="2017-02-28 18:35:42.0" updateauthor="daveryibm" updated="2017-02-28 18:35:42.0"> <body><! CDATA Kai Chen not right now.  I've got other things to focus on right now, but maybe I could help out in the future.  I wanted to leave one more thought about my implementation.  I think a much more valuable contribution would have been to create a library that wraps a metrics package like go-metrics or the statsd client and exposes methods to access or use these clients in a similar fashion to the nifty go-logging library.  I really like how this package makes it so simple for packages all over the fabric to write logs in a standardized format without everyone having to do anything more than import the package and instantiate the logger.  The metrics package should be similar; after some setup code in main.go to configure your chosen metrics client, other packages would just need a line similar to `metricsClient := metrics.MustGetMetricsClient("consensus")` to be able to send metrics.  I suppose this deliverable should also include a set of mock clients to make it easier for other developers to write unit tests for their metrics as they add this functionality to the fabric packages they control.    ></body> </Action>
<Action id="28205" issue="12915" author="kchristidis" type="comment" body="FYI: https://docs.google.com/document/d/1nPjGpl5gdd22iF0ju6BLOioWhBOE1U16_-yGCLxEZuw/edit" created="2017-07-12 03:13:15.0" updateauthor="kchristidis" updated="2017-07-12 03:13:15.0"/>
<Action id="28206" issue="12915" author="grapebaba" type="comment" body=" ~kchristidis That is a draft design, welcome more core member feedback. Thanks" created="2017-07-12 03:40:12.0" updateauthor="grapebaba" updated="2017-07-12 03:40:12.0"/>
<Action id="28638" issue="12915" author="kchristidis" type="comment" body="Metrics to keep in mind: http://docs.confluent.io/current/kafka/monitoring.html" created="2017-07-19 05:25:41.0" updateauthor="kchristidis" updated="2017-07-19 05:25:41.0"/>
<Action id="53050" issue="12915" author="jyellick" type="comment" created="2018-11-05 21:11:43.0" updateauthor="jyellick" updated="2018-11-05 21:13:19.0"> <body><! CDATA Now that we are finally pushing to bring metrics in via go-kit/metrics (to enable both prometheus and statsd), it's probably time to pick this up again.  Per the documentation at: https://godoc.org/github.com/Shopify/sarama there is the following set of metrics:  {noformat} +----------------------------------------------+------------+---------------------------------------------------------------+ | Name                                         | Type       | Description                                                   | +----------------------------------------------+------------+---------------------------------------------------------------+ | incoming-byte-rate                           | meter      | Bytes/second read off all brokers                             | | incoming-byte-rate-for-broker-<broker-id>    | meter      | Bytes/second read off a given broker                          | | outgoing-byte-rate                           | meter      | Bytes/second written off all brokers                          | | outgoing-byte-rate-for-broker-<broker-id>    | meter      | Bytes/second written off a given broker                       | | request-rate                                 | meter      | Requests/second sent to all brokers                           | | request-rate-for-broker-<broker-id>          | meter      | Requests/second sent to a given broker                        | | request-size                                 | histogram  | Distribution of the request size in bytes for all brokers     | | request-size-for-broker-<broker-id>          | histogram  | Distribution of the request size in bytes for a given broker  | | request-latency-in-ms                        | histogram  | Distribution of the request latency in ms for all brokers     | | request-latency-in-ms-for-broker-<broker-id> | histogram  | Distribution of the request latency in ms for a given broker  | | response-rate                                | meter      | Responses/second received from all brokers                    | | response-rate-for-broker-<broker-id>         | meter      | Responses/second received from a given broker                 | | response-size                                | histogram  | Distribution of the response size in bytes for all brokers    | | response-size-for-broker-<broker-id>         | histogram  | Distribution of the response size in bytes for a given broker | +----------------------------------------------+------------+---------------------------------------------------------------+ {noformat}  and  {noformat} +-------------------------------------------+------------+--------------------------------------------------------------------------------------+ | Name                                      | Type       | Description                                                                          | +-------------------------------------------+------------+--------------------------------------------------------------------------------------+ | batch-size                                | histogram  | Distribution of the number of bytes sent per partition per request for all topics    | | batch-size-for-topic-<topic>              | histogram  | Distribution of the number of bytes sent per partition per request for a given topic | | record-send-rate                          | meter      | Records/second sent to all topics                                                    | | record-send-rate-for-topic-<topic>        | meter      | Records/second sent to a given topic                                                 | | records-per-request                       | histogram  | Distribution of the number of records sent per request for all topics                | | records-per-request-for-topic-<topic>     | histogram  | Distribution of the number of records sent per request for a given topic             | | compression-ratio                         | histogram  | Distribution of the compression ratio times 100 of record batches for all topics     | | compression-ratio-for-topic-<topic>       | histogram  | Distribution of the compression ratio times 100 of record batches for a given topic  | +-------------------------------------------+------------+--------------------------------------------------------------------------------------+ {noformat}  However, because Sarama has chosen to use go-metrics instead of go-kit/metrics, there is no obvious way to simply plug sarama into go-kit/metrics.  Instead, we'll need to take an approach very similar to the prometheus sink for go-metrics: https://github.com/deathowl/go-metrics-prometheus/blob/7cfe975c505b0cf33594913496d057316ee73bfc/prometheusmetrics.go#L66-L88  With a ticker, we can periodically poll the status of the metrics from go-metrics, and publish them to go-kit/metrics.  For better prometheus support, we should make the broker-id a label, and topic a label for the broker and topic related metrics respectively and allow go-kit/metrics to flatten it only for statsd.  ></body> </Action>
<Action id="53961" issue="12915" author="kchristidis" type="comment" body="https://gerrit.hyperledger.org/r/c/27741/" created="2018-11-28 21:05:34.0" updateauthor="kchristidis" updated="2018-11-28 21:05:34.0"/>
