<Action id="35000" issue="19423" author="baohua" type="comment" created="2017-11-21 02:14:51.0" updateauthor="baohua" updated="2017-11-21 02:14:51.0"> <body><! CDATA Sorry not get the problem.  IMHO, there's FSM for each chaincode now? Why FSM will block concurrent cc invocation?  Pls correct me if i'm wrong, thanks!  ></body> </Action>
<Action id="36059" issue="19423" author="mastersingh24" type="comment" created="2017-12-09 09:34:46.0" updateauthor="mastersingh24" updated="2017-12-09 09:34:46.0"> <body><! CDATA  https://gerrit.hyperledger.org/r/11867     ~muralisr  - are we going to do this for v1.1?  ></body> </Action>
<Action id="36068" issue="19423" author="muralisr" type="comment" created="2017-12-09 14:10:31.0" updateauthor="muralisr" updated="2017-12-09 14:10:31.0"> <body><! CDATA  ~mastersingh24  I'll take care of this over this weekend. May be easier to abandon  ~raidinesh80  changes and start over. Let me assign this to myself.  ( ~raidinesh80  I'll try a rebase first to preserve history).  ></body> </Action>
<Action id="37771" issue="19423" author="mastersingh24" type="comment" body=" ~muralisr   - The more I look at this and given we&apos;ve let this hang out there for a long time, IMHO we should push this to the next release in order to reduce risk at this point.  If we get this in early in the cycle for the next release, we can start really testing it by having people use it for a decent period of time" created="2017-12-23 10:24:46.0" updateauthor="mastersingh24" updated="2017-12-23 10:24:46.0"/>
<Action id="37772" issue="19423" author="muralisr" type="comment" created="2017-12-23 13:23:26.0" updateauthor="muralisr" updated="2017-12-23 13:23:26.0"> <body><! CDATA  ~mastersingh24  the risk of pushing it to next release is it'll get harder to remove the FSM.   How about this, I'll also test with Java shim which still has the FSM. If it works as expected that's actually an important datapoint - a fabric without FSM working with old chaincode with FSM shows complete parity.   Also note that its all internal (and is just 4 chaincode files) propose we let this in and revert if this gets hard. I don't think this at all risky in that sense.  ></body> </Action>
<Action id="37773" issue="19423" author="muralisr" type="comment" created="2017-12-23 15:41:08.0" updateauthor="muralisr" updated="2017-12-23 15:46:10.0"> <body><! CDATA Testing with Java chaincode verifies that chaincodes side remain unaffected by the FSM removal (peer does not have FSM, Java Chaincode has FSM). Since this validates peer side and the new peer side works with the new chaincode side, by extension it validates the chaincode side too.     Install Java CC {code:java} CORE_PEER_ADDRESS=10.0.0.35:7051 peer chaincode install -p /Users/muralisr/hyperledger/src/github.com/hyperledger/fabric/examples/chaincode/java/chaincode_example02 -n mycc -v 0 -l java 2017-12-23 10:34:28.591 EST  chaincodeCmd  checkChaincodeCmdParams -> INFO 001 Using default escc 2017-12-23 10:34:28.591 EST  chaincodeCmd  checkChaincodeCmdParams -> INFO 002 Using default vscc 2017-12-23 10:34:28.596 EST  container  WriteFolderToTarPackage -> INFO 003 rootDirectory = /Users/muralisr/hyperledger/src/github.com/hyperledger/fabric/examples/chaincode/java/chaincode_example02 2017-12-23 10:34:28.600 EST  main  main -> INFO 004 Exiting..{code} Instantiate Java cc {code:java} CORE_PEER_ADDRESS=10.0.0.35:7051 peer chaincode instantiate -n mycc -l java -v 0 -c '{"Args":  "init", "a","100","b","200" }' -C myc 2017-12-23 10:34:52.251 EST  chaincodeCmd  InitCmdFactory -> INFO 001 Get chain(myc) orderer endpoint: 127.0.0.1:7050 2017-12-23 10:34:52.253 EST  chaincodeCmd  checkChaincodeCmdParams -> INFO 002 Using default escc 2017-12-23 10:34:52.253 EST  chaincodeCmd  checkChaincodeCmdParams -> INFO 003 Using default vscc 2017-12-23 10:34:53.404 EST  main  main -> INFO 004 Exiting.....{code}    Invoke Java CC {code:java} CORE_PEER_ADDRESS=10.0.0.35:7051 peer chaincode invoke -n mycc -c '{"Args":  "invoke","a","b","10" }' -C myc 2017-12-23 10:35:11.606 EST  chaincodeCmd  InitCmdFactory -> INFO 001 Get chain(myc) orderer endpoint: 127.0.0.1:7050 2017-12-23 10:35:11.606 EST  chaincodeCmd  checkChaincodeCmdParams -> INFO 002 Using default escc 2017-12-23 10:35:11.606 EST  chaincodeCmd  checkChaincodeCmdParams -> INFO 003 Using default vscc 2017-12-23 10:35:11.644 EST  chaincodeCmd  chaincodeInvokeOrQuery -> INFO 004 Chaincode invoke successful. result: status:200 message:"Successfully transferred 10 assets from a to b." 2017-12-23 10:35:11.644 EST  main  main -> INFO 005 Exiting.....{code}    Query Java CC {code:java} CORE_PEER_ADDRESS=10.0.0.35:7051 peer chaincode query -n mycc -c '{"Args":  "query","a" }' -C myc 2017-12-23 10:35:20.811 EST  chaincodeCmd  checkChaincodeCmdParams -> INFO 001 Using default escc 2017-12-23 10:35:20.811 EST  chaincodeCmd  checkChaincodeCmdParams -> INFO 002 Using default vscc Query Result: {"Name":"a","Amount":90} 2017-12-23 10:35:20.848 EST  main  main -> INFO 003 Exiting.....{code}    Kill the CC container    {code:java} docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 1daeabd58e25 dev-jdoe-mycc-0-0fd54dfd58ee0d04b3ecec52734d75071ef4f2abe122656c5c66e51f28f65ce4 "java -jar chainco..." 32 seconds ago Up 31 seconds dev-jdoe-mycc-0 docker rm -f 1daeabd58e25 1daeabd58e25 {code}       Send another query    {code:java} CORE_PEER_ADDRESS=10.0.0.35:7051 peer chaincode query -n mycc -c '{"Args":  "query","a" }' -C myc 2017-12-23 10:35:50.608 EST  chaincodeCmd  checkChaincodeCmdParams -> INFO 001 Using default escc 2017-12-23 10:35:50.608 EST  chaincodeCmd  checkChaincodeCmdParams -> INFO 002 Using default vscc Query Result: {"Name":"a","Amount":90} 2017-12-23 10:35:51.813 EST  main  main -> INFO 003 Exiting..... docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES a561bc717b54 dev-jdoe-mycc-0-0fd54dfd58ee0d04b3ecec52734d75071ef4f2abe122656c5c66e51f28f65ce4 "java -jar chainco..." 4 seconds ago Up 4 seconds dev-jdoe-mycc-0 {code}    ></body> </Action>
<Action id="37774" issue="19423" author="muralisr" type="comment" created="2017-12-23 15:42:59.0" updateauthor="muralisr" updated="2017-12-23 15:42:59.0"> <body><! CDATA CChecker stress tests    {code:java} ./ccchecker (50) Time for invokes(ms): 4277 Num successful invokes: 5000(5000) Num successful queries: 5000(5000) Test complete ./ccchecker (100) Time for invokes(ms): 7982 Num successful invokes: 10000(10000) Num successful queries: 10000(10000) Test complete {code}    ></body> </Action>
<Action id="38102" issue="19423" author="jeffgarratt" type="comment" created="2018-01-04 20:51:17.0" updateauthor="jeffgarratt" updated="2018-01-04 20:51:17.0"> <body><! CDATA  ~muralisr   ~mastersingh24   I am concerned about the reasoning for removing the FSM(s) in general.  They were created to allow for simple comprehension of the state transitions and the messages triggering them, and subsequent cancellation/continuation.  I have looked at  https://gerrit.hyperledger.org/r/#/c/11867/  and it appears that the once declarative form of transitions is now embedded throughout the code, making it much less discernible and comprehensible.  A trade-off was made in the initial design of verbosity for the sake comprehensibility, and traceability between the chaincode and its shim counterpart (FSM).  I do not understand how the concept of re-entry would preclude the use of the existing FSM, but would rather simply reduce the transitions.  ></body> </Action>
