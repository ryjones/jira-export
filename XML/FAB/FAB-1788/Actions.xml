<Action id="20522" issue="14217" author="elli-androulaki" type="comment" created="2017-01-23 09:36:12.0" updateauthor="elli-androulaki" updated="2017-01-23 09:42:47.0"> <body><! CDATA Hi, a few remarks from my side.  In the case where an invoked chaincode CCa queries a chaincode CCb, read sets belonging to CCb that was read (even) need to be listed within the simulation results of the transaction of CCa. If the two belong to a different chain/channel, then this leaks some information already. That is, the following two are accessible to the participants of the chain of CCa, even if they are not all authorized to access data of the chain of CCb: a) the fact that a chain with a specific name existst in CCb b) the fact that a chaincode  with a cspecific name exists in the chain of CCb c) some intuition of the logic of CCb/ and the participants of the chain of CCb can be retrieved given the logic of CCa  This becomes even more intense given the naming convention described in FAB 1783, and the fact that CCb is and instance of a chaincode that is running in the chain of CCa.  Apart from confidentiality issues, however, it seems to me that one would need to have some coordination between two chains to ensure, e.g., some order within transactions that modify the state of CCb  (it its chain), and the transactions of CCa that read its state (in CCa's chain).   Overall, IMHO chaincode-to-chaincode invocations or queries may first make sense to be addressed int he same chain. This is already complex given the deployment model described in FAB-1783, and libraries to support chaincode invocation access control and encryption that need to expand to cover such cases.      ></body> </Action>
<Action id="20566" issue="14217" author="angelo.decaro" type="comment" created="2017-01-25 18:27:52.0" updateauthor="angelo.decaro" updated="2017-01-26 16:13:14.0"> <body><! CDATA  ~binhn ,  ~muralisr , do you have in mind a use case that might help the understanding?  Let's take the following example. CC1 queries CC2 that returns value A. Is A supposed to be included by the fabric in the RW set produced by CC1? Will the chaincode developer be in charge to do that?  ></body> </Action>
<Action id="20728" issue="14217" author="elli-androulaki" type="comment" created="2017-02-07 16:42:51.0" updateauthor="elli-androulaki" updated="2017-02-07 16:42:51.0"> <body><! CDATA CC2CC for v1: CC queries another CC that resides on the same peer (same application domain). We need to expand on this  ~muralisr ,  ~adc ,  ~binhn .  ></body> </Action>
<Action id="20732" issue="14217" author="binhn" type="comment" created="2017-02-07 20:01:31.0" updateauthor="binhn" updated="2017-02-07 20:01:31.0"> <body><! CDATA  ~adc  As written in phase 1, the query value is not in the MVCC. There can be many use-cases. For example, a chaincode makes decision based on some external value that it needs at the time of execution. One might argue that the application could pass the value in as parameter input, but there are cases where the chaincode on each peer may query different things depending on environment; however, maintain consistency at the proposal response.   ~ellaki  Phase 1 and 2 only deal with local chaincodes as remote invoke is not possible without creating another transaction, which is part of phase 3. And in which case, the new transaction would carry a different transaction proposal context. But now we would run into a lot of complexity of multiphase commit.  ></body> </Action>
<Action id="53523" issue="14217" author="manojamin" type="comment" body=" ~binhn : Is there a plan to implement Phase 3 such that user context on PeerA, ChannelA, ChaincodeA  be able to invoke ChaincodeB on ChannelB which is also packaged and deployed on PeerA?" created="2018-11-16 03:04:59.0" updateauthor="manojamin" updated="2018-11-16 03:04:59.0"/>
<Action id="54620" issue="14217" author="binhn" type="comment" body=" ~manojamin  Not at this point though some work such as FAB-11980 could take it a step closer." created="2018-12-10 20:04:51.0" updateauthor="binhn" updated="2018-12-10 20:04:51.0"/>
