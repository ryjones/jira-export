<Issue id="13761" key="FAB-1354" number="1354" project="10002" reporter="c0rwin" assignee="c0rwin" creator="c0rwin" type="10001" summary="Refactor GossipStateProvider API." priority="3" resolution="10200" status="6" created="2016-12-11 14:49:01.0" updated="2019-05-15 12:49:40.0" resolutiondate="2019-05-15 12:49:40.0" votes="0" watches="1" workflowId="42882"> <description><! CDATA Currently GossipStateProvider expose following APIs  {code} type GossipStateProvider interface {  	// Retrieve block with sequence number equal to index 	GetBlock(index uint64) *common.Block  	AddPayload(payload *proto.Payload) error  	// Stop terminates state transfer object 	Stop() } {code}  Where method  {code} AddPayload(payload *proto.Payload) error {code}  is used to populate local state with new block arrived, while AddPayload is not very descriptive name, moreover it enforce following usage during submission:  {code} 	payload := createPayload(seqNum, block) 	// Use payload to create gossip message 	gossipMsg := createGossipMsg(payload)  	// Add payload to local state payloads buffer 	state.AddPayload(payload) {code}  meaning creating gossiping payload and gossip message, while it's much cleaner to simply submit new block in following way:  {code} 	payload := createPayload(seqNum, block) 	// Use payload to create gossip message 	gossipMsg := createGossipMsg(payload)  			// Add payload to local state payloads buffer 			state.AddPayload(block) {code}  Therefore interface should be refactored into:  {code} type GossipStateProvider interface {  	// Retrieve block with sequence number equal to index 	GetBlock(index uint64) *common.Block  	SubmitBlock(block *common.Block) error  	// Stop terminates state transfer object 	Stop() } {code}  And also need to make sure GossipService interface will be aligned and will look as following:  {code} // GossipService encapsulates gossip and state capabilities into single interface type GossipService interface { 	gossip.Gossip  	// JoinChannel joins new chain given the configuration block and initialized committer service 	JoinChannel(committer committer.Committer, block *common.Block) error 	// GetBlock returns block for given chain 	GetBlock(chainID string, index uint64) *common.Block 	// SubmitBlock submit block into local ledger 	SubmitBlock(chainID string, block *common.Block) error } {code}  ></description> </Issue>
