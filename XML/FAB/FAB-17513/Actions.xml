<Action id="68013" issue="44373" author="btl5037" type="comment" body="Looking more into this, command &quot;A&quot; is a more interesting scenario. The connection profile depends on the channel name to choose which endorsing peers to send to, but the channel name is not an input to the the install command, but it&apos;s a dependency to using a config profile for installation. There may be no good solution for scenario &quot;A&quot; as the only options I can think of here are, send to all endorsing peers, regardless of channel, or require the peer names be passed on the CLI still and then use the connection profile to look up their URL and TLS information, neither are really good solutions." created="2020-02-20 01:06:47.0" updateauthor="btl5037" updated="2020-02-20 01:06:58.0"/>
<Action id="69050" issue="44373" author="denyeart" type="comment" created="2020-04-26 03:52:13.0" updateauthor="denyeart" updated="2020-04-26 03:52:13.0"> <body><! CDATA Concerning  A , chaincode install is a management operation targeted for a single peer. Typically connection profiles are used so that the client can automatically pick any of the configured peers. Therefore I don't see a lot of value in using a connection profile with the chaincode install command. And if it were used, it should certainly pass in the target peer name of where you want the chaincode installed. Since the commands don't currently take a target peer name to be used with the connection profile, I'm inclined to defer this one and improve the command documentation to state that CLI connection profiles are not intended to be used for calls that should target a specific peer. However, I see that even the legacy 'peer chaincode install' command can accept a connection profile, but again, with no peer name passed. Let's check with  ~wlahti  to see if he knows the original intent here.  Concerning  B , yes it does seem that both TLSCACerts.Path and TLSCACerts.Pem should be supported. That one can certainly be fixed with this issue.  ></body> </Action>
<Action id="69056" issue="44373" author="btl5037" type="comment" created="2020-04-26 04:38:06.0" updateauthor="btl5037" updated="2020-04-26 04:51:14.0"> <body><! CDATA I had discussed this with both Will and Jason prior to opening this Jira. No one really remembered this code other than the fact it exists, but the best consensus we all settled on was the code was a copy and paste from legacy lifecycle, and since there was no functional test, it was never discovered this operation failed, despite the fact it was implemented.  I tried to implement something to make this work  A , but it became a larger surface area than I intended and punted on it. If we decided to allow it with a targetPeer flag, this would make it much easier, and operationally make an admins life simpler. Otherwise I think the CLI is sloppy given that the installs `help` command says it supports a connection profile. If we decide not to do anything, we should at least remove that flag on the install command.  I understand your point with option one, but from an operational standpoint, the fact we can't use a connection profile, when other operations support it is disappointing, it forces us to carry around a bunch of artifacts to perform simple tasks where a single connection profile could take the place and if we have to carry them around for one command, we may as well carry them around for all the commands.  ></body> </Action>
<Action id="69424" issue="44373" author="wlahti" type="comment" body="Taking a quick look at this now. I didn&apos;t realize anyone ever noticed the connection profile option for the CLI. We kinda tacked that on at the last minute so this is the first feedback on its usage that I&apos;m aware of in the 2+ years it has existed. :) " created="2020-06-09 12:55:42.0" updateauthor="wlahti" updated="2020-06-09 12:55:42.0"/>
<Action id="69425" issue="44373" author="wlahti" type="comment" created="2020-06-09 16:02:49.0" updateauthor="wlahti" updated="2020-06-09 16:04:24.0"> <body><! CDATA For the install-related portion of this JIRA:  https://github.com/hyperledger/fabric/pull/1383   Enabling use of the PEM bytes instead of the file are more involved changes and should be split into a new story (feature request) as PEM bytes for certificates has never been supported by the CLI up to this point.  ~btl5037   ~suryalnvs  I assume you'd still like this functionality to be implemented? Should be fairly straightforward to do so, just want to be sure you'd still benefit from this work.   ></body> </Action>
<Action id="69458" issue="44373" author="btl5037" type="comment" created="2020-06-13 03:11:13.0" updateauthor="btl5037" updated="2020-06-13 03:11:13.0"> <body><! CDATA Yes, this would still make our lives way easier. However, I think its going to carry some additional baggage with it. While testing this out a while back I think I figured out why for legacy reasons we required stuff to be base64 encoded. In this case, when you try to embed the pem in the connection profile, Viper loses its mind while trying to unmarshal the struct as it does recognize the multiline operator in yaml properly, so  pem: |    bytes  Does recognize the vertical bar as valid. Just a heads up in case you encounter it, its possible it might be an easy fix to work around, but we all know Viper has more than a few problems in it.  ></body> </Action>
