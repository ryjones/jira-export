<Issue id="44233" key="FAB-17466" number="17466" project="10002" reporter="sykesm" assignee="tsharris" creator="sykesm" type="10001" summary="Implement function to generate create channel transaction from parameters" priority="3" resolution="10000" status="6" created="2020-02-03 18:04:12.0" updated="2020-03-16 19:25:48.0" resolutiondate="2020-02-27 15:45:13.0" votes="0" watches="2" workflowId="58134" archived="N"> <description><! CDATA As a fabric administrator, I want to use a fit-for-purpose library to generate a channel creation transaction from input data structures. This library should not make assumptions about how any key material is stored and should not require network access.  Acceptance:  Calling a function similar to what we have below returns a proto-encoded genesis block that roughly matches that produced by {{configtxgen -channelID channel-id -profile profile-name ...}} using a prototypical {{configtx.yaml}} from our integration test suite.  Generating a genesis block from the configtx.yaml and an msp folder, and using code implemented in this story, I should get two `proto.Equal` blocks.  {code} type Profile struct { 	Consortium   string 	Application  *Application 	Orderer      *Orderer 	Consortiums  map string *Consortium 	Capabilities map string bool 	Policies     map string *Policy }  ...  type Option func(options)  // Options for extensibility type options struct {}  func CreateChannelTx(channelSpec ChannelConfig, options ...Option) (*cb.Block, error) { // Implement me } {code}  The types that are listed above come from the {{genesisconfig}} package in fabric and appear to be managed through a combination of viper and yaml processing. We do not want to use these packages directly; we want to copy and adapt the necessary structures into our package.  ></description> </Issue>
