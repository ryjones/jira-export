<Issue id="29239" key="FAB-9400" number="9400" project="10002" reporter="rhegde" creator="rhegde" type="10001" summary="Fabric CouchDB image should use a better approach to run as non-root user" priority="3" resolution="10001" status="6" created="2018-04-06 19:23:27.0" updated="2019-03-26 11:03:50.0" resolutiondate="2019-03-26 11:03:50.0" votes="0" watches="2" workflowId="35681"> <description><! CDATA Fabric Release - 1.0.6  Hyperledger Fabric provided Couch DB image is build in a way that it executes the ENTRYPOINT as root user and then it drops the privileges to username:groupname (couchdb:couchdb) to run CMD. couchdb:couchdb is created as part of the dockerfile and this maps (almost always) to an host UID:GID (1000:999).  Couch db process running inside the container are run as 1000:999 and this causes all its data persistence files to be created on the host mounted volume by that UID:GID identity.  Now - in our LDAP infrastructure, 1000:999 is already mapped to some user and hence this becomes a security issueo.  These are suggestion that can be explored - * By refactoring the couch db dockerfile so that it can seamlessly allow uses of `--user` option to be used during `docker run`. This is on the same line where hyperledger peer or orderer can be run using non-root user.  This was the security finding on this subject {code:java} Typically, the user ID of a process running within a Docker container is the same as if it were outside the container. Should one of these processes be able to break out of the container onto the host, it would be running as the root user and would have complete control over the host.{code} * Enhance the hyperledger fabric couch db image such that it supports accepting UID:GID as a docker environment variable. This will allow passing the preferred host UID:GID rather currently assigned 1000:999. There is similar patch added to apache maintained couchdb dockerfile for similar reason via  https://github.com/apache/couchdb-docker/issues/53      ></description> </Issue>
