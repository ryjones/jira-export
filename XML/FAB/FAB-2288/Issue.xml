<Issue id="14850" key="FAB-2288" number="2288" project="10002" reporter="joshhus" assignee="joshhus" creator="joshhus" type="10004" summary="Update Doc Glossary" priority="2" resolution="10000" status="6" created="2017-02-16 19:44:40.0" updated="2018-07-20 14:11:41.0" resolutiondate="2017-03-28 15:54:59.0" votes="0" watches="3" workflowId="37481"> <description><! CDATA Discussion occurred on email - pasting here. File is glossary.md  Also need to add:  leading peer anchor peer     Here is the glossary comments from me: Updates or changes in red (Keith see in pink below for where I need you to comment- please look for multiple places) (Murali see in this color and comment - see multiple places)  Blockchain Network A blockchain network consists of, at minimum, one peer (responsible for endorsing and committing transactions) leveraging an ordering service, and a membership services component (certificate authority) that distributes and revokes cryptographic certificates representative of user identities and permissions.  Take out what is in red-- I think this will just confuse the situation.    Permissioned Network A blockchain network where any entity (node) is required to maintain a member identity on the network. End users must be authorized and authenticated in order to use the network.  This can be done with fabric-CA or can use a CA sepcified and plugged in. (try to phrase this better please)   Peer Peer is a component that executes, and maintains a ledger of, transactions.  (remove this part)  There are two roles for a peer Add this: Peer has two roles  – endorser and committer.  The architecture has been designed such that a peer is always a committer, but not necessarily always an endorser.  There are policies that define the endorsers.  Peers play no role in the ordering of transactions.      Member- Keith needs to update this definition- does not seem quite right   <ks>I agree that this is confusing.  I think we should just use the word "Participant" or "Organization" and not use "Member" for this</ks> A Member is a participant (such as a company or organization) that operates components - Peers, Orderers, and applications - in the blockchain network.  A member is identified by its CA certificate (i.e. a unique enrollment).   A Member’s peer will be leveraged by end users in order to perform transaction operations on specific channels   Transaction Refers to an operation in which an authorized end user performs read/write operations against the ledger. There are three unique types of transactions - deploy, invoke, and query.-   I would remove this last sentence, as there are now all sorts of things here beside transaction proposal, send to orderer,etc,.. at CLI level.  There is instantiation and install of chainocode,etc,.. I would point to the deeper documentation for commenting on types of transactions,etc,..    End User An end user is someone who would interact with the blockchain through a set of published APIs (i.e. the hfc SDK).  You can have an admin user who will typically grant permissions to the Member’s components, and a client user, who, upon proper authentication through the admin user, will drive chaincode applications (deploy, invoke, query) on various channels.  In the case of self-executing transactions, the application itself can also be thought of as the end user.  Remove what is in red    Ordering Service A centralized or decentralized (replace this with"Ordering"-- we don't want to go into centralized/decentalized specifically) service that orders transactions in a block.  You can select different implementations of the “ordering” function - e.g “solo” for simplicity and testing, Kafka for crash fault tolerance, or sBFT/PBFT for byzantine fault tolerance. You can also develop your own protocol to plug into the service.      Orderer One of the network entities that form the ordering service. A collection of ordering service nodes (OSNs) will order transactions into blocks according to the network’s chosen ordering implementation. In the case of “solo”, only one OSN is required. Transactions are “broadcast” to orderers, and then “delivered” as blocks to the appropriate channel. (if you mention solo- then you should mention CFTimplementation.  I would just remove solo part)      Endorser A specific peer role, where the Endorser peer is responsible for simulating transactions , and in turn preventing unstable or non-deterministic transactions from passing through the network. (remove what is in red- replace with) and signing the transaction based on the policy set.   A transaction is sent to an endorser in the form of a transaction proposal and send the information back to the application layer, which will in turn will send to the orderer  All endorsing peers are currently also committing peers (i.e. they write to the ledger).    This actually isn't quite true- you can actually send transactions that don't have a consistent result onto consensus- it will be validated at the comitting peer with VSCC Validated system chain code. We do recommend the application checks this, but I suspect some will go ahead and send to the orderer.      Committer A specific peer role, where the Committing peer appends the validated transactions to the channel-specific ledger. If the read/write set is not the same across peers, the transaction will be rejected.  A peer can act as both an endorser and committer, but in more regulated circumstances might only serve as a committer  Bootstrap The initial setup of a network.  There is the bootstrap of a peer network, during which policies, system chaincodes, and cryptographic materials (certs) are disseminated amongst participants, and the bootstrap of an ordering network.  The bootstrap of the ordering network must precede the bootstrap of the peer network, as a peer network is contingent upon the presence of an ordering service. A network need only be “bootstrapped” once.    Side notes:     Bootstrapping the network requires creating the network, creating/viewing multiple channels, setting up policies of network, setting up policies for channels, inviting participants to the network and setting up access control on the participants. You do have to have a CA and in that case you need to enroll id, passwords and certificates for applications and peers.  May want to rephrase your bootstrap section as a result of this information--      Block A batch of ordered transactions, potentially containing ones of an invalid nature, that is delivered to the peers for validation and committal.  I do not know why you think there are transactions that are invalid- I would remove this.   System chain  (have Murali verify this definition and the one immediate below) Contains a configuration block defining the network at a system level. The system chain lives within the ordering service, and similar to a channel, has an initial configuration containing information such as: root certificates for participating organizations and ordering service nodes, policies, listening address for OSN, and configuration details. Any change to the overall network (e.g. a new org joining or a new OSN being added) will result in a new configuration block being added to the system chain.   The system chain can be thought of as the common binding for a channel or group of channels. For instance, a collection of financial institutions may form a consortium (represented through the system chain), and then proceed to create channels relative to their aligned and varying business agendas.   System Chaincode System Chaincode (SCC) is a chaincode built with the peer and run in the same process as the peer. SCC is responsible for broader configurations of fabric behavior, such as timing and naming services.    Channel A Channel is formed as an offshoot of the system chain; and best thought of as a “topic” for peers to subscribe to, or rather, a subset of a broader blockchain network. A peer may subscribe on various channels and can only access the transactions on the subscribed channels.  Each channel will have a unique ledger, thus accommodating confidentiality and execution of multilateral contracts.    I like this better:   With a network created by peers, there are some use cases where some of the transactions may only go to specific peers.  Channels allows you to create a topic for a subset of peers.  As an example, Network has a, b,c, d participants.  A channel can be created that the transactions can only be seen by a,b,and c, whereby participant d does not see the transaction or the ledger.     Dynamic membership he fabric will allow for endorsers and committers to come and go based on membership, and the blockchain network will continue to operate. Dynamic membership is critical when businesses grow and members need to be added or removed for various reasons.    You are missing a T in The up in the beginning    Query/Non-Key Value Query using couchDB 2.0 you now have the capability to leverage an API to perform more complex queries against combinations of variables, including time ranges, transaction types, users, etc.  This feature allows for auditors and regulators to aggregate and mine large chunks of data.    Capitlize "u" in Using. Remove "2.0" we can get into that later into the documentation.  Start with "There are two ledgers that are currently implemented in fabric by default- level DB and CouchDB.  Users can also plug in their own ledger as a pluggable component. Using,...""   Endorsement System Chaincode Endorsement System Chaincode (ESCC) is a system chaincode that andles the endorsement policy for specific pieces of chaincode deployed on a network, and defines the necessary parameters (percentage or combination of signatures from endorsing peers) for a transaction proposal to receive a successful proposal response (i.e. endorsement).  Deployments and invocations of user chaincodes both require a corresponding ESCC, which is defined at the time of the deployment transaction proposal for the user chaincode.    andles- needs to change to handles    Endorsement policy A blockchain network must establish rules that govern the endorsement (or not) of proposed, simulated transactions. This endorsement policy could require that a transaction be endorsed by a minimum number of endorsing peers, a minimum percentage of endorsing peers, or by all endorsing peers that are assigned to a specific chaincode application. Policies can be curated based on the application and the desired level of resilience against misbehavior (deliberate or not) by the endorsing peers. A distinct endorsement policy for deploy transactions, which install new chaincode, is also required.    Endorsements that are required to run a transaction for a chaincode will be validated by the orderer. (ie it will make sure all signatures were obtained before sending to committer)    Proposal A transaction request sent from a client or admin user to one or more peers in a network; examples include deploy, invoke, query, or configuration request.  (you should take out deploy- we have install/instantiate chaincode now)  Deploy (this should be removed) Refers to the function through which chaincode applications are deployed on chain. A deploy is first sent from the client SDK or CLI to a Lifecycle System Chaincode in the form of a proposal.    Membership Services (keith to validate the following two definitions) Membership Services manages user identities on a permissioned blockchain network; this function is implemented through the fabric-ca component.  fabric-ca is comprised of a client and server, and handles the distribution and revocation of enrollment materials (certificates), which serve to identify and authenticate users on a network  The in-line MembershipSrvc code (MSP) runs on the peers themselves, and is used by the peer when authenticating transaction processing results, and by the client to verify/authenticate transactions. Membership Services provides a distinction of roles by combining elements of Public Key Infrastructure (PKI) and decentralization (consensus). By contrast, non-permissioned networks do not provide member-specific authority or a distinction of roles.  A permissioned blockchain requires entities to register for long-term identity credentials (Enrollment Certificates), which can be distinguished according to entity type. For users, an Enrollment Certificate authorizes the Transaction Certificate Authority (TCA) to issue pseudonymous credentials; these certificates authorize transactions submitted by the user. Transaction certificates persist on the blockchain, and enable authorized auditors to associate, and identify the transacting parties for otherwise un-linkable transactions.  <ks> I would write this section as follows ... Membership Services authenticates, authorizes, and manages identities on a permissioned blockchain network.  The membership services code that runs in peers and orderers both authenticates and authorizes blockchain operations.  It is a PKI-based implementation of the Membership Services Provider (MSP) abstraction. The fabric-ca component is an implementation of membership services to manage identities.  In particular, it handles the issuance and revocation of enrollment certificates and transaction certificates.  An enrollment certificate is a long-term identity credential; a transaction certificate is a short-term identity credential which is both anonymous and un-linkable.  </ks>  Membership Service Provider The Membership Service Provider (MSP) refers to an abstract component of the system that provides (anonymous) <ks> Remove "(anonymous)" as MSP says nothing about anonymity.  This is implemented by fabric-ca.</ks> credentials to clients, and peers for them to participate in a Hyperledger/fabric network. Clients use these credentials to authenticate their transactions, and peers use these credentials to authenticate transaction processing results (endorsements). While strongly connected to the transaction processing components of the systems, this interface aims to have membership services components defined, in such a way that alternate implementations of this can be smoothly plugged in without modifying the core of transaction processing components of the system.  Initialize (Murali to comment on next 3 definitions) A chaincode method to define the assets and parameters in a piece of chaincode prior to issuing deploys and invocations.  As the name implies, this function should be used to do any initialization to the chaincode, such as configure the initial state of a key/value pair on the ledger.  appshim An application client used by ordering service nodes to process “broadcast” messages arriving from clients or peers. This shim allows the ordering service to perform membership-related functionality checks. In other words, is a peer or client properly authorized to perform the requested function (e.g. upgrade chaincode or reconfigure channel settings).  osshim An ordering service client used by the application to process ordering service messages (i.e. “deliver” messages) that are advertised within a channel.       ></description> </Issue>
