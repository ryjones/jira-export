<Action id="40471" issue="27887" author="sykesm" type="comment" created="2018-02-20 23:57:19.0" updateauthor="sykesm" updated="2018-02-20 23:57:19.0"> <body><! CDATA After spending a few weeks with the code base, there are a number of things we can do to improve the experience of developers working on the fabric. This is intended to capture some of the thoughts so we can spin out the appropriate work items.  Goals: * Enable native execution of unit tests from the root `fabric` directory with a simple `go test ./...` * Dramatically improve the execution time of unit tests * Use tools to generate mocks/fakes for unit tests * Reduce use of global singletons accessed via package functions or variables * Establish a pattern and structure for integration tests that are written in go  Enabling native `go test` * Remove link flag requirements for test. Several test cases fail when the metadata package variables are empty strings. * Ensure docker builds do not leave golang artifacts in the build/docker/golang directory that prevent the compilation and execution of tests. * Remove golang code from bddtests (bddtests/context.go) * Move uncompilable golang test fixtures under a testdata folder (test/chaincodes/BadImport/main.go:11:2) * Ensure examples compile (examples/chaincode/chaintool/example02/src/chaincode/chaincode_example02.go:26) * Be laptop friendly - use 127.0.0.1 instead of 0.0.0.0 (INADDRANY)  Dramatically improve the execution time of unit tests * Use ephemeral ports instead of fixed port assignment to avoid issues with port reuse or conflicts * Use fake clocks in unit tests (github.com/pivotal-golang/clock); control time and avoid any sleeps * Use matching libraries (gomega) or polling when waiting for channels to send, receive, or be closed instead of sleeping * Explicitly wire dependencies through locally defined interfaces and use simple call-based mocks (counterfeiter) in tests to track and implement dependency behavior * Avoid integration tests outside of the explicit integration test directories  Use tools to generate mocks/fakes * Define interfaces at point of use * Add `go:generate` statement that uses `counterfeiter` to create implementations of the interfaces into a `fakes` or `mocks` folder that lives with the code under test * Ensure only generated code lives in the `fakes` or `mocks` directory that can be regenerated at any time from `go generate .`  Reduce use of global singletons * Evaluate all package level variables and refactor into structures. * Evaluate all package level functions that reference global state (ie procedures) and refactor into pure functions or methods on the appropriate objects. * Tell. Don't ask. Explicitly create instances of structures and wire together. * Remove viper sprawl and replace with configuration that is explicitly set or provided on objects. Viper should never be used to get configuration from a constructor or at runtime.  Establish a pattern and structure for integration tests in go * Use tests/integration folders to hold the integration tests. * Ensure tests are guarded by the +integration build tag * When external dependencies (like couchdb) are needed, start the instance locally or in a container. * Use ginkgo, gomega, and gexec to orchestrate and verify. * Ensure tests can be run in parallel - use separate backend instances and processes where necessary  Miscellaneous * Use exported fields for configuration and injection when appropriate. * Favor _test packages for unit tests that only use exported symbols. * Refactor inline, unnamed function closures to named, testable methods when appropriate.  ></body> </Action>
<Action id="45781" issue="27887" author="sykesm" type="comment" body="Many of these threads have been advanced during the 1.2 cycle. While some are incomplete, we&apos;ve gone as far as we can right now given current constraints." created="2018-06-11 13:17:02.0" updateauthor="sykesm" updated="2018-06-11 13:17:02.0"/>
