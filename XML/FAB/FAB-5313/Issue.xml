<Issue id="19260" key="FAB-5313" number="5313" project="10002" reporter="sotirisalfonsos" assignee="yacovm" creator="sotirisalfonsos" type="10004" summary="Timer for leader election on Org&apos;s peers" priority="3" resolution="10000" status="6" created="2017-07-14 13:00:35.0" updated="2018-07-20 14:13:46.0" resolutiondate="2017-07-26 14:50:40.0" votes="0" watches="2" workflowId="39449"> <description><! CDATA There was an issue where, if the leader of an organisation starts dropping packets on his communication with the orderer, the entire organisation will never get the new blocks. Killing the leader made the org elect a new leader, that was able to fetch the blocks from the orderer.  Reproducing the issue:  We create the containers where org1 belongs to two channels and controls 2 peers ( _{{peer0.org1.example.com,}}_ _{{peer1.org1.example.com}}_ ). We am triggering the network delays. So an iptables rule that classifies the packets going from the _{{orderer}}_ to _{{peer0.org1.example.com}}_. Then with a _{{tc qdisc}}_ {{rule}} we apply package loss 100% to those packets.   Now we run our code that goes: user enrollment, channel creation, join channels, install chaincode. Everything works up to that point. Now we are sending two instantiates, one for each channel, and sending them both to  _{{org1}}_. The instantiates are signed by both {{_peer0.org1.example.com_,}} _{{peer1.org1.example.com}}_, and now we would expect for the orderer to send the block to the peers. _{{peer0.org1.example.com}}_ should not receive the block, and he does not. But we would expect that _{{peer1.org1.example.com}}_ would receive the block, but he does not.   A new leader is not elected so both pears will never get the new blocks.  ></description> </Issue>
