<Issue id="20154" key="FAB-5752" number="5752" project="10002" reporter="yacovm" assignee="yacovm" creator="yacovm" type="10001" summary="As a gossip developer I need expiration times of identities" priority="3" resolution="10000" status="6" created="2017-08-13 16:45:16.0" updated="2018-07-20 18:50:13.0" resolutiondate="2017-09-25 12:49:37.0" votes="0" watches="5" workflowId="39726"> <description><! CDATA Gossip has an in-memory mapping from PKI-ID to peer identities. This mapping is used to: * Keep track of which identities are valid and which are not * Locate the identity given a PKI-ID in order to perform verification on a message's signature, given only a PKI-ID of the message.  Since x509-based certificates (what is used currently in Fabric) - eventually expire, the procedure that the current code does to remove them once they expire is periodically (once in 24 hours) call *MessageCryptoService.Validate* on all identities.  This has the following shortcomings:  * Once per 24 hours makes it that signatures of peers that their certificates have expired can still be incorrectly validated for a maximal duration of... 24 hours. * Validation of certificates involves with cryptography computations that are expensive, and since certificates expire only once every few months (or years) - it is almost always a redundant check.  Therefore what I want to do, is that the MessageCryptoService would have an additional method that would tell given a *PeerIdentity* - when (*time.Time*) it expires: * A zero value would indicate it never expires * A non zero value would indicate that it expires at a certain time.  Then, when gossip would create a new mapping between the PKI-ID and the identity - it would spawn a timer that would fire at *NotAfter + time.Millisecond \* c* for some small constant *c*, and then the mapping would be deleted.  * If the identity is deleted from memory before that time - the timer would be cancelled, to prevent stale timer contexts floating in the golang runtime.    ~ellaki   ~adc   ~ales   ~C0rWin    ></description> </Issue>
