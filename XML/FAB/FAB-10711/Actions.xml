<Action id="48208" issue="31175" author="sheehan" type="comment" created="2018-07-31 17:41:11.0" updateauthor="sheehan" updated="2018-08-03 14:51:24.0"> <body><! CDATA Questions and issues raised during playback:     *Question/Issue:* The Handler interface should be more extensible in future. Consider object for arguments instead of string.   *Response:* This is a good point and I think we should update the interface.     *Question/Issue:* Will the Node.js and Java shims lag behind the Go shim? What kind of perception does this create?  *Response:* The issue here is development bandwidth. While there is no intention to make the Node.js and upcoming Java shim second class citizens, we would prefer a phased development/release cycle if possible. As I’m sure this question has come up many times before for other features added to shims and SDKs, I think it would be best to follow existing precedents or lessons learned. Perhaps there should be general guidelines in Fabric. Either all shims are supported on the first release of a feature or all shims must be supported within X releases of the initial. release, or something else. We will add Java and Node.js shim support to the roadmap.     *Question/Issue:* Will this feature make the 1.3 release? Will you develop in a branch.   *Response:* While we’d like to target the 1.3 release and are starting development work now, we will plan development in such a way that the code will not impact production code until ready. Based on discussion with maintainers, it seems the preferred method is to develop in the master branch and hide features behind a capability. This was introduced as part of the state based endorsement feature. Hiding a the chaincode shim API additions is a bit more tricky as the experimental interface has been removed. We may consider developing these features in a fork or branch until the feature is ready for release.  ></body> </Action>
<Action id="48477" issue="31175" author="grapebaba" type="comment" body=" ~sheehan  how other person can join this feature development?" created="2018-08-07 07:13:20.0" updateauthor="grapebaba" updated="2018-08-07 07:13:20.0"/>
<Action id="48493" issue="31175" author="sheehan" type="comment" body=" ~grapebaba  discussion here or we created the Rocket.Chat channel #fab-10117 for discussion. If there&apos;s a piece you&apos;d be interested in working on or contributing to just let us know." created="2018-08-07 14:18:27.0" updateauthor="sheehan" updated="2018-08-07 14:18:27.0"/>
<Action id="52876" issue="31175" author="smartheye" type="comment" created="2018-11-01 09:33:49.0" updateauthor="smartheye" updated="2018-11-01 09:34:28.0"> <body><! CDATA Hi , Could BigInteger support be added into this Epic？  Why UInt64 is not big enough?  Because many finacial system's number have decimal fraction. In blockchain world, many crptocurrencies have long decimal fractions.  for example , 1BTC=100,000,000satoshi. 1ether=1,000,000,000,000,000,000wei.  Currently there's a business demand which adopts ethereum financial system to hyperledger. So, uint64 might be not large enough for banking system.  It might be a bit difficult as there's no scala value type of BigInteger in protobuf. But it could be done by saving it to bytes or hex string with signum.  Please think about the idea.  ></body> </Action>
<Action id="52992" issue="31175" author="sheehan" type="comment" created="2018-11-02 21:48:05.0" updateauthor="sheehan" updated="2018-11-02 21:48:05.0"> <body><! CDATA We will certainly add additional types in the future.  10^18 < 2^64 / 2 so I'm not sure I follow your use case for needing a BigInteger in regards to representing Wei.  ></body> </Action>
<Action id="55426" issue="31175" author="denyeart" type="comment" body="Dependent validation work is targeted for v2.0, therefore updating FixVersion to v2.1." created="2019-01-09 05:53:06.0" updateauthor="denyeart" updated="2019-01-09 05:53:06.0"/>
<Action id="70804" issue="31175" author="manish-sethi" type="comment" body="Does not seem like this epic is in sight for a foreseeable future. Also, with now RFC procedure in place, a change of this scope would need to go via the RFC process. Closing this for now and this can be opened again if we revisit this." created="2020-11-24 15:26:25.0" updateauthor="manish-sethi" updated="2020-11-24 15:26:25.0"/>
