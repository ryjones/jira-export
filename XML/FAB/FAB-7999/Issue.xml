<Issue id="27289" key="FAB-7999" number="7999" project="10002" reporter="jyellick" assignee="jyellick" creator="jyellick" type="10001" summary="Expose configtxlator REST functions from CLI" priority="3" resolution="10000" status="6" created="2018-01-31 21:10:46.0" updated="2018-07-20 18:48:58.0" resolutiondate="2018-02-02 12:13:38.0" votes="4" watches="2" workflowId="41100"> <description><! CDATA To allow applications to perform channel config updates, the {{configtxlator}} tool was created.Â  It exposes a REST API for translating between protobufs and JSON, as well as a utility for computing a config update based on an original config and an updated config.  For examples and manipulation of channel config from the CLI, curl was used to invoke the functions of the REST server.  Because performing channel config updates was something most users did not need, this was considered a reasonable solution for v1.0.  However, channel 'capabilities' are required to be added to upgrade a fabric network, which is a modification to the channel config.  This can be accomplished by starting the REST server and issuing curl commands, but this is a bit cludgy.  It would be a fairly small amount of code to simply allow {{configtxlator}} to allow the REST functions to be invoked directly as CLI parameters, and it would make our upgrade samples easier to parse, and cleaner.  I propose the following three new commands to {{configtxlator}}  {noformat} # Decode a protobuf message to JSON configtxlator proto_decode --type <message_type>  --input <file.pb>   --output <file.json>   # Encode a JSON message to protobuf configtxlator proto_encode --type <message_type>  --input <file.json>   --output <file.pb>   # Compute a config update from an original config and updated config configtxlator compute_update --channel_id <channel_id> --original <original_config.pb> --updated <updated_config.pb>  --output <config_update_file.pb>  {noformat}  Note, wherever input/output parameters are optional above, they default to stdin/stdout respectively.  Because this is a tool, and because it makes documentation and samples easier (and is not involved in any peer or orderer code path), it seems like this could still be a candidate for v1.1.0, but because it is an improvement and not a bug fix, excluding it could also be the correct decision.  ></description> </Issue>
