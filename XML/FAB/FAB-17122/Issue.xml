<Issue id="43410" key="FAB-17122" number="17122" project="10002" reporter="pandrejko" creator="pandrejko" type="10100" summary="Moving from gerrit to github" priority="3" resolution="10001" status="6" created="2019-11-21 14:05:54.0" updated="2020-12-03 19:26:50.0" resolutiondate="2020-12-03 19:26:50.0" votes="0" watches="1" workflowId="56518"> <description><! CDATA Highlight tips and tricks that we learned from Brett:  +Add new remotes for Fabric repo:+  (standard githib process):  origin git@github.com:username/fabric.git (fetch) origin git@github.com:username/fabric.git (push) upstream git@github.com:hyperledger/fabric.git (fetch) upstream git@github.com:hyperledger/fabric.git (push)     +Committing your changes:+  When you create a commit you must sign the commit with a -s.  You can use commit --s ---amend to update your pr but you will have to include the --force option on the subsequent git push because {color:#1d1c1d} in git the force will overwrite the comment history if you do an amend. So GitHub makes sure you want to do it since it will overwrite some of the history. (Gerrit didn’t worry about it because you never overwrote the change history).{color}  If you need to upload the commit message later you need to download it and then re-commit it. (There is no way to edit it in github and save it.)  +Creating a new Pull Request (PR):+   WIP  content:  The Gerritt  WIP  tag is no longer used. Instead, you can create a Draft PR and content is not sent to reviewers, until you are ready. When you create a PR you need to use the template in the PR  Reviewers (Maintainers) are now automatically assigned.  +Reviewing a PR:+  From the Files Changed tab:  When a new commit is added to a PR, the existing content is overwritten. Therefore any comments written that reference specific content in a file may no longer match the original location (and could have been changed by the commit). So the recommendation is that when you make a comment to *drag the plus sign to highlight the content you are commenting on and make your comment.* This preserves the reference text and comment in the PR feed.  # Use `Add a single comment` when no response is required. # Use  `Start a review` when a response is required.  +Process to view formatted documentation content+  From the Conversation tab: * Scroll down to `All checks have passed` and click `Show all checks`. * Scroll down to *`Pull-Request (DocBuild)`*  and click `Details` ** * Under `DocBuild succeeded` click `0 errors/0 warnings` * On the screen that opens, under Artifacts click ` 1 published |https://dev.azure.com/Hyperledger/Fabric/_build/results?buildId=2316&view=artifacts `. * Next to `DocBuid` click the `Download` arrow. * Download and extract the build, click index.html to load the content.  + Cherry picking content to another release branch: git checkout release-2.0 git checkout -b <my2.0branch> git cherry-pick <sha from master branch> git push <my2.0branch>   Reminder: as an author you can always do a local build to view your formatted content. See the fabric  README | https://github.com/hyperledger/fabric/tree/master/docs  for instructions.  If you need to force a doc build type `/azp run` in the PR comment field  +How to +1 or -1 content content:+  When you are satisified with the content, (or unstaisfied) you can +1/-1 it by clicking the Thumbs up/Thumbs down icon on the initial Conversation tab content.  +Process to rebase and cherry-pick:+  Follow standard GitHub instructions.  ></description> </Issue>
