<Action id="65026" issue="42902" author="denyeart" type="comment" body=" ~sykesm   ~jyellick  Is it possible to stop chaincode execution in these cases?" created="2019-10-28 10:53:44.0" updateauthor="denyeart" updated="2019-12-03 00:05:00.0"/>
<Action id="65986" issue="42902" author="jyellick" type="comment" body="I agree it would be nice to halt chaincode execution in these cases, but there&apos;s no obvious way to accomplish this today.  It wouldn&apos;t be a tremendous amount of work (though, it would admittedly, be work) to send a message to the chaincode indicating that a particular tx has been aborted, and to stop servicing state requests from that chaincode.  However, getting the chaincode to actually stop executing would require modifications to the chaincode itself.  Depending on the execution environment, this would need to be handled in different ways (for instance, a golang chaincode vs. a node chaincode has a very different notion of how you would check to see whether execution should stop).  I don&apos;t disagree that it would be a nice feature to have, but addressing it is well beyond a simple bug fix." created="2019-12-03 03:41:46.0" updateauthor="jyellick" updated="2019-12-03 03:41:46.0"/>
<Action id="68574" issue="42902" author="sykesm" type="comment" created="2020-03-25 14:15:03.0" updateauthor="sykesm" updated="2020-03-25 14:15:03.0"> <body><! CDATA {quote} It wouldn't be a tremendous amount of work {quote}  I think it's more than a trivial amount of work. Marking the simulation as terminated may be possible but sending a message to the chaincode would require the introduction of another message type and appropriate changes to all chaincode implementations.  {quote}I don't disagree that it would be a nice feature to have, but addressing it is well beyond a simple bug fix.{quote}  Totally agree here. Unfortunately, the current mechanism used for peer<->chaincode communication is very fragile. The choice of multiplexing multiple interactions over a single bi-directional channel (instead of using a channel per transaction) really prevents this style of pre-emptive cancelation without significant breaking changes to the chaincode API.  ></body> </Action>
