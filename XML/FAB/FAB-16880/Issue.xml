<Issue id="42902" key="FAB-16880" number="16880" project="10002" reporter="bmatsuo" creator="bmatsuo" type="10004" summary="Transaction proposal simulation continues after the corresponding gRPC request is canceled" priority="3" status="10300" created="2019-10-19 02:41:21.0" updated="2020-05-06 14:21:23.0" votes="0" watches="5" workflowId="56002"> <description><! CDATA If a request to endorse a transaction proposal has been canceled (e.g. due to the client crashing or another upstream timeout) the chaincode will continue the simulation even though there is no longer a client to receive the simulation result.        The problem we have encountered is that a client will call our fabric-backed service with a request timeout that is too short for the transaction they are trying to have processed. After their timeout has elapsed they are canceling the request and retrying. The client's retries all time out because their timeout is just too short. But, each retry causes a new simulation to begin and we end up seeing simulations stacking up in our chaincode container which causes a spike in resource utilization (CPU and memory). In the worst case this can cause other, unrelated transactions to begin timing out as the CPU has become fully saturated.     We are using fabric-sdk-go to issue transactions and tried connecting the context of the proposal endorsement to that of the incoming request using the package github.com/hyperledger/fabric-sdk-go/pkg/context (the WithParent function). When the incoming request is canceled the SDK immediately recognizes this, logs that the context was canceled, and returns.    {code:java}  fabsdk/fab  2019/10/19 01:29:03 UTC - peer.(*peerEndorser).sendProposal -> ERRO process proposal failed  rpc error: code = Canceled desc = context canceled   fabsdk/fab  2019/10/19 01:29:03 UTC - peer.(*peerEndorser).sendProposal -> ERRO process proposal failed  rpc error: code = Canceled desc = context canceled  {code}    However, the chaincode container continues to process the canceled transaction and consume system resources.  ></description> </Issue>
