<Action id="65902" issue="43499" author="btl5037" type="comment" body=" ~dereckluo " created="2019-12-02 14:55:09.0" updateauthor="btl5037" updated="2019-12-02 14:55:09.0"/>
<Action id="65921" issue="43499" author="btl5037" type="comment" body=" ~caod " created="2019-12-02 18:18:01.0" updateauthor="btl5037" updated="2019-12-02 18:18:01.0"/>
<Action id="65938" issue="43499" author="caod" type="comment" body="may be related to FAB-16862" created="2019-12-02 21:30:29.0" updateauthor="caod" updated="2019-12-02 21:30:29.0"/>
<Action id="65942" issue="43499" author="caod" type="comment" created="2019-12-02 21:40:46.0" updateauthor="caod" updated="2019-12-02 21:57:39.0"> <body><! CDATA One really quick fix that would probably make the flake go away would be to just change  https://github.com/hyperledger/fabric/blob/master/integration/nwo/core_template.go#L62  so that it's less than  https://github.com/hyperledger/fabric/blob/master/integration/nwo/network.go#L173   Because they're both 1 min any test that ends up having to retry pulling from remote peers for whatever reason will always risk hitting the eventually timeout and failing the test once the pullRetryThreshold is hit. The test doesn't fail normally because an eventually timeout of 1min still has a polling interval of 10ms by default which introduces a small jitter and large enough of a gap that the integration test can fail the pull retry after 1 min and still complete the commit readiness check in time. After the pull retry fails it will mark private data as missing and then complete the commit readiness check which often takes less than 5ms to complete, however any slowness on the machine could potentially push this time past the eventually timeout window. If you look at the failed tests the polling interval just happens to hit very close to 60.000s in those runs giving even less time for the above steps to complete fast enough. In the linked logs you can see \{{Timed out after 60.001s}} which only gave 1ms of leeway for the pull retry to finish and complete the commit readiness check.  Ultimately we should still aim to fix FAB-16862 to avoid ending up in a pull retry loop in the first place  ></body> </Action>
<Action id="66030" issue="43499" author="denyeart" type="comment" body="https://github.com/hyperledger/fabric/pull/348" created="2019-12-03 19:46:58.0" updateauthor="denyeart" updated="2019-12-03 19:46:58.0"/>
