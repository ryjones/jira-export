<Issue id="25108" key="FAB-7415" number="7415" project="10002" reporter="manish-sethi" creator="manish-sethi" type="10003" summary="Compute semantic-delta changes from two subsequent versions of the resource tree" priority="3" resolution="10000" status="6" created="2017-12-11 15:58:48.0" updated="2018-07-20 14:15:13.0" resolutiondate="2017-12-11 17:47:13.0" votes="0" watches="1" workflowId="40767"> <description><! CDATA The resource tree updates are enabled by applying 'delta' on the existing resource tree.  However, this 'delta' has a specific notion in the context of 'how the updates mechanism is implemented' - which could be changed in the future. For instance, it carries the details such as read-set, write-set, and versions etc. Also, if a new child is added the whole subtree under the parent is present in this 'delta'  These implementation level details are not meaningful for someone who is interested in knowing the actual changes semantically.  For instance, another sibling sub-task (FAB-7133) requires to know what new chaincode has been defined (if any) or the versions of existing chaincodes changed (if any). Taking an example, if a new chaincode 'CC1' is defined, the observer will be interested to see only one node in the delta - i.e., <resources>/<chaincodes>/<CC1>  One definition to represent such a delta-tree could be - a minimal tree whose canonical paths if applied to the existing tree gives the updated tree. In this minimal tree, the deleted items can be represented as nil modified with `nil` values.  Though, there are some 'more accepted' ways of representing diffs in terms of exact operations ( https://tools.ietf.org/html/rfc6902#page-4 ), but not sure whether we want to go that far yet.  So far this was not very important because, the consequences of applying changes were limited to in-memory content.  However, if we use this to trigger specific actions, for example creating, manipulating, or dropping the db artifacts (such as db indexes), it will be suggestive to work with semantic deltas rather than deltas as implemented.  ></description> </Issue>
