<Action id="26846" issue="18417" author="greg.haskins" type="comment" created="2017-06-20 13:52:54.0" updateauthor="greg.haskins" updated="2017-06-20 13:52:54.0"> <body><! CDATA I think the basic issue is that we probably cannot support chaincode that lives under github.com/hyperledger/fabric due to fabric/vendoring.  In summary, code that lives under fabric would be packaged with fabric's vendoring, but compiled outside of it.  This has the net effect of isolating the chaincode from some of its dependencies during the compilation phase.  While this is a surprise discovery, it is not IMO a very big deal: real chaincode would never live under fabric, and even our samples are already proposed to move elsewhere (fabric-samples) for unrelated reasons.  ></body> </Action>
<Action id="27101" issue="18417" author="greg.haskins" type="comment" body="Thinking about this some more, I think we can fix it.  I will experiment." created="2017-06-21 01:43:33.0" updateauthor="greg.haskins" updated="2017-06-21 01:43:33.0"/>
<Action id="27848" issue="18417" author="muralisr" type="comment" created="2017-07-04 20:47:35.0" updateauthor="muralisr" updated="2017-07-04 20:49:22.0"> <body><! CDATA Making sure to understand the issue here.  Assume a chaincode "src/github.com/hyperledger/fabric/mycc/mycc.go" with an import "github.com/golang/protobuf/proto".  When a  dependency DEP gets packaged for mycc, it gets pushed into mycc's vendor "src/github.com/hyperledger/fabric/mycc/vendor" giving raise to  *src/github.com/hyperledger/fabric/mycc/vendor*/DEP.  The import "github.com/golang/protobuf/proto" resolves to the following dependency as its already in the fabric's vendor.  DEP="github.com/hyperledger/fabric/vendor/github.com/golang/protobuf/proto"  Substituting for DEP, this becomes  "*src/github.com/hyperledger/fabric/mycc/vendor*/github.com/hyperledger/fabric/vendor/github.com/golang/protobuf/proto".  While looking weird, it does give raise to a valid chaincode that gets built and runs without issue. Are we saying we could do a bit of extra work to fold this into "*src/github.com/hyperledger/fabric/mycc/vendor*/github.com/golang/protobuf/proto". I'd view this as unnecessary as the original one is not technically incorrect.  But perhaps I'm missing somethig  ~C0rWin   ~greg.haskins  ?     ></body> </Action>
<Action id="28002" issue="18417" author="greg.haskins" type="comment" created="2017-07-07 12:27:18.0" updateauthor="greg.haskins" updated="2017-07-07 12:27:18.0"> <body><! CDATA Sorry  ~muralisr , on vacation and didn't notice your comment above until now.  What we were saying is that consider the following scenario:  1) chaincode package foo/bar/baz that imports DEP  2) Within the GOPATH, DEP is satisfied by foo/vendor/DEP  3) After packing in the original way, we end up with foo/bar/baz/vendor/foo/vendor/DEP  4) DEP becomes inaccessible to foo/bar/baz, since it is no longer part of its vendored path but rather is a subvendored library of the vendored package "foo".  This has now been corrected.  ></body> </Action>
<Action id="28003" issue="18417" author="muralisr" type="comment" created="2017-07-07 12:47:58.0" updateauthor="muralisr" updated="2017-07-07 12:47:58.0"> <body><! CDATA  ~greg.haskins  right .. but only when the CC is under fabric/ (arguably not a good practice). When chaincode *not* under fabric/ we maybe dealing with two different types really - the one chaincode is accessing and the other, the vendored type the fabric is accessing. And user may not want to mix those types.    I'm not sure there's a "right" way to do this given the vendoring restrictions.     ></body> </Action>
<Action id="28004" issue="18417" author="greg.haskins" type="comment" body="I suspect lots of what we did w.r.t. golang packaging is a bit unnatural in fabric.  For instance, multiple packages (fabric/peer, fabric/orderer, fabric/core/chaincode/shim) under one vendor folder fabric/vendor.  I don&apos;t suspect this would be common.  However, the notion of a hierarchical vendor seems to be something that golang deps support natively so I solved the problem generically.  I suspect it will only come into play when dealing with fabric/examples/chaincode in the wild, but the support is now there nonetheless." created="2017-07-07 12:59:13.0" updateauthor="greg.haskins" updated="2017-07-07 12:59:13.0"/>
<Action id="28013" issue="18417" author="c0rwin" type="comment" created="2017-07-07 14:04:40.0" updateauthor="c0rwin" updated="2017-07-07 14:05:51.0"> <body><! CDATA Still not sure 100% if this is related, but:  If you try to run the docker compose network based on: https://github.com/C0rWin/pgdays/tree/master/network  and following commands executed in **cli** container ({{docker exec -it cli /bin/bash}}):  {code} peer channel create -o orderer.example.com:7050 -c mychannel -f channel-artifacts/channel.tx peer channel join -o orderer.example.com:7050 --blockpath mychannel.block peer chaincode install -n accMgmt -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/account {code}  leads to the following error:  {code} 2017-07-07 13:53:16.121 UTC  golang-platform  func1 -> DEBU 009 Discarding provided package github.com/hyperledger/fabric/core/chaincode/shim 2017-07-07 13:53:16.122 UTC  golang-platform  func1 -> DEBU 00a Discarding provided package github.com/hyperledger/fabric/protos/peer Error: Error getting chaincode code chaincode: Error getting chaincode package bytes: Error obtaining dependencies for github.com/hyperledger/fabric/common/util: <go,  list -f {{ join .Deps "\n"}} github.com/hyperledger/fabric/common/util >: failed with error: "exit status 1" can't load package: package github.com/hyperledger/fabric/common/util: cannot find package "github.com/hyperledger/fabric/common/util" in any of: /opt/go/src/github.com/hyperledger/fabric/common/util (from $GOROOT) /opt/gopath/src/github.com/hyperledger/fabric/common/util (from $GOPATH) {code}  Running same commands from dev environment on my laptop has no problem, chaincode got installed into peer.  ></body> </Action>
<Action id="28022" issue="18417" author="mastersingh24" type="comment" created="2017-07-07 15:14:11.0" updateauthor="mastersingh24" updated="2017-07-07 15:14:11.0"> <body><! CDATA  ~C0rWin   - the issue here is that fabric-tools does not include the fabric source so it will not have access to the *github.com/hyperledger/fabric/common/util* package:      {noformat} Garis-MBP:fabric gsingh$ docker run --rm -it hyperledger/fabric-tools bash root@ea11f389bed3:/# echo $GOPATH /opt/gopath root@ea11f389bed3:/# ls /opt/gopath/ root@ea11f389bed3:/# {noformat}    ></body> </Action>
