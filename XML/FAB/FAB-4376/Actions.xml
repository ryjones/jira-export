<Action id="25892" issue="17507" author="binhn" type="comment" created="2017-06-09 17:50:17.0" updateauthor="binhn" updated="2017-06-09 19:05:54.0"> <body><! CDATA I wouldn't think this is critical for 1.0, so we should defer it. It is not a bug either but an improvement over the current encoding, which is fine for signing if we did.   The change would also require other components using this field to change (and that would be SDKs)  If we want to sign this field, we would have to come up with method to collection sig's and solving compatibility, which we already deferred.   ></body> </Action>
<Action id="25899" issue="17507" author="jyellick" type="comment" created="2017-06-09 18:04:12.0" updateauthor="jyellick" updated="2017-06-09 18:04:12.0"> <body><! CDATA Would love to hear from the SDK teams about how difficult this change would be to handle.  The biggest reason to push this for v1, is that this is a much easier change to make now, than after v1.  If it's made now, we do not need an upgrade path for existing chains.  If we try to update this after, I don't see how we can easily do this in a backwards and forward compatible way.  Because this is not a proto field, we lose all of the proto benefits in this respect, and we will need to add custom handling not only to the fabric, but also to all of the SDKs to handle the modified format.  In my mind, this goes from a relatively straightforward fix, requiring a few days work, to something require weeks of design, addition implementation work, and a significant amount of compatibility testing.  If we decide to defer, it would be nice if we already had a clear path forward to fix it post v1.  ></body> </Action>
<Action id="25951" issue="17507" author="denyeart" type="comment" created="2017-06-10 13:03:56.0" updateauthor="denyeart" updated="2017-06-10 13:03:56.0"> <body><! CDATA I spoke to SDK team, they said this change will not impact main path SDK consumers (e.g. get transaction, events). It will only change for consumers that want to parse through the block metadata (not common) - there will be an extra .metadata to navigate down. They said this change would make the metadata parsing consistent for consumers, and in current state it is awkward that one of the pieces of metadata does not follow the pattern of the others.  I agree with Jason, this is a relatively simple change prior to 1.0 release. I've spoken with SDK team and we can make a concurrent change.  Most consumers of beta will not notice the change, but we can mention it in the 1.0 release notes just in case.  But changing the block structure and a SDK API after 1.0 release, no matter how minor, will bring compatibility issues and therefore be a small nightmare both for us and for the many consumers of Fabric.  Although I don't like to see a change at the end of a release, the future risk of not doing this far outweighs the risk of doing it in my opinion.  ></body> </Action>
<Action id="25954" issue="17507" author="manish-sethi" type="comment" body="The changes on the peer side are in this CR -  https://gerrit.hyperledger.org/r/#/c/10299/.  The end to end tests will fail until SDK changes are made. Have created FAB-4505 for SDK changes.  ~jimthematrix &apos;s idea was that the SDK team can support both the formats (current and the proposed) in the SDK so the tests pass and at a later point in time, they can remove the support for the stale format." created="2017-06-10 13:48:33.0" updateauthor="manish-sethi" updated="2017-06-10 13:48:33.0"/>
<Action id="25964" issue="17507" author="jimthematrix" type="comment" created="2017-06-10 20:22:57.0" updateauthor="jimthematrix" updated="2017-06-10 20:22:57.0"> <body><! CDATA The risk to do it now is relatively low because it's at the very tail of the transaction lifecycle and the only impacted component is the SDK, which we can handle rather easily.  However my understanding is that the ability to actually create the signatures would require significant design and implementation work. Isn't this the "consensus" round among the committers that was discussed at one point? Does anybody have an idea of how that might actually work? If it'll require introducing new APIs or modifying existing APIs anyway, why making this partial fix right now?    ></body> </Action>
<Action id="25972" issue="17507" author="christopherferris" type="comment" body="This suggests to me we really aren&apos;t done if every cycle, we have yet another &quot;omg we need to change this before 1.0&quot;. It strongly suggests to me that we need to review the entire codebase for what we cannot easily deal with post 1.0 if we have a running blockchain and have an effective strategy for how we address change." created="2017-06-11 00:42:11.0" updateauthor="christopherferris" updated="2017-06-11 00:42:11.0"/>
<Action id="25979" issue="17507" author="mastersingh24" type="comment" created="2017-06-11 10:17:14.0" updateauthor="mastersingh24" updated="2017-06-11 10:17:14.0"> <body><! CDATA After reading through everything here and thinking about this again, my vote is *NOT* to do this now. These *little* things will keep adding up and we'll never be stable or "done" with a release.  There is no real hole here because we are talking about what we might / could / should do in the future.  And when it comes to making these changes in the future, it's really not that hard.  ></body> </Action>
<Action id="25985" issue="17507" author="rickr" type="comment" body="Is there rally a high risk of corruption in a production environment where server (Fabric) has been authenticated via a (TLS) certificate to client and the stream is protected by TLS /SSL?   A reverse case makes more sense since the server has no way to authenticate the client given we are not doing TLS mutual auth." created="2017-06-11 11:58:46.0" updateauthor="rickr" updated="2017-06-11 11:58:46.0"/>
<Action id="25988" issue="17507" author="rickr" type="comment" created="2017-06-11 13:08:47.0" updateauthor="rickr" updated="2017-06-11 13:08:47.0"> <body><! CDATA I'm probably missing the issue but have to ask.  BlockMetadata is just repeated bytes that can't be signed ?   in V1.1 Block can't have an added a BlockMetaDataSignature across that?  The addition like this would be backward compatible ?  ></body> </Action>
<Action id="25989" issue="17507" author="denyeart" type="comment" created="2017-06-11 13:54:19.0" updateauthor="denyeart" updated="2017-06-11 13:54:19.0"> <body><! CDATA  ~mastersingh24   ~binhn  It is in fact easy to make this change in the future, in a way that breaks clients.  Just so we fully understand the risk of NOT doing this, could you provide your opinion of how this would be done in the future in a way that doesn't break clients? I believe there are ways but relatively awkward. Or are you saying that it is acceptable to simply make the change in the future and break clients?  Concerning the signature, the intent was to defer the actual signing until post-1.0, but just put the proto structure in place in 1.0 to ensure it is future-proof relative to adding a signature in the future, or any other field. ( ~rickr  some of the metadata would be signed by orderer, some of the metadata would be signed by peer, that's why a single signature across all the metadata can't be used.)  ></body> </Action>
<Action id="25993" issue="17507" author="jyellick" type="comment" created="2017-06-11 17:04:09.0" updateauthor="jyellick" updated="2017-06-11 17:04:56.0"> <body><! CDATA My reading of this is:  1. We need a way to make breaking ABI changes to fabric, and assuming we have this mechanism (presumably some version set somewhere), this change is not that hard. 2. There is no way to make this change without breaking the ABI.  So, unless we address this pre-v1, we will have to wait until a) We have the mechanism in (1) b) We are okay with pushing a release that breaks ABI  Maybe the answer is we plan to have (a) in v1.1, and we have no intention of making v1.1 backwards compatible with v1 clients.  In that case, by all means, let's defer.  On the other hand, if we plan to do 6 months of design for (a) and want to wait two years before breaking the ABI, then it seems like we are leaving a long term ugly hole by deferring.  ></body> </Action>
<Action id="26018" issue="17507" author="denyeart" type="comment" body="Right, we MUST have a plan for the future before deciding to defer this.  If there is in fact a plan, I&apos;m fine deferring it." created="2017-06-12 13:23:17.0" updateauthor="denyeart" updated="2017-06-12 13:23:17.0"/>
<Action id="26356" issue="17507" author="muralisr" type="comment" created="2017-06-15 02:41:47.0" updateauthor="muralisr" updated="2017-06-15 02:41:47.0"> <body><! CDATA Summarizing discussion in scrum and fabric-consensus  Currently we have the following structures to hold invalidtx bit array. {code:java} message Block {     BlockHeader header = 1;     BlockData data = 2;     BlockMetadata metadata = 3; }{code}  and {code:java} message BlockMetadata {     repeated bytes metadata = 1; }{code}    We use the above to set {code:java} block.Metadata.Metadata common.BlockMetadataIndex_TRANSACTIONS_FILTER  = invalidTxBitMask{code}    The proposed solution  creates a new proto where the bit mask is part of a structure    {code:java} message LedgerTxInfo {     repeated bool invalid_txs = 1; }{code}    An +existing+ signed Metadata structure is used to carry the above structure {code:java} block.Metadata.Metadata common.BlockMetadataIndex_TRANSACTIONS_FILTER  = utils.MarshalOrPanic(&cb.Metadata{          Value: utils.MarshalOrPanic(&cb. LedgerTxInfo{          InvalidTxs: invaltxs,     }),     Signatures: ..., }{code}     Bottom line * no change to existing proto but a new one added * clients such as SDK need to get LedgerTxInfo instead of the raw bit array from  block.Metadata.Metadata common.BlockMetadataIndex_TRANSACTIONS_FILTER  * making such a change in future will invalidate past data and make it messy to handle  ></body> </Action>
<Action id="26385" issue="17507" author="jimthematrix" type="comment" created="2017-06-15 12:38:46.0" updateauthor="jimthematrix" updated="2017-06-15 12:41:07.0"> <body><! CDATA  ~muralisr  nice summary, but are we sure this is the case: _making such a change in future will invalidate past data and make it messy to handle_?  Why can't we support both structures at the same time when the enhancement is made some time in the future? We should be able to incrementally go through these steps: # no signatures in v1.0 # add signatures in v1.5 and support a mix # support signatures only in 2.0  I imagine this would not be the only proto change we would likely need to deal with so we need to be prepared to do something like the above in general.  To be honest we should be focusing our effort on making the v1.0 release much easier to use than what it is right now, by writing lots and lots of good documentations, tutorials, sample apps, tools. Every single day I hear from community users about usage errors and confusion. What we've got so far is a very solid platform but it's incredibly difficult to use and good documentation and education materials is sorely missing. Spending time on a relatively minor deficiency like this is the wrong focus.    ></body> </Action>
<Action id="26394" issue="17507" author="manish-sethi" type="comment" body="BTW, an alternate strategy to not invalidate the past data with future changes - could be to store signatures into an altogether separate metadata index when we introduce that change (e.g., `common.BlockMetadataIndex_TRANSACTIONS_FILTER_SIGS`)." created="2017-06-15 13:28:43.0" updateauthor="manish-sethi" updated="2017-06-15 13:29:55.0"/>
<Action id="26406" issue="17507" author="jyellick" type="comment" body="Concluded in scrum to defer this, so moved to &apos;Future&apos;" created="2017-06-15 14:24:22.0" updateauthor="jyellick" updated="2017-06-15 14:24:22.0"/>
<Action id="26437" issue="17507" author="muralisr" type="comment" body=" ~jimthematrix  Right now I totally agree doc, sample and focus on ease of use is important. However, seemed worthwhile getting to the bottom of  such a low level ledger change that could cause migration headaches later. The details hopefully helps determine the cost vs risk and steering towards right priorities." created="2017-06-15 18:16:09.0" updateauthor="muralisr" updated="2017-06-15 18:16:09.0"/>
<Action id="29548" issue="17507" author="rickr" type="comment" created="2017-08-08 14:59:25.0" updateauthor="rickr" updated="2017-08-08 14:59:25.0"> <body><! CDATA  ~binhn   ~mastersingh24   ~muralisr    ~denyeart  Is this really going into v1.1 ?   If yes,  When's the ETA for this ?  Is there a pending CR ?   ~jimthematrix   ></body> </Action>
<Action id="29765" issue="17507" author="denyeart" type="comment" body="Discussed with  ~jimthematrix , SDK could handle the change in data structure for the invalid byte array (SDK would tolerate both formats) easily enough for v1.1, but we need to think through the compatibility implications more fully, for example in the case of a mixed network of 1.0 and 1.1. The compatibility implications will be detailed out in FAB-5556 prior to proceeding with this work item." created="2017-08-11 20:20:46.0" updateauthor="denyeart" updated="2017-08-11 20:20:46.0"/>
<Action id="29769" issue="17507" author="jyellick" type="comment" body="There is no strong reason to tackle this for v1.1 as far as I am concerned.  The real deficiency is if we ever want to change this field, and since we don&apos;t have a compelling reason to do so for v1.1, we can take our time and think of the best way to accomplish that change." created="2017-08-11 20:32:17.0" updateauthor="jyellick" updated="2017-08-11 20:32:17.0"/>
<Action id="29771" issue="17507" author="denyeart" type="comment" body="I agree with Jason.  I&apos;ll remove the 1.1 tag, and we can consider for future once the compatibility story has settled down." created="2017-08-11 20:52:44.0" updateauthor="denyeart" updated="2017-08-11 20:52:44.0"/>
<Action id="67046" issue="17507" author="sykesm" type="comment" body="Stale" created="2020-01-22 19:15:01.0" updateauthor="sykesm" updated="2020-01-22 19:15:01.0"/>
