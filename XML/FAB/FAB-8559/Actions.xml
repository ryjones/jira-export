<Action id="40945" issue="28065" author="christopherferris" type="comment" body="Not sure that this is critical for 1.1. IIUC you are saying, if I start a peer from nexus:hyperledger/fabric-peer:latest, that when spinning up a chaincode, it should use the nexus:hyperledger/fabric-ccenv:latest image not the hub.docker.com/hyperledger/fabric-ccenv:latest" created="2018-02-27 17:13:50.0" updateauthor="christopherferris" updated="2018-02-27 17:13:50.0"/>
<Action id="40947" issue="28065" author="tongliofcary" type="comment" body="that is right Chris, because hub.docker.com may not have that image. the current behavior also create problem in this case, when you have the ccenv image already pulled form nexus, when chaincode is instantiated, the peer container would still try to get ccenv from docker hub, in any case, I think the code should be changed to extract the image from the same origin or take a configuration parameter, but the default behavior should simply take the default origin." created="2018-02-27 17:18:33.0" updateauthor="tongliofcary" updated="2018-02-27 17:18:33.0"/>
<Action id="40998" issue="28065" author="denyeart" type="comment" created="2018-02-28 12:50:14.0" updateauthor="denyeart" updated="2018-02-28 12:50:14.0"> <body><! CDATA Discussed with a few maintainers - we concluded this could be deferred to 1.2 as a Medium.   ~greg.haskins  Can you provide your opinion?  ></body> </Action>
<Action id="41012" issue="28065" author="tongliofcary" type="comment" body=" ~denyeart thanks david for addressing this issue. Thinking the solution should be hard to do. Totally ok with deferring to 1.2, but can you guys make this a bit higher priority? This really impact the automation tools, the tool will have to pull, then retag to make things work especially now through out the dev process we save the images on nexus, and we use these images for testing on a daily basis, it will be really nice to get this done asap if it is possible. Thanks for confirming the issue though." created="2018-02-28 15:46:33.0" updateauthor="tongliofcary" updated="2018-02-28 15:46:33.0"/>
<Action id="41449" issue="28065" author="mastersingh24" type="comment" created="2018-03-12 09:22:36.0" updateauthor="mastersingh24" updated="2018-03-12 09:25:13.0"> <body><! CDATA  ~tongliofcary  - I don't think this is a bug  You can always override the location / name / image for the chaincode builders and environment(s) in core.yaml or environment variable    {code:java} chaincode.golang.runtime | CORE_CHAINCODE_GOLANG_RUNTIME  chaincode.car.runtime | CORE_CHAINCODE_CAR_RUNTIME  chaincode.java.runtime | CORE_CHAINCODE_JAVA_RUNTIME  chaincode.node.runtime | CORE_CHAINCODE_NODE_RUNTIME {code}    ></body> </Action>
<Action id="41460" issue="28065" author="tongliofcary" type="comment" created="2018-03-12 14:29:34.0" updateauthor="tongliofcary" updated="2018-03-12 14:29:34.0"> <body><! CDATA  ~mastersingh24  Gari, what I found is that my peer image may be pulled from a repository which is not docker hub but the peer container is always thinking that the chaincode image should be from docker hub (because it is default to), are you saying using the four parameters you have above , one can indicate where the chaincode image should be pulled by peer container? These 4 parameters do not look like you can use to specify where the chaincode container should come from. Do you really mean the following instead?  id: path: name:  Thanks.  ></body> </Action>
<Action id="42691" issue="28065" author="mastersingh24" type="comment" body="Take a look at core.yaml  ... that is how you tell the peer which images to use to build chaincode as well as the base image to use for the actual chaincode container.  You do not specify this when you install chaincode ... it&apos;s part of the actual peer configuration." created="2018-04-08 16:50:21.0" updateauthor="mastersingh24" updated="2018-04-08 16:50:21.0"/>
<Action id="42723" issue="28065" author="tongliofcary" type="comment" created="2018-04-09 13:26:17.0" updateauthor="tongliofcary" updated="2018-04-09 13:26:17.0"> <body><! CDATA  ~mastersingh24 Gari, are you saying using piece of code like this in the core.yml file.  chaincode:  # The id is used by the Chaincode stub to register the executing Chaincode # ID with the Peer and is generally supplied through ENV variables # the `path` form of ID is provided when installing the chaincode. # The `name` is used for all other requests and can be any string. id: path: name:   builder: $(DOCKER_NS)/fabric-ccenv:$(ARCH)-$(PROJECT_VERSION)  So that one can replace DOCKER_NS to switch to a different docker repo to get right image? Please confirm and I can close this.  ></body> </Action>
<Action id="42847" issue="28065" author="mastersingh24" type="comment" body="correct" created="2018-04-11 22:59:01.0" updateauthor="mastersingh24" updated="2018-04-11 22:59:01.0"/>
<Action id="42859" issue="28065" author="tongliofcary" type="comment" body="I think that this needs to be addressed in the document." created="2018-04-12 12:44:44.0" updateauthor="tongliofcary" updated="2018-04-12 12:45:52.0"/>
<Action id="44195" issue="28065" author="tongliofcary" type="comment" body="Recently we found this problem causing headache again. The issue is that even when we use chaincode section in core.yaml to configure the namespace for ccenv image, when the site is secured , peer has no idea how to do authentication, it still fails. The other problem is that it seems that when peer container gets built, it hard coded the chaincode tag somewhere, when chaincode container needs to be created at runtime, it will use that tag regardless what its own tag is. For example, a peer gets built with a snapshot tag, but the image gets posted to a repo labled as stable, when this image gets pulled from repo, and it is time to instantiate a chaincode container, it will try to use the snapshot tag, rather than the stable tag to look for the chaincode container, this has very significant issue with test env. Peer container should really use its own tag and namespace to instantiate chaincode container.  " created="2018-05-10 15:13:04.0" updateauthor="tongliofcary" updated="2018-05-10 15:13:04.0"/>
<Action id="44318" issue="28065" author="mastersingh24" type="comment" created="2018-05-14 10:58:29.0" updateauthor="mastersingh24" updated="2018-05-14 10:58:29.0"> <body><! CDATA  ~tongliofcary   - I think I must be missing something here.  Here's the output of peer version: {code:java} peer: Version: 1.2.0-snapshot-f57277ab8 Go version: go1.10.1 OS/Arch: darwin/amd64 Experimental features: true Chaincode: Base Image Version: 0.4.8 Base Docker Namespace: hyperledger Base Docker Label: org.hyperledger.fabric Docker Namespace: hyperledger {code}  Based on the default config (which is {{builder: $(DOCKER_NS)/fabric-ccenv:$(ARCH)-$(PROJECT_VERSION)}}), the peer will use a ccenv image with a tag created as follows:   {code:java} func ParseDockerfileTemplate(template string) string { 	r := strings.NewReplacer( 		"$(ARCH)", runtime.GOARCH, 		"$(PROJECT_VERSION)", metadata.Version, 		"$(BASE_VERSION)", metadata.BaseVersion, 		"$(DOCKER_NS)", metadata.DockerNamespace, 		"$(BASE_DOCKER_NS)", metadata.BaseDockerNamespace)  	return r.Replace(template) } {code}  All of the above code results in the ccenv tag matching the build parameters for the peer itself.  I still do not understand what you are trying to do here.   ></body> </Action>
<Action id="44333" issue="28065" author="tongliofcary" type="comment" created="2018-05-14 13:16:28.0" updateauthor="tongliofcary" updated="2018-05-14 13:16:28.0"> <body><! CDATA  ~mastersingh24 Glad that you went this far to see the issue. say that your peer container has also been taged as stable, so you will have a image like this  hyperledger/fabric-peer:stable,   when this peer trying to create a chaincode container, it will be still looking for the ccenv:1.2.0-snapshot-f57277ab8, that image never existed on the server which only pulled hyperledger/fabric-peer:stable, hyperledger/fabric-ccenv:stable. though the hypereldger/fabric-ccenv:stable maybe exactly the same as fabric-ccenv:1.2.0-snapshot-f57277ab8, but peer container does not care,  peer actually will still look for 1.2.0-snapshot-f57277ab8 from the repo, but repo is secured, and peer has no way to authenticate, then it  fails.   Think about how we do this at the CI, a script can not really be developed using the snapshot tag, it has to be able to use tag like stable, dev or daily-stable. when an image gets tagged with multiple labels, this fails. I think peer container should really use its own tag to look for ccenv image.  ></body> </Action>
<Action id="45843" issue="28065" author="christopherferris" type="comment" body=" ~tongliofcary  the ccenv image is defined by the string in the core.yaml, which by default is defined as Gari indicated. You can override that by setting n environment variable, or modifying the file to pull whatever version you like. Now, I get the point you are on, and frankly, I think that we should tease apart the metadata.Version into its constituent parts: version and build sha. That way, the value is always correct and if we decide to publish a build as stable or to dockerhub, we don&apos;t need the &apos;IS_RELEASE&apos; nonsense to build the images we publish." created="2018-06-12 16:37:20.0" updateauthor="christopherferris" updated="2018-06-12 16:37:20.0"/>
<Action id="45851" issue="28065" author="christopherferris" type="comment" body=" https://gerrit.hyperledger.org/r/22993  is really for FAB-9641, but a side-effect is that it addresses this defect (to the extent it is a defect that has no workaround)." created="2018-06-12 20:02:12.0" updateauthor="christopherferris" updated="2018-06-12 20:02:12.0"/>
<Action id="46093" issue="28065" author="denyeart" type="comment" created="2018-06-18 12:04:53.0" updateauthor="denyeart" updated="2018-06-18 12:04:53.0"> <body><! CDATA  https://gerrit.hyperledger.org/r/#/c/22993/  is merged now, marking as Done.     ~tongliofcary  Please re-open if there is still an issue.  ></body> </Action>
