<Issue id="37748" key="FAB-14227" number="14227" project="10002" reporter="scottz" assignee="bharadwajambati1" creator="scottz" type="10101" summary="2. Configure Raft OSNs in different orderer organizations and create channels and run traffic" priority="2" resolution="10000" status="6" created="2019-02-18 02:23:14.0" updated="2019-08-08 15:55:26.0" resolutiondate="2019-07-23 20:56:53.0" votes="0" watches="1" workflowId="49364"> <description><! CDATA h2. Setup # Modify the configtx.yml file with different orderer organizations  # Generate the orderer certs using cryptogen # Create a genesis block from the modified configtx.yml # Create a fabric network with: ## 4 raft orderers in multiple ordererorgs: 3 OSNs in ordererorg1 and *1 OSN (orderer4th) in ordererorg2* ## 2 peerorgs with 2 peers per org. ## etcd/raft with 4 OSNs in the system channel ({{orderersystemchannel}}) ## Use our usual settings for batchsize = 500, batchtimeout = 2s, and SnapshotInterval = 100 M # Set up the k8s cluster: set servicetype = LoadBalancer to allow bouncing the orderers. # Create an application channel {{channel1}} with the same consenter set as {{orderersystemchannel}}. # Install {{samplecc}} on all peers. # Instantiate with simple endorsement policy requiring only 1 peer to endorse. # Provide scfile (configuration information) to the Performance Traffic Engine (PTE). # The network will be set up in IKS cluster. PTE itself can run in either its own container in the IKS cluster OR in a vLaunch container. For this test we will run in the vLaunch machine (preferred for convenience, but might incur slightly longer transmission delays between the pte traffic client and the fabric nodes in the k8s cluster). # Run with logging enabled (per Raft System Test Epic FAB-13538 comments). Logs must be persistent, so we can retrieve them even in cases where a peer or orderer stops.  _Alternatively, the network could be set up in vLaunch VM instead of IKS, using Docker containers for all network nodes, including the PTE client._ h2. Inputs * Run the traffic - similar to as described in FAB-14220, but send 10 transactions for each of *8* threads, using nProcsPerOrg=4 with both peerorgs org1 and org2, and using ordererOpt setting for RoundRobin. * Create two more channels; total = 3 channels. * Run the traffic on all three channels simultaneously. Send 10,000 transactions per thread. * Onboard two more orderers in ordererorg2. Total 6; 3 in each ordererorg. * Change nProcPerOrg=6, so we will send transactions to all 6 orderers. * Run the traffic on all three channels simultaneously. Send 10,000 transactions per thread.  h2. Expectations * All nodes remain in service throughout the test. * No errors in the logs of peers and orderers. * All the orderers have the same number of blocks within each channel * No failures or errors reported by PTE.  ></description> </Issue>
