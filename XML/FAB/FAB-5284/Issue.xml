<Issue id="19206" key="FAB-5284" number="5284" project="10002" reporter="kchristidis" assignee="guoger" creator="kchristidis" type="10003" summary="Move kafka to optimized message flow" priority="3" resolution="10000" status="6" created="2017-07-12 03:34:22.0" updated="2018-07-20 14:13:45.0" resolutiondate="2017-09-14 14:00:30.0" votes="0" watches="5" workflowId="39438"> <description><! CDATA h2. This is how the Kafka-based orderer should work when this JIRA is completed. h3. Note: * The pieces that should be remove are -stricken through-. * The pieces that need to be added are *displayed in bold*.  h3. Flow: # Add the following fields to the KafkaMessageRegular definition: ** uint64 config_seq = 2 ** byte{color:#333333}s config_update = 3{color} ** int32 class = 4 (where class is an enum with UNKNOWN, CONFIG, NORMAL values as described in: https://jira.hyperledger.org/browse/FAB-5284?focusedCommentId=28622&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-28622 # Broadcast component receives message # Check whether it's a CONFIG_UPDATE message ## If it is a CONFIG_UPDATE message: ### Propose it to the message processor, get back the resulting config message, and a config sequence number ### *Pass the config update, config message, and config sequence number to the processor's Configure method which does two things: (a) populates the KafkaRegular message (all 4 fields), and (b) enqueues it for ordering* ## If it is a NORMAL message: ### Run it through the message processor to get back a config sequence number ### *Pass the normal message and the config sequence number to the processor's Order method which does two things: (a) populates the KafkaRegular message (3 out of 4 fields, since the config field here remains empty), and (b) enqueues it for ordering* # -Invoke the processor's Order on the message and config sequence number: this wraps the original message (config update or normal message) and config sequence number into a KafkaRegular message, then- Enqueueing simply posts the KafkaRegular message to the channel's Kafka partition for ordering # Consume the partition above, read the message from the ordered stream # *Retrieve the current config sequence number* # -Have the support classify the message to identify its type- *Read the message's class field* ## *If it is UNKNOWN, run support.ClassifyMessage to identify its type* ### *If it's a CONFIG or ORDERER_TX messag{color:#333333}e, run configtx.Validate on it, and discard if you get an error or do as 2.2.1-2.2.4 below{color}* ### *If it's a NORMAL message, do as as 3.1.1-3.1.2 below* ## *If it is a CONFIG_UPDATE message:* ### *If the config sequence has advanced* #### *ProcessConfigUpdateMsg again* #### *Discard if an error is returned* #### *Otherwise run through the processor's Configure method and re-order* ### *Otherwise:* #### Invoke the block cutter to cut the pending batch into a block and write that block #### Place the config update message into a block #### Trigger updates from this config message (i.e. create new chain, or update config of existing chain) #### Write block ## *If it is a NORMAL message:* ### *If the config sequence has advanced:* #### *ProcessNormal again and di**scard if an error is returned* #### *Otherwise do as Step 2.1-2.1 below* ### *Otherwise:* #### Invoke the block cutter to have the message ordered #### If this returns batches, then invoke WriteBlock to append them to disk  ></description> </Issue>
