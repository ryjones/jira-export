<Action id="69259" issue="45089" author="yacovm" type="comment" body="Look at https://jira.hyperledger.org/browse/FAB-5288 " created="2020-05-18 08:14:51.0" updateauthor="yacovm" updated="2020-05-18 08:14:51.0"/>
<Action id="69260" issue="45089" author="yacovm" type="comment" body="You can override the orderer endpoints / TLS CA certificates with  this|https://github.com/hyperledger/fabric/blob/master/sampleconfig/core.yaml#L342-L350 ." created="2020-05-18 08:21:35.0" updateauthor="yacovm" updated="2020-05-18 08:21:35.0"/>
<Action id="69262" issue="45089" author="JIRAUSER19857" type="comment" created="2020-05-18 10:37:28.0" updateauthor="JIRAUSER19857" updated="2020-05-18 10:38:13.0"> <body><! CDATA  ~yacovm  understood!  So can I configure the given attribute in the link using the environment variable? Something like: CORE_PEER_DELIVERYCLIENT_ADDRESSOVERRIDES? If yes, then how shall I syntax it properly along with value in the ".yaml" file of kubernetes peer pod?  ??In core.yaml, also specify some block height that once the local ledger size is larger than that, then switch to use the channel config??  Do we have this variable enabled in core.yaml? * If yes, then can you link that too? * If not, then how do we overcome the scenario that the peer will not go and talk to "overriding endpoint" after it has synced the chain?  ></body> </Action>
<Action id="69263" issue="45089" author="yacovm" type="comment" created="2020-05-18 12:16:35.0" updateauthor="yacovm" updated="2020-05-18 12:16:35.0"> <body><! CDATA I don't know how you configure it with an environment variable. Maybe  ~mastersingh24  or  ~ptippett  know?   {quote}In core.yaml, also specify some block height that once the local ledger size is larger than that, then switch to use the channel config{quote}  We don't have this. This override is absolute.    ></body> </Action>
<Action id="69264" issue="45089" author="JIRAUSER19857" type="comment" created="2020-05-18 12:42:17.0" updateauthor="JIRAUSER19857" updated="2020-05-18 12:43:21.0"> <body><! CDATA Understood! But this work around also means that we must specify override addresses every time we aim at adding a new peer node (in the environment described above - where its fails to sync from genesis block orderers) right?   I that scenario, is the update to core.yaml dynamic in nature? * If yes, then cool we can update the override endpoint in a running peer too! * If no, then should we everytime restart the peer pod if we just wish to add it to the channel that it cannot sync from (forcing us to add an override variable again in core.yaml)?  ></body> </Action>
<Action id="69270" issue="45089" author="JIRAUSER19857" type="comment" created="2020-05-19 04:39:19.0" updateauthor="JIRAUSER19857" updated="2020-06-26 05:45:07.0"> <body><! CDATA  ~yacovm , I would like to highlight that why aren't we making using of peer CLI command for this? I mean to say that in "peer channel join" command we have an option of specifying the orderer endpoint, right? We should just extend that to be used in the scenario where peer cannot pull blocks from genesis block orderers. Specifying "-o" argument should make the peer pull channel blocks from the specified endpoint instead of looking into config block.  You can run the peer channel join command like follows: {code:java} peer channel join -b mychannel.block -o orderer4.example.com --tls --cafile <ordererTLSCAFile>{code} The benefit would be:  # The change in core.yaml is permanent like you explained. This feature would be dynamic in nature. # Already running peers could join newer channels dynamically.   Currently, I tried implementing above feature but peer node does NOT respect the "-o" argument (and yet we have it in the "peer" binary commands). If we are using it in other operations like "invoke" then we should allow this command to run parallel to that, giving a more dynamic nature, instead of making use of core.yaml.   Please let me know your thoughts on this.  ></body> </Action>
<Action id="69271" issue="45089" author="yacovm" type="comment" created="2020-05-19 06:36:25.0" updateauthor="yacovm" updated="2020-05-19 06:36:25.0"> <body><! CDATA I agree with your analysis, it seems like a good idea to add something like that.      ~denyeart  - FYI  ></body> </Action>
<Action id="69307" issue="45089" author="JIRAUSER19857" type="comment" created="2020-05-21 04:48:25.0" updateauthor="JIRAUSER19857" updated="2020-05-21 04:53:44.0"> <body><! CDATA One quick question.   What would happen in the scenario where the new peer is able to fetch the blocks of the channel from the genesis block orderers? I mean to say, how would the peer identify the *Orderer Organization's root TLS certificate* in that case (let's say when we have more than 1 Orderer Organization in the channel)?  ></body> </Action>
<Action id="69553" issue="45089" author="denyeart" type="comment" body="The change recommended by  ~chintanr11   does seem reasonable. What do you think  ~caod  and  ~wlahti  ?" created="2020-06-25 10:43:19.0" updateauthor="denyeart" updated="2020-06-26 11:45:38.0"/>
<Action id="69557" issue="45089" author="caod" type="comment" body="Seems fine, we&apos;ll look into prioritizing this change." created="2020-06-25 14:05:36.0" updateauthor="caod" updated="2020-06-25 14:05:36.0"/>
<Action id="69564" issue="45089" author="JIRAUSER19857" type="comment" created="2020-06-26 05:42:06.0" updateauthor="JIRAUSER19857" updated="2020-06-26 05:43:16.0"> <body><! CDATA Hi Team,   I think we should also take into account  ~mastersingh24 's comment on the same issue posted by me on lists  here| https://lists.hyperledger.org/g/fabric/message/8343  .   I need some understanding on his following statements:  ??we plan to move away from the system chaincode approach currently being used??  ??Additionally, you actually need to persist the override information in the case where you decide to rebuild the ledger for a given channel.??     If I am not wrong, the second point implies, in case the peer looses its persistent data store. Right? If that is so, then peer should again be requested to join the channel with dynamically passing an orderer endpoint.   If this understanding of mine is not correct, then what could be the scenario where peer would want to rebuild ledger from "block 0"? Or if it is rebuilding ledger from height "h" onwards, then would not it directly connect to the latest orderer information it has? Otherwise, the issue will be more serious than described above.   ></body> </Action>
<Action id="69565" issue="45089" author="denyeart" type="comment" created="2020-06-26 11:43:35.0" updateauthor="denyeart" updated="2020-06-26 11:43:35.0"> <body><! CDATA Ah, it seems Gari doesn't agree to the join update, his arguments make sense, let me explain some more...  If the peer crashed when processing the chain, it would resume from an earlier channel config with the outdated information, not from the originally passed config. Also if the ledger became corrupt for whatever reason, it would not be possible to rebuild from genesis (e.g. 'peer node reset').  Concerning moving away from the system chaincode approach (CSCC in this case), the intent is to replace these system chaincodes with traditional APIs, therefore there is little desire to extend the current system chaincodes.  Finally, the ledger checkpoint development is underway, which will make it possible to join a new peer from latest config block rather than from genesis block, so again there is little desire to workaround a problem that will be fundamentally resolved in an upcoming release.  So it sounds like the proposed approach was considered, but it was decided to do the peer config overrides instead as the interim workaround.     ></body> </Action>
<Action id="69566" issue="45089" author="JIRAUSER19857" type="comment" body=" ~denyeart , true, that&apos;s why I felt I can just add it here. I understood your explanation too on the same. Will this new release, that will allow the peer to fetch blocks from latest one, will be back-ported to earlier versions like v1.4 or is it going to only affect v2.x?" created="2020-06-26 13:37:33.0" updateauthor="JIRAUSER19857" updated="2020-06-26 13:37:33.0"/>
<Action id="69567" issue="45089" author="denyeart" type="comment" body=" ~chintanr11  The ledger checkpoint is targeted for a v2.x release. v1.4.x is in bug fix maintenance support only." created="2020-06-26 14:31:19.0" updateauthor="denyeart" updated="2020-06-26 14:31:19.0"/>
<Action id="69596" issue="45089" author="denyeart" type="comment" created="2020-06-30 16:01:24.0" updateauthor="denyeart" updated="2020-06-30 16:05:56.0"> <body><! CDATA Let's close this Jira with the following summary: * Temporary workaround is to use the peer overrides - https://github.com/hyperledger/fabric/blob/release-1.4/sampleconfig/core.yaml#L331-L339 * Longer term resolution will be ability to join a channel from a  later block height and checkpointed state (FAB-106)     ></body> </Action>
