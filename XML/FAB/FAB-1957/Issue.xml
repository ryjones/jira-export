<Issue id="14459" key="FAB-1957" number="1957" project="10002" reporter="latitiah" assignee="kchristidis" creator="latitiah" type="10001" summary="Orderer Panic when unable to connect with kafka servers" priority="3" resolution="10000" status="6" created="2017-01-31 16:28:53.0" updated="2018-07-20 18:55:04.0" resolutiondate="2017-03-21 17:23:14.0" votes="0" watches="2" workflowId="37242"> <description><! CDATA When the orderer container is unable to connect to the kafka broker containers (in this case the hostname was not resolving), the orderer panics after attempting to connect 20 times unsuccessfully.   While an exit after a critical error makes sense, it would be better if it were not a panic.  ``` orderer_1    | 2017-01-30 20:02:24.779 UTC  orderer/kafka  newChain -> DEBU 037 Starting chain with last persisted offset: -3 orderer_1    | 2017-01-30 20:02:27.779 UTC  orderer/kafka  newProducer -> DEBU 038 Connecting to Kafka cluster:  kafka1:9092 kafka2:9092 kafka3:9092  ... ... orderer_1    | 2017-01-30 20:03:24.779 UTC  orderer/kafka  newProducer -> DEBU 04b Connecting to Kafka cluster:  kafka1:9092 kafka2:9092 kafka3:9092  orderer_1    | panic: Failed to create Kafka producer: kafka: client has run out of available brokers to talk to (Is your cluster reachable?) orderer_1    |  orderer_1    | goroutine 1  running : orderer_1    | panic(0xa21e20, 0xc420381a20) orderer_1    | 	/opt/go/src/runtime/panic.go:500 +0x1a1 orderer_1    | github.com/hyperledger/fabric/orderer/kafka.newProducer(0xc4202dd0c0, 0x3, 0x4, 0x0, 0x9, 0x0, 0x1, 0xb2d05e00, 0xdf8475800, 0x0, ...) orderer_1    | 	/opt/gopath/src/github.com/hyperledger/fabric/orderer/kafka/producer.go:51 +0x5bd orderer_1    | github.com/hyperledger/fabric/orderer/kafka.glob..func2(0xc4202dd0c0, 0x3, 0x4, 0x0, 0x9, 0x0, 0x1, 0xb2d05e00, 0xdf8475800, 0xc4202f5e00, ...) orderer_1    | 	/opt/gopath/src/github.com/hyperledger/fabric/orderer/kafka/orderer.go:58 +0x7d orderer_1    | github.com/hyperledger/fabric/orderer/kafka.newChain(0xfeba40, 0xc4202e45a0, 0xfed9c0, 0xc4202e5ea0, 0xfffffffffffffffd, 0xc4202f8b50) orderer_1    | 	/opt/gopath/src/github.com/hyperledger/fabric/orderer/kafka/orderer.go:113 +0x2e7 orderer_1    | github.com/hyperledger/fabric/orderer/kafka.(*consenterImpl).HandleChain(0xc4202e45a0, 0xfed9c0, 0xc4202e5ea0, 0xc4202e96e0, 0x2, 0x2, 0x3, 0xc4202f5b80) orderer_1    | 	/opt/gopath/src/github.com/hyperledger/fabric/orderer/kafka/orderer.go:82 +0x67 orderer_1    | github.com/hyperledger/fabric/orderer/multichain.newChainSupport(0xc420318240, 0xc4203181a0, 0xc4202e8240, 0xfe4f00, 0x1029220, 0x1) orderer_1    | 	/opt/gopath/src/github.com/hyperledger/fabric/orderer/multichain/chainsupport.go:132 +0x565 orderer_1    | github.com/hyperledger/fabric/orderer/multichain.NewManagerImpl(0xfe51c0, 0xc420242680, 0xc4202e8240, 0xfe4f00, 0x1029220, 0x0, 0x0) orderer_1    | 	/opt/gopath/src/github.com/hyperledger/fabric/orderer/multichain/manager.go:128 +0x3cb orderer_1    | main.main() orderer_1    | 	/opt/gopath/src/github.com/hyperledger/fabric/orderer/main.go:153 +0xd39 ```  ></description> </Issue>
