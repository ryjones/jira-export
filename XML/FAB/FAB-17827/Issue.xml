<Issue id="44984" key="FAB-17827" number="17827" project="10002" reporter="JIRAUSER20105" creator="JIRAUSER20105" type="10004" summary="Provide a way to include https for operating service and prometheus endpoints when running network as docker containers" priority="3" resolution="10203" status="6" created="2020-05-01 00:38:02.0" updated="2020-05-05 23:19:00.0" resolutiondate="2020-05-05 23:18:59.0" votes="0" watches="2" workflowId="58887" archived="N"> <description><! CDATA As a user when running an entire network in docker containers - I specify Prometheus and operating service values as environment variables in the docker-compose file of the peer and orderer. (Sample added to the bottom) and it works perfectly but these are not secure URLs(https).  Ex-   Peer - CORE_METRICS_PROVIDER=prometheus - CORE_OPERATIONS_LISTENADDRESS=peer0.org1.example.com:1443   Orderer - ORDERER_METRICS_PROVIDER=prometheus - ORDERER_OPERATIONS_LISTENADDRESS=orderer0.example.com:4443   CA - FABRIC_CA_SERVER_CA_NAME=ca.example.com - FABRIC_CA_SERVER_METRICS_PROVIDER=prometheus -------------------------------------------------------------------------------------------   It would help if we can pass values to make these endpoints use existing TLS certs whrn running from docker container-  https://peer0.org1.example.com:1443/metrics  or  https://host:1443/mhealthz|https://peer0.org1.example.com:1443/metrics    Something like below - Peer - CORE_METRICS_OPERATIONS_HTTPS_ENABLED=true   Orderer - ORDERER_METRICS_OPERATIONS_HTTPS_ENABLED=true   CA - FABRIC_CA_SERVER_OPERATIONS_HTTPS_ENABLED=true   -------------Orderer-compose.yaml--------------------------------------------------------- orderer0.example.com: extends: file: docker-compose-base.yml service: orderer container_name: orderer0.example.com environment: - ORDERER_HOST=orderer0.example.com - CONFIGTX_ORDERER_ORDERERTYPE=kafka - CONFIGTX_ORDERER_KAFKA_BROKERS= kafka0:9092,kafka1:9092,kafka2:9092,kafka3:9092  - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s - ORDERER_KAFKA_VERBOSE=true - ORDERER_GENERAL_GENESISPROFILE=SampleInsecureKafka - ORDERER_ABSOLUTEMAXBYTES=${ORDERER_ABSOLUTEMAXBYTES} - ORDERER_PREFERREDMAXBYTES=${ORDERER_PREFERREDMAXBYTES} - ORDERER_METRICS_PROVIDER=prometheus - ORDERER_OPERATIONS_LISTENADDRESS=orderer0.example.com:4443 - ORDERER_GENERAL_TLS_ENABLED=true - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/tls/server.key - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/tls/server.crt - ORDERER_GENERAL_TLS_ROOTCAS=/var/hyperledger/tls/ca.crt - ORDERER_GENERAL_TLS_CLIENTAUTHREQUIRED=true - ORDERER_GENERAL_TLS_CLIENTROOTCAS=/var/hyperledger/tls/ca.crt volumes: - ../crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/msp:/var/hyperledger/msp - ../crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/tls:/var/hyperledger/tls - ../network-config/:/var/hyperledger/configs depends_on: - kafka0 - kafka1 - kafka2 - kafka3 networks: behave: aliases: - ${CORE_PEER_NETWORKID} ports: - 7050:7050 - 4443:4443    ></description> </Issue>
