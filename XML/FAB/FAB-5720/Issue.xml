<Issue id="20114" key="FAB-5720" number="5720" project="10002" reporter="kchristidis" assignee="guoger" creator="kchristidis" type="10003" summary="Address possible non-determinism during revalidation of messages" priority="3" resolution="10000" status="6" created="2017-08-10 22:00:40.0" updated="2018-07-20 14:14:04.0" resolutiondate="2017-10-24 15:17:18.0" votes="0" watches="4" workflowId="39705"> <description><! CDATA Recall that in the new message flow, the OSNs tagged incoming messages with the config sequence they were validated against, before submitting them for ordering.  If the config sequence advances before the messages are read/consumed from the Kafka partition, they need to be revalidated.  (For the sake of this discussion, let's refer to these messages that need to be revalidated because the config sequence number changed as "stale messages".)  A naive approach to this problem would have us dropping all stale messages that fail to pass the revalidation, and append to the ledger those that don't.  This is incorrect as validation can fail non-deterministically; consider for example the case of a message that is identified as stale by OSN1 because its certificate just expired. OSN2 has a slower clock however, so it identifies this message as valid. OSN1 drops the message, OSN2 adds it to its ledger, and we now have a fork.  We therefore need to revalidate *and reorder* these stale messages before deciding on their fate (commit or drop). This way, all OSNs will be on the same page, and we won't get forks.  However, assume an ordering service consisting of 30 OSNs. Under this scheme, every stale message can be resubmitted to the ordering service (a max of) 30 times (if all 30 nodes find it valid during revalidation). That's a lot of duplicate messages that the OSNs will have to go through eventually, and we have no easy to way to identify them.  Therefore we need a way to have each OSN go "I've already processed a copy of this revalidated and reordered stale message, I'll pass."  Wanted behavior for each OSN: # DO: Tag the message itself. Add an OriginalOffset field to the KafkaMessageRegular protobuf definition. If a message is stale and found to be valid during the revalidation, populate that with the Kafka offset that corresponds to this message, then submit it for re-ordering. # DO: Record the last OriginalOffset it processed, in a variable that we call LastOriginalOffsetProcessed. If a message with a non-nil OriginalOffset is received that is <= LastOriginalOffsetProcessed, discard it immediately. Each OSN should record LastOriginalOffsetProcessed on disk for crash-fault tolerance. (Add that piece of metadata to the block similar to how we encode LastOffsetPersisted.) # DO NOT: Commit the block until all stale messages with OriginalOffset <= this block's LastOffsetCommitted have been posted to the Kafka cluster (ACK'd) successfully. Otherwise you run the risk of not giving all the stale messages a second chance. (Consider the case where an OSN reads a message that is now labeled as stale, its OriginalOffset is set to 18. It is handed over to the Enqueue thread for re-ordering (posting to the Kafka cluster). The main thread in the meantime now reads the following message, which is valid and fills the pending block. The main thread writes this block to disk with LastOffsetPersisted = 19. The OSN crashes before the Enqueue thread manages to post message 18 to the Kafka cluster this successfully. If this happens across all nodes, this stale message will be lost without being re-ordered.)  Additional notes: # This flow applies to both NORMAL and CONFIG_UPDATE messages.  NOTE: we must NOT resubmit it if we still have v1.0.x orderer in the cluster, as they couldn't differentiate the resubmission and original tx. Therefore, we should add a switch {{Compatibility.Resubmission}} to turn on/off resubmission. Upgrade path should be: - Partial OSNs are upgraded to v1.1, {{Resubmission}} is off be default - v1.1 OSNs behave exactly the same as v1.0.x (still double-validate every tx, and no resubmission) - Upgrade remaining v1.0.x OSNs to v1.1 - Re-configure the channel to turn on {{Resubmission}} FAB-5999 is linked to this issue as block to capture this work.  ></description> </Issue>
