<Action id="59540" issue="39535" author="ales" type="comment" created="2019-04-26 18:35:46.0" updateauthor="ales" updated="2019-04-26 18:35:46.0"> <body><! CDATA Speaking of fixes: unfortunately there is no obvious way to entirely close the gap. The best approach seems to be: # on 2.0 binary peer startup on <2.0 channels, print a warning message if namespaces that will be reserved starting from 2.0 aren't empty/nonexistent # on a 1.4->2.0 channel upgrade, panic if reserved namespaces aren't empty/nonexistent  Optionally we may also # provide external tools to cleanup reserved namespaces of non-deployable chaincodes; or # create an undocumented env variable to do so automagically on channel upgrade w/o panicking  ></body> </Action>
<Action id="59549" issue="39535" author="ales" type="comment" body="See the update - FAB-15294 makes things even simpler for the attacker" created="2019-04-27 09:31:20.0" updateauthor="ales" updated="2019-04-27 09:31:20.0"/>
<Action id="59552" issue="39535" author="yacovm" type="comment" created="2019-04-27 11:01:28.0" updateauthor="yacovm" updated="2019-04-27 11:01:28.0"> <body><! CDATA {quote} 1. the endorsement policy is satisfied by any member of evilorg 2. the dissemination policy of any existing collection includes evilorg {quote}  You don't even need to do (1), as we have private data reconciliation now, so just extend the collection policy - and the legitimate peers of the collection would gladly share their hash pre-images with illegitimate (evil) organization.   ></body> </Action>
<Action id="59553" issue="39535" author="ales" type="comment" body="Yup  ~yacovm ... :( Step (1) is only required if the attacker wants to be able to modify arbitrary data in the victim cc namespace" created="2019-04-27 11:07:40.0" updateauthor="ales" updated="2019-04-27 11:08:18.0"/>
<Action id="59554" issue="39535" author="yacovm" type="comment" created="2019-04-27 11:09:37.0" updateauthor="yacovm" updated="2019-04-27 11:13:09.0"> <body><! CDATA and is it possible to detect a capability transition (pre 2.0 to 2.0) and then truncate *_lifecycle* ?  Â   (and I think panicking is good enough of a solution. Anyone that would pull the attack would then have to admit it tried to hack the network).  ></body> </Action>
<Action id="59555" issue="39535" author="ales" type="comment" body="The capability transition is certainly detectable - the config tx processor will need to expose some sort of eventing service (if we want to do it cleanly); one listener can be interested in the event !2.0 capability -&gt; 2.0 capability and perform the check. It&apos;s a lot of work by the looks of it.." created="2019-04-27 11:16:16.0" updateauthor="ales" updated="2019-04-27 11:16:16.0"/>
<Action id="61876" issue="39535" author="denyeart" type="comment" body=" ~ales  I believe we said this one is addressed by one of the other recently added validation checks, can it be closed now? Please clarify the resolution here and in FAB-15294." created="2019-07-16 17:10:09.0" updateauthor="denyeart" updated="2019-07-16 17:10:09.0"/>
<Action id="62464" issue="39535" author="ales" type="comment" body=" ~denyeart : 1.4.2 is no longer affected by this issue since it is impossible (to the best of our knowledge) to pollute the _lifecycle namespace. The 1.4.2-&gt;2.0 upgrade is safe from this perspective" created="2019-07-31 14:43:46.0" updateauthor="ales" updated="2019-07-31 14:43:46.0"/>
<Action id="62466" issue="39535" author="denyeart" type="comment" body="Fixed as of v1.4.2." created="2019-07-31 15:12:53.0" updateauthor="denyeart" updated="2019-07-31 15:12:53.0"/>
