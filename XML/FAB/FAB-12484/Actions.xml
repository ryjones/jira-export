<Action id="52361" issue="34709" author="grapebaba" type="comment" body="Hi  ~sykesm ,  ~muralisr  and I are doing metrics redesign, we are discussing using go plugin approach to support various monitor system. However we may still use standard tally reporter interfaces for abstraction. Could you let us know more about tally dependencies locking? And early I investigated go-kit, thought it support both prom and statsd, it need write different code in caller code, seems it is not better than tally.  The latest doc  https://docs.google.com/document/d/1xveVQM6e2XeAZBisYRTSfElmeBeYKntnghGyWPtsMSs/edit  ." created="2018-10-17 13:12:40.0" updateauthor="grapebaba" updated="2018-10-17 13:16:13.0"/>
<Action id="52367" issue="34709" author="sykesm" type="comment" created="2018-10-17 14:34:36.0" updateauthor="sykesm" updated="2018-10-17 14:34:36.0"> <body><! CDATA Hi. I've seen the document and reviewed it (as well as the existing implementation) before creating these stories.  Tally issues: https://github.com/uber-go/tally/issues/82 https://github.com/uber-go/tally/issues/78 https://github.com/uber-go/tally/issues/71  Basically, they're pinning their own dependencies and they're using package rewriting. And, to be clear, I never said one was better than the other. My focus is on fit for purpose and kit metrics satisfies the requirement with little drag.  At the end of the day, components need abstractions for Counters, Gauges, and Histograms and many packages satisfy those requirements. We also don't strictly need to worry about statsd *and* prometheus as the statsd-exporter can be used in prometheus deployments.  ></body> </Action>
