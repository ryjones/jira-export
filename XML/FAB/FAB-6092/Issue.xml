<Issue id="20715" key="FAB-6092" number="6092" project="10002" reporter="smithbk" assignee="yacovm" creator="smithbk" type="10004" summary="Gossip error: PKIID wasn&apos;t found" priority="3" resolution="10000" status="6" created="2017-09-10 19:13:27.0" updated="2018-07-20 14:14:20.0" resolutiondate="2017-10-17 21:30:20.0" votes="0" watches="3" workflowId="39962"> <description><! CDATA I am writing a fabric-ca sample and seeing the following errors and I can't figure out what I may be doing wrong.  Please help.  {code} ^  33m2017-09-08 20:44:35.630 UTC  gossip/gossip  handleMessage -> WARN 418^  0m Message GossipMessage: tag:EMPTY alive_msg:<membership:<endpoint:"peer2-org1:7051" pki_id:"\010\222'\367\354\207\273tSK\370\377\260\245a(?\327+rK\370\000X&\213\227x~Hb\357" > timestamp:<inc_num:1504903455606434130 seq_num:16 > > , Envelope: 71 bytes, Signature: 71 bytes isn't valid ^  36m2017-09-08 20:44:38.807 UTC  gossip/channel  handleStateInfSnapshot -> DEBU 419^  0m Channel mychannel : Couldn't find org identity of peer Äí?Ä^O^T<8a>lÃ¿à<9f>x<96>g^K¶Ëê^C^HL1^B<84>UU¤¨ø<88>^Z message sent from ÔqFîÞ¡9=^OQS¡ýùµ^G<8c>Pï     yå?3Ä¡6^ èÏÊú ^  33m2017-09-08 20:44:40.380 UTC  gossip/gossip  handleMessage -> WARN 41a^  0m Message GossipMessage: tag:EMPTY alive_msg:<membership:<endpoint:"peer1-org2:7051" pki_id:"\304\355?\304\017\024\212l\303\277\340\237x\226g\013\266\313\352\003\010L1\002\204UU\244\250\370\210\032" > timestamp:<inc_num:1504903455361523350 seq_num:22 > > , Envelope: 71 bytes, Signature: 70 bytes isn't valid {code}  To reproduce, you have to deal with 3 repos (fabric, fabric-ca, and fabric-samples) as shown below. {code} 1) Build *fabric* docker images from master if not already done. # cd $GOPATH/src/github.com/hyperledger/fabric # make docker  2) Build *fabric-ca* docker images # git clone github.com/hyperledger/fabric-ca and cd to fabric-ca # checkout https://gerrit.hyperledger.org/r/#/c/13195/ # export USE_FABRIC_LATEST=true # make docker  3) Run the sample from fabric-samples repo: # Checkout https://gerrit.hyperledger.org/r/#/c/13213/ to your fabric-samples repo # cd to fabric-samples/fabric-ca # Run the "start.sh" script {code}  After running the start script, it will eventually hang (and finally timeout) when trying to instantiate chaincode on peer2-org2.  The output will look similar to the following: {code} ##### 2017-09-10 18:12:54 Instantiating chaincode on peer2-org2 ... ##### ^  36m2017-09-10 18:12:54.660 UTC  msp  GetLocalMSP -> DEBU 001^  0m Returning existing local MSP ^  36m2017-09-10 18:12:54.660 UTC  msp  GetDefaultSigningIdentity -> DEBU 002^  0m Obtaining default signing identity 2017-09-10 18:12:54.666 UTC  chaincodeCmd  checkChaincodeCmdParams -> INFO 003^  0m Using default escc 2017-09-10 18:12:54.666 UTC  chaincodeCmd  checkChaincodeCmdParams -> INFO 004^  0m Using default vscc ^  36m2017-09-10 18:12:54.668 UTC  msp/identity  Sign -> DEBU 005^  0m Sign: plaintext: 0A8B080A6708031A0C08A681D6CD0510...324D53500A04657363630A0476736363 ^  36m2017-09-10 18:12:54.668 UTC  msp/identity  Sign -> DEBU 006^  0m Sign: digest: 51ECE4574479C70F1C00AC65B0A71B7DD092CC51B5D042A5A4FE58049916B637 {code}  You can control-C out of this and then cd to the *data/logs* where you will see the logs from all of the containers.  The logs will contain the environment variables that were set when starting the peer.  For example, in data/logs/peer2-org2.log, you'll see the following, which is also the log file that contains the gossip errors mentioned previously. {code} ##### 2017-09-10 18:12:46 Starting peer 'peer2-org2' with MSP at '/opt/gopath/src/github.com/hyperledger/fabric/peer/msp' ##### CORE_PEER_TLS_ROOTCERT_FILE=/data/org2-ca-chain.pem CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/tls/server.key CORE_PEER_GOSSIP_ORGLEADER=false CORE_PEER_PROFILE_ENABLED=true CORE_PEER_LOCALMSPID=org2MSP CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/tls/server.crt CORE_PEER_TLS_ENABLED=true CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/msp CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=net_fabric-ca CORE_PEER_ID=peer2-org2 CORE_LOGGING_LEVEL=DEBUG CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer2-org2:7051 CORE_PEER_ADDRESS=peer2-org2:7051 CORE_PEER_GOSSIP_USELEADERELECTION=true CORE_PEER_GOSSIP_BOOTSTRAP=peer2-org2:7051 {code}  Note: In this sample, org0 is the orderer's org, and org1 and org2 are peer orgs.  I also added an attachment data.zip which contains my resulting data directory. You may be able to tell from just looking at the logs. The data directory also contains the configtx.yaml and other artifacts.  ></description> </Issue>
