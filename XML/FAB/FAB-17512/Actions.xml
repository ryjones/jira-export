<Action id="67993" issue="44372" author="btl5037" type="comment" created="2020-02-18 20:47:37.0" updateauthor="btl5037" updated="2020-02-18 20:47:37.0"> <body><! CDATA Hey Nick, we will check this out once we have the logs.  Thanks  ></body> </Action>
<Action id="68269" issue="44372" author="btl5037" type="comment" body="Nick, do you have any logs to support what you&apos;ve seen here? We are still interested in investigating this" created="2020-03-10 03:49:20.0" updateauthor="btl5037" updated="2020-03-10 03:49:20.0"/>
<Action id="69031" issue="44372" author="jorgego" type="comment" created="2020-04-24 00:07:49.0" updateauthor="jorgego" updated="2020-04-24 00:51:07.0"> <body><! CDATA I experimented the same problems as described below. I have uploaded the logs for my run on CouchDB. There is a time out error that only shows up when the load is increased.  The error is easily reproduced.   I am running Fabric v1.4.6     2020.04.23-19:58:27.702 error  caliper   adapters/fabric  Failed to evaluate transaction  paginatedRichQuery  using arguments  \{"selector":{"docType":"fixed-asset","creator":"client3"}},10, , with error: Error: failed to execute transaction b29a87dccd36594bb5fe96169d90519d3450fd9a2389ce47e6feaf6b919f1357: error sending: timeout expired while executing transaction at self._endorserClient.processProposal (/usr/local/lib/node_modules/fabric-network/node_modules/fabric-client/lib/Peer.js:144:36) at Object.onReceiveStatus (/usr/local/lib/node_modules/fabric-network/node_modules/grpc/src/client_interceptors.js:1207:9) at InterceptingListener._callNext (/usr/local/lib/node_modules/fabric-network/node_modules/grpc/src/client_interceptors.js:568:42) at InterceptingListener.onReceiveStatus (/usr/local/lib/node_modules/fabric-network/node_modules/grpc/src/client_interceptors.js:618:8) at callback (/usr/local/lib/node_modules/fabric-network/node_modules/grpc/src/client_interceptors.js:845:24)     ></body> </Action>
<Action id="69034" issue="44372" author="btl5037" type="comment" created="2020-04-24 02:01:08.0" updateauthor="btl5037" updated="2020-04-24 02:01:08.0"> <body><! CDATA Out of curiosity, has anyone tested this against open source images with the official couchdb images (not fabric-couchdb), this SaaS offering builds their own images from source.   ~jorgego  or  ~nkl199  can either of you provide the Caliper artifacts we can use to recreate this scenario, that would make it more likely that we could get to investigating this sooner as we wouldn't have to create the Caliper artifacts ourselves.  And how many queries per second were you running when you started to see the timeouts, I'd like to try doing this with our tool, but I'd need to know how many concurrent drivers I would need to recreate this.  Thanks guys!  ></body> </Action>
<Action id="69035" issue="44372" author="denyeart" type="comment" body="When you overload a peer with queries beyond the peer&apos;s capacity, the queries are going to start timing out and the proposal request will therefore return a failure. I don&apos;t think there is a bug per se that can get fixed in these scenarios. The important thing when a peer is overloaded, is that commits continue with data integrity, and that the peer behaves as expected after the load storm." created="2020-04-24 03:15:37.0" updateauthor="denyeart" updated="2020-04-24 03:15:37.0"/>
<Action id="69045" issue="44372" author="jorgego" type="comment" created="2020-04-24 19:34:50.0" updateauthor="jorgego" updated="2020-04-24 19:43:02.0"> <body><! CDATA  ~btl5037   To answer your question, I have not tested against open source images with the official couchdb images.  I am running caliper v0.2.0 locally binded to Fabric v1.4.4 and the target network is a Fabric SaaS offering (IBP) that runs Fabric v1.4.6 with the caliper benchmarks chaincode called *fixed-asset* in Node with a couchDB index set.  The network is two Orgs with one peer each on couchDB  The caliper command is:  caliper benchmark run --caliper-benchconfig benchmarks/api/fabric/couchDB/*mixed-rich-query-pagination.yaml* --caliper-networkconfig networks/fabric/fabric-v1.4.1/2org1peercouchdb_raft/api/channelcouch_fixed-asset_profile.json --caliper-workspace /Users/jorgego/Documents/CODE/caliper-benchmarks --caliper-flow-only-test --caliper-fabric-usegateway true --caliper-fabric-discovery true --caliper-fabric-gatewaylocalhost false  I have attached both *mixed-rich-query-pagination.yaml* and *mixed-rich-query-asset.js*  One thing I noticed is that the CPU utilization of the couchDB container is very high. It goes beyond the assigned 4 vcpu.  I was able to run 3-4 TPS but anything beyond that creates the timeouts.  ></body> </Action>
<Action id="69112" issue="44372" author="nkl199" type="comment" created="2020-04-29 11:18:27.0" updateauthor="nkl199" updated="2020-04-29 11:19:32.0"> <body><! CDATA On LevelDB the logs are slightly different (this is from OS images Fabric v2.1.0), obtained by running the Caliper benchmarks  https://github.com/hyperledger/caliper-benchmarks/tree/master/benchmarks/api/fabric :  Chaincode logs: {quote}{{2020-04-29T11:01:06.074Z error  c-api:contracts-spi/chaincodefromcontract.js       mychannel-d73be31e  Error: QUERY_STATE_CLOSE failed: transaction ID: d73be31e4d2f6282b0aa11fe957640ecd4ba6a0d559b3072ff75e374b46a52e6: no ledger context   2020-04-29T11:01:06.077Z error  c-api:lib/handler.js                               mychannel-d73be31e  Calling chaincode Invoke() returned error response  Error: QUERY_STATE_CLOSE failed: transaction ID: d73be31e4d2f6282b0aa11fe957640ecd4ba6a0d559b3072ff75e374b46a52e6: no ledger context      at parseResponse (/usr/local/src/node_modules/fabric-shim/lib/handler.js:716:15)      at MsgQueueHandler.handleMsgResponse (/usr/local/src/node_modules/fabric-shim/lib/handler.js:142:40)      at ClientDuplexStream.<anonymous> (/usr/local/src/node_modules/fabric-shim/lib/handler.js:298:46)      at ClientDuplexStream.emit (events.js:311:20)      at addChunk (_stream_readable.js:294:12)      at readableAddChunk (_stream_readable.js:275:11)      at ClientDuplexStream.Readable.push (_stream_readable.js:209:10)      at Object.onReceiveMessage (/usr/local/src/node_modules/grpc/src/client_interceptors.js:1297:19)      at InterceptingListener.recvMessageWithContext (/usr/local/src/node_modules/grpc/src/client_interceptors.js:607:19)      at /usr/local/src/node_modules/grpc/src/client_interceptors.js:707:14 . Sending ERROR message back to peer }}   {quote} Corresponding Peer logs: {quote}{{no ledger context  github.com/hyperledger/fabric/core/chaincode.(*Handler).isValidTxSim  /go/src/github.com/hyperledger/fabric/core/chaincode/handler.go:516  github.com/hyperledger/fabric/core/chaincode.(*Handler).HandleTransaction  /go/src/github.com/hyperledger/fabric/core/chaincode/handler.go:232  runtime.goexit  /usr/local/go/src/runtime/asm_amd64.s:1373  2020-04-29 11:02:20.306 UTC  chaincode  HandleTransaction -> ERRO b31  bdc27e09  Failed to handle QUERY_STATE_CLOSE. error: no ledger context  github.com/hyperledger/fabric/core/chaincode.(*Handler).isValidTxSim  /go/src/github.com/hyperledger/fabric/core/chaincode/handler.go:516  github.com/hyperledger/fabric/core/chaincode.(*Handler).HandleTransaction  /go/src/github.com/hyperledger/fabric/core/chaincode/handler.go:232  runtime.goexit  /usr/local/go/src/runtime/asm_amd64.s:1373  QUERY_STATE_CLOSE failed: transaction ID: bdc27e0911817363c17603aa028ef8d7e97aa0f1c5ab6dff60b132ee8067e077  github.com/hyperledger/fabric/core/chaincode.(*Handler).HandleTransaction  /go/src/github.com/hyperledger/fabric/core/chaincode/handler.go:248  runtime.goexit  /usr/local/go/src/runtime/asm_amd64.s:1373  2020-04-29 11:02:27.200 UTC  chaincode  isValidTxSim -> ERRO b32 no ledger context: mychannel 5cb2d508eca84300e9a165f7afe78e3cec5f6f8b17588a5889d1990b642735e2}} {quote}       ></body> </Action>
<Action id="69269" issue="44372" author="sykesm" type="comment" created="2020-05-18 22:00:18.0" updateauthor="sykesm" updated="2020-05-18 22:02:24.0"> <body><! CDATA Everything captured in this ticket is pointing to fallout from execution timeouts and/or query timeouts to couch.  When an application invokes chaincode, it eventually gets routed through {{Execute}} in {{ChaincodeSupport}}. That function creates a transaction for the transaction and then invokes the chaincode. While the chaincode is executing, the peer is waiting on one of three conditions:  1. Invocation completes 2. Timeout occurs 3. Chaincode terminates  When (1) happens, everyone is happy. When (2) happens, we record a metric and return a "timeout expired" error to the client. When (3) happens, we return a "chaincode stream terminated" error to the client. Regardless of which path runs, the transaction context is destroyed as the invocation that caused it to be created has completed.  Assuming the chaincode is still running when a timeout occurs, at some point one of two things will happen:  a. The chaincode completes execution. b. The chaincode attempts to use a service provided by the peer.  When (a) happens, the response (error or success) will go back to the peer. The peer, receiving the response, will attempt to find the associated transaction context to clean it up before sending the response to the endorser for its processing. Since the context was cleaned up by the timeout, the peer will log the issue and move along with no further action as the client should already have received an error.  When (b) happens, the peer will attempt to find the transaction context but won't find it. Without a transaction context, there's no way to interact with the ledger so the peer will return an error to the chaincode. This is the "no ledger context" error you're seeing.  What happens next is entirely up to the chaincode. If the chaincode handles the error appropriately, it will respond to the peer with the error, the peer won't find the associated context, and it will simply log a message. If, however, the chaincode dies because it doesn't properly handle the error, the chaincode stream will terminate causing any other transactions that were sent to the chaincode to fail. The clients waiting for these transactions to complete will fall into condition (3) and get the "chaincode stream terminated" error.  Basically, it looks like it's working as intended. Unless I'm missing something, the load is too high for the system given the available resources and architecture.  ></body> </Action>
<Action id="70762" issue="44372" author="manish-sethi" type="comment" body="Closing this one.  ~nkl199 , feel free to open again if you have any more info." created="2020-11-19 22:16:21.0" updateauthor="manish-sethi" updated="2020-11-19 22:16:21.0"/>
