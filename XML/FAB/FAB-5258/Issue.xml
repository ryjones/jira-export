<Issue id="19176" key="FAB-5258" number="5258" project="10002" reporter="jyellick" assignee="jyellick" creator="jyellick" type="10001" summary="Optimize orderer message processing flow to remove redundant checks" priority="2" resolution="10000" status="6" created="2017-07-11 17:49:21.0" updated="2018-07-20 18:54:03.0" resolutiondate="2017-11-09 20:50:44.0" votes="0" watches="9" workflowId="39414"> <description><! CDATA The current orderer works in a two pass message filtering architecture.  The initial pass is done when the client invokes {{Broadcast}} and verifies that the message might be valid once ordered, then sends to the consenter for ordering.  After ordering, the consenter re-runs the verification on the messages as a second pass. This second pass ensures that the message is still valid, even after the other in-flight messages have committed.  The only cause of a message validating at {{Broadcast}} but not validating after ordering is if the channel configuration changes.  For instance, the max message size might be reduced, a certificate might be revoked, etc.  The problem with this architecture is that it implies that in the Kafka case, all messages are processed {{n+1}} times, where {{n}} is the number of OSNs.  In the Solo case, this implies messages are processed {{2}} times (as {{n}} is fixed to {{1}}.  However, in the green path, it should only be necessary to process the message {{1}} time.  The message verification step is the primary CPU bound (as it involves hashing and checking signatures) for the orderer, so improving from {{n+1}} to {{1}} has the potential to double or more the performance of the orderer.  To achieve this change, the orderer common components must be noticeably restructured.  The {{Broadcast}} path needs to include the config sequence at which the message was validated when pushing to consenus.  Then, the consenter needs to track changes in the config sequence number, trigger the second pass revalidation only when needed.  The message validation is currently buried within filters and filters within blockcutter, so this will need to be factored out into its own message processing package.  This is also a good opportunity to fix some of the directory structure which has accumulated considerable cruft during the v1 development.  Will add architectural diagrams.  ></description> </Issue>
