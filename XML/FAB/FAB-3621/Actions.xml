<Action id="23336" issue="16240" author="mastersingh24" type="comment" body=" ~troyronda  - we&apos;ll add additional features / stories here for the relevant items.  Note - I&apos;m including the event stuff here as well since it seems applicable to the client role / access control" created="2017-05-03 14:37:44.0" updateauthor="mastersingh24" updated="2017-05-03 14:37:44.0"/>
<Action id="27873" issue="16240" author="jyellick" type="comment" created="2017-07-05 13:46:52.0" updateauthor="jyellick" updated="2017-07-05 13:46:52.0"> <body><! CDATA A quick note, for:  > 1) Request endorsements and query chaincode  This is governed by /Channel/Application/Readers and /Channel/Application/Writers  > 2) Submit transactions to the orderer  This is governed by the /Channel/Readers and /Channel/Writers  By default (2) is a superset of (1), but this is merely a default, tweaking the configuration even with the current level of code would allow independent control over each of these.  ></body> </Action>
<Action id="28656" issue="16240" author="muralisr" type="comment" body="doc https://docs.google.com/document/d/1oaR7IlpNCV6udvLhDootRtoruEvOrxByYVN4BQ___0A/edit#heading=h.ktncy1i0kquz" created="2017-07-19 13:31:19.0" updateauthor="muralisr" updated="2017-07-19 13:31:19.0"/>
<Action id="29378" issue="16240" author="muralisr" type="comment" created="2017-08-03 01:06:13.0" updateauthor="muralisr" updated="2017-08-07 19:27:05.0"> <body><! CDATA  How does this design implement requirements as stated in Description : |Request Proposal and chaincode queries|/Channel/Application/Writers|/RSCC/PROPOSE|ClientMSP1.*| |Query QSCC for blocks|/Channel/Application/Readers|/RSCC/QSCC_GETBLOCK|ClientMSP1.Admin or ClientMSP2.Admin| |Submit TXs|/Channel/Writers|/Channel/Writers|ClientMSP1.*| |access to blocks.|Hard to implement without permitting/denying other functions (need to be not part of /Channel/Application/READERS .. but this would also deny a whole bunch of other resources)|/RSCC/QSCC_GETBLOCKS|ClientMSP1.Admin or ClientMSP2.Admin| |Access only to their TXs|Not implemented, too fine grained|Not implemented currently, too fine grained|—| |Events payload (this is full Block with all data)|All who are part of local msp admin|/RSCC/EVENTBLOCK|Org1.ADMIN| |Filtered Events payload (this is events with just TXID and ChaincodeEvent ID)|Not available|/RSCC/FILTEREDEVENTBLOCK|ClientMSP1.Admin or ClientMSP2.Admin| | |access to blocks.|Hard to implement without permitting/denying other functions (need to be not part of /Channel/Application/READERS .. but this would also deny a whole bunch of other resources)|/RSCC/QSCC_GETBLOCKS|ClientMSP1.Admin or ClientMSP2.Admin| |Access only to their TXs|Not implemented, too fine grained|Not implemented currently, too fine grained|—| |Events payload (this is full Block with all data)|All who are part of local msp admin|/RSCC/EVENTBLOCK|Org1.ADMIN| |Filtered Events payload (this is events with just TXID and ChaincodeEvent ID)|Not available|/RSCC/FILTEREDEVENTBLOCK|ClientMSP1.Admin or ClientMSP2.Admin|     *Note* - that “Submit TXs” uses same policy “/Channel/WRITERS”. This is because now that we have moved /Channel/Application/\{READERS,WRITERS} to a separate (fine-grained) namespace, “/Channel/WRITERS” can be used to unambiguously reserved for “Submit TXs”.  *Note* - The current work is about making policies fine grained so we can have control on various resources. Ultimately the policies are expressed via MSP principal based primitives (Roles, OU identity). *This work does not specify how those primitives should be used.*  *Note* - The “example” column goes to the extreme of creating new “client” MSPs – just to show that can be done too.  *Note* -  we have to strike a balance between too fine-grained policies and the (current) coarse grained policies.  For example, while it might make sense to have a policy on blocks or events, it may not make sense to have policies on transactions within block or chaincode based event.  ></body> </Action>
<Action id="29399" issue="16240" author="yacovm" type="comment" created="2017-08-03 13:27:11.0" updateauthor="yacovm" updated="2017-08-03 13:27:11.0"> <body><! CDATA {quote}Access to gossip 	/Channel/Application/READERS 	/RSCC/GOSSIPCLIENT{quote}  This one needs to be left inside the config block and not in the stateDB   ></body> </Action>
<Action id="29404" issue="16240" author="muralisr" type="comment" created="2017-08-03 13:58:13.0" updateauthor="muralisr" updated="2017-08-03 13:58:13.0"> <body><! CDATA  ~yacovm  Initialization of RSCC done at the time of joining comes from the config block. But I can see that this is not really "application" resource (ie, "only valid peers can gossip") and should be treated as a regular channel configuration.  Will change appropriately.  ></body> </Action>
<Action id="29712" issue="16240" author="christopherferris" type="comment" body="This has the five votes needed." created="2017-08-11 13:41:38.0" updateauthor="christopherferris" updated="2017-08-11 13:41:38.0"/>
<Action id="30372" issue="16240" author="rickr" type="comment" created="2017-08-30 14:28:10.0" updateauthor="rickr" updated="2017-08-30 14:28:10.0"> <body><! CDATA  ~mastersingh24   ~muralisr   ~jimthematrix  * Can we get a short summary how this would impact sdk client code.  (ie protofbuf changes?, updating orderer channel blocks)    * An approximate ETA for this to be merged into 1.1 branch ?     ></body> </Action>
<Action id="30444" issue="16240" author="elli-androulaki" type="comment" created="2017-09-01 12:13:02.0" updateauthor="elli-androulaki" updated="2017-09-01 12:13:02.0"> <body><! CDATA Hi, Wouldn't this CR introduce forward incompatibility issues?   E.g., v1.0 peers who receive JoinChannel request with the RSCC enhancement, will fail no?  Should we be concerned about this?  ~muralisr ,  ~jyellick ,  ~angelo.decaro ,  ~mastersingh24 , what do you think?  ></body> </Action>
<Action id="31096" issue="16240" author="muralisr" type="comment" body=" ~elli-androulaki  I think there is already code in latest master that introduces compatibility issues with 1.0 (ie, this is not the first). In any case, &quot;rscc: disabled&quot; in core.yaml will (should) produce 1.0 behavior.  " created="2017-09-22 12:44:24.0" updateauthor="muralisr" updated="2017-09-22 12:44:24.0"/>
<Action id="31097" issue="16240" author="muralisr" type="comment" body="https://www.youtube.com/watch?v=RxsAoOlwEd8 demos this work." created="2017-09-22 12:45:15.0" updateauthor="muralisr" updated="2017-09-22 12:45:15.0"/>
<Action id="41382" issue="16240" author="denyeart" type="comment" created="2018-03-08 19:07:59.0" updateauthor="denyeart" updated="2018-03-08 19:07:59.0"> <body><! CDATA Experimental features delivered in 1.1. Will be finalized and made a production feature in 1.2 via FAB-8727.  ></body> </Action>
