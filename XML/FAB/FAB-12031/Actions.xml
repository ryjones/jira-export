<Action id="50655" issue="33830" author="denyeart" type="comment" body=" ~vdods   ~sykesm  What is the proposed action from your perspective?" created="2018-09-19 12:54:54.0" updateauthor="denyeart" updated="2018-09-19 12:54:54.0"/>
<Action id="50666" issue="33830" author="sykesm" type="comment" created="2018-09-19 14:24:31.0" updateauthor="sykesm" updated="2018-09-19 14:24:31.0"> <body><! CDATA {quote}What is the proposed action from your perspective?{quote}  We need to stop pretending we can fix or defend the process that's being used to build golang chaincode.  Create a story to extract all user linkable code out of fabric and into its own repository, document that golang chaincode should vendor its own deps, and change the golang builder to stop magically including bits of fabric.  ></body> </Action>
<Action id="50668" issue="33830" author="mastersingh24" type="comment" body="100% agree " created="2018-09-19 14:29:07.0" updateauthor="mastersingh24" updated="2018-09-19 14:29:07.0"/>
<Action id="50678" issue="33830" author="sykesm" type="comment" created="2018-09-19 15:16:23.0" updateauthor="sykesm" updated="2018-09-19 15:24:34.0"> <body><! CDATA More details:   - We have to vendor portions of golang.org/x/net because we use golang.org/protobuf/proto-gen-go as our protobuf compiler and google.golang.org/grpc as our grpc implementation - The package that is causing the issue is actually golang.org/x/net/trace. - The trace dependency is coming from google.golang.org/grpc  This is not a dependency that can be removed from fabric proper.  ></body> </Action>
<Action id="50746" issue="33830" author="vdods" type="comment" body="Deleting the vendored version of golang.org/x/net did the trick for me.  But then again I&apos;m developing an app and chaincode against fabric, not compiling fabric peer/orderer over and over." created="2018-09-19 18:53:16.0" updateauthor="vdods" updated="2018-09-19 18:53:16.0"/>
<Action id="50906" issue="33830" author="mastersingh24" type="comment" created="2018-09-21 08:36:07.0" updateauthor="mastersingh24" updated="2018-09-21 08:36:07.0"> <body><! CDATA  ~vdods  - I don't think this should happen if you explicitly vendor all dependencies with your chaincode including the shim.  Almost every modern "vendoring" tool now flattens the vendor structure such that only one copy of each package exists.  What  ~sykesm  was referring to above is the fact that the Go chaincode builder actually adds things to the GOPATH inside the builder container and that's how you end up with the issue.  BTW - that does not mean I'm saying we shouldn't do anything.  ></body> </Action>
<Action id="50909" issue="33830" author="sykesm" type="comment" created="2018-09-21 10:00:48.0" updateauthor="sykesm" updated="2018-09-21 10:00:48.0"> <body><! CDATA  ~vdods  - The paths in your message imply you're not vendoring at all tool but are working out of a workspace. As Gari suggests, vendoring the bits of fabric that you need with a tool that flattens dependencies is recommended. (That doesn't mean you won't have _different_ problems. For example, you may run into incompatible version conflicts between your code and what you vendor.) {quote}BTW - that does not mean I'm saying we shouldn't do anything. {quote} I want to second that. The issue is that we're not making it easy for people to consume the bits they need. We need to fix that; unfortunately, it's non-trivial amount of work so we have to prioritize it as development instead of as bugs and communicate it appropriately as it changes the existing model quite a bit.  ></body> </Action>
<Action id="55717" issue="33830" author="sykesm" type="comment" created="2019-01-16 15:21:12.0" updateauthor="sykesm" updated="2019-01-16 15:21:12.0"> <body><! CDATA Unfortunately, none of the withdrawal reasons really make sense.  The issue that's reported here is related to the current design and implementation of chaincode and the structure of the fabric dependencies. Those issues will be (mostly) tackled by stories related to FAB-12246.  Note that this system chaincode will likely still have issues because of the requirements and restrictions of go plugins.  ></body> </Action>
