<Action id="62991" issue="41844" author="yacovm" type="comment" created="2019-08-16 13:48:42.0" updateauthor="yacovm" updated="2019-08-16 13:48:42.0"> <body><! CDATA Why does it say:  Â  {quote} 35m2019-08-16 13:19:54.811 UTC  orderer.common.cluster  ReplicateChains -> PANI 040 0m Failed pulling system channel: failed obtaining the latest block for channel testchainid {quote} Â   ?  Are you sure this is really the name of the system channel?  Â   ></body> </Action>
<Action id="62992" issue="41844" author="hakan.eryargi" type="comment" created="2019-08-16 13:52:13.0" updateauthor="hakan.eryargi" updated="2019-08-16 13:52:13.0"> <body><! CDATA Yes, it's the name of the system channel.  Also, I've added the logs when new orderer recovers after old orderers are up again.  ></body> </Action>
<Action id="62993" issue="41844" author="yacovm" type="comment" body="I think the problem here is that your Raft orderer certificate is not in the system channel or your system channel block is not the system channel block." created="2019-08-16 13:52:35.0" updateauthor="yacovm" updated="2019-08-16 13:52:35.0"/>
<Action id="62994" issue="41844" author="yacovm" type="comment" created="2019-08-16 13:53:02.0" updateauthor="yacovm" updated="2019-08-16 13:53:02.0"> <body><! CDATA Â  {code:java}  33m2019-08-16 13:19:30.813 UTC  orderer.consensus.etcdraft  detectSelfID -> WARN 014 0m Could not find -----BEGIN CERTIFICATE----- MIICVDCCAfugAwIBAgIRAJbwjlwAZWKPKnhdxNselZ0wCgYIKoZIzj0EAwIwaDEL MAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG cmFuY2lzY28xEjAQBgNVBAoTCXNpa3Nvay50cjEYMBYGA1UEAxMPdGxzY2Euc2lr c29rLnRyMB4XDTE5MDgxNjExNDYwMFoXDTI5MDgxMzExNDYwMFowVzELMAkGA1UE BhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBGcmFuY2lz Y28xGzAZBgNVBAMTEm9yZGVyZXIwLnNpa3Nvay50cjBZMBMGByqGSM49AgEGCCqG SM49AwEHA0IABMc0+7a0ziiaAB0LGfGD5DLKYbK3T7HBxlfdc++3ufLF8VkhgX1+ vlIixlqYDoaiWEqhjHpz+qQ5jdjbzWN++VajgZYwgZMwDgYDVR0PAQH/BAQDAgWg MB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMCsG A1UdIwQkMCKAIEFnKJ9VJekxOhJkNn53wfwcujUG1wRWvQbgiTerlG+YMCcGA1Ud EQQgMB6CEm9yZGVyZXIwLnNpa3Nvay50coIIb3JkZXJlcjAwCgYIKoZIzj0EAwID RwAwRAIgFWzn0NSid7trZkvqOqb6XOPDP4gQJRqDOmkHQ3dRrhICICNpzrOQmEi1 5ihryoqthiBVo6X/yV5tdtYfR/3g7b8c -----END CERTIFICATE----- among  -----BEGIN CERTIFICATE----- MIICTDCCAfOgAwIBAgIRAMloeHUGct5TuSyYFjdHrsMwCgYIKoZIzj0EAwIwZDEL MAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG cmFuY2lzY28xEDAOBgNVBAoTB3BpdnQubmwxFjAUBgNVBAMTDXRsc2NhLnBpdnQu bmwwHhcNMTkwODE2MTEzNTAwWhcNMjkwODEzMTEzNTAwWjBVMQswCQYDVQQGEwJV UzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzEZ MBcGA1UEAxMQb3JkZXJlcjAucGl2dC5ubDBZMBMGByqGSM49AgEGCCqGSM49AwEH A0IABBp0v0nhbN1YXaC0tIqmA42c8ZAEk0HIdACE/PL8fRFNJuLPrdLeg64aNS2z MnQIePWeZ7atRzRtMarxlp1kxW2jgZQwgZEwDgYDVR0PAQH/BAQDAgWgMB0GA1Ud JQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMCsGA1UdIwQk MCKAIMNa4cNa3mVmdmcLjz2gKkvoJP4iRDqsdCIPwdnzXOeuMCUGA1UdEQQeMByC EG9yZGVyZXIwLnBpdnQubmyCCG9yZGVyZXIwMAoGCCqGSM49BAMCA0cAMEQCIARz 16Wu3b75FyUg9uP83rrFaPWvhBGkHPotybhtoVvNAiAMNAQYFGLtgSs4as5oA6is ovkjQiEVs4cq8yvwV/MapQ== -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIICbDCCAhOgAwIBAgIRAN2ru5zhn3HCT8fWvAjZkT4wCgYIKoZIzj0EAwIwdDEL MAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG cmFuY2lzY28xGDAWBgNVBAoTD2dyb2VpZmFicmllay5ubDEeMBwGA1UEAxMVdGxz Y2EuZ3JvZWlmYWJyaWVrLm5sMB4XDTE5MDgxNjExMzUwMFoXDTI5MDgxMzExMzUw MFowXTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcT DVNhbiBGcmFuY2lzY28xITAfBgNVBAMTGG9yZGVyZXIwLmdyb2VpZmFicmllay5u bDBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABCayHR8mWVgxI5qeEIH5K+NWHxjq qWhVwLabCKKB/Of/HCbhq5thv4H5mnfI5UCTVIE0USexXkUptnAjkAKYzRijgZww gZkwDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcD AjAMBgNVHRMBAf8EAjAAMCsGA1UdIwQkMCKAIDfKQV/a5ZE0kBA/jfnWI5j2lYCy cIToX2vNKu98uJoqMC0GA1UdEQQmMCSCGG9yZGVyZXIwLmdyb2VpZmFicmllay5u bIIIb3JkZXJlcjAwCgYIKoZIzj0EAwIDRwAwRAIgQbDiY44WM9TIWhJsey4HD8U0 4DBGN+Nj3pSnwU8cZx0CIC/CtywLUB1a1aWM2nTAlrCr6KAp6bLuGT+JwPuEazwy -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIICazCCAhKgAwIBAgIQIJXYm7sSvXdMANLGiyruhzAKBggqhkjOPQQDAjB0MQsw CQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy YW5jaXNjbzEYMBYGA1UEChMPZ3JvZWlmYWJyaWVrLm5sMR4wHAYDVQQDExV0bHNj YS5ncm9laWZhYnJpZWsubmwwHhcNMTkwODE2MTEzNTAwWhcNMjkwODEzMTEzNTAw WjBdMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMN U2FuIEZyYW5jaXNjbzEhMB8GA1UEAxMYb3JkZXJlcjEuZ3JvZWlmYWJyaWVrLm5s MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEyT1G3BXSctzk4mSbrB+m7+J13J/8 FIp+7a3Eh/gIBQY3qAqfr1DNRSHS+bDeWyVJmM9j4+U53d/EtqW0sZJ8kaOBnDCB mTAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMC MAwGA1UdEwEB/wQCMAAwKwYDVR0jBCQwIoAgN8pBX9rlkTSQED+N+dYjmPaVgLJw hOhfa80q73y4miowLQYDVR0RBCYwJIIYb3JkZXJlcjEuZ3JvZWlmYWJyaWVrLm5s gghvcmRlcmVyMTAKBggqhkjOPQQDAgNHADBEAiAm7qbx/5SrR8Hy6j7S1IYz5sKX crT78oeMIuNQkcSJOQIgfBtaQyz0At5DGvZHcP+RkJ7jOSRwknvGXsMW2caPQp4= -----END CERTIFICATE-----    34m2019-08-16 13:19:30.813 UTC  orderer.common.server  TrackChain -> INFO 015 0m Adding testchainid to the set of chains to track {code}  ></body> </Action>
<Action id="62995" issue="41844" author="hakan.eryargi" type="comment" created="2019-08-16 13:54:19.0" updateauthor="hakan.eryargi" updated="2019-08-16 13:54:19.0"> <body><! CDATA But see the success logs, it recovers when old orderers are up again.  PS: New orderer is in system channel but not among consenters of system channel.  ></body> </Action>
<Action id="62996" issue="41844" author="yacovm" type="comment" body="But it *should* be among the consenters of the system channel." created="2019-08-16 13:57:07.0" updateauthor="yacovm" updated="2019-08-16 13:57:07.0"/>
<Action id="62997" issue="41844" author="hakan.eryargi" type="comment" created="2019-08-16 14:00:03.0" updateauthor="hakan.eryargi" updated="2019-08-16 14:00:03.0"> <body><! CDATA But why? I want it to follow the system channel, not vote for system channel, and more importantly not become a default consenter of channels created afterwards.  Anyway, I will try same scenario but will also add new orderer to the system channel consenters.  ></body> </Action>
<Action id="62998" issue="41844" author="yacovm" type="comment" created="2019-08-16 14:06:58.0" updateauthor="yacovm" updated="2019-08-16 14:06:58.0"> <body><! CDATA Because Fabric doesn't support follower orderers. Every orderer is a consenter.   ~jyellick  - what do we do with this one?  Â   We can easily enforce crashing the orderer when its certificate isn't detected in the system channel once it finished replication via  1 .  And then people won't try things that are not supported (yet)...   1  {code:java} diff --git a/orderer/common/server/main.go b/orderer/common/server/main.go index 328bee56b..137a88444 100644 --- a/orderer/common/server/main.go +++ b/orderer/common/server/main.go @@ -320,7 +320,12 @@ func createReplicator( onBlockCommit: vr.BlockCommitted, } return &replicationInitiator{ -               registerChain:     vr.RegisterVerifier, +               registerChain:     func (chain string) { +                       if chain == systemChannelName { +                               logger.Panicf("Every orderer node should be part of the system channel") +                       } +                       vr.RegisterVerifier(chain) +               }, verifierRetriever: vr, logger:            logger, secOpts:           secOpts, {code}  ></body> </Action>
<Action id="63000" issue="41844" author="hakan.eryargi" type="comment" created="2019-08-16 14:58:13.0" updateauthor="hakan.eryargi" updated="2019-08-16 15:12:18.0"> <body><! CDATA I verified, new orderer doesnt crash when it's among consenters in system channel.  {quote} Because Fabric doesn't support follower orderers. Every orderer is a consenter. {quote} Are you sure about this? New orderer sucessfully pulls all the new blocks from system channel as in the logs  ^new_orderer_logs_pull.txt   ></body> </Action>
<Action id="63001" issue="41844" author="yacovm" type="comment" body="I&apos;m pretty sure, yes." created="2019-08-16 15:12:21.0" updateauthor="yacovm" updated="2019-08-16 15:12:21.0"/>
<Action id="63002" issue="41844" author="hakan.eryargi" type="comment" body="How is it pulling then? Unintended behavior? I like/prefer it as it is :)" created="2019-08-16 15:15:10.0" updateauthor="hakan.eryargi" updated="2019-08-16 15:15:10.0"/>
<Action id="63003" issue="41844" author="yacovm" type="comment" created="2019-08-16 15:21:49.0" updateauthor="yacovm" updated="2019-08-16 15:21:49.0"> <body><! CDATA It is an unintended side effect of you not following the rules ;)  Â   The only solution is to simply crash the orderer if it doesn't find itself in the consenters when it initializes the system channel.Â   ></body> </Action>
<Action id="63005" issue="41844" author="hakan.eryargi" type="comment" created="2019-08-16 15:35:56.0" updateauthor="hakan.eryargi" updated="2019-08-16 15:35:56.0"> <body><! CDATA Why not keep pulling as it is and fix crashing when not among consenters? Its MSP is already in system channel, so I believe it has the right to pull. Much like a peer in a channel.  Â   Maybe not now, but later this will have a strong use case in our project.  Â   Due to privacy concerns and GDPR, we have private channels between all the peer organizations. I'm checking the scenario when a channel wants to have a separate dedicated orderer.  Â   If being a consenter in system channel is enforced, this means all the channels created afterwards by default will have new orderers as consenters too, which is just the opposite of what we need. Sure, can be workaround by removing those orderers from consenter set, or using profiles with consenter sets, but that will be really inconvenient.  Â   There are ~30 Pension Providers in NL and if all of them join the network, then we are talking about ~900 channels to manage.  ></body> </Action>
<Action id="63006" issue="41844" author="yacovm" type="comment" created="2019-08-16 15:53:26.0" updateauthor="yacovm" updated="2019-08-16 15:53:26.0"> <body><! CDATA {quote}Why not keep pulling as it is and fix crashing when not among consenters? Its MSP is already in system channel, so I believe it has the right to pull. Much like a peer in a channel. {quote} Â   Because when someone else will create a channel you won't see it. You will just replicate the blocks of the system channel without consuming them and applying them.  Remember the problem you had where channel *common* was not in the file system? that was because of that.  Â  {quote}Due to privacy concerns and GDPR, we have private channels between all the peer organizations. I'm checking the scenario when a channel wants to have a separate dedicated orderer. {quote} Â   Yes, the fact you have to have a system channel isn't great, I know. Take a look at FAB-15713 . Hopefully in the future you can have orderers that don't have a system channel, but this is how it is today.  Â  {quote}There are ~30 Pension Providers in NL and if all of them join the network, then we are talking about ~900 channels to manage. {quote} I'm glad pension is a service provided by the free market and not by the government in NL, but why (or ... what) are you putting it on a Blockchain?  ></body> </Action>
<Action id="63007" issue="41844" author="hakan.eryargi" type="comment" created="2019-08-16 16:39:41.0" updateauthor="hakan.eryargi" updated="2019-08-16 16:39:41.0"> <body><! CDATA {quote}Because when someone else will create a channel you won't see it. {quote} This is perfectly fine and also the preferred case for our scenario actually ;) {quote}Take a look at FAB-15713 . Hopefully in the future you can have orderers that don't have a system channel, but this is how it is today. {quote} No worries, we can live with it for now. As mentioned this is a future requirement. {quote}I'm glad pension is a service provided by the free market and not by the government in NL, but why (or ... what) are you putting it on a Blockchain? {quote} Thanks for asking :)  There are multiple actors in the pension ecosystem in NL, pension providers, employers, identity providers and of course employees. Any interaction with this system typically results in relevant actors communicating each other in conventional ways, regular post, and taking lots of time.  Eventual goal is, to transfer all the pension infrastructure (PI) to blockchain. Calculations (business logic) are done by chaincodes and interactions are signed and stored in blockchain. So, there are no assets, only the interactions.  ATM, we are implementing the pilot part: PIVT, PI Value Transfer. When an employee changes his employer and the new employer has agreement with a different pension provider,Â employee has the option to transfer his funds to the newÂ pension provider, hence the term "value transfer".  Â   ></body> </Action>
<Action id="63008" issue="41844" author="yacovm" type="comment" body="I&apos;m marking this Jira as a &quot;works as expected&quot;... as this is by design." created="2019-08-16 16:44:10.0" updateauthor="yacovm" updated="2019-08-16 16:44:10.0"/>
<Action id="63009" issue="41844" author="hakan.eryargi" type="comment" body="Fine for me!" created="2019-08-16 16:45:41.0" updateauthor="hakan.eryargi" updated="2019-08-16 16:45:41.0"/>
<Action id="63010" issue="41844" author="yacovm" type="comment" created="2019-08-16 16:55:59.0" updateauthor="yacovm" updated="2019-08-16 16:55:59.0"> <body><! CDATA {quote}This is perfectly fine and also the preferred case for our scenario actually ;) {quote} Â   You can just have smaller groups of orderers with smaller subsets of system channels though.  ></body> </Action>
<Action id="63011" issue="41844" author="hakan.eryargi" type="comment" body="Multiple system channels possible? How to configure it?" created="2019-08-16 17:06:36.0" updateauthor="hakan.eryargi" updated="2019-08-16 17:06:36.0"/>
<Action id="63012" issue="41844" author="yacovm" type="comment" created="2019-08-16 17:14:37.0" updateauthor="yacovm" updated="2019-08-16 17:14:37.0"> <body><! CDATA What I mean is, let's assume you have 30 organizations, 1 for each pension provider.  Â   You can have 6 orderer clusters, each cluster with 5 orderers (1 from each organization).  So total 6 system channels, but 30 channels in total divided among the 6 clusters.  Â   You can then have any peer of the 30 organizations, join any combination of the application channels.  Â   The only caveat is that you must not have channels with the same name among the 6 clusters.  ></body> </Action>
<Action id="63013" issue="41844" author="hakan.eryargi" type="comment" body="Should I need 6 different genesis blocks to launch this?" created="2019-08-16 17:23:39.0" updateauthor="hakan.eryargi" updated="2019-08-16 17:23:39.0"/>
<Action id="63014" issue="41844" author="yacovm" type="comment" body="yes. obviously. with entirely different sets of consenters." created="2019-08-16 17:28:09.0" updateauthor="yacovm" updated="2019-08-16 17:28:09.0"/>
<Action id="63015" issue="41844" author="hakan.eryargi" type="comment" created="2019-08-16 17:35:50.0" updateauthor="hakan.eryargi" updated="2019-08-16 17:35:50.0"> <body><! CDATA I see, thanks!  Btw, why 5 orderers per cluster, arbitrary number? I guess large number of orderers per cluster will impact performance, but possibly not in 5-10 range, right?  ></body> </Action>
<Action id="63016" issue="41844" author="yacovm" type="comment" body="5 is the lowest number to achieve fault tolerance of 2 nodes" created="2019-08-16 17:43:03.0" updateauthor="yacovm" updated="2019-08-16 17:43:03.0"/>
<Action id="63017" issue="41844" author="hakan.eryargi" type="comment" body="I see. Initially we will provide this as a managed service, that is, we will run all the peer/orderer nodes. So this practically means, either all the nodes will be up or all down ;)" created="2019-08-16 17:48:59.0" updateauthor="hakan.eryargi" updated="2019-08-16 17:48:59.0"/>
<Action id="63019" issue="41844" author="jyellick" type="comment" body="In the future, we do have plans to allow operation without a system channel, to simply explicitly join orderers to channels.Â  However, this is an unplanned feature with no scheduled delivery date.Â  I expect this will ultimately be the best answer to use cases like this.Â  For now,  ~yacovm  provides the best option available." created="2019-08-16 20:07:36.0" updateauthor="jyellick" updated="2019-08-16 20:07:36.0"/>
<Action id="63021" issue="41844" author="hakan.eryargi" type="comment" created="2019-08-17 02:00:02.0" updateauthor="hakan.eryargi" updated="2019-08-17 02:00:02.0"> <body><! CDATA {quote}However, this is an unplanned feature with no scheduled delivery date {quote}  ~jyellick , in this case I will suggest re-open this ticket and allow orderers just to be followers in the system channel.  The side effect  ~yacovm  mentioned, _"new orderers wont see new channels created afterwards"_ *is exactly what we need.*Â   What Yacov suggested, different orderer clusters, provides no help for our case. Let me re-phrase our case: * We are the service provider, running all the peer nodes and orderer nodes initially * We have one public and several 2-org private channels between for each combination of some actors (+ more but not relevant) * These private channels exist, because it's not allowed to be aware of something happened between actor X and actor Y * At some point, actor X decides, PIVT as an orderer, has access to data of actor X's actions with other actors and this is not acceptable. And he requests to run his own orderer * We create an orderer org for actor X, assign it to relevant channels, and remove default orderers from those channels * Actor X is happy, as its private data is not accessible by other orderers * PIVT will be also happy if that new orderer orders blocks for actor X related channels, let it do what it wants in its *isolated world,* dont mess with system channel and other channnels created afterwards * But, this new orderer is forced to be a consenter in the system channel, which will make it a default consenter of all the private channels created afterwards. Which is the exact opposite of what we intended.  So again what is wrong if some orderer is part of of system channel but not a conserter?  Â   Â   Â   Â   ></body> </Action>
<Action id="63032" issue="41844" author="guoger" type="comment" created="2019-08-18 14:29:21.0" updateauthor="guoger" updated="2019-08-18 14:29:58.0"> <body><! CDATA bq. But, this new orderer is forced to be a consenter in the system channel, which will make it a default consenter of all the private channels created afterwards. Which is the exact opposite of what we intended.  You actually *can* create new channels with a subset of consenters in sys channel, although not explicitly documented yet (see FAB-16306). Would that solve your problem above?  bq. So again what is wrong if some orderer is part of of system channel but not a conserter?  I don't exactly understand the difference between *being part of sys channel* and *being a consenter in sys channel*... could you be more explicit?  ></body> </Action>
<Action id="63033" issue="41844" author="yacovm" type="comment" body="I think he wants orderers to be observers/learners, meaning - to only get block updates but never take part in consensus." created="2019-08-18 15:11:10.0" updateauthor="yacovm" updated="2019-08-18 15:11:10.0"/>
<Action id="63034" issue="41844" author="guoger" type="comment" created="2019-08-18 15:18:07.0" updateauthor="guoger" updated="2019-08-18 15:18:07.0"> <body><! CDATA {quote}I think he wants orderers to be observers/learners, meaning - to only get block updates but never take part in consensus. {quote} hmmm, ok, in this case we could consider leveraging learner from etcd/raft to improve performance.... Although I thought his main concern was data privacy?  ></body> </Action>
<Action id="63035" issue="41844" author="yacovm" type="comment" body="His concern is indeed data privacy but he wants something else to be done, I&apos;m not really sure why." created="2019-08-18 15:22:57.0" updateauthor="yacovm" updated="2019-08-18 15:22:57.0"/>
<Action id="63036" issue="41844" author="hakan.eryargi" type="comment" created="2019-08-18 16:32:31.0" updateauthor="hakan.eryargi" updated="2019-08-18 16:32:31.0"> <body><! CDATA {quote}I don't exactly understand the difference betweenÂ *being part of sys channel*Â andÂ *being a consenter in sys channel*... could you be more explicit? {quote} Being part of sys channel means, adding MSP of that org to system channel. We cannot do anything else without doing this first. After that, we can add the org to other channells to. {quote}I think he wants orderers to be observers/learners, meaning - to only get block updates but never take part in consensus. {quote} Right, I dont actually even care if it gets system block updates, but wont hurt for sure. {quote}You actually can create new channels with a subset of consenters in sys channel, although not explicitly documented yet (see FAB-16306). Would that solve your problem above? {quote} Right, this is possible but not much convenient. It will be difficult to maintain large number of channels in that case.  ></body> </Action>
<Action id="63037" issue="41844" author="guoger" type="comment" body=" ~hakan.eryargi  addingÂ an Org to channel is orthogonal to adding an orderer and we have a tutorial  here|https://hyperledger-fabric.readthedocs.io/en/latest/channel_update_tutorial.html ." created="2019-08-19 01:56:09.0" updateauthor="guoger" updated="2019-08-19 01:56:09.0"/>
<Action id="63044" issue="41844" author="hakan.eryargi" type="comment" created="2019-08-19 09:14:30.0" updateauthor="hakan.eryargi" updated="2019-08-19 09:14:30.0"> <body><! CDATA Org in my above comment refers to orderer org, not peer org.    ></body> </Action>
<Action id="63170" issue="41844" author="guoger" type="comment" body=" ~hakan.eryargi  why is that different? it&apos;s basically adding and org to channel, and you can have peer or orderer or both in that org." created="2019-08-22 08:14:21.0" updateauthor="guoger" updated="2019-08-22 08:14:21.0"/>
<Action id="63182" issue="41844" author="hakan.eryargi" type="comment" created="2019-08-22 11:42:15.0" updateauthor="hakan.eryargi" updated="2019-08-22 11:42:15.0"> <body><! CDATA  ~guoger  well, the procedure for adding an orderer org and a peer org to a regular channel is similar but different.  But, for adding an orderer org, there is a prerequisite, you need to first add orderer orgâs MSP to the system channel.  Then we come to our problem, itâs fine to add orderer orgâs MSP to the system channel, but I dont want to add it as a consenter to the system channel.  ></body> </Action>
