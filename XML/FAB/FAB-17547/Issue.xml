<Issue id="44431" key="FAB-17547" number="17547" project="10002" reporter="sykesm" assignee="dereckluo" creator="sykesm" type="10002" summary="Cache the result of loading configuration profile during unit tests" priority="3" resolution="10000" status="6" created="2020-02-26 13:55:42.0" updated="2020-03-03 18:07:20.0" resolutiondate="2020-03-03 15:00:20.0" votes="0" watches="2" workflowId="58339" archived="N"> <description><! CDATA While looking into why unit tests were taking so long, I opened FAB-17508. That issue describes the inefficiencies involved in supporting configuration structures that can be overridden with viper and that may require additional processing with the {{mapstructure}} package.  Given the current requirements, I don't see any easy, non-invasive way to improve that implementation...  Since we now know {{EnhancedExactUnmarshal}} is expensive (_incredibly_ expensive in tests that are run with the race detector), we need to do a little extra work to reduce the frequency with which we call it.  The task is simple:  Where possible, cache the results of {{EnhancedExactUnmarshal}}. When multiple calls are made to retrieve the same profile from the same configuration path, return a clone of the cached object.  A (poor, over-engineered) example can be seen here:   https://github.com/hyperledger/fabric/pull/732/files  In the case of the change above, there's only profile that's accessed so the map really wasn't necessary. The round-trip marshaling that is done allows the test cases to modify what comes back.  Using that approach, if we are willing to accept slightly higher risk, it may be possible to add a production cache directly to the direct consumers (orderer/common/localconfig, internal/configtxgen/genesisconfig). If we go down this path, the cache key should be the path of the configuration file that was used.  ></description> </Issue>
