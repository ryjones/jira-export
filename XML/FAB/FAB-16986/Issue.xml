<Issue id="43062" key="FAB-16986" number="16986" project="10002" reporter="scottz" assignee="suryalnvs" creator="scottz" type="10002" summary="Upgrade v1.4 to v2.0" priority="2" resolution="10000" status="6" created="2019-10-31 16:00:56.0" updated="2020-05-26 06:07:38.0" resolutiondate="2020-03-27 09:26:15.0" votes="0" watches="5" workflowId="56168"> <description><! CDATA This task is for creating all tooling and scripts necessary to automate the required upgrade scenarios for 1.4 to 2.0. Separate TestTasks are used for the completion of the upgrade test scenarios themselves.     Perform all steps to do a live network (in-service) upgrade from 1.4.4 to 2.0. For more details, refer also to file fabric-test/tools/operator/scripts/upgradeNetwork.sh, and look for command "operator -a upgradeNetwork". # Launch a network with CA, peers, and raft orderers. (Repeat test with kafka.) # Run transactions using different chaincode languages. # Stop one orderer at a time, while network remains fully functional, for a live network upgrade. _Or stop all at once during a maintenance window for an Out-Of-Service network upgrade._ Backup ledger if desired. Adjust appropriate config parameters for the orderer. Upgrade the software images/binaries to v2.0. Restart the orderer(s). # Stop peer(s); do NOT delete the v14 cc container and cc image yet. Execute "peer node upgrade-dbs" (using new v20 binaries) on ledger file system for each peer. Backup ledger if desired. Adjust appropriate config parameters for the peer. Upgrade the software images/binaries to v2.0. Launch peer(s) again with v20; the next TX will trigger recreation of cc container which will still be the v14-shim-compatible version. _(See notes below for test step variations.)_ # Update the V2_0 capabilities with a channel config update transaction. # Note chaincode TXs still use the existing v1.4 version of chaincode. Verify the proposals and transactions that were successful in 1.4 can still run successfully. # Update the policies for consortium, organizations, app policies, ACLs - on orderersystemchannel and all applic channels. (Mostly required for new lifecycle actions.) _Note: If wish to continue with old lifecycle (leaving application capabilities at v1.4.2), then skip this step of updating policies._ # Upgrade all chaincodes in all channels to a version compatible with v20 shim (new lifecycle, commit) with a channel config update. When commit, a v20 cc container should be automatically launched, using new v20 *ccenv*. Verify: {noformat}     "peer chaincode list"  ---  shows v14     "peer lifecycle chaincode querycommitted"  ---  shows v20   {noformat}  # Verify the config updates, proposals and transactions using new functionalities (such as new _lifecycle) are successful. # Cleanup: delete the old v14-compatible versions of cc container and cc image on each peer (which are no longer used).     *Related test variations for Step 4:* * *Upgrade Enforcement*:  Don't upgrade a peer or orderer with v20 before submit the channel config update to move to v20; then non-upgraded peers or orderers should panic. * *Upgrade-DB Enforcement:*  Don't run "peer node upgrade-dbs" before upgrade the peer; then peer should panic. (See comments section.)     ></description> </Issue>
