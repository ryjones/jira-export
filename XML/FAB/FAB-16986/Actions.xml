<Action id="66566" issue="43062" author="scottz" type="comment" created="2020-01-09 19:04:22.0" updateauthor="scottz" updated="2020-01-09 19:04:22.0"> <body><! CDATA Note: Although we did not create a separate testtask and automate it, Surya did manually test successfully for *Upgrade-DB Enforcement, i.e.:*   Don't run "peer node upgrade-dbs" in step 4, before upgrade the peer; then peer should panic when upgrade. \It should recover after completing that command along with the rest of the upgrade steps correctly, as documented.  Also, there is test coverage for this in the fabric repository in ledger UT:   https://github.com/hyperledger/fabric/blob/master/core/ledger/kvledger/tests/v1x_test.go#L113   This test step "peer node upgrade-dbs" is required when upgrading to 2.0, so this is a useful and effective test whenever upgrading across the 2.0 boundary; that is, for upgrades from 1.4.x to 2.x.  ></body> </Action>
<Action id="69328" issue="43062" author="JIRAUSER20198" type="comment" created="2020-05-26 06:05:37.0" updateauthor="JIRAUSER20198" updated="2020-05-26 06:07:38.0"> <body><! CDATA I am following the same steps but when i am trying to update the V2_0 capabilities with a channel config update transaction(STEP 5). I am facing this error:-     _Error: got unexpected status: BAD_REQUEST – error applying config update to existing channel 'mychannel': error authorizing update: error validating DeltaSet: policy for  Value  /Channel/Capabilities not satisfied: implicit policy evaluation failed - 0 sub-policies were satisfied, but this policy requires 2 of the 'Admins' sub-policies to be satisfied_     What can be the reason?I already checked configtx.yaml. It is correct. I have also attached it below.     Organizations: - &OrdererOrg Name: OrdererMSP ID: OrdererMSP MSPDir: crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp Policies: Readers: Type: Signature Rule: "OR('OrdererMSP.member')" Writers: Type: Signature Rule: "OR('OrdererMSP.member')" Admins: Type: Signature Rule: "OR('OrdererMSP.admin')"  - &Org2 Name: Org2MSP ID: Org2MSP MSPDir: crypto-config/peerOrganizations/org2.example.com/msp Policies: Readers: Type: Signature Rule: "OR('Org2MSP.member')" Writers: Type: Signature Rule: "OR('Org2MSP.member')" Admins: Type: Signature Rule: "OR('Org2MSP.admin')" AnchorPeers: - Host: peer0.org2.example.com Port: 7051  - &Org1 Name: Org1MSP ID: Org1MSP MSPDir: crypto-config/peerOrganizations/org1.example.com/msp Policies: Readers: Type: Signature Rule: "OR('Org1MSP.member')" Writers: Type: Signature Rule: "OR('Org1MSP.member')" Admins: Type: Signature Rule: "OR('Org1MSP.admin')" AnchorPeers: - Host: peer0.org1.example.com Port: 7051  Capabilities:  Application: &ApplicationDefaults Organizations: Policies: Readers: Type: ImplicitMeta Rule: "ANY Readers" Writers: Type: ImplicitMeta Rule: "ANY Writers" Admins: Type: ImplicitMeta Rule: "MAJORITY Admins"  Orderer: &OrdererDefaults OrdererType: solo Addresses: - orderer.example.com:7050 BatchTimeout: 2s BatchSize: MaxMessageCount: 200 AbsoluteMaxBytes: 98 MB PreferredMaxBytes: 512 KB Kafka:  Brokers: Organizations: Policies: Readers: Type: ImplicitMeta Rule: "ANY Readers" Writers: Type: ImplicitMeta Rule: "ANY Writers" Admins: Type: ImplicitMeta Rule: "MAJORITY Admins"  # BlockValidation specifies what signatures must be included in the block # from the orderer for the peer to validate it. BlockValidation: Type: ImplicitMeta Rule: "ANY Writers"  Channel: &ChannelDefaults # Policies defines the set of policies at this level of the config tree # For Channel policies, their canonical path is # /Channel/<PolicyName> Policies: # Who may invoke the 'Deliver' API Readers: Type: ImplicitMeta Rule: "ANY Readers" # Who may invoke the 'Broadcast' API Writers: Type: ImplicitMeta Rule: "ANY Writers" # By default, who may modify elements at this config level Admins: Type: ImplicitMeta Rule: "MAJORITY Admins" # Capabilities: <<: *ChannelCapabilities  Profiles: TwoOrgsOrdererGenesis: <<: *ChannelDefaults Capabilities: <<: *ChannelCapabilities Orderer: <<: *OrdererDefaults Organizations: - *OrdererOrg Capabilities: <<: *OrdererCapabilities Consortiums: SampleConsortium: Organizations:  - *Org2 - *Org1  TwoOrgsChannel: Consortium: SampleConsortium Application: <<: *ApplicationDefaults Organizations: - *Org2 - *Org1  Capabilities: <<: *ApplicationCapabilities  ></body> </Action>
