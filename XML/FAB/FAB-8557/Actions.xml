<Action id="40948" issue="28063" author="manish-sethi" type="comment" created="2018-02-27 17:23:42.0" updateauthor="manish-sethi" updated="2018-02-27 17:24:28.0"> <body><! CDATA I confirmed in the code - the current behavior of the API `{color:#000000}GetTransactionByID` would return the latest transaction with the txid. This would mean that the transaction which is marked as invalid with the code `{color}{color:#000000}TxValidationCode_DUPLICATE_TXID`.{color}  {color:#000000}Not sure what option of the following makes sense in this scenario {color}  {color:#000000}1) Keep the current behavior{color}  {color:#000000}2) Return the first transaction with the given `txid` (could be valid or invalid for some other reason){color}  {color:#000000}3) {color}Return all the transactions with the given `txid`.  I personally would favor the third option because, this API returns the invalid transactions as well otherwise.  ></body> </Action>
<Action id="40956" issue="28063" author="kchristidis" type="comment" body="In for the third option as well. I think  ~elli-androulaki  is on the same boat." created="2018-02-27 20:30:20.0" updateauthor="kchristidis" updated="2018-02-27 20:30:20.0"/>
<Action id="40962" issue="28063" author="manish-sethi" type="comment" body=" ~kchristidis  - only concern with the third option I have is that it would change the API for the function `{color:#000000}GetTransactionByID{color}` so that it returns an array now - so, it may have an impact on clients/SDKs. Better to take opinions of  ~rickr  and  ~mastersingh24 . Please feel free to tag other folks that may think could have an impact" created="2018-02-27 21:29:37.0" updateauthor="manish-sethi" updated="2018-02-27 21:29:37.0"/>
<Action id="40972" issue="28063" author="rickr" type="comment" body="Currentl would we just pick one at random now ?  I would hope we would pick the valid one.  Hopefully there would only be one of those.  If we want more (ALL) to come back we should now have a *new API* something like  _{color:#000000}GetAllTransactionsByID{color}_" created="2018-02-27 22:28:17.0" updateauthor="rickr" updated="2018-02-27 22:29:37.0"/>
<Action id="40977" issue="28063" author="denyeart" type="comment" created="2018-02-27 23:34:43.0" updateauthor="denyeart" updated="2018-02-27 23:34:43.0"> <body><! CDATA I think we must fix the existing API, and should also add a new API, as follows:  GetTransactionById - Fix it to return the first transaction (since that is the only one that could potentially be valid).  GetTransactionsById - New API to return all the transactions for the given txid.  ></body> </Action>
<Action id="40978" issue="28063" author="denyeart" type="comment" body="Have we ruled out having ordering service filter out the dups before they get into blocks?" created="2018-02-27 23:36:16.0" updateauthor="denyeart" updated="2018-02-27 23:36:16.0"/>
<Action id="40980" issue="28063" author="rickr" type="comment" body="I think this is about what I suggested.  Only for me GetTransactionById and GetTransactionsById are too visually close for my liking :)" created="2018-02-27 23:54:36.0" updateauthor="rickr" updated="2018-02-27 23:54:36.0"/>
<Action id="40982" issue="28063" author="kchristidis" type="comment" created="2018-02-28 01:36:20.0" updateauthor="kchristidis" updated="2018-02-28 02:56:55.0"> <body><! CDATA {quote}Have we ruled out having ordering service filter out the dups before they get into blocks?{quote}  Consider the case where txid {{foo}} is submitted to OSN1 and during the same round (i.e. before a block is cut containing txid {{foo}} and thus updating the list of txid's on the orderers), the same txid is submitted to OSN2.  OSN2 has no way of knowing that OSN1 saw a txid of {{foo}} already, because this transaction hasn't been communicated in a voting round (think Raft or BFT). And the leader now has to deal with two identical txids for the same block. Which one do they go for?  Also: presumably the submitter to OSN1 got an ACK upon submitting {{foo}}. Same for the submitter to OSN2. If we drop, as you suggest, only one of them sees their transaction in the ledger. This may be fair game for the BFT ordering service where dropping transactions is par for the course, but in the CFT mode (think Raft) it is not.  So having the ordering service do filtering of duplicate transactions and not letting them in is tricky because it messes up your guarantees.  ></body> </Action>
<Action id="43846" issue="28063" author="kchristidis" type="comment" created="2018-05-04 15:38:20.0" updateauthor="kchristidis" updated="2018-05-04 15:38:20.0"> <body><! CDATA Seeing how the Priority of this one has been elevated —  What is the approach that we'll be implementing?  ></body> </Action>
<Action id="44205" issue="28063" author="denyeart" type="comment" body="The v1.2 fix would be to fix GetTransactionById to return the first transaction (since that is the only one that could potentially be valid).  So the fix will actually be on the commit side where the valid/invalid index is built, to not override prior tx status." created="2018-05-10 16:09:18.0" updateauthor="denyeart" updated="2018-05-10 16:09:33.0"/>
<Action id="44206" issue="28063" author="minollo" type="comment" body="Isn&apos;t that going to be extremely confusing for an app? Say the app submits a txn with a txnid overlapping a previously (successfully) committed one; then it calls GetTransactionById() and it gets a response indicating that the txn was committed as valid... that seems to be just wrong." created="2018-05-10 16:13:17.0" updateauthor="minollo" updated="2018-05-10 16:13:17.0"/>
<Action id="44223" issue="28063" author="denyeart" type="comment" created="2018-05-10 22:13:45.0" updateauthor="denyeart" updated="2018-05-10 22:13:45.0"> <body><! CDATA Right, that's why I say we need both a fix for the immediate issue, and a new API to provide the full clarity: {quote}I think we must fix the existing API, and should also add a new API, as follows:  GetTransactionById - Fix it to return the first transaction (since that is the only one that could potentially be valid).  GetTransactionsById - New API to return all the transactions for the given txid.{quote}  ></body> </Action>
<Action id="44226" issue="28063" author="minollo" type="comment" body="I keep thinking that the suggested new behavior of GetTransactionById (singular) would be just plain wrong, and not any better than the current one. Either it should just be impossible to have multiple transactions sharing the same txnid (which, again, as a user is what I would expect); or, if we don&apos;t want to go there, then I would probably expect GetTransactionById (singular) to return an error if multiple transactions share that same txnId. Anything else is just going to cause confusion and unexpected behaviors, IMHO." created="2018-05-10 23:42:00.0" updateauthor="minollo" updated="2018-05-10 23:42:00.0"/>
<Action id="44232" issue="28063" author="denyeart" type="comment" created="2018-05-11 10:21:57.0" updateauthor="denyeart" updated="2018-05-11 10:21:57.0"> <body><! CDATA The first time we see a txid and it gets marked valid is the 'legitimate' transaction.  A later 'illegitimate' transaction should not usurp the valid status of the original txid.  GetTransactionById should return the original 'legitimate' transaction.  If you ask for GetTransactionById today and get one response, and then ask for GetTransactionById tomorrow and get a different response (different status or error), that is a broken scenario that is being fixed here.  Furthermore, if a state update has been applied, the transaction that changed it will be fovever marked in the history for the key.  Again, we wouldn't want GetTransactionById to return a different result than the history of a key.  History revision shall not be tolerated.  GetTransaction*s*ById will disambiguate the results for clients.  ></body> </Action>
<Action id="45726" issue="28063" author="manish-sethi" type="comment" body="https://gerrit.hyperledger.org/r/#/c/22887/" created="2018-06-08 16:30:34.0" updateauthor="manish-sethi" updated="2018-06-08 16:30:34.0"/>
<Action id="46034" issue="28063" author="denyeart" type="comment" created="2018-06-17 14:13:34.0" updateauthor="denyeart" updated="2018-06-17 14:13:34.0"> <body><! CDATA Fix for GetTransactionById merged in v1.2 and will include release notes in v1.2.  FAB-10680 opened to add GetTransactionsById in the future.  ></body> </Action>
