<Action id="29454" issue="19496" author="rameshthoomu" type="comment" body=" ~ChristopherFerris  How are we publishing this now? Could you please give me some references to current godoc publish process." created="2017-08-04 14:01:18.0" updateauthor="rameshthoomu" updated="2017-08-04 14:01:18.0"/>
<Action id="30572" issue="19496" author="jtclark" type="comment" created="2017-09-06 16:59:14.0" updateauthor="jtclark" updated="2017-09-06 16:59:14.0"> <body><! CDATA Taking this one up from  ~rameshthoomu .   ~ChristopherFerris : As asked, can you confirm how we are publishing docs now?  ></body> </Action>
<Action id="30583" issue="19496" author="christopherferris" type="comment" created="2017-09-06 21:19:34.0" updateauthor="christopherferris" updated="2017-09-06 21:19:34.0"> <body><! CDATA AFAIK, the docs are here:  https://godoc.org/github.com/hyperledger/fabric    The challenge is versioning them. Go seems to think that versions are not important;-) j/k.  I believe that the link above is just a reflection of the github repository.   What we should do is publish version-specific godocs (1.0.*, 1.1.* etc). So, we should leverage godoc to generate the output and host on nexus, I think, and make this part of the release process.  ></body> </Action>
<Action id="32542" issue="19496" author="jtclark" type="comment" created="2017-10-17 01:57:15.0" updateauthor="jtclark" updated="2017-10-17 01:57:15.0"> <body><! CDATA Attn:  ~ChristopherFerris ,  ~mastersingh24 ,  ~odowdaibm   After some research, I've found e a couple of tool options that we could use to generate the docs:  1-  godoc|https://godoc.org/golang.org/x/tools/cmd/godoc  - This option we already know. With godocs, we can use it to generate the documentation, but the rendered HTML is 'style-less', void of CSS. I've tested this locally, and the rendered HTML is plain old HTML. We would have to invest in creating the CSS to accompany the rendered HTML, but it can be done.  2-  godocdown|https://github.com/robertkrimen/godocdown  - This tool was discovered by  ~mastersingh24 , and it can be used to generate Markdown text. We can use this to generate the Markdown, and add potentially add this content to readthedocs.  With either option, I'm thinking that the process would work as follows:  1) Create a Jenkins job that is responsible for auto-generating the docs, by subscribing to the release branch(es) of each golang project. 2) Example: With the fabric project, there will eventually be a release branch tagged as 1.2. When the Jenkins job runs, it fetches the 1.2 branch of fabric, and begin to generate the documentation. 3) The docs are tagged with the same release number, and published to nexus, readthedocs, or some other repo of our choosing.  This is the approach I was going for, but I'm open to hearing other approaches that may work better. Please add your commentary, as I'd like to make a decision on which way we should go about this before proceeding.  ></body> </Action>
<Action id="32925" issue="19496" author="christopherferris" type="comment" created="2017-10-20 12:38:24.0" updateauthor="christopherferris" updated="2017-10-20 12:38:24.0"> <body><! CDATA markdown would need to be translated to restructured text (rst) but there's a tool for that. The thing is that the source for the RTD build is github repo. We don't want to (I don't think) add a bunch of generated docs to our GH repo (and Gerrit).   Why can't we just generate the godoc (never mind the format, go devs are used to seeing standard godoc format) for a release, store that in Nexus and link to it from the docs. Seems simplest approach.  ></body> </Action>
<Action id="40780" issue="19496" author="jtclark" type="comment" created="2018-02-26 11:18:20.0" updateauthor="jtclark" updated="2018-02-26 11:18:20.0"> <body><! CDATA *Status Update*  This task has been idle for quite some time. Placing this into 'IN PROGRESS'.  Next thing to do is to create a new Jenkins job that generates the documentation using godocs.  Need to find out from  ~rameshthoomu  how to publish the docs to Nexus.  ></body> </Action>
<Action id="67085" issue="19496" author="sykesm" type="comment" body="Stale" created="2020-01-22 21:56:25.0" updateauthor="sykesm" updated="2020-01-22 21:56:25.0"/>
