<Action id="50066" issue="33563" author="ales" type="comment" body="Thanks Matt - it&apos;s a deadlock indeed - will push a fix shortly and paste a longer explanation of the problem and the fix." created="2018-09-07 09:36:35.0" updateauthor="ales" updated="2018-09-07 09:36:35.0"/>
<Action id="50067" issue="33563" author="ales" type="comment" created="2018-09-07 10:41:32.0" updateauthor="ales" updated="2018-09-07 10:41:32.0"> <body><! CDATA Matthias and I did a root cause analysis, here's the result: the stack traces below  {noformat} goroutine 1053  semacquire, 19 minutes : sync.runtime_Semacquire(0xc420014630) 	/opt/go/src/runtime/sema.go:56 +0x39 sync.(*RWMutex).Lock(0xc420014628) 	/opt/go/src/sync/rwmutex.go:98 +0x6e github.com/hyperledger/fabric/core/common/validation/statebased.(*validationContext).getOrCreateDependencyByTxnum(0xc420014628, 0x0, 0x0) 	/opt/gopath/src/github.com/hyperledger/fabric/core/common/validation/statebased/vpmanagerimpl.go:166 +0xd5 github.com/hyperledger/fabric/core/common/validation/statebased.(*KeyLevelValidationParameterManagerImpl).SetTxValidationResult(0xc420014600, 0xe2436d, 0x2, 0x1, 0x0, 0x0, 0x0) 	/opt/gopath/src/github.com/hyperledger/fabric/core/common/validation/statebased/vpmanagerimpl.go:313 +0x61 github.com/hyperledger/fabric/core/common/validation/statebased.TestPvtDependencyConflict.func2() 	/opt/gopath/src/github.com/hyperledger/fabric/core/common/validation/statebased/vpmanager_test.go:396 +0x56 github.com/hyperledger/fabric/vendor/github.com/stretchr/testify/assert.didPanic.func1(0xc420820ea8, 0xc420820ea7, 0xc420764d80) 	/opt/gopath/src/github.com/hyperledger/fabric/vendor/github.com/stretchr/testify/assert/assertions.go:791 +0x57 github.com/hyperledger/fabric/vendor/github.com/stretchr/testify/assert.didPanic(0xc420764d80, 0xc42057dc80, 0xc4200120b8, 0x75a510) 	/opt/gopath/src/github.com/hyperledger/fabric/vendor/github.com/stretchr/testify/assert/assertions.go:793 +0x4c github.com/hyperledger/fabric/vendor/github.com/stretchr/testify/assert.NotPanics(0xe9e8e0, 0xc4200e90e0, 0xc420764d80, 0xc420820f78, 0x2, 0x2, 0x1) 	/opt/gopath/src/github.com/hyperledger/fabric/vendor/github.com/stretchr/testify/assert/assertions.go:833 +0x32 github.com/hyperledger/fabric/core/common/validation/statebased.runFunctions.func1(0xc4200e90e0, 0xc420764da0, 0x3, 0x3, 0x1, 0x5b9191d9, 0xc420012180) 	/opt/gopath/src/github.com/hyperledger/fabric/core/common/validation/statebased/vpmanager_test.go:140 +0xda created by github.com/hyperledger/fabric/core/common/validation/statebased.runFunctions 	/opt/gopath/src/github.com/hyperledger/fabric/core/common/validation/statebased/vpmanager_test.go:139 +0x177  goroutine 1052  semacquire, 19 minutes : sync.runtime_notifyListWait(0xc420319990, 0xc400000000) 	/opt/go/src/runtime/sema.go:510 +0x10b sync.(*Cond).Wait(0xc420319980) 	/opt/go/src/sync/cond.go:56 +0x80 github.com/hyperledger/fabric/core/common/validation/statebased.(*txDependency).waitForAndRetrieveValidationResult(0xc420859220, 0xe2436d, 0x2, 0x0, 0x0) 	/opt/gopath/src/github.com/hyperledger/fabric/core/common/validation/statebased/vpmanagerimpl.go:89 +0xe0 github.com/hyperledger/fabric/core/common/validation/statebased.(*validationContext).waitForValidationResults(0xc420014628, 0xc4200cbcf0, 0x1, 0x1, 0x0, 0x0) 	/opt/gopath/src/github.com/hyperledger/fabric/core/common/validation/statebased/vpmanagerimpl.go:194 +0x17d github.com/hyperledger/fabric/core/common/validation/statebased.(*KeyLevelValidationParameterManagerImpl).GetValidationParameterForKey(0xc420014600, 0xe2436d, 0x2, 0xe24b03, 0x4, 0xe24622, 0x3, 0x1, 0x1, 0x0, ...) 	/opt/gopath/src/github.com/hyperledger/fabric/core/common/validation/statebased/vpmanagerimpl.go:268 +0x1ab github.com/hyperledger/fabric/core/common/validation/statebased.TestPvtDependencyConflict.func3() 	/opt/gopath/src/github.com/hyperledger/fabric/core/common/validation/statebased/vpmanager_test.go:399 +0x96 github.com/hyperledger/fabric/vendor/github.com/stretchr/testify/assert.didPanic.func1(0xc42004f6a8, 0xc42004f6a7, 0xc4204c4870) 	/opt/gopath/src/github.com/hyperledger/fabric/vendor/github.com/stretchr/testify/assert/assertions.go:791 +0x57 github.com/hyperledger/fabric/vendor/github.com/stretchr/testify/assert.didPanic(0xc4204c4870, 0xc420327800, 0x14, 0xf) 	/opt/gopath/src/github.com/hyperledger/fabric/vendor/github.com/stretchr/testify/assert/assertions.go:793 +0x4c github.com/hyperledger/fabric/vendor/github.com/stretchr/testify/assert.NotPanics(0xe9e8e0, 0xc4200e90e0, 0xc4204c4870, 0xc4200cbf78, 0x2, 0x2, 0x5b9191d9) 	/opt/gopath/src/github.com/hyperledger/fabric/vendor/github.com/stretchr/testify/assert/assertions.go:833 +0x32 github.com/hyperledger/fabric/core/common/validation/statebased.runFunctions.func1(0xc4200e90e0, 0xc420764da0, 0x3, 0x3, 0x2, 0x5b9191d9, 0xc420012180) 	/opt/gopath/src/github.com/hyperledger/fabric/core/common/validation/statebased/vpmanager_test.go:140 +0xda created by github.com/hyperledger/fabric/core/common/validation/statebased.runFunctions 	/opt/gopath/src/github.com/hyperledger/fabric/core/common/validation/statebased/vpmanager_test.go:139 +0x177 {noformat}  show two goroutines in a deadlock. The reason is the following: Key-level validation establishes a producer/consumer pattern, where  * the producer is the goroutine performing validation of a transaction that modifies the key-level validation params of a key, signalling its validation result * the consumer is the goroutine performing validation of a transaction that retrieves the key-level validation params for the same key  A deadlock existed in the code because the consumer was holding a lock (namely, validationContext.mutex, acquired in waitForValidationResults) while entering the sleep state to wait for the producer (in waitForAndRetrieveValidationResult). The producer on the other hand was prevented from signalling the validation result and broadcast the conditional variable that would have caused the consumer's sleep state to be interrupted, because it needed to obtain the same validationContext.mutex.  ></body> </Action>
<Action id="50068" issue="33563" author="ales" type="comment" body="tentative fix: https://gerrit.hyperledger.org/r/#/c/26161/" created="2018-09-07 10:47:53.0" updateauthor="ales" updated="2018-09-07 10:47:53.0"/>
<Action id="50071" issue="33563" author="ales" type="comment" created="2018-09-07 10:55:18.0" updateauthor="ales" updated="2018-09-07 10:55:18.0"> <body><! CDATA This is the side-by-side scheduling of the two threads that lead to the deadlock  {noformat} SetTxValidationResult                           GetValidationParameterForKey ============================================================================ getOrCreateDependencyByTxnum waitForValidationResults c.mutex.RLock() waitForAndRetrieveValidationResult d.mutex.Lock() d.cond.Wait() c.mutex.Lock() => deadlock! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ c.mutex.Unlock() signalValidationResult d.mutex.Lock() d.validationResultMap ns  = err d.cond.Broadcast() ...                                             d.mutex.Unlock() c.mutex.RUnlock() ... {noformat}   ></body> </Action>
