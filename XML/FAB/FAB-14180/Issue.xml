<Issue id="37674" key="FAB-14180" number="14180" project="10002" reporter="tock" assignee="tock" creator="tock" type="10003" summary="Protect migration with a Channel capability" priority="3" resolution="10000" status="6" created="2019-02-14 07:22:45.0" updated="2019-06-04 21:00:09.0" resolutiondate="2019-03-08 13:37:21.0" votes="0" watches="5" workflowId="49288"> <description><! CDATA *The problem*  Current code in 1.4 (and probably before) has a check in  {{common/channelconfig/Bundle.ValidateNew()}}  that prohibits the change of ConcensusType.Type. This check is performed both in the orderer and in the peer. In the peer through   {{common/channelconfig/BundleSource.ValidateNew()}}  The implications are that if an orderer allows a migration sequence, all peers that do not run the version that supports migration will crash when they get config update (CONTEXT or COMMIT) that carry  the new consensus type.  *The solution*  In order to protect peers from inadvertent crashes like that, we need to protect migration with a Channel capability, which will force the upgrade of peers prior to migration, and will also ensure that the capability is enabled prior to migration.  The implications are:  * A 1.4 peer should be able to work against a 2.0/1.4.1 orderer, if the orderer never changes ConsensusType.Type, be it Kafka or etcd/raft * A 1.4 peer will not be able to consume migration: it will reject the first config update that changes ConsensusType.Type, and crash * In order to migrate an OSN from Kafka to etcd/raft we first have to upgrade both peers and orderers to 1.41/2.0, and enable the respective Channel capability  Note, under the default policy scheme for channel config the signature requirements are: * Orderer capabilities – a majority of orderer admins * Application capabilities – a majority of application admins * Channel capabilities – a majority of orderer admins and a majority of application admins   This means we'll have to get a majority of orderer admins and a majority of application admins to consent before migration.  *The plan*  The plan is to have a Channel capability V1_4_1 and an Orderer capability V1_4_1.  We introduce a channel capability method ChannelCapabilities().ConsensusTypeMigration(), and require it on in order to open the gate for migration. Allowing this will enable the peer to consume config updates with changes to fields below ConsensusType (Type, Metadata, etc).  The Orderer capability introduced in  FAB-12983  OrdererCapabilities().Kafka2RaftMigration() will be changed to check V1_4_1. It will be used to modify the behavior of the Orderer.   Both must be on to perform migration.        ></description> </Issue>
