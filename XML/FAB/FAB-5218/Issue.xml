<Issue id="19091" key="FAB-5218" number="5218" project="10002" reporter="yuki-kon" assignee="aambati" creator="yuki-kon" type="10004" summary="CLI peer does not correctly report status of a join request" priority="3" resolution="10000" status="6" created="2017-07-08 03:24:55.0" updated="2018-07-20 14:13:43.0" resolutiondate="2017-11-03 22:12:31.0" votes="0" watches="7" workflowId="39398"> <description><! CDATA Based onÂ fabric/example/e2e_cli ( https://github.com/hyperledger/fabric/blob/master/examples/e2e_cli/end-to-end.rst ) - Add a new organization "org3". - Add a new peer "peer0.org3.example.com" - Add key/certs for "peer0.org3.example.com". - Genesis block / mychannel.tx is NOT modified. The members of "mychannel" are "org1" and "org2" (Not org3).  In this situation, we expect that org3 cannot join "mychannel" because org3 is not a member of "mychannel". However, peer command got success message after org3.admin executes "peer join" with existing block. The following are detailed procedure. Log file of orderer and peer0.org3.example.com are attached.  Steps to reproduce  -------------------------- 1. Generate crypto materials and genesis block. {noformat} $ cd $FABRIC/examples/e2e_cli $ ./generateArtifacts.sh {noformat}  2. start blockchain network {noformat} $ docker-compose -f docker-compose-cli.yaml up -d {noformat}  3. Log in cli container {noformat} $ docker exec -it cli bash {noformat}  4. Create channel by org1.Admin {noformat} $ export CHANNEL_NAME=mychannel $ export CORE_PEER_TLS_ENABLED=true $ export ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem $ peer channel create -o orderer.example.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/channel.tx --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA {noformat}  5. Join Channel by org3.Admin {noformat} $ CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org3.example.com/users/Admin@org3.example.com/msp CORE_PEER_ADDRESS=peer0.org3.example.com:7051 CORE_PEER_LOCALMSPID="Org3MSP" CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt peer channel join -b mychannel.block {noformat}  Expected Results -------------------------- Peer command gets error message because the joining request by org3.Admin was rejected.  Artifacts about mychannel should not be created.  Actual Results ------------------------- Peer command ends successfully. The following messages were returned. {noformat} 2017-07-08 00:50:43.168 UTC  msp  GetLocalMSP -> DEBU 001 Returning existing local MSP 2017-07-08 00:50:43.168 UTC  msp  GetDefaultSigningIdentity -> DEBU 002 Obtaining default signing identity 2017-07-08 00:50:43.175 UTC  channelCmd  InitCmdFactory -> INFO 003 Endorser and orderer connections initialized 2017-07-08 00:50:43.177 UTC  msp/identity  Sign -> DEBU 004 Sign: plaintext: 0A85070A5B08011A0B08E3D880CB0510...142E4A305B5B1A080A000A000A000A00 2017-07-08 00:50:43.177 UTC  msp/identity  Sign -> DEBU 005 Sign: digest: 9F4D9680243E7EAB53DBDD6BBA381D3D845C2194A65C928725AADE161346F098 2017-07-08 00:50:43.278 UTC  channelCmd  executeJoin -> INFO 006 Peer joined the channel! 2017-07-08 00:50:43.279 UTC  main  main -> INFO 007 Exiting..... {noformat} Artifacts about mychannel was created. Blockfile of sub-ledger is on the peer0.org3.example.com. {noformat} $ docker exec -it peer0.org3.example.com bash $ ls /var/hyperledger/production/ledgersData/chains/chains/mychannel /var/hyperledger/production/ledgersData/chains/chains/mychannel/blockfile_000000 {noformat} After joining, peer executed deliver command. However, deliver command was rejected because org3 was not ChannelReader of mychannel.  ></description> </Issue>
