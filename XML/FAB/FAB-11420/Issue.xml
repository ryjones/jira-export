<Issue id="32453" key="FAB-11420" number="11420" project="10002" reporter="sheehan" assignee="sheehan" creator="sheehan" type="10001" summary="Build OperationHandler interface" priority="3" resolution="10001" status="6" created="2018-07-31 19:11:55.0" updated="2020-11-24 15:30:16.0" resolutiondate="2020-11-24 15:30:16.0" votes="0" watches="3" workflowId="43659"> <description><! CDATA The operation handler interface to handle both built in and custom operations must be created.  See Epic design doc for more details. {code:java} type OperationHandler interface {    // Handle performs the required operation given the supplied instructions  // over the supplied TxSimulator. This function returns InvalidTxError   // if the supplied instructions lead to marking the transaction as invalid // or any other error to signal that processing could not be completed Handle(operation, instructions string, txsim TxSimulator) error   // ValidateInstructions inspects the supplied arguments and performs a    // sanity check of the syntax. It returns nil if no error was found or   // an error in case of a faulty syntax   ValidateInstructions(operation, instructions string) error   // HintKeysReadWrite inspects the supplied arguments and gives a hint what keys   // this plugin definitely reads/ writes from/ to state. This information is just to be used for   // performance optimization during commit time. For instance, the KeyReadHint can be   // used for loading all the keys from couchdb using bulkload for the plugins that are going   // to be executed in the given block. Similarly, if the handlers are simple enough    // (e.g. increment) and they write to different keys, they can be invoked in parallel   HintKeysReadWrite(“operation string, instructions string”) *KVReadWriteHint}  // KeyHint is used to communicate by a plugin to fabric what keys it reads/writes // IsComplete is true if the plugin is capable of knowing in advance about the completeness // of the hint (e.g. a simple increment/decrement plugin knows that it reads exactly one key and // modifies the same key.  Type KeyHint struct {   Keys   string   IsComplete bool}  // KVReadWriteHint is returned by the function `HintKeysReadWrite()` in the `Handler`Type  KVReadWriteHint struct {     Reads, Writes *KeyHint} {code}  ></description> </Issue>
