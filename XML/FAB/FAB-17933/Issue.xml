<Issue id="45141" key="FAB-17933" number="17933" project="10002" reporter="tatsu-sato" assignee="tatsu-sato" creator="tatsu-sato" type="10004" summary="Fix cache update logic for installed chaincode info when specifying an empty or uninstalled package ID" priority="3" resolution="10000" status="6" created="2020-05-27 16:43:22.0" updated="2020-07-03 15:11:21.0" resolutiondate="2020-07-03 15:11:21.0" votes="0" watches="2" workflowId="59051" archived="N"> <description><! CDATA Current cache update logic for install chaincode info implemented in *`core/chaincode/lifecycle/cache.go`* does not work properly when an empty or uninstalled package ID is specified. The following are the examples withÂ *`fabric-samples/test-network`*:  *Example 1:* {code:bash} ## Deploy chaincode `fabcar`  $ cd fabric-samples/test-network $ ./network.sh up createChannel $ ./network.sh deployCC $ export FABRIC_CFG_PATH=$PWD/../config/ $ export CORE_PEER_TLS_ENABLED=true $ export CORE_PEER_LOCALMSPID="Org1MSP" $ export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt $ export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp $ export CORE_PEER_ADDRESS=localhost:7051  $ peer lifecycle chaincode queryinstalled -O json { "installed_chaincodes":   { "package_id": "fabcar_1:88123f604c19b10b64aae3d9c7babf8099cf8aeb1cc6cc5771f47a27205584d1", "label": "fabcar_1", "references": { "mychannel": { "chaincodes":   { "name": "fabcar", "version": "1" }   } } }   }  ## Update to detach the chaincode package from the chaincode definition (This has a problem) $ peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls true --cafile /home/ubuntu/workspace/src/github.com/hyperledger/fabric-samples/test-network/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --channelID mychannel --name fabcar --version 1 --init-required --sequence 12020-05-26 19:51:23.570 UTC  chaincodeCmd  ClientWait -> INFO 001 txid  271029cea8efdad02a91524d59eae8d1473478f8c0b6fe0e7c35a266ff3ff9b2  committed with status (VALID) at   $ peer lifecycle chaincode queryapproved -C mychannel -n fabcar --sequence 1 Approved chaincode definition for chaincode 'fabcar' on channel 'mychannel': sequence: 1, version: 1, init-required: true, package-id: , endorsement plugin: escc, validation plugin: vscc  $ peer lifecycle chaincode queryinstalled -O json ## Problem: the references are NOT updated { "installed_chaincodes":   { "package_id": "fabcar_1:88123f604c19b10b64aae3d9c7babf8099cf8aeb1cc6cc5771f47a27205584d1", "label": "fabcar_1", "references": { "mychannel": { "chaincodes":   { "name": "fabcar", "version": "1" }   } } }   }  ## After restart the peer, the references are updated properly $ docker restart peer0.org1.example.com $ peer lifecycle chaincode queryinstalled -O json { "installed_chaincodes":   { "package_id": "fabcar_1:88123f604c19b10b64aae3d9c7babf8099cf8aeb1cc6cc5771f47a27205584d1", "label": "fabcar_1" }   } {code} *Example 2:* {code:bash} ## Deploy chaincode `fabcar` using `fabric-samples/test-network` $ (As same as Example 1)  ## Commit to update the chaincode definition with an empty package ID (This has a problem)  $ export FABRIC_CFG_PATH=$PWD/../config/ $ export CORE_PEER_TLS_ENABLED=true $ export CORE_PEER_LOCALMSPID="Org1MSP" $ export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt $ export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp $ export CORE_PEER_ADDRESS=localhost:7051 $ peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls true --cafile /home/ubuntu/workspace/src/github.com/hyperledger/fabric-samples/test-network/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --channelID mychannel --name fabcar --version 2 --sequence 2  $ export CORE_PEER_TLS_ENABLED=true $ export CORE_PEER_LOCALMSPID="Org2MSP" $ export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt $ export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp $ export CORE_PEER_ADDRESS=localhost:9051 $ peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls true --cafile /home/ubuntu/workspace/src/github.com/hyperledger/fabric-samples/test-network/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --channelID mychannel --name fabcar --version 2 --sequence 2 $ peer lifecycle chaincode commit -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls true --cafile /home/ubuntu/workspace/src/github.com/hyperledger/fabric-samples/test-network/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --channelID mychannel --name fabcar --peerAddresses localhost:7051 --tlsRootCertFiles /home/ubuntu/workspace/src/github.com/hyperledger/fabric-samples/test-network/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles /home/ubuntu/workspace/src/github.com/hyperledger/fabric-samples/test-network/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt --version 2 --sequence 2  $ peer lifecycle chaincode querycommitted -C mychannel -n fabcar Committed chaincode definition for chaincode 'fabcar' on channel 'mychannel':Version: 2, Sequence: 2, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals:  Org1MSP: true, Org2MSP: true  $ peer lifecycle chaincode queryapproved -C mychannel -n fabcar Approved chaincode definition for chaincode 'fabcar' on channel 'mychannel': sequence: 2, version: 2, init-required: false, package-id: , endorsement plugin: escc, validation plugin: vscc  $ peer lifecycle chaincode queryinstalled -O json ## Problem: the updated references are wrong { "installed_chaincodes":   { "package_id": "fabcar_1:88123f604c19b10b64aae3d9c7babf8099cf8aeb1cc6cc5771f47a27205584d1", "label": "fabcar_1", "references": { "mychannel": { "chaincodes":   { "name": "fabcar", "version": "2" }   } } }   }  ## After restart the peer, the references are updated properly $ docker restart peer0.org1.example.com $ peer lifecycle chaincode queryinstalled -O json { "installed_chaincodes":   { "package_id": "fabcar_1:88123f604c19b10b64aae3d9c7babf8099cf8aeb1cc6cc5771f47a27205584d1", "label": "fabcar_1" }   } {code} These wrong references may mislead Fabric admins. So, we should fix the problem.  ></description> </Issue>
