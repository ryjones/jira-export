<Issue id="13819" key="FAB-1410" number="1410" project="10002" reporter="kchristidis" assignee="kchristidis" creator="kchristidis" type="10004" summary="Remove node&apos;s call to bootstrapper" priority="2" resolution="10000" status="6" created="2016-12-15 05:13:13.0" updated="2018-07-20 14:11:03.0" resolutiondate="2016-12-15 22:46:11.0" votes="0" watches="1" workflowId="36890"> <description><! CDATA The node package gets the genesis block by invoking the static bootstrapper, then uses that block for this call  {code}deliverService.JoinChannel(commit, block){code}  It should be noted that this is a temporary solution by the node package authors to test out the end-to-end integration.  However, this layering violation (which could be ignored temporarily due to the reason cited above) manifests itself in a very practical and real way:  # The static bootstrapper is being replaced by the provisional bootstrapper, for the reasons documented here: https://jira.hyperledger.org/browse/FAB-1364. # The provisional bootstrapper loads the *orderer.yaml* file (in the *orderer* package) to determine its output. # The fabric-peer Docker image however does not have access to this file. # Thus, if we call the provisional bootstrapper from the node, the fabric-peer container will crash.  Upon further inspection, it seems that what the node really needs now is a configuration block with just the right chain ID, on the payload header of its first enclosed envelope.  The simplest, least invasive way to offer this is by creating a sample block via the following call:   {code}utils.MakeConfigurationBlock(util.GetTestChainID()){code}  (Where *utils* refers to the *protos/utils* and *util* to the *core/util* package respectively.)  This is also inline with Binh's suggestion: https://hyperledgerproject.slack.com/archives/fabric-peer-dev/p1481691533000088  ></description> </Issue>
