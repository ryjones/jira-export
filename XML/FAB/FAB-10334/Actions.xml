<Action id="45002" issue="30552" author="wlahti" type="comment" body="https://gerrit.hyperledger.org/r/c/22211/" created="2018-05-23 18:02:09.0" updateauthor="wlahti" updated="2018-05-23 18:02:09.0"/>
<Action id="55788" issue="30552" author="lehors" type="comment" created="2019-01-18 09:55:01.0" updateauthor="lehors" updated="2019-01-18 10:16:22.0"> <body><! CDATA Although running the test in devmode appears to solve the problem it does not actually address the real issue, it merely avoids it, making the test useless because most of the code it is meant to test is skipped due to devmode being on.  The failing test (TestInstall from peer/chaincode/install_test.go) runs fine on its own without being in devmode. The problem only appears sometimes, when run in the test container in combination with some other test (I've never been able to reproduce it when run individually nor directly on my machine), from running out of memory and getting killed by the OS.  I've tried to figure out why it goes off the rail sometimes but to no avail. Tracing the test shows the process getting killed by the OS (from running out of memory) while trying to build the tar file.  Below is an extract from the log of a successful run: {code:java} root@b66b3b491af0:/opt/gopath/src/github.com/hyperledger/fabric/peer/chaincode# go test -v -run '(TestChaincodeInvokeOrQuery_waitForEvent|TestInstall$)'  flogging  setModuleLevel -> DEBU 001 Module 'common/tools/configtxgen/localconfig' logger enabled for log level 'ERROR'  flogging  setModuleLevel -> DEBU 002 Module 'common/tools/configtxgen/encoder' logger enabled for log level 'INFO' ... --- PASS: TestChaincodeInvokeOrQuery_waitForEvent (0.09s) === RUN   TestInstall  msp  GetDefaultSigningIdentity -> DEBU 052 Obtaining default signing identity  chaincodeCmd  checkChaincodeCmdParams -> INFO 053 Using default escc  chaincodeCmd  checkChaincodeCmdParams -> INFO 054 Using default vscc  chaincodeCmd  getChaincodeSpec -> DEBU 055 java chaincode disabled  golang-platform  getCodeFromFS -> DEBU 056 getCodeFromFS github.com/hyperledger/fabric/examples/chaincode/go/example02/cmd  golang-platform  func1 -> DEBU 057 Discarding GOROOT package fmt  golang-platform  func1 -> DEBU 058 Discarding provided package github.com/hyperledger/fabric/core/chaincode/shim  golang-platform  func1 -> DEBU 059 Accepting import: github.com/hyperledger/fabric/examples/chaincode/go/example02  golang-platform  GetDeploymentPayload -> DEBU 05a processing dep: github.com/hyperledger/fabric/vendor/google.golang.org/grpc/resolver  golang-platform  GetDeploymentPayload -> DEBU 05b checking: /opt/gopath/src/gith...  container  WriteFileToPackage -> DEBU 517 Writing file to tarball: src/github.com/hyperledger/fabric/vendor/github.com/gogo/protobuf/proto/extensions.go  container  WriteFileToPackage -> DEBU 518 Writing file to tarball: src/github.com/hyperledger/fabric/vendor/github.com/gogo/protobuf/proto/extensions_gogo.go  container  WriteFileToPackage -> DEBU 519 Writing file to tarball: src/github.com/hyperledger/fabric/vendor/github.com/gogo/protobuf/proto/lib.go  container  WriteFileToPackage -> DEBU 51a Writing file to tarball: src/github.com/hyperledger/fabric/vendor/github.com/gogo/protobuf/proto/lib_gogo.go ... container  WriteFileToPackage -> DEBU 73d Writing file to tarball: src/github.com/hyperledger/fabric/vendor/gopkg.in/yaml.v2/yamlprivateh.go  msp/identity  Sign -> DEBU 73e Sign: plaintext: 0AC6070A5C08031A0C08D1C183E20510...FDFBDF000000FFFF5CEB3F780066B000   msp/identity  Sign -> DEBU 73f Sign: digest: B4661E8579A0091B9D1BC92B096B5F8CDF066F53F152FCD95EC5D851E88E5B8B   chaincodeCmd  install -> INFO 740 Installed remotely response:<status:200 > endorsement:<>  --- PASS: TestInstall (28.92s) PASS ok  	github.com/hyperledger/fabric/peer/chaincode	29.338s  {code} and the following one is from a failing one: {code:java} root@b66b3b491af0:/opt/gopath/src/github.com/hyperledger/fabric/peer/chaincode# go test -v -run '(TestChaincodeInvokeOrQuery_waitForEvent|TestInstall$)'  flogging  setModuleLevel -> DEBU 001 Module 'common/tools/configtxgen/localconfig' logger enabled for log level 'ERROR'  flogging  setModuleLevel -> DEBU 002 Module 'common/tools/configtxgen/encoder' logger enabled for log level 'INFO' === RUN   TestChaincodeInvokeOrQuery_waitForEvent ... --- PASS: TestChaincodeInvokeOrQuery_waitForEvent (0.10s) === RUN   TestInstall  msp  GetDefaultSigningIdentity -> DEBU 052 Obtaining default signing identity  chaincodeCmd  checkChaincodeCmdParams -> INFO 053 Using default escc  chaincodeCmd  checkChaincodeCmdParams -> INFO 054 Using default vscc  chaincodeCmd  getChaincodeSpec -> DEBU 055 java chaincode disabled  golang-platform  getCodeFromFS -> DEBU 056 getCodeFromFS github.com/hyperledger/fabric/examples/chaincode/go/example02/cmd  golang-platform  func1 -> DEBU 057 Discarding GOROOT package fmt  golang-platform  func1 -> DEBU 058 Discarding provided package github.com/hyperledger/fabric/core/chaincode/shim  golang-platform  func1 -> DEBU 059 Accepting import: github.com/hyperledger/fabric/examples/chaincode/go/example02  golang-platform  GetDeploymentPayload -> DEBU 05a processing dep: github.com/hyperledger/fabric/core/chaincode/platforms/util  golang-platform  GetDeploymentPayload -> DEBU 05b checking: /opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/platforms/util exists: true ...  container  WriteFileToPackage -> DEBU 517 Writing file to tarball: src/github.com/hyperledger/fabric/vendor/github.com/gogo/protobuf/proto/extensions.go  container  WriteFileToPackage -> DEBU 518 Writing file to tarball: src/github.com/hyperledger/fabric/vendor/github.com/gogo/protobuf/proto/extensions_gogo.go signal: killed FAIL	github.com/hyperledger/fabric/peer/chaincode	22.565s {code} This is true both with go1.10 used in 1.2 and go1.11.4 which is now available. This remains true with fabric 1.4.0. However, we no longer run unit-tests in a container so this problem becomes moot.  One more piece of data: when running TestInstall individually the chaincode.test process barely reaches 1.7% of memory, while running in combination with others it goes up to 90%+ before getting killed.  ></body> </Action>
