<Issue id="16090" key="FAB-3493" number="3493" project="10002" reporter="jimthematrix" assignee="kchristidis" creator="jimthematrix" type="10004" summary="last_config on block #1 for chaincode instantiation points to #1" priority="1" resolution="10000" status="6" created="2017-04-28 15:23:56.0" updated="2018-07-20 14:12:26.0" resolutiondate="2017-05-10 14:02:15.0" votes="0" watches="2" workflowId="38207"> <description><! CDATA this was reproduced from node SDK's e2e test, which I showed to  ~binhn  and  ~jeffgarratt  by stepping through the code and inspecting the header and metadata of the block #0 and #1.  fabric commit level:  commit 1b470e245905bc255ea2af5e5b79092155c6fc34 Merge: be623f1a 846a1d2f Author: Yacov Manevich <yacovm@il.ibm.com> Date:   Thu Apr 27 13:37:13 2017 +0000  Merge " FAB-3111  - add to docs" ====  Steps: 1. node test/integration/e2e/create-channel.js <<== this uses the channel tx generated by configtxgen and the node.js code collects signatures on the config_update bytes, then signs the config tx to send to the orderer 2. node test/integration/e2e/join-channel.js 3. node test/integration/e2e/install-chaincode.js 4. node test/integration/e2e/instantiate-chaincode.js <<== this produces block #1 which then properly gets delivered to peers 5. node test/integration/e2e/invoke-transaction.js  at step 5 we encounter the following issue: as part of chain initialization (invoke-transaction.js does this in order to initialize the Chain object with channel MSPs) the code asks the orderer via the deliver() API for the latest config block. it does this in two steps:  - asks the orderer for the latest block on the channel "mychannel", which at this point is block #1 - parses the block for the "last_config" index from the metadata - use the index to get the corresponding block that should be of type "HeaderType.CONFIG"  problem is, the last_config index value is "1" which is the block for the instantiate chaincode transaction.  ></description> </Issue>
