<Action id="23164" issue="16090" author="jimthematrix" type="comment" created="2017-04-28 16:02:39.0" updateauthor="jimthematrix" updated="2017-04-28 16:02:39.0"> <body><! CDATA this was reproduced against today's HEAD:  commit 93c31bcf4b554eb665254dcd843b47842573b6b3 Merge: 23866ec0 e644262a Author: Srinivasan Muralidharan <muralisr@us.ibm.com> Date:   Fri Apr 28 14:32:19 2017 +0000  Merge " FAB-3451  Move noopmsp in mocks"   ></body> </Action>
<Action id="23171" issue="16090" author="kchristidis" type="comment" body="Thanks for the detailed JIRA report Jim. Something looks fishy indeed, I&apos;m on it." created="2017-04-28 18:11:27.0" updateauthor="kchristidis" updated="2017-04-28 18:11:27.0"/>
<Action id="23174" issue="16090" author="jimthematrix" type="comment" created="2017-04-28 18:34:06.0" updateauthor="jimthematrix" updated="2017-04-28 18:34:06.0"> <body><! CDATA  ~kchristidis  also, I did a local hack inside the node SDK so that it blindly only seeks for the block 0 (disregarding the "last_config" index), and was able to submit a number of transactions, and all subsequent blocks have the "last_config" set to "1".   ></body> </Action>
<Action id="23190" issue="16090" author="binhn" type="comment" created="2017-04-29 00:24:24.0" updateauthor="binhn" updated="2017-04-29 00:24:24.0"> <body><! CDATA I added the following on chainsupport.WriteBlock 	lastConfig, _ := utils.GetLastConfigIndexFromBlock(block) 	logger.Debugf("Writing block %d, last config block %d", block.Header.Number, lastConfig)  and got these logs from e2e_cli without updating channel tx (I attached the entire logfile below). Note writing of block 1 appeared twice. Also note that block 0 didn't involved this WriteBlock function. I havent traced the code yet.   36m2017-04-29 00:08:28.433 UTC  orderer/multichain  WriteBlock -> DEBU 83c 0m Writing block 1, last config block 0  36m2017-04-29 00:08:52.512 UTC  orderer/multichain  WriteBlock -> DEBU 8fd 0m Writing block 1, last config block 1  36m2017-04-29 00:09:06.772 UTC  orderer/multichain  WriteBlock -> DEBU 943 0m Writing block 2, last config block 1  ^1out    ></body> </Action>
<Action id="23196" issue="16090" author="kchristidis" type="comment" created="2017-04-29 04:40:47.0" updateauthor="kchristidis" updated="2017-04-29 04:40:47.0"> <body><! CDATA Binh, thanks for the update.  This problem arises from the following sequence that occurs whenever a new channel is created:  # The `NewChannelConfig` method returns a config manager based on an envelope whose `Config.Sequence` is set to 0. This sets the new config manager's `current.sequence` field to the same value. So, `configManager.current.sequence` is now 0. # Right after, we have this config manager do a `ProposeConfigUpdate` which returns a `ConfigEvelope` whose `Config.Sequence` is the config manager's `current.sequence` value bumped up by one. So, `ConfigEnvelope.Config.Sequence` is now 1. # Then we have the config manager apply the `ConfigEnvelope` returned from the previous step, so that it becomes the new config. During this process, the config manager's `current.sequence` field is set to the processed `ConfigEnvelope`'s `Config.Sequence` value. So, `configManager.current.sequence` is now 1.  This shows that right out of the gate, the new channel outputs blocks who `LastConfig` metadata value incorrectly points to block 1 as the last configuration block.  There are three ways of solving this:  A. Completely rewrite the underlying logic. I am not going to do this on purpose. Jason wrote this package, and knows the ins and outs of it better than me. Therefore, if we are looking for a quick solution, anything that I come up with during the weekend is guaranteed to be suboptimal.  B. Have the envelope that the new config manager is based on, set its sequence number (`Config.Sequence`) to -1. Remember that Step 1 is always followed up by Steps 2 and 3, so this results in a value that in the end is always right: a `configManager` for a new channel whose `current.sequence` is set to 0 right out of the get.  The problem with this solution is that the type of the sequence filed is an unsigned integer. If we wish to proceed with this solution we need to change the type to a signed integer, and then modify the signatures and the bodies of the functions/methods that depend on it accordingly. In fact, this is what I do in https://gerrit.hyperledger.org/r/#/c/8749/1 as very hacky fix.  C. A less invasive (but still somewhat hacky solution) is to extend the `Config` message definition by adding a boolean field that lets the parsing function (in our case: `ProposeConfigUpdate` in Step 2) know that it's dealing with a "fresh" config manager, and therefore won't bump the `Config.Sequence` value of the `ConfigEnvelope` that it will return.  This is what I plan to do.  ></body> </Action>
<Action id="23261" issue="16090" author="kchristidis" type="comment" created="2017-05-02 04:10:17.0" updateauthor="kchristidis" updated="2017-05-02 04:10:17.0"> <body><! CDATA Spent a good part of the weekend working on this. What made the final fix tricky was that it had to:  # Affect only the new channel creation path # Modify this path *both* on ingress (when the ordering service transforms the CONFIG_UPDATE envelope to an ORDERER_TRANSACTION one), *and* after processing/ordering, during the systemchain filter execution stage.  You can find the fix in: https://gerrit.hyperledger.org/r/#/c/8825/  ></body> </Action>
<Action id="23610" issue="16090" author="kchristidis" type="comment" body="I&apos;ve submitted a new fix for this (replacing the old one):Â https://gerrit.hyperledger.org/r/#/c/9141/" created="2017-05-09 17:35:37.0" updateauthor="kchristidis" updated="2017-05-09 17:35:37.0"/>
