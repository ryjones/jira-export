<Issue id="25710" key="FAB-7444" number="7444" project="10002" reporter="angelo.decaro" creator="angelo.decaro" type="10001" summary="Proposal for new-lifecycle with Init preserving mechanics and no data duplication" priority="2" resolution="10000" status="6" created="2017-12-13 08:54:06.0" updated="2018-07-20 18:48:02.0" resolutiondate="2018-03-14 11:39:23.0" votes="0" watches="9" workflowId="40786"> <description><! CDATA FAB-7114 outlines a proposal to have the resource tree and LSCC, as per v1, to coexist.  Moved by the following motivation:  _Duplicating the same information in the resource tree and LSCC adds complexity that may lead to security bugs if the synchronization is not done properly or does not happen in an atomic fashion,_  we propose to modify FAB-7114 in the following way:  * To use the resource tree to store under /resources/chaincodes an entry for chaincode deployment policy in the channel, defaults for ESCC, VSCC, and VSCC arguments, and to store the rest of the information in LSCC like it happens already  (V1.0). This channel wide chaincode deployment policy will be used by LSCC at validation of LSCC deploy transactions.   *  To support multi-signer chaincode deployment policies, we also propose to introduce the multi-sig process à la Ethereum. Namely, LSCC can be modified to collect signatures on a given instantiation proposal/transaction. The instantiation is marked as 'pending' as long as the channel's deployment policy and chaincode's instantiation policy are not satisfied. As soon as the instantiation policy (bound to the relative chaincode) and the channel’s deployment policy (bound to the relative channel) is satisfied (meaning that enough signatures have been collected on the same instantiation), LSCC validation considers the chaincode as 'instantiated' (No post-execution is required).  Even if unlikely in the case of a permissioned network, it might happen that different subsets of the administrators (able to instantiate the chaincode) try to instantiate the same chaincode with different inputs. Then, one strategy to deal with this is to say that the first group that satisfies the instantiation policy will automatically invalidate all the other pending (and possibly conflicting) proposals.  Please, find  here |https://docs.google.com/document/d/18xH9b0Ze8-b_OeLb40lnd-9QrqIAPDzpBneB3QInPLw/edit?usp=sharing  the design document with more details.  Please,  ~mastersingh24   ~jyellick   ~yacovm   ~ChristopherFerris   ~denyeart   ~manish-sethi   ~muralisr   ~binhn  ~C0rWin   ~elli-androulaki   ~ales   ~mne , have your say :)  ></description> </Issue>
