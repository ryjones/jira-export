<Action id="35692" issue="21302" author="scottz" type="comment" created="2017-11-30 22:19:26.0" updateauthor="scottz" updated="2017-11-30 22:19:26.0"> <body><! CDATA Let's check what is covered by UT, and get these answers from the API and doc from the dev feature and the SDK dev feature, before writing feature tests and system tests. Some ideas: * Client registers for a Transaction event or Block event on a channel, and verify it is received by that client. * Or register for all TX or Block events on a channel, and confirm that ALL historical events and subsequent events on that channel are delivered. * Register one client to receive events on multiple channels. * Verify that no events are received for transactions and blocks sent on other channels. * Restart a peer while running traffic on a channel of which that peer is one of several that joined. Will events be missed by client? Will events be delivered by that peer after it recovers? Or will SDK connect to a different peer on that channel?  ></body> </Action>
<Action id="37004" issue="21302" author="ratnakar" type="comment" created="2017-12-12 19:21:30.0" updateauthor="ratnakar" updated="2017-12-12 19:55:07.0"> <body><! CDATA *Pre-req*: TLS Disabled in the environment & deliver client  *Step 1 : Generate the deliver client* {code} cd fabric/orderer/sample_clients/deliver_stdout go build {code}  *Step 2 : Make sure to update the orderer.yaml file* (Deliver client loads the msp and mspID from there)  File: _fabric/sampleconfig/orderer.yaml_ {code} LocalMSPDir: ../examples/e2e_cli/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp LocalMSPID: Org1MSP {code}  *Step 3 : Run e2e_cli sample* {code} ./network_setup.sh restart mychannel {code}  *Step 4 : Connect Deliver client to the peer to obtain the blocks* {code} ./deliver_stdout -channelID mychannel -quiet {code}  Various other options  ./deliver_stdout -channelID mychannel -quiet -server 127.0.0.1:7051 ./deliver_stdout -channelID mychannel -quiet -server -seek <-2|-1|0|(1..N)> ./deliver_stdout -channelID mychannel -seek 2 >& block.json   *Note*: 1. Can run different tests by changing the e2e_cli sample  --> Create multiple channels  --> Donot join all the peers in the script and join at later point  --> Send Invokes concurrently etc., 2. Generate multiple client to listen on multiple channels  ></body> </Action>
<Action id="37005" issue="21302" author="ratnakar" type="comment" created="2017-12-12 19:25:15.0" updateauthor="ratnakar" updated="2017-12-12 19:25:15.0"> <body><! CDATA attached the required scripts   ^channel1.sh   &   ^channel2.sh   for the InterfaceTests 15 & 16    ></body> </Action>
<Action id="38985" issue="21302" author="ratnakar" type="comment" created="2018-01-22 19:35:27.0" updateauthor="ratnakar" updated="2018-01-24 14:15:40.0"> <body><! CDATA Interfaces has been changed as per the new design , the two new APIs are:  Refer them here  https://github.com/hyperledger/fabric/blob/master/protos/peer/events.proto#L161-L170  {code:java} service Deliver { // deliver first requires an Envelope of type ab.DELIVER_SEEK_INFO with Payload data as a marshaled orderer.SeekInfo message, // then a stream of block replies is received. rpc Deliver (stream common.Envelope) returns (stream DeliverResponse) { } // deliver first requires an Envelope of type ab.DELIVER_SEEK_INFO with Payload data as a marshaled orderer.SeekInfo message, // then a stream of **filtered** block replies is received. rpc DeliverFiltered (stream common.Envelope) returns (stream DeliverResponse) { } } {code}  ~C0rWin  helped to make some changes to the deliver client and PR is  https://gerrit.hyperledger.org/r/#/c/16919/     As per the new sample changed the instructions as below    *Pre-req*: TLS Disabled in the environment  *Step 1 : Generate the eventsclient* {code:java} cd fabric/examples/events/eventsclient go build {code} You will see the executable *eventsclient* if there are no compilations errors  ***Step 2 : Run e2e_cli sample with TLS disabled* (make sure disable TLS flag from docker-compose) {code:java} ./network_setup.sh restart mychannel 100000 {code} *Step 3 : Connect the client to the peer to obtain the blocks* {code:java} CORE_PEER_LOCALMSPID=Org1MSP CORE_PEER_MSPCONFIGPATH=../examples/e2e_cli/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp ./eventsclient -channelID mychannel {code} Various other options (Make sure to pass *CORE_PEER_LOCALMSPID* & *CORE_PEER_MSPCONFIGPATH* )  ./eventsclient -channelID mychannel -quiet -server 127.0.0.1:7051 ./eventsclient -channelID mychannel -quiet -server -seek <-2|-1|0|(1..N)> ./eventsclient -channelID mychannel -seek 2 >& block.json  *Note*: 1. Can run different tests by changing the e2e_cli sample  --> Create multiple channels  --> Donot join all the peers in the script and join at later point  --> Send Invokes concurrently (for invalid transactions) etc., 2. Generate multiple client to listen on multiple channels (Refer the scripts channel1 and channel2)  3. All these tests can re-run by adding an extra flag *-filtered* to test the filtered events ex: {code:java} ./eventsclient -channelID mychannel -filtered {code}   {panel} TLS support is not yet available for the sample client. once it is available we must re-run all the tests. {panel}  ></body> </Action>
<Action id="38996" issue="21302" author="c0rwin" type="comment" body=" ~Ratnakar , thanks, once will finalize TLS support will update here." created="2018-01-22 22:06:45.0" updateauthor="c0rwin" updated="2018-01-22 22:07:00.0"/>
<Action id="39077" issue="21302" author="ratnakar" type="comment" created="2018-01-24 19:29:34.0" updateauthor="ratnakar" updated="2018-01-25 20:01:07.0"> <body><! CDATA *Pre-req*: Need the docker-images to run e2e_cli sample with or w/o TLS  *Step 1 : Generate the eventsclient executable* {code:java} cd fabric/examples/events/eventsclient go build {code} (You will see the executable *eventsclient* if there are no compilations errors )  *Step 2 : Run e2e_cli with the following command* {code:java} ./network_setup.sh restart mychannel 100000 {code} *Step 3 : establish connection from the client to the peer to obtain the blocks* {panel} *NOTE*: In order to allow the *eventsclient* sample to connect to peers on e2e_cli example with a TLS enabled, the easiest way would be to map *127.0.0.1* to the hostname of peer that you are connecting to, such as *peer0.org1.example.com*. For example on *\*nix* based systems this would be an entry in */etc/hosts* file. {panel} {code:java} CORE_PEER_MSPCONFIGPATH=/Users/ratnakar/workspace/go/src/github.com/hyperledger/fabric/examples/e2e_cli/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp CORE_PEER_LOCALMSPID=Org1MSP ./eventsclient -channelID=mychannel -server=peer0.org1.example.com:7051 -tls=true -mTls=true -filtered=true -quiet=false -seek=3 -clientKey=/Users/ratnakar/workspace/go/src/github.com/hyperledger/fabric/examples/e2e_cli/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls/client.key -clientCert=/Users/ratnakar/workspace/go/src/github.com/hyperledger/fabric/examples/e2e_cli/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls/client.crt -rootCert=/Users/ratnakar/workspace/go/src/github.com/hyperledger/fabric/examples/e2e_cli/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls/ca.crt {code} The output would be some thing like following {code:java} 2018-01-25 14:57:03.176 EST  eventsclient  readEventsStream -> INFO 001 Received filtered block: { "channel_id": "mychannel", "filtered_transactions":   { "transaction_actions": {}, "tx_validation_code": "VALID", "txid": "076733f1ac1f8bddaa89df5592bb747dcc4fdc870f5a10a522f657d95b6bfa6b", "type": "ENDORSER_TRANSACTION" }  , "number": "3" } 2018-01-25 14:57:03.177 EST  eventsclient  readEventsStream -> INFO 002 Got status &{SUCCESS}{code}  *some other options :* {code:java} ./eventsclient -channelID=mychannel" -quiet=false -server 127.0.0.1:7051 ./eventsclient -channelID=mychannel" -seek=<-2|-1|0|(1..N)> ./eventsclient -channelID="mychannel" -seek=2 \-filtered=false {code} *Note:* 1. Can run different tests by changing the e2e_cli sample  --> Create multiple channels  --> Donot join all the peers in the script and join at later point  --> Send Invokes concurrently (for invalid transactions) etc., 2. Generate multiple client to listen on multiple channels (Refer the scripts channel1 and channel2)  3. All these tests can re-run by setting the -filtered flag to *false* to retreive unfiltered blocks {code:java} ex: ./eventsclient -channelID mychannel -filtered=false {code}  ></body> </Action>
<Action id="62319" issue="21302" author="mastersingh24" type="comment" body="Open 1 year or more with no activity ... time to cleanup" created="2019-07-30 02:42:07.0" updateauthor="mastersingh24" updated="2019-07-30 02:42:07.0"/>
