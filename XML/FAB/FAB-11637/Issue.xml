<Issue id="33015" key="FAB-11637" number="11637" project="10002" reporter="scottz" assignee="scottz" creator="scottz" type="10004" summary="fabric-test tests python reports failure when subprocess shell returns exit code 1 with a count of 0 from grep -c command" priority="3" resolution="10000" status="6" created="2018-08-17 18:53:50.0" updated="2019-03-19 11:13:14.0" resolutiondate="2018-08-22 14:15:29.0" votes="0" watches="1" workflowId="44216"> <description><! CDATA A value of zero can be an acceptable outcome when using the counter option of the grep command, but when that happens the shell returns exit code 1 instead of 0 thinking it is an error. Observe the following code in regression/daily/systest_pte.py. When the grep returns 0 instances of the search string, it errors out and we do not even get to execute the assertEqual command. The error reported by the script indicates a shell return code of 1 (which would normally be interpreted as suggesting an execution failure of the grep command itself) instead of saying the assertion failed to match the expected number of occurances.  invokeTxSucceeded = subprocess.check_output( "grep -c \"Channel: all, tx Num: 40000,\" result_FAB-3832-4i.log", cwd=scenarios_directory, shell=True) self.assertEqual(int(invokeTxSucceeded.strip()), 2)  This makes it laborious to troubleshoot the root cause of issues. A proposed solution is to rework the `grep -c pattern logfile` implementation in every test, instead use `grep pattern logfile | wc -l` which will always return an exit code of 0 along with a line count (even if the linecount is 0 whenever there are no instances of pattern in logfile).  This was discovered during investigation of errors in this daily pte test suite test run:   https://jenkins.hyperledger.org/view/fabric-test/job/fabric-test-daily-pte-release-1.2-x86_64/8/testReport/junit/systest_pte/Perf_Stress_CouchDB/test_FAB3832_4i_FAB3834_4q/   Â   ></description> </Issue>
