<Issue id="35727" key="FAB-13066" number="13066" project="10002" reporter="scottz" creator="scottz" type="10101" summary="Overwhelm a Peer" priority="4" resolution="10001" status="6" created="2018-11-30 01:21:53.0" updated="2021-01-10 17:35:37.0" resolutiondate="2021-01-10 17:35:37.0" votes="0" watches="2" workflowId="47211"> <description><! CDATA NOTE:  This does not seem to be a good test for any automated test suite, however, we could try this in k8s network with small hosts resources (low cpu and low RAM), and again with just low cpu. (We have run tests already with low GBRAM and troubleshooted the problems - very much slowing response times before finally peer restarts, repeatedly.)  Set up a simple network with 2 orgs with 2 peers per org, solo orderer, one channel and one chaincode, requiring single endorsement, https://github.com/hyperledger/fabric/blob/master/examples/chaincode/go/map/map.go.  Using multiple threads, possibly with multiple PTE tasks pointing at the same peer in the same network, send invoke getPut transactions at high rates (or even escalating rates) to a single peer to see where it chokes. Observe if it gracefully sheds work, and observe if the symptoms are appropriate (helpful logs, error codes, grpc connection requests denied, slowness, crash, etc).  Optionally run iterations by starting first with n threads, then repeat with 2n, 3n, 4n, etc.  Repeat test using sidedb getPutPrivate transactions.  What is the behavior like if this test is run on a vLaunch which has limited CPU resources? What happens if it is run in a large host in IKS without CPU limitations? Find the bottlenecks and stress points.  ></description> </Issue>
