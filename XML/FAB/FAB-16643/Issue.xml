<Issue id="42405" key="FAB-16643" number="16643" project="10002" reporter="ryanmathison" assignee="manish-sethi" creator="ryanmathison" type="10004" summary="Peer Fails to Restart when Missing the Private Write Set for a Committed Block" priority="2" resolution="10000" status="6" created="2019-09-18 17:43:25.0" updated="2019-11-11 18:49:20.0" resolutiondate="2019-10-21 01:54:32.0" votes="1" watches="8" workflowId="55461"> <description><! CDATA There was a peer in the network that ended up committing a block without the private write sets as it could not reach the other peers that had it.  The peer then restarted and was unable to restart as it received a SIGSEGV.   From going through the logs, see attached, the issue happens in lockbased_txmgr.go in the checkIfPrivateWriteIsState function.  {{{color:#172b4d}{{  vv, err := db.GetValueHash(ns, coll, keyHashBytes)}}   if err != nil {     {color}}}  {{{color:#172b4d}   return true, err   {color}}}  {{{color:#172b4d}  }{color}}}  {{{color:#172b4d}  if bytes.Equal(vv.Value, util.ComputeHash(kvWrite.Value)) {   // if hash of value matches, update version   // and return true{color}}}  From the code I see that the peer is attempting to get the value hash from the database for the block with the missing .  Because the peer never received the private data, the database returns nil. It seems that the code is expecting in this case we could also get an error returned, but I don't believe that is the case. The peer doesn't get an error and continue onto the if statement where it does vv.value, which because vv is actually nil causes a SIGSEGV.  So digging into this a little bit more, I went down to statecouchdb.go in the GetState function. There we see the following  {{{color:#172b4d}  couchDoc, _, err := db.ReadDoc(key){color}}}  {{{color:#172b4d}  if err != nil {{color}}}  {{{color:#172b4d}    return nil, err{color}}}  {{{color:#172b4d}  }{color}}}  {{{color:#172b4d}  if couchDoc == nil {{color}}}  {{{color:#172b4d}    return nil, nil{color}}} {{{color:#172b4d}  }{color}}}  If I followed the path correctly, this confirms the fact that we can get a nil hash returned while also getting a nil error.  So it seems that the peer needs to handle a nil return from the database during recovery.     ></description> </Issue>
