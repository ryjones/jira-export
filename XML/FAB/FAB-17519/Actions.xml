<Action id="68028" issue="44385" author="yacovm" type="comment" created="2020-02-21 12:08:26.0" updateauthor="yacovm" updated="2020-02-21 12:09:57.0"> <body><! CDATA 14 choose 7 is 3,432.  Discovery starts  pruning combinations|https://github.com/hyperledger/fabric/blob/master/common/graph/perm.go#L111   once it reached 10,000|https://github.com/hyperledger/fabric/blob/master/common/policies/inquire/inquire.go#L43 .  {quote}Load doesn’t end at turning off of gateway software of that org{quote}  Can you attach the logs? How many queries are being sent to the peer in general?  ></body> </Action>
<Action id="68029" issue="44385" author="yacovm" type="comment" created="2020-02-21 12:16:03.0" updateauthor="yacovm" updated="2020-02-21 12:16:03.0"> <body><! CDATA Another thing we can try to do, is to optimize the  function|https://github.com/hyperledger/fabric/blob/master/common/policies/inquire/merge.go#L273-L287  to not use reflection.  I'll try and look at it today in a few hours.  ></body> </Action>
<Action id="68030" issue="44385" author="mplisov" type="comment" body="rate(endorser_proposals_received 1m ) ~ 2" created="2020-02-21 12:28:12.0" updateauthor="mplisov" updated="2020-02-21 12:28:12.0"/>
<Action id="68031" issue="44385" author="mplisov" type="comment" body="I think that for doing its job Discovery client doesn&apos;t need thousands of combinations. It generally doesn&apos;t have enough time to to try them all." created="2020-02-21 12:29:41.0" updateauthor="mplisov" updated="2020-02-21 12:34:56.0"/>
<Action id="68032" issue="44385" author="yacovm" type="comment" body="Why not? If the client is running for a day and is making a transaction per minute then it&apos;s already around 1.5K transactions." created="2020-02-21 12:38:09.0" updateauthor="yacovm" updated="2020-02-21 12:38:09.0"/>
<Action id="68033" issue="44385" author="mplisov" type="comment" created="2020-02-21 12:48:28.0" updateauthor="mplisov" updated="2020-02-21 12:53:03.0"> <body><! CDATA But it gets this new set every  defaultSelectionRefreshInterval = time.Second * 5  ></body> </Action>
<Action id="68034" issue="44385" author="yacovm" type="comment" body="Well I don&apos;t see a reason to get it every 15 seconds, but I&apos;m sure you can configure it to do it every few hours." created="2020-02-21 12:50:02.0" updateauthor="yacovm" updated="2020-02-21 12:50:02.0"/>
<Action id="68035" issue="44385" author="yacovm" type="comment" created="2020-02-21 12:52:41.0" updateauthor="yacovm" updated="2020-02-21 12:52:41.0"> <body><! CDATA Though I think this will create another problem - you won't know when peers are offline in time this way.  I guess, it's possible to make an endorsement query and then "hold it" for a few hours and just refresh the peer membership by doing a membership query every 15 seconds which is cheap.  However these are all changes that need to be done at the client side, and I'm not the address...  ~troyronda   ~bstasyszyn  what do you say?  ></body> </Action>
<Action id="68036" issue="44385" author="mplisov" type="comment" body="Yep, we switching to getting from discovery only peer list for channel and constructing of peers list  for endorsement simply by rand among them while keeping track of responsive ones" created="2020-02-21 12:54:47.0" updateauthor="mplisov" updated="2020-02-21 12:55:24.0"/>
<Action id="68037" issue="44385" author="yacovm" type="comment" body="You can issue a membership query to get the responsive ones, it&apos;s fairly cheap - just taking a read lock and copying memory." created="2020-02-21 13:07:46.0" updateauthor="yacovm" updated="2020-02-21 13:07:46.0"/>
<Action id="68038" issue="44385" author="mplisov" type="comment" body="There is a little note on membership query. Peer will be in results even if it has firewall rules preventing connecting to their endpoint. Bumped into this several times." created="2020-02-21 13:48:47.0" updateauthor="mplisov" updated="2020-02-21 13:48:47.0"/>
<Action id="68039" issue="44385" author="mplisov" type="comment" created="2020-02-21 14:36:12.0" updateauthor="mplisov" updated="2020-02-21 14:36:12.0"> <body><! CDATA  ~yacovm  Imagine some policy like AND(OUTOF(3, org1..org16), OUTOF(3, ORG17..ORG30) )  In current implementation it would be a quite a big answer from Discovery.  Maybe it would be beneficial for client to receive answer with endpoint groups + number of endpoints to pick randomly from them.  Why would client would want to get precomputed thousands of variants?     ></body> </Action>
<Action id="68040" issue="44385" author="yacovm" type="comment" created="2020-02-21 15:24:00.0" updateauthor="yacovm" updated="2020-02-21 15:24:00.0"> <body><! CDATA Because an endorsement policy can be not only based on organizations, but based on other stuff like OUs, and arbitrary information that exists in the ledger.   Ideally, we would have had discovery just send the SDK an encoded policy tree and the group to peer matching, however then it would mean that all SDKs would need to implement the random tree traversals, and historically  when discovery was implemented in Fabric v1.2, that was unrealistic.   It theory it's possible to go down this path, and have discovery send a principal enumeration in the form of a policy tree, and then a matching graph from principals to peers. However I doubt that this will happen anytime soon, as endorsement policies that are big and complex are very rare.   What is the use case that you see for an endorsement policy that you described? Is it that the world is split into 2 factions and each faction wants some peers of its own to endorse or something like that?  ></body> </Action>
<Action id="68042" issue="44385" author="mplisov" type="comment" created="2020-02-21 15:48:00.0" updateauthor="mplisov" updated="2020-02-21 15:49:47.0"> <body><! CDATA I can imagine complex endorsement policies in case of different types of participants like Govmt agencies + group of auditors + some market participants. And they could agree to include 1+ signatures from each group.   What are recommendations on endorsement policies in case of large number of orgs in channel?  (for example tradelens case)?  ></body> </Action>
<Action id="68049" issue="44385" author="yacovm" type="comment" created="2020-02-21 18:55:20.0" updateauthor="yacovm" updated="2020-02-21 18:55:20.0"> <body><! CDATA I don't really know what is the recommendation and also I don't know what is tradelens' case.  https://github.com/hyperledger/fabric/pull/710   I made it run faster (checked with go bench).  ></body> </Action>
<Action id="68083" issue="44385" author="denyeart" type="comment" body="Merged in release-1.4, release-2.0, master." created="2020-02-25 10:02:04.0" updateauthor="denyeart" updated="2020-02-25 10:02:04.0"/>
<Action id="68086" issue="44385" author="yacovm" type="comment" created="2020-02-25 10:55:03.0" updateauthor="yacovm" updated="2020-02-25 10:55:03.0"> <body><! CDATA I'm not sure this really solves the issue, as this just reduces the cost of a comparison but the evaluation is still with exponential complexity.      ~mplisov  do you want to check to see if it has improved?  ></body> </Action>
<Action id="68090" issue="44385" author="mplisov" type="comment" created="2020-02-25 12:04:35.0" updateauthor="mplisov" updated="2020-02-25 12:05:19.0"> <body><! CDATA I'll try to reproduce it on testnet.   On our production network we changed go-sdk settings to more realistic ones and it solved the problem.  I think that  there is another issue to catch here. Why cpu load didn't go away when client sdk software goes down?  Probably some race between pruning combinations vs calcualate new ones? I'll try to investigate that.  We caught this bug when 3 channels with such "large" endorsing policies appeared.     Yacov, whats your opinion on implementing discover endorsers method with parameter specifying number of returned combinations? I think it could be beneficial to situations with tens of thousands of combinations at least in terms of latency and mem\cpu usage.  Here is the example how fabric-sdk-go uses all this huge array:   https://github.com/hyperledger/fabric/blob/f032ff7d5ef4e3e3e5881a44a3c52bc9f589d296/discovery/client/client.go#L270      ></body> </Action>
<Action id="68093" issue="44385" author="yacovm" type="comment" created="2020-02-25 15:57:36.0" updateauthor="yacovm" updated="2020-02-25 15:57:36.0"> <body><! CDATA {quote}I think that there is another issue to catch here. Why cpu load didn't go away when client sdk software goes down? {quote} I don't know but I doubt this is related to service discovery as it's simply an RPC call and it doesn't allocate any goroutines.  All resources are released once the RPC call ends. {quote}  Yacov, whats your opinion on implementing discover endorsers method with parameter specifying number of returned combinations? I think it could be beneficial to situations with tens of thousands of combinations at least in terms of latency and mem\cpu usage. {quote}    I can do it, but I want to couple it with pruning of organizations that are unreachable prior to the endorsement policy analysis.  The reason is that if you have lots of organizations then it increases the chance that the peers are not reachable.  Currently, discovery does the endorsement analysis without taking into account whether the organizations are even reachable, and relies on the fact that you'll just skip combinations that no peers are alive (since you get the peers too).  If we prune the combinations ahead we might get into a situation where the result contains only combinations with organizations with no reachable peers.     This is not simple, but also not too complex, I just need time which unfortunately is scarce these days :(    {quote}Here is the example how fabric-sdk-go uses all this huge array: {quote} This is my code imported from the Fabric core :)  ></body> </Action>
<Action id="68104" issue="44385" author="mplisov" type="comment" created="2020-02-26 09:31:58.0" updateauthor="mplisov" updated="2020-02-26 09:31:58.0"> <body><! CDATA Hello Yacov,  Tested with 1.4.6. Unfortunately it din't solve the issue. Attaching trace.  I can confirm that stopping gateway software doesn't stop cpu load of peer process (waited 3mins) and checked logs that no discover grpc calls.  ></body> </Action>
<Action id="68108" issue="44385" author="yacovm" type="comment" body="Is the SVG file you uploaded corrupted?  I can&apos;t see anything but gray" created="2020-02-26 10:20:41.0" updateauthor="yacovm" updated="2020-02-26 10:20:41.0"/>
<Action id="68109" issue="44385" author="mplisov" type="comment" body="save as.. and it opens fine. clicking in Jira gives me blank too." created="2020-02-26 11:03:52.0" updateauthor="mplisov" updated="2020-02-26 11:03:52.0"/>
<Action id="68112" issue="44385" author="yacovm" type="comment" body="Doesn&apos;t work for me... any chance you convert it to PNG or something?" created="2020-02-26 12:40:28.0" updateauthor="yacovm" updated="2020-02-26 12:40:28.0"/>
<Action id="68113" issue="44385" author="mplisov" type="comment" body="Attached pdf" created="2020-02-26 12:52:45.0" updateauthor="mplisov" updated="2020-02-26 12:52:45.0"/>
<Action id="68120" issue="44385" author="yacovm" type="comment" body="I&apos;m re-opening this and will take care of it when i find time" created="2020-02-26 16:59:28.0" updateauthor="yacovm" updated="2020-02-26 16:59:28.0"/>
