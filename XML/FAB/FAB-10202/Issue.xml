<Issue id="30377" key="FAB-10202" number="10202" project="10002" reporter="ales" assignee="ales" creator="ales" type="10003" summary="Improve detection of cc invocation after cc upgrade" priority="3" resolution="10000" status="6" created="2018-05-18 09:51:55.0" updated="2019-01-16 10:19:17.0" resolutiondate="2019-01-16 10:19:17.0" votes="0" watches="4" workflowId="48217"> <description><! CDATA It is important that fabric guarantees the following    "_if a chaincode is upgraded, all subsequent transactions invoking that chaincode must use the new chaincode definition (incl. new code, new endorsement policy, new ESCC/VSCC etc.)"_     Currently fabric has 2 ways of doing so: # invocations of a chaincode introduce a read dependency in the LSCC namespace for the chaincode definition; if tx_\{i} upgrades the chaincode and tx_\{i+1} invokes the old chaincode, tx_\{i+1} will be marked as invalid because of the MVCC error # function _invalidTXsForUpgradeCC_ tracks chaincodes that are invoked after an upgrade, and invalidates transactions based on that  This needs to be restructured for the following reasons: * there is no code in the committer checking that appropriate LSCC read dependencies have been introduced for all chaincodes that have been invoked (i.e. for which there is a rwset side-effect) * function _invalidTXsForUpgradeCC_ only handles direct chaincode invocations and not chaincodes that are invoked in a chaincode-to-chaincode way  We should either add a check that appropriate LSCC read dependencies have been introduced (and remove invalidTXsForUpgradeCC), or fix invalidTXsForUpgradeCC so that it also handles chaincode-to-chaincode invocations.  ></description> </Issue>
