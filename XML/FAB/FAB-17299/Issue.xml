<Issue id="43814" key="FAB-17299" number="17299" project="10002" reporter="yacovm" assignee="caod" creator="yacovm" type="10003" summary="Adjust lifecycle support to support collection level endorsement policies" priority="3" resolution="10000" status="6" created="2020-01-02 15:02:50.0" updated="2020-04-15 18:53:45.0" resolutiondate="2020-04-15 18:53:45.0" votes="0" watches="2" workflowId="57667"> <description><! CDATA The discovery/support/chaincode package currently has the following function:  {code} func (s *DiscoverySupport) PoliciesByChaincode(channel string, cc string, _ ...string)   policies.InquireablePolicy { 	chaincodeData := s.ci.Metadata(channel, cc, false) 	if chaincodeData == nil { 		logger.Info("Chaincode", cc, "wasn't found") 		return nil 	} 	pol := &common2.SignaturePolicyEnvelope{} 	if err := proto.Unmarshal(chaincodeData.Policy, pol); err != nil { 		logger.Warning("Failed unmarshaling policy for chaincode", cc, ":", err) 		return nil 	} 	if len(pol.Identities) == 0 || pol.Rule == nil { 		logger.Warningf("Invalid policy, either Identities(%v) or Rule(%v) are empty:", pol.Identities, pol.Rule) 		return nil 	} 	return   policies.InquireablePolicy{inquire.NewInquireableSignaturePolicy(pol)} } {code}  We need to adjust it to return several endorsement policies in case we have a collection level endorsement policy among the given collections.   ></description> </Issue>
