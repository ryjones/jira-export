<Issue id="41714" key="FAB-16267" number="16267" project="10002" reporter="nakaike" assignee="nakaike" creator="nakaike" type="10001" summary="Reducing lock contentions for transaction validation" priority="3" status="10100" created="2019-08-09 04:11:55.0" updated="2019-08-09 08:03:38.0" votes="0" watches="2" workflowId="54748"> <description><! CDATA In the current implementation, transactions are validated by multiple goroutines in parallel. Although the parallel transaction validation improves the performance, it has a room to improve the performance further by reducing lock contentions which occur when multiple validation goroutines access shared objects.  The procedure of the parallel validation is as follows. # A committer goroutine invokes multiple validation goroutines with assigning a transaction ID to each validation goroutine. # Each validation goroutine extracts dependencies from transactions which IDs are equal to or less than its own transaction ID. A dependency happens when a transaction changes an endorsement policy for the following transactions. # Each validation goroutine waits for all of the dependencies to be extracted from transactions which IDs are equal to or less than its own transaction ID. # Each validation goroutine validates its own transaction.  In Step 2 and 3, there are three shared objects that cause lock contentions.  Array of sync.Once: sync.Once is used to call a function, which extracts a dependency from a transaction, only once because multiple goroutines try to extract dependencies from the same transaction. sync.Once is stored in an array which is indexed by transaction IDs. Since the array is shared by multiple validation goroutines, lock contentions occur to acquire a lock for the array.  sync.Once: sync.Once has a flag to indicate whether a function is called. It tries to set the flag by using compare-and-swap in the fast path. When the compare-and-swap fails, synce.Once acquires a lock to set the flag. When multiple goroutines try to call a function by using the same sync.Once object in short timeframe, compare-and-swap fails frequently, and then lock contentions occur.  Map of dependencies: This map is protected by a reader/writer. If read accesses are dominant, lock contentions rarely occur. In this case, however, multiple validation goroutines continue to extract dependencies and store them in this map with acquiring the write lock, resulting in lock contentions.  Proposal for changes # Make each validation goroutine extract its own dependency (i.e. eliminate a loop to extract dependencies from transaction which IDs are less than a given transaction ID) # Use a reader/writer lock to access an array of sync.Once # Use sync.Map to store dependencies  This is a prototype of these changes  https://gerrit.hyperledger.org/r/c/fabric/+/32805.   Performance improvements with these changes are as follows. * +13% TPS: Sending a single PutState transaction iteratively * +7% TPS: Sending a single GetState transaction iteratively  ></description> </Issue>
