<Issue id="16863" key="FAB-4013" number="4013" project="10002" reporter="nishi" assignee="kchristidis" creator="nishi" type="10004" summary="Orderer panic when 1Kafka was in cluster" priority="4" resolution="10000" status="6" created="2017-05-18 16:06:17.0" updated="2018-07-20 14:12:50.0" resolutiondate="2017-06-15 17:08:16.0" votes="0" watches="4" workflowId="38572"> <environment><! CDATA       ></environment> <description><! CDATA fabric-sdk-node *8e878750e8d9d4a213e976eceb57699393f74aeb* fabric *217b8f60c625a6ffaddd3219bd60baca415e2b7c*  When orderer failed to recognize newly elected leader as in  https://jira.hyperledger.org/browse/FAB-4012  We tried to start and stop orderer(to recover) when only kafka1 broker (newly created leader) was running.  "docker stop orderer0.example.com"  "docker start order0.example.com"  This time orderer again failed to recognize kafak1 broker and eventually crashed:  Orderer Logs {code:java}  2017-05-18 15:06:49.944 UTC  fsblkstorage  nextBlockBytesAndPlacementInfo -> DEBU 0f4 Remaining bytes= 5840 , Going to peek  8  bytes 2017-05-18 15:06:49.944 UTC  fsblkstorage  nextBlockBytesAndPlacementInfo -> DEBU 0f5 Returning blockbytes - length= 5838 , placementInfo={fileNum= 0 , startOffset= 39361 , bytesOffset= 39363 } 2017-05-18 15:06:49.944 UTC  orderer/multichain  newChainSupport -> DEBU 0f6  channel: mychannel  Retrieved metadata for tip of chain (block #5): value:"\010\016" 2017-05-18 15:06:49.944 UTC  orderer/kafka  newChain -> DEBU 0f7  channel: mychannel  Starting chain with last persisted offset 14 and last recorded block 5 2017-05-18 15:06:52.944 UTC  orderer/kafka  newProducer -> DEBU 0f8 Connecting to Kafka cluster:  kafka0:9092 kafka1:9092 kafka2:9092  2017-05-18 15:06:55.944 UTC  orderer/kafka  newProducer -> DEBU 0f9 Connecting to Kafka cluster:  kafka0:9092 kafka1:9092 kafka2:9092  2017-05-18 15:06:58.944 UTC  orderer/kafka  newProducer -> DEBU 0fa Connecting to Kafka cluster:  kafka0:9092 kafka1:9092 kafka2:9092  2017-05-18 15:07:01.944 UTC  orderer/kafka  newProducer -> DEBU 0fb Connecting to Kafka cluster:  kafka0:9092 kafka1:9092 kafka2:9092  2017-05-18 15:07:04.944 UTC  orderer/kafka  newProducer -> DEBU 0fc Connecting to Kafka cluster:  kafka0:9092 kafka1:9092 kafka2:9092  2017-05-18 15:07:07.944 UTC  orderer/kafka  newProducer -> DEBU 0fd Connecting to Kafka cluster:  kafka0:9092 kafka1:9092 kafka2:9092  2017-05-18 15:07:10.944 UTC  orderer/kafka  newProducer -> DEBU 0fe Connecting to Kafka cluster:  kafka0:9092 kafka1:9092 kafka2:9092  2017-05-18 15:07:13.944 UTC  orderer/kafka  newProducer -> DEBU 0ff Connecting to Kafka cluster:  kafka0:9092 kafka1:9092 kafka2:9092  2017-05-18 15:07:16.944 UTC  orderer/kafka  newProducer -> DEBU 100 Connecting to Kafka cluster:  kafka0:9092 kafka1:9092 kafka2:9092  2017-05-18 15:07:19.944 UTC  orderer/kafka  newProducer -> DEBU 101 Connecting to Kafka cluster:  kafka0:9092 kafka1:9092 kafka2:9092  2017-05-18 15:07:22.944 UTC  orderer/kafka  newProducer -> DEBU 102 Connecting to Kafka cluster:  kafka0:9092 kafka1:9092 kafka2:9092  2017-05-18 15:07:25.944 UTC  orderer/kafka  newProducer -> DEBU 103 Connecting to Kafka cluster:  kafka0:9092 kafka1:9092 kafka2:9092  2017-05-18 15:07:28.944 UTC  orderer/kafka  newProducer -> DEBU 104 Connecting to Kafka cluster:  kafka0:9092 kafka1:9092 kafka2:9092  2017-05-18 15:07:31.944 UTC  orderer/kafka  newProducer -> DEBU 105 Connecting to Kafka cluster:  kafka0:9092 kafka1:9092 kafka2:9092  2017-05-18 15:07:34.944 UTC  orderer/kafka  newProducer -> DEBU 106 Connecting to Kafka cluster:  kafka0:9092 kafka1:9092 kafka2:9092  2017-05-18 15:07:37.944 UTC  orderer/kafka  newProducer -> DEBU 107 Connecting to Kafka cluster:  kafka0:9092 kafka1:9092 kafka2:9092  2017-05-18 15:07:40.944 UTC  orderer/kafka  newProducer -> DEBU 108 Connecting to Kafka cluster:  kafka0:9092 kafka1:9092 kafka2:9092  2017-05-18 15:07:43.944 UTC  orderer/kafka  newProducer -> DEBU 109 Connecting to Kafka cluster:  kafka0:9092 kafka1:9092 kafka2:9092  2017-05-18 15:07:46.944 UTC  orderer/kafka  newProducer -> DEBU 10a Connecting to Kafka cluster:  kafka0:9092 kafka1:9092 kafka2:9092  2017-05-18 15:07:49.944 UTC  orderer/kafka  newProducer -> DEBU 10b Connecting to Kafka cluster:  kafka0:9092 kafka1:9092 kafka2:9092  2017-05-18 15:07:50.716 UTC  orderer/kafka  newProducer -> CRIT 10c Failed to create Kafka producer: kafka: client has run out of available brokers to talk to (Is your cluster reachable?) panic: Failed to create Kafka producer: kafka: client has run out of available brokers to talk to (Is your cluster reachable?)   goroutine 1  running : panic(0xb031e0, 0xc4205634b0) /opt/go/src/runtime/panic.go:500 +0x1a1 github.com/hyperledger/fabric/vendor/github.com/op/go-logging.(*Logger).Panicf(0xc4201e1530, 0xc30f64, 0x23, 0xc420563400, 0x1, 0x1) /opt/gopath/src/github.com/hyperledger/fabric/vendor/github.com/op/go-logging/logger.go:194 +0x127 github.com/hyperledger/fabric/orderer/kafka.newProducer(0xc420278840, 0x3, 0x4, 0x0, 0x9, 0x0, 0x1, 0xb2d05e00, 0xdf8475800, 0x0, ...) /opt/gopath/src/github.com/hyperledger/fabric/orderer/kafka/producer.go:50 +0x283 github.com/hyperledger/fabric/orderer/kafka.glob..func2(0xc420278840, 0x3, 0x4, 0x0, 0x9, 0x0, 0x1, 0xb2d05e00, 0xdf8475800, 0x0, ...) /opt/gopath/src/github.com/hyperledger/fabric/orderer/kafka/orderer.go:58 +0xb4 github.com/hyperledger/fabric/orderer/kafka.newChain(0x11b5d40, 0xc420182a50, 0x11b6c40, 0xc420360d70, 0xe, 0xc4207ad650) /opt/gopath/src/github.com/hyperledger/fabric/orderer/kafka/orderer.go:118 +0x432 github.com/hyperledger/fabric/orderer/kafka.(*consenterImpl).HandleChain(0xc420182a50, 0x11b6c40, 0xc420360d70, 0xc42019be60, 0x3, 0x3, 0x0, 0x5) /opt/gopath/src/github.com/hyperledger/fabric/orderer/kafka/orderer.go:83 +0x8f github.com/hyperledger/fabric/orderer/multichain.newChainSupport(0xc420098e00, 0xc420098d60, 0xc4202324e0, 0x11acbc0, 0x11f3900, 0x1) /opt/gopath/src/github.com/hyperledger/fabric/orderer/multichain/chainsupport.go:136 +0x602 github.com/hyperledger/fabric/orderer/multichain.NewManagerImpl(0x11af3c0, 0xc4203542c0, 0xc4202324e0, 0x11acbc0, 0x11f3900, 0x0, 0x0) /opt/gopath/src/github.com/hyperledger/fabric/orderer/multichain/manager.go:131 +0x8d9 main.main() /opt/gopath/src/github.com/hyperledger/fabric/orderer/main.go:174 +0x179d {code}    Note: After we restarted all the Kafka Brokers, and we restarted orderer, it connected to cluster and recognized kafka cluster, {code:java}  2017-05-18 15:16:06.529 UTC  fsblkstorage  nextBlockBytesAndPlacementInfo -> DEBU 1c6 Remaining bytes= 17397 , Going to peek  8  bytes 2017-05-18 15:16:06.529 UTC  fsblkstorage  nextBlockBytesAndPlacementInfo -> DEBU 1c7 Returning blockbytes - length= 17394 , placementInfo={fileNum= 0 , startOffset= 6647 , bytesOffset= 6650 } 2017-05-18 15:16:06.529 UTC  orderer/multichain  newChainSupport -> DEBU 1c8  channel: testchainid  Retrieved metadata for tip of chain (block #1): value:"\010\002" 2017-05-18 15:16:06.529 UTC  orderer/kafka  newChain -> DEBU 1c9  channel: testchainid  Starting chain with last persisted offset 2 and last recorded block 1 2017-05-18 15:16:09.529 UTC  orderer/kafka  newProducer -> DEBU 1ca Connecting to Kafka cluster:  kafka0:9092 kafka1:9092 kafka2:9092  2017-05-18 15:16:09.536 UTC  orderer/kafka  newProducer -> DEBU 1cb Connected to the Kafka cluster 2017-05-18 15:16:09.536 UTC  orderer/multichain  NewManagerImpl -> INFO 1cc Starting with system channel testchainid and orderer type kafka 2017-05-18 15:16:09.536 UTC  orderer/kafka  Start -> DEBU 1cd  channel: testchainid  Posting the CONNECT message... 2017-05-18 15:16:09.544 UTC  orderer/kafka  Send -> DEBU 1ce  channel testchainid  Posted blob to the Kafka cluster (offset number: 3) 2017-05-18 15:16:09.544 UTC  orderer/kafka  Start -> DEBU 1cf  channel: testchainid  CONNECT message posted successfully 2017-05-18 15:16:09.553 UTC  orderer/kafka  newConsumer -> DEBU 1d0  channel: testchainid  Created new consumer for session (beginning offset: 3) 2017-05-18 15:16:09.553 UTC  orderer/main  NewServer -> INFO 1d1 Starting orderer 2017-05-18 15:16:09.553 UTC  orderer/main  main -> INFO 1d2 Beginning to serve requests 2017-05-18 15:16:09.554 UTC  orderer/kafka  loop -> DEBU 1d3  channel: testchainid  Successfully unmarshalled consumed message. Inspecting type... 2017-05-18 15:16:09.554 UTC  orderer/kafka  loop -> DEBU 1d4  channel: testchainid  It's a connect message - ignoring{code}    But network is still left in a messy state, and invoke-transactions fails to process  ></description> </Issue>
