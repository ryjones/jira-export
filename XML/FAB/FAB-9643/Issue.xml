<Issue id="29586" key="FAB-9643" number="9643" project="10002" reporter="yacovm" assignee="yacovm" creator="yacovm" type="10004" summary="Return an error if collection isn&apos;t found" priority="3" resolution="10000" status="6" created="2018-04-22 13:18:13.0" updated="2018-07-20 14:16:23.0" resolutiondate="2018-04-23 02:35:23.0" votes="0" watches="1" workflowId="41918"> <description><! CDATA The simpleCollectionStore implementation returns nil, nil in case the collection isn't found when calling RetrieveCollection . {code:java} func (c *simpleCollectionStore) retrieveSimpleCollection(cc common.CollectionCriteria) (*SimpleCollection, error) {     collections, err := c.retrieveCollectionConfigPackage(cc)     if err != nil {         return nil, err     }     if collections == nil {         return nil, nil     }{code} Gossip checks for the error and assumes that if error is nil then the collection has been retrieved, though it isn't so.  However, it's safe to omit this "if collections == nil" check because the function retrieveCollectionConfigPackage never actually returns nil, nil: {code:java} func (c *simpleCollectionStore) retrieveCollectionConfigPackage(cc common.CollectionCriteria) (*common.CollectionConfigPackage, error) {     qe, err := c.s.GetQueryExecutorForLedger(cc.Channel)     if err != nil {         return nil, errors.WithMessage(err, fmt.Sprintf("could not retrieve query executor for collection criteria %#v", cc))     }     defer qe.Done()      cb, err := qe.GetState("lscc", c.s.GetCollectionKVSKey(cc))     if err != nil {         return nil, errors.WithMessage(err, fmt.Sprintf("error while retrieving collection for collection criteria %#v", cc))     }     if cb == nil {         return nil, NoSuchCollectionError(cc)     }      collections := &common.CollectionConfigPackage{}     err = proto.Unmarshal(cb, collections)     if err != nil {         return nil, errors.Wrapf(err, "invalid configuration for collection criteria %#v", cc)     }      return collections, nil }{code}  ></description> </Issue>
