<Action id="47685" issue="32149" author="pandrejko" type="comment" body=" ~joe-alewine   ~negupta   ~wjzheng  ^^^" created="2018-07-23 22:13:48.0" updateauthor="pandrejko" updated="2018-07-23 22:13:48.0"/>
<Action id="47820" issue="32149" author="pandrejko" type="comment" body=" ~bmos299  - Is there someone from your team that we could collaborate with on this topic - I&apos;d really like to get this done." created="2018-07-25 17:58:13.0" updateauthor="pandrejko" updated="2018-07-25 18:24:01.0"/>
<Action id="48147" issue="32149" author="pandrejko" type="comment" created="2018-07-30 20:59:20.0" updateauthor="pandrejko" updated="2018-07-30 20:59:20.0"> <body><! CDATA Found this information in the docs:  https://hyperledger-fabric.readthedocs.io/en/release-1.2/msp.html#msp-setup-on-the-peer-orderer-side   Still investigating  ></body> </Action>
<Action id="48269" issue="32149" author="pandrejko" type="comment" created="2018-08-01 21:36:12.0" updateauthor="pandrejko" updated="2018-08-01 21:36:12.0"> <body><! CDATA Here are my notes from what I've discovered so far:  *Admin cert* – This folder contains a list of identities allowed to administer (installing/instantiating chaincode, creating channels, etc).) the peer. Therefore, in order to be able to administer a peer, the entity administering the peer (such as a client application) must have their signcert (their public key identity) the peer's /admincerts folder. This folder contains a list of identities that define the actors who have the role of administrators for this entity.  Typically resides under /mnt/crypto/peer/peer/msp/admincerts  *CA Cert –* Each entity has its own CA. The CA represents the root cert. It is the top level certificate which represents the trusted authority for the network. The cert in the /cacert folder is the public CA identity. The CA is the _issuer_ for the signcert and admin certs. The *CACert* is a bundle of CA certificates that you use to verify that the server is really the correct site you're talking to (when it presents its certificate in the SSL handshake). Typically resides under: /mnt/crypto/peer/peer/msp/cacerts  *Intermediate certs* – Each entity has its own Intermediate CA which has their certificates issued by the root CA or another intermediate authority, allowing the establishment of a “chain of trust” for any certificate that is issued by any CA in the chain. This ability to track back to the Root CA allows the function of CAs to scale while still providing security. Typically resides under /mnt/crypto/peer/peer/msp/intermediatecerts  *Keystore = Private key* - Transactions are signed by private key and then verified by their public key which has been shared with other entities. Access to this folder must be limited only to the identities of users who have administrative responsibility on the peer. Reside in /mnt/crypto/peer/peer/msp/keystore.  *Signcert = Public key -* Signcerts are used for endorsing functions --  for example to sign a transaction proposal response, as part of the endorsement phase. /mnt/crypto/peer/peer/msp/signcerts  *TLS certs* – Use of TLS is strongly recommended to provide a secured connection; used to secure the +communication+ channel; Needs to be shared with every party that the entity will communicate with. Cert resides in  /mnt/msp/tls/cacert.pem and is typically passed on CLI commands. You need to get the TLS cert from the TLS CA.  ></body> </Action>
<Action id="48273" issue="32149" author="yacovm" type="comment" created="2018-08-01 22:30:47.0" updateauthor="yacovm" updated="2018-08-01 22:30:47.0"> <body><! CDATA  ~pandrejko  -  {quote}*TLS certs* – Use of TLS is strongly recommended to provide a secured connection; used to secure the +communication+ channel; Needs to be shared with every party that the entity will communicate with. Cert resides in  /mnt/msp/tls/cacert.pem and is typically passed on CLI commands. You need to get the TLS cert from the TLS CA. {quote} These are TLS CA certificates that need to be shared among the parties... the actual TLS certificates are exchanged during the TLS handshake.   ~nileshdeotale  -  {quote}Being new to hyperledger fabric, I've not been able to find clear description of various security certificates that are required for a say multi org blockchain service to work. {quote}  the  MSP section|https://hyperledger-fabric.readthedocs.io/en/latest/msp.html  is a very good source of information for this.  ></body> </Action>
<Action id="50331" issue="32149" author="elli-androulaki" type="comment" body="Hi,  ~nileshdeotale  is this item still relevant?" created="2018-09-12 09:42:01.0" updateauthor="elli-androulaki" updated="2018-09-12 09:42:01.0"/>
<Action id="66578" issue="32149" author="pandrejko" type="comment" body=" ~nileshdeotale I am in the process of adding a new key concept topic for MSP. See https://github.com/hyperledger/fabric/pull/307" created="2020-01-09 22:44:00.0" updateauthor="pandrejko" updated="2020-01-09 22:44:00.0"/>
<Action id="71251" issue="32149" author="pandrejko" type="comment" created="2021-01-12 18:54:43.0" updateauthor="pandrejko" updated="2021-01-12 18:54:51.0"> <body><! CDATA This has been addressed for a while now in the MSP Key Concept topic that we created. https://hyperledger-fabric.readthedocs.io/en/latest/membership/membership.html#msp-structure  Closing.  ></body> </Action>
<Action id="71252" issue="32149" author="pandrejko" type="comment" body="Done - https://hyperledger-fabric.readthedocs.io/en/latest/membership/membership.html#msp-structure" created="2021-01-12 18:55:04.0" updateauthor="pandrejko" updated="2021-01-12 18:55:04.0"/>
