<Action id="25240" issue="17427" author="harrijk" type="comment" created="2017-06-03 22:02:26.0" updateauthor="harrijk" updated="2017-06-03 22:02:26.0"> <body><! CDATA I've been able to install and instantiate chaincode when running native binaries by first setting up environments variables for both the orderer and peer.  Sample env files that I used for my testing:  {code:java}  Orderer: #Natively start the HLF Orderer export ORDERER_GENERAL_LOGLEVEL=debug export ORDERER_GENERAL_LISTENADDRESS=0.0.0.0 export ORDERER_GENERAL_GENESISMETHOD=file export ORDERER_GENERAL_GENESISFILE=/root/native-hlf/channel-artifacts/genesis.block export ORDERER_GENERAL_LOCALMSPID=OrdererMSP export ORDERER_GENERAL_LOCALMSPDIR=/root/native-hlf/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp # TLS options export ORDERER_GENERAL_TLS_ENABLED=false #export ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key #export ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt #export ORDERER_GENERAL_TLS_ROOTCAS= /var/hyperledger/orderer/tls/ca.crt   export ORDERER_FILELEDGER_LOCATION=/root/native-hlf/orderer/ledger   Peer: # Start HLF Peer  #CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=e2ecli_default #export CORE_LOGGING_LEVEL=ERROR export CORE_LOGGING_LEVEL=DEBUG export CORE_PEER_TLS_ENABLED=false export CORE_PEER_ENDORSER_ENABLED=true export CORE_PEER_GOSSIP_USELEADERELECTION=false export CORE_PEER_GOSSIP_ORGLEADER=true  # The following setting skips the gossip handshake since we are # are not doing mutual TLS #export CORE_PEER_GOSSIP_SKIPHANDSHAKE=true  #TLS options #export CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt #export CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key #export CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt  export CORE_PEER_PROFILE_ENABLED=true export CORE_PEER_ID=peer0.org1.example.com export CORE_PEER_ADDRESS=peer0.org1.example.com:7051 #export CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com:7051 export CORE_PEER_LOCALMSPID=Org1MSP export CORE_PEER_MSPCONFIGPATH=/root/native-hlf/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp export CORE_PEER_FILESYSTEMPATH=/root/native-hlf/peer/ledger {code}  I had setup my own crypto and channel artifacts prior to launching the orderer and peer natively.  Perhaps your goal is to have a working peer and orderer and instantiate chaincode using the default settings.  ></body> </Action>
<Action id="25241" issue="17427" author="ratnakar" type="comment" created="2017-06-03 23:20:44.0" updateauthor="ratnakar" updated="2017-06-03 23:20:44.0"> <body><! CDATA  ~harrijk  Yes goal is to use the default settings (fabric/sampleconfig and channel '*_testchainid_*').  For instance, chaincode developers might wanted to verify chaincode functionality using the default settings from CLI without generating the crypto and channel artifacts.  ></body> </Action>
<Action id="25254" issue="17427" author="muralisr" type="comment" body=" ~Ratnakar  &quot;testchainid&quot; has been removed as of https://jira.hyperledger.org/browse/FAB-3358.  The only way to use the fabric is by creating a channel and joining it." created="2017-06-04 12:34:58.0" updateauthor="muralisr" updated="2017-06-04 12:34:58.0"/>
<Action id="25260" issue="17427" author="ratnakar" type="comment" body="Closing the issue as default channel *_testchainid_* has been removed from fabric." created="2017-06-04 14:54:22.0" updateauthor="ratnakar" updated="2017-06-04 18:44:51.0"/>
<Action id="25292" issue="17427" author="bmos299" type="comment" body="Hi  ~muralisr , I thought you liked the test *_testchainid_* for the developer running the peer in dev mode?  I like the idea of the pure developer having some easy way to simply run the chaincode.  What do you think?" created="2017-06-04 22:13:09.0" updateauthor="bmos299" updated="2017-06-04 22:13:09.0"/>
<Action id="25294" issue="17427" author="muralisr" type="comment" created="2017-06-04 23:47:56.0" updateauthor="muralisr" updated="2017-06-04 23:47:56.0"> <body><! CDATA  ~bmos299  That's the positive. The negatives kinda outweighed (sigh) * testchainid would have be somehow disabled in prod. We don't want that channel around in the peer in prod * channels being such a central concept it could be argued it needs to be forefront in dev /test too  In the end its just another simple thing that developer needs to get used to. Note that docs/source/peer-chaincode-devmode.rst does not use testchainid but has instructions for create/join channels (two of them in fact !)    ></body> </Action>
<Action id="25296" issue="17427" author="bmos299" type="comment" body="Ok.  Thanks  ~muralisr . I know we are swamped...but in the future, I think having a pure chaincode dev environment (IDE) is a positive.  Even using a built-in solo orderer so all they have to do is write chaincode." created="2017-06-04 23:57:36.0" updateauthor="bmos299" updated="2017-06-04 23:57:36.0"/>
