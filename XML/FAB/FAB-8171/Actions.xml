<Action id="39939" issue="27580" author="joe-alewine" type="comment" body=" ~odowdaibm " created="2018-02-09 18:12:04.0" updateauthor="joe-alewine" updated="2018-02-09 18:12:04.0"/>
<Action id="55510" issue="27580" author="pandrejko" type="comment" body="Would it be worth mentioning the double-spend problem here or is that more appropriate for the transaction topic? (I think I mentioned that to Isaac as well.)" created="2019-01-10 20:36:49.0" updateauthor="pandrejko" updated="2019-01-10 20:36:49.0"/>
<Action id="55798" issue="27580" author="joe-alewine" type="comment" created="2019-01-18 16:05:33.0" updateauthor="joe-alewine" updated="2019-01-18 16:23:57.0"> <body><! CDATA Some text to start with. Comments welcome:     *What is ordering?*  Orderers are key components in a network because they perform a few essential functions: - They literally *order* the blocks of transactions that are sent to the peers to be written to their ledgers, a process called "ordering". If these transactions were instead bundled and ordered at the peers themselves, it would increase the possibility of one peer writing a transaction to its ledger where another peer did not, creating a state fork.  - They maintain the *orderer system channel*, the place where of the *consortium*, the list of peer organizations permitted to create channels, resides.  - They perform important identity validation checks. For example, if an organization tries to create a channel when it is not a member of the orderer's consortium, the request will be denied. Orderers also validate against behaviors in transaction channels, such as the permissions for changing a channel configuration.  ></body> </Action>
<Action id="56497" issue="27580" author="joe-alewine" type="comment" created="2019-02-01 14:17:13.0" updateauthor="joe-alewine" updated="2019-02-01 14:17:13.0"> <body><! CDATA Some comments on the above from  ~kchristidis , who's leading RAFT development:     Just a recap from our earlier chat:   1. I think the justification for the existence of the orderers in bullet point #1 needs to go; it is not accurate. We _could_ build orderer capability into the peers and things would work fine; splitting the roles into peers and orderers just allows for finer-grained scaling (if peers are the bottleneck, just upgrade those!) and cleaner architectural diagrams.   2. Here's how I've always described the ordering service. The ordering service does:   a. Ordering (duh): It orders incoming client transactions into blocks that are then relayed to the peers, etc.   b. ACL: It enforces the policies decided by the consortium or the channel administrators. These policies dictate everything from who gets to read from/write to a channel, to who can create/modify a channel.   c. Reconfiguration, i.e. it runs the reconfiguration engine for channels. Remember that who gets to modify a configuration element in a channel is subject to the policies that the consortium/channel administrators set when they created the consortium/channel. And most of these configuration elements can be modified at any point in time. But the actual entity that takes your "I would like to modify the batch timeout from 1 second to 2 seconds in channel 'foo' configuration update", processes it to see if you have the proper administrative rights for that configuration update, validates it against the existing configuration, generates a new configuration (new = existing + submitted delta), and relays it to the peers? That entity is the ordering service.   We don't focus much on the consortiums but we should, and you are right to point that out in your original text. A minor edit I would propose on your consortium bullet point: I'd talk about consortiums (plural): a consortium is essentially our multi-tenancy vehicle; an ordering service by design can host multiple consortiums, i.e. multiple groups of peer orgs that are allowed to create channels.  ></body> </Action>
<Action id="57438" issue="27580" author="joe-alewine" type="comment" created="2019-02-21 18:54:48.0" updateauthor="joe-alewine" updated="2019-02-21 18:54:48.0"> <body><! CDATA Taking some content from the "Peers" doc —  https://hyperledger-fabric.readthedocs.io/en/release-1.4/peers/peers.html  — to use here, in addition to a few images developed for that doc. Will need to edit the peers doc as a result.     ></body> </Action>
<Action id="57624" issue="27580" author="joe-alewine" type="comment" created="2019-02-26 22:28:20.0" updateauthor="joe-alewine" updated="2019-02-26 22:28:20.0"> <body><! CDATA The CR is here:  https://gerrit.hyperledger.org/r/c/29449/   Thanks to everyone for the comments so far.  ></body> </Action>
