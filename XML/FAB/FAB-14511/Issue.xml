<Issue id="38250" key="FAB-14511" number="14511" project="10002" reporter="manish-sethi" assignee="manish-sethi" creator="manish-sethi" type="10002" summary="Handle couchdb crash during block commit (with postorder transactions)" priority="3" resolution="10000" status="6" created="2019-03-06 15:35:24.0" updated="2019-04-01 18:49:58.0" resolutiondate="2019-04-01 18:49:58.0" votes="0" watches="1" workflowId="49877"> <description><! CDATA With the introduction of tokens that are implemented as post order transactions, there is a problem with couch database. Couchdb does not offer batch level commit atomicity. During a block commit, while updating state, a couchdb crash may take place. However, part of the state updates may have gone in. Upon restart, when a post order transaction executes, it is sort of running against the wrong world state and would lead to a different (and wrong) results.  With the endorser transactions, we manage the statedb recovery during start with just the validation flag since writes were already part of the transaction present in the block. However, with the presence of post order transactions, the writes are generated during commit based on the world state managed in the statedb.  In order to recover the statedb in this case, we need to persists writes on a stable storage before applying to couchdb (sort of redo logs).  ></description> </Issue>
