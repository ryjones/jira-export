<Action id="46671" issue="31423" author="denyeart" type="comment" created="2018-06-28 13:10:49.0" updateauthor="denyeart" updated="2018-06-28 13:11:34.0"> <body><! CDATA  ~dongming  Did the queries actually work on all the peers?Â  That is, is there a symptom from user perspective?  I'm trying to understand how queries could work if there was no chaincode container up... or do you suspect it was up for the queries but then went down?  Also, have you noticed any change in behavior between releases?Â  Or is this simply a new test?  ></body> </Action>
<Action id="46963" issue="31423" author="sykesm" type="comment" created="2018-07-05 17:28:15.0" updateauthor="sykesm" updated="2018-07-05 17:28:15.0"> <body><! CDATA First chaincode invocation arrives at 18:58:49.554 and initiates the image build and container creation and completes at 19:01:54.575. {code:java}  36m2018-06-27 18:58:49.554 UTC  chaincode  func1 -> DEBU 140d 0m chaincode sample_cc_ch1:v0 is being launched ...  36m2018-06-27 19:01:54.575 UTC  dockercontroller  deployImage -> DEBU 256d7 0m Created image: dev-peer1.org1.example.com-sample_cc_ch1-v0-d029892e6a969c91ae28bef9d5f1a09ab5cb4e7f95362e71c3d89b1a0d438eb2 {code} During those 3 minutes, it appears the client that initiated the transaction that caused the chaincode to launch went away. During those same 3 minutes, 2000 requests to invoke the chaincode failed.  This is a problem as the context from the grpc stream handler has been propagated all the way to the container launcher and when the client goes, the context is canceled. When the context it canceled, it doesn't actually stop the image build and container create process but it does ensure that they fail.  So, what we see (and I don't think this is any different from 1.1) is that the image is successfully created, the container is started, and then the container is immediately stopped. We also see that while the container is starting, all transactions that require the chaincode are bounced while the container is starting - instead of queuing them up.  1.1:  https://github.com/hyperledger/fabric/blob/ff5e861deba7b394ed1aaaa85f9220c4677dc6ff/core/container/controller.go#L259-L266  1.2:  https://github.com/hyperledger/fabric/blob/77c3aa6ce5b0cfba93bfda009095886dbcadff91/core/container/controller.go#L188-L194   ></body> </Action>
<Action id="46964" issue="31423" author="sykesm" type="comment" created="2018-07-05 17:33:43.0" updateauthor="sykesm" updated="2018-07-05 17:33:43.0"> <body><! CDATA To be clear, with the logs that were provided, the container *did* start on org1.peer1. After it was up, it was explicitly stopped due to how the container controller handled context errors.  As for the two issues, the fact that transactions fail while chaincode is starting is a long standing issue. Addressing it should be treated as an _improvement_. The way the context error is currently handled is a *bug*.  ></body> </Action>
