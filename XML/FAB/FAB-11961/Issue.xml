<Issue id="33679" key="FAB-11961" number="11961" project="10002" reporter="ping40" assignee="ping40" creator="ping40" type="10004" summary="properly release  resource" priority="3" resolution="10000" status="6" created="2018-09-12 08:26:33.0" updated="2018-09-13 13:32:26.0" resolutiondate="2018-09-13 13:32:26.0" votes="0" watches="1" workflowId="44978"> <description><! CDATA in core/transientstore/store.go    {code:java} func (s *store) GetMinTransientBlkHt() (uint64, error) { // Current approach performs a range query on purgeIndex with startKey // as 0 (i.e., blockHeight) and returns the first key which denotes // the lowest block height remaining in transient store. An alternative approach // is to explicitly store the minBlockHeight in the transientStore. startKey := createPurgeIndexByHeightRangeStartKey(0) iter := s.db.GetIterator(startKey, nil)    // Fetch the minimum transient block height if iter.Next() { dbKey := iter.Key() _, _, blockHeight := splitCompositeKeyOfPurgeIndexByHeight(dbKey) return blockHeight, nil } iter.Release() // Returning an error may not be the right thing to do here. May be // return a bool. -1 is not possible due to unsigned int as first // return value return 0, ErrStoreEmpty } {code}    the following sentence may be not called. {code:java} iter.Release() {code}    ></description> </Issue>
