<Action id="59871" issue="38956" author="sykesm" type="comment" created="2019-05-09 12:18:08.0" updateauthor="sykesm" updated="2019-05-09 12:18:24.0"> <body><! CDATA {code} 06:39:05 --- FAIL: TestParallelSend (30.01s) 06:39:05     comm_test.go:663:  06:39:05         	Error Trace:	comm_test.go:663 06:39:05         	Error:      	Not equal:  06:39:05         	            	expected: 20 06:39:05         	            	actual  : 17 06:39:05         	Test:       	TestParallelSend 06:39:05 FAIL 06:39:05 coverage: 90.0% of statements 06:39:05 FAIL	github.com/hyperledger/fabric/gossip/comm	32.247s {code}  https://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/12033/console  ></body> </Action>
<Action id="60004" issue="38956" author="mhbauer" type="comment" created="2019-05-14 18:45:55.0" updateauthor="mhbauer" updated="2019-05-14 18:47:42.0"> <body><! CDATA I don't think this has anything to do with TLS. It's very easy to trigger locally.  go test -race -count 1000 -failfast -v -run TestParallelSend  Most runs take 0.01 -0.02s, which I'm guessing is just the resolution of the timer.  Sometimes it fails and times out  {noformat} 2019-05-14 11:44:22.432 PDT  gossip.comm  func1 -> WARN 001 127.0.0.1:39393, PKIid:3132372e302e302e313a3339333933 isn't responsive: EOF â€” FAIL: TestParallelSend (30.01s) comm_test.go:663:  Error Trace: comm_test.go:663 Error: Not equal:  expected: 20 actual : 5 Test: TestParallelSend FAIL exit status 1 FAIL github.com/hyperledger/fabric/gossip/comm 30.431s {noformat}  ></body> </Action>
<Action id="60005" issue="38956" author="mhbauer" type="comment" created="2019-05-14 19:14:01.0" updateauthor="mhbauer" updated="2019-05-14 19:14:01.0"> <body><! CDATA The test uses a bunch of goroutines and a waitgroup with no effect.  The comment // Making sure all messages was indeed sent does not actually do what it says. The send call in the innermost loop, itself, spawns a groutine per peer to do the actual send.  One error looks like the accept is started after the messages are sent. I see no reason why the messages would be queued for an acceptor that does not exist.  ></body> </Action>
<Action id="60006" issue="38956" author="mhbauer" type="comment" created="2019-05-14 19:23:16.0" updateauthor="mhbauer" updated="2019-05-14 19:23:16.0"> <body><! CDATA Here's a debug log of one success and one fail. Maybe someone else can follow what's going on better.   ^TestParallelSend-success+fail.txt    ></body> </Action>
<Action id="60448" issue="38956" author="mhbauer" type="comment" body="same test, same failure." created="2019-05-28 19:57:43.0" updateauthor="mhbauer" updated="2019-05-28 19:57:43.0"/>
