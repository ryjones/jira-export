<Issue id="26797" key="FAB-7727" number="7727" project="10002" reporter="c0rwin" assignee="c0rwin" creator="c0rwin" type="10001" summary="Restructure/rename filtered transaction proto messages" priority="3" resolution="10000" status="6" created="2018-01-14 15:14:08.0" updated="2018-07-20 18:50:47.0" resolutiondate="2018-01-14 19:53:04.0" votes="0" watches="1" workflowId="40956"> <description><! CDATA In the  commit|https://gerrit.hyperledger.org/r/#/c/16795/5  which addresses FAB-7695 there are few changes was introduced for filtered block structure, among which was:  {code} message FilteredProposalResponse { repeated FilteredChaincodeAction chaincodeActions = 1; } {code}  where David Enyeart commented with respect to the naming of {{FilteredProposalResponse}}  {quote} This is not my favorite name.  I probably would have gone with something like 'FilteredChaincodeActions' to indicate that this is a set of FilteredChaincodeAction. These would come from N different ProposalResponses rather than a single ProposalResponse as your name implies.  (Note that peer doesn't currently support N TransactionActions, but the structure allows it for the future.)  That being said, the overall structure here is what we want, so I will go ahead and +2 and merge to unblock SDKs.  I'll defer to Artem if you want to do another CR to tweak the names. {quote}  After negotiation we came to the agreement/conclusion where it make more sense to rename/restructure proto definitions in the following way:  {code} // FilteredTransaction is a minimal set of information about a transaction // within a block. message FilteredTransaction { string txid = 1; common.HeaderType type = 2; TxValidationCode tx_validation_code = 3; oneof Data { FilteredTransactionActions transaction_actions = 4; } }  // FilteredTransactionActions is a wrapper for array of TransactionAction // message from regular block message FilteredTransactionActions { repeated FilteredChaincodeAction chaincodeActions = 1; }  //FilteredChaincodeAction is a minimal set of information about an action within a //transaction. message FilteredChaincodeAction { ChaincodeEvent ccEvent = 1; } {code}  which makes more sense and aligns with original definitions of block transaction structure.  ></description> </Issue>
