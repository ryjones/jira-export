<Action id="29224" issue="19570" author="akdj" type="comment" created="2017-07-31 12:14:27.0" updateauthor="akdj" updated="2017-07-31 14:31:52.0"> <body><! CDATA hello, i asked help in  https://chat.hyperledger.org/channel/chaincode-dev   and then I was invited to add my use case here to have help in the future.  I need to use map/reduce ability in the chaincode for my use case,   for example, I made several creation of marbles and I published marbles data in the blockchain,  there are attributs as colors, weights, and creation timestamp.  so there are two abilities that I need,   the fisrt one, it map/reduce ability, to know, for instance, the total weight of "red" marbles   the second one, it to find out which marble is the most recent creation, with the creation timestamp.     thanks  ></body> </Action>
<Action id="61803" issue="19570" author="josejuanmontiel" type="comment" created="2019-07-14 17:01:47.0" updateauthor="josejuanmontiel" updated="2019-07-14 17:01:47.0"> <body><! CDATA hello, in our project we face this necessity and we made a custom image with this functionality. we would like to share it, in the branch 1.3 (the one we are using now) and later in 1.4. At the begining, we started with basic functionality, we'll iterate to make it's possible deploy the view in CouchDB (like the index are doing now). I post a list of files we just modifcate. If it's could be interesting to integrate this feature in the branch, we could made CR to start the new development.  !image-2019-07-14-18-59-44-846.png|width=350,height=496!!image-2019-07-14-19-00-53-731.png|width=267,height=103!  ></body> </Action>
<Action id="63373" issue="19570" author="denyeart" type="comment" created="2019-08-28 18:34:32.0" updateauthor="denyeart" updated="2019-08-28 18:34:32.0"> <body><! CDATA Maintainers discussed and determined best practice for aggregate queries is to utilize a downstream data store rather than support aggregate queries in fabric core.  See pattern recommended at https://hyperledger-fabric.readthedocs.io/en/release-1.4/couchdb_as_state_database.html#good-practices-for-queries.  ></body> </Action>
<Action id="63908" issue="19570" author="jambonrose" type="comment" created="2019-09-20 14:03:51.0" updateauthor="jambonrose" updated="2019-09-20 14:03:51.0"> <body><! CDATA  ~denyeart : Thanks for considering the issue. Would you mind expanding on the reasoning behind preventing the use of CouchDB views? Alternatively, could you point me at the specific chat or core meeting where this was discussed?  We considered views to provide the total count for a type of document. Specifically, when paginating results, we'd like to provide both the number of objects included in the result as well as the total number in state. We expected to count objects with a design document such as the one presented below (but were unclear on how to access the actual result). {code:java} # using the Node SDK ctx.stub.putState( "_design/appName", Buffer.from( JSON.stringify( { "views": { "countDocs": { "map": "function(doc) {if(...) {emit(doc._id, doc._id);}}", "reduce": "_count" } } } ) ) ) {code} The put state handler, however, raises an error due to the underscore at the beginning of the key (required by CouchDB).  Using a separate service and database simply to provide the full count of a type of document feels like overkill to me, but I'd like to understand the problem and possible options before making any choices.  ></body> </Action>
<Action id="63974" issue="19570" author="josejuanmontiel" type="comment" created="2019-09-23 17:28:43.0" updateauthor="josejuanmontiel" updated="2019-09-23 17:28:43.0"> <body><! CDATA hi all,  i can imagine the reasons, but could be interesting know why not use the power of views, to count or aggreate results.  I ask in couchdb user list a quick question about performance https://lists.apache.org/thread.html/d2fdf6e19eac858148927024432f37d129e7f84ac1b9d8a1b01e270e@%3Cuser.couchdb.apache.org%3E  here, in hyperledger we have indexs, why not views?, in this way we could simplify systems with simple necesities of counting "large" group of results.     ></body> </Action>
<Action id="64131" issue="19570" author="denyeart" type="comment" body=" ~jambonrose   ~josejuanmontiel  You are right that it is a slippery slope... what the maintainers concluded was that the scope of the peer was starting to expand to unmaintainable scope (e.g. the lifecycle management of database artifacts), and therefore the overall direction is to keep peer focused on its core responsibility as a transaction processor. Non-core functions that are further down the slippery slope, such as aggregate and analytic queries, would be off-loaded to downstream databases that are more fit-for-purpose. " created="2019-09-25 16:30:01.0" updateauthor="denyeart" updated="2019-09-25 16:30:01.0"/>
<Action id="64141" issue="19570" author="josejuanmontiel" type="comment" created="2019-09-26 05:44:03.0" updateauthor="josejuanmontiel" updated="2019-09-26 05:44:03.0"> <body><! CDATA hi  ~denyeart ,  first of all, let me use this closed ticket to make some comment and question (i haven't another way), and second i'm doing this from the respect (don't take as criticism), i'm doing as newbie blockchain (dlt) developer with a project in production.  i understand that keep it simple, and focused in performance it's the best way to accomplish the best throughput in the insertion, when people talk about hyperledger, always talk about TransactionPerSeconds. But, if the index are for improve the performance of queries (when you have more than 1000 asset in the dlt, to respond insede the timeout of the smartcontract) the result of this queries must be enought small to iterate inside the timeout, not? Your model has to permit find what you want, with small iterations of the results, right?  if your model expand outside the limits, it's when you need consider the best practices to extract this queries outside using as transport layer the events. In this case, why not consider an inprove of hyperledger 1.4.3 that permite use a commiter peer (as i understand now, in recents conversations) the only use is as some kind of backup... to permit some kind of smart contract that only GET and QUERIES... queries with views.  imho, as newbie developer (less than a year) move outside the DLT the queries, make the trust between the participants... untrusted. The events are trusted, all receive the same, but the interpretation of this events in the bussines domain model, couldn't be, even with an API (outside the DLT) to interpretate it.  Thanks a lot.              ></body> </Action>
