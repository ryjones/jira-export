<Issue id="29994" key="FAB-9922" number="9922" project="10002" reporter="c0rwin" assignee="c0rwin" creator="c0rwin" type="10003" summary="Refactor TxPvtReadWriteSetWithConfigInfo to resolve structure deficiency. " priority="3" resolution="10000" status="6" created="2018-05-07 08:15:12.0" updated="2018-07-20 14:16:34.0" resolutiondate="2018-05-07 23:04:43.0" votes="0" watches="2" workflowId="42093"> <description><! CDATA The following structure introduced by FAB-9204:  {code} // TxPvtReadWriteSetWithConfigInfo encapsulates the transaction's private // read-write set and additional information about the configurations such as // the latest collection config when the transaction is simulated message TxPvtReadWriteSetWithConfigInfo { rwset.TxPvtReadWriteSet pvt_rwset = 1; common.CollectionConfigPackage collection_configs = 2; } {code}  where the {{TxPvtReadWriteSet}}  {code} // TxPvtReadWriteSet encapsulate the private read-write set for a transaction message TxPvtReadWriteSet { TxReadWriteSet.DataModel data_model = 1; repeated NsPvtReadWriteSet ns_pvt_rwset = 2; } {code}  scoped to the specific namespace ("chaincode name")  {code} // NsPvtReadWriteSet encapsulates the private read-write set for a chaincode message NsPvtReadWriteSet { string namespace = 1; repeated CollectionPvtReadWriteSet collection_pvt_rwset = 2; } {code}  which means that   {code} common.CollectionConfigPackage collection_configs = 2; {code}  has only collection name, which means that {{TxPvtReadWriteSetWithConfigInfo}} which includes several namespace and each might have same collection name, would be impossible to map between the actually private data read-write set and the collection config package.   To overcome this limitation I'd suggest refactoring of the {{TxPvtReadWriteSetWithConfigInfo}} to be :  {code} message TxPvtReadWriteSetWithConfigInfo { rwset.TxPvtReadWriteSet pvt_rwset = 1; map<string, common.CollectionConfigPackage> collection_configs = 2; } {code}   ~manish-sethi   ~denyeart   ~Senthil1  wdyt?  ></description> </Issue>
