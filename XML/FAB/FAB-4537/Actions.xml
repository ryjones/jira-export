<Action id="25973" issue="17740" author="kchristidis" type="comment" body=" ~yacovm ,  ~jyellick : If you bump into more CI failures related to this (and you&apos;re not bored), please paste the links to the console outputs here. Thanks." created="2017-06-11 00:48:41.0" updateauthor="kchristidis" updated="2017-06-11 00:48:41.0"/>
<Action id="25975" issue="17740" author="kchristidis" type="comment" created="2017-06-11 01:16:23.0" updateauthor="kchristidis" updated="2017-06-11 01:23:45.0"> <body><! CDATA Notes to self: h2. 8572 {noformat} TestSendTimeToCut/Proper: assert.NoError(t, sendTimeToCut(producer, mockChannel, timeToCutBlockNumber, &timer), "Expected the sendTimeToCut call to return without errors"){noformat}   {noformat} panic: runtime error: invalid memory address or nil pointer dereference {noformat} h2. 8688 {noformat} TestSendConnectMessage/Proper: assert.NoError(t, sendConnectMessage(producer, mockChannel), "Expected the sendConnectMessage call to return without errors"){noformat}   {noformat} panic: runtime error: invalid memory address or nil pointer dereference {noformat} h2. 13238 {noformat} TestSendTimeToCut/Proper: assert.NoError(t, sendTimeToCut(producer, mockChannel, timeToCutBlockNumber, &timer), "Expected the sendTimeToCut call to return without errors"){noformat} {noformat} panic: EOF Received unexpected error "kafka: client has run out of available brokers to talk to (Is your cluster reachable?)" Expected the sendTimeToCut call to return without errors{noformat} h2. 13244 {noformat} TestProcessLoopRegularAndSendTimeToCutRegular: assert.Equal(t, uint64(1), counts indexSendTimeToCutPass , "Expected 1 TIMER event processed"){noformat} {noformat} Not equal: 0x1 (expected) != 0x0 (actual) Expected 1 TIMER event processed{noformat}    ></body> </Action>
<Action id="25976" issue="17740" author="kchristidis" type="comment" created="2017-06-11 01:22:41.0" updateauthor="kchristidis" updated="2017-06-11 01:50:57.0"> <body><! CDATA 13244 doesn't surprise me. I knew it was introducing a race condition and had added a comment along these lines. I have disabled it unconditionally in a pending changeset. (It still serves its purpose of exercising the path I'm interested in, which is why I don't remove it completely.)  8572 and 8688 are most likely getting the nil pointer dereference when accessing the +producer+ argument. 13238 indicates to me that the mock broker is closing early. Now, on to figuring out why these things happen.  ></body> </Action>
<Action id="26159" issue="17740" author="kchristidis" type="comment" created="2017-06-13 15:11:52.0" updateauthor="kchristidis" updated="2017-06-13 15:11:52.0"> <body><! CDATA I've sneaked in some changes to previous CRs that hopefully eliminate some of these issues.  Downgrading priority to lowest but will still keep an eye on it.  ></body> </Action>
<Action id="26208" issue="17740" author="kchristidis" type="comment" created="2017-06-13 22:23:39.0" updateauthor="kchristidis" updated="2017-06-14 16:04:01.0"> <body><! CDATA  https://jenkins.hyperledger.org/job/fabric-verify-z/9036/consoleFull    https://jenkins.hyperledger.org/job/fabric-verify-x86_64/13391/consoleFull    https://jenkins.hyperledger.org/job/fabric-verify-x86_64/13414/consoleFull    https://jenkins.hyperledger.org/job/fabric-verify-x86_64/13441/consoleFull    https://jenkins.hyperledger.org/job/fabric-verify-x86_64/13437/consoleFull   ></body> </Action>
<Action id="26269" issue="17740" author="kchristidis" type="comment" body="Upgrading this." created="2017-06-14 14:24:50.0" updateauthor="kchristidis" updated="2017-06-14 14:24:50.0"/>
<Action id="26805" issue="17740" author="kchristidis" type="comment" body="https://gerrit.hyperledger.org/r/#/c/10591/" created="2017-06-20 00:55:17.0" updateauthor="kchristidis" updated="2017-06-20 00:55:17.0"/>
