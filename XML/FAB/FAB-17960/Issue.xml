<Issue id="45212" key="FAB-17960" number="17960" project="10002" reporter="tock" assignee="caod" creator="tock" type="10003" summary="A file repo for join-blocks" priority="3" resolution="10000" status="6" created="2020-06-07 07:05:45.0" updated="2020-07-09 21:33:04.0" resolutiondate="2020-07-09 21:33:04.0" votes="0" watches="3" workflowId="59123" archived="N"> <description><! CDATA When an orderer is joined to a channel with the channel-participation API, it is given a join-block, which is the last config block of the channel, given to it by the admin invoking the API. In order to make the "join" resistant to crash-restart, the join-block need to be persisted somewhere. Currently there is no mechanisms to do so.   In this task we build a file repository for atomically storing join-blocks.  Allocate a folder for the orderer join blocks, defined in `orderer.yaml`.  For example, next to `WALDir`: `/var/hyperledger/production/orderer/etcdraft/wal`,  say `JoinBlockDir`: `/var/hyperledger/production/orderer/join-block`.  The orderer will then: # On a channel join, atomically save the join-block first, before calling GetOrCreate() on the ledger factory, and # On recovery/startup, will scan the folder as it initializes the channels, to determine what is the join status of every chain.  In order to save the file atomically we will:  # Create a transient file # Once written, atomically move it to the persisted location.    On startup: # Cleanup the transient files, and  # Load a list of persisted ones.    The API for this component would be:  // Open the directory, remove transient files New(location string, options Options) (*Repo, err)  where Options carry the file suffix (e.g. ".join-block"), the transient file prefix (e.g. "~").  // Atomically the content to the channelName+suffix file (r *Repo) Save(channelName string, content   byte) error  // Scan the directory and produce a list of file names, filter by suffix (r *Repo) Scan()   string  // Strip the suffix from the file name to get channel name (r *Repo) FileToChannelName(fileName string) string  // Load file content (r *Repo) Load(fileName string) (  byte, error)   Ideally, this will be general enough to be useful for other components as well.  ></description> </Issue>
