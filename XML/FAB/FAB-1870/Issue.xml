<Issue id="14371" key="FAB-1870" number="1870" project="10002" reporter="wlahti" assignee="wlahti" creator="wlahti" type="10001" summary="Formalize logging guidelines and fix areas of the code that don&apos;t follow them" priority="3" resolution="10000" status="6" created="2017-01-26 18:24:07.0" updated="2018-07-23 17:48:11.0" resolutiondate="2018-01-08 16:13:50.0" votes="0" watches="2" workflowId="37180"> <description><! CDATA We need a formal set of guidelines in regards to logging (e.g. what to log, what level to use for certain types of logging statements, what to use to set the log level for a module).  Some guidelines/tips to be included:  For Fabric developers: * Don't use the fmt.Print functions for logging statements (CLI being an exception), use the logger for the file (or create a new one if the file isn't logging anything yet). See next point for syntax. * All new logging.MustGetLogger() calls should instead use flogging.MustGetLogger(), which tracks logger module names defined in the system and allows for setting levels by regular expression and reverting all levels to the system's default (defined as the levels at the end of peer startup). * To take advantage of setting log levels via regular expression (and for consistency), it is recommended to use a pattern of flogging.MustGetLogger("<module>/<submodule>"). * If in doubt of the general usefulness of a logging message to a majority of users, use logger.Debugf() to prevent flooding the logs with messages, especially if they are in code that is accessed often. * Add an entry and exit logging statement for all major methods that includes any important entry/exit parameters:  {code:java} logger.Debugf("Entry") // modify to include any input parameters defer logger.Debugf("Exit") {code} * Don't hard-code the log level for a module logger; in most cases it should be inherited from the parent command's log level. If you desire to have it set differently from the parent command, set it to/create a new value in core.yaml or similar config file. We want to have a way to adjust the log level at startup without actually touching the code. * For code running on a peer (after startup), you can use "peer logging setlevel <module-name> <log-level>" to dynamically set the logging level for a module. If you are unclear on what a module is, it's the name you pass when you create a logger, i.e. logging.MustGetLogger("<module-name>") and also the name that shows up in the log messages following the timestamp, e.g. 2017-02-09 00:05:53.532 UTC  ledgermgmt  initialize -> INFO 019 ledger mgmt initialized  ></description> </Issue>
