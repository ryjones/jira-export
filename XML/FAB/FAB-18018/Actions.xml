<Action id="69532" issue="45452" author="sykesm" type="comment" created="2020-06-23 19:57:52.0" updateauthor="sykesm" updated="2020-06-23 19:57:52.0"> <body><! CDATA In the side chat you pointed to a commit that no longer exists so I can't observe the problem.  On loopback: * Integration tests use peers that all run on the same host so the loopback adapter should be fine to use for any peer to peer communication. * Listening on the loopback adapter has been preferred to avoid some of the issues we've seen running tests on development machines with an active firewall. * Disabling {{peer.autoDetect}} impacts chaincode running in docker containers from accessing the peer's chaincode endpoint which is configured to run on INADDR_ANY.  If this is related to gossip, why not just set {{peer.gossip.endpoint}} explicitly to loopback? It overrides the auto-detected peer address.  {code} diff --git a/integration/nwo/core_template.go b/integration/nwo/core_template.go index 29df215bc..17fd4554e 100644 --- a/integration/nwo/core_template.go +++ b/integration/nwo/core_template.go @@ -30,7 +30,7 @@ peer: useLeaderElection: true orgLeader: false membershipTrackerInterval: 5s -    endpoint: +    endpoint: 127.0.0.1:{{ .PeerPort Peer "Listen" }} maxBlockCountToStore: 100 maxPropagationBurstLatency: 10ms maxPropagationBurstSize: 10 {code}  We already set the {{peer.gossip.bootstrap}} and {{peer.gossip.externalEndpoint}} to loopback for similar reasons.  ></body> </Action>
<Action id="69533" issue="45452" author="yacovm" type="comment" created="2020-06-23 20:28:13.0" updateauthor="yacovm" updated="2020-06-23 20:29:02.0"> <body><! CDATA {quote}If this is related to gossip, why not just set peer.gossip.endpoint explicitly to loopback? It overrides the auto-detected peer address. {quote} It's *not* related to gossip, it is related to the endpoint being computed *improperly* when *auto-detect* is *true*, and being passed into the gossip initialization.  Overriding via the gossip endpoint works, however this feels artificial to me, as this is seldomly used in production as far as I know, and the real problem here is that the peer computes a non-loopback address instead of the loopback it should have been, and passes this into gossip.   It seems to me|https://github.com/hyperledger/fabric/blob/9fabf569a7f4a0b161a6cbed19b1de6cc81db6af/core/peer/config.go#L313-L342  that if we have *auto-detect* set to *true*, and *peer.address* set to *127.0.0.1* then the *auto-detect* gets preference over the explicit *127.0.0.1*.  Do you think this makes sense? I am not sure it does, as if I configured _*explicitly*_ an address why should the *auto-detect* override it? If I wanted *auto-detect* to be used I would have left the *peer.address* empty, no?   ~sykesm   ~denyeart  wdyt?  ></body> </Action>
<Action id="69534" issue="45452" author="sykesm" type="comment" created="2020-06-23 21:56:20.0" updateauthor="sykesm" updated="2020-06-23 21:56:32.0"> <body><! CDATA I think you're trying to stir up trouble. :) The auto-detect  behavior|https://github.com/hyperledger/fabric/blob/66f97e4025fd3e99e265ce2ecd802e53f05209d6/core/peer/config.go#L61-L96  has always taken precedence over {{peer.address}}. It appears it's been this way since before 1.0.   Is it how I would have implemented it? No. Is it right? Probably not, but it's another behavior that's been around long enough to be a "feature" of fabric. "Fixing" this is likely to cause just as much pain as leaving it alone.  In production environments, if they're not running with the default behavior of listening on all adapters and auto-detecting the address, they should be specifying both the address (ie. the advertise address) and the listen addresses explicitly. This would need to be done for the peer, chaincode, and gossip.  {quote}If I wanted auto-detect to be used I would have left the peer.address empty, no?{quote}  Only if you want the default port. Plus it's  required|https://github.com/hyperledger/fabric/blob/833438fb1bf812033351cd232917c11cb17a34cb/core/peer/config.go#L314-L317 . In fact, it looks like you're the one that  made it that way|https://github.com/hyperledger/fabric/commit/df33b8212b59599b89054ff6707cb3f31f276c26 .  {quote}wdyt?{quote}  I think we should leave well enough alone. The default configuration works well enough for most, the latest version of sampleconfig/core.yaml states that {{addressAutoDetect}} overrides {{peer.address}}, and minor configuration changes can be used set the advertised addresses when auto-detect is disabled.  ></body> </Action>
<Action id="69535" issue="45452" author="yacovm" type="comment" created="2020-06-23 22:34:51.0" updateauthor="yacovm" updated="2020-06-23 22:34:51.0"> <body><! CDATA Yeah thanks for reminding me of my sins of the past, appreciate it.     All right, looks like we have agreement on using *gossip.endpoint* in the integration tests then.  ></body> </Action>
<Action id="69537" issue="45452" author="yacovm" type="comment" created="2020-06-23 23:01:30.0" updateauthor="yacovm" updated="2020-06-23 23:01:30.0"> <body><! CDATA And the discussion is here  ~sykesm    https://github.com/hyperledger/fabric/pull/1422      the problem was that gossip was given the non loopback address so it tried to probe the wrong address:  {{ e  Org1.peer1  2020-06-23 14:06:56.592 IDT  gossip.discovery   func1 -> DEBU 099 Endpoint: 127.0.0.1:21504, InternalEndpoint:  192.168.1.21:21504, PKI-ID:  ff2b9769feb64436a78c030d0d43cb051b46297850d5d1edddbf8d57a5fd400b,  Metadata:  is still dead}}  ></body> </Action>
<Action id="69586" issue="45452" author="wenjian" type="comment" body="To summarize, the fix is to explicitly set gossip.endpoint to use loopback address in IT:  https://github.com/hyperledger/fabric/pull/1455 " created="2020-06-29 13:14:38.0" updateauthor="wenjian" updated="2020-06-29 13:14:38.0"/>
