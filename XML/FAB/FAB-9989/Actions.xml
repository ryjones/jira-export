<Action id="47746" issue="30088" author="dshuffma" type="comment" created="2018-07-24 19:49:55.0" updateauthor="dshuffma" updated="2018-07-24 19:49:55.0"> <body><! CDATA Can someone comment/prioritize this issue. Its been asked by a few customers now.  ~simsc   its more of an issue on the service side of things. Users do not have the ability to dig into docker and kill the older chaincode containers.  ></body> </Action>
<Action id="47933" issue="30088" author="clayton sims" type="comment" body=" ~denyeart   ~jyellick    Jason - is this on your radar?   whats the cost here?" created="2018-07-26 19:56:11.0" updateauthor="clayton sims" updated="2018-07-26 19:56:11.0"/>
<Action id="47934" issue="30088" author="jyellick" type="comment" created="2018-07-26 20:14:34.0" updateauthor="jyellick" updated="2018-07-26 20:14:34.0"> <body><! CDATA The rough problem here is that each channel may have a different instantiated version of the chaincode.  So, upgrading the chaincode on channel A does not necessarily mean it is not longer needed on channel B.  So, if we were to simply remove the container on upgrade on channel A, then any transactions being simulated on channel B would immediately fail.  Further, the container would have to be restarted.  There are multiple approaches we could take.  The one that first comes to mind is perhaps to add some sort of configurable chaincode timeout.  That if a chaincode has not had any queries of invokes made against it in X minutes/hours, that it should terminate itself.   ~dshuffma  does this seem reasonable? Or is this more of a concern that the new chaincode does not have sufficient resources until the old one is stopped?  ></body> </Action>
<Action id="47936" issue="30088" author="denyeart" type="comment" body="The timeout approach seems reasonable, I&apos;ll tag as a candidate for v1.3.0." created="2018-07-26 20:39:06.0" updateauthor="denyeart" updated="2018-07-26 20:39:06.0"/>
<Action id="47941" issue="30088" author="dshuffma" type="comment" created="2018-07-26 21:08:02.0" updateauthor="dshuffma" updated="2018-07-26 21:08:02.0"> <body><! CDATA  ~jyellick  the timeout solution sounds great at first glance. i like it.  thinking ahead though, can this be a setting? maybe on the channel.. I know that is a bit of a mismatch, since the single chaincode container could have multiple channels. thus 1 chaincode has potentially multiple timeout rules. oh what about making install take a timeout parameter?  that's at least 1-to-1 and the user would have the ability to customize(fine grain) the timeout setting. even without a configurable setting, this solution will help greatly.  in general (for the service) launching new chaincode does not require freeing up current resources. its fine to launch many side by side. this request is more of a long-lived issue.  a network with 300 chaincode upgrades over 2 months is using 299 * x resources more than it needs.  ></body> </Action>
<Action id="51121" issue="30088" author="anillewis" type="comment" body=" ~denyeart  - Do I need to update something? Should I be changing the Fix Version to 1.4.0? When I reported the issue, I did not set the fix version but please let me know if I need to update the fix version value" created="2018-09-24 19:35:56.0" updateauthor="anillewis" updated="2018-09-24 19:35:56.0"/>
<Action id="51138" issue="30088" author="denyeart" type="comment" body="I&apos;ve updated to Future." created="2018-09-25 02:38:58.0" updateauthor="denyeart" updated="2019-01-23 01:38:47.0"/>
