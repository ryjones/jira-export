<Action id="68048" issue="44390" author="pvrbharg" type="comment" body=" ^RAFT-ReadOnlyQuery-QuorumIssue.docx   ^RAFT-ReadOnlyQuery-QuorumIssue.pdf " created="2020-02-21 18:14:16.0" updateauthor="pvrbharg" updated="2020-02-21 18:14:16.0"/>
<Action id="68050" issue="44390" author="yacovm" type="comment" created="2020-02-21 19:20:57.0" updateauthor="yacovm" updated="2020-02-21 19:20:57.0"> <body><! CDATA {quote}If a quorum of nodes is unavailable for any reason, *the ordering service cluster* becomes unavailable for both read and write operations on the channel, and no new logs can be committed.{quote}  It means you cannot pull blocks from the nodes because a quorum was lost. It doesn't mean anything about peers.   ></body> </Action>
<Action id="68051" issue="44390" author="pvrbharg" type="comment" created="2020-02-21 19:48:12.0" updateauthor="pvrbharg" updated="2020-02-21 19:48:12.0"> <body><! CDATA Precisely the point of misunderstanding or mis-interpretation of the statement. They are trying to connect the ordering service cluster health as it relates to their business running without interruption  context is HA, Failover - which means how this impacts peers submitting transactions and succeeding or failing. This is the context of their test and the result table.  Given above context customers are interpreting and expecting that both invoke and read queries to fail  invoke is failing but not read query . A read query that goes thru ordering service would fail as well and that would help understand the behavior from transaction submission point of view/peer.     So summary:     We need to explain what the above statement means - in the context of submissions of transactions - which go thru ordering service and not thru ordering service. So we do not have to keep clarifying and explaining - when customers do their testing and connecting things in a way we did not intend...     Hope this helps.     ></body> </Action>
<Action id="68052" issue="44390" author="yacovm" type="comment" body=" ~joe-alewine " created="2020-02-21 19:54:23.0" updateauthor="yacovm" updated="2020-02-21 19:54:23.0"/>
<Action id="68055" issue="44390" author="pvrbharg" type="comment" created="2020-02-22 04:48:45.0" updateauthor="pvrbharg" updated="2020-02-22 04:48:45.0"> <body><! CDATA BTW - this is exactly is what has been posted some time ago - Gari and Dave - pretty much word for word.   https://stackoverflow.com/questions/46253942/read-query-transaction-flow-in-hyperledger-fabric   Perhaps it would add to enhance understanding if specific configuration steps are explained in say one of samples such as commercial paper in a query to achieve "   {{Although not typical, the client application can choose to submit the read-only transaction for ordering, validation, and commit" - since commercial paper uses fabric-sdk-node programming model.}}  {{}}  {{Thanks.}}  ></body> </Action>
<Action id="68056" issue="44390" author="pvrbharg" type="comment" created="2020-02-22 16:14:08.0" updateauthor="pvrbharg" updated="2020-02-22 16:14:08.0"> <body><! CDATA Dear team,  Update from our engagement:     https://hyperledger-fabric.readthedocs.io/en/latest/glossary.html#query  Query: ======  ... Although not typical, the client application can choose to submit the read-only transaction for ordering, validation, and commit, for example if the client wants auditable proof on the ledger chain that it had knowledge of specific ledger state at a certain point in time.  Our client wants to understand this flow in the context of how it is being done with Fabric-sdk-node and where it is documented in the documentation or fabric/fabric-samples repo.  Our client is using Fabric v1.4.4 from Open Source and has IBP images with IBM Support  elite   Please let us know.  Thanks.  ></body> </Action>
<Action id="68860" issue="44390" author="denyeart" type="comment" body="Added help-wanted tag in hopes that somebody can pick up this doc clarification, both with respect to the initial orderer statement that caused confusion, and the separate concept of executing/submitting read-only transactions (not typical, but possible). The latter is no different than a read/write transaction and therefore same SDK calls would be made." created="2020-04-19 03:50:02.0" updateauthor="denyeart" updated="2020-04-19 03:50:02.0"/>
