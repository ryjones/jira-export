<Issue id="33724" key="FAB-11984" number="11984" project="10002" reporter="ales" creator="ales" type="10001" summary="Handle IO ledger errors differently from deterministic errors in the committer path" priority="3" resolution="10001" status="6" created="2018-09-13 13:14:50.0" updated="2020-01-22 22:32:50.0" resolutiondate="2020-01-22 22:32:50.0" votes="0" watches="3" workflowId="45026"> <description><! CDATA The ledger is increasingly being used in the validation/commit code path. The current known users of the ledger facility are # the validator when it retrieves the LSCC entry to obtain the chaincode endorsement policy # the state-based validator when it retrieves state-level metadata # the MVCC checks that need to retrieve existing keys  In case of error, the user of the ledger facility must be able to distinguish between a non-deterministic error (e.g. an I/O error) and a deterministic one (e.g. the error returned in case GetPrivateData was invoked on a non-existent collection). This is necessary to ensure that the validator/committer path decides whether to simply mark the transaction as invalid in case of a deterministic error, or to halt processing on the channel in case of a non-deterministic one.  ></description> </Issue>
