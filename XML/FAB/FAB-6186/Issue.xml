<Issue id="20861" key="FAB-6186" number="6186" project="10002" reporter="yacovm" assignee="yacovm" creator="yacovm" type="10004" summary="MSP cache should not use read lock operations" priority="3" resolution="10000" status="6" created="2017-09-16 04:23:00.0" updated="2018-07-20 14:14:24.0" resolutiondate="2017-09-16 17:15:57.0" votes="0" watches="2" workflowId="40025"> <description><! CDATA The MSP cache has RW locks and uses RLock when doing cache lookup, and WLock when doing cache updates.  This may result in the following error if done concurrently while the cache has more than 1 item and only cache lookups are performed, because the cache lookup operation shifts and moves items in the internal list of the cache (that specifies eviction order, since its an LRU cache):   {code} panic: runtime error: invalid memory address or nil pointer dereference  signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x538863   goroutine 1198  running : container/list.(*List).remove(...) 	/home/yacovm/OBC/go/src/container/list/list.go:110 container/list.(*List).MoveToFront(0xc420085a70, 0xc420085bf0) 	/home/yacovm/OBC/go/src/container/list/list.go:169 +0x53 github.com/hyperledger/fabric/vendor/github.com/golang/groupcache/lru.(*Cache).Get(0xc420124d20, 0x75bc40, 0xc4203afeb8, 0x3, 0xc4203afe50, 0x3) 	/home/yacovm/OBC/shared/gopath/src/github.com/hyperledger/fabric/vendor/github.com/golang/groupcache/lru/lru.go:79 +0x97 github.com/hyperledger/fabric/msp/cache.(*cachedMSP).DeserializeIdentity(0xc4200f0b60, 0xc42008ccfc, 0x3, 0x3, 0x0, 0x0, 0x0, 0x0) 	/home/yacovm/OBC/shared/gopath/src/github.com/hyperledger/fabric/msp/cache/cache.go:64 +0xfb github.com/hyperledger/fabric/msp/cache.TestDeserializeIdentity.func1(0xc420124d80, 0xc42008e1a8, 0xc42008cda0, 0xc42008cd98, 0xc42008cd30, 0x3, 0x3, 0xc4200908c0, 0xbd70e0, 0xc4200f0b60, ...) 	/home/yacovm/OBC/shared/gopath/src/github.com/hyperledger/fabric/msp/cache/cache_test.go:143 +0x107 created by github.com/hyperledger/fabric/msp/cache.TestDeserializeIdentity 	/home/yacovm/OBC/shared/gopath/src/github.com/hyperledger/fabric/msp/cache/cache_test.go:135 +0x658 {code}  or, in production: {code} goroutine 223839  running : container/list.(*List).remove(...) 	/opt/go/src/container/list/list.go:111 container/list.(*List).MoveToFront(0xc42027bc20, 0xc421cdbf50) 	/opt/go/src/container/list/list.go:169 +0x75 github.com/hyperledger/fabric/vendor/github.com/golang/groupcache/lru.(*Cache).Get(0xc42032bcc0, 0xcd8ee0, 0xc421a70d40, 0x31e, 0xc4309a0700, 0x31e) 	/opt/gopath/src/github.com/hyperledger/fabric/vendor/github.com/golang/groupcache/lru/lru.go:79 +0x97 github.com/hyperledger/fabric/msp/cache.(*cachedMSP).DeserializeIdentity(0xc4200cacb0, 0xc4309a0000, 0x31e, 0x31e, 0x0, 0x0, 0x0, 0x0) 	/opt/gopath/src/github.com/hyperledger/fabric/msp/cache/cache.go:64 +0xfb github.com/hyperledger/fabric/msp.(*mspManagerImpl).DeserializeIdentity(0xc420278660, 0xc4309a0000, 0x31e, 0x31e, 0x3, 0x3, 0xc42001f300, 0x7f6fb8068330) 	/opt/gopath/src/github.com/hyperledger/fabric/msp/mspmgrimpl.go:98 +0x1e1 github.com/hyperledger/fabric/common/cauthdsl.compile.func2(0xc4250bd838, 0x1, 0x1, 0xc423518498, 0x1, 0x1, 0xc421934600) 	/opt/gopath/src/github.com/hyperledger/fabric/common/cauthdsl/cauthdsl.go:87 +0x40b github.com/hyperledger/fabric/common/cauthdsl.compile.func1(0xc4250bd838, 0x1, 0x1, 0xc423518449, 0x1, 0x1, 0x8) 	/opt/gopath/src/github.com/hyperledger/fabric/common/cauthdsl/cauthdsl.go:57 +0x320 github.com/hyperledger/fabric/common/cauthdsl.(*policy).Evaluate(0xc421b36630, 0xc4250bd838, 0x1, 0x1, 0x10, 0xcd8ee0) 	/opt/gopath/src/github.com/hyperledger/fabric/common/cauthdsl/policy.go:73 +0x78 github.com/hyperledger/fabric/common/policies.(*policyLogger).Evaluate(0xc4217ee340, 0xc4250bd838, 0x1, 0x1, 0x0, 0x0) 	/opt/gopath/src/github.com/hyperledger/fabric/common/policies/policy.go:190 +0x29d github.com/hyperledger/fabric/common/policies.(*implicitMetaPolicy).Evaluate(0xc4225d9740, 0xc4250bd838, 0x1, 0x1, 0x0, 0x0) 	/opt/gopath/src/github.com/hyperledger/fabric/common/policies/implicitmeta.go:91 +0x149 github.com/hyperledger/fabric/common/policies.(*policyLogger).Evaluate(0xc4222c5d40, 0xc4250bd838, 0x1, 0x1, 0x0, 0x0) 	/opt/gopath/src/github.com/hyperledger/fabric/common/policies/policy.go:190 +0x29d github.com/hyperledger/fabric/core/policy.(*policyChecker).CheckPolicyBySignedData(0xc420330210, 0xc423518470, 0x9, 0xe567c4, 0x1c, 0xc4250bd838, 0x1, 0x1, 0xc421a71568, 0xa6fa0e) 	/opt/gopath/src/github.com/hyperledger/fabric/core/policy/policy.go:180 +0x102 github.com/hyperledger/fabric/core/policy.(*policyChecker).CheckPolicy(0xc420330210, 0xc423518470, 0x9, 0xe567c4, 0x1c, 0xc42aab3aa0, 0x154ec20, 0xc420159180) 	/opt/gopath/src/github.com/hyperledger/fabric/core/policy/policy.go:104 +0x6ac github.com/hyperledger/fabric/core/endorser.(*Endorser).checkACL(0xc42032a760, 0xc42aab3aa0, 0xc42aab8e10, 0xc42aab3b90, 0xc4222c5d00, 0xc420159180, 0x0) 	/opt/gopath/src/github.com/hyperledger/fabric/core/endorser/endorser.go:81 +0x69 github.com/hyperledger/fabric/core/endorser.(*Endorser).ProcessProposal(0xc42032a760, 0x7f6fb82fa6c0, 0xc42aab39b0, 0xc42aab3aa0, 0x0, 0x0, 0x0) 	/opt/gopath/src/github.com/hyperledger/fabric/core/endorser/endorser.go:445 +0x1a40 github.com/hyperledger/fabric/core/handlers/auth.(*filter).ProcessProposal(0xc42026f4e0, 0x7f6fb82fa6c0, 0xc42aab39b0, 0xc42aab3aa0, 0xc42026f4e0, 0x42acb9, 0xc42abc2830) 	/opt/gopath/src/github.com/hyperledger/fabric/core/handlers/auth/auth.go:38 +0x51 github.com/hyperledger/fabric/protos/peer._Endorser_ProcessProposal_Handler(0xd34940, 0xc42026f4e0, 0x7f6fb82fa6c0, 0xc42aab39b0, 0xc42aab8cd0, 0x0, 0x0, 0x0, 0x0, 0x0) 	/opt/gopath/src/github.com/hyperledger/fabric/protos/peer/peer.pb.go:112 +0x276 github.com/hyperledger/fabric/vendor/google.golang.org/grpc.(*Server).processUnaryRPC(0xc420012b40, 0x1561d60, 0xc422590420, 0xc4225aff00, 0xc420330ea0, 0x153b310, 0xc42aab3a40, 0x0, 0x0) 	/opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/server.go:781 +0xab4 github.com/hyperledger/fabric/vendor/google.golang.org/grpc.(*Server).handleStream(0xc420012b40, 0x1561d60, 0xc422590420, 0xc4225aff00, 0xc42aab3a40) 	/opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/server.go:981 +0x1528 github.com/hyperledger/fabric/vendor/google.golang.org/grpc.(*Server).serveStreams.func1.1(0xc4230efe00, 0xc420012b40, 0x1561d60, 0xc422590420, 0xc4225aff00) 	/opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/server.go:551 +0x9f created by github.com/hyperledger/fabric/vendor/google.golang.org/grpc.(*Server).serveStreams.func1 	/opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/server.go:549 +0xa1 {code}  The trivial solution would be to protect the cache only with a simple mutex.  ></description> </Issue>
