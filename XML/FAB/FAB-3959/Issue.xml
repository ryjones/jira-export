<Issue id="16782" key="FAB-3959" number="3959" project="10002" reporter="vdods" creator="vdods" type="10001" summary="Need comments which fully define behavior for ChaincodeStubInterface" priority="3" resolution="10001" status="6" created="2017-05-16 20:56:31.0" updated="2020-01-22 19:10:23.0" resolutiondate="2020-01-22 19:10:23.0" votes="0" watches="2" workflowId="35175"> <description><! CDATA Because ChaincodeStubInterface is the central point of contact for chaincode developers, it's of utmost importance to fully specify the behavior that should be expected of the methods defined by that interface.  In particular, specifying conditions on the method arguments, and fully specifying what the return values mean and what the error conditions are.  Some methods' comments provide almost no information that isn't already conveyed by the method name itself.  For example: GetState, PutState, DelState.  In particular for these three, it's not clear what the behavior will be in the corner cases, such as if the key is not found, or if it's already present, or in what circumstances an error will be returned.  Having these all specified by the comments will facilitate chaincode developers in writing code that correctly handles all corner cases.  Some methods' comments don't provide enough in-source context for how they would be used – example usecases, etc – for example: CreateCompositeKey, SplitCompositeKey.  What is a "composite key", and where do I use it?  Returning specific types from functions is a great way to self-document code, because if the return type is specific enough (e.g. GetQueryResult returning StateQueryIteratorInterface, which has its own documentation and specific example usages; or GetHistoryForKey returning HistoryQueryIteratorInterface, which is a similar concept but is fortunately represented by a distinct type), then less needs to be explicitly written in the documentation.  Contrast this with GetBinding which returns the "transaction binding" as a generic (  byte, error) value, which does not give any clear place to look for what format it is or how to use it.  Googling `hyperledger "transaction binding"` turned up the interfaces.go source code and the Protocol Spec doc which references code that's out of date.  At the very least, there needs to be comments to the effect of "returns the transaction binding as a byte array in XYZ format, which can be used in functions A, B, and C to do operations P and Q (or whatever a transaction binding is used for)".  Generally to write good documentation it's necessary to have an accurate theory of mind for the reader – who are they, what context are they operating in, how much can they be expected to know, etc.  I would suggest that the target audience for interfaces.go should be non-expert programmers, familiar with golang, who have little DB or cryptographic knowledge/experience.  Then, give links to facilitate them to learn more about relevant topics with "for more, see X" links in the comments.  Example code is also great, though for something as important as ChaincodeStubInterface, one can't and shouldn't be expected to deduce all corner cases from example code.  ></description> </Issue>
