<Issue id="33156" key="FAB-11702" number="11702" project="10002" reporter="yoheiueda" assignee="yoheiueda" creator="yoheiueda" type="10001" summary="Optimistic TX manager that alleviates  lock contention of the lock-based TX manager " priority="3" status="10100" created="2018-08-23 10:30:22.0" updated="2021-03-13 08:49:22.0" votes="1" watches="4" workflowId="44367"> <description><! CDATA The current implementation of  lock-based transaction manager|https://github.com/hyperledger/fabric/tree/v2.0.0-alpha/core/ledger/kvledger/txmgmt/txmgr/lockbasedtxmgr  causes lock contention when workload is high. It always acquires a read  lock|https://github.com/hyperledger/fabric/blob/v2.0.0-alpha/core/ledger/kvledger/txmgmt/txmgr/lockbasedtxmgr/lockbased_txmgr.go#L41  during the whole simulation of a transaction. If each transaction simulation takes a long time, frequent execution of transactions interferes committer that acquires a write lock under heavy load. This lock contention also leads to service interruption during chaincode upgrade as described in FAB-11662.  We propose Optimistic Transaction Manager, which causes less lock contention for better scalability with high-latency transactions. Its design and initial performance results are described in this document.   *Design document*:  https://docs.google.com/document/d/1GSRnlZLOqZvupUara0w2emEsVeQgO4cxUq9T0QwMEts      Our main idea is as follows: * Check the version number of each GetState in RWset ** Peer checks latest block number at the beginning of chaincode execution ** Peer checks whether a version number of each GetState result is greater than latest block number after chaincode execution finishes (If the version number is greater than the latest block number, it violates snapshot isolation) * Set version = 0 in read set for a GetState call that violates snapshot isolation * Do MVCC check at commit phase as usual      We implemented an initial  prototype|https://gerrit.hyperledger.org/r/c/fabric/+/31884  and  conducted performance evaluation.  We obtained *15%* on average, and up to *48%* TPS improvement. (Our current prototype is based on our previous proposal in which violated simulations are replayed immediately.)  ></description> </Issue>
