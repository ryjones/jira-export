<Issue id="17213" key="FAB-4203" number="4203" project="10002" reporter="yacovm" creator="yacovm" type="10002" summary="backwards/forward compatibility of block validation in presence (or lack) of time expiration checks" priority="2" resolution="10001" status="6" created="2017-05-29 05:31:27.0" updated="2019-07-30 02:59:49.0" resolutiondate="2019-07-30 02:59:49.0" votes="0" watches="6" workflowId="35193" security="10001"> <description><! CDATA In FAB-3678 it was decided to remove time-related expiration checks from identity validation in order for blocks validation done at different times to be non-dependant on the current time, and FAB-4138 was created as a result, and merged. It was decided to postpone tackling the original problem post v1.0 (hereafter v1.1) This JIRA item brings up the following problems: - Backward compatibility: Given a peer that was compiled with code of v1.1, and a block that was created by an ordering service with code of v1.0, the peer needs to validate the transactions in the block with the same logic as a peer in v1.0, because it needs to reach the same world state as peers that processed the block at v1.0, otherwise a state split would occur. - Forward compatibility correctness: Given a peer that was compiled with code of v1.0, and a block (either received from a peer, or an ordering service) that was created by an ordering service of v1.1, the peer needs to be able to detect that the block was created by an ordering service version that it cannot process, and abort the commit. This is because the mechanism that handles time-related expiration checks does not exist in its code, while the mechanism exists in the code of peers with version v1.1.   *Backward compatibility:* Tackling Backward compatibility shouldn't be too hard if we have a new field in the block header (such as a timestamp, as proposed in FAB-3678), because when unmarshaling a message of version v1.0 by a protobuf schema  v1.1 that appends fields to the schema of v1.0, the newly introduced fields are set with zero values and this can be used to detect implicitly the version the block was made with. However - it may pose a challenge if the field is introduced only in a proto structure that exists solely in configuration updates, because it would require the ordering service to append a configuration update as part of an upgrade/migration of each "chain" from v1.0 to v1.1 and this may enforce a one-way upgrade with no ability to revert to v1.0 should problems arise.  *Forward compatibility:* This is more challenging and needs to be considered if it is indeed something that should be addressed or not. I asked whether it's possible to detect that a proto message you have in hand was made by a more recent schema than the schema in the code in the  protobuf google group|https://groups.google.com/forum/#!topic/protobuf/-7TeQ0Ud9mY   and they said they will change proto to  enforce unknown fields|https://docs.google.com/document/d/1KMRX-G91Aa-Y2FkEaHeeviLRRNblgIahbsk4wA14gRk/edit , but I think it's too late for us.  ></description> </Issue>
