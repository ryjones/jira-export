<Issue id="32829" key="FAB-11589" number="11589" project="10002" reporter="kchristidis" assignee="guoger" creator="kchristidis" type="10001" summary="As a Fabric user, I want my barebones, single-instance etcd/raft-based ordering service to resume from where it left off, if it crashes" priority="3" resolution="10000" status="6" created="2018-08-14 16:12:24.0" updated="2019-01-31 14:47:42.0" resolutiondate="2019-01-31 14:47:42.0" votes="0" watches="3" workflowId="44066"> <description><! CDATA h2. Acceptance criteria  h3. Scenario 1 (check for persistence) # User edits {{configtx.yaml}} so as to have a network with a single-node etcd/raft-based ordering service and a system channel that is also an application channel. Assume {{BatchSize}} is set to 10 and {{Batch.Timeout}} is set to a reasonably high value, e.g. 120s. # User launches single-node etcd/raft-based ordering service. # User invokes the Broadcast RPC to send {{BatchSize}} transactions ({{foo-1}} to {{foo-10}}) to the ordering service within {{Batch.Timeout}}. User receives a SUCCESS response for each of those calls. # Once {{BatchSize}} transactions have been sent successfully to the ordering service, user invokes the Deliver RPC and receives the genesis block and a block containing transactions {{foo-1}} to {{foo-10}}. # User restarts the OSN. # User re-issues Deliver RPC to the OSN and expects to receive the same blocks as in Step 4.  h3. Scenario 2 (check that crashed leader does not persist incomplete batches) # User edits {{configtx.yaml}} so as to have a network with a single-node etcd/raft-based ordering service and a system channel that is also an application channel. Assume {{BatchSize}} is set to 10 and {{Batch.Timeout}} is set to a reasonably high value, e.g. 120s. # User launches single-node etcd/raft-based ordering service. # User invokes the Broadcast RPC to send *less than*Â {{BatchSize}} transactions to the ordering service: {{foo-1}}, {{foo-2}}, {{foo-3}}. User receives a SUCCESS response for each of those calls. # User restarts the OSN before {{Batch.Timeout}} has elapsed since the OSN received the first transaction ({{foo-1}}). The goal is to prevent the OSN from cutting a block based on elapsed time. # User invokes the Broadcast RPC and successfully sends transactions {{bar-1}} to {{bar-10}} to the ordering service. # User issues a Deliver RPC to the OSN and expects to get only two blocks: the genesis block, and a block containing transactions {{bar-1}} to {{bar-10}}.  ></description> </Issue>
