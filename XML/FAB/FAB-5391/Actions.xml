<Action id="28746" issue="19370" author="suryalnvs" type="comment" body="Tried by changing the gossip parameters a bit, disabled gossip by making all the peers as orgLeaders, issue still persists. " created="2017-07-20 20:19:47.0" updateauthor="suryalnvs" updated="2017-07-20 20:19:47.0"/>
<Action id="28847" issue="19370" author="muralisr" type="comment" body=" ~suryalnvs  Just as the app sends sends 1 &quot;instantiate&quot; TX to peer0/Org1 which also brings up the chaincode there , before starting the perf test, can we send 1 &quot;invoke&quot; to peer0/Org2 which will bring up the chaincode on there ? If that works, this will be a good work around with which you can do the rest of performance testing." created="2017-07-22 21:16:16.0" updateauthor="muralisr" updated="2017-07-22 21:16:16.0"/>
<Action id="28864" issue="19370" author="clayton sims" type="comment" body="Sunday checkpoint status: Root cause determined.   Per Murali, straightforward fix.   HSBN already uses workaround above.   " created="2017-07-23 17:17:54.0" updateauthor="clayton sims" updated="2017-07-23 17:19:01.0"/>
<Action id="28925" issue="19370" author="suryalnvs" type="comment" body="With changes in  ^chaincode_support.go  given by  ~muralisr , ran the concurrency tests with 6 orgs, 3 channels (2 orgs per 1 channel) and sent transactions to each organization with 4 and 8 threads and issue is not reproducible." created="2017-07-24 20:13:26.0" updateauthor="suryalnvs" updated="2017-07-24 20:13:26.0"/>
<Action id="28953" issue="19370" author="wlahti" type="comment" body="CR submitted to gerrit: https://gerrit.hyperledger.org/r/#/c/11889/" created="2017-07-25 02:51:37.0" updateauthor="wlahti" updated="2017-07-25 02:51:37.0"/>
<Action id="28966" issue="19370" author="muralisr" type="comment" body="A bit of background... we were doubling the chaincode registration flag to do exactly this (&quot;in progress&quot;). when we narrowed the gap to register a chaincode just before launching the container (preLaunchSetup) that flag got moved.  When a bunch of invokes came in at the same time the thundering herd went into a &quot;launch/cleanup... launch/cleanup&quot; sequence.  The new &quot;in progress&quot; fixes simply restores old behavior while at the same time preserves the security of setting the registration at the time of container start up" created="2017-07-25 12:52:55.0" updateauthor="muralisr" updated="2017-07-25 12:52:55.0"/>
