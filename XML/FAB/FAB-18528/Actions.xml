<Action id="72000" issue="47100" author="yacovm" type="comment" created="2021-07-25 15:00:40.0" updateauthor="yacovm" updated="2021-07-25 15:00:40.0"> <body><! CDATA {quote}Send a constructed message whose header is invalid to the interface 'Order(env *cb.Envelope, configSeq uint64) error' {quote} But to get there, the message  needs to pass validation |https://github.com/hyperledger/fabric/blob/main/orderer/common/broadcast/broadcast.go#L149 where it will be rejected not be enqueued it into the consensus backend.  Can you provide the bytes of the message (in base64 or hex encoding) sent from the client to the orderer that caused the panic?  ></body> </Action>
<Action id="72016" issue="47100" author="JIRAUSER22201" type="comment" created="2021-08-11 09:49:32.0" updateauthor="JIRAUSER22201" updated="2021-08-11 09:49:32.0"> <body><! CDATA The message sent from the client can not pass the validation and will be rejected.  However, the constructed message from other orderers (through the interface "chain.rpc.SendSubmit(dest uint64, request *orderer.SubmitRequest, report func(err error))") do not have such validation, which can easily trigger this crash, leads to the breakdown of the orderer.     The base64 encoding message of *orderer.SubmitRequest can be found in the  ^fuzz input in base64 .   ~yacovm    ></body> </Action>
<Action id="72017" issue="47100" author="yacovm" type="comment" created="2021-08-11 09:57:43.0" updateauthor="yacovm" updated="2021-08-11 09:57:43.0"> <body><! CDATA  ~yuanliangchen  I understand, however, the Raft orderer is a crash fault tolerant orderer, not a byzantine fault tolerant orderer.  Thus, if a Raft orderer becomes malicious, it can do much worse things than crash orderers, for example-  he can make the blockchain fork by becoming a leader and sending different blocks to different nodes, etc.     Also, keep in mind that it's impossible to send a SendSubmit RPC to an orderer unless you have a TLS certificate of another orderer, because Raft's communication layer uses mutual TLS with TLS pinning.        In any case, do you want to push a fix? I can review it.  ></body> </Action>
<Action id="72018" issue="47100" author="JIRAUSER22201" type="comment" created="2021-08-11 10:37:04.0" updateauthor="JIRAUSER22201" updated="2021-08-11 10:37:04.0"> <body><! CDATA  ~yacovm  I understand that the Raft orderer is a crash fault-tolerant orderer, however, this vulnerability can easily break down as many orderers as you want. And It can be fixed easily, I have pushed a fix ( https://github.com/hyperledger/fabric/pull/2824).      Actually, I really want to test your PBFT consensus using my latest Blockchain-Fuzzer, I wonder when it is available?     ></body> </Action>
<Action id="72019" issue="47100" author="yacovm" type="comment" created="2021-08-11 11:46:17.0" updateauthor="yacovm" updated="2021-08-11 11:46:17.0"> <body><! CDATA It's available here:  https://github.com/SmartBFT-Go/fabric/      Use the branch release-1.4-BFT-3 or release-1.4-BFT-4     But it's not PBFT, but actually a non-pipelined PBFT (we can only do 1 block at a time, not several, like PBFT does, and we also have a checkpoint each block and not periodically like PBFT)  ></body> </Action>
