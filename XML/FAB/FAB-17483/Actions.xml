<Action id="67883" issue="44302" author="denyeart" type="comment" created="2020-02-10 13:59:14.0" updateauthor="denyeart" updated="2020-02-10 13:59:14.0"> <body><! CDATA First network is being sunset in favor of the new test network in v2.0. If there are improvements required, let's add them to test network instead of first network.  https://hyperledger-fabric.readthedocs.io/en/release-2.0/test_network.html  https://github.com/hyperledger/fabric-samples/tree/master/test-network/addOrg3   ~negupta  Can answer other questions about test network.  I'm marking this as Won't Do, but if you'd like to extend first network in release-1.4, feel free to re-open.  ></body> </Action>
<Action id="67884" issue="44302" author="negupta" type="comment" created="2020-02-10 14:46:20.0" updateauthor="negupta" updated="2020-02-10 14:46:20.0"> <body><! CDATA The test network supports Using the Fabric CA server to generate the certificates for all organizations, including org3. Unlike the first network, which uses cryptogen to create the certificates and keys, and then bootstrap a fabric CA with a key and cert, the test network initializes the fabric ca server and then uses it to generate the crypto material.  https://github.com/hyperledger/fabric-samples/tree/master/test-network/organizations/fabric-ca  ></body> </Action>
<Action id="67895" issue="44302" author="pvrbharg" type="comment" created="2020-02-11 02:27:47.0" updateauthor="pvrbharg" updated="2020-02-11 02:27:47.0"> <body><! CDATA Dear David and Nikhil,  Outstanding response and I need to get the V2.0.0 code base and run thru'. A vast number of our customers are using really code base that is pre-v2.0.0. - per my read and own experience - from pre-v1.0.0 alpha  sad I know  to various release levels - all the way up to v1.4.3  not yet v1.4.4 since we have not published v1.4.4 IBP images yet . So I would mull over on the re-open comment.  As I check out shortly - if you know the answer from your top of head - you can respond  optional and I would review the code and run the network myself : * Do we know if the certificates provisioned by fabric-ca-server are self-signed or root/intermediate signed? * Do we know if the certificates provisioned by fabric-ca-server are a separate set each - for application identities versus TLS endpoint certificates? including the  provisioning corresponding intermediate CAs  separated for application identities provisioning versus TLS cerificates provisioning?   My above thoughts are based on what we guide in read-only documentation as best/recommended practices.  Hopefully I am clear here in my ask - if not we can connect out-of-band per your response.   Thanks.  ></body> </Action>
<Action id="67922" issue="44302" author="pvrbharg" type="comment" created="2020-02-12 19:09:22.0" updateauthor="pvrbharg" updated="2020-02-12 19:09:22.0"> <body><! CDATA Dear David and Nikhil,     Per my read of running fabric-ca-server log for Org2 - in a docker container for test-network as attached below:   ^fabric-ca-server-bringup-log-ORG2.txt   ^The server is an intermediate server backed by a root and we are running only one set of servers per each ORG - provisioning both Application and TLS PKI  for application signing by actors and for client-server communication of peer-orderer using TLS.^  ^Please confirm my understanding.^  ^This is not per our recommended best practice here  especially in the context of Fabric-ca-server, given it is supported for operational deployments and unlike cryptogen  unsupported in production topology :^  ^ https://hyperledger-fabric.readthedocs.io/en/release-1.4/msp.html ^  ^ https://hyperledger-fabric.readthedocs.io/en/release-2.0/msp.html#membership-service-providers-msp ^  *6) CAs and TLS CAs*  MSP identities’ root CAs and MSP TLS certificates’ root CAs (and relative intermediate CAs) need to be declared in different folders. This is to avoid confusion between different classes of certificates. It is not forbidden to reuse the same CAs for both MSP identities and TLS certificates but best practices suggest to avoid this in production.     We can always say - the test-network sample is a sample and uses one set of CAs per Org - to show the concept. We might be better served if we state this explicitly in the documentation since our sample is doing what we tell to be a not recommended practice for operational deployments.  Please share your wisdom.     ^Thanks.^  ></body> </Action>
<Action id="67926" issue="44302" author="negupta" type="comment" created="2020-02-12 19:33:45.0" updateauthor="negupta" updated="2020-02-12 19:33:45.0"> <body><! CDATA  ~pvrbharg  The Test Network CAs are self signed. The create their own root, and are not intermediates of any any other CA, or use a private key or cert to bootstrap. Each CA has a TLS CA profile which is used to create the TLS certificates. The enrollment command creates a different folder structure for the TLS certificates created by the Fabric CA.   Given that it is a test network, this setup seems fine to me and demostrates the concept of how to use CAs with Fabric (which many users do not use at all given how easy to use cryptogen is). The Fabric CA operations guide https://hyperledger-fabric-ca.readthedocs.io/en/latest/operations_guide.html is linked to by the tutorial, and uses different CAs for the MSP folder and for TLS. It uses self signed CAs that are not intermediates.  ></body> </Action>
<Action id="67927" issue="44302" author="pvrbharg" type="comment" created="2020-02-12 19:50:13.0" updateauthor="pvrbharg" updated="2020-02-12 19:50:13.0"> <body><! CDATA  ~negupta  - Thank you for your clarification and the following lines from the attached log files confused me to interpret the way I did:   2020/02/12 17:04:08  INFO  Server Version: 1.4.4 2020/02/12 17:04:08  INFO  Server Levels: &{{color:#0747a6}*Identity:2*{color} Affiliation:1 Certificate:1 Credential:1 RAInfo:1 Nonce:1}  2020/02/12 17:04:08  DEBUG  {color:#0747a6}*Init CA with home /etc/hyperledger/fabric-ca-server and config \{Version:1.2.0 Cfg:{Identities:{PasswordAttempts:10 AllowRemove:false} Affiliations:\{AllowRemove:false}} CA:\{Name:ca-org2 Keyfile: Certfile:ca-cert.pem Chainfile:ca-chain.pem} Sign*{color} {color:#0747a6}*ing:0xc000407570 CSR:\{CN:ca.org2.example.com Names: {C:UK ST:Hampshire L:Hursley O:org2.example.com OU: SerialNumber:}  Hosts: localhost org2.example.com  KeyRequest:0xc00000fc20 CA:0xc00000fca0 SerialNumber:} Registry:{MaxEnrollments:-1 Identities: { Name:**** Pass:*****{color} {color:#0747a6} *Type:client Affiliation: MaxEnrollments:0 Attrs:map hf.AffiliationMgr:1 hf.GenCRL:1 hf.IntermediateCA:1 hf.Registrar.Attributes:* hf.Registrar.DelegateRoles:* hf.Registrar.Roles:* hf.Revoker:1  } } Affiliations:map org1: department1 department2  org2: department1   LDA*{color} {color:#0747a6}*P:\{ Enabled:false URL:ldap://****:****@<host>:<port>/<base> UserFilter:(uid=%s) GroupFilter:(memberUid=%s) Attribute:{ uid member   { }  map groups: \{ }  } TLS:\{false    { }} } DB:\{ Type:sqlite3 Datasource:fabric-ca-server.db TLS:{false    { }} } CSP:0xc0004143c0 Clien*{color} {color:#0747a6}*t:<nil> Intermediate:\{ParentServer:{ URL: CAName: } TLS:\{Enabled:false CertFiles:   Client:{KeyFile: CertFile:}} Enrollment:\{ Name: Secret:**** CAName: AttrReqs:   Profile: Label: CSR:<nil> Type:x509 }} CRL:\{Expiry:24h0m0s} Idemix:{IssuerPublicKeyfile: IssuerSecretKeyf*{color} {color:#0747a6}*ile: RevocationPublicKeyfile: RevocationPrivateKeyfile: RHPoolSize:100 NonceExpiration:15s NonceSweepInterval:15m}}*{color}  2020/02/12 17:04:08  DEBUG  {color:#0747a6}*Root CA certificate request: \{CN:ca.org2.example.com Names: {C:UK ST:Hampshire L:Hursley O:org2.example.com OU: SerialNumber:}  Hosts: localhost org2.example.com  KeyRequest:0xc000414f60 CA:0xc00000fca0 SerialNumber:}*{color} 2020/02/12 17:04:08  INFO  generating key: &\{A:ecdsa S:256} 2020/02/12 17:04:08  DEBUG  generate key from request: algo=ecdsa, size=256 2020/02/12 17:04:08  INFO  {color:#0747a6}*encoded CSR*{color} 2020/02/12 17:04:08  DEBUG  validating configuration  2020/02/12 17:04:08  DEBUG  validate local profile 2020/02/12 17:04:08  DEBUG  profile is valid 2020/02/12 17:04:08  INFO  signed certificate with serial number 118106335947109942251728065692578049638921483662 2020/02/12 17:04:08  INFO  *{color:#0747a6}The CA key and certificate were generated for CA ca-org2{color}* 2020/02/12 17:04:08  INFO  The key was stored by BCCSP provider 'SW' 2020/02/12 17:04:08  INFO  The certificate is at: /etc/hyperledger/fabric-ca-server/ca-cert.pem     Thanks and I would defer to your judgement - if further documentation is needed or not.     Thanks.  ></body> </Action>
<Action id="67929" issue="44302" author="negupta" type="comment" created="2020-02-12 23:45:20.0" updateauthor="negupta" updated="2020-02-12 23:45:20.0"> <body><! CDATA I think this says that the CA is allowed to create intermediates: hf.IntermediateCA:1   As for the location, I included different locations for the different test network orgs, new york, durham nc, and hursley UK, in the configuration file of the Fabric-CA-Server file for the fun of it.  ></body> </Action>
