<Issue id="42243" key="FAB-16544" number="16544" project="10002" reporter="ptippett" assignee="jyellick" creator="ptippett" type="10001" summary="Need a way for new peers to know if orderer locations have changed" priority="3" resolution="10000" status="6" created="2019-09-09 16:26:11.0" updated="2020-06-25 10:33:19.0" resolutiondate="2019-11-18 15:26:37.0" votes="0" watches="5" workflowId="55297"> <description><! CDATA *Background:*  Currently in Hyperledger Fabric, new peers joining a channel can only get the orderer locations from the channel genesis block.  Once joined to a channel, any change to orderer locations will be pushed as a channel config block so the peers are able to update.     The problem is, if the orderer locations have changed at any point during the life of the channel, new peers joining that channel have no way to get the current, correct location of the ordering nodes since the genesis block will have old information and the peers don't have access to anything else.     I believe there is work slated for maybe Fabric 2.0 (or later) to allow peers joining the channel to pull the orderer locations (and perhaps other data) from the latest channel config block vs only the genesis block.  This seems like the proper way to solve this long term, but we need a 1.x based solution to hold us over until then and this is what this story is meant to address.     *Proposed Change:*  After some internal discussions we believe that the best solution to this problem until the long term fix shows up is to add a section to core.yaml to provide an additional set of  orderer locations the peer could check when joining a channel if none of the original orderer locations were valid.  I say "none" because my thinking is as long as the peer was able to connect to one of the orderers and join the channel, it could then get the locations of the rest of the orderers from the channel configuration it gets after it joins.  The logic could of course be to check the core.yaml block if any of the orderers listed in the genesis block didn't exist or to check it every time.  I'm told there is precedence here since the same thing was done for TLS certificates, so I suspect the exact same logic would apply.  ></description> </Issue>
