<Issue id="26790" key="FAB-7725" number="7725" project="10002" reporter="muhammadsalah" assignee="c0rwin" creator="muhammadsalah" type="10004" summary="Eventhub crashes on broadcasting same transaction blob twice" priority="2" resolution="10000" status="6" created="2018-01-13 12:04:38.0" updated="2019-01-02 07:31:10.0" resolutiondate="2018-01-18 12:16:15.0" votes="0" watches="3" workflowId="40955"> <description><! CDATA I wanted to demonstrate how Peers refuse malicious transactions, so I looked for a way to resubmit same transaction twice like a "double spend" use case. The expected behavior, that Peers should reject the transaction, but it affects the Peers runtime.   The steps in the github link; it runs a scenario of invoking a transaction to a chaincode; and all I did is retrieving that transaction details; and broadcasting it again.  In order to reproduce you follow the steps in the README file on the github, and then follow the steps I document down here.  I have leveraged this tool: "fabric-prototype" that does the basic CLI functionalities.   https://github.com/jeffgarratt/fabric-prototype   I run the basic scenario following the README; and everything checks out good on the network.  I check into a Python terminal: pasting all these lines  which can be found in the "tmp" folder under the current run "UUID" in the "scenario.html"  {{from common import common_pb2 as common_dot_common_pb2}}  {{from common import configtx_pb2 as common_dot_configtx_pb2}}  {{from common import configuration_pb2 as common_dot_configuration_pb2}}  {{from common import ledger_pb2 as common_dot_ledger_pb2}}  {{from common import policies_pb2 as common_dot_policies_pb2}}  {{from msp import msp_config_pb2, msp_principal_pb2, identities_pb2}}  {{from peer import configuration_pb2 as peer_dot_configuration_pb2}}  {{from orderer import configuration_pb2 as orderer_dot_configuration_pb2}}  {{from steps import endorser_util}}  {{from steps import composer}}  {{from steps import bootstrap_util, contexthelper, compose}}  {{context = contexthelper.Context()}}  {{directory = bootstrap_util.getDirectory(context)}}  {{directory.initFromPath('tmp/<UUID>/dir.pickle') # it is usually auto generated in the scenario file.}}  {{composition = compose.Composition(context=context, projectName='<UUID>', composeFilesYaml='tmp/<UUID>/docker-compose.yml', register_and_up=False)}}  {{composition.rebuildContainerData()}}  {{context.compose_containers=composition.containerDataList}}  {{user = directory.getUser('dev0Org0')}}  {{node_admin_tuple = user.tags 'consortium1-cert' }}  {{qscch = endorser_util.QSCCHelper(context=context, user=user, directory=directory, node_admin_tuple=node_admin_tuple)}}  {{user.tags.keys()}} {{p=user.tags 'invokeProposal1' }} {{bootstrap_util.broadcast_channel_config_tx(context=context, certAlias=None, composeService='orderer0', user=user, configTxEnvelope=p)}}  {{The transaction blob should pass through the orderer normall "Happens"}} {{The transaction blob should get rejected by the peers "Happens"}} {{But the "Eventhub" doesn't handle it, and it crashes.}}     {{I traced the logs through docker logs.}}  {{I have confirmed this on all version builds, including the latest commit build.}}     ></description> </Issue>
