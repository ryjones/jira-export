<Issue id="26768" key="FAB-7707" number="7707" project="10002" reporter="guoger" assignee="guoger" creator="guoger" type="10004" summary="Orderer failed to reconnect to Kafka after reboot in an edge case" priority="4" resolution="10000" status="6" created="2018-01-12 10:54:28.0" updated="2018-07-20 14:15:25.0" resolutiondate="2018-01-27 05:57:23.0" votes="0" watches="5" workflowId="40942"> <description><! CDATA If a channel has been idle (no tx) for a long time (> {{log.retention.(time)}} of kafka), and orderer has been rebooted during this period, another reboot of orderer would fail due to {{The requested offset is outside the range of offsets maintained by the server for the given topic/partition.}}  To reproduce: 1) start kafka-based OSN, submit some TXs 2) reboot orderer, so it would send a {{connect msg}} to kafka 3) wait for {{log.retention.(time)}} so all the data in Kafka are pruned 4) reboot orderer again and observe the failure  {{Connect msg}} advances Kafka offset, however lastOffsetPersisted is only advanced by TXs. In this case, when Kafka prunes data, it only records latest offset, which is a {{connect msg}} in this case. When orderer reboots again, it looks up {{lastOffsetPersisted}}, which is lost during pruning.  An interesting fact is that {{log.retention.(time)}} actually forces Kafka log roll-out, so a new segment file is created and old one can be deleted. Therefore, even if we set segment size and time to be sufficiently large, this problem still occurs.  By default, {{log.retention.(time}} is 168 hours (7 days). Sometimes users do have channels being idle for such long time, and orderer may reboot during that period.  ></description> </Issue>
