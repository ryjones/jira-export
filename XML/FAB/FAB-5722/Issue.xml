<Issue id="20116" key="FAB-5722" number="5722" project="10002" reporter="jyellick" creator="jyellick" type="10004" summary="fabric/core package unit tests do not run with &apos;go test ./core/...&apos;" priority="3" resolution="10002" status="6" created="2017-08-11 01:50:40.0" updated="2018-07-20 14:17:33.0" resolutiondate="2018-07-20 14:06:26.0" votes="0" watches="5" workflowId="43083"> <description><! CDATA For almost the entirety of the fabric codebase, a developer who is updating code may simply run {{go test ./...}} and the tests will appropriately run.  However, for the {{fabric/core}} code this is not the case. Instead, these tests must be executed via the {{make unit-test}} command, or with other mysterious prereqs in place (I believe a running peer process is required for some, and an instance of couch for others, but there may be other depenencies).  This makes hacking on fabric generally much more tedious than it needs to be. Especially for changes which may induce compile errors in the {{fabric/core}} packages.  Even running a command like "go test -run='^$' ./core/..." which should execute no tests, but simply compile them manages to fail.  Being forced to run the unit test via {{make unit-test}} is also astonishingly slower than via the {{go test}} natively. A quick check comparing testing {{go test ./orderer/... ./common/...}} on my laptop takes 15 seconds. The equivalent {{make unit-test}} command takes 8 minutes if the containers are already built, 10 if they must be built. Even enforcing {{-p 1}} as {{make unit-test}} does the native command still completes in under a minute.  Hence, I consider this a very real bug, that being forced to rely on {{make unit-test}} slows a developer's workflow by up to around 100 times in the worst case, or 10 times in the best case.  ></description> </Issue>
