<Issue id="33336" key="FAB-11796" number="11796" project="10002" reporter="yuki-kon" assignee="yuki-kon" creator="yuki-kon" type="10004" summary="fabric-samples/high-throughput: Remove the unnecessary prunesafe function" priority="3" resolution="10000" status="6" created="2018-08-30 02:07:57.0" updated="2019-02-22 12:58:33.0" resolutiondate="2019-02-22 12:58:33.0" votes="0" watches="2" workflowId="44624"> <description><! CDATA fabric-samples/high-throughput is a sample Chaincode for delta-based transaction model. When executing `update`, a new delta for a particular variable is updated to the ledger. The sum of a variable is updated to ledger by deleting all of its delta rows while computing the sum.  The current Chaincode has two types of pruning functions `pruneFast` and `pruneSafe`.  However, there is no difference between them in terms of Fabric’s transaction processing model. Current logic has a wrong assumption that a part of RW-sets are committed and the others are not committed within a transaction due to some failures. Two function has incorrect descriptions below. - pruneFast: This function is NOT safe as any failures or errors during pruning will result in an undefined final value for the variable and loss of data. Use pruneSafe if data integrity is important. - pruneSafe: It provides data backups in case the prune fails. The final aggregate value is computed before any deletion occurs and is backed up to a new row. This back-up row is deleted only after the new aggregate delta has been successfully written to the ledger.  These descriptions are not correct because RW-sets are committed to the ledger after endorsement and validation. If Chaincode fails to run `pruneFast` or `pruneSafe` at simulation phase, nothing is committed to the ledger. We need to remove the unnecessary `pruneSafe` function to make this sample follow the Fabric’s transaction processing model correctly. We also need to improve README.   ></description> </Issue>
