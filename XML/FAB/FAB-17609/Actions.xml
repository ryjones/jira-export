<Action id="68302" issue="44551" author="btl5037" type="comment" created="2020-03-12 19:55:17.0" updateauthor="btl5037" updated="2020-03-13 00:23:47.0"> <body><! CDATA I'd just like to comment as an extension of the discussion on our call this morning, as someone who has spent time in these directories trying to improve UT times, I can say, its tactically impossible to navigate or understand from the folder structure and names what everything is doing. Not to mention jumping around between utility files can often make minor changes difficult to keep up with as it affects many files on many paths when the sole consumers of all of these utilities are contained in one file.  While I understand Manish's point on limiting the scope of the file and pushing utils out to util packages, idiomatic go says we don't name the packages util and they should provide utility to more than one consumer, and even then if it makes sense, they should exist within the consumer, even if they duplicate code.  Here is Dave Cheney's (a Go maintainer and one of the foremost advocate on idiomatic Go) statement on the topic:  https://dave.cheney.net/2019/01/08/avoid-package-names-like-base-util-or-common   ></body> </Action>
<Action id="68306" issue="44551" author="senthil1" type="comment" created="2020-03-13 02:11:22.0" updateauthor="senthil1" updated="2020-03-13 02:12:22.0"> <body><! CDATA Good usage of util package can be found in the Kubernetes repo – It supports nearly 26  volume types|https://github.com/kubernetes/kubernetes/tree/9d0cbb7503b7070817b3ec08e76f3f3addf3675b/pkg/volume . As all these volumes require certain common utility functions. Hence, they have made a  util folder|https://github.com/kubernetes/kubernetes/tree/9d0cbb7503b7070817b3ec08e76f3f3addf3675b/pkg/volume/util  to keep all these utilities as these are used by many other packages. Here, the duplication of code in 26 packages would be too much overhead in terms of code Maintainance when one util function needs to be changed. If a utility function is used in a single place, I agree that we do not need a separate package and it should stay within the package where it is used.   This is also important – taken from the above link –    {quote}For example, the {{net/http}}{{ package does not have }}{{client}}{{ and }}{{server }}packages, instead it has {{client.go}}{{ and }}{{server.go}}{{ files, each holding their respective types. transport.go}}{{ holds for the common message transport code used by both HTTP clients and servers.}} {quote}    I quickly looked at other projects which are based on go – golang, kubernetes, prometheus, docker, influxDB, cockroachDB. They have used lesser packages in general and more number of files per package. Even some packages had more than 20/30 files. This is true for C based project such as PostgreSQL (C does not have a concept of package but the number of folders is low and the number of files per folder is high).  ></body> </Action>
