<Action id="56415" issue="35404" author="kchristidis" type="comment" created="2019-01-30 23:44:50.0" updateauthor="kchristidis" updated="2019-01-30 23:44:50.0"> <body><! CDATA Discussed this with  ~joe-alewine  earlier today.  Here's a rough outline of how I'm imagining this will look: # Title ## Short introductory blurb about the Raft-based ordering service and why we built it. (Joe's idea.) ## What you need to know if you're: ### A user/client: #### Just how the ACK contract is changing. ### A peer operator: #### Nothing :D ### An OSN operator: #### Instructions on how to configure/setup a Raft-based ordering service #### Instructions on how to migrate #### Things you can do with a Raft-based ordering service you couldn't do before (e.g. have a channel with OSNs 1-2-3 as its consenter set, and another channel with OSNs 2-3-4 as its consenter set). Joe's right that we'll need lots of diagrams.     ></body> </Action>
<Action id="56848" issue="35404" author="joe-alewine" type="comment" created="2019-02-11 14:17:46.0" updateauthor="joe-alewine" updated="2019-02-11 14:20:08.0"> <body><! CDATA So my current plan is to have a whole doc that will fit into the "Key Concepts" section about orderers and ordering. We can talk about what orderers do and their role in the transaction flow and cover the different implementations — SOLO, Kafka, and RAFT — conceptually. What are they good for? What are they less go for? Then in any subsequent doc(s) we have, we can reference back to this doc.  The next question is how much/how many other docs we want/need.  So we're definitely going to need some kind of doc that shows people how to set this up. The question is whether this should be a tutorial (using BYFN and talking people through the steps) or more of an "operations guide" type doc (as the current Kafka doc is). Or both.  And then there's the question of whether we will need architecture reference for RAFT. This is for information/details that go beyond the scope of a tutorial or operations guide and would only clutter those docs up.  As a model for what I mean, here are the docs we generated for Private Data back in v1.2/  Private data concept:  https://hyperledger-fabric.readthedocs.io/en/release-1.4/private-data/private-data.html   Private data tutorial:  https://hyperledger-fabric.readthedocs.io/en/release-1.4/private_data_tutorial.html   Private data architecture reference:  https://hyperledger-fabric.readthedocs.io/en/release-1.4/private-data-arch.html      This isn't the only way to organize product release information, obviously. I know  ~kchristidis  mentioned that it might be more helpful to write the docs from the perspective of different kinds of users (developers versus architects versus operators). With a few exceptions, the Fabric community docs are organized more on a task basis (what is someone trying to do), versus the identity/job title of the person attempting to do it. Which isn't to say that we should do that for RAFT, just something worth mentioning  Definitely deserves more discussion either way. In the meantime, I'm beginning work in earnest on the "key concept" doc for orderers/ordering, which will add some new information in addition to synthesizing some information we had out there already in the "Peers" concept doc.  ></body> </Action>
<Action id="56866" issue="35404" author="joe-alewine" type="comment" body="Also worth wondering if we should add RAFT as an optional ordering service implementation to BYFN, similar to how BYFN gives you the option to use Java chaincode." created="2019-02-11 15:52:10.0" updateauthor="joe-alewine" updated="2019-02-11 15:52:10.0"/>
<Action id="56876" issue="35404" author="kchristidis" type="comment" created="2019-02-11 17:50:00.0" updateauthor="kchristidis" updated="2019-02-11 17:50:00.0"> <body><! CDATA  ~joe-alewine : Thanks for the thoughts on this! I see your note about the documentation being task-oriented. Do you think it'd be a stretch to imply a 1-to-1 mapping between tasks and identities? If you're a client, you're reading/writing. If you're a peer, you're reading. If you're an OSN, you're ordering. If we can say that, then perhaps the identity-driven approach is not that big of a stretch. At any rate, _as a user/consumer_ I'm a fan of keeping the documentation as concise as possibly, so I'd vote for 1 document for Raft and that's it. (Other than the orderer concept doc you're working on.)   ~guoger ,  ~adarshsaraf123 ,  ~yacovm : What do you gentlemen think about how Raft should be documented? See comments above.  {quote}Also worth wondering if we should add RAFT as an optional ordering service implementation to BYFN, similar to how BYFN gives you the option to use Java chaincode.{quote}  Yes, good idea.  ~tock  has actually done work on this. Keep track of FAB-12762.  ></body> </Action>
<Action id="56878" issue="35404" author="yacovm" type="comment" created="2019-02-11 18:03:02.0" updateauthor="yacovm" updated="2019-02-11 18:03:02.0"> <body><! CDATA In my opinion we need to cover 2 different aspects:  # High level flow and architecture - how Raft OSN works, what are the assumptions, etc. # Operations: ## Configuration of the bootstrap - configtx.yaml content ## Configuration of the consensus/cluster in orderer.yaml ## Reconfiguration - adding/removing nodes ## Onboarding   As well as a section of "known problems and workarounds" / FAQ.  ></body> </Action>
<Action id="56880" issue="35404" author="joe-alewine" type="comment" created="2019-02-11 19:05:00.0" updateauthor="joe-alewine" updated="2019-02-11 19:05:00.0"> <body><! CDATA  ~kchristidis  Yes, to your first point. I think we should start being more explicit who the targets are of a doc, even if we are not going to organize the table of contents itself under this user-based model. We've talked about have parallel documentation tailored to particular types of users, but ultimately it's just too much to rewrite every topic for each user type, even if the result would be boilerplate of the "as an application developer, you don't really give a damn about the ordering service implementation" variety. We compensate for this by trying to adhere to a policy of progressive disclosure. If a doc is getting down into weeds you're not interested in, go ahead and stop reading! That kind of thing. Not perfect, but we can't contain it any other way. We're also somewhat limited by RTD.  I think  ~yacovm 's organization makes a lot of sense. The question, again, is where we're going to draw the line between this information and the tutorial. Perhaps the tutorial could be more of a demonstration, stripped of most of the contextual information, and point to an "Operations" doc for the heart of the "whys" and "hows".  ></body> </Action>
<Action id="56900" issue="35404" author="guoger" type="comment" created="2019-02-12 03:47:05.0" updateauthor="guoger" updated="2019-02-12 03:47:05.0"> <body><! CDATA {quote}the Fabric community docs are organized more on a task basis {quote} It's not very clear to me why this "conflicts" with role-based approach. Personally I'm more used to _Developer Guide_, _Operator Guide_, User Guide_ kind of docs, and normally I find particular tasks under each one of them. In this sense, I'm slightly inclined towards the proposal from  ~kchristidis   However, instead of documenting delta, I think we should think as a newcomer to Fabric, i.e. instead of _Just how the ACK contract is changing_, we should write _What does ACK mean_. This does impose a huge amount of work, although I had an impression that rework of orderer docs is already part of plan? {quote}High level flow and architecture - how Raft OSN works, what are the assumptions, etc. {quote} +1 for this (esp. assumptions). i think it's worth to mention why Fabric is still BFT (to certain degree) whereas orderer itself is CFT for now. I personally was questioned a lot by this  ></body> </Action>
<Action id="58068" issue="35404" author="joe-alewine" type="comment" body="https://gerrit.hyperledger.org/r/c/30010/" created="2019-03-11 20:31:13.0" updateauthor="joe-alewine" updated="2019-03-11 20:31:13.0"/>
