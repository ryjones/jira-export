<Action id="21110" issue="14918" author="bmos299" type="comment" body="Ratanakar and Scott are evaluating the configuration." created="2017-02-22 14:26:56.0" updateauthor="bmos299" updated="2017-02-22 14:26:56.0"/>
<Action id="21112" issue="14918" author="bmos299" type="comment" body="...changing to high from highest." created="2017-02-22 14:52:43.0" updateauthor="bmos299" updated="2017-02-22 14:52:43.0"/>
<Action id="21113" issue="14918" author="jyellick" type="comment" created="2017-02-22 15:10:35.0" updateauthor="jyellick" updated="2017-02-22 15:10:35.0"> <body><! CDATA How is the orderer being started?  This is a symptom of starting the orderer in the ad-hoc dev environment (while not working in fabric.git) which attempts to generate a genesis block dynamically.  The recommended path for configuring the orderer is to:  1. Execute the {{configtxgen}} tool to generate a genesis block. 2. Copy this genesis block to the container/machine where the orderer is to be started. 3. Start the orderer specifying the {{ORDERER_GENERAL_GENESISMETHOD=file}} and {{ORDERER_GENERAL_GENESISFILe=/path/you/configured}}  Please see {{fabric/docs/configtxgen.md}} for more details on this process.  Note, the reason why you should absolutely not dynamically generate the genesis block outside of a dev environment, is that marshaling is not deterministic (and this is not just theoretical for configuration, this is actual) and so if you attempt to start for instance 2 Kafka orderers, each dynamically bootstrapped, there's a very high probability that each instance will have a different genesis hash, and the two blockchains will start (and stay) in a diverged state.  The error you are seeing is because in the default development mode, the orderer will attempt to invoke the {{configtxgen}} tool under the covers.  The default config in {{configtx.yaml}} references {{msp/sampleconfig}} which is present in the fabric.git root.  If you are still convinced that you would like to dynamically generate the genesis block, then I recommend that you pass {{ORDERER_GENERAL_GENESISPROFILE=SimpleInsecureSolo}} which will not attempt to include any MSP definitions, and will workaround this problem.  ></body> </Action>
<Action id="21198" issue="14918" author="scottz" type="comment" created="2017-02-28 00:00:33.0" updateauthor="scottz" updated="2017-02-28 00:00:33.0"> <body><! CDATA OK, I believe I was correctly using the dev environment, but will write this off to tester error, having only partially understood and adapted to the the new  file method from the provisional method. I will be working more to understand this and use the new file method in coming days and will create new bugs if issues found. In the meantime, is it appropriate to panic, when someone configures incorrectly, or should the orderer handle things more gracefully here?  I would think the latter, but am open to discussion. The orderer could be used for other orgs and networks and channels, etc, and we wouldn't want to take them down too, would we?  ></body> </Action>
<Action id="21443" issue="14918" author="jyellick" type="comment" body="If this is resolved, can we close it?" created="2017-03-10 18:27:44.0" updateauthor="jyellick" updated="2017-03-10 18:27:44.0"/>
<Action id="21460" issue="14918" author="scottz" type="comment" body="Although the test steps may be suspect, the error remains a panic. That should be addressed with this issue." created="2017-03-11 21:59:09.0" updateauthor="scottz" updated="2017-03-11 21:59:09.0"/>
<Action id="21490" issue="14918" author="jyellick" type="comment" body="This panic is triggered by {{logger.Panicf}} purposefully when the configuration specified is incorrect and the orderer cannot start.  I&apos;m not sure what there is to address?  We could change this to a {{logger.Fatalf}} but this simply provides less debug information and makes testing the failure cases in unit tests much more painful." created="2017-03-13 14:51:03.0" updateauthor="jyellick" updated="2017-03-13 14:51:03.0"/>
