<Issue id="15952" key="FAB-3359" number="3359" project="10002" reporter="yacovm" assignee="yacovm" creator="yacovm" type="10004" summary="Re-introduce usage of TLS-Unique in gossip handshake" priority="2" resolution="10000" status="6" created="2017-04-23 18:49:59.0" updated="2018-07-20 14:12:21.0" resolutiondate="2017-06-05 21:56:11.0" votes="5" watches="9" workflowId="38125"> <description><! CDATA Long long ago, the gossip comm layer used TLS-Unique as a challenge to be signed during the communication layer handshake. At some point it was decided to use a  different TLS binding |https://github.com/hyperledger/fabric/commit/a9508542cf3125ef9aa2883b70e7c14140b152c1  that takes advantage of mutual TLS between peers.  After some time when TLS was introduced (however- without client authentication), it was decided to  add a configuration flag to disable checking |https://github.com/hyperledger/fabric/commit/cc03cac020eebfefa058adcf98f9c2cbb8f50d34  the TLS binding of the handshake in order to allow peers to communicate with no TLS.  The gossip layer uses the TLS binding in order to authenticate the identity of the peer on the other side of the connection. Using the configuration flag above *exposes the peer to impersonation attacks* on the one hand, but on the other hand- it's not possible to make peers communicate without this flag, until mutual TLS can be supported in the peer.  Since we are at the brink of the release and it doesn't seem like mutual TLS will be supported anytime soon, I suggest the following: * To bring back the use of TLS-Unique (it enables authenticating both sides of the connection) and include that too in the gossip  handshake message |https://github.com/hyperledger/fabric/blob/master/protos/gossip/message.proto#L155-L159  * To get rid of the  skipHandshake flag |https://github.com/hyperledger/fabric/blob/master/sampleconfig/core.yaml#L138  and instead have the runtime decide which binding to use according to what's available: ** If TLS is detected, and the client-side peer sent its certificate, use both the signature over the TLS-Unique and the the signature over the remote peer's certificate's hash (that's what is used now) to authenticate the remote peer. ** If TLS is detected, and the client side peer hasn't sent it's certificate, use only TLS-Unique to authenticate the remote peer. ** If TLS isn't detected, do what is done now  Time-wise I don't think it's a big of a change because we already have unit tests that test the current flow, and we even have the old code (from git) that extracts the TLS-Unique.  All that is needed to test such a change is just adjust the  existing unit test |https://github.com/hyperledger/fabric/blob/master/gossip/comm/comm_test.go#L204-L258 .  Also- our current e2e test uses TLS without mutual authentication, so if it passes we know that the change didn't hurt the existing situation.  ></description> </Issue>
