<Issue id="43827" key="FAB-17307" number="17307" project="10002" reporter="tatsu-sato" assignee="tatsu-sato" creator="tatsu-sato" type="10004" summary="ApproveForMyOrg should check the InitRequired parameter for the current number" priority="3" resolution="10000" status="6" created="2020-01-07 04:21:00.0" updated="2020-01-08 18:36:53.0" resolutiondate="2020-01-08 18:36:53.0" votes="0" watches="2" workflowId="57680"> <description><! CDATA ApproveForMyOrg puts a chaincode definition entry for either the currently defined sequence number or the next sequence number. According to comments on the current implementation,  for the definition of the current sequence number (which means it has been committed),  this command should reject the requested definition unless the requested one must match exactly the current one.  However, the current ApproveForMyOrg command does not check the InitRequired parameter, so the operators can update the InitRequired parameter. When an organization does this update, it returns the chaincode to unapproved status for the organization.  Commands by using test-network to reproduce the bug: {code:java} $ cd fabric-samples/test-network $ ./network.sh up (Ommited)  $ ./network.sh createChannel (Ommited)  $ ./network.sh deployCC (Ommited) ++ peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls true --cafile /home/ubuntu/workspace/src/github.com/hyperledger/fabric-samples/test-network/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --channelID mychannel --name fabcar --version 1 --init-required --package-id fabcar_1:a6b61184ef66929c1b6e6ad657c248e9ba6283080eb59250a93e1706eeffe981 --sequence 1 (Ommited)  # Environment variables for Org1 $ export CORE_PEER_TLS_ENABLED=true $ export CORE_PEER_LOCALMSPID="Org1MSP" $ export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt $ export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp $ export CORE_PEER_ADDRESS=localhost:7051 $ export FABRIC_CFG_PATH=$PWD/../config/  # Rerun approveformyorg without --init-required  $ peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls true --cafile /home/ubuntu/workspace/src/github.com/hyperledger/fabric-samples/test-network/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --channelID mychannel --name fabcar --version 1 --package-id fabcar_1:a6b61184ef66929c1b6e6ad657c248e9ba6283080eb59250a93e1706eeffe981 --sequence 1 2020-01-07 02:34:20.864 UTC  chaincodeCmd  ClientWait -> INFO 001 txid  f7041b066d1af612582bf0b7e18962457accdac53b4a41c3728f0fef78a7409a  committed with status (VALID) at  # Check the chaincode status $ peer lifecycle chaincode querycommitted --channelID mychannel --name fabcar Committed chaincode definition for chaincode 'fabcar' on channel 'mychannel':Version: 1, Sequence: 1, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals:  Org1MSP: false, Org2MSP: true   # Environment variables for Org2 $ export CORE_PEER_TLS_ENABLED=true $ export CORE_PEER_LOCALMSPID="Org2MSP" $ export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt $ export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp $ export CORE_PEER_ADDRESS=localhost:9051  # Rerun approveformyorg without --init-required  $ peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls true --cafile /home/ubuntu/workspace/src/github.com/hyperledger/fabric-samples/test-network/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --channelID mychannel --name fabcar --version 1 --package-id fabcar_1:a6b61184ef66929c1b6e6ad657c248e9ba6283080eb59250a93e1706eeffe981 --sequence 1 2020-01-07 02:55:01.238 UTC  chaincodeCmd  ClientWait -> INFO 001 txid  c3eb41ff7ae02272a05e30c72df47a634be8805941c9bf12c2c68fa74910cc75  committed with status (VALID) at  # Check the chaincode status $ peer lifecycle chaincode querycommitted --channelID mychannel --name fabcar Committed chaincode definition for chaincode 'fabcar' on channel 'mychannel':Version: 1, Sequence: 1, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals:  Org1MSP: false, Org2MSP: false   # Rerun commit without â€“init-required (Cannot re-commit for the current number) $ peer lifecycle chaincode commit -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls true --cafile /home/ubuntu/workspace/src/github.com/hyperledger/fabric-samples/test-network/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --channelID mychannel --name fabcar --peerAddresses localhost:7051 --tlsRootCertFiles /home/ubuntu/workspace/src/github.com/hyperledger/fabric-samples/test-network/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles /home/ubuntu/workspace/src/github.com/hyperledger/fabric-samples/test-network/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt --version 1 --sequence 1 Error: proposal failed with status: 500 - failed to invoke backing implementation of 'CommitChaincodeDefinition': requested sequence is 1, but new definition must be sequence 2 {code} To fix the bug, it is necessary to add a check mechanism for the InitRequired parameter to ApproveForMyOrg.  ></description> </Issue>
