<Action id="71364" issue="46387" author="sykesm" type="comment" created="2021-02-08 15:52:15.0" updateauthor="sykesm" updated="2021-02-08 15:52:15.0"> <body><! CDATA This is still happening (I just hit it during CI for PR #2375) and it's easy to create locally.  {code} • Failure  103.657 seconds  ChannelParticipation /home/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/integration/raft/channel_participation_test.go:42 three node etcdraft network with a system channel /home/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/integration/raft/channel_participation_test.go:1035 joins channels using the legacy channel creation mechanism and then removes the system channel to transition to the channel participation API  It  /home/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/integration/raft/channel_participation_test.go:1060  Timed out after 60.000s. Expected <channelparticipation.ChannelInfo>: { Name: "testchannel", URL: "/participation/v1/channels/testchannel", Status: "active", ConsensusRelation: "consenter", Height: 6, } to equal <channelparticipation.ChannelInfo>: { Name: "testchannel", URL: "/participation/v1/channels/testchannel", Status: "inactive", ConsensusRelation: "config-tracker", Height: 6, }  /home/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/integration/raft/channel_participation_test.go:1133 ------------------------------   Summarizing 1 Failure:   Fail  ChannelParticipation three node etcdraft network with a system channel  It  joins channels using the legacy channel creation mechanism and then removes the system channel to transition to the channel participation API /home/sykesm/workspace/fabric/src/github.com/hyperledger/fabric/integration/raft/channel_participation_test.go:1133  Ran 1 of 35 Specs in 103.817 seconds FAIL! -- 0 Passed | 1 Failed | 0 Pending | 34 Skipped --- FAIL: TestRaft (103.82s) FAIL  Tests failed on attempt #1 {code}  The recreate simply focused the test and ran `stress -c 5` in the background to burn CPU.  ></body> </Action>
<Action id="71391" issue="46387" author="sykesm" type="comment" created="2021-02-12 20:59:03.0" updateauthor="sykesm" updated="2021-02-12 20:59:45.0"> <body><! CDATA Just finished a quick discussion with  ~jyellick  on this. It appears that this test works when orderer-3 is the leader and fails when it is not. We can see from the logs that the configuration transaction is received by orderer 3:  {code}  e  OrdererOrg.orderer3  2021-02-12 09:32:53.929 EST 005a INFO  orderer.consensus.etcdraft  writeBlock -> Writing block  5  (Raft index: 10) to ledger channel=testchannel node=3  e  OrdererOrg.orderer1  2021-02-12 09:32:53.929 EST 0062 INFO  orderer.consensus.etcdraft  writeBlock -> Writing block  5  (Raft index: 10) to ledger channel=testchannel node=1  e  OrdererOrg.orderer1  2021-02-12 09:32:53.933 EST 0063 INFO  orderer.consensus.etcdraft  writeConfigBlock -> Config block just committed removes node 3, pause accepting transactions till config change is applied channel=testchannel node=1  e  OrdererOrg.orderer1  2021-02-12 09:32:53.933 EST 0064 INFO  orderer.consensus.etcdraft  apply -> Accumulated 25479 bytes since last snapshot, exceeding size limit (1024 bytes), taking snapshot at block  5  (index: 10), last snapshotted block number is 4, current nodes:  1 2 3  channel=testchannel node=1  e  OrdererOrg.orderer1  2021-02-12 09:32:53.933 EST 0065 INFO  orderer.consensus.etcdraft  run -> Config block or ConfChange in flight, pause accepting transaction channel=testchannel node=1  e  OrdererOrg.orderer1  2021-02-12 09:32:53.933 EST 0066 INFO  orderer.consensus.etcdraft  saveSnap -> Persisting snapshot (term: 3, index: 10) to WAL and disk channel=testchannel node=1  e  OrdererOrg.orderer1  2021-02-12 09:32:53.934 EST 0067 INFO  orderer.consensus.etcdraft  stepFollower -> 1 not forwarding to leader 2 at term 3; dropping proposal channel=testchannel node=1  e  OrdererOrg.orderer3  2021-02-12 09:32:53.935 EST 005b INFO  orderer.consensus.etcdraft  writeConfigBlock -> Config block just committed removes node 3, pause accepting transactions till config change is applied channel=testchannel node=3  e  OrdererOrg.orderer3  2021-02-12 09:32:53.935 EST 005c INFO  orderer.consensus.etcdraft  stepFollower -> 3 not forwarding to leader 2 at term 3; dropping proposal channel=testchannel node=3  e  OrdererOrg.orderer3  2021-02-12 09:32:53.935 EST 005e INFO  orderer.consensus.etcdraft  saveSnap -> Persisting snapshot (term: 3, index: 10) to WAL and disk channel=testchannel node=3  e  OrdererOrg.orderer3  2021-02-12 09:32:53.935 EST 005d INFO  orderer.consensus.etcdraft  apply -> Accumulated 25479 bytes since last snapshot, exceeding size limit (1024 bytes), taking snapshot at block  5  (index: 10), last snapshotted block number is 4, current nodes:  1 2 3  channel=testchannel node=3  e  OrdererOrg.orderer3  2021-02-12 09:32:53.935 EST 005f INFO  orderer.consensus.etcdraft  run -> Config block or ConfChange in flight, pause accepting transaction channel=testchannel node=3 {code}  but the call to {{halt}} to transition the node to {{config-tracker}} never happens.  In the successful case, orderer-3 is a leader and we can see the config transaction is received, processed, and applied: {code}  e  OrdererOrg.orderer3  2021-02-12 15:19:30.999 EST 005a INFO  orderer.consensus.etcdraft  propose -> Created block  5 , there are 0 blocks in flight channel=testchannel node=3  e  OrdererOrg.orderer3  2021-02-12 15:19:30.999 EST 005b INFO  orderer.consensus.etcdraft  run -> Received config transaction, pause accepting transaction till it is committed channel=testchannel node=3  e  OrdererOrg.orderer2  2021-02-12 15:19:30.999 EST 0076 INFO  comm.grpc.server  1 -> streaming call completed grpc.service=orderer.AtomicBroadcast grpc.method=Broadcast grpc.peer_address=127.0.0.1:57260 error="rpc error: code = Canceled desc = context canceled" grpc.code=Canceled grpc.call_duration=8.515057ms ...  e  OrdererOrg.orderer3  2021-02-12 15:19:31.127 EST 005c INFO  orderer.consensus.etcdraft  writeBlock -> Writing block  5  (Raft index: 10) to ledger channel=testchannel node=3 ...  e  OrdererOrg.orderer3  2021-02-12 15:19:31.131 EST 005d INFO  orderer.consensus.etcdraft  writeConfigBlock -> Config block just committed removes node 3, pause accepting transactions till config change is applied channel=testchannel node=3  e  OrdererOrg.orderer3  2021-02-12 15:19:31.131 EST 005e INFO  orderer.consensus.etcdraft  apply -> Accumulated 25487 bytes since last snapshot, exceeding size limit (1024 bytes), taking snapshot at block  5  (index: 10), last snapshotted block number is 4, current nodes:  1 2 3  channel=testchannel node=3  e  OrdererOrg.orderer3  2021-02-12 15:19:31.131 EST 005f INFO  orderer.consensus.etcdraft  run -> Config block or ConfChange in flight, pause accepting transaction channel=testchannel node=3  e  OrdererOrg.orderer3  2021-02-12 15:19:31.131 EST 0060 INFO  orderer.consensus.etcdraft  saveSnap -> Persisting snapshot (term: 3, index: 10) to WAL and disk channel=testchannel node=3  e  OrdererOrg.orderer2  2021-02-12 15:19:31.158 EST 007f WARN  orderer.consensus.etcdraft  TakeSnapshot -> Raft entries prior to 6 are already purged channel=testchannel node=2  e  OrdererOrg.orderer2  2021-02-12 15:19:31.158 EST 0080 INFO  orderer.consensus.etcdraft  TakeSnapshot -> Snapshot is taken at index 10 channel=testchannel node=2  e  OrdererOrg.orderer3  2021-02-12 15:19:31.181 EST 0061 INFO  orderer.consensus.etcdraft  apply -> Applied config change to remove node 3, current nodes in channel:  1 2  channel=testchannel node=3  e  OrdererOrg.orderer3  2021-02-12 15:19:31.181 EST 0062 INFO  orderer.consensus.etcdraft  func1 -> Current leader is being removed from channel, attempt leadership transfer channel=testchannel node=3  e  OrdererOrg.orderer3  2021-02-12 15:19:31.181 EST 0063 INFO  orderer.consensus.etcdraft  abdicateLeader -> Transferring leadership to 1 channel=testchannel node=3  e  OrdererOrg.orderer3  2021-02-12 15:19:31.181 EST 0064 INFO  orderer.consensus.etcdraft  stepLeader -> 3  term 3  starts to transfer leadership to 1 channel=testchannel node=3 {code}  Based on this discussion, this appears to be a subtle production code bug and not just a test flake.   ^success.log    ^failing.log    ></body> </Action>
<Action id="71696" issue="46387" author="denyeart" type="comment" created="2021-04-18 16:01:13.0" updateauthor="denyeart" updated="2021-04-18 16:01:56.0"> <body><! CDATA Still happening:   https://dev.azure.com/Hyperledger/Fabric/_build/results?buildId=33331&view=logs&j=f2000854-c7fb-5d20-d92e-ea22102e0eb5&t=8c0b343e-a113-5c44-d189-698811f88d80     • Failure  77.605 seconds     ChannelParticipation three node etcdraft network with a system channel  It  joins channels using the legacy channel creation mechanism and then removes the system channel to transition to the channel participation API     /home/vsts/work/1/fabric/integration/raft/channel_participation_test.go:1060        Timed out after 60.775s.    Expected    <channelparticipation.ChannelInfo>: {    Name: "testchannel",    URL: "/participation/v1/channels/testchannel",    Status: "active",    ConsensusRelation: "consenter",    Height: 6,    }    to equal    <channelparticipation.ChannelInfo>: {    Name: "testchannel",    URL: "/participation/v1/channels/testchannel",    Status: "inactive",    ConsensusRelation: "config-tracker",    Height: 6,    }        /home/vsts/work/1/fabric/integration/raft/channel_participation_test.go:1133  ></body> </Action>
<Action id="71711" issue="46387" author="denyeart" type="comment" body="And again - https://dev.azure.com/Hyperledger/Fabric/_build/results?buildId=33597&amp;view=logs&amp;jobId=f2000854-c7fb-5d20-d92e-ea22102e0eb5&amp;j=f2000854-c7fb-5d20-d92e-ea22102e0eb5&amp;t=8c0b343e-a113-5c44-d189-698811f88d80" created="2021-04-23 16:38:02.0" updateauthor="denyeart" updated="2021-04-23 16:38:02.0"/>
<Action id="72001" issue="46387" author="JIRAUSER19830" type="comment" created="2021-07-26 12:08:55.0" updateauthor="JIRAUSER19830" updated="2021-07-26 12:08:55.0"> <body><! CDATA Failure observed whenever the OSN being removed has committed the config change but failed to receive apply_config msg to halt the chain. This state is defined to be handled as part of the eviction suspicion logic. But it failed when evictionsuspector failed to check from lastconfig block if chain is up-to-date.   https://github.com/hyperledger/fabric/pull/2780   ></body> </Action>
