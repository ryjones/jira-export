<Issue id="47107" key="FAB-18531" number="18531" project="10002" reporter="JIRAUSER22106" assignee="JIRAUSER22106" creator="JIRAUSER22106" type="10001" summary="Extend function to query the details of the all approved chaincode definition" priority="3" status="10100" created="2021-07-29 12:22:51.0" updated="2023-12-06 03:09:34.0" votes="0" watches="1" workflowId="61007" archived="N"> <description><! CDATA Currently, Fabric peer CLI 'queryapproved' could query the details of an approved chaincode definitions, and this CLI requires a mandatory chaincode name parameter to query a specific chaincode definitions; however in some cases we expect to query out all approved chainocode definitions.  So, here we propose to extend the 'queryapproved' function for querying the details of all the approved chaincode definition to Fabric peer CLI.  The following shows a basic design of this extension. * There is no new command is involved. * Command 'queryapproved' will be extended to support this function: ** make parameter (-n|--name <chaincode>) optional ** if parameter (-n|--name <chaincode>) is provided, keep current command behavior ** if parameter (-n|--name <chaincode>) is not provided, query the details of all approved chaincode, plus additional chaincode name in details output.     *The example of query all approved chaincodes with JSON output format:*  {code:java} $ peer lifecycle chaincode queryapproved --channelID <channelname> -o orderer.example.com:7050 --peerAddresses peer0.org1.example.com:7051 --output json { 	"chaincode_definitions":   		{ 			"name": "<ccname1>", 			"sequence": 1, 			"version": "1.0", 			"endorsement_plugin": "escc", 			"validation_plugin": "vscc", 			"validation_parameter": "EiAvQ2hhbm5lbC9BcHBsaWNhdGlvbi9FbmRvcnNlbWVudA==", 			"collections": {}, 			"init_required": true, 			"source": { 				"Type": { 					"LocalPackage": { 						"package_id": "<ccname1>-1.0:e60b4fc692998844183e70ca6ae15bcd4632ef1b0e93193567a6669fb945d86d" 					} 				} 			} 		}, 		{ 			"name": "<ccname2>", 			"sequence": 1, 			"version": "1.0", 			"endorsement_plugin": "escc", 			"validation_plugin": "vscc", 			"validation_parameter": "EiAvQ2hhbm5lbC9BcHBsaWNhdGlvbi9FbmRvcnNlbWVudA==", 			"collections": {}, 			"init_required": true, 			"source": { 				"Type": { 					"LocalPackage": { 						"package_id": "<ccname2>-1.0:23d718fa220eb599a412dfea13c18958b58fd0ffe4a42e2335b17c2c5fa102e9" 					} 				} 			} 		}, 		{ 			"name": "<ccname2>", 			"sequence": 2, 			"version": "2.0", 			"endorsement_plugin": "escc", 			"validation_plugin": "vscc", 			"validation_parameter": "EiAvQ2hhbm5lbC9BcHBsaWNhdGlvbi9FbmRvcnNlbWVudA==", 			"collections": {}, 			"init_required": true, 			"source": { 				"Type": { 					"LocalPackage": { 						"package_id": "<ccname2>-2.0:23d718fa220eb599a412dfea13c18958b58fd0ffe4a42e2335b17c2c5fa102e9" 					} 				} 			} 		} 	  } {code}  ></description> </Issue>
