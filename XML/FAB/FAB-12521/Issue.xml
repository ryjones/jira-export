<Issue id="34764" key="FAB-12521" number="12521" project="10002" reporter="guoger" creator="guoger" type="10004" summary="Async `BlockWriter.commitBlock` may cause system channel NOT to reflect correct state of channel creation in a corner case." priority="4" resolution="10001" status="6" created="2018-10-18 02:50:12.0" updated="2020-01-22 22:34:11.0" resolutiondate="2020-01-22 22:34:11.0" votes="0" watches="2" workflowId="46174"> <description><! CDATA As the code currently stands,  commitBlock|https://github.com/hyperledger/fabric/blob/release-1.3/orderer/common/multichannel/blockwriter.go#L155  is async after  writing a config block|https://github.com/hyperledger/fabric/blob/release-1.3/orderer/common/multichannel/blockwriter.go#L92 . It may cause problem in following case: - about to {{WriteConfigBlock}} to create a new chain {{foo}} - {{newChain}} is invoked in {{WriteConfigBlock}} *before* {{commitBlock}}. - local directory is created as part of chain resources, *but* config block is *not* yet appended to ledger - orderer crash - upon reboot, it finds chain {{foo}} because it exists on disk, however the config block does *not* exist on system chain.  Per  ~jyellick 's  comment in Rocket chat|https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=ixs5AsLAxSAd9PaST : {quote}There probably should be a comment in the code to that affect. At the time it seemed like a rather unlikely corner case (and recovery in the Kafka case is as simple as deleting the ledger and rebootstrapping). At the very least, we should probably put a check during chain creation time that the chain is already of length zero. {quote}  ></description> </Issue>
