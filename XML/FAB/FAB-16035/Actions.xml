<Action id="61965" issue="41318" author="manish-sethi" type="comment" body="Makes sense to me and in fact, this should be far more simpler than reset/rollback." created="2019-07-18 22:43:59.0" updateauthor="manish-sethi" updated="2019-07-18 22:43:59.0"/>
<Action id="63226" issue="41318" author="manish-sethi" type="comment" created="2019-08-23 14:29:40.0" updateauthor="manish-sethi" updated="2019-08-23 14:29:40.0"> <body><! CDATA Deleting the blockfiles but not deleting the other data does not sound good to me.   For deleting the data, we can either drop the dbs and they will get rebuilt for other channels or delete the range of the keys explicitly for the channel. For private data store, we would anyways have to adopt the latter approach. Most of the KV stores expose a delete-range operation but unfortunately I don't think leveldb offers this so, it would be explicitly reading the range and deleting it. (Which scheme should be resort to would ideally be weighed based on some estimated relative cost)  I think that the choice we should make is whether to delete the entire data for the channel or not. In other words, whether the user wants to `pause` the channel or `unjoin` the channel.   From implementation point of view, we can implement the data delete for a channel as an independent function that can be invoked in the case of `unjoin` but not in the case of `pause`. For the first cut, we may choose not to expose `pause` operation but we can design such that if someone needs in the future, it would be easy to do so.  ></body> </Action>
<Action id="63228" issue="41318" author="senthil1" type="comment" created="2019-08-23 14:45:06.0" updateauthor="senthil1" updated="2019-08-23 14:45:06.0"> <body><! CDATA I think that it may not be good to link data delete and channel unjoin. When a peer decides to unjoin a channel, doesn't it mean that the peer is no longer interested in performing transactions & commit blocks in this channel but still want to retain the blockchain (which is a source of truth for all transactions it did so far)?   If the organization wants to take a backup of the blockchain, it can do so and call _peer channel delete_ later when it no longer needs the data to be resided on the peer.   We need to be more clear and explicit with the deletion of data. If _peer channel unjoin_ also deletes the data, it might create more confusion IMO.  ></body> </Action>
<Action id="63229" issue="41318" author="denyeart" type="comment" created="2019-08-23 14:53:21.0" updateauthor="denyeart" updated="2019-08-23 14:53:21.0"> <body><! CDATA  ~manish-sethi  I agree in an ideal world we would not delete blockfiles without deleting the data from the other cross-channel data stores. We definitely don't want to force a rebuild of all channels upon unjoin of a single channel. I was hesitant to invest in code that deletes from each of the cross-channel data stores, when we expect an upcoming release will support separate databases per channel, thereby making the delete from most of the data stores trivial. This would therefore be short-lived code that we don't want to invest a lot of time in getting it right.  I'm remembering the rollback discussion where we thought it would be trivial to implement but ended up taking much longer than expected to get it completely right. I therefore preferred to keep it as simple as possible in the short term, so that we could get to the ultimate goal of per-channel databases sooner than later.  ></body> </Action>
<Action id="63230" issue="41318" author="denyeart" type="comment" created="2019-08-23 15:03:17.0" updateauthor="denyeart" updated="2019-08-23 15:03:17.0"> <body><! CDATA Considering Senthil's post, I would agree that unjoin could be done simply without deleting the blockstore data.  This would also allow for a simple rejoin. We could then defer further discussion of delete until after Fabric has per-channel data stores. In the interim, users that know they will never rejoin could delete the chain data themselves. And if they want to clear the data from the other cross-channel data stores, they could do the reset. I am most keen to avoid implementing the short-lived code that deletes piecemeal from the cross-channel data stores.  ></body> </Action>
<Action id="63231" issue="41318" author="manish-sethi" type="comment" created="2019-08-23 15:09:42.0" updateauthor="manish-sethi" updated="2019-08-23 15:09:42.0"> <body><! CDATA Yes, this matches with what I mentioned as `pause` channel. We can certainly have a single operation with this behaviour and call this `unjoin`.   ></body> </Action>
<Action id="63232" issue="41318" author="senthil1" type="comment" body="+1" created="2019-08-23 15:11:43.0" updateauthor="senthil1" updated="2019-08-23 15:11:43.0"/>
<Action id="63233" issue="41318" author="wenjian" type="comment" body="If unjoin is treated as &quot;pause&quot; channel, we may have to rollback the &quot;paused&quot; channel. Otherwise, there may be a risk of fork when the peer is rejoined. For example, consider a peer was unjoined when the block height was 10. Then the channel ledger was rolled back to block 5. If the peer is rejoined to the channel later, will there be a fork if rollback didn&apos;t rollback the &quot;paused&quot; channel?" created="2019-08-23 15:40:05.0" updateauthor="wenjian" updated="2019-08-23 15:40:05.0"/>
<Action id="63328" issue="41318" author="jyellick" type="comment" created="2019-08-27 15:09:57.0" updateauthor="jyellick" updated="2019-08-27 15:09:57.0"> <body><! CDATA I'm not strictly opposed to a pause operation, but semantically, it's a bit confusing to me if we claim "pause + reset == delete".  There's also some additional complexity as Wenjian points out, around what operations like rollback mean in the context of a paused channel.  I'd also like to point out that the user requests have been consistently to unjoin/delete, I've not run across anyone asking to pause, or to retain the data.  It's a fairly trivial thing for a user to backup the ledger before 'unjoin', if they're concerned about data loss.  My concern is that we're actually addressing the requirement here.  ></body> </Action>
<Action id="63340" issue="41318" author="manish-sethi" type="comment" created="2019-08-27 17:55:04.0" updateauthor="manish-sethi" updated="2019-08-27 17:59:35.0"> <body><! CDATA There is no such claim that "pause + reset == delete". (pause + reset) still leave the channel in the paused state at genesis block height. Also, I don't see any additional complexity around operations like reset/rollback. They should work irrespective of the state of the channel.  As I mentioned before that in the case of unjoin/delete (instead of pause) better to delete entire data explicitly. From implementation point of view, pause is much simpler and unjoin needs additional code for cleaning up data.  However, the semantics are clear for both pause and unjoin. For instance, for a 'paused' channel, one would simply 'resume'  and for 'unjoin' I would join again with the genesis block as input. We need to make a call to pick one operation to start with balancing the implementation simplicity vs user requests. I am fine with the latter, if there is enough voices/weight in the user requests.  ></body> </Action>
<Action id="63342" issue="41318" author="denyeart" type="comment" created="2019-08-27 19:09:09.0" updateauthor="denyeart" updated="2019-08-27 19:21:07.0"> <body><! CDATA  ~jyellick  Due to memory management in leveldb, it was not possible to have a database per channel. It had to be implemented as a peer-level database with channel-based keys to segregate channel namespaces. And actually there is not one leveldb database, but 6 (chain indexes, state, history, config, pvtdata, bookkeeper). Therefore full delete of thousands of channel blocks across 6 data stores while not impacting other channels becomes a major development work item. Combine this with the fact that per-channel databases (with trivial per-channel drop) will be investigated as part of checkpoint for the next ledger architecture, it becomes difficult to justify a large investment in delete at current time.  I see three options: 1) Do nothing 2) Support pause/resume (resolves the opening concern mentioned in this jira - "peer will spend resources and spam log messages attempting to pull blocks from that channel forever") 3) Support unjoin with full delete (resolves the above concern plus delete).  1) is no investment and no benefit. 2) is low investment while resolving the opening concern, where the delete could be layered on top later (hopefully much more simply). Additionally, temporarily pausing a peer's channel has some merit on its own as a feature (e.g. support channel maintenance windows) 3) is high investment (further delaying the ultimate checkpoint priority) with full benefit, and may need to be re-implemented after checkpoint.  The current proposal is #2.  If you want to argue for the more time-consuming #3 we can have that debate, but be aware of the impacts.  I wouldn't get too caught up in the comments about reset or manually deleting block files. Those were mentioned as short term user workarounds only, until the ultimate delete solution is implemented.  ></body> </Action>
<Action id="63344" issue="41318" author="jyellick" type="comment" created="2019-08-27 19:57:05.0" updateauthor="jyellick" updated="2019-08-27 19:59:05.0"> <body><! CDATA I'm a bit confused why (3) is so much additional work.  To implement efficiently, perhaps, but otherwise, it's a simple matter of... delete ledger provider info, delete blockstore, drop indexes, drop state, drop history (and for all channels but the deleted one, we re-pull and re-process blocks).  The only tricky one would seem to be private data, though presumably, this is already handled in some capacity via reset.  This is where I got my "pause + reset == delete" statement, because it feels like, if we simply said "and on reset, we delete any paused channels in the ledgerprovider", then we've basically got delete semantics.  That all said, if we can pause, reset, and paused channels simply stay paused, I think it gets us 90% of the way there.  It still strikes me as odd that when a user says "I want to delete a channel on my peer", we say "You can't, but, you can pause it, and reset its state back to genesis so that it doesn't consume resources".  But, if that is the technical limitation, so be it.  ></body> </Action>
<Action id="63345" issue="41318" author="denyeart" type="comment" created="2019-08-27 22:25:31.0" updateauthor="denyeart" updated="2019-08-27 22:28:45.0"> <body><! CDATA Peer reset/rollback/rebuild should not be taken lightly... they impact all channels, require significant maintenance windows, and are intended to be used as a last resort when peer data integrity is in doubt.  Adding new variations to support single channel unjoin would further complicate things...system test alone has proven to be quite expensive when you consider the various data stores, large volumes of data, and all the things that could go wrong during the data store manipulations.  The piecemeal partial delete within the cross-channel data stores brings similar complications.  I agree channel delete is important, I'm only suggesting that it be designed in combination with the future per-channel data store thoughts, with an eye towards simplification, rather than designed/implemented/tested twice.  In the interim, the channel pause/resume function is a simple addition, useful in its own right, and resolves the opening concern mentioned in this jira.  ></body> </Action>
<Action id="63348" issue="41318" author="jyellick" type="comment" created="2019-08-28 02:59:44.0" updateauthor="jyellick" updated="2019-08-28 02:59:44.0"> <body><! CDATA I'm fine with the pause solution proposed above if the ledger team feels it's the best solution technically.  I do want to ensure my understanding is correct though: # We will add the ability to pause/unpause channels. When a channel is paused, we will not start the resources necessary to process new blocks for that channel or process requests for that channel. # We will support performing a 'peer node reset' while some channels are paused. In this case, they will be regressed to the genesis block, with no additional block data, no state data, no history data, etc.  If someone absolutely insisted "I want to free up the space consumed by a particular channel, and I am fine taking a maintenance window to do so", then we could tell them that they may pause the channel, and perform a reset. This will remove all data except for genesis block.  ></body> </Action>
<Action id="63355" issue="41318" author="denyeart" type="comment" created="2019-08-28 08:42:47.0" updateauthor="denyeart" updated="2019-08-28 16:45:19.0"> <body><! CDATA  ~jyellick  Correct, that's the current proposal.  I'll also note that wherever we say 'reset' above, 'rollback' can also be done. So you could pause then rollback a channel to genesis block. Or rollback a channel to genesis block and pause before restarting the peer. This would limit the negative impact to other channels to rebuilding databases only (rather than re-pulling and re-processing blocks). Again, this is intended to be an interim position until such time that the databases are well structured to support a true 'unjoin/delete' channel without side effects.   ></body> </Action>
<Action id="63366" issue="41318" author="denyeart" type="comment" body="This work item will initially target master branch. If the code turns out to be fairly minimal, we can then discuss whether it makes sense to backport to release-1.4." created="2019-08-28 16:44:31.0" updateauthor="denyeart" updated="2019-08-28 16:44:31.0"/>
<Action id="63452" issue="41318" author="wenjian" type="comment" created="2019-08-30 18:05:37.0" updateauthor="wenjian" updated="2019-08-30 20:04:16.0"> <body><! CDATA CR 1 (upgrade format):  https://gerrit.hyperledger.org/r/#/c/fabric/+/33300/   CR 2 (pause/resume):  https://gerrit.hyperledger.org/r/#/c/fabric/+/33270/   CR 2 (skip preResetHeight):  https://gerrit.hyperledger.org/r/#/c/fabric/+/33296/    ></body> </Action>
<Action id="63979" issue="41318" author="baohua" type="comment" created="2019-09-23 18:46:01.0" updateauthor="baohua" updated="2019-09-23 18:46:01.0"> <body><! CDATA  ~jyellick ,  ~wenjian , this is a good work.  besides, would the "peer channel leave" sound better than "peer channel unjoin"?  Thanks!  ></body> </Action>
<Action id="64295" issue="41318" author="wenjian" type="comment" created="2019-10-03 20:10:30.0" updateauthor="wenjian" updated="2019-10-03 20:10:56.0"> <body><! CDATA  ~baohua    The actual commands are "peer node pause" and "peer node resume". * When a channel is paused on a peer, the peer will not start the resources necessary to process new blocks for the channel and will not receive any new block for the channel * When a channel is resumed on a peer, the peer will start the resources necessary to process new blocks for the channel and receive all the missing blocks * To free up ledger space from a paused channel, a user can rollback the channel to genesis block.  You can see previous comments for details.     ></body> </Action>
<Action id="64297" issue="41318" author="baohua" type="comment" created="2019-10-03 22:21:18.0" updateauthor="baohua" updated="2019-10-03 22:21:18.0"> <body><! CDATA  ~wenjian   Seems they are for different purposes.  "pause/resume" is for a peer within a channel to control its own behavior, while a "leave" means that the peer will not participant the channel's activity any more.  ></body> </Action>
<Action id="70765" issue="41318" author="denyeart" type="comment" created="2020-11-19 23:50:31.0" updateauthor="denyeart" updated="2020-11-19 23:50:31.0"> <body><! CDATA This story implemented pause/resume behavior. A future story for full unjoin is planned in FAB-17801.  ></body> </Action>
