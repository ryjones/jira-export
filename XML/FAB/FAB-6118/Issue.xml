<Issue id="20755" key="FAB-6118" number="6118" project="10002" reporter="nishi" assignee="nishi" creator="nishi" type="10002" summary="When a peer is restarted or when an orderer is taken down, ensure orgLeader peer reconnects to random orderer" priority="3" resolution="10001" status="6" created="2017-09-11 20:22:00.0" updated="2019-07-30 01:18:51.0" resolutiondate="2019-07-30 01:18:51.0" votes="0" watches="2" workflowId="35324"> <description><! CDATA Scenario 1: {code:java} In here in docker-compose-kafka.yml - CORE_PEER_GOSSIP_ORGLEADER=true && CORE_PEER_GOSSIP_USELEADERELECTION=false on each peer.{code} {code:java} 1. Bring up a kafka network using behave(102-bringdown-non-leader-peer.feature ). Restart all peers. Make sure every peer is connected to an orderer after restart.{code}     Scenario 2: {code:java} To ensure peers are connected to orderer when CORE_PEER_GOSSIP_ORGLEADER=false && CORE_PEER_GOSSIP_USELEADERELECTION=true.  {code} {code:java} 2 A)  * Bring up a kafka network using behave(103-bringdown-leader-peer.feature).  * Bring down a leader peer from say org1.  * Make sure other peer from org1 is elected as leader and now connected to an orderer.  * After the network is up and join-channel happened, run "docker exec -it  <orderer> bash" on each of the orderer containers. * Then from inside orderer container "apt-get update && apt-get install -y net-tools" * Inside container run "netstat -ntp" to determine which peers are connected to which orderer. * Once the leader peers is restarted then run "netstat -ntp" on each orderer and verify leader peer is contained to another orderer, from inside orderer container using "netstat -ntp".{code} {code:java} 2 B)   * Bring up a kafka network using behave( 104-bringdown-orderer.feature ).  * Bring down an orderer that is connected to a leader peer.  * Make sure now leader peer is now connected to other orderer.  * After the network is up and join-channel happened, run "docker exec -it  <orderer> bash" on each of the orderer containers. * Then from inside orderer container "apt-get update && apt-get install -y net-tools" * Inside container run "netstat -ntp" to determine which peers are connected to which orderer. * Once the orderer is brought down (that is connected to a leader peer), verify that leader peer is now connected to another   orderer, from inside orderer container using "netstat -ntp"{code}    ></description> </Issue>
