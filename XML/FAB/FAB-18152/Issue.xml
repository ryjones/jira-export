<Issue id="45808" key="FAB-18152" number="18152" project="10002" reporter="wlahti" creator="wlahti" type="10002" summary="Refactor start/halt flow between registrar and consenter" priority="4" status="10000" created="2020-08-12 16:43:37.0" updated="2021-04-16 19:08:43.0" votes="0" watches="3" workflowId="59746" archived="N"> <description><! CDATA From a  review|https://github.com/hyperledger/fabric/pull/1628  by  ~jyellick  :  "I'd like to note for the record, that this control flow still seems very awkward to me. The registrar is calling into the consenter, which as it halts is calling back into the registrar. Any time we have bidirectional binding like this is a red flag in my opinion.  I'd much rather see this implemented in one of two ways: 1. Leave the internal run state management to the consenter plugins as is done today, and expose a channel or similar mechanism to allow the the registrar to detect when the consenter has exited. 2. Remove the 'start' / 'halt' bits of the consenter API, and instead require that the caller inject a go routine, and simply have control flow return once the consenter exits, indicating that a shutdown occurred.  I think (2) is probably easier to read and more natural, while (1) is less of an API change and less code. In either case, I think both are better options than an opaque "I'm stopping" callback."  ></description> </Issue>
