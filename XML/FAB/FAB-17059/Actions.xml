<Action id="65502" issue="43296" author="denyeart" type="comment" body=" ~silveraid  Does your network B peer come from an org with a new MSPID? Have you added the new MSPID to the collection configuration?" created="2019-11-12 19:45:54.0" updateauthor="denyeart" updated="2019-11-12 19:45:54.0"/>
<Action id="65503" issue="43296" author="silveraid" type="comment" body="Hi  ~denyeart , the MSPID stays the same, just adding additional root and intermediate CA certificates into the respective arrays under the same MSPID. The configuration of the collection have not been touched." created="2019-11-12 20:04:07.0" updateauthor="silveraid" updated="2019-11-12 20:04:24.0"/>
<Action id="65513" issue="43296" author="yacovm" type="comment" created="2019-11-13 14:51:14.0" updateauthor="yacovm" updated="2019-11-13 14:56:11.0"> <body><! CDATA {quote}2019-11-12 15:40:14.234 UTC  cauthdsl  deduplicate -> ERRO 3bd8 Principal deserialization failure (the supplied identity is not valid: x509: certificate signed by unknown authority) for identity 0{quote}  Sounds like you didn't properly add the root CAs to the MSP config... can you upload your MSP config of the old config block and the latest config block?  Just upload the last config block and the one before the merge  ></body> </Action>
<Action id="65528" issue="43296" author="silveraid" type="comment" body="Hi  ~yacovm , I am looking at this, but did not find anything, attached the before and current configuration of the system and channel. Collecting some debug output of cauthdsl or please let me know what should I turn into debug to collect further logs if needed." created="2019-11-13 19:56:40.0" updateauthor="silveraid" updated="2019-11-13 19:56:40.0"/>
<Action id="65529" issue="43296" author="yacovm" type="comment" body="Is this happening in channel dblp ? And I don&apos;t understand why all the intermediate CAs have an OU of client ?" created="2019-11-13 20:41:16.0" updateauthor="yacovm" updated="2019-11-13 20:41:16.0"/>
<Action id="65536" issue="43296" author="silveraid" type="comment" body="Hi, yes the channel what I use is called &apos;dlbp-org2&apos;, the OU is &apos;client&apos; because I set the type to client in the fabric CA config, I can fix that and redo the test." created="2019-11-13 21:35:35.0" updateauthor="silveraid" updated="2019-11-13 21:35:35.0"/>
<Action id="65538" issue="43296" author="yacovm" type="comment" created="2019-11-13 21:43:07.0" updateauthor="yacovm" updated="2019-11-13 21:43:07.0"> <body><! CDATA That won't solve the problem though... I was just curious.   Can you perhaps locate the transaction of block 67 and put it here? If the data is private / confidential then you can send me via email (my username with suffix il dot ibm dot com)  ></body> </Action>
<Action id="65543" issue="43296" author="silveraid" type="comment" created="2019-11-14 13:18:23.0" updateauthor="silveraid" updated="2019-11-14 13:18:23.0"> <body><! CDATA I have wiped the original networks a dozen time already, and also changed the OU to 'ca', which did not make a difference as we expected. One thing what I have noticed just now that the first peer which joins to the network does not have the privdata log messages, even though it is also missing the private data.  So on the new peer1 I have the following message for block 10: {code:java} ESC 34m2019-11-14 01:41:59.400 UTC  committer.txvalidator  Validate -> INFO 081ESC 0m  dlbp-org2  Validated block  10  in 1ms ESC 31m2019-11-14 01:41:59.400 UTC  cauthdsl  deduplicate -> ERRO 082ESC 0m Principal deserialization failure (the supplied identity is not valid: x509: certificate signed by unknown authority) for identity 0 ESC 31m2019-11-14 01:41:59.400 UTC  cauthdsl  deduplicate -> ERRO 083ESC 0m Principal deserialization failure (the supplied identity is not valid: x509: certificate signed by unknown authority) for identity 0 ESC 34m2019-11-14 01:41:59.417 UTC  kvledger  CommitWithPvtData -> INFO 084ESC 0m  dlbp-org2  Committed block  10  with 1 transaction(s) in 16ms (state_validation=3ms block_and_pvtdata_commit=0ms state_commit=11ms) commitHash= 29dfa28ed6ec4765f60f19ef488e67b7e4b039ffd002b4b0c134b79ea337f472  {code} ... whereas on peer2 I have the following for the same block: {code:java} ESC 34m2019-11-14 12:59:11.227 UTC  committer.txvalidator  Validate -> INFO 73131ESC 0m  dlbp-org2  Validated block  10  in 1ms ESC 31m2019-11-14 12:59:11.227 UTC  cauthdsl  deduplicate -> ERRO 73132ESC 0m Principal deserialization failure (the supplied identity is not valid: x509: certificate signed by unknown authority) for identity 0 ESC 31m2019-11-14 12:59:11.227 UTC  cauthdsl  deduplicate -> ERRO 73133ESC 0m Principal deserialization failure (the supplied identity is not valid: x509: certificate signed by unknown authority) for identity 0 ESC 33m2019-11-14 12:59:11.227 UTC  gossip.privdata  listMissingPrivateData -> WARN 73134ESC 0m Removed custodiancc custodian_permanent hash 0baa7b83873cccfb3cd1b98b816511576639e74f8e574f092a00941c7cc9d7b7 from the data passed to the ledger ESC 33m2019-11-14 12:59:11.227 UTC  gossip.privdata  listMissingPrivateData -> WARN 73135ESC 0m Removed dlbpcc dlbp_permanent hash 27ec951c1b1e025c1ce73f44e8ee0a80a7027782fe2f891ec7b6b3f8148f93db from the data passed to the ledger ESC 34m2019-11-14 12:59:11.247 UTC  kvledger  CommitWithPvtData -> INFO 73136ESC 0m  dlbp-org2  Committed block  10  with 1 transaction(s) in 19ms (state_validation=5ms block_and_pvtdata_commit=1ms state_commit=12ms) commitHash= 29dfa28ed6ec4765f60f19ef488e67b7e4b039ffd {code} Sending you block 10 in a bit.  ></body> </Action>
<Action id="65548" issue="43296" author="silveraid" type="comment" body="Compared two blocks, one of them is before the channel config update (so the private data does not sync over), and another one which is after (so the private data syncs) and I could not spot any obvious (at least to me) issue." created="2019-11-14 14:42:24.0" updateauthor="silveraid" updated="2019-11-14 14:42:24.0"/>
<Action id="65567" issue="43296" author="silveraid" type="comment" created="2019-11-15 13:30:22.0" updateauthor="silveraid" updated="2019-11-15 13:31:16.0"> <body><! CDATA I have also tried to increase the channel capabilities fromÂ V1_3 toÂ V1_4_3, and the orderer from V1_1 to V1_4_2, the application capabilities had to stay on 1_3 unfortunately for now, but I am not sure if it has anything to do with private data reconciliation. These changes does not seems to make any difference.  Â   Made another effort by adding CA certificates from network A to network B's peer msp folder, but this also did not make any difference.  ></body> </Action>
<Action id="65569" issue="43296" author="silveraid" type="comment" created="2019-11-15 15:13:42.0" updateauthor="silveraid" updated="2019-11-15 15:13:42.0"> <body><! CDATA I did a full debug on the peer and at this point I still think that this is an issue, here is the interesting part of the log: {code:java}  36m2019-11-15 13:57:19.815 UTC  msp  GetManagerForChain -> DEBU e0c 0m Returning existing manager for channel 'dlbp-org2'  36m2019-11-15 13:57:19.815 UTC  msp  DeserializeIdentity -> DEBU e0d 0m Obtaining identity  36m2019-11-15 13:57:19.815 UTC  msp.identity  newIdentity -> DEBU e0e 0m Creating identity instance for cert -----BEGIN CERTIFICATE----- MIICOjCCAeGgAwIBAgIUUQSzuweLvgbYkyP4aIoVWdAqfCcwCgYIKoZIzj0EAwIw WzEQMA4GA1UEBxMHZnJhbmstYjEkMCIGA1UEChMbU2VjdXJlS2V5IFRlY2hub2xv Z2llcyBJbmMuMQswCQYDVQQLEwJjYTEUMBIGA1UEAxMLUGVlck9yZzJDQTEwHhcN MTkxMTE1MTM0MzAwWhcNMjQxMTEzMTM0NzAwWjBcMQswCQYDVQQGEwJVUzEXMBUG A1UECBMOTm9ydGggQ2Fyb2xpbmExFDASBgNVBAoTC0h5cGVybGVkZ2VyMQ0wCwYD VQQLEwRwZWVyMQ8wDQYDVQQDDAZwZWVyX2EwWTATBgcqhkjOPQIBBggqhkjOPQMB BwNCAATjYX7APLxac6NaYk2mJenxn+5Fx3cGda0kLfOlYPwS211VTrbE82gMxP5M 0jepWtmSf4RBkzl0LDxq1xfTaln9o4GBMH8wDgYDVR0PAQH/BAQDAgeAMAwGA1Ud EwEB/wQCMAAwHQYDVR0OBBYEFHN3TJk5DyNvM5+RXGAaO2+HqT9GMB8GA1UdIwQY MBaAFAIAE5QVIw7cYH+c6HglZcktLOLDMB8GA1UdEQQYMBaCFHBlZXItcGVlcm9y ZzItMjAwMTNhMAoGCCqGSM49BAMCA0cAMEQCIB+NyoQ389xtOBPjBDN5VFqnJrir gLxWpT8yHdd346OgAiBiQI2hX/qtyZ2/IAFadYpAmYTLtXsCqA/VzpQ3BVxsPQ== -----END CERTIFICATE-----  31m2019-11-15 13:57:19.815 UTC  cauthdsl  deduplicate -> ERRO e0f 0m Principal deserialization failure (the supplied identity is not valid: x509: certificate signed by unknown authority) for identity 0  36m2019-11-15 13:57:19.815 UTC  cauthdsl  func1 -> DEBU e10 0m 0xc000287020 gate 1573826239815882442 evaluation starts  36m2019-11-15 13:57:19.815 UTC  cauthdsl  func2 -> DEBU e11 0m 0xc000287020 signed by 0 principal evaluation starts (used  false )  36m2019-11-15 13:57:19.815 UTC  cauthdsl  func2 -> DEBU e12 0m 0xc000287020 principal evaluation fails  36m2019-11-15 13:57:19.815 UTC  cauthdsl  func1 -> DEBU e13 0m 0xc000287020 gate 1573826239815882442 evaluation fails  36m2019-11-15 13:57:19.815 UTC  gossip.privdata  isEligible -> DEBU e14 0m Skipping namespace custodiancc collection custodian_permanent because we're not eligible for the private data  36m2019-11-15 13:57:19.815 UTC  gossip.privdata  inspectTransaction -> DEBU e15 0m Peer is not eligible for collection, channel  dlbp-org2 , chaincode  custodiancc , collection name  custodian_permanent , txID  a1fa38977087749a2d74e702b0e1d58bab847a2bc23d30bfd89ca73d89f91e88  the policy is  &privdata.SimpleCollection{name:"custodian_permanent", accessPolicy:(*cauthdsl.policy)(0xc002ed2d80), memberOrgs:  string{"PeerOrg2"}, conf:common.StaticCollectionConfig{Name:"custodian_permanent", MemberOrgsPolicy:(*common.CollectionPolicyConfig)(0xc0031f6c30), RequiredPeerCount:0, MaximumPeerCount:1, BlockToLive:0x0, MemberOnlyRead:false, Type:0, TimeToLive:"", XXX_NoUnkeyedLiteral:struct {}{}, XXX_unrecognized:  uint8(nil), XXX_sizecache:0}} . Skipping.  {code} So it simply says that: we are not eligible for the private data.  My assumption is that my peer's certificate cannot be validated against the CAs which are currently in the channel configuration as the synchronization process have not progressed that far so the private data is just simply rejected.  ></body> </Action>
<Action id="65577" issue="43296" author="yacovm" type="comment" body="Yeah, this sounds about right. However, since we&apos;re the same organization, we should be eligible of the data during reconciliation regardless of the fact we rotated a CA certificate, simply because our organization has always been in that collection.  ~denyeart  am I wrong?" created="2019-11-15 19:48:22.0" updateauthor="yacovm" updated="2019-11-15 19:48:22.0"/>
<Action id="65578" issue="43296" author="yacovm" type="comment" body="This means,  ~silveraid  - that if you don&apos;t get this data eventually - it&apos;s a bug. Do you get the data after a while? like, after an hour or so? " created="2019-11-15 19:50:58.0" updateauthor="yacovm" updated="2019-11-15 19:50:58.0"/>
<Action id="65580" issue="43296" author="silveraid" type="comment" body="I have this peer joined to the network and it is up for 6 hours now and it still does not have the data. I thought that reconciliation is a much quicker process. Does it need anything to trigger this process?" created="2019-11-15 20:04:00.0" updateauthor="silveraid" updated="2019-11-15 20:04:00.0"/>
<Action id="65581" issue="43296" author="yacovm" type="comment" created="2019-11-15 20:08:10.0" updateauthor="yacovm" updated="2019-11-15 20:08:10.0"> <body><! CDATA It is a quicker process... I just said 1 hour as some upper bound.  Can you supply debug logs of the peer during a 1 hour time frame so we can try and see why it doesn't sync up ?  ></body> </Action>
<Action id="65585" issue="43296" author="silveraid" type="comment" body="Debug is on, will attach the logs in a bit." created="2019-11-15 22:00:45.0" updateauthor="silveraid" updated="2019-11-15 22:00:45.0"/>
<Action id="65586" issue="43296" author="silveraid" type="comment" created="2019-11-15 22:11:00.0" updateauthor="silveraid" updated="2019-11-15 22:11:00.0"> <body><! CDATA So while waiting for more logs I have picked up this, right after block 9 was committed. Block 9 in this test was the last block on the channel: {code:java} 2019-11-15 13:57:21.923 UTC  gossip.privdata  StoreBlock -> INFO 12d6  dlbp-org2  Fetched all missing collection private write sets from remote peers for block  9  (2007ms)  2019-11-15 13:57:21.923 UTC  gossip.privdata  StoreBlock -> DEBU 12d7  dlbp-org2  Added 2 namespace private write sets for block  9 , tran  0   2019-11-15 13:58:13.441 UTC  gossip.privdata  run -> DEBU 3851 Start reconcile missing private info  2019-11-15 13:58:13.441 UTC  gossip.privdata  reconcile -> DEBU 3853 Reconciliation cycle finished successfully. no items to reconcile {code} I see the same message repeating it over and over again in every 70 seconds approximately: {noformat} 2019-11-15 22:03:13.571 UTC  gossip.privdata  run -> DEBU 83baf Start reconcile missing private info  2019-11-15 22:03:13.571 UTC  gossip.privdata  reconcile -> DEBU 83bb1 Reconciliation cycle finished successfully. no items to reconcile {noformat}  ></body> </Action>
<Action id="65587" issue="43296" author="silveraid" type="comment" body="Logs have been attached, had to split them up due to the filesize limit is being set to 10MB. It is about 15 minutes but I think you will find what you are looking for." created="2019-11-15 22:22:24.0" updateauthor="silveraid" updated="2019-11-15 22:22:36.0"/>
<Action id="65589" issue="43296" author="yacovm" type="comment" created="2019-11-15 22:46:49.0" updateauthor="yacovm" updated="2019-11-15 22:46:49.0"> <body><! CDATA I'm sorry but I need more logs, especially from the moment the peer committed the private data transaction onwards.  Also, a sanity check question - it doesn't recognize PeerOrg1 and PeerOrg3  in channel dblp-org2 because I guess there is only org 2 in that channel ? is that it?   ></body> </Action>
<Action id="65591" issue="43296" author="yacovm" type="comment" created="2019-11-15 23:28:55.0" updateauthor="yacovm" updated="2019-11-15 23:28:55.0"> <body><! CDATA and I can't stand this ugly printing of identities....   {quote}2019-11-15 22:15:54.691 UTC  peer.gossip.sa  OrgByPeerIdentity -> DEBU f7704 Failed deserialization identity  0a 08 50 65 65 72 4f 72 67 33 12 c2 06 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0a 4d 49 49 43 4f 6a 43 43 41 65 47 67 41 77 49 42 41 67 49 55 42 5a 37 52 79 37 34 31 4a 56 34 51 67 6d 6a 49 6f 33 79 48 4b 51 63 4e 2f 74 49 77 43 67 59 49 4b 6f 5a 49 7a 6a 30 45 41 77 49 77 0a 57 7a 45 51 4d 41 34 47 41 31 55 45 42 78 4d 48 5a 6e 4a 68 62 6d 73 74 59 6a 45 6b 4d 43 49 47 41 31 55 45 43 68 4d 62 55 32 56 6a 64 58 4a 6c 53 32 56 35 49 46 52 6c 59 32 68 75 62 32 78 76 0a 5a 32 6c 6c 63 79 42 4a 62 6d 4d 75 4d 51 73 77 43 51 59 44 56 51 51 4c 45 77 4a 6a 59 54 45 55 4d 42 49 47 41 31 55 45 41 78 4d 4c 55 47 56 6c 63 6b 39 79 5a 7a 4e 44 51 54 45 77 48 68 63 4e 0a 4d 54 6b 78 4d 54 45 31 4d 54 4d 30 4d 7a 41 77 57 68 63 4e 4d 6a 51 78 4d 54 45 7a 4d 54 4d 30 4f 44 41 77 57 6a 42 63 4d 51 73 77 43 51 59 44 56 51 51 47 45 77 4a 56 55 7a 45 58 4d 42 55 47 0a 41 31 55 45 43 42 4d 4f 54 6d 39 79 64 47 67 67 51 32 46 79 62 32 78 70 62 6d 45 78 46 44 41 53 42 67 4e 56 42 41 6f 54 43 30 68 35 63 47 56 79 62 47 56 6b 5a 32 56 79 4d 51 30 77 43 77 59 44 0a 56 51 51 4c 45 77 52 77 5a 57 56 79 4d 51 38 77 44 51 59 44 56 51 51 44 44 41 5a 77 5a 57 56 79 58 32 4d 77 57 54 41 54 42 67 63 71 68 6b 6a 4f 50 51 49 42 42 67 67 71 68 6b 6a 4f 50 51 4d 42 0a 42 77 4e 43 41 41 54 4d 53 38 6e 4e 66 64 68 44 51 6b 33 57 46 43 7a 45 71 6e 30 50 72 7a 50 42 76 73 57 2b 52 6e 72 46 41 7a 67 34 36 4c 4f 4f 37 58 59 37 32 6e 63 48 49 38 6b 70 37 31 43 42 0a 75 68 71 63 41 50 62 4b 4f 49 76 59 59 2f 42 48 62 76 68 30 62 58 54 55 6c 6e 33 59 6f 34 47 42 4d 48 38 77 44 67 59 44 56 52 30 50 41 51 48 2f 42 41 51 44 41 67 65 41 4d 41 77 47 41 31 55 64 0a 45 77 45 42 2f 77 51 43 4d 41 41 77 48 51 59 44 56 52 30 4f 42 42 59 45 46 46 72 34 41 73 4c 72 53 67 36 35 6b 56 6b 49 65 79 33 7a 32 62 51 64 4f 64 4c 34 4d 42 38 47 41 31 55 64 49 77 51 59 0a 4d 42 61 41 46 4d 64 72 35 44 62 62 66 64 30 4b 69 78 49 32 51 51 52 52 79 4d 4f 76 6c 4d 59 31 4d 42 38 47 41 31 55 64 45 51 51 59 4d 42 61 43 46 48 42 6c 5a 58 49 74 63 47 56 6c 63 6d 39 79 0a 5a 7a 4d 74 4d 6a 41 77 4d 6a 4e 6a 4d 41 6f 47 43 43 71 47 53 4d 34 39 42 41 4d 43 41 30 63 41 4d 45 51 43 49 42 4f 64 30 7a 76 70 37 4f 63 6e 71 2b 30 49 4e 32 65 6d 34 38 72 66 46 2f 6a 67 0a 46 76 31 39 43 6a 7a 69 71 66 6b 77 42 33 4d 55 41 69 42 33 4d 6d 6b 62 6d 4d 6f 68 44 77 69 58 68 43 77 47 57 4d 6a 69 73 2f 30 72 58 39 2f 54 38 45 33 45 2b 4f 57 67 56 6b 30 64 36 51 3d 3d 0a 2d 2d 2d 2d 2d 45 4e 44 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0a  on  dlbp-org2 :  MSP PeerOrg3 is unknown  {quote}   I made FAB-17095   ></body> </Action>
<Action id="65604" issue="43296" author="silveraid" type="comment" body="Hi  ~yacovm , attached org2netb_join_debug.txt compressed and split into parts. It has all logs since the peer starts for a good period of time. Peer joins to dlbp-org2 channel first and then a channel called &quot;consortium&quot; to avoid a lot of TLS errors." created="2019-11-18 14:22:31.0" updateauthor="silveraid" updated="2019-11-18 14:22:31.0"/>
<Action id="65605" issue="43296" author="yacovm" type="comment" body="thanks but can you also provide the corresponding last configuration block ? I want to look at the CA certificates in it. " created="2019-11-18 14:40:12.0" updateauthor="yacovm" updated="2019-11-18 14:40:12.0"/>
<Action id="65606" issue="43296" author="silveraid" type="comment" body="Sure, attached dlbp-org2_current_config.json." created="2019-11-18 14:47:00.0" updateauthor="silveraid" updated="2019-11-18 14:47:00.0"/>
<Action id="65607" issue="43296" author="yacovm" type="comment" created="2019-11-18 15:07:37.0" updateauthor="yacovm" updated="2019-11-18 15:09:07.0"> <body><! CDATA OK now in the config block you provided there are 2 root CA certs: {code:java} yacovm@~/Downloads $ echo "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNERENDQWJPZ0F3SUJBZ0lVZUptSk4ycStpKzRqVElFVUVjSytUYlF1YTlzd0NnWUlLb1pJemowRUF3SXcKWXpFUU1BNEdBMVVFQnhNSFpuSmhibXN0WVRFa01DSUdBMVVFQ2hNYlUyVmpkWEpsUzJWNUlGUmxZMmh1YjJ4dgpaMmxsY3lCSmJtTXVNUlF3RWdZRFZRUUxFd3RXWlhKcFptbGxaQzVOWlRFVE1CRUdBMVVFQXhNS1VHVmxjazl5Clp6SkRRVEFlRncweE9URXhNVGd4TWpVMk1EQmFGdzB6TkRFeE1UUXhNalUyTURCYU1HTXhFREFPQmdOVkJBY1QKQjJaeVlXNXJMV0V4SkRBaUJnTlZCQW9URzFObFkzVnlaVXRsZVNCVVpXTm9ibTlzYjJkcFpYTWdTVzVqTGpFVQpNQklHQTFVRUN4TUxWbVZ5YVdacFpXUXVUV1V4RXpBUkJnTlZCQU1UQ2xCbFpYSlBjbWN5UTBFd1dUQVRCZ2NxCmhrak9QUUlCQmdncWhrak9QUU1CQndOQ0FBUnUwVkJ0QUdwc3BxR3NmWVd4bWlKWjB0V05iVUZaYURsZVJLZVQKOU5BSWlCZDVJUVlaMVVleTlWdjhZcysxVUJvVU10QVdzajdLUU8rbVJiMVAxRTVzbzBVd1F6QU9CZ05WSFE4QgpBZjhFQkFNQ0FRWXdFZ1lEVlIwVEFRSC9CQWd3QmdFQi93SUJBVEFkQmdOVkhRNEVGZ1FVUlZUajY4UXo0cHNvClVRc2VVQ0NtYVZDeUxPTXdDZ1lJS29aSXpqMEVBd0lEUndBd1JBSWdGWjZDREp0NlYzUHh0TTd3UlRXMk9XbU8KUndDRnlnSGI1YnhISk5QaTZwNENJRUtzaWhqUzcyRHp0NFBnQjZ2QTcyMi8rOVZFQ3lkaElMSzNaYnl6VmFTMAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==" | base64 --decode | openssl x509 -text -noout Certificate: Data: Version: 3 (0x2) Serial Number: 78:99:89:37:6a:be:8b:ee:23:4c:81:14:11:c2:be:4d:b4:2e:6b:db Signature Algorithm: ecdsa-with-SHA256 Issuer: L=frank-a, O=SecureKey Technologies Inc., OU=Verified.Me, CN=PeerOrg2CA Validity Not Before: Nov 18 12:56:00 2019 GMT Not After : Nov 14 12:56:00 2034 GMT Subject: L=frank-a, O=SecureKey Technologies Inc., OU=Verified.Me, CN=PeerOrg2CA Subject Public Key Info: Public Key Algorithm: id-ecPublicKey Public-Key: (256 bit) pub:  04:6e:d1:50:6d:00:6a:6c:a6:a1:ac:7d:85:b1:9a: 22:59:d2:d5:8d:6d:41:59:68:39:5e:44:a7:93:f4: d0:08:88:17:79:21:06:19:d5:47:b2:f5:5b:fc:62: cf:b5:50:1a:14:32:d0:16:b2:3e:ca:40:ef:a6:45: bd:4f:d4:4e:6c ASN1 OID: prime256v1 NIST CURVE: P-256 X509v3 extensions: X509v3 Key Usage: critical Certificate Sign, CRL Sign X509v3 Basic Constraints: critical CA:TRUE, pathlen:1 X509v3 Subject Key Identifier:  45:54:E3:EB:C4:33:E2:9B:28:51:0B:1E:50:20:A6:69:50:B2:2C:E3 Signature Algorithm: ecdsa-with-SHA256 30:44:02:20:15:9e:82:0c:9b:7a:57:73:f1:b4:ce:f0:45:35: b6:39:69:8e:47:00:85:ca:01:db:e5:bc:47:24:d3:e2:ea:9e: 02:20:42:ac:8a:18:d2:ef:60:f3:b7:83:e0:07:ab:c0:ef:6d: bf:fb:d5:44:0b:27:61:20:b2:b7:65:bc:b3:55:a4:b4 yacovm@~/Downloads $ echo "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNEVENDQWJPZ0F3SUJBZ0lVUTA5cXl2Q2JWYm94V3VDQkJJSlVwWWJueTRFd0NnWUlLb1pJemowRUF3SXcKWXpFUU1BNEdBMVVFQnhNSFpuSmhibXN0WWpFa01DSUdBMVVFQ2hNYlUyVmpkWEpsUzJWNUlGUmxZMmh1YjJ4dgpaMmxsY3lCSmJtTXVNUlF3RWdZRFZRUUxFd3RXWlhKcFptbGxaQzVOWlRFVE1CRUdBMVVFQXhNS1VHVmxjazl5Clp6SkRRVEFlRncweE9URXhNVGd4TXpFNU1EQmFGdzB6TkRFeE1UUXhNekU1TURCYU1HTXhFREFPQmdOVkJBY1QKQjJaeVlXNXJMV0l4SkRBaUJnTlZCQW9URzFObFkzVnlaVXRsZVNCVVpXTm9ibTlzYjJkcFpYTWdTVzVqTGpFVQpNQklHQTFVRUN4TUxWbVZ5YVdacFpXUXVUV1V4RXpBUkJnTlZCQU1UQ2xCbFpYSlBjbWN5UTBFd1dUQVRCZ2NxCmhrak9QUUlCQmdncWhrak9QUU1CQndOQ0FBU2pLT2ZPd0xUY3p1U3R2T2JPZDNkY1M3NllDRHg5WW12V2JzaEMKUjk4bzhTZmdZY1F5RG1tbXhwWjR5WXRPelRPNDA3Q3hQTTBJVXExTlBiNE84VEQzbzBVd1F6QU9CZ05WSFE4QgpBZjhFQkFNQ0FRWXdFZ1lEVlIwVEFRSC9CQWd3QmdFQi93SUJBVEFkQmdOVkhRNEVGZ1FVM08rTHh0WGhqUkJtCmZsSGY4MWdJbzRQbTI3NHdDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWhBSWVlR1JmQzEwSE8vVFZHMExhMDJQU1oKandyamplU3BaaVRkQldLTFZTcnVBaUFRUFhKMGZvcmNkQS8zdjl3TGUxYjhVamhtaXhnd1ZtQ3Y0RlB1Z3NkeQp5QT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K" | base64 --decode | openssl x509 -text -noout Certificate: Data: Version: 3 (0x2) Serial Number: 43:4f:6a:ca:f0:9b:55:ba:31:5a:e0:81:04:82:54:a5:86:e7:cb:81 Signature Algorithm: ecdsa-with-SHA256 Issuer: L=frank-b, O=SecureKey Technologies Inc., OU=Verified.Me, CN=PeerOrg2CA Validity Not Before: Nov 18 13:19:00 2019 GMT Not After : Nov 14 13:19:00 2034 GMT Subject: L=frank-b, O=SecureKey Technologies Inc., OU=Verified.Me, CN=PeerOrg2CA Subject Public Key Info: Public Key Algorithm: id-ecPublicKey Public-Key: (256 bit) pub:  04:a3:28:e7:ce:c0:b4:dc:ce:e4:ad:bc:e6:ce:77: 77:5c:4b:be:98:08:3c:7d:62:6b:d6:6e:c8:42:47: df:28:f1:27:e0:61:c4:32:0e:69:a6:c6:96:78:c9: 8b:4e:cd:33:b8:d3:b0:b1:3c:cd:08:52:ad:4d:3d: be:0e:f1:30:f7 ASN1 OID: prime256v1 NIST CURVE: P-256 X509v3 extensions: X509v3 Key Usage: critical Certificate Sign, CRL Sign X509v3 Basic Constraints: critical CA:TRUE, pathlen:1 X509v3 Subject Key Identifier:  DC:EF:8B:C6:D5:E1:8D:10:66:7E:51:DF:F3:58:08:A3:83:E6:DB:BE Signature Algorithm: ecdsa-with-SHA256 30:45:02:21:00:87:9e:19:17:c2:d7:41:ce:fd:35:46:d0:b6: b4:d8:f4:99:8f:0a:e3:8d:e4:a9:66:24:dd:05:62:8b:55:2a: ee:02:20:10:3d:72:74:7e:8a:dc:74:0f:f7:bf:dc:0b:7b:56: fc:52:38:66:8b:18:30:56:60:af:e0:53:ee:82:c7:72:c8 {code} and 4 intermediate certs: {code:java} yacovm@~/Downloads $ echo "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNKVENDQWN5Z0F3SUJBZ0lVWWgwVSs0Tm4xalNWbmREVDlYNy9yVzIxaFBrd0NnWUlLb1pJemowRUF3SXcKWXpFUU1BNEdBMVVFQnhNSFpuSmhibXN0WVRFa01DSUdBMVVFQ2hNYlUyVmpkWEpsUzJWNUlGUmxZMmh1YjJ4dgpaMmxsY3lCSmJtTXVNUlF3RWdZRFZRUUxFd3RXWlhKcFptbGxaQzVOWlRFVE1CRUdBMVVFQXhNS1VHVmxjazl5Clp6SkRRVEFlRncweE9URXhNVGd4TWpVMk1EQmFGdzB5TkRFeE1UWXhNekF4TURCYU1Gc3hFREFPQmdOVkJBY1QKQjJaeVlXNXJMV0V4SkRBaUJnTlZCQW9URzFObFkzVnlaVXRsZVNCVVpXTm9ibTlzYjJkcFpYTWdTVzVqTGpFTApNQWtHQTFVRUN4TUNZMkV4RkRBU0JnTlZCQU1UQzFCbFpYSlBjbWN5UTBFeE1Ga3dFd1lIS29aSXpqMENBUVlJCktvWkl6ajBEQVFjRFFnQUVWMXBjYzJXOVpwNnZWNWFZR3prcFpUdlZkZmJVVzZmbUpMTmFRdmZianNOaHpYV0MKeGpQSkdncEFlY1RhVkNMamJkWkRuWlV4NmNGdmJrRjBxREZ1T0tObU1HUXdEZ1lEVlIwUEFRSC9CQVFEQWdFRwpNQklHQTFVZEV3RUIvd1FJTUFZQkFmOENBUUF3SFFZRFZSME9CQllFRkQvRmJQMnh5aG1CRHpxZlR5NFUvS0dGCjE4RURNQjhHQTFVZEl3UVlNQmFBRkVWVTQrdkVNK0tiS0ZFTEhsQWdwbWxRc2l6ak1Bb0dDQ3FHU000OUJBTUMKQTBjQU1FUUNJRUNjVEZXU0RWaTFvZXMzUkZ3RTZWK1NlZHdlRm0vVk9DL1I0djJHbEVzL0FpQU1PM1pPRXM1TwpGbUhyY3htTzFBbWxyeDNxRTNDcEowTitFRmhaem5xMmdBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=" |  base64 --decode | openssl x509 -text -noout Certificate: Data: Version: 3 (0x2) Serial Number: 62:1d:14:fb:83:67:d6:34:95:9d:d0:d3:f5:7e:ff:ad:6d:b5:84:f9 Signature Algorithm: ecdsa-with-SHA256 Issuer: L=frank-a, O=SecureKey Technologies Inc., OU=Verified.Me, CN=PeerOrg2CA Validity Not Before: Nov 18 12:56:00 2019 GMT Not After : Nov 16 13:01:00 2024 GMT Subject: L=frank-a, O=SecureKey Technologies Inc., OU=ca, CN=PeerOrg2CA1 Subject Public Key Info: Public Key Algorithm: id-ecPublicKey Public-Key: (256 bit) pub:  04:57:5a:5c:73:65:bd:66:9e:af:57:96:98:1b:39: 29:65:3b:d5:75:f6:d4:5b:a7:e6:24:b3:5a:42:f7: db:8e:c3:61:cd:75:82:c6:33:c9:1a:0a:40:79:c4: da:54:22:e3:6d:d6:43:9d:95:31:e9:c1:6f:6e:41: 74:a8:31:6e:38 ASN1 OID: prime256v1 NIST CURVE: P-256 X509v3 extensions: X509v3 Key Usage: critical Certificate Sign, CRL Sign X509v3 Basic Constraints: critical CA:TRUE, pathlen:0 X509v3 Subject Key Identifier:  3F:C5:6C:FD:B1:CA:19:81:0F:3A:9F:4F:2E:14:FC:A1:85:D7:C1:03 X509v3 Authority Key Identifier:  keyid:45:54:E3:EB:C4:33:E2:9B:28:51:0B:1E:50:20:A6:69:50:B2:2C:E3  Signature Algorithm: ecdsa-with-SHA256 30:44:02:20:40:9c:4c:55:92:0d:58:b5:a1:eb:37:44:5c:04: e9:5f:92:79:dc:1e:16:6f:d5:38:2f:d1:e2:fd:86:94:4b:3f: 02:20:0c:3b:76:4e:12:ce:4e:16:61:eb:73:19:8e:d4:09:a5: af:1d:ea:13:70:a9:27:43:7e:10:58:59:ce:7a:b6:80  yacovm@~/Downloads $ echo "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNKVENDQWN5Z0F3SUJBZ0lVSzZhaFRsZGsxMUpXQnNnTDRRS3JpaERpbGVJd0NnWUlLb1pJemowRUF3SXcKWXpFUU1BNEdBMVVFQnhNSFpuSmhibXN0WWpFa01DSUdBMVVFQ2hNYlUyVmpkWEpsUzJWNUlGUmxZMmh1YjJ4dgpaMmxsY3lCSmJtTXVNUlF3RWdZRFZRUUxFd3RXWlhKcFptbGxaQzVOWlRFVE1CRUdBMVVFQXhNS1VHVmxjazl5Clp6SkRRVEFlRncweE9URXhNVGd4TXpFNU1EQmFGdzB5TkRFeE1UWXhNekkwTURCYU1Gc3hFREFPQmdOVkJBY1QKQjJaeVlXNXJMV0l4SkRBaUJnTlZCQW9URzFObFkzVnlaVXRsZVNCVVpXTm9ibTlzYjJkcFpYTWdTVzVqTGpFTApNQWtHQTFVRUN4TUNZMkV4RkRBU0JnTlZCQU1UQzFCbFpYSlBjbWN5UTBFeE1Ga3dFd1lIS29aSXpqMENBUVlJCktvWkl6ajBEQVFjRFFnQUVVVlFqaWdpelVCVDZ0WENkZmZmY0NwWGJTcU9pMjNLL0NFOTNLZTR0KzdLNnVGYUsKb3FEUjlUeEhJc29LTGJDdWY0U2VTMnBPNEZpTnl1emNiZVhCRzZObU1HUXdEZ1lEVlIwUEFRSC9CQVFEQWdFRwpNQklHQTFVZEV3RUIvd1FJTUFZQkFmOENBUUF3SFFZRFZSME9CQllFRkxINWJFUmMxbzI0eTJvWGQwSFUya3BQCjZDMDdNQjhHQTFVZEl3UVlNQmFBRk56dmk4YlY0WTBRWm41UjMvTllDS09ENXR1K01Bb0dDQ3FHU000OUJBTUMKQTBjQU1FUUNJRk5UVmZFaC9PRTk4VStwd0U4bkFxVWJaaWl6TzdhQk5hSU8rT04xc2cwL0FpQjlPVVhXak9YTApqUnN4Sk5qbWZaN0lIZ3g2TlRac1pzOThpNXRhVzJPWnpBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=" |  base64 --decode | openssl x509 -text -noout Certificate: Data: Version: 3 (0x2) Serial Number: 2b:a6:a1:4e:57:64:d7:52:56:06:c8:0b:e1:02:ab:8a:10:e2:95:e2 Signature Algorithm: ecdsa-with-SHA256 Issuer: L=frank-b, O=SecureKey Technologies Inc., OU=Verified.Me, CN=PeerOrg2CA Validity Not Before: Nov 18 13:19:00 2019 GMT Not After : Nov 16 13:24:00 2024 GMT Subject: L=frank-b, O=SecureKey Technologies Inc., OU=ca, CN=PeerOrg2CA1 Subject Public Key Info: Public Key Algorithm: id-ecPublicKey Public-Key: (256 bit) pub:  04:51:54:23:8a:08:b3:50:14:fa:b5:70:9d:7d:f7: dc:0a:95:db:4a:a3:a2:db:72:bf:08:4f:77:29:ee: 2d:fb:b2:ba:b8:56:8a:a2:a0:d1:f5:3c:47:22:ca: 0a:2d:b0:ae:7f:84:9e:4b:6a:4e:e0:58:8d:ca:ec: dc:6d:e5:c1:1b ASN1 OID: prime256v1 NIST CURVE: P-256 X509v3 extensions: X509v3 Key Usage: critical Certificate Sign, CRL Sign X509v3 Basic Constraints: critical CA:TRUE, pathlen:0 X509v3 Subject Key Identifier:  B1:F9:6C:44:5C:D6:8D:B8:CB:6A:17:77:41:D4:DA:4A:4F:E8:2D:3B X509v3 Authority Key Identifier:  keyid:DC:EF:8B:C6:D5:E1:8D:10:66:7E:51:DF:F3:58:08:A3:83:E6:DB:BE  Signature Algorithm: ecdsa-with-SHA256 30:44:02:20:53:53:55:f1:21:fc:e1:3d:f1:4f:a9:c0:4f:27: 02:a5:1b:66:28:b3:3b:b6:81:35:a2:0e:f8:e3:75:b2:0d:3f: 02:20:7d:39:45:d6:8c:e5:cb:8d:1b:31:24:d8:e6:7d:9e:c8: 1e:0c:7a:35:36:6c:66:cf:7c:8b:9b:5a:5b:63:99:cc   yacovm@~/Downloads $ echo "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNKakNDQWN5Z0F3SUJBZ0lVUFAyOGxFazUrZzB2ZVRhOTZ0TkFFUkJ0bmFRd0NnWUlLb1pJemowRUF3SXcKWXpFUU1BNEdBMVVFQnhNSFpuSmhibXN0WVRFa01DSUdBMVVFQ2hNYlUyVmpkWEpsUzJWNUlGUmxZMmh1YjJ4dgpaMmxsY3lCSmJtTXVNUlF3RWdZRFZRUUxFd3RXWlhKcFptbGxaQzVOWlRFVE1CRUdBMVVFQXhNS1VHVmxjazl5Clp6SkRRVEFlRncweE9URXhNVGd4TWpVMk1EQmFGdzB5TkRFeE1UWXhNekF4TURCYU1Gc3hFREFPQmdOVkJBY1QKQjJaeVlXNXJMV0V4SkRBaUJnTlZCQW9URzFObFkzVnlaVXRsZVNCVVpXTm9ibTlzYjJkcFpYTWdTVzVqTGpFTApNQWtHQTFVRUN4TUNZMkV4RkRBU0JnTlZCQU1UQzFCbFpYSlBjbWN5UTBFeU1Ga3dFd1lIS29aSXpqMENBUVlJCktvWkl6ajBEQVFjRFFnQUUxUU8yWU9MRmhDR1l5eC9iRXRSbU1yLzFEdUFuc3JPTWErWWhic0hQNUxQQksvUHUKaUdVdEM5TEdySVNKVk1hZDRsUGtHVks0ZXVWeDlQZ0oyZkU2NzZObU1HUXdEZ1lEVlIwUEFRSC9CQVFEQWdFRwpNQklHQTFVZEV3RUIvd1FJTUFZQkFmOENBUUF3SFFZRFZSME9CQllFRkw3RFNVRUFueHEvdUJiWWhXT1k0ZlpaCnFlU3RNQjhHQTFVZEl3UVlNQmFBRkVWVTQrdkVNK0tiS0ZFTEhsQWdwbWxRc2l6ak1Bb0dDQ3FHU000OUJBTUMKQTBnQU1FVUNJUURJbzdjR0N6ME0wS1lnb2lWeHRuNEF6SUxFdEl4bjh1ajhDUlN0bmNBRWlBSWdWUzlTMGhHWQpyR0NkbTY3ZW1hNCtCb3hxS214eUV3UlpkMUFKRE5xMDQ1cz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=" |  base64 --decode | openssl x509 -text -noout Certificate: Data: Version: 3 (0x2) Serial Number: 3c:fd:bc:94:49:39:fa:0d:2f:79:36:bd:ea:d3:40:11:10:6d:9d:a4 Signature Algorithm: ecdsa-with-SHA256 Issuer: L=frank-a, O=SecureKey Technologies Inc., OU=Verified.Me, CN=PeerOrg2CA Validity Not Before: Nov 18 12:56:00 2019 GMT Not After : Nov 16 13:01:00 2024 GMT Subject: L=frank-a, O=SecureKey Technologies Inc., OU=ca, CN=PeerOrg2CA2 Subject Public Key Info: Public Key Algorithm: id-ecPublicKey Public-Key: (256 bit) pub:  04:d5:03:b6:60:e2:c5:84:21:98:cb:1f:db:12:d4: 66:32:bf:f5:0e:e0:27:b2:b3:8c:6b:e6:21:6e:c1: cf:e4:b3:c1:2b:f3:ee:88:65:2d:0b:d2:c6:ac:84: 89:54:c6:9d:e2:53:e4:19:52:b8:7a:e5:71:f4:f8: 09:d9:f1:3a:ef ASN1 OID: prime256v1 NIST CURVE: P-256 X509v3 extensions: X509v3 Key Usage: critical Certificate Sign, CRL Sign X509v3 Basic Constraints: critical CA:TRUE, pathlen:0 X509v3 Subject Key Identifier:  BE:C3:49:41:00:9F:1A:BF:B8:16:D8:85:63:98:E1:F6:59:A9:E4:AD X509v3 Authority Key Identifier:  keyid:45:54:E3:EB:C4:33:E2:9B:28:51:0B:1E:50:20:A6:69:50:B2:2C:E3  Signature Algorithm: ecdsa-with-SHA256 30:45:02:21:00:c8:a3:b7:06:0b:3d:0c:d0:a6:20:a2:25:71: b6:7e:00:cc:82:c4:b4:8c:67:f2:e8:fc:09:14:ad:9d:c0:04: 88:02:20:55:2f:52:d2:11:98:ac:60:9d:9b:ae:de:99:ae:3e: 06:8c:6a:2a:6c:72:13:04:59:77:50:09:0c:da:b4:e3:9b yacovm@~/Downloads $ echo "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNKVENDQWN5Z0F3SUJBZ0lVYk9tTmVZTHFZNFZkalYyMmUxVGRJYWl3Rmc4d0NnWUlLb1pJemowRUF3SXcKWXpFUU1BNEdBMVVFQnhNSFpuSmhibXN0WWpFa01DSUdBMVVFQ2hNYlUyVmpkWEpsUzJWNUlGUmxZMmh1YjJ4dgpaMmxsY3lCSmJtTXVNUlF3RWdZRFZRUUxFd3RXWlhKcFptbGxaQzVOWlRFVE1CRUdBMVVFQXhNS1VHVmxjazl5Clp6SkRRVEFlRncweE9URXhNVGd4TXpFNU1EQmFGdzB5TkRFeE1UWXhNekkwTURCYU1Gc3hFREFPQmdOVkJBY1QKQjJaeVlXNXJMV0l4SkRBaUJnTlZCQW9URzFObFkzVnlaVXRsZVNCVVpXTm9ibTlzYjJkcFpYTWdTVzVqTGpFTApNQWtHQTFVRUN4TUNZMkV4RkRBU0JnTlZCQU1UQzFCbFpYSlBjbWN5UTBFeU1Ga3dFd1lIS29aSXpqMENBUVlJCktvWkl6ajBEQVFjRFFnQUUwbDAwVW5NS3I0SkRwdy96VmQ1UkgyWjZGVHVreEU3d05yaXgydnVLMzFBR1JNUWsKM1RITytGN3ZwNzJpZ3VEV1ZzN2dQVk91UHYwckQ0YWh1bUpsZEtObU1HUXdEZ1lEVlIwUEFRSC9CQVFEQWdFRwpNQklHQTFVZEV3RUIvd1FJTUFZQkFmOENBUUF3SFFZRFZSME9CQllFRkJ2bkQ1T3VQSzBuTkEvek1kWHRkbEhyCi95TlZNQjhHQTFVZEl3UVlNQmFBRk56dmk4YlY0WTBRWm41UjMvTllDS09ENXR1K01Bb0dDQ3FHU000OUJBTUMKQTBjQU1FUUNJRk5sVUJQZE1WdXNhVzVVOTZ3SEFrM2kwM0lJTjgzbUdSZStqNTRQTzdYREFpQXUyaW1OV2ovYwprNnBsT3kwcEMraTE0QVNKZGM2c0FGYWhKekR0a2t5ZHRBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=" |  base64 --decode | openssl x509 -text -noout Certificate: Data: Version: 3 (0x2) Serial Number: 6c:e9:8d:79:82:ea:63:85:5d:8d:5d:b6:7b:54:dd:21:a8:b0:16:0f Signature Algorithm: ecdsa-with-SHA256 Issuer: L=frank-b, O=SecureKey Technologies Inc., OU=Verified.Me, CN=PeerOrg2CA Validity Not Before: Nov 18 13:19:00 2019 GMT Not After : Nov 16 13:24:00 2024 GMT Subject: L=frank-b, O=SecureKey Technologies Inc., OU=ca, CN=PeerOrg2CA2 Subject Public Key Info: Public Key Algorithm: id-ecPublicKey Public-Key: (256 bit) pub:  04:d2:5d:34:52:73:0a:af:82:43:a7:0f:f3:55:de: 51:1f:66:7a:15:3b:a4:c4:4e:f0:36:b8:b1:da:fb: 8a:df:50:06:44:c4:24:dd:31:ce:f8:5e:ef:a7:bd: a2:82:e0:d6:56:ce:e0:3d:53:ae:3e:fd:2b:0f:86: a1:ba:62:65:74 ASN1 OID: prime256v1 NIST CURVE: P-256 X509v3 extensions: X509v3 Key Usage: critical Certificate Sign, CRL Sign X509v3 Basic Constraints: critical CA:TRUE, pathlen:0 X509v3 Subject Key Identifier:  1B:E7:0F:93:AE:3C:AD:27:34:0F:F3:31:D5:ED:76:51:EB:FF:23:55 X509v3 Authority Key Identifier:  keyid:DC:EF:8B:C6:D5:E1:8D:10:66:7E:51:DF:F3:58:08:A3:83:E6:DB:BE  Signature Algorithm: ecdsa-with-SHA256 30:44:02:20:53:65:50:13:dd:31:5b:ac:69:6e:54:f7:ac:07: 02:4d:e2:d3:72:08:37:cd:e6:19:17:be:8f:9e:0f:3b:b5:c3: 02:20:2e:da:29:8d:5a:3f:dc:93:aa:65:3b:2d:29:0b:e8:b5: e0:04:89:75:ce:ac:00:56:a1:27:30:ed:92:4c:9d:b4  {code} Now, if we look at the private data part in the commit we see: {code:java} 2019-11-18 13:38:33.932 UTC  committer.txvalidator  Validate -> INFO cf8  dlbp-org2  Validated block  7  in 10ms 2019-11-18 13:38:33.932 UTC  lockbasedtxmgr  newQueryExecutor -> DEBU cf9 constructing new query executor txid =  ec641a3a-7da2-4562-a229-39ff32f0e5f6  2019-11-18 13:38:33.932 UTC  statecouchdb  GetState -> DEBU cfa GetState(). ns=lscc, key=custodiancc~collection 2019-11-18 13:38:33.932 UTC  statecouchdb  getState -> DEBU cfb key: custodiancc~collection  found in the lsccStateCache 2019-11-18 13:38:33.932 UTC  lockbasedtxmgr  Done -> DEBU cfc Done with transaction simulation / query execution  ec641a3a-7da2-4562-a229-39ff32f0e5f6  2019-11-18 13:38:33.932 UTC  msp  GetManagerForChain -> DEBU cfd Returning existing manager for channel 'dlbp-org2' 2019-11-18 13:38:33.932 UTC  msp  DeserializeIdentity -> DEBU cfe Obtaining identity 2019-11-18 13:38:33.932 UTC  msp.identity  newIdentity -> DEBU cff Creating identity instance for cert -----BEGIN CERTIFICATE----- MIICOzCCAeGgAwIBAgIUHSF5RcXSSCbl2Mjcn0eqTQqIFHYwCgYIKoZIzj0EAwIw WzEQMA4GA1UEBxMHZnJhbmstYjEkMCIGA1UEChMbU2VjdXJlS2V5IFRlY2hub2xv Z2llcyBJbmMuMQswCQYDVQQLEwJjYTEUMBIGA1UEAxMLUGVlck9yZzJDQTEwHhcN MTkxMTE4MTMyMDAwWhcNMjQxMTE2MTMyNDAwWjBcMQswCQYDVQQGEwJVUzEXMBUG A1UECBMOTm9ydGggQ2Fyb2xpbmExFDASBgNVBAoTC0h5cGVybGVkZ2VyMQ0wCwYD VQQLEwRwZWVyMQ8wDQYDVQQDDAZwZWVyX2EwWTATBgcqhkjOPQIBBggqhkjOPQMB BwNCAAT0Bo3RP/rQI4peEynhbKMIkCKo3U/ZIrVQ8u3kV+2cJghL9+eCPcao7jJi Jus4diAcfaNaDZEYDqmCfkRdDTUXo4GBMH8wDgYDVR0PAQH/BAQDAgeAMAwGA1Ud EwEB/wQCMAAwHQYDVR0OBBYEFDsY7S7eXO/0l/fBppR2pXaDTtTkMB8GA1UdIwQY MBaAFLH5bERc1o24y2oXd0HU2kpP6C07MB8GA1UdEQQYMBaCFHBlZXItcGVlcm9y ZzItMjAwMTNhMAoGCCqGSM49BAMCA0gAMEUCIQDLyBAJL8awR+mi+1xP6xJ0W1XO id/4UFL3LiRi53KGXQIgVAcuJAuQJvC5+vYuIDQHz9jr/+0pe1wR92N1vrSpQSs= -----END CERTIFICATE----- 2019-11-18 13:38:33.932 UTC  cauthdsl  deduplicate -> ERRO d00 Principal deserialization failure (the supplied identity is not valid: x509: certificate signed by unknown authority) for identity 0 2019-11-18 13:38:33.932 UTC  cauthdsl  func1 -> DEBU d01 0xc0026fbe30 gate 1574084313932866584 evaluation starts 2019-11-18 13:38:33.932 UTC  cauthdsl  func2 -> DEBU d02 0xc0026fbe30 signed by 0 principal evaluation starts (used  false ) 2019-11-18 13:38:33.932 UTC  cauthdsl  func2 -> DEBU d03 0xc0026fbe30 principal evaluation fails 2019-11-18 13:38:33.932 UTC  cauthdsl  func1 -> DEBU d04 0xc0026fbe30 gate 1574084313932866584 evaluation fails 2019-11-18 13:38:33.932 UTC  gossip.privdata  isEligible -> DEBU d05 Skipping namespace custodiancc collection custodian_permanent because we're not eligible for the private data 2019-11-18 13:38:33.932 UTC  gossip.privdata  inspectTransaction -> DEBU d06 Peer is not eligible for collection, channel  dlbp-org2 , chaincode  custodiancc , collection name  custodian_permanent , txID  28e4be6a7ce9b1856b6257feccaf650dd4dba8a215f64929af2b6971ee445abb  the policy is  &privdata.SimpleCollection{name:"custodian_permanent", accessPolicy:(*cauthdsl.policy)(0xc0025ce8e0), memberOrgs:  string{"PeerOrg2"}, conf:common.StaticCollectionConfig{Name:"custodian_permanent", MemberOrgsPolicy:(*common.CollectionPolicyConfig)(0xc0003666f0), RequiredPeerCount:0, MaximumPeerCount:1, BlockToLive:0x0, MemberOnlyRead:false, Type:0, TimeToLive:"", XXX_NoUnkeyedLiteral:struct {}{}, XXX_unrecognized:  uint8(nil), XXX_sizecache:0}} . Skipping.  {code} And if we look at the certificate: {code:java} yacovm@~ $ cat << EOF | openssl x509 -text -noout  > -----BEGIN CERTIFICATE----- > MIICOzCCAeGgAwIBAgIUHSF5RcXSSCbl2Mjcn0eqTQqIFHYwCgYIKoZIzj0EAwIw > WzEQMA4GA1UEBxMHZnJhbmstYjEkMCIGA1UEChMbU2VjdXJlS2V5IFRlY2hub2xv > Z2llcyBJbmMuMQswCQYDVQQLEwJjYTEUMBIGA1UEAxMLUGVlck9yZzJDQTEwHhcN > MTkxMTE4MTMyMDAwWhcNMjQxMTE2MTMyNDAwWjBcMQswCQYDVQQGEwJVUzEXMBUG > A1UECBMOTm9ydGggQ2Fyb2xpbmExFDASBgNVBAoTC0h5cGVybGVkZ2VyMQ0wCwYD > VQQLEwRwZWVyMQ8wDQYDVQQDDAZwZWVyX2EwWTATBgcqhkjOPQIBBggqhkjOPQMB > BwNCAAT0Bo3RP/rQI4peEynhbKMIkCKo3U/ZIrVQ8u3kV+2cJghL9+eCPcao7jJi > Jus4diAcfaNaDZEYDqmCfkRdDTUXo4GBMH8wDgYDVR0PAQH/BAQDAgeAMAwGA1Ud > EwEB/wQCMAAwHQYDVR0OBBYEFDsY7S7eXO/0l/fBppR2pXaDTtTkMB8GA1UdIwQY > MBaAFLH5bERc1o24y2oXd0HU2kpP6C07MB8GA1UdEQQYMBaCFHBlZXItcGVlcm9y > ZzItMjAwMTNhMAoGCCqGSM49BAMCA0gAMEUCIQDLyBAJL8awR+mi+1xP6xJ0W1XO > id/4UFL3LiRi53KGXQIgVAcuJAuQJvC5+vYuIDQHz9jr/+0pe1wR92N1vrSpQSs= > -----END CERTIFICATE----- >  > EOF Certificate: Data: Version: 3 (0x2) Serial Number: 1d:21:79:45:c5:d2:48:26:e5:d8:c8:dc:9f:47:aa:4d:0a:88:14:76 Signature Algorithm: ecdsa-with-SHA256 Issuer: L=frank-b, O=SecureKey Technologies Inc., OU=ca, CN=PeerOrg2CA1 Validity Not Before: Nov 18 13:20:00 2019 GMT Not After : Nov 16 13:24:00 2024 GMT Subject: C=US, ST=North Carolina, O=Hyperledger, OU=peer, CN=peer_a Subject Public Key Info: Public Key Algorithm: id-ecPublicKey Public-Key: (256 bit) pub:  04:f4:06:8d:d1:3f:fa:d0:23:8a:5e:13:29:e1:6c: a3:08:90:22:a8:dd:4f:d9:22:b5:50:f2:ed:e4:57: ed:9c:26:08:4b:f7:e7:82:3d:c6:a8:ee:32:62:26: eb:38:76:20:1c:7d:a3:5a:0d:91:18:0e:a9:82:7e: 44:5d:0d:35:17 ASN1 OID: prime256v1 NIST CURVE: P-256 X509v3 extensions: X509v3 Key Usage: critical Digital Signature X509v3 Basic Constraints: critical CA:FALSE X509v3 Subject Key Identifier:  3B:18:ED:2E:DE:5C:EF:F4:97:F7:C1:A6:94:76:A5:76:83:4E:D4:E4 X509v3 Authority Key Identifier:  keyid:B1:F9:6C:44:5C:D6:8D:B8:CB:6A:17:77:41:D4:DA:4A:4F:E8:2D:3B  X509v3 Subject Alternative Name:  DNS:peer-peerorg2-20013a Signature Algorithm: ecdsa-with-SHA256 30:45:02:21:00:cb:c8:10:09:2f:c6:b0:47:e9:a2:fb:5c:4f: eb:12:74:5b:55:ce:89:df:f8:50:52:f7:2e:24:62:e7:72:86: 5d:02:20:54:07:2e:24:0b:90:26:f0:b9:fa:f6:2e:20:34:07: cf:d8:eb:ff:ed:29:7b:5c:11:f7:63:75:be:b4:a9:41:2b  {code} Notice the AKI is: *B1:F9:6C:44:5C:D6:8D:B8:CB:6A:17:77:41:D4:DA:4A:4F:E8:2D:3B*  But we have an intermediate CA with such an SKI:  *B1:F9:6C:44:5C:D6:8D:B8:CB:6A:17:77:41:D4:DA:4A:4F:E8:2D:3B* X509v3 Authority Key Identifier:  *keyid:DC:EF:8B:C6:D5:E1:8D:10:66:7E:51:DF:F3:58:08:A3:83:E6:DB:BE*  Â   This isn't good... I think it should work :/  Â    ~jyellick   ~angelo.decaro   ~ales  what is going on here? There should be a certification path to a root CA... why is the MSP behaving this way?  Â    ~silveraid   On another note: what is configurationsnap ? is it a system chaincode? Why does LSCC treat it as a non system chaincode? It can't find its namespace in LSCC: {code:java} 2019-11-18 13:39:14.317 UTC  committer.txvalidator  GetInfoForValidate -> ERRO 48d4 Unable to get chaincode data from ledger for txid 9f2b2b8ab9c998c56f09dfe738e8ee339ad9e42ee116efa55759a48cd167a0eb, due to lscc 's state for  configurationsnap  not found. 2019-11-18 13:39:14.317 UTC  committer.txvalidator  VSCCValidateTx -> ERRO 48d5 GetInfoForValidate for txId = 9f2b2b8ab9c998c56f09dfe738e8ee339ad9e42ee116efa55759a48cd167a0eb returned error: lscc's state for  co nfigurationsnap  not found. github.com/hyperledger/fabric/core/committer/txvalidator.(*VsccValidatorImpl).getCDataForCC /opt/gopath/src/github.com/hyperledger/fabric/core/committer/txvalidator/vscc_validator.go:304 github.com/hyperledger/fabric/core/committer/txvalidator.(*VsccValidatorImpl).GetInfoForValidate /opt/gopath/src/github.com/hyperledger/fabric/core/committer/txvalidator/vscc_validator.go:344 github.com/hyperledger/fabric/core/committer/txvalidator.(*VsccValidatorImpl).VSCCValidateTx /opt/gopath/src/github.com/hyperledger/fabric/core/committer/txvalidator/vscc_validator.go:190 github.com/hyperledger/fabric/core/committer/txvalidator.(*TxValidator).validateTx /opt/gopath/src/github.com/hyperledger/fabric/core/committer/txvalidator/validator.go:345 github.com/hyperledger/fabric/core/committer/txvalidator.(*TxValidator).Validate.func1.1 /opt/gopath/src/github.com/hyperledger/fabric/core/committer/txvalidator/validator.go:158 runtime.goexit /opt/go/src/runtime/asm_amd64.s:1333 2019-11-18 13:39:14.317 UTC  committer.txvalidator  validateTx -> ERRO 48d6 VSCCValidateTx for transaction txId = 9f2b2b8ab9c998c56f09dfe738e8ee339ad9e42ee116efa55759a48cd167a0eb returned error: lscc's state for  configurationsnap  not found. 2019-11-18 13:39:14.317 UTC  committer.txvalidator  validateTx -> DEBU 48d7  consortium  validateTx completes for block 0xc00296aa80 env 0xc004149f40 txn 0 2019-11-18 13:39:14.317 UTC  committer.txvalidator  Validate -> DEBU 48d8 got result for idx 0, code 255 2019-11-18 13:39:14.317 UTC  committer.txvalidator  Validate -> INFO 48d9  consortium  Validated block  9  in 2ms {code}  ></body> </Action>
<Action id="65608" issue="43296" author="silveraid" type="comment" body="It is a system chaincode what I commented out to load to avoid additional noise. It makes tremendous amount of logs." created="2019-11-18 15:15:36.0" updateauthor="silveraid" updated="2019-11-18 15:15:36.0"/>
<Action id="65609" issue="43296" author="yacovm" type="comment" body="I think it is not configured to be a system chaincode... you should check the *core.yaml*" created="2019-11-18 15:21:11.0" updateauthor="yacovm" updated="2019-11-18 15:21:11.0"/>
<Action id="65610" issue="43296" author="silveraid" type="comment" body="Yes, I commented it out." created="2019-11-18 15:36:14.0" updateauthor="silveraid" updated="2019-11-18 15:36:14.0"/>
<Action id="65756" issue="43296" author="ales" type="comment" body="Looking into it - I&apos;m trying to reproduce using our integration tests" created="2019-11-25 10:44:01.0" updateauthor="ales" updated="2019-11-25 10:44:01.0"/>
<Action id="65781" issue="43296" author="ales" type="comment" body=" ~silveraid  pls PM me on rocketchat, I&apos;ve got a couple of questions for you" created="2019-11-26 11:30:07.0" updateauthor="ales" updated="2019-11-26 11:30:07.0"/>
<Action id="65793" issue="43296" author="ales" type="comment" created="2019-11-27 10:24:14.0" updateauthor="ales" updated="2019-11-27 10:25:05.0"> <body><! CDATA I think I was able to reproduce the issue. Just reiterating the scenario in my recreate: - org2 starts with 1 root CA (CA1) - org2.peer0 has a cert issued by CA1 and joins the channel right away - a tx in block 5 does a private write in a collection; org2.Member are eligible - the channel is updated at block 6 by adding CA2 to the MSP of org2 - org2.peer1 has a cert issued by CA2 and only joins thereafter  The relevant log entries are: {noformat}  e  org2.peer1  2019-11-27 09:52:56.009 CET  common.channelconfig  ProposeMSP -> DEBU 1bc Proposing new MSP name:"Org2MSP" ...Â  {noformat} here org2.peer1 has the initial MSP configuration with a single root CA {noformat}  e  org2.peer1  2019-11-27 09:53:03.246 CET  gossip.privdata  StoreBlock -> INFO d8f  testchannel  Received block  5  from buffer ...  e  org2.peer1  2019-11-27 09:53:03.248 CET  committer.txvalidator  Validate -> INFO dcd  testchannel  Validated block  5  in 2ms ...  e  org2.peer1  2019-11-27 09:53:03.248 CET  cauthdsl  deduplicate -> ERRO dd7 Principal deserialization failure (the supplied identity is not valid: x509: certificate signed by unknown authority (possibly because of "x509: ECDSA verification failure" while trying to verify candidate authority certificate "ca.org2.example.com")) for identity 0  e  org2.peer1  2019-11-27 09:53:03.249 CET  gossip.privdata  isEligible -> DEBU df0 Skipping namespace marblesp collection collectionMarbles because we're not eligible for the private data  e  org2.peer1  2019-11-27 09:53:03.249 CET  gossip.privdata  inspectTransaction -> DEBU df1 Peer is not eligible for collection, channel  testchannel , chaincode  marblesp , collection name  collectionMarbles , txID  4868df6308276f82a854ec9332dc6aaeee08e36b2457170d554204475e6d530a  the policy is  &privdata.SimpleCollection{name:"collectionMarbles", accessPolicy:(*cauthdsl.policy)(0xc006885d80), memberOrgs:  string{"Org1MSP", "Org2MSP"}, conf:common.StaticCollectionConfig{Name:"collectionMarbles", MemberOrgsPolicy:(*common.CollectionPolicyConfig)(0xc0068715f0), RequiredPeerCount:1, MaximumPeerCount:2, BlockToLive:0xf4240, MemberOnlyRead:false, XXX_NoUnkeyedLiteral:struct {}{}, XXX_unrecognized:  uint8(nil), XXX_sizecache:0}} . Skipping.{noformat} Â here org2.peer1 processes block 5 and thinks it's not eligible for private data because its channel MSP still only has the initial version with one root CA. This is not a bug: at the time of evaluation, the conclusion we draw is correct. {noformat}  e  org2.peer1  2019-11-27 09:53:03.497 CET  gossip.privdata  StoreBlock -> INFO e2c  testchannel  Received block  6  from buffer  e  org2.peer1  2019-11-27 09:53:03.502 CET  common.channelconfig  ProposeMSP -> DEBU e96 Proposing new MSP name:"Org2MSP" {noformat} here we finally commit the new MSP config, but it's too late because we don't seem to re-evaluate private data for block 5  This scenario highlights two issues: # given that the MSP configuration contains a single fabric_node_ous field, adding a CA to an existing MSP might create problems. Indeed, if any of the OU identifiers (client, peer, admin or orderer) sets the certificate field, the client, peer, admin or orderer certificate issued by one of the two CAs will be invalid after the config update. We might want to extend the certificate field to become a slice. # reconciliation does not seem to kick in in this scenario, possibly because there is no membership change. We might want to extend reconciliation and trigger it also upon channel updates. Looping in  ~Senthil1  and  ~manish-sethi   ></body> </Action>
<Action id="65798" issue="43296" author="denyeart" type="comment" body="Final action not yet determined, but setting FixVersion to v1.4.5 and v2.0.0 for now." created="2019-11-27 11:39:45.0" updateauthor="denyeart" updated="2019-11-27 11:39:45.0"/>
<Action id="65801" issue="43296" author="senthil1" type="comment" created="2019-11-27 12:01:33.0" updateauthor="senthil1" updated="2019-11-27 12:01:33.0"> <body><! CDATA ThanksÂ  ~ales  for a very detailed and clear description.Â   Currently, in the reconciler DB, we store two set of entries for missing entries: one set is for eligible collection and another is for ineligible collect (I.e., the peer is not a member now but can become a member later). The reconciler only retrieves missing pvtData of eligible collections. Whether a private data is eligible or not is an input from gossip.privdata (gossip would know this after applying isEligible() as you pointed out).Â   In the above scenario, though org1.peer1 is actually eligible for the private data present in block 5, we know its eligibility after committing block 6 only. To fix this, after a channel update, we need to call AmMember() for existing collections and appropriately move entries from ineligible to eligible set so that reconciler can fetch the missing private data.  We already call AmMember(), when the chaincode is upgraded and there is a change in collection membership, to check whether the peer has become eligible for a collection. If the peer is found to be a newly added member to an existing collection, the appropriate collection entries from the ineligible set would be moved to eligible set such that reconciler can fetch those data. Hence, I think it would be easy to extend the existing code to handle channel updates as well.Â  ~manish-sethi Â What do you think?Â   ></body> </Action>
<Action id="65811" issue="43296" author="yacovm" type="comment" body="Don&apos;t want to derail the discussion, but - why are we even differentiating between eligible collections and ineligible collections in the storage anyway? Why not check if we&apos;re eligible of everything the block has each time? In the end, all these predicates are reduced to checking *SatisfiesPrincipal* of MSP IDs which is anyway heavily cached." created="2019-11-27 14:06:53.0" updateauthor="yacovm" updated="2019-11-27 14:07:39.0"/>
<Action id="65818" issue="43296" author="senthil1" type="comment" created="2019-11-27 14:32:04.0" updateauthor="senthil1" updated="2019-11-27 14:36:49.0"> <body><! CDATA  ~yacovm  Currently, the gossip coordinator provides input to the ledger on eligible/ineligible missing private data (gossip anyway uses isEligible(), etc... to find this information). We store them in two different namespaces so that it would be easy to query missing private data when the reconciler asks for it.  We move data from ineligible to eligible namespace only when the peer is added as a new member to a collection â this is checked only when the chaincode is upgraded.  ></body> </Action>
<Action id="65820" issue="43296" author="yacovm" type="comment" body="Well it should be upon every config change, because every config changes can change completely how the MSP behaves" created="2019-11-27 14:40:10.0" updateauthor="yacovm" updated="2019-11-27 14:40:10.0"/>
<Action id="65926" issue="43296" author="manish-sethi" type="comment" body=" ~ales  - regarding the reconciliation issue, I feel that this adds to what we had discussed a couple of times but not in enough details - which is that use of policies for determining membership is an overuse - particularly for the self-peer. Do you see any issue If we change the implementation of AmMemberOf function based on peer&apos;s org simply present in the list based on string match." created="2019-12-02 19:33:13.0" updateauthor="manish-sethi" updated="2019-12-02 19:33:13.0"/>
<Action id="65997" issue="43296" author="ales" type="comment" body="I completely agree with that Manish. I think the (only?) reason why we used policies and not simply org IDs was gossip.  ~yacovm ?" created="2019-12-03 09:55:48.0" updateauthor="ales" updated="2019-12-03 09:55:48.0"/>
<Action id="66000" issue="43296" author="senthil1" type="comment" body="Now we have support for the organization unit in membership/endorsement policy? I remember  ~yacovm  citing this as the reason for not doing string matching." created="2019-12-03 10:10:17.0" updateauthor="senthil1" updated="2019-12-03 10:10:17.0"/>
<Action id="66001" issue="43296" author="yacovm" type="comment" created="2019-12-03 10:19:38.0" updateauthor="yacovm" updated="2019-12-03 10:19:38.0"> <body><! CDATA In general I lean against fixing things that aren't broken. Did anyone even try to look what is the performance gain in this proposal? These calls should be heavily cached by the MSP cache.   By using nominal MSP ID comparison, we are breaking free from the MSP abstraction of principles and we can only use collections that are not anonymous. What if in the future we would want to have a collection that doesn't write the membership in the clear?  ></body> </Action>
<Action id="66017" issue="43296" author="manish-sethi" type="comment" created="2019-12-03 15:39:20.0" updateauthor="manish-sethi" updated="2019-12-03 15:40:29.0"> <body><! CDATA  ~yacovm  - if you look at the overall scenario. The other nodes know that you are Org2.peer1 and sending you the blocks and perhaps the private data (using your own piggybacking mechanism). But the poor receiver himself does not recognize that he is what others think he is and discards the data. I don't think that at this stage just add entries for missing ineligible data and retrieve them at a later stageÂ  (which could accumulate a significant data based on when his favorable channel config arrives) is the way.  If you strictly want to use policy evaluation then I would think of an alternate way where this peer should carry all the identities and should choose the one for evaluation based on height (As we do for collection configuration). wdyt?  ></body> </Action>
<Action id="66019" issue="43296" author="yacovm" type="comment" created="2019-12-03 16:12:05.0" updateauthor="yacovm" updated="2019-12-03 16:12:05.0"> <body><! CDATA {quote}But the poor receiver himself does not recognize that he is what others think he is and discards the data{quote}  This is expected due to the fact that its root CA wasn't added to the Blockchain at that height, however - reconciliation should fix it, but it doesn't due to the fact that we don't re-evaluate the namespaces at time of config block commit, as we should have (in my humble opinion :) ) .    {quote} If you strictly want to use policy evaluation then I would think of an alternate way where this peer should carry all the identities and should choose the one for evaluation based on height (As we do for collection configuration). wdyt?{quote}  What do you mean carry all identities? A peer has only a single identity and it doesn't change at any height  ></body> </Action>
<Action id="66024" issue="43296" author="manish-sethi" type="comment" body="What I meant by all identities was that the id from the previous root CA that can be evaluate at the given height for self use of the peer. Otherwise, I am not sure how to comprehend this paradox - In Ale&apos;s example, till block-5, the peer itself has not proper way of evaluating that he is part of the channel and still requesting blocks and hence gets stuck at the private data part... why the special treatment to private data pull - there must be something fundamental wrong here that&apos;s how I see it and hence initially suggested that peer itself should at least know it&apos;s ID. The limitation is our implementation of evaluation of ID that I was focusing more on that than to workaround for the private data (hence the initial suggestion was to simply use the string ID)" created="2019-12-03 16:49:23.0" updateauthor="manish-sethi" updated="2019-12-03 16:51:34.0"/>
<Action id="66025" issue="43296" author="senthil1" type="comment" body="If OU is not the real reason, isn&apos;t the string matching the right way?" created="2019-12-03 17:39:32.0" updateauthor="senthil1" updated="2019-12-03 17:39:32.0"/>
<Action id="66571" issue="43296" author="silveraid" type="comment" body="Just checking in to see if there is any progress have been made." created="2020-01-09 19:58:03.0" updateauthor="silveraid" updated="2020-01-09 19:58:03.0"/>
<Action id="66602" issue="43296" author="denyeart" type="comment" body=" ~silveraid  Yes, the Fabric developers are pursuing Manish&apos;s idea around having the peer that is requesting private data simply use MSPID to determine if it is eligible for private data, rather than using the policy evaluation which fails in the case of a new CA cert." created="2020-01-10 19:59:54.0" updateauthor="denyeart" updated="2020-01-10 19:59:54.0"/>
<Action id="66603" issue="43296" author="yacovm" type="comment" created="2020-01-10 20:03:59.0" updateauthor="yacovm" updated="2020-01-10 20:03:59.0"> <body><! CDATA {quote} Yes, the Fabric developers are pursuing Manish's idea around having the peer that is requesting private data simply use MSPID to determine if it is eligible for private data, rather than using the policy evaluation which fails in the case of a new CA cert.{quote}  Is this being done this way only for the existing collections that are nominal? Because this won't work with anonymous collections...   ></body> </Action>
<Action id="66612" issue="43296" author="denyeart" type="comment" body=" ~yacovm  Yes, intent is for this to be a tactical solution for existing collections.Â   ~ales  is going re-summarize proposal so that we&apos;re all on the same page." created="2020-01-13 05:29:42.0" updateauthor="denyeart" updated="2020-01-13 05:29:42.0"/>
<Action id="66835" issue="43296" author="ales" type="comment" created="2020-01-21 11:54:21.0" updateauthor="ales" updated="2020-01-21 11:54:46.0"> <body><! CDATA Here's a summary of the proposed fix ( ~denyeart ,  ~manish-sethi ,  ~yacovm  feel free to correct/expand):Â the logic a gossip peer uses to determine whether it will send preimage data to another peer will remain unchanged (i.e. still policy-based using channel msps, thus honouring CRLs). The receiving peer on the other hand will determine whether it should accept the preimage just by checking the list of MSP IDs and seeing if its own MSP ID is present. This logic deviates from the current implementation which is currently also policy-based. This deviation can only be enabled provided that the policy is a simple or of org member principals (which should be true in the overwhelming majority of the cases) - else fall back on the current policy-based determination. This deviation thus implemented should guarantee dissemination decisions which are consistent with what the peer currently does, and it should fix the case of this JIRA which is a bug.  In practice, we recommend coding a new _Eligible()_ function which implements the two behaviours (MSP id checking in case of a policy with simple ORs and the current call to _AmMemberOf_ otherwise).  ></body> </Action>
<Action id="67939" issue="43296" author="caod" type="comment" created="2020-02-13 19:21:05.0" updateauthor="caod" updated="2020-02-14 18:31:15.0"> <body><! CDATA 1.4:Â  https://github.com/hyperledger/fabric/pull/626   master:Â  https://github.com/hyperledger/fabric/pull/673   Will cherry-pick to release 2.0 after merged on master  ></body> </Action>
<Action id="67958" issue="43296" author="denyeart" type="comment" created="2020-02-14 14:44:38.0" updateauthor="denyeart" updated="2020-02-14 14:46:14.0"> <body><! CDATA Fix merged in release-1.4 for upcoming v1.4.5. It will also be cherry picked to master and release-2.0.  ~silveraid  Would you be able to try it out on release-1.4? Would be great to get some confirmation prior to releasing v1.4.5.  ></body> </Action>
<Action id="67986" issue="43296" author="silveraid" type="comment" body="Hi, I will test this ass soon as possible, hopefully today." created="2020-02-18 13:50:22.0" updateauthor="silveraid" updated="2020-02-18 13:50:22.0"/>
<Action id="67996" issue="43296" author="denyeart" type="comment" body="Merged in all three branches." created="2020-02-18 21:46:44.0" updateauthor="denyeart" updated="2020-02-18 21:46:44.0"/>
<Action id="69300" issue="43296" author="JIRAUSER19946" type="comment" created="2020-05-20 08:24:43.0" updateauthor="JIRAUSER19946" updated="2020-05-20 08:24:43.0"> <body><! CDATA  ~caod Â Hi, I found a small issue about this change.Â   See:Â Â  https://github.com/hyperledger/fabric/pull/1304   ></body> </Action>
<Action id="69343" issue="43296" author="silveraid" type="comment" body="I have tested the original fix and it seems like working as expected. All of the private data was able to sync over without any problem." created="2020-05-27 20:06:01.0" updateauthor="silveraid" updated="2020-05-27 20:06:01.0"/>
<Action id="69344" issue="43296" author="caod" type="comment" body="Great to hear! Thanks for confirming  ~silveraid !" created="2020-05-27 20:21:15.0" updateauthor="caod" updated="2020-05-27 20:21:15.0"/>
