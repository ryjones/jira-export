<Issue id="12596" key="FAB-295" number="295" project="10002" reporter="rennman" assignee="mastersingh24" creator="rennman" type="10004" summary="TLS environment variables not propagated to membersrc" priority="3" resolution="10000" status="6" created="2016-09-01 15:01:12.0" updated="2018-07-20 14:10:07.0" resolutiondate="2016-09-02 23:35:30.0" votes="0" watches="2" workflowId="36163"> <description><! CDATA I have a 4-peer network with membersrvc. I haven't systematically checked all the environment variables against the config, so I'm concerned there may be others. However, I'm sure that at least these two are problematic:  CORE_SERVER_TLS_CERT_FILE  and CORE_SERVER_TLS_KEY_FILE are not getting picked up by membersrvc. I am forced to code # TLS certificate and key file paths tls: cert: file: /var/hyperledger/production/.membersrvc/tlsca.cert key: file: /var/hyperledger/production/.membersrvc/tlsca.priv in the membersrvc.yaml file  Note that this seems only affect membersrcv. The TLS environment variables for the peer apparently work fine.  If I start with only the TLS environment variables set in membersrvc.yaml, the peers are enabled for TLS, but membersrvc is not. membersrvc generates errors like the following when the peers try to connect: 2016/09/01 14:38:09 transport: http2Server.HandleStreams received bogus greeting from client: "\x16\x03\x01\x00\x9a\x01\x00\x00\x96\x03\x03\xc2'\xc6\x12/Ö \xc1\x04N\xe6B\x8c"  and the peer complains: 2016/09/01 14:57:10 grpc: ClientConn.resetTransport failed to create client transport: connection error: desc = "transport: tls: first record does not look like a TLS handshake"; Reconnecting to "9.42.103.39:30112"    However if I start with the corresponding TLS parms in the membersrvc.yaml file (the single delta) the peers register successfully. 14:49:32.731  crypto  Debugf -> DEBU 037  validator.test_vp0  Registration of node  %!s(crypto.NodeType=2)  with name  test_vp0  completed  For completeness sake, here are all of the start parameters for membersrcv and the peers. The locally built docker images are 'ca' and 'peer'.  In the startup script, membersrvc is started with:  docker -H 9.42.103.17:3376 run --name=vpca --restart=unless-stopped -d -it -p 7054 -p 7051 \ -e CORE_PEER_ID=vpca \ -e CORE_SERVER_TLS_CERT_FILE=/var/hyperledger/production/.membersrvc/tlsca.cert \ -e CORE_SERVER_TLS_KEY_FILE=/var/hyperledger/production/.membersrvc/tlsca.priv \ -e CONFIG_URL=9.42.103.17/config \ -e OBCCA_SERVER_VERSION=1.1 ca start.sh   and the peers:  docker -H 9.42.103.17:3376 run --name=vp0 --restart=unless-stopped -d -it -p 7050 -p 7051 \ -e CORE_OBCPBFT_GENERAL_N=4 \ -e CONFIG_URL=9.42.103.17/config \ -e CORE_VM_ENDPOINT=tcp://9.42.103.17:3376 \ -e CORE_PEER_ID=vp0 \ -e CORE_PEER_ADDRESSAUTODETECT=false \ -e CORE_PEER_LISTENADDRESS=0.0.0.0:7051 \ -e CORE_SECURITY_ENABLED=true \ -e CORE_SECURITY_ENROLLID=test_vp0 \ -e CORE_SECURITY_ENROLLSECRET=MwYpmSRjupbT\ -e CORE_PEER_PKI_ECA_PADDR=9.42.103.39:30100 \ -e CORE_PEER_PKI_TCA_PADDR=9.42.103.39:30100 \ -e CORE_PEER_PKI_TLSCA_PADDR=9.42.103.39:30100 \ -e CORE_VM_DOCKER_TLS_ENABLED=true \ -e CORE_VM_DOCKER_TLS_CA_FILE=/certs/ca.pem \ -e CORE_VM_DOCKER_TLS_CERT_FILE=/certs/cert.pem \ -e CORE_VM_DOCKER_TLS_KEY_FILE=/certs/key.pem \ -e CORE_PEER_TLS=true -e CORE_PEER_TLS_ENABLED=true \ -e CORE_PEER_TLS_CERT_FILE=/certs/tlsca.cert \ -e CORE_PEER_TLS_KEY_FILE=/certs/tlsca.priv \ -e CORE_PEER_PKI_TLS_ENABLED=true \ -e CORE_PEER_PKI_TLS_ROOTCERT_FILE=/certs/tlsca.cert \ -e CORE_PEER_TLS_SERVERHOSTOVERRIDE=tlsca \ -e CORE_PEER_PKI_TLS_SERVERHOSTOVERRIDE=tlsca \-e CORE_SECURITY_PRIVACY=true peer start.sh  ></description> </Issue>
