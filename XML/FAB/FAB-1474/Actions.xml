<Action id="20215" issue="13883" author="latitiah" type="comment" created="2016-12-27 20:16:58.0" updateauthor="latitiah" updated="2016-12-28 16:18:56.0"> <body><! CDATA COP ======= Keith: - FAB-1460: Add COP support for tcert generation - FAB-1147: COP certificate renewal - FAB-1144: COP LDAP integration - FAB-1132: Error messaging from COP CLI - FAB-989: Add license headers to COP files - FAB-809: JSON token authentication support for COP APIs -- REST apis?? JWT-JSON Web Token - FAB-807: Define the proto for trusted root certificates and CRL for config change - FAB-456: Enroll a peer - FAB-454: Start a COP server (CLI)  Saad: - FAB-1294: Extend CFSSL DB accessor to support adding enrollment ID to certificates table - FAB-1086: Incorporate database configuration as part of server config - FAB-983: Add certificate serial number to users table - FAB-943: Integrate tcert process to user DB # Check that the Ecert has been issued to the user having User id. # Whenever a group is created, Pre-Key has to be stored for that group. # Retrieve PreKey for user by passing user id. Here is the flow: a. pass user id to call, it passes back user object b. User object should have group assigned to it. If not make another call to DB to get user group info c. Using user group, retrieve PreKey for the group. - FAB-862: enroll user with username and password to COP server - FAB-455: user registration info must be stored in CFSSL's DB  Ashutosh: - FAB-876: Generate local tcert based on ecert used with the COP service - FAB-874: JSON processing utility: # Read JSON file from file system and coverts it to JSON string # Retrieve values from JSON file in for key in the format a.b # Create golang CertificateSpec object from Input json # Create Attribute map from Attributes that are being supplied in the Request json. - FAB-873: Crypto support for tcert generation -- https://gerrit.hyperledger.org/r/#/c/3281/  Pho: - FAB-836: Generate Token and verify token - FAB-449: COP initializer (CLI) - FAB-392: ACA combined with TLS -- Allen would also know about this  Elli: - FAB-635: document alternative tcert key derivation schemes that can be implemented with standard PKCS#11 calls  Gossip ======= Artem: - FAB-1355: Gossip join channel will use the extraction of the chain id from configuration block -- What is CR 2697? - FAB-1218: Simple gossip communication !!!- FAB-1060: Make KVLedger to implement rawledger interface -- KVLedger implements ValidatedLedger and RawLedger interfaces - FAB-774: Integrate gossip into peer code -- peers should communicate and make state synchronization via gossip protocol - FAB-773: Integration between gossip communication and dynamic set of peers capability -- peers state synchronization and missing block completion - FAB-772: Gossip protocol implementation -- Discovery + Membership of new nodes -- Communication module -- Push/Pull mechanism -- Impersonation prevention - FAB-702/FAB-743: Support block reordering -- Blocks disseminated via gossiping layer from consenters might be delivered out of order, therefore state of gossip protocol should be able to re-order block in appropriate order before delivering further to the ledger. There is a need to create structure to support/allow re-ordering of incoming messages and indicate whenever new block are ready to be transferred to the ledger. - FAB-702/FAB-742: Create and define gossiping node meta object -- new node appears in the network it has to complete the state based on the information of the ledger height in other nodes. This information is disseminated during gossip keep alive mechanism, e.g. each node transfer its meta-state which should include information about ledger. Need to provide an ability to store relevant info within nodes, serialize and de-serialize this information.  Gennady: - FAB-871/FAB-1285: Add client to connect to ordering service to pull blocks and gossip them into the network -- gossip component will send a message for leader election to decide on dedicated ("first-order") peers. These dedicated peers will open connection to the ordering service to receive block via "deliver" protocol and initiate gossip of those block over the peers gossip network - FAB-513: Gossip communication based on hashicorp gossip implementation  Yacov: - FAB-1029: Gossip discovery -- This issue is for code coverage, but there may be something here that we should add for BDD - FAB-1016: Gossip communication send buffers -- This may impact tests for FAB-1218 as well - FAB-922: Gossip layer implementation -- gossip data structs: pull, forwarding, discovery?? - FAB-639: Make gossip communication resiliant to impersonation ??- FAB-636: Gossip demo (https://www.youtube.com/watch?v=qpFzZRNKKp0) - FAB-584: gossip API -- Reflect cryptographic methods that exist in the fabric peer by having parameters of similar type in verifications/signing signatures, i.e- use PKI_id like in fabric peer -- Provide future support for dissemination of other entities apart from blocks and alive messages, such as block validations, and maybe even certificates - FAB-511: gossip security API # Helps connect between the existing fabric message verification API to the gossip implementation by using the same signature methods as the crypto/crypto.go Peer interface  # Adds a PKI_id to the discovery infrasturcture and to the communication layer in order for peers to assert that they have a single connection to peers and that they know the identity of the connecting peers - FAB-484: gossip component data structures -- messageStore -- forwardingBatcher - FAB-483: gossip pull algorithm -- use pull and push messages - FAB-482: gossip discovery - resurrected member isn't added to alive list - FAB-480: gossip discovery ??- FAB-481: logging fix for gossip component    ></body> </Action>
<Action id="20223" issue="13883" author="latitiah" type="comment" created="2016-12-28 21:58:01.0" updateauthor="latitiah" updated="2016-12-28 21:58:01.0"> <body><! CDATA Be sure to test a end to end network test scenario. E.g.: a network has a cop, orderer, 2 peers - add a peer - remove a peer - change the type of orderer - use a cluster of cop servers - use cop server with ldap   ></body> </Action>
