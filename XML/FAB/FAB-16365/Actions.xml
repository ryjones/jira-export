<Action id="63147" issue="41930" author="yacovm" type="comment" body="Why do you think this is related to gossip? How are the peers configured? can you attach logs?" created="2019-08-21 16:47:01.0" updateauthor="yacovm" updated="2019-08-21 16:47:01.0"/>
<Action id="63148" issue="41930" author="yacovm" type="comment" body="also... do the peers see each other?" created="2019-08-21 16:47:39.0" updateauthor="yacovm" updated="2019-08-21 16:47:39.0"/>
<Action id="63149" issue="41930" author="yacovm" type="comment" body="and have all peers joined the channel?  ~denyeart  what does &quot;database not exist&quot; mean?" created="2019-08-21 16:48:19.0" updateauthor="yacovm" updated="2019-08-21 16:48:19.0"/>
<Action id="63163" issue="41930" author="denyeart" type="comment" created="2019-08-21 21:28:47.0" updateauthor="denyeart" updated="2019-08-21 21:28:47.0"> <body><! CDATA "Database does not exist" means the peer can connect to CouchDB but there is no CouchDB database for the channel/chaincode as there should be.  I've never seen this occur intermittently like this.  If peer gets this error when trying to commit a block it will indeed crash after retries are exhausted since it can't proceed with block processing. This is unexpected and needs to be resolved first.  Please attach peer log and couchdb log showing peer start, channel join, chaincode instantiation, and invokes/queries.  ></body> </Action>
<Action id="63166" issue="41930" author="abel23" type="comment" created="2019-08-22 05:28:08.0" updateauthor="abel23" updated="2019-08-22 05:28:08.0"> <body><! CDATA  ~yacovm  I restarted the peers after all of them crashed. I thought it'll be an issue in gossip because if anchor peers of an org has the data, should'nt that be the data the non anchor peers also gets? I was pretty surprised to see peer1 of org1 and peer 1 of org 2 has the same data during query, but is not the same with the anchor peers. I added the second data from peer 1 org 1, that's the same data that comes during querying from peer1 org2. I was thinking how peer 1 org 2 got the data without the anchor peer of org 2 getting that data. While querying data from the anchor peers, data is the same in both of them. They both get and lose data together.   peer0.org1.example.com - anchor peer org 1  peer1.org1.example.com  peer0.org2.example.com - anchor peer org 2  peer1.org2.example.com  Obviously the peers see each other. I saw the logs with gossip msgs. Also if they couldn't see each other, we'll be unable to query the data from other peers right.  Yes, they all have joined the same channel. If you look at the query executed on all the peers, they all are from channel "mychannel" and chaincode "fabcarcc"  I will attach the logs after i try to reproduce this issue. I shut the network down and restarted with a new one to achieve what i was actually trying. :D  ></body> </Action>
<Action id="63180" issue="41930" author="abel23" type="comment" created="2019-08-22 10:47:44.0" updateauthor="abel23" updated="2019-08-22 11:15:03.0"> <body><! CDATA Today i noticed that the *endorsement failure error during query* comes only for chaincodes that are instantiated with policies. I tried the same chaicode without policy and it was working like charm. All peers were getting data perfectly. No querying issues and all. I instantiated another chaincode with policy, that gets this *endorsement failure* during query at different time. {code:java} Error: endorsement failure during query. response: status:500 message:"{\"Error\":\"Marble does not exist: marble1\"}" {code} Sometimes you're able to query. Other times, you end up with this error  peer error logs when executing query. {code:java} 2019-08-22 11:12:29.084 UTC  couchdb  handleRequest -> DEBU ebbbd Error handling CouchDB request. Error:not_found,  Status Code:404,  Reason:missing 2019-08-22 11:12:29.084 UTC  couchdb  ReadDoc -> DEBU ebbbe  mychannel_marblesp$$pcollection$marbles  Document not found (404), returning nil value instead of 404 error 2019-08-22 11:12:29.099 UTC  couchdb  handleRequest -> DEBU ebbc5 Error handling CouchDB request. Error:not_found,  Status Code:404,  Reason:Database does not exist. 2019-08-22 11:12:29.099 UTC  couchdb  ReadDoc -> DEBU ebbc6  mychannel_marblesp$$hcollection$marbles  Document not found (404), returning nil value instead of 404 error 2019-08-22 11:12:29.103 UTC  endorser  ProcessProposal -> ERRO ebbd0  mychannel  bab8f93e  simulateProposal() resulted in chaincode name:"marblesp"  response status 500 for txid: bab8f93ea2a75e82a7506e03ca2bfd6d5b809de1b818c90179c6d829bac3889c 2019-08-22 11:12:29.110 UTC  grpc  infof -> DEBU ebbd5 transport: loopyWriter.run returning. connection error: desc = "transport is closing" 2019-08-22 11:12:29.110 UTC  grpc  infof -> DEBU ebbd4 transport: loopyWriter.run returning. connection error: desc = "transport is closing"  {code} How can a peer lose the document and after some time gets it and then again lose it? Is this expected behaviour? Looks strange to a user.  ></body> </Action>
<Action id="63181" issue="41930" author="abel23" type="comment" body=" ~denyeart  How should i filter the logs using grep?" created="2019-08-22 11:40:40.0" updateauthor="abel23" updated="2019-08-22 11:40:40.0"/>
<Action id="63212" issue="41930" author="denyeart" type="comment" created="2019-08-23 00:05:13.0" updateauthor="denyeart" updated="2019-08-23 00:05:13.0"> <body><! CDATA Again, the root problem is the couchdb "Database does not exist" error. This should not be happening. It causes the retrieve to fail which bubbles up as "Marble does not exist".  Please reproduce with  FABRIC_LOGGING_SPEC=couchdb=debug and attach complete peer log as well as couchdb process log.  ></body> </Action>
<Action id="63267" issue="41930" author="abel23" type="comment" created="2019-08-26 06:32:09.0" updateauthor="abel23" updated="2019-08-26 06:35:39.0"> <body><! CDATA  ~denyeart  Here are the logs of all 4 peers and their corresponding couch db's.   ^peer0_org1_example_com.log   ^ ^couchdb_peer0_org1.log ^  ^^ ^peer1_org1_example_com.log ^^  ^^ ^couchdb_peer1_org1.log ^^   ^peer0_org2_example_com.log    ^couchdb0_peer0_org2.log   ^ ^peer1_org2_example_com.log ^  ^ ^couchdb1_peer1_org2.log ^   Please ask if you guys require more information. Its really difficult to run and experiment on a network that constantly have peer crashes and the querying issues.  ></body> </Action>
<Action id="63506" issue="41930" author="abel23" type="comment" body=" ~denyeart  On a positive note. I did not experience the above when i set up the network in host mode. Looks like it is present only while using docker swarm." created="2019-09-03 08:48:39.0" updateauthor="abel23" updated="2019-09-03 08:48:39.0"/>
<Action id="63981" issue="41930" author="jyellick" type="comment" created="2019-09-23 19:29:14.0" updateauthor="jyellick" updated="2019-09-23 19:29:14.0"> <body><! CDATA  ~denyeart  The requested logs have been posted, but I've not seen any movement.  Is this something someone familiar with the ledger code can look at?   ~abel23  Is this still a problem for you, or has it been resolved?  Until we have some idea of an underlying cause or minimal steps to reproduce, decreasing severity from 'highest'->'medium'.  ></body> </Action>
<Action id="64011" issue="41930" author="abel23" type="comment" body=" ~jyellick  The issues i have posted only occurs when you have the containers running in docker swarm mode.  The issues i reported are FAB-16365, FAB-16367, FAB-16369, FAB-16368. Once i started running the docker containers in host mode, none of these issues appear. THIS IS NOT A PROBLEM FOR ME NOW." created="2019-09-24 07:32:45.0" updateauthor="abel23" updated="2019-09-24 07:32:45.0"/>
<Action id="64092" issue="41930" author="jyellick" type="comment" body="Reported as no longer a problem" created="2019-09-24 18:30:29.0" updateauthor="jyellick" updated="2019-09-24 18:30:29.0"/>
<Action id="64135" issue="41930" author="denyeart" type="comment" created="2019-09-25 19:00:48.0" updateauthor="denyeart" updated="2019-09-25 19:00:48.0"> <body><! CDATA In case we see this problem in the future, here is my assessment from the logs...  Peer logs:  {code:java} CREATE DATABASE SUCCESSFUL {"log":"\u001b 36m2019-08-26 05:07:43.694 UTC  couchdb  handleRequest -\u003e DEBU 208\u001b 0m HTTP Request: PUT /mychannel_marblesp$$hcollection$marbles HTTP/1.1 | Host: couchdb0:5984 | User-Agent: Go-http-client/1.1 | Content-Length: 0 | Accept: application/json | Authorization: Basic dXZpb25pY3M6dXZpb25pY3MxMjM= | Content-Type: application/json | Accept-Encoding: gzip |  | \n","stream":"stderr","time":"2019-08-26T05:07:43.694775949Z"} {"log":"\u001b 34m2019-08-26 05:07:43.927 UTC  couchdb  CreateDatabaseIfNotExist -\u003e INFO 211\u001b 0m Created state database mychannel_marblesp$$hcollection$marbles\n","stream":"stderr","time":"2019-08-26T05:07:43.927333816Z"}  BATCH RETRIEVE USING _ALL_DOCS API SUCCESSFUL {"log":"\u001b 36m2019-08-26 05:07:46.099 UTC  couchdb  BatchRetrieveDocumentMetadata -\u003e DEBU 21e\u001b 0m  mychannel_marblesp$$hcollection$marbles  Entering BatchRetrieveDocumentMetadata()  keys= Xh+Ub+BxXeA2bQnoSAutdnKiNVFXApsN37yVhQ8EVw4= \n","stream":"stderr","time":"2019-08-26T05:07:46.099539466Z"} {"log":"\u001b 36m2019-08-26 05:07:46.099 UTC  couchdb  handleRequest -\u003e DEBU 221\u001b 0m HTTP Request: POST /mychannel_marblesp$$hcollection$marbles/_all_docs?include_docs=true HTTP/1.1 | Host: couchdb0:5984 | User-Agent: Go-http-client/1.1 | Content-Length: 57 | Accept: application/json | Authorization: Basic dXZpb25pY3M6dXZpb25pY3MxMjM= | Content-Type: application/json | Accept-Encoding: gzip |  | \n","stream":"stderr","time":"2019-08-26T05:07:46.100126335Z"} {"log":"\u001b 36m2019-08-26 05:07:46.104 UTC  couchdb  BatchRetrieveDocumentMetadata -\u003e DEBU 226\u001b 0m  mychannel_marblesp$$hcollection$marbles  HTTP Response: HTTP/1.1 200 OK | Transfer-Encoding: chunked | Cache-Control: must-revalidate | Content-Type: application/json | Date: Mon, 26 Aug 2019 05:07:46 GMT | Server: CouchDB/2.2.0 (Erlang OTP/18) | X-Couch-Request-Id: b5dfbf4d4d | X-Couchdb-Body-Time: 0 |  | \n","stream":"stderr","time":"2019-08-26T05:07:46.104534137Z"}  BATCH RETRIEVE USING _ALL_DOCS API SUCCESSFUL {"log":"\u001b 36m2019-08-26 05:07:46.897 UTC  couchdb  BatchRetrieveDocumentMetadata -\u003e DEBU 255\u001b 0m  mychannel_marblesp$$hcollection$marbles  Entering BatchRetrieveDocumentMetadata()  keys= a9kzW+4LAaRXiC45hTQeYYEI2SZAMUb60auSe2/F60E= \n","stream":"stderr","time":"2019-08-26T05:07:46.898943317Z"} {"log":"\u001b 36m2019-08-26 05:07:46.898 UTC  couchdb  handleRequest -\u003e DEBU 25a\u001b 0m HTTP Request: POST /mychannel_marblesp$$hcollection$marbles/_all_docs?include_docs=true HTTP/1.1 | Host: couchdb0:5984 | User-Agent: Go-http-client/1.1 | Content-Length: 57 | Accept: application/json | Authorization: Basic dXZpb25pY3M6dXZpb25pY3MxMjM= | Content-Type: application/json | Accept-Encoding: gzip |  | \n","stream":"stderr","time":"2019-08-26T05:07:46.899137278Z"} {"log":"\u001b 36m2019-08-26 05:07:46.908 UTC  couchdb  BatchRetrieveDocumentMetadata -\u003e DEBU 268\u001b 0m  mychannel_marblesp$$hcollection$marbles  HTTP Response: HTTP/1.1 200 OK | Transfer-Encoding: chunked | Cache-Control: must-revalidate | Content-Type: application/json | Date: Mon, 26 Aug 2019 05:07:46 GMT | Server: CouchDB/2.2.0 (Erlang OTP/18) | X-Couch-Request-Id: 44dc68e903 | X-Couchdb-Body-Time: 0 |  | \n","stream":"stderr","time":"2019-08-26T05:07:46.909039588Z"}  BATCH UPDATE USING _BULK_DOCS API FAILS WITH "Database does not exist". {"log":"\u001b 36m2019-08-26 05:07:46.911 UTC  couchdb  BatchUpdateDocuments -\u003e DEBU 275\u001b 0m  mychannel_marblesp$$hcollection$marbles  Entering BatchUpdateDocuments()  document ids= Xh+Ub+BxXeA2bQnoSAutdnKiNVFXApsN37yVhQ8EVw4=,a9kzW+4LAaRXiC45hTQeYYEI2SZAMUb60auSe2/F60E= \n","stream":"stderr","time":"2019-08-26T05:07:46.911370756Z"} {"log":"\u001b 36m2019-08-26 05:07:46.911 UTC  couchdb  handleRequest -\u003e DEBU 27b\u001b 0m HTTP Request: POST /mychannel_marblesp$$hcollection$marbles/_bulk_docs HTTP/1.1 | Host: couchdb0:5984 | User-Agent: Go-http-client/1.1 | Content-Length: 432 | Accept: application/json | Authorization: Basic dXZpb25pY3M6dXZpb25pY3MxMjM= | Content-Type: application/json | Accept-Encoding: gzip |  | \n","stream":"stderr","time":"2019-08-26T05:07:46.91167221Z"} {"log":"\u001b 36m2019-08-26 05:07:46.962 UTC  couchdb  handleRequest -\u003e DEBU 286\u001b 0m Error handling CouchDB request. Error:not_found,  Status Code:404,  Reason:Database does not exist.\n","stream":"stderr","time":"2019-08-26T05:07:46.962879729Z"} {"log":"panic: error during commit to txmgr: error handling CouchDB request. Error:not_found,  Status Code:404,  Reason:Database does not exist.\n","stream":"stderr","time":"2019-08-26T05:07:46.966323049Z"} {code}   Associated couchdb logs:  {code:java} CREATE DATABASE SUCCESSFUL {"log":" notice  2019-08-26T05:07:43.787400Z nonode@nohost \u003c0.31490.0\u003e 2da5d3b397 couchdb0:5984 10.0.0.13 uvionics PUT /mychannel_marblesp$$hcollection$marbles 201 ok 92\n","stream":"stderr","time":"2019-08-26T05:07:43.788702798Z"}  BATCH RETRIEVE USING _ALL_DOCS API SUCCESSFUL {"log":" notice  2019-08-26T05:07:46.104432Z nonode@nohost \u003c0.31490.0\u003e b5dfbf4d4d couchdb0:5984 10.0.0.13 uvionics POST /mychannel_marblesp$$hcollection$marbles/_all_docs?include_docs=true 200 ok 4\n","stream":"stderr","time":"2019-08-26T05:07:46.104875442Z"}  BATCH RETRIEVE USING _ALL_DOCS API SUCCESSFUL {"log":" notice  2019-08-26T05:07:46.909206Z nonode@nohost \u003c0.31490.0\u003e 44dc68e903 couchdb0:5984 10.0.0.13 uvionics POST /mychannel_marblesp$$hcollection$marbles/_all_docs?include_docs=true 200 ok 9\n","stream":"stderr","time":"2019-08-26T05:07:46.909712262Z"}  BATCH UPDATE USING _BULK_DOCS API CALLS NEVER SHOWS UP IN COUCHDB LOG...   NEXT REQUEST IS 4 MINUTES LATER WHEN PEER RESTARTS {"log":" notice  2019-08-26T05:11:34.274003Z nonode@nohost \u003c0.4718.1\u003e dec4076caf couchdb0:5984 10.0.0.20 uvionics GET / 200 ok 28\n","stream":"stderr","time":"2019-08-26T05:11:34.274451318Z"} {code}  So, the database was created and existed, a few APIs against the database worked, and then the next API call to the database failed with "Database does not exist". On the couchdb side, we see no error for the failing API call, and then messages resume 4 minutes later when the peer is restarted.  If this problem can be reproduced again, we would need to open an issue against CouchDB and ask in what scenarios a "database does not exist" error may be returned when the database does in fact exist.  ></body> </Action>
