<Action id="56706" issue="36952" author="swetharepakula" type="comment" created="2019-02-06 00:16:47.0" updateauthor="swetharepakula" updated="2019-02-06 00:16:47.0"> <body><! CDATA As part of this, it might make sense to make an address package so that both fab3 and evmcc can import it.  This would be fab3 could start generating addresses without querying the evmcc and if we make changes to address generation changes would only have to occur once.  ></body> </Action>
<Action id="63528" issue="36952" author="mhbauer" type="comment" created="2019-09-03 20:20:27.0" updateauthor="mhbauer" updated="2019-09-03 20:20:27.0"> <body><! CDATA We now have an address package that consists of one shared IdentityToAddr function.  Since it takes bytes and returns bytes, can we hash the bytes we're directly given? What do we gain by doing a sort of validation of the form of the bytes? Is it that the public key can be signed multiple times, thus the container it's in could be different?  Looking at the code, is this simply getting rid of the x509.MarshalPKIXPublicKey() call?  ></body> </Action>
<Action id="63529" issue="36952" author="mhbauer" type="comment" created="2019-09-03 20:32:04.0" updateauthor="mhbauer" updated="2019-09-03 20:32:04.0"> <body><! CDATA Looking at the possible formats of public keys, it's possible this pkix format is the best as it can contain multiple different types of public key.  Granted there's only 2, rsa and ecdsa.  Why did we think this was a problem?   ></body> </Action>
<Action id="63531" issue="36952" author="swetharepakula" type="comment" body="Not a problem, more thinking about whether we should follow what ethereum did which is the sum of the public key, not the pkix format. There is no particular need for us to do this. More a possibility if we want to match ethereum more closely. Also could relate conversations about wallet support." created="2019-09-03 23:01:04.0" updateauthor="swetharepakula" updated="2019-09-03 23:01:04.0"/>
