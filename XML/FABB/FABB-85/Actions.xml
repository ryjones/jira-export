<Action id="42452" issue="29092" author="yacovm" type="comment" created="2018-04-02 23:30:58.0" updateauthor="yacovm" updated="2018-04-02 23:32:07.0"> <body><! CDATA {code} func (mdf ccMetadataFetcher) ChaincodeMetadata(channel string, cc string) *chaincode.InstantiatedChaincode { 	return mdf.Called().Get(0).(*chaincode.InstantiatedChaincode) } {code} Oops... that should have had a pointer receiver.  As for the state_test - It should go away if we make the mock.Mock a pointer inside the struct it is embedded in, and replace  {code} mc := &mockCommitter{} {code} with: {code} mc := &mockCommitter{Mock:&mock.Mock{}} {code}  Side comment: I thought we had vet checks in CI?   ></body> </Action>
<Action id="42458" issue="29092" author="sykesm" type="comment" body="https://gerrit.hyperledger.org/r/20103" created="2018-04-03 12:45:10.0" updateauthor="sykesm" updated="2018-04-03 12:45:10.0"/>
<Action id="42459" issue="29092" author="sykesm" type="comment" created="2018-04-03 12:48:02.0" updateauthor="sykesm" updated="2018-04-03 12:48:02.0"> <body><! CDATA >Â  Side comment: I thought we had vet checks in CI?  So did I. I'm learning that our CI is incredibly ad-hoc and continues to to diverge from the implied "make" that was adopted by fabric. Doc builds and smoke tests and unit tests and whatever else are all independent targets with wrapper scripts. Inevitably some of the basics will get dropped.  At some point I'll dig into the ci machinery to see what's really there and what's not. For now, local builds are popping up tons of lint / vet issues.  ></body> </Action>
<Action id="42729" issue="29092" author="rameshthoomu" type="comment" body=" ~sykesm  as part of unit-tests verification, CI script executes `make linter` and `make unit-tests`. Once https://jira.hyperledger.org/browse/FAB-9426 is fixed, will add make basics-checks and check-deps. Please suggest me if you prefer to add more checks." created="2018-04-09 15:45:12.0" updateauthor="rameshthoomu" updated="2018-04-09 15:45:31.0"/>
