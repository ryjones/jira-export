<Issue id="13056" key="STL-11" number="11" project="10001" reporter="flyingtiger" assignee="flyingtiger" creator="flyingtiger" type="10002" summary="Proposal of participant registration improvement in STL" priority="2" resolution="10000" status="10001" created="2016-10-19 09:59:03.0" updated="2017-05-04 21:38:16.0" resolutiondate="2017-04-11 16:22:10.0" votes="0" watches="2" workflowId="13056"> <description><! CDATA Hi everyone, here is my thought about the identity management in STL, I think we can change the current process to the following proposed one.  The proposed process of participant registration in STL:  1. The participant generates a private-public key pair: `{private_key, publick_key}` 2. Add a `PublickKey` field in the current Participant register transaction  ``` update = { 'UpdateType': 'RegisterParticipant', 'Name': name, 'PublicKey': public_key, 'Description': description, } ```  or, use `transaction "PublicKey"  = public_key` 3. Convert the register transaction to cbor format. 4. Paticipant uses the `private_key` to sign the register transaction to get a `signature`, then `transaction "Signature"  = signature`. 5. Paticipant sends to the validator the participant register transaction via a transaction message. 6. After receiving the message, validator extracts the participant register transaction and obtains the `public_key`, `signature` and the cbor binary of the transaction. 7. Validator validates the signature of participant register transaction with the `public_key`. If validated, i.e. the cbor binary of the transaction matches the signature, the transaction is put in `PendingTransactions`, waiting for being added to the ledger (after consensus) 8. When the participant register transaction is added to the ledger, a `ParticipantObject` is generated and put to the store  ``` class Register(transaction.Update): def apply(self, store, txn): pobj = ParticipantObject(txn.Identifier) pobj.PublicKey= self.PublicKey pobj.Address = PubKeyToAddress(self.PublicKey) .... store txn.Identifier  = pobj.dump() ```  9. In step 7, if the validator checks the signature is not valid for the transaction, the participant register transaction fails and a failure message is returned.  Of course, If using ECDSA , the participant generates a private-public key pair: `{private_key, publick_key}` and invokes PubToAddress with publick_key to get an address, we could replace the `PublickKey` with an 'Address' field in the current Participant register transaction in step 2.  Then in step 7, the validator could recover a recovered_public_key with the cbor binary of the transaction and the signature, invokes PubKeyToAddress with the recovered_public_key to get an address, compares the address and the value of 'Address' field, if equal, passes the verification of signature.   ></description> </Issue>
