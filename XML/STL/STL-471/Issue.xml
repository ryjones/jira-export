<Issue id="18277" key="STL-471" number="471" project="10001" reporter="cintel" assignee="cintel" creator="cintel" type="10004" summary="Debug post to batches&amp;wait=&lt;X&gt; not returning promptly for the SupplyChain client" priority="3" resolution="10000" status="10001" created="2017-06-18 15:52:57.0" updated="2017-06-20 16:05:43.0" resolutiondate="2017-06-20 16:05:43.0" votes="0" watches="1" workflowId="18282"> <description><! CDATA When the supplychain client posts with a wait parameter to the REST API batches it does not return untill the time out expires even though the batch commits.      Details from the Slack chat about the issue:     ```Creating latest_validator_1 ... done Creating latest_restapi_1 ... done Creating latest_supplychain_unit_test_1 ... done Attaching to latest_validator_1, sawtooth-tp_settings-default, latest_tp_supplychain_python_1, latest_restapi_1, latest_supplychain_unit_test_1 validator_1 | writing file: /etc/sawtooth/keys/validator.priv validator_1 | writing file: /etc/sawtooth/keys/validator.pub validator_1 | creating key directory: /root/.sawtooth/keys validator_1 | writing file: /root/.sawtooth/keys/my_key.priv validator_1 | writing file: /root/.sawtooth/keys/my_key.pub validator_1 | Generated config-genesis.batch validator_1 | Processing config-genesis.batch... validator_1 | Generating /var/lib/sawtooth/genesis.batch validator_1 |  00:19:01.534 INFO path  Skipping path loading from non-existent config file: /etc/sawtooth/path.toml validator_1 |  00:19:01.535 INFO validator  Skipping validator config loading from non-existent config file: /etc/sawtooth/validator.toml validator_1 |  00:19:01.535 INFO keys  Loading signing key: /etc/sawtooth/keys/validator.priv validator_1 |  00:19:01.537 INFO cli  config  path : config_dir = "/etc/sawtooth" validator_1 |  00:19:01.538 INFO cli  config  path : key_dir = "/etc/sawtooth/keys" validator_1 |  00:19:01.538 INFO cli  config  path : data_dir = "/var/lib/sawtooth" validator_1 |  00:19:01.538 INFO cli  config  path : log_dir = "/var/log/sawtooth" validator_1 |  00:19:01.538 WARNING cli  Network key pair is not configured, Network communications between validators will not be authenticated or encrypted. validator_1 |  00:19:01.538 DEBUG core  database file is /var/lib/sawtooth/merkle-00.lmdb validator_1 |  00:19:01.539 DEBUG core  state delta store file is /var/lib/sawtooth/state-deltas-00.lmdb validator_1 |  00:19:01.541 DEBUG core  block store file is /var/lib/sawtooth/block-00.lmdb validator_1 |  00:19:01.548 DEBUG selector_events  Using selector: ZMQSelector validator_1 |  00:19:01.549 INFO interconnect  Listening on tcp://eth0:4004 validator_1 |  00:19:01.549 DEBUG dispatch  Added send_message function for connection ServerThread validator_1 |  00:19:01.551 DEBUG genesis  genesis_batch_file: /var/lib/sawtooth/genesis.batch validator_1 |  00:19:01.551 DEBUG genesis  block_chain_id: not yet specified validator_1 |  00:19:01.551 INFO genesis  Producing genesis block from /var/lib/sawtooth/genesis.batch validator_1 |  00:19:01.552 DEBUG genesis  Adding 1 batches validator_1 |  00:19:01.567 DEBUG executor  no transaction processors registered for processor type sawtooth_settings: 1.0: application/protobuf validator_1 |  00:19:01.574 INFO executor  Waiting for transaction processor (sawtooth_settings, 1.0, application/protobuf) validator_1 |  00:19:01.611 DEBUG interconnect  ServerThread receiving TP_REGISTER_REQUEST message: 125 bytes validator_1 |  00:19:01.617 INFO processor_handlers  registered transaction processor: connection_id=f099cda6b11521e5d8669f59dc2d227a3066ef682512d8d738e0006c91ae7aaf19b017664f2cd1ab78ffeafdb99754a5b4321cec78203a81c73b2ddf749f5679, family=sawtooth_settings, version=1.0, encoding=application/protobuf, namespaces= '000000'  validator_1 |  00:19:01.621 DEBUG interconnect  ServerThread sending TP_PROCESS_REQUEST to b'2bd9fdded71b4ba1' validator_1 |  00:19:01.630 DEBUG interconnect  ServerThread sending TP_REGISTER_RESPONSE to b'2bd9fdded71b4ba1' validator_1 |  00:19:01.647 DEBUG interconnect  ServerThread receiving TP_STATE_GET_REQUEST message: 177 bytes validator_1 |  00:19:01.655 DEBUG tp_state_handlers  GET:  ('000000a87cb5eafdcca6a8cde0fb0dec1400c5ab274474a6aa82c12840f169a04216b7', None)  validator_1 |  00:19:01.660 DEBUG interconnect  ServerThread sending TP_STATE_GET_RESPONSE to b'2bd9fdded71b4ba1' validator_1 |  00:19:01.676 DEBUG interconnect  ServerThread receiving TP_STATE_GET_REQUEST message: 177 bytes validator_1 |  00:19:01.677 DEBUG tp_state_handlers  GET:  ('000000a87cb5eafdcca6a8cde0fb0dec1400c5ab274474a6aa82c1918142591ba4e8a7', None)  validator_1 |  00:19:01.680 DEBUG interconnect  ServerThread sending TP_STATE_GET_RESPONSE to b'2bd9fdded71b4ba1' validator_1 |  00:19:01.683 DEBUG interconnect  ServerThread receiving TP_STATE_GET_REQUEST message: 177 bytes validator_1 |  00:19:01.699 DEBUG tp_state_handlers  GET:  ('000000a87cb5eafdcca6a8cde0fb0dec1400c5ab274474a6aa82c12840f169a04216b7', None)  validator_1 |  00:19:01.704 DEBUG interconnect  ServerThread sending TP_STATE_GET_RESPONSE to b'2bd9fdded71b4ba1' validator_1 |  00:19:01.706 DEBUG interconnect  ServerThread receiving TP_STATE_SET_REQUEST message: 293 bytes validator_1 |  00:19:01.707 DEBUG tp_state_handlers  SET:  '000000a87cb5eafdcca6a8cde0fb0dec1400c5ab274474a6aa82c12840f169a04216b7'  validator_1 |  00:19:01.713 DEBUG interconnect  ServerThread sending TP_STATE_SET_RESPONSE to b'2bd9fdded71b4ba1' validator_1 |  00:19:01.715 DEBUG interconnect  ServerThread receiving TP_PROCESS_RESPONSE message: 69 bytes validator_1 |  00:19:01.720 DEBUG interconnect  message round trip: TP_PROCESS_RESPONSE 0.0964360237121582 validator_1 |  00:19:01.722 DEBUG genesis  Produced state hash 63250521e8448d4aabe007198b2be3cdf2a498c30a745514e8fc81d5a63b0d3c for genesis block. validator_1 |  00:19:01.726 INFO genesis  Genesis block created: f57d5892(0, S:63250521, P:00000000) validator_1 |  00:19:01.726 DEBUG chain_id_manager  writing block chain id validator_1 |  00:19:01.727 DEBUG genesis  Deleting genesis data. validator_1 |  00:19:01.727 DEBUG selector_events  Using selector: ZMQSelector validator_1 |  00:19:01.728 INFO interconnect  Listening on tcp://eth0:8800 validator_1 |  00:19:01.728 DEBUG dispatch  Added send_message function for connection ServerThread validator_1 |  00:19:01.732 INFO chain  Chain controller initialized with chain head: f57d5892(0, S:63250521, P:00000000) validator_1 |  00:19:01.734 INFO publisher  Now building on top of block: f57d5892(0, S:63250521, P:00000000) validator_1 |  00:19:01.891 DEBUG interconnect  ServerThread receiving TP_REGISTER_REQUEST message: 144 bytes validator_1 |  00:19:01.893 INFO processor_handlers  registered transaction processor: connection_id=cb5834ba71895c24d3883423cc71365b2b55ef2c2ab01cda03cc3ca51d3efc1fb4d40ff658c3557628e4b4d065e6422c4547ebe030dee300cf1d58c0dd7e9d5e, family=sawtooth_supplychain, version=0.5, encoding=application/protobuf, namespaces= '160343', '466f14', '8728e8'  validator_1 |  00:19:01.893 DEBUG interconnect  ServerThread sending TP_REGISTER_RESPONSE to b'763b0695f1394257' tp_supplychain_python_1 |  00:19:01.882 DEBUG selector_events  Using selector: ZMQSelector tp_supplychain_python_1 |  00:19:01.895 INFO core  register attempt: OK sawtooth-tp_settings-default |  00:19:00 DEBUG selector_events  Using selector: ZMQSelector restapi_1 |  00:19:01.984 DEBUG selector_events  Using selector: EpollSelector sawtooth-tp_settings-default |  00:19:01 INFO core  register attempt: OK sawtooth-tp_settings-default |  00:19:01 DEBUG core  received message of type: TP_PROCESS_REQUEST restapi_1 |  00:19:01.985 INFO rest_api  Creating handlers for validator at tcp://validator:4004 restapi_1 |  00:19:01.987 INFO rest_api  Starting REST API on restapi:8080 sawtooth-tp_settings-default |  00:19:01 INFO handler  Setting setting sawtooth.settings.vote.authorized_keys changed from None to 02845303a294114701414a14dd9f3ca54be691523c94ca1074417241daa3a5ad66 supplychain_unit_test_1 | INFO:test_supplychain_integration:_agent_create: 0256f9f2891a05594b932353b4e56a20bec120a7bffed83eb37dd7705587070332 supplychain_unit_test_1 | INFO:root:agent_create 0256f9f2891a05594b932353b4e56a20bec120a7bffed83eb37dd7705587070332 16034371e3ee7dcce5b5ad8fc29fa478bb337a26cc8665744a0443f6ae19e75d020158 supplychain_unit_test_1 | INFO:sawtooth_supplychain.client:http://restapi:8080/batches?wait=10 supplychain_unit_test_1 | INFO:requests.packages.urllib3.connectionpool:Starting new HTTP connection (1): restapi restapi_1 |  00:19:02.447 INFO rest_api  Request abfade: "POST /batches?wait=10" from 172.18.0.6 restapi_1 |  00:19:02.448 DEBUG route_handlers  Sending CLIENT_BATCH_SUBMIT_REQUEST request to validator validator_1 |  00:19:02.450 DEBUG interconnect  ServerThread receiving CLIENT_BATCH_SUBMIT_REQUEST message: 1042 bytes validator_1 |  00:19:02.454 DEBUG interconnect  ServerThread sending TP_PROCESS_REQUEST to b'763b0695f1394257' tp_supplychain_python_1 |  00:19:02.455 DEBUG core  received message of type: TP_PROCESS_REQUEST tp_supplychain_python_1 |  00:19:02.455 DEBUG handler  SupplyChainHandler.apply action: AGENT_CREATE tp_supplychain_python_1 |  00:19:02.456 DEBUG handler  _agent_create: 0256f9f2891a05594b932353b4e56a20bec120a7bffed83eb37dd7705587070332 16034371e3ee7dcce5b5ad8fc29fa478bb337a26cc8665744a0443f6ae19e75d020158 validator_1 |  00:19:02.457 DEBUG interconnect  ServerThread receiving TP_STATE_GET_REQUEST message: 177 bytes validator_1 |  00:19:02.457 DEBUG tp_state_handlers  GET:  ('16034371e3ee7dcce5b5ad8fc29fa478bb337a26cc8665744a0443f6ae19e75d020158', None)  validator_1 |  00:19:02.458 DEBUG interconnect  ServerThread sending TP_STATE_GET_RESPONSE to b'763b0695f1394257' validator_1 |  00:19:02.461 DEBUG interconnect  ServerThread receiving TP_STATE_SET_REQUEST message: 259 bytes validator_1 |  00:19:02.462 DEBUG tp_state_handlers  SET:  '16034371e3ee7dcce5b5ad8fc29fa478bb337a26cc8665744a0443f6ae19e75d020158'  validator_1 |  00:19:02.464 DEBUG interconnect  ServerThread sending TP_STATE_SET_RESPONSE to b'763b0695f1394257' validator_1 |  00:19:02.468 DEBUG interconnect  ServerThread receiving TP_PROCESS_RESPONSE message: 69 bytes validator_1 |  00:19:02.469 DEBUG interconnect  message round trip: TP_PROCESS_RESPONSE 0.01513814926147461 validator_1 |  00:19:02.554 INFO publisher  Claimed Block: 641d07a6(1, S:98a859f6, P:f57d5892) validator_1 |  00:19:02.555 INFO publisher  Block publishing is suspended until new chain head arrives. validator_1 |  00:19:02.555 DEBUG chain  Block received: 641d07a6(1, S:98a859f6, P:f57d5892) validator_1 |  00:19:02.556 INFO chain  Starting block validation of : 641d07a6(1, S:98a859f6, P:f57d5892) validator_1 |  00:19:02.558 DEBUG interconnect  ServerThread sending TP_PROCESS_REQUEST to b'763b0695f1394257' tp_supplychain_python_1 |  00:19:02.559 DEBUG core  received message of type: TP_PROCESS_REQUEST tp_supplychain_python_1 |  00:19:02.560 DEBUG handler  SupplyChainHandler.apply action: AGENT_CREATE tp_supplychain_python_1 |  00:19:02.561 DEBUG handler  _agent_create: 0256f9f2891a05594b932353b4e56a20bec120a7bffed83eb37dd7705587070332 16034371e3ee7dcce5b5ad8fc29fa478bb337a26cc8665744a0443f6ae19e75d020158 validator_1 |  00:19:02.562 DEBUG interconnect  ServerThread receiving TP_STATE_GET_REQUEST message: 177 bytes validator_1 |  00:19:02.562 DEBUG tp_state_handlers  GET:  ('16034371e3ee7dcce5b5ad8fc29fa478bb337a26cc8665744a0443f6ae19e75d020158', None)  validator_1 |  00:19:02.563 DEBUG interconnect  ServerThread sending TP_STATE_GET_RESPONSE to b'763b0695f1394257' validator_1 |  00:19:02.566 DEBUG interconnect  ServerThread receiving TP_STATE_SET_REQUEST message: 259 bytes validator_1 |  00:19:02.566 DEBUG tp_state_handlers  SET:  '16034371e3ee7dcce5b5ad8fc29fa478bb337a26cc8665744a0443f6ae19e75d020158'  validator_1 |  00:19:02.567 DEBUG interconnect  ServerThread sending TP_STATE_SET_RESPONSE to b'763b0695f1394257' validator_1 |  00:19:02.569 DEBUG interconnect  ServerThread receiving TP_PROCESS_RESPONSE message: 69 bytes validator_1 |  00:19:02.571 INFO dev_mode_consensus  Choose new fork 641d07a6: New fork head switches consensus to DevMode validator_1 |  00:19:02.571 INFO chain  on_block_validated: 641d07a6(1, S:98a859f6, P:f57d5892) validator_1 |  00:19:02.572 INFO chain  Chain head updated to: 641d07a6(1, S:98a859f6, P:f57d5892) validator_1 |  00:19:02.572 INFO publisher  Now building on top of block: 641d07a6(1, S:98a859f6, P:f57d5892) validator_1 |  00:19:02.575 DEBUG chain  Verify descendant blocks: 641d07a6(1, S:98a859f6, P:f57d5892) (  ) validator_1 |  00:19:02.575 DEBUG state_delta_processor  Publishing state delta from 641d07a6(1, S:98a859f6, P:f57d5892) validator_1 |  00:19:02.575 INFO chain  Finished block validation of: 641d07a6(1, S:98a859f6, P:f57d5892) validator_1 |  00:19:02.576 DEBUG interconnect  message round trip: TP_PROCESS_RESPONSE 0.011431694030761719 validator_1 |  00:19:12.454 DEBUG interconnect  ServerThread sending CLIENT_BATCH_SUBMIT_RESPONSE to b'3ac55e5d8d8b469d' restapi_1 |  00:19:12.455 DEBUG route_handlers  Received CLIENT_BATCH_SUBMIT_RESPONSE response from validator with status OK restapi_1 |  00:19:12.457 INFO rest_api  Response abfade: 201 status, 175B size, in 10.009s supplychain_unit_test_1 | INFO:test_supplychain_integration:\{ supplychain_unit_test_1 | "link": "http://restapi:8080/batches?id=c22a771cd7125d440f62dc4849ddfe4ca23100af7775517f635b5a436e2789516fc02691c06e793fb47057ae3276ffd1d5469c78f3f46afd8ad04718da88b332" supplychain_unit_test_1 | } supplychain_unit_test_1 | .set username: root supplychain_unit_test_1 | set url: 127.0.0.1:8080 supplychain_unit_test_1 | writing file: /root/.sawtooth/keys/root.priv supplychain_unit_test_1 | writing file: /root/.sawtooth/keys/root.addr supplychain_unit_test_1 | supplychain_unit_test_1 | -------------------------------------------------------------------Removing latest_supplychain_unit_test_1 ... done Removing latest_restapi_1 ... done Removing sawtooth-tp_settings-default ... done Removing latest_tp_supplychain_python_1 ... done Removing latest_validator_1 ... done Removing network latest_default Add Comment Click to expand inline 131 lines  cintel  5:21 PM   @zac-intel there you go, there are still some of my debug logs in there. I am tracking down an issue with my address generation.  mitchell-intel  5:39 PM   Oh well, I tried  cintel  5:44 PM   :slightly_smiling_face:  zac-intel  7:54 PM   @cintel Everything appears to be working in these logs   7:55   Unless I'm missing something   7:55   restapi_1                |  00:19:02.447 INFO     rest_api  Request  abfade: "POST /batches?wait=10" from 172.18.0.6 restapi_1                |  00:19:02.448 DEBUG    route_handlers  Sending CLIENT_BATCH_SUBMIT_REQUEST request to validator validator_1              |  00:19:02.450 DEBUG    interconnect  ServerThread receiving CLIENT_BATCH_SUBMIT_REQUEST message: 1042 bytes   7:56   validator_1              |  00:19:02.575 INFO     chain  Finished block validation of: 641d07a6(1, S:98a859f6, P:f57d5892) validator_1              |  00:19:02.576 DEBUG    interconnect  message round trip: TP_PROCESS_RESPONSE 0.011431694030761719 validator_1              |  00:19:12.454 DEBUG    interconnect  ServerThread sending CLIENT_BATCH_SUBMIT_RESPONSE to b'3ac55e5d8d8b469d' restapi_1                |  00:19:12.455 DEBUG    route_handlers  Received CLIENT_BATCH_SUBMIT_RESPONSE response from validator with status OK restapi_1                |  00:19:12.457 INFO     rest_api  Response abfade: 201 status, 175B size, in 10.009s (edited)   7:58   Ah   7:58   I see, the response came back 10 seconds after the block was validated  cintel  8:00 PM   yes, that is exactly what I am seeing. In these logs I submitted with http://restapi:8080/batches?wait=10  zac-intel  8:05 PM   Works fine on master, using intkey and the sawtooth CLI   8:07   Although someone is sending a bizarre number of state requests   8:07   It's not going through the REST API   8:09   I guess that's just the Intkey TP doing it's thing  zac-intel  8:12 PM   added this Plain Text snippet: Validator Logs   03:06:21.468 DEBUG interconnect  ServerThread receiving CLIENT_BATCH_SUBMIT_REQUEST message: 3038 bytes  03:06:21.473 DEBUG interconnect  ServerThread sending CLIENT_BATCH_SUBMIT_RESPONSE to b'f8e79be9bbca42b0'  03:06:21.475 DEBUG interconnect  ServerThread sending TP_PROCESS_REQUEST to b'102ca0fcdc2848c8' . . . Add Comment Click to expand inline 23 lines  zac-intel  8:13 PM   added this Plain Text snippet: REST API Logs   03:06:21.465 INFO rest_api  Request a7d001: "POST /batches" from 127.0.0.1  03:06:21.466 DEBUG route_handlers  Sending CLIENT_BATCH_SUBMIT_REQUEST request to validator  03:06:21.477 DEBUG route_handlers  Received CLIENT_BATCH_SUBMIT_RESPONSE response from validator with status OK  03:06:21.477 INFO rest_api  Response a7d001: 202 status, 311B size, in 0.012s  03:06:21.487 INFO rest_api  Request a7d0db: "POST /batch_status?wait=10" from 127.0.0.1 Add Comment Click to expand inline 8 lines  zac-intel  8:14 PM   added this Plain Text snippet: CLI Commands  $ intkey create_batch Writing to batches.intkey... $ sawtooth batch submit -f batches.intkey --wait 10 batches: 2, batch/sec: 48.52917729684074 All batches committed in 0.157849 sec Add Comment  zac-intel  8:14 PM   Let me double check and make sure the POST wait works as well  cintel  8:15 PM   There is not wait parameter on that post in my logs it reports as 'restapi_1                |  00:19:02.447 INFO     rest_api  Request  abfade: "POST /batches?wait=10" from 172.18.0.6'   8:15   oops I missed the 2nd post in your logs.   8:16   That is to batch_status though, not batches   8:17   an off topic question, why is batch_status a post and not a get?  zac-intel  8:17 PM   Yes, CLI uses a wait on batch_status   8:17   Sam mechanism though   8:18   And I just did a POST manually and it worked fine   8:18   $ curl --request POST \ >     --header "Content-Type: application/octet-stream" \ >     --data-binary @batches.intkey \ >     "http://localhost:8080/batches?wait=10" \{  "link": "http://localhost:8080/batches?id=9a8d32b69d4a14ce49e40c411bdc8ed8befa966acd26a71959fde8355963d34c17fe51e9aa04a011f9bd1d1b6435c9c55637b4d248010adb94efecdf9d3b4325,5435e3cf7f9e2486fe62fed8757a36ec5426dffef010d55a2cdb053ba5df8d5b38deab0bcb8c89bda0710cd6c7dc8fff0f3ea93e81a1f6842a7243bd57e0ba95" }   8:19    03:16:49.300 INFO     rest_api  Request  079ccf: "POST /batches?wait=10" from 127.0.0.1  03:16:49.302 DEBUG    route_handlers  Sending CLIENT_BATCH_SUBMIT_REQUEST request to validator  03:16:49.657 DEBUG    route_handlers  Received CLIENT_BATCH_SUBMIT_RESPONSE response from validator with status OK  03:16:49.658 INFO     rest_api  Response 079ccf: 201 status, 306B size, in 0.358s   8:20   Side note: /batch_status accepts both a GET and a POST   8:20   The GET accepts a list of ids in a comma-separated query parameter id=a,b,c   8:21   However, since our id's are 128 characters, and URLs top out at 2048, that limits you to requesting the status of about 15 batches at a time  cintel  8:21 PM   got it.  zac-intel  8:21 PM   So the POST is a work around   8:22   you send a JSON body  "a","b","c"  and you can check on as many ids as you like   8:23   It is semantically inaccurate though   8:23   Anywho, your problem is weird   8:24   Your TP shouldn't be able to touch the wait mechanism   8:24   I would pull from master and make sure you have pristine validator code   8:25   If that's not it, maybe something weird with Docker?   8:25   I dunno though, by the logs the validator is clearly just hanging out, not doing anything   8:26   It's not like it's getting lost in some Docker middle-man or something  cintel  8:33 PM   yeah, I have a lot of docker wrangling going on.   8:33   I agree my TP should not be able to affect that mechanism.   8:34   I'll shoot you a link to by branch once I get it cleaned up a bit more.  zac-intel  8:36 PM   If you want to take a look in your validator, the relevant code is here:  • https://github.com/hyperledger/sawtooth-core/blob/master/validator/sawtooth_validator/journal/block_store.py#L138  • https://github.com/hyperledger/sawtooth-core/blob/master/validator/sawtooth_validator/state/client_handlers.py#L515  • https://github.com/hyperledger/sawtooth-core/blob/master/validator/sawtooth_validator/state/client_handlers.py#L534  ></description> </Issue>
