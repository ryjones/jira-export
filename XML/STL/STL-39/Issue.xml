<Issue id="16196" key="STL-39" number="39" project="10001" reporter="amundson" assignee="pschwarz" creator="amundson" type="10006" summary="Startup without initializing genesis data can be confusing" priority="3" resolution="10000" status="10001" created="2017-05-02 21:57:24.0" updated="2017-05-17 21:12:05.0" resolutiondate="2017-05-15 18:39:12.0" votes="0" watches="2" workflowId="16196"> <description><! CDATA During development, it is common to startup a single validator.  This requires two steps prior to staring the validator: a) create a validator key with 'sawtooth admin keygen' and b) create data for the genesis block with 'sawtooth admin genesis'.  If a user using the single validator forgets step (b), the validator will currently startup and start peering.  The validator is essentially waiting for a genesis block before it will start publishing it's own blocks.  Peering happens in one thread while the journal is running in it's own threads.  (This maybe an imprecise description of the validator's behavior, as the implementation is fairly detailed.)  Current output in this situation looks like this:  {noformat} ./bin/validator -vv --public-uri tcp://localhost:8800/ {noformat}  {noformat} ...  19:51:14.832 DEBUG    genesis  genesis_batch_file: None  19:51:14.832 DEBUG    genesis  chain_head: None False  19:51:14.833 DEBUG    genesis  block_chain_id: None  19:51:14.833 DEBUG    genesis  Requires genesis: False  19:51:14.834 DEBUG    selector_events  Using selector: ZMQSelector  19:51:14.835 DEBUG    dispatch  Added send_message function for connection ServerThread  19:51:14.838 INFO     chain  Chain controller initialized with chain head: None  19:51:14.838 INFO     publisher  Now building on top of block: None ... {noformat}  If the user mistakenly forgot the step and is not starting another validator, this debug output does not help.  In fact, the 'None' statements look buggy as it looks like str(a) where 'a is None' in python slipped through and got logged.  (This is intentional currently, so it's not actually buggy.)  Recommend we have the genesis code identify this situation and log an INFO-level message with: 'No genesis block is present, resulting in no initial chain head; block publishing is disabled until a chain head is updated' or similar and removing the logging statements where 'None' occurs (or changing them for clarity).  ></description> </Issue>
