<Issue id="16527" key="STL-181" number="181" project="10001" reporter="tom barnes" creator="tom barnes" type="10005" summary="Address dynamic analysis requirements and suggestions" priority="3" resolution="10000" status="10001" created="2017-05-09 23:02:54.0" updated="2021-03-01 20:52:52.0" resolutiondate="2021-03-01 20:52:52.0" votes="0" watches="2" workflowId="16528"> <description><! CDATA In the Analysis section, the following suggestions/requirements are unmet:  “It is SUGGESTED that at least one dynamic analysis tool be applied to any proposed major production release of the software before its release.” * Recommend addition of OpenStack Syntribos for fuzz testing Sawtooth REST interface:  https://wiki.openstack.org/wiki/Security#Syntribos_-_Python_API_security_testing_tool   "It is SUGGESTED that if the software produced by the project includes software written using a memory-unsafe language (e.g., C or C++), then at least one dynamic tool (e.g., a fuzzer or web application scanner) be routinely used in combination with a mechanism to detect memory safety problems such as buffer overwrites. If the project does not produce software written in a memory-unsafe language, choose "not applicable"" * Recommend fuzzing the PoET enclave interfaces to see if it can be induced to circumvent any of the protections it provides for wait time generation, wait certificate generation, and signup. * Note: Dynamic analysis of transaction families implemented in c/c++ falls to the transaction family developer.  "It is SUGGESTED that the software produced by the project include many run-time assertions that are checked during dynamic analysis."  "All medium and high severity exploitable vulnerabilities discovered with dynamic code analysis MUST be fixed in a timely way after they are confirmed." * Recommend that a process or policy be defined for resolution of vulnerabilities discovered via dynamic analysis     ></description> </Issue>
