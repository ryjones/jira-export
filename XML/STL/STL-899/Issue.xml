<Issue id="24478" key="STL-899" number="899" project="10001" reporter="tom barnes" assignee="delventhalz" creator="tom barnes" type="10005" summary="CORS configuration in Sawtooth REST API" priority="3" resolution="10000" status="10001" created="2017-11-27 17:28:33.0" updated="2017-11-28 17:03:51.0" resolutiondate="2017-11-28 17:03:51.0" votes="0" watches="2" workflowId="24478"> <description><! CDATA Reported by Graham at Nettitude:  As part of the Nettitude assessment of Sawtooth, I’ve been looking at how the REST API handles CORS.  This is configured to be fully permissive: whenever a pre-flight request containing an ‘Origin’ field is received, the value of that field is reflected back as ‘Access-Control-Allow-Origin’.  For most web services this would be a clear-cut security weakness, however I would not go that far in this case because: * It is clearly not an oversight (the code goes out of its way to allow the requests). * So far as I’ve been able to determine, the Sawtooth REST API does not itself make any use of cookies, HTTP authentication, or any other tokens that could be targeted by an XSRF attack.  However, I have identified two residual concerns: * I found some instructions at  https://sawtooth.hyperledger.org/docs/core/releases/latest/sysadmin_guide/rest_auth_proxy.html  for putting the REST API behind an authenticating proxy. My understanding is that proxy servers vary somewhat in terms of which headers they preserve, but there seems to be at least a possibility that XSRF could be an issue. * It does give attackers a useful extra option if attacks can be launched via the web browsers of unwitting third parties.  For these reasons I would recommend that the CORS behaviour should at least be configurable, and preferably set to non-permissive by default. I’d also recommend using a wildcard (‘*’) in preference to reflecting the origin field, unless there is a good reason not to, as this is less susceptible to XSRF.  ></description> </Issue>
