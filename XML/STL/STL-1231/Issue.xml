<Issue id="29986" key="STL-1231" number="1231" project="10001" reporter="delventhalz" creator="delventhalz" type="10006" summary="Add method for creating private key from hex to signing contexts" priority="3" status="10100" created="2018-05-06 20:22:07.0" updated="2019-05-21 14:33:41.0" votes="0" watches="5" workflowId="29993"> <description><! CDATA The ideal workflow for the signing modules is to use the `_create_context_` method of _CryptoFactory_ with the string "_secp256k1_" in order to create a _Secp256k1Context_ which can generate keys and provide signing functionality. The advantage of using a string and not directly instantiating the underlying classes is it is very config friendly, and could be easily expanded to other signing algorithms in the future.  Unfortunately, this workflow currently only works if generating a _new_ private key using the `new_random_private_key` method. There is no method on _Context_ objects to generate a new _PrivateKey_ from either existing bytes or a hex string. This means that the _Secp256k1PrivateKey_ class must be imported and instantiated directly in order to use its `_from_hex_` method with existing private keys. This defeats the purpose of having a _CryptoFactory_.  I propose adding a few new methods to complete the workflow, and make it possible to use the _CryptoFactory_ as intended:  PrivateKey.from_bytes(bytes) -> PrivateKey  Context.new_private_key_from_bytes(self, bytes) -> PrivateKey  Context.new_private_key_from_hex(self, string) -> PrivateKey  ></description> </Issue>
