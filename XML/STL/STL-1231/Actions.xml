<Action id="43966" issue="29986" author="amundson" type="comment" created="2018-05-07 03:58:32.0" updateauthor="amundson" updated="2018-05-07 03:58:32.0"> <body><! CDATA This suggestion is problematic in several respects.  First, storage formats are algorithm specific (bytes, hex, pem, wif). Thus, (to use Rust terms) the Context trait and other general traits should not mandate all algorithms implement them. It is also not necessary to allocate a Context to load a private key. We had wif tied tightly across the API in an earlier signing library iteration; it was gross.  Second, PrivateKey as a trait provides no implementation. Even if we tried to do this as a function, "new_private_key_from_bytes(bytes) -> PrivateKey", this does not work at all, since we can not derive from bytes which implementation of PrivateKey should be returned. We intend support of implementations of the signing API not directly part of the signing library, which makes this harder (create_context() is the sole exception).  ></body> </Action>
<Action id="43969" issue="29986" author="delventhalz" type="comment" created="2018-05-07 05:22:22.0" updateauthor="delventhalz" updated="2018-05-07 05:22:22.0"> <body><! CDATA I picked hex and bytes because they seemed agnostic. While hex is preferable, I am happy to go with just bytes if hex seems too opinionated. However, loading a previously generated private key is a fundamental aspect of any use case I've implemented. Without that feature, any workflow is not usable in the applications I've built.  Not sure I follow the second point. The implementation would come from the Context: _CryptoFactory.create_context('secp256k1') -> Secp256k1Context_ _Secp256k1Context.new_private_key_from_bytes(privkey) -> Secp256k1PrivateKey_  Currently I am skipping the CryptoFactory entirely because I have to hardcode the private key instance anyway: _secp256k1.Secp256k1Context() -> Secp256k1Context_ _secp256k1.Secp256k1PrivateKey.from_hex(privkey) -> Secp256k1PrivateKey_  ></body> </Action>
<Action id="45474" issue="29986" author="dan.middleton@intel.com" type="comment" created="2018-06-04 15:15:09.0" updateauthor="dan.middleton@intel.com" updated="2018-06-04 15:15:09.0"> <body><! CDATA I gather that it just wasn't clear from the original Description that you were extending the existing context / factory pattern.  I don't see any issue with adding the two proposed methods to the context API.    ~amundson  with  ~delventhalz 's clarification do you still see any issue with the proposed methods?  ></body> </Action>
