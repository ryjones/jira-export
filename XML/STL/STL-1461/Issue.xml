<Issue id="34457" key="STL-1461" number="1461" project="10001" reporter="kirkwood" assignee="mfford" creator="kirkwood" type="10004" summary="Raft panics on invalid transaction" priority="3" status="10100" created="2018-10-05 15:05:47.0" updated="2019-05-21 14:34:01.0" votes="1" watches="4" workflowId="45858"> <environment><! CDATA Tested with several transaction processors and several consensus modules, both in Docker on Linux and on real hardware. The simplest thing to do is run a single-node raft and issue any invalid transaction to a transaction processor. Here's a {{panic.yaml}} that demonstrates it using the  Configuring and Deploying|https://sawtooth.hyperledger.org/docs/raft/nightly/master/configuring_deploying.html  instructions, assuming you add {{shell}} to the list of images to build from {{sawtooth-core}}. {code:java} version: "3.6"  networks: rest_apis: external: name: raft_rest_apis  volumes: raft_shared_data: external: true  services:  shell: image: sawtooth-shell volumes: - raft_shared_data:/shared_data networks: default: rest_apis: command: "bash -c \"\ sawadm keygen root && mkdir -p $$HOME/.sawtooth/keys && mv /etc/sawtooth/keys/root.* $$HOME/.sawtooth/keys; \ export TARGET=$$(ls /shared_data/rest_apis -1 | head -n 1); \ sleep 10; \ intkey set foo 0 --url http://$${TARGET}:8008; \ intkey set foo 0 --url http://$${TARGET}:8008 \"" {code} h3. Docker Environment {code:java} $ docker version Client: Version:           18.06.1-ce API version:       1.38 Go version:        go1.10.3 Git commit:        e68fc7a Built:             Tue Aug 21 17:24:51 2018 OS/Arch:           linux/amd64 Experimental:      falseServer: Engine: Version:          18.06.1-ce API version:      1.38 (minimum version 1.12) Go version:       go1.10.3 Git commit:       e68fc7a Built:            Tue Aug 21 17:23:15 2018 OS/Arch:          linux/amd64 Experimental:     false {code} {code:java} $ docker info Containers: 141 Running: 7 Paused: 0 Stopped: 134 Images: 378 Server Version: 18.06.1-ce Storage Driver: overlay2 Backing Filesystem: extfs Supports d_type: true Native Overlay Diff: true Logging Driver: json-file Cgroup Driver: cgroupfs Plugins: Volume: local Network: bridge host macvlan null overlay Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog Swarm: inactive Runtimes: runc Default Runtime: runc Init Binary: docker-init containerd version: 468a545b9edcd5932818eb9de8e72413e616e86e runc version: 69663f0bd4b60df09991c08812a60108003fa340 init version: fec3683 Security Options: apparmor seccomp Profile: default Kernel Version: 4.15.0-34-generic Operating System: Ubuntu 18.04.1 LTS OSType: linux Architecture: x86_64 CPUs: 12 Total Memory: 125.8GiB Name: gauss ID: BUT7:NWH3:QFAF:F3ZN:5EM2:G5VL:UNGD:HOXU:DI3S:VZ5C:DPEZ:SE4R Docker Root Dir: /var/lib/docker Debug Mode (client): false Debug Mode (server): false Username: kirkwood Registry: https://index.docker.io/v1/ Labels: Experimental: false Insecure Registries: 127.0.0.0/8 Live Restore Enabled: falseWARNING: No swap limit support {code} {code:java} $ docker-compose version docker-compose version 1.22.0, build f46880fe docker-py version: 3.4.1 CPython version: 3.6.6 OpenSSL version: OpenSSL 1.1.0f  25 May 2017 {code}    ></environment> <description><! CDATA When an invalid transaction is generated, sawtooth-raft panics when it tries to finalize the current block. For example, if you issue two {{set}} commands against the same key in {{intkey}}, the integer key transaction processor tells you, "no", and then Raft dies: {code:java} intkey-tp-python_1  |  2018-10-05 06:38:17.963 DEBUG    handler  Setting "foo" to 0 intkey-tp-python_1  |  2018-10-05 06:38:17.963 WARNING  core  Invalid Transaction Verb is "set", but already exists: Name: foo, Value 0 raft_1              | thread 'main' panicked at 'Failed to finalize block: InvalidState("Cannot finalize block in current state")', src/node.rs:205:29 {code}    ></description> </Issue>
