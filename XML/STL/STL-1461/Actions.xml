<Action id="52113" issue="34457" author="sushisource" type="comment" created="2018-10-11 18:01:29.0" updateauthor="sushisource" updated="2018-10-11 18:02:52.0"> <body><! CDATA FYI we (reporter/watchers) think we've fixed this. Although we're not sure we've done it 100% properly so any feedback would be much appreciated.  What needed to happen, seemingly, was a call to summarize_block on the Service when checking to see if a block was ready to be finalized/published (and waiting for it to tell is the block was in some other state than not ready).  Here's a diff: {code:java} diff --git a/sawtooth-raft/src/node.rs b/sawtooth-raft/src/node.rs index ae161c1dfb5229305fd91b2f00677236c831c868..03a281dfc0d77ea94ac9b904166270c1e1e4fee8 100644 --- a/sawtooth-raft/src/node.rs +++ b/sawtooth-raft/src/node.rs @@ -18,6 +18,8 @@ use std::collections::{HashMap, HashSet}; use std::iter::FromIterator; use std::time::{Duration, Instant}; +use std::thread::sleep; +use std::time;  use protobuf::{self, Message as ProtobufMessage, ProtobufError}; use raft::{ @@ -200,6 +202,18 @@ impl<S: StorageExt> SawtoothRaftNode<S> { } _ => false, } { +            let mut printed_summary_wait = false; +            let mut summary = self.service.summarize_block(); +            while let Err(Error::BlockNotReady) = summary { +                // We must wait until the block is ready before proceeding to finalization +                if !printed_summary_wait { +                    printed_summary_wait = true; +                    debug!("Block is not ready for finalization, waiting."); +                } +                sleep(time::Duration::from_millis(300)); +                summary = self.service.summarize_block(); +            } + match self.service.finalize_block(vec!  ) { Ok(block_id) => { debug!("Leader({:?}) transition to Publishing block {:?}", peer_id_to_raft_id(&self.peer_id), block_id); {code}    ></body> </Action>
<Action id="52167" issue="34457" author="ltseeley" type="comment" body="Hi! Thanks for reporting this bug. Have you been able to consistently reproduce this error by submitting invalid intkey transactions?" created="2018-10-12 15:31:14.0" updateauthor="ltseeley" updated="2018-10-12 15:31:14.0"/>
<Action id="52171" issue="34457" author="kirkwood" type="comment" body="Yes, we have. It might not be obvious, but there&apos;s a YAML file for the {{adhoc}} stuff up in the environment section in this ticket that demonstrates it. It&apos;s not specific to {{intkey}}, though; any invalid txn from any TP seems to do it, and we first noticed it with our own. Following the latest  Configuring and Deploying|https://sawtooth.hyperledger.org/docs/raft/nightly/master/configuring_deploying.html  instructions and using the {{intkey}} shell in the {{adhoc}} YAML above is just the simplest repro I could come up with." created="2018-10-12 15:52:54.0" updateauthor="kirkwood" updated="2018-10-12 15:52:54.0"/>
