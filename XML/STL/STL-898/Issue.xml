<Issue id="24477" key="STL-898" number="898" project="10001" reporter="tom barnes" assignee="adamludvik" creator="tom barnes" type="10005" summary="Replay attack protection in Sawtooth challenge authentication" priority="3" resolution="10000" status="10001" created="2017-11-27 17:25:17.0" updated="2017-12-22 17:03:09.0" resolutiondate="2017-12-22 17:03:09.0" votes="0" watches="2" workflowId="24477"> <description><! CDATA Reported by Graham at Nettitude:  As part of the Nettitude assessment of Sawtooth, I’ve been looking at whether the Challenge authentication method provides adequate protection against replay attacks.  It appears to go some way towards this: when an AuthorizationChallengeRequest is received, the validator replies with an AuthorizationChallengeResponse containing a 64-byte random payload. The client must reply AuthorizationChallengeSubmit containing a signed copy of the random payload. Since the payload changes for each exchange, the signature should too.  The only problem is that the validator does not appear to keep a copy of the random payload that was sent. Instead it trusts the copy of the payload sent back by the client, without checking that it is the same as the challenge issued.  I haven’t currently developed this as far as a practical exploit, and it is possible there is something I’ve missed. For example, even without recording the challenge, you could conceivably make the exchange secure by recording previously-used payloads. However I have looked, and have not found anything of that nature.  Grateful for a view as to whether there are any mitigations that I’ve overlooked, or if this is a potential vulnerability  ></description> </Issue>
