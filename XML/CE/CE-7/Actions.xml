<Action id="21458" issue="14056" author="baohua" type="comment" created="2017-03-11 08:55:01.0" updateauthor="baohua" updated="2017-06-06 08:12:08.0"> <body><! CDATA There is an internship proposal on letting cello use k8s as one of the underly infrastructure.      https://wiki.hyperledger.org/internship/project_ideas   Nikhil Chawla <chawlanikhil24@gmail.com>  ></body> </Action>
<Action id="25461" issue="14056" author="baohua" type="comment" created="2017-06-06 02:41:54.0" updateauthor="baohua" updated="2017-06-06 08:10:49.0"> <body><! CDATA I suppose it is not very difficult to simply run fabric containers on top of k8s, as k8s already has provided many useful features to container services, like the deployment, daemonset, controllers..  The basic idea is to write some driver agent in Cello, to handle the requests from dashboard, and convert them to the underly platform (e.g., swarm, k8s) API calls.  Besides, there will be states maintained in Cello, like the blockchain status.  Key challenges may include: # Choose appropriate overlay network in k8s, e.g., flannel or calico, or the merging canal. (MUST). Hence we should provide some best-practice k8s config. # Let fabric start up chaincode container through k8s's API, which requires the support from fabric code. (BETTER TO HAVE) # Storage support. (FUTURE)  ></body> </Action>
<Action id="25733" issue="14056" author="chawlanikhil24" type="comment" created="2017-06-08 12:56:56.0" updateauthor="chawlanikhil24" updated="2017-06-08 12:56:56.0"> <body><! CDATA The work to setup fabric on Kubernetes has begun. The initial step of the development is :  Convert Current docker-compose yml files to Kubernetes manifests.  This will allow to run Fabric on top of Kubernetes.  ></body> </Action>
<Action id="27318" issue="14056" author="chawlanikhil24" type="comment" created="2017-06-25 05:25:40.0" updateauthor="chawlanikhil24" updated="2017-06-25 05:25:40.0"> <body><! CDATA Fabric 0.6 is ready to run on top of kubernetes. I've prepared that .yaml files which will deploy,  # hyperledger-membersrvc # hyperledger-cli # hyperledger-root # hyperledger-peer1 # hyperledger-peer2 # hyperledger-peer3  These files can be found at this   link|https://github.com/chawlanikhil24/hyperledger-fabric-k8s  .   Currently, I am using weave-net for kubernetes overlay network. Will consider flannel or canal later, once the K8s cluster is in a running state.  Now, we've a cli-pod which is linked with peers and root, so whatever API instructions Cello need to provide, Cli will be endpoint for those instructions.  Please do share some reviews and problems in deploying the cluster.   ></body> </Action>
<Action id="27321" issue="14056" author="baohua" type="comment" created="2017-06-26 01:19:54.0" updateauthor="baohua" updated="2017-06-26 01:19:54.0"> <body><! CDATA Great, and please remember we will have fabric v1.0 in highest priority.  Look forward to seeing there's patchset to demo support fabric v0.6 atop k8s, certainly!  Thanks!  ></body> </Action>
<Action id="27328" issue="14056" author="chawlanikhil24" type="comment" created="2017-06-26 05:38:50.0" updateauthor="chawlanikhil24" updated="2017-06-26 05:38:50.0"> <body><! CDATA Yupp, I am on the job of fabric-1.0 over kubernetes.  Also, making a patchset to demo support fabric-0.6 over K8s.  ></body> </Action>
<Action id="27347" issue="14056" author="baohua" type="comment" body="https://gerrit.hyperledger.org/r/#/c/11139/" created="2017-06-26 11:59:01.0" updateauthor="baohua" updated="2017-06-26 11:59:01.0"/>
<Action id="27348" issue="14056" author="baohua" type="comment" created="2017-06-26 12:00:58.0" updateauthor="baohua" updated="2017-06-26 12:00:58.0"> <body><! CDATA Btw, feel free to create sub-task under this feature.  Then it would more clear to track the progress.  e.g., Add manifests for k8s.  ></body> </Action>
<Action id="27485" issue="14056" author="chawlanikhil24" type="comment" created="2017-06-28 11:45:51.0" updateauthor="chawlanikhil24" updated="2017-06-28 11:46:40.0"> <body><! CDATA Finally I've created the CLUSTER of Fabric 1.0 , using the reference files in  yeasy|https://github.com/yeasy/docker-compose-files/tree/master/hyperledger/1.0  files.     The K8s manifests can be found at this  link|https://github.com/chawlanikhil24/hyperledger-fabric-k8s  .  Few problems are still there, like, when I ran the commands mentioned in this  docs|https://github.com/yeasy/docker-compose-files/blob/master/hyperledger/1.0/docs/docker-compose-1peer-usage.md  , the following is generated in the cli-container. The image of the logs is attached in the comment.  !logs-fabric-cli.png!  ></body> </Action>
<Action id="27487" issue="14056" author="baohua" type="comment" body="Nice progress, and feel free to ref to the doc at https://github.com/hyperledger/fabric/blob/master/examples/e2e_cli/end-to-end.rst" created="2017-06-28 11:57:19.0" updateauthor="baohua" updated="2017-06-28 11:57:19.0"/>
<Action id="27758" issue="14056" author="chawlanikhil24" type="comment" created="2017-07-03 00:48:18.0" updateauthor="chawlanikhil24" updated="2017-07-03 00:48:54.0"> <body><! CDATA One more Issue I'd like to raise is the naming conventions used, for-example, {{.Hostname}}.{{.Domain}}” = orderer.example.com .   Kubernetes, doesn't allow "." to be used in naming of DNS. In K8s, orderer.example.com has to be defined as orderer-example-com/orderer-service.  But, the official documention of Fabric, promotes the earlier convention. I suggest to make a generic documentation which is applicable for both swarm and K8s and other possible orchesterators like Mesos, DC/OS and so on.  ></body> </Action>
<Action id="27759" issue="14056" author="baohua" type="comment" created="2017-07-03 01:59:48.0" updateauthor="baohua" updated="2017-07-03 01:59:48.0"> <body><! CDATA In k8s, it supports service name like srv1.local.com in dns record?  see https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/.  ></body> </Action>
<Action id="27765" issue="14056" author="chawlanikhil24" type="comment" created="2017-07-03 03:17:09.0" updateauthor="chawlanikhil24" updated="2017-07-03 03:17:09.0"> <body><! CDATA To maintain a Pod-to-Pod communication, we need to create "services" in K8s for the "deployments". Deployments control the replication of "Pods" . The DNS records mentioned in the above mentioned link are the DNS records generated by K8s dynamically i.e. at runtime. So, we can't control those DNS records and hence can't maintain the pod-to-pod communication.   To solve the above purpose, "Services" are defined by the user, which points to the ClusterIP. Now, check the same link which you mentioned in the previous comment and check the .yaml file of a service. You will notice that the service name is defined as: "default-subdomain"     !Service-ex.png!  ></body> </Action>
<Action id="27766" issue="14056" author="baohua" type="comment" body=" ~grapebaba : any comments?" created="2017-07-03 03:32:01.0" updateauthor="baohua" updated="2017-07-03 03:32:01.0"/>
<Action id="29129" issue="14056" author="luke_chen" type="comment" body="How about use namespaces(k8s) to maintain organizations(Fabric) ?  like we have members such as peers, cli and ca belong to org1.example.com, so we binding all the k8s resources(pods, service, PV .etc) of those members  into namespace “org1.example.com”, however, due to k8s doesn&apos;t support &apos;.&apos; and capitalized letter,  we  need to change  &quot;org1.example.com&quot; to &quot;org1-example-com&quot;   " created="2017-07-28 06:38:39.0" updateauthor="luke_chen" updated="2017-07-28 06:38:39.0"/>
<Action id="29130" issue="14056" author="baohua" type="comment" created="2017-07-28 06:43:42.0" updateauthor="baohua" updated="2017-07-28 06:43:42.0"> <body><! CDATA  ~Luke_Chen  technically, we can do that, however, can u elaborate the pros/cons for the proposal?  In fabric, org is more like some membership group sharing same trust base; while namespace in k8s is to isolate resources. I'm not sure if it's natural to map them together.  ></body> </Action>
<Action id="29131" issue="14056" author="luke_chen" type="comment" body="Sure, I am working on it" created="2017-07-28 06:58:05.0" updateauthor="luke_chen" updated="2017-07-28 06:58:05.0"/>
