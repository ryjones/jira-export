<Action id="65665" issue="43371" author="jyellick" type="comment" created="2019-11-20 19:26:21.0" updateauthor="jyellick" updated="2019-11-20 19:26:21.0"> <body><! CDATA This is not a security issue.  It's actually a bug in the MockStub implementation.  You can see here: https://github.com/hyperledger/fabric/blob/2c3282e99bb9e9bf6b65be596c32353feae5c9dc/core/chaincode/shim/mockstub.go#L350  Basically, the mockstub is looking up the chaincode to route to in a map, and not verifying that it actually resolved one.  Since this code is mock, testing code, and is never used in production, this strikes me as a regular bug, not a security issue.  That being said, this chaincode is really a pretty bad example, and could use some attention or removal.  It's bad practice to allow the user to supply the target chaincode to route to, instead, the chaincode should have an explicit whitelist or similar.  Removing the security tag and adding it to the overall backlog.  ></body> </Action>
<Action id="65669" issue="43371" author="wlahti" type="comment" created="2019-11-20 19:53:41.0" updateauthor="wlahti" updated="2019-11-20 19:53:41.0"> <body><! CDATA FYI: this chaincode (and all other chaincodes that used to live in the "examples" folder) have been removed from fabric master. Also, the shim and this mockstub have moved to the fabric-chaincode-go repo:  https://github.com/hyperledger/fabric-chaincode-go/blob/master/shimtest/mockstub.go.|https://github.com/hyperledger/fabric-chaincode-go/blob/master/shimtest/mockstub.go  Jason's comment above about the mockstub applies there.     ></body> </Action>
<Action id="65677" issue="43371" author="ryjones" type="comment" body="These issues were reported by @guardstrike on H1. Once they log in to Jira I will set them as the reporter" created="2019-11-20 20:53:58.0" updateauthor="ryjones" updated="2019-11-20 20:53:58.0"/>
<Action id="65695" issue="43371" author="ryjones" type="comment" body=" ~guardstrike  there may still be a payout for these issues. We need  ~dhuseby  to weigh in. Security issues in samples are explicitly in-bounds." created="2019-11-21 16:05:53.0" updateauthor="ryjones" updated="2019-11-21 16:05:53.0"/>
<Action id="65699" issue="43371" author="denyeart" type="comment" body=" ~ryjones  It&apos;s not a security issue in a sample. It is a bug in a utility that people can use to unit test a chaincode, it has nothing to do with a production runtime environment." created="2019-11-21 16:38:08.0" updateauthor="denyeart" updated="2019-11-21 16:38:08.0"/>
<Action id="65872" issue="43371" author="guardstrike" type="comment" created="2019-12-02 04:18:48.0" updateauthor="guardstrike" updated="2019-12-02 04:18:48.0"> <body><! CDATA  ~ryjones , Thanks all of your details explanations. We use mockstub to test those chaincodes lived in "examples", and found part of issues are from the mockstub code bug, and some others are from chaincodes.   Consider a pieces of chaincodes in  https://github.com/hyperledger/fabric/blob/release-1.4/examples/chaincode/go/map/map.go : {code} func (t *SimpleChaincode) queryPrivate(stub shim.ChaincodeStubInterface, args   string) pb.Response { 	collection := args 0  	query := args 1  	keysIter, err := stub.GetPrivateDataQueryResult(collection, query) 	if err != nil { 		return shim.Error(fmt.Sprintf("query operation on private data failed. Error accessing state: %s", err)) 	} 	defer keysIter.Close()  	var keys   string 	for keysIter.HasNext() { 		response, iterErr := keysIter.Next() 		if iterErr != nil { 			return shim.Error(fmt.Sprintf("query operation on private data failed. Error accessing state: %s", err)) 		} 		keys = append(keys, response.Key) 	}  	jsonKeys, err := json.Marshal(keys) 	if err != nil { 		return shim.Error(fmt.Sprintf("query operation on private data failed. Error marshaling JSON: %s", err)) 	}  	return shim.Success(jsonKeys) } {code} There is no args length check while using args 0 , this will lead to "runtime error: index out of range" issue . The test code is: {code} package main import ( "testing" "github.com/hyperledger/fabric/core/chaincode/shim" ) func TestExampleMap_Bug5(t *testing.T) { scc := new(SimpleChaincode) stub := shim.NewMockStub("map", scc) stub.MockInvoke("1",     byte{  byte("queryPrivate")}) //{"Args": "queryPrivate" } } {code} BTW, We see that the samples issues are in-bounds, so we submitted the report here :). It is all right if we remove the samples in next release, otherwise we should make the samples codes much better.  ></body> </Action>
<Action id="66066" issue="43371" author="jyellick" type="comment" body="Agreed that any sample chaincodes should properly check arg lengths before dereferencing.  From a security perspective, such a mistake is mostly a DoS vector, as the chaincode crashing affects the liveness of that chaincode, but it will be restarted.  Fortunately, authorization checks are made well before the chaincode processing begins, so to exploit such a DoS vector requires minimally that the attacker be authorized to invoke the chaincode." created="2019-12-04 19:33:17.0" updateauthor="jyellick" updated="2019-12-04 19:33:17.0"/>
