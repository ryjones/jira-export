<Action id="62893" issue="41790" author="wlahti" type="comment" body=" ~bestbeforetoday  Can you take a look at this? " created="2019-08-14 14:12:07.0" updateauthor="wlahti" updated="2019-08-14 14:12:07.0"/>
<Action id="62999" issue="41790" author="wlahti" type="comment" body="Chatted with Mark. A CR was recently merged to revert another CR that he believes was the root cause of this failure:  https://gerrit.hyperledger.org/r/c/fabric-sdk-java/+/32959 " created="2019-08-16 14:31:38.0" updateauthor="wlahti" updated="2019-08-16 14:31:38.0"/>
<Action id="63089" issue="41790" author="vijaypunugubati" type="comment" created="2019-08-20 13:34:19.0" updateauthor="vijaypunugubati" updated="2019-08-20 13:34:19.0"> <body><! CDATA I see the above CR was merged, but still, this error is observed every day builds and it is consistent. {code:java} /00:39:24.942  ERROR  Tests run: 50, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 850.785 s <<< FAILURE! - in org.hyperledger.fabric.sdkintegration.IntegrationSuite 00:39:24.943  ERROR  setup(org.hyperledger.fabric.sdkintegration.End2endIT)  Time elapsed: 48.793 s  <<< FAILURE! 00:39:24.943 org.junit.ComparisonFailure: expected:< github.com/example_cc > but was:<  > 00:39:24.943 	at org.hyperledger.fabric.sdkintegration.End2endIT.blockWalker(End2endIT.java:1011) 00:39:24.943 	at org.hyperledger.fabric.sdkintegration.End2endIT.runFabricTest(End2endIT.java:231) 00:39:24.943 	at org.hyperledger.fabric.sdkintegration.End2endIT.setup(End2endIT.java:190) 00:39:24.943  00:39:25.408  INFO   00:39:25.408  INFO  Results: 00:39:25.408  INFO   00:39:25.408  ERROR  Failures:  00:39:25.408  ERROR    End2endIT.setup:190->runFabricTest:231->blockWalker:1011 expected:< github.com/example_cc > but was:<  > 00:39:25.408  INFO   00:39:25.408  ERROR  Tests run: 50, Failures: 1, Errors: 0, Skipped: 0/ code placeholder {code}  ></body> </Action>
<Action id="63304" issue="41790" author="vijaypunugubati" type="comment" created="2019-08-26 18:22:49.0" updateauthor="vijaypunugubati" updated="2019-08-26 18:22:49.0"> <body><! CDATA It hit's on *fabric-ca*-merge-end-2-end-x86_64 {code:java} /00:40:46.522  ERROR  Tests run: 50, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 986.997 s <<< FAILURE! - in org.hyperledger.fabric.sdkintegration.IntegrationSuite 00:40:46.522  ERROR  setup(org.hyperledger.fabric.sdkintegration.End2endIT)  Time elapsed: 78.127 s  <<< FAILURE! 00:40:46.522 org.junit.ComparisonFailure: expected:< github.com/example_cc > but was:<  > 00:40:46.523 	at org.hyperledger.fabric.sdkintegration.End2endIT.blockWalker(End2endIT.java:1011) 00:40:46.523 	at org.hyperledger.fabric.sdkintegration.End2endIT.runFabricTest(End2endIT.java:231) 00:40:46.523 	at org.hyperledger.fabric.sdkintegration.End2endIT.setup(End2endIT.java:190) 00:40:46.523  00:40:47.046  INFO   00:40:47.046  INFO  Results: 00:40:47.046  INFO   00:40:47.046  ERROR  Failures:  00:40:47.046  ERROR    End2endIT.setup:190->runFabricTest:231->blockWalker:1011 expected:< github.com/example_cc > but was:<  > 00:40:47.046  INFO   00:40:47.048  ERROR  Tests run: 50, Failures: 1, Errors: 0, Skipped: 0/ code placeholder {code}    ></body> </Action>
<Action id="63566" issue="41790" author="wlahti" type="comment" body="I&apos;ve identified the root cause here. Working to identify the correct fix." created="2019-09-05 12:57:07.0" updateauthor="wlahti" updated="2019-09-05 12:57:07.0"/>
<Action id="63569" issue="41790" author="wlahti" type="comment" body="After discussions with  ~jyellick , the correct fix here is actually to update the End2endIT test to not check the chaincode path. The chaincode path only comes into play during the package/install portion of the LSCC chaincode flow. After Jason&apos;s recent endorser refactoring work, the proposal response now accurately reflects this and no longer sets the chaincode path in the chaincode id returned by instantiate/upgrade. The test can still check the name/version but the chaincode path check should be removed. " created="2019-09-05 15:42:13.0" updateauthor="wlahti" updated="2019-09-05 15:42:13.0"/>
<Action id="63570" issue="41790" author="bestbeforetoday" type="comment" body="If this value is never going to be set, I&apos;m wondering if we will avoid confusion for users by removing access to it from the Java API rather than just not testing for it. What do you think?" created="2019-09-05 16:09:03.0" updateauthor="bestbeforetoday" updated="2019-09-05 16:09:03.0"/>
<Action id="63574" issue="41790" author="jyellick" type="comment" created="2019-09-05 17:17:16.0" updateauthor="jyellick" updated="2019-09-05 17:17:16.0"> <body><! CDATA The {{ChaincodeID}} is a message that is re-used in too many places, and often, most of the fields are ignored.  This was one of the reasons for creating the new lifecycle.  Allow me to summarize:  The {{ChaincodeID}} is used as part of the {{ChaincodeHeaderExtension}}, as well as part of the {{ChaincodeSpec}}.  The {{ChaincodeHeaderExtension}} only uses the {{ChaincodeID.name}} field.  In this case, because of happenstance in the code, the parameters passed for the {{version}} and {{path}} fields were being sent back to the user, but Fabric always ignored them.  The {{ChaincodeSpec}} is part of the {{ChaincodeDeploymentSpec}}, as well as the {{ChaincodeInvocationSpec}}.   * The {{ChaincodeInvocationSpec}}'s {{ChaincodeSpec}} field as set by clients is always ignored.  The {{ChaincodeSpec}} is only referenced when this message is used for chaincode to chaincode calls in the chaincode protocol API. * The {{ChaincodeDeploymentSpec}} is used both for packaging/install, and for instantation.  During packaging/install, all three fields of the {{ChaincodeSpec}} (name, version, path) are considered.  During instantiation, only the name and version are considered.  I don't defend it, in fact, I'd argue that it's a unnecessarily convoluted, but, hopefully this sheds a little bit of light on how these messages are used.  {quote} If this value is never going to be set, I'm wondering if we will avoid confusion for users by removing access to it from the Java API rather than just not testing for it. What do you think? {quote}  Agreed, any parameters which may be set, but which are ignored, seem like good candidates for removal.  If these protos were not re-used in so many different ways (notably, needing all three fields in the packaging case) I'd simply deprecate them in the messages.  ></body> </Action>
<Action id="63632" issue="41790" author="denyeart" type="comment" body="CR merged, closed." created="2019-09-09 17:25:22.0" updateauthor="denyeart" updated="2019-09-09 17:25:22.0"/>
