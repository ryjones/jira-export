<Action id="27182" issue="18551" author="muralisr" type="comment" created="2017-06-22 12:09:34.0" updateauthor="muralisr" updated="2017-06-22 12:09:34.0"> <body><! CDATA  ~NancyRavi  what level of fabric and sdk are you on ? And can  you provide exact steps and orderer logs as well please ?    ~rickr   ></body> </Action>
<Action id="27183" issue="18551" author="rickr" type="comment" created="2017-06-22 12:16:15.0" updateauthor="rickr" updated="2017-06-22 12:57:41.0"> <body><! CDATA Please provide all the information in the README.md when opening a JIRA   https://github.com/hyperledger/fabric-sdk-java  bottom  ></body> </Action>
<Action id="27184" issue="18551" author="rickr" type="comment" created="2017-06-22 12:21:23.0" updateauthor="rickr" updated="2017-06-22 12:21:23.0"> <body><! CDATA Reconstructing an existing channel is done in org/hyperledger/fabric/sdkintegration/End2endAndBackAgainIT.java     ></body> </Action>
<Action id="27195" issue="18551" author="clayton sims" type="comment" created="2017-06-22 14:04:54.0" updateauthor="clayton sims" updated="2017-06-22 14:04:54.0"> <body><! CDATA Here is must gather information from README.md referenced above.      TypeBug _or_ New FeatureComponentfabric-sdk-javaFix Versionsv1.0.0  Pleases provide as much information that you can with the issue you're experiencing: stack traces logs. Logging for the SDK can be enabled with setting environment variables:  ORG_HYPERLEDGER_FABRIC_SDK_LOGLEVEL=TRACE  ORG_HYPERLEDGER_FABRIC_CA_SDK_LOGLEVEL=TRACE  Fabric debug is by default enabled in the SDK docker-compose.yaml file with  On Orderer:  ORDERER_GENERAL_LOGLEVEL=debug  On peers: CORE_LOGGING_LEVEL=DEBUG  Fabric CA by starting command have the -d parameter.  Upload full logs to the JIRA not just where the issue occurred if possible  ></body> </Action>
<Action id="27268" issue="18551" author="rickr" type="comment" body="No other reports of this and appears to be a user error. For now moving down to medium priority since there&apos;s been no response from the submitter." created="2017-06-23 13:52:18.0" updateauthor="rickr" updated="2017-06-23 13:52:18.0"/>
<Action id="27274" issue="18551" author="ratnakar" type="comment" created="2017-06-23 14:35:28.0" updateauthor="ratnakar" updated="2017-06-23 14:35:28.0"> <body><! CDATA  ~bmos299  ,  ~scottz  and I discussed this, This can happen while trying to (re)create the channel that already exists on the blockchain network. When you rerun your unit tests (i.e. restart the application), but do not restart the blockchain network, you should not reexecute admin actions such as create channel. If those are part of the unit tests and cannot be separated, then you should restart the network every time you run the tests.  Consider: In a real production environment, *channel creation , Join channel, config update* etc., such operations will be taken care by the admin and hence that should be separated out from the application logic. Those things are saved in the blockchain network, even if you restart your application.    ~rickr  Could we use this bug to enhance error message? Would we need to change the fabric or the SDK? We could provide more intuitive message like          'cannot create; _*channel <channel-name> already exists'*_   instead of the current error message          '_*StatusValue 400. Status BAD_REQUEST*_' ?     ></body> </Action>
<Action id="27371" issue="18551" author="mastersingh24" type="comment" created="2017-06-26 17:06:14.0" updateauthor="mastersingh24" updated="2017-06-26 17:06:53.0"> <body><! CDATA  ~Ratnakar   - unfortunately that is the message which comes back from the ordering service itself and there is actually no place to add any addtional message in the current structure.  I'd suggest we close this as not a bug and open a new improvement JIRA  ></body> </Action>
<Action id="27372" issue="18551" author="rickr" type="comment" body="Waiting for submitter response .. three workdays then close is my rule. :)" created="2017-06-26 17:09:56.0" updateauthor="rickr" updated="2017-06-26 17:09:56.0"/>
<Action id="27374" issue="18551" author="scottz" type="comment" created="2017-06-26 18:20:59.0" updateauthor="scottz" updated="2017-06-26 18:20:59.0"> <body><! CDATA We can agree to closure as suggested, and will open an Improvement jira.  I can think of two things that might be done, which are tightly coupled. Can I get agreement that we should create two Improvement tasks (one for fabric, and one for fabric-sdk-java)?  Here are the workitems. Let me know if anyone thinks otherwise: # I thnk an error response typically includes a status and a response-text field. When printing the status ( '_*StatusValue 400. Status BAD_REQUEST')*_, java sdk should also print the additional response text. Then it would not be up to the java sdk to interpret the response details, but just pass it along. # The orderer may or may not be providing a detailed response text already, to go along with status 400; someone could ensure that it does provide more detail for specific errors encountered such as this one, adding some text in the orderer response if necessary.  ></body> </Action>
<Action id="27411" issue="18551" author="nancyravi" type="comment" body="Sorry for the delay. I went for the holiday. I have integrated fabric SDK Java with our application and deploying in Apache Tomcat. When I am restarting tomcat without restarting blockchain network, I got this error. *How to separate channel creation, join channel from the application? How is it persisted in blockchain network? _We are doing the transaction in particular channel while restarting the application, can we get already performed a transaction using transaction ID?_*" created="2017-06-27 05:49:01.0" updateauthor="nancyravi" updated="2017-06-27 05:49:01.0"/>
<Action id="27425" issue="18551" author="rickr" type="comment" created="2017-06-27 11:22:57.0" updateauthor="rickr" updated="2017-06-27 11:22:57.0"> <body><! CDATA Look at End2endIT.java that does the channel creation, peer joins.   Look at End2endAndBackAgianIT.java to see how it recreates the chain to interact with it again.   Persistence *on the client side* (SDK) is left  to the application.  Look at  End2endAndBackAgianIT to see what it need to reconstruct the channel to interact with it.  Look at End2endIT for an example of queryBlockByTransactionID on the channel.  ></body> </Action>
<Action id="27471" issue="18551" author="nancyravi" type="comment" created="2017-06-28 04:38:45.0" updateauthor="nancyravi" updated="2017-06-28 04:38:45.0"> <body><! CDATA I referred End2endIT and End2endAndBackAgianIT classes only. The following steps i tried now.  * Created java application and ran class which is similar to End2endIT. This step created channel and joined peers. * Created another java application and ran class which is similar to End2endAndBackAgianIT. I got the following error. Without restarting blockchain network, i have tried these steps. * RUNNING: End2endAndBackAgainIT  org.hyperledger.fabric.sdk.exception.InvalidArgumentException: setUserContext for user peerOrg1Admin has no Enrollment set at org.hyperledger.fabric.sdk.HFClient.setUserContext(HFClient.java:253) at com.cognizant.gto.digital.blockchain.End2endAndBackAgainIT.reconstructChannel(End2endAndBackAgainIT.java:419) at com.cognizant.gto.digital.blockchain.End2endAndBackAgainIT.setup(End2endAndBackAgainIT.java:147) at com.cognizant.gto.digital.blockchain.End2endAndBackAgainIT.main(End2endAndBackAgainIT.java:74) setUserContext for user peerOrg1Admin has no Enrollment set    ></body> </Action>
<Action id="27482" issue="18551" author="rickr" type="comment" created="2017-06-28 11:26:47.0" updateauthor="rickr" updated="2017-06-28 11:27:43.0"> <body><! CDATA Please use Rocket Chat for questions.  Your User interface need and Enrollment interface and you need to preserver that.  End2endAndBackAgainIT  depends on running End2endIT first  Please READ through the whole README.md it will tell you how to run the integration suite  ></body> </Action>
<Action id="61514" issue="18551" author="fedyiv" type="comment" created="2019-07-08 13:38:22.0" updateauthor="fedyiv" updated="2019-07-08 13:38:22.0"> <body><! CDATA Hi All,  this is an issue even in Fabric 1.4.  I understand that there are two methods in java sdk  - one for creation of new channel on real network    {code:java} /** * Create a new channel * * @param name                           The channel's name * @param orderer                        Orderer to create the channel with. * @param channelConfiguration           Channel configuration data. * @param channelConfigurationSignatures byte arrays containing ConfigSignature's proto serialized. *                                       See {@link Channel#getChannelConfigurationSignature} on how to create * @return a new channel. * @throws TransactionException * @throws InvalidArgumentException */  public Channel newChannel(String name, Orderer orderer, ChannelConfiguration channelConfiguration, byte  ... channelConfigurationSignatures) throws TransactionException, InvalidArgumentException { {code} {{and the other is just locally creating object of channel which was already configured in the network}} {code:java} /** * newChannel - already configured channel. * * @param name * @return a new channel. * @throws InvalidArgumentException */  public Channel newChannel(String name) throws InvalidArgumentException {{code}    {{But the issue is that there is no way to find out in advance if the channel is created or not(In case when there are no peers joined the channel). Solution where we try creating channel using first method and in case of exception using second method is ugly, because }} # {{it pollutes logs with exceptions}} # {{ The exception is too general and when we swallow it we might miss some real issue}}  {{Can you please either return some meaningful message or provide away to query orderer to find out if the required channel exists or not}}  ></body> </Action>
<Action id="64855" issue="18551" author="heatherp" type="comment" body="Raised over a year ago, so closing" created="2019-10-22 10:29:20.0" updateauthor="heatherp" updated="2019-10-22 10:29:20.0"/>
<Action id="64860" issue="18551" author="fedyiv" type="comment" body="Hello  ~heatherp . Why is it closed? There is an issue which exists. Please see the last made just several month ago." created="2019-10-22 10:35:08.0" updateauthor="fedyiv" updated="2019-10-22 10:35:08.0"/>
<Action id="64863" issue="18551" author="heatherp" type="comment" body="Hi  ~fedyiv  - Are you fixing it? it&apos;s not being actively worked by anyone in our team." created="2019-10-22 10:43:45.0" updateauthor="heatherp" updated="2019-10-22 10:43:45.0"/>
<Action id="64865" issue="18551" author="fedyiv" type="comment" created="2019-10-22 10:47:58.0" updateauthor="fedyiv" updated="2019-10-22 10:47:58.0"> <body><! CDATA  ~heatherp  I do not work on it. But I thought that if there is a confirmed  bug in application, it can be in the backlog (possibly with very low priority) but not closed.  If this is not the case for hyperledger jira and there is some special policy to close bugs without fixing them I apologize for reopening it.  ></body> </Action>
<Action id="64870" issue="18551" author="heatherp" type="comment" body="You&apos;re right, I should have provided a better description when I closed it, apologies  ~fedyiv . It can absolutely keep it on the backlog, but please be aware, that as far as I know none of the maintainers are actively fixing it." created="2019-10-22 12:40:37.0" updateauthor="heatherp" updated="2019-10-22 12:40:37.0"/>
