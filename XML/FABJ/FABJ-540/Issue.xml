<Issue id="46178" key="FABJ-540" number="540" project="10605" reporter="ptippett" assignee="bestbeforetoday" creator="ptippett" type="10004" summary="Verify certs coming back from Service discovery" priority="2" resolution="10000" status="6" created="2020-10-01 16:08:40.0" updated="2020-10-16 19:41:40.0" resolutiondate="2020-10-09 09:28:45.0" votes="0" watches="3" workflowId="60108" archived="N"> <description><! CDATA A user hit an issue where one of the certs returned by service discovery was missing a \n EOL character.  This results in two certs being appended which causes the SDK to flag them as invalid which prevents the customer from connecting via TLS.     Unfortunately, these certs are from endpoints that no longer exist and removing them from all channels or correcting them is problematic.     I think there's 3 places this could be fixed:     1 - Verify the original cert has a proper EOL characters.  The problem is the endpoint is gone and fixing the original cert in all cases is problematic.  2 - Handle this in service discovery.  That's probably a good idea, but is much harder to deploy.  Needs new fabric version, then that needs to be rolled out to user environment.  3 - Check this in the client.  This is pretty easy to validate and much easier for the user to deploy since it's a client side change.     We hit a similar issue with a user and Node SDK and put the change in node to validate and correct missing \n characters between certs.  That Jira is here: https://jira.hyperledger.org/browse/FABN-1403  Can a similar change be put in for Java?  I do think this should be corrected in service discovery as well vs having to touch other SDKs.  Here's more information from the user's debug:    It seems one of the certs in the list does not have a trailing "\n" (newline) character. This ends up joining together this cert and the one after it (the tlsca cert). This is why even though the needed cert has been returned in discovery it cannot be parsed and used for node signature validation. This is true for all peers and orderers. The java sdk uses the getAllTLSCerts method, which is a byte   and sets that into the "pemBytes" property for the peer/orderer. I used the java sdk SDPeerAddition and SDOrdererAddition overrides to figure this out and create the final "pemBytes" properly so that each cert is properly separated out. It works. Other observations # Putting in the node TLS cert into the node TLSCACert property (pemBytes) works and so does the TLSCA root cert (returned in discovery). This is odd. One would expect only the root tlsca cert to work here since its the one being used for issuer validation. Anyway something to confirm with fabric team to give us a better understanding. Ideally providing the node certificate as the TLSCA root should fail.     Here's an example of the certs being returned by service discovery:     ``` -----BEGIN CERTIFICATE----- MIIB8TCCAZigAwIBAgIUN2X5l0jAztTue6Jt1xiWfI7J++MwCgYIKoZIzj0EAwIw VzEMMAoGA1UEChMDSUJNMRcwFQYDVQQLEw5pYnAuT3JkZXJlck9yZzEuMCwGA1UE AxMlZmFicmljLWNhLU9yZGVyZXJPcmctcGFyZW50VExTLXNlcnZlcjAeFw0xODEw MTAwODM2MDBaFw0zMzEwMDYwODM2MDBaMFcxDDAKBgNVBAoTA0lCTTEXMBUGA1UE CxMOaWJwLk9yZGVyZXJPcmcxLjAsBgNVBAMTJWZhYnJpYy1jYS1PcmRlcmVyT3Jn LXBhcmVudFRMUy1zZXJ2ZXIwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATfJe8a VTHLDsUx5+kldJHpcZ7tQeGPQ9VApXs02CieVkh/yV0se/aI5/H5voZ+vDODlH+4 A3WSjo8EC4Q9ifoDo0IwQDAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB /zAdBgNVHQ4EFgQUo9KuEjPBKW3WkQiNn0sa2P5IxqwwCgYIKoZIzj0EAwIDRwAw RAIgH1VTpYwdT97xkbpjKmyjVLUxlkrkyaUsvq1BWX7lUn4CIESDgEZNe/zzfKGW yiB/0yVxridGjJ6a4u/9Ays2TARM -----END CERTIFICATE----------BEGIN CERTIFICATE----- MIIB/jCCAaSgAwIBAgIUbXEDYzeTzI6Mfst107IE7bXTKz8wCgYIKoZIzj0EAwIw XTELMAkGA1UEBhMCVVMxFzAVBgNVBAgTDk5vcnRoIENhcm9saW5hMRQwEgYDVQQK EwtIeXBlcmxlZGdlcjEPMA0GA1UECxMGRmFicmljMQ4wDAYDVQQDEwV0bHNjYTAe Fw0yMDA1MDYxNzU4MDBaFw0zNTA1MDMxNzU4MDBaMF0xCzAJBgNVBAYTAlVTMRcw FQYDVQQIEw5Ob3J0aCBDYXJvbGluYTEUMBIGA1UEChMLSHlwZXJsZWRnZXIxDzAN BgNVBAsTBkZhYnJpYzEOMAwGA1UEAxMFdGxzY2EwWTATBgcqhkjOPQIBBggqhkjO PQMBBwNCAAQv7DT7I1cfdjfXXKCSfXUfnqeTSv+tBg0pzM06bQFbi9urDF8oT3AY S/mMkU0AjtAFM1wDRT8AZdtvtSrbyjSto0IwQDAOBgNVHQ8BAf8EBAMCAQYwDwYD VR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUm1vYz7VY4OejVEEbNS+I+eRKr5YwCgYI KoZIzj0EAwIDSAAwRQIhALOoLlLw6ElglEUoxdyXF5zvHzxA+rnL//rCNz3YfG8V AiBr+jhr03XQ8EmvVoGY2VKghfX4zBYTifVGHXq1Yc/Y+w== -----END CERTIFICATE-----    Listed as high since this will affect any users with java SDK and these certificates.  ></description> </Issue>
