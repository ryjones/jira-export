<Action id="70478" issue="46178" author="lesleyannj" type="comment" body="Ideally back ported to 1.4." created="2020-10-09 13:09:39.0" updateauthor="lesleyannj" updated="2020-10-09 13:09:39.0"/>
<Action id="70500" issue="46178" author="bestbeforetoday" type="comment" created="2020-10-13 13:10:24.0" updateauthor="bestbeforetoday" updated="2020-10-13 13:10:24.0"> <body><! CDATA  ~ptippett  I can see that the Java SDK will concatenate certificate PEMs returned from discovery into a single byte array, as described in the problem report, and this causes a failure if that byte array is passed to java.security.cert.CertificateFactory.generateCertificates(). To resolve this, I am explicitly adding a newline after each certificate PEM when they are added to the byte array. This should solve the issue if some of the certificate PEMs returned by discovery are not terminated with a newline, and is an SDK bug.  If discovery is somehow concatenating multiple PEMs not separated by newlines and returning these as a single certificate PEM, the problem is going to persist as the SDK is expecting each entry to be a single PEM. I think that if this is happening then it is either a discovery or a configuration bug, although it is something that could be worked around in the SDK.  Is it practical to pick up the current fixed code to see if it solves the problem is the system where it is observed? This could be done by pulling the source code from GitHub and doing a `mvn install` in the client environment. Alternatively I can publish a snapshot release to Maven staging, although this will require changes to the application POM file to pull an appropriate SDK version from that Maven repository.  ></body> </Action>
<Action id="70501" issue="46178" author="ptippett" type="comment" body=" ~bestbeforetoday This is on a users environment, but the user seems to be pretty technical so it&apos;s possible they could do this.  I&apos;ll ask.  My concern with fixing this in configuration or in service discovery is that&apos;s much more complicated of a change vs having the SDK work around these issues.  But we can talk about that once he tests the results.  The customer is on fabric 1.4.x.  Which branch of SDK should they use?" created="2020-10-13 13:39:55.0" updateauthor="ptippett" updated="2020-10-13 13:39:55.0"/>
<Action id="70502" issue="46178" author="bestbeforetoday" type="comment" created="2020-10-13 13:56:21.0" updateauthor="bestbeforetoday" updated="2020-10-13 13:56:21.0"> <body><! CDATA For Fabric v1.4 then the v1.4 SDK is the right choice:  https://github.com/hyperledger/fabric-sdk-java/tree/release-1.4      ></body> </Action>
<Action id="70508" issue="46178" author="bestbeforetoday" type="comment" body="I have published this fix described above in fabric-sdk-java release v2.2.2 and v1.4.12. There may be some delay before these releases are mirrored out to all the Maven Central servers and become visible to clients." created="2020-10-13 15:43:27.0" updateauthor="bestbeforetoday" updated="2020-10-13 15:43:27.0"/>
<Action id="70524" issue="46178" author="ptippett" type="comment" body=" ~bestbeforetoday  user replied that they are happy with the SDK fix.  Thanks!" created="2020-10-16 19:41:40.0" updateauthor="ptippett" updated="2020-10-16 19:41:40.0"/>
