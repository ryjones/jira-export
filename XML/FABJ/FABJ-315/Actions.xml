<Action id="21715" issue="14484" author="rickr" type="comment" created="2017-03-29 12:39:36.0" updateauthor="rickr" updated="2017-03-29 12:39:36.0"> <body><! CDATA Hi Toshio  Any updates on doing this with boring ssl ?   ></body> </Action>
<Action id="21729" issue="14484" author="suganuma" type="comment" body="As I mentioned in FAB-1732, I got TLS connection with Orderer by using my own certificate (somehow, cert and key files from Rick didn&apos;t work for me). Since my code base was quite old and I encountered &quot;getGenesisBlock null&quot; error (which is irrelevant to TLS), I will move to the latest code for checking TLS connection with Peer." created="2017-03-29 15:50:29.0" updateauthor="suganuma" updated="2017-03-29 15:50:29.0"/>
<Action id="21752" issue="14484" author="suganuma" type="comment" created="2017-03-30 14:00:30.0" updateauthor="suganuma" updated="2017-03-30 14:00:30.0"> <body><! CDATA Using our own cert/key files for each of orderer and peers, the TLS communication between sdk-java and orderer0/peer0 seems to work ok. However, there seems a problem between orderer0 and peer0 and this causes a timeout error after sending instantiateProposalRequest to all peers.  2017-03-30 13:17:01.179 UTC  deliveryClient  NewDeliverService -> ERRO 2a6 Cannot dial to orderer0:7050, because of grpc: timed out when dialing ... 2017-03-30 13:22:01.807 UTC  chaincode  Launch -> ERRO 3f9 launchAndWaitForRegister failed Timeout expired while starting chaincode example_cc.go:1.0(networkid:dev,peerid:peer0,tx:65fba64e9ff5a19321735a7b322916995bbce2e46e1562579c8b1239ad21e97a)  ></body> </Action>
<Action id="21762" issue="14484" author="suganuma" type="comment" created="2017-03-31 07:11:25.0" updateauthor="suganuma" updated="2017-03-31 07:11:25.0"> <body><! CDATA I can reproduce the same 'Timeout' error with the fabric/examples/e2e_cli code when TLS is enabled. The problem seems to occur when trying to instantiate the chaincode on peer2. All the test works fine when TLS is disabled. I will check this with the latest fabric code.  ></body> </Action>
<Action id="21823" issue="14484" author="suganuma" type="comment" created="2017-04-03 09:20:06.0" updateauthor="suganuma" updated="2017-04-03 09:20:06.0"> <body><! CDATA I got success for running End2endIT test with TLS enabled. Attached above is the pom.xml I used for using netty-tcnative-boringssl-static. I added a couple of lines in Endpoint.java as follows, but this may not be mandatory.  SslContext sslContext = GrpcSslContexts.forClient() .trustManager(new java.io.File(pem)) .sslProvider(SslProvider.OPENSSL)                 // added .build(); this.channelBuilder = NettyChannelBuilder.forAddress(addr, port) .sslContext(sslContext) .negotiationType(NegotiationType.TLS);          // added if (cn != null) { channelBuilder.overrideAuthority(cn); }  Also I created my own cert/key files for each of orderer and peers and updated those files under the directories such as e2e-2Orgs/tls/peers/peer0.  ></body> </Action>
