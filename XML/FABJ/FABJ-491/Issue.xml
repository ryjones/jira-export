<Issue id="42711" key="FABJ-491" number="491" project="10605" reporter="lquintai" assignee="sstone1" creator="lquintai" type="10004" summary="Java SDK should match Node SDK behaviour when doing discovery with localHost" priority="3" resolution="10000" status="6" created="2019-10-10 13:43:37.0" updated="2019-10-21 09:09:22.0" resolutiondate="2019-10-21 09:09:22.0" votes="0" watches="1" workflowId="55791"> <description><! CDATA Currently in Node, on *a non TLS network* (like local fabric used by VSCode), we connect to the gateway like this:  const options: fabricNetwork.GatewayOptions = { discovery:  { asLocalhost: true, <--- only true if there are some localhost URLs in the connection profile enabled: true, <--- always true }  , identity: identityName, wallet: fabricWallet, };  await gateway.connect(connectionProfile, options);  Ie., discovery is *enabled*, and if there are localhost URLs in the connection profile an extra flag is set to true - asLocalhost. In this non TLS network there is no need to add orderer/peer/CA information to /etc/hosts, and there is no need to add the orderer URL to the connection profile.  In Java however, there is currently no equivalent for the 'asLocalhost' flag. Therefore, when orderer URL not present in the connection profile, it defaults to *grpcs*, resulting the in following error:  .org.hyperledger.fabric.gateway.ContractException: Failed to send transaction to the orderer ... org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38). ....junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38) ... .junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38) ... org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32) ... Caused by: java.util.concurrent.ExecutionException: java.lang.Exception: Channel mychannel failed to place transaction 7fb11f77303d000c4496e7f8bb5f6da339ba347fe64b01bb9adc754ca8e71f25 on Orderer. Cause: UNSUCCESSFUL.  ... Caused by: java.lang.Exception: Channel mychannel failed to place transaction 7fb11f77303d000c4496e7f8bb5f6da339ba347fe64b01bb9adc754ca8e71f25 on Orderer. Cause: UNSUCCESSFUL.  ... Caused by: java.lang.Exception: Channel mychannel unsuccessful sendTransaction to orderer localhost:17053 (*grpcs://localhost:17053*). ... Caused by: org.hyperledger.fabric.sdk.exception.TransactionException: Channel mychannel, send transaction failed on orderer OrdererClient\{id: 6, channel: mychannel, name: localhost:17053, url: grpcs://localhost:17053}. Reason: UNAVAILABLE: io exception ... Caused by: io.grpc.StatusRuntimeException: UNAVAILABLE: io exception ... .Caused by: io.netty.handler.ssl.NotSslRecordException: *not an SSL/TLS record*: 000000040000000000 <---- at io.netty.handler.ssl.SslHandler.decodeJdkCompatible(SslHandler.java:1137) at io.netty.handler.ssl.SslHandler.decode(SslHandler.java:1193) at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:489) at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:428) at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:265) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1359) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:935) at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:138). at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:645) at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:580) at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:497) at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:459) at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:858) at io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:138) ... 1 more  ></description> </Issue>
