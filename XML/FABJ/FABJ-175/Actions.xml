<Action id="30734" issue="20729" author="rickr" type="comment" body="Not a bug.  Not a valid use case.  One organization will not have another organizations credentials to listen to their eventhub.  There is a future change coming by the fabric with acl policies that allows another organization to listen to its evenhub. When that&apos;s in place and the acl have been done you should be able to do this with a single user context" created="2017-09-11 16:47:39.0" updateauthor="rickr" updated="2017-09-11 16:47:39.0"/>
<Action id="30745" issue="20729" author="suganuma" type="comment" created="2017-09-12 06:01:09.0" updateauthor="suganuma" updated="2017-09-12 08:09:28.0"> <body><! CDATA I think you don't mean that we have to create a separate channel for each organization, right? Otherwise, the endorsement policy from multiple organizations doesn't make sense.  I guess what you mean is that we have to use a separate client instance to add peers and event hubs from different organizations into a channel. Is this correct? If we look at node-sdk e2e example (fabric-sdk-node/test/integration/e2e/join-channel.js), it assumes multiple organizations, but uses a new instance of client and channel to add peers and event hubs for each organization.  In node-sdk, the event hub class has its own client context, which is used in connection (_sendRegistration(register)). My fixed code in java-sdk was just to do the same.  ></body> </Action>
<Action id="30791" issue="20729" author="peoplehlj" type="comment" created="2017-09-13 07:51:54.0" updateauthor="peoplehlj" updated="2017-09-13 07:54:15.0"> <body><! CDATA Hi  ~suganuma  thank you for raising this issue, I encountered the same issue and also I asked in the chat as below. And then I fixed this issue like you mentioned: the event hub connect its own user context, and the code change is easy:  ^eventhub-connect-own-usercontext.patch  .  !image-2017-09-13-15-53-59-635.png!  ></body> </Action>
<Action id="30792" issue="20729" author="peoplehlj" type="comment" created="2017-09-13 07:57:54.0" updateauthor="peoplehlj" updated="2017-09-13 07:57:54.0"> <body><! CDATA By the way  ~suganuma , could you invoke chaincode in the channel of AND policy, I always met below error. If you could invoke successfully, could you give me some sample code, thanks in advance. {code:java} 2017-09-11 08:34:29.936 UTC  txvalidator  VSCCValidateTxForCC -> ERRO 7c1 VSCC check failed for transaction txid=241cc77c3ecb0f988be4244ecfb5630f3b58bf582a39d6e1f9ac41d0f707dd45, error VSCC error: policy evaluation failed, err Failed to authenticate policy 2017-09-11 08:34:29.936 UTC  lockbasedtxmgr  Done -> DEBU 7c2 Done with transaction simulation / query execution  c613a69b-6f5c-48f1-8f38-09d323ca4da4  2017-09-11 08:34:29.936 UTC  txvalidator  Validate -> ERRO 7c3 VSCCValidateTx for transaction txId = 241cc77c3ecb0f988be4244ecfb5630f3b58bf582a39d6e1f9ac41d0f707dd45 returned error VSCCValidateTxForCC failed for cc trace, error VSCC error: policy evaluation failed, err Failed to authenticate policy {code}  ></body> </Action>
<Action id="30809" issue="20729" author="rickr" type="comment" body="Saying it&apos;s not a valid use case. If your FORD and GM work on BC.  Ford WON&apos;T have GM&apos;s credentials (user context credentials) and visa versa.  FORD can send to it&apos;s PEER&apos;s and GM&apos;s PEERs for endorsement.  But today only FORD can listen to it&apos;s own eventhub.  There&apos;s work in progress that will allow for example GM through access control policies allow FORD to listen to it&apos;s eventhub using it&apos;s OWN (FORD&apos;s) credentials (user context).  Set up that way when it&apos;s available WOULD allow you to add FORD and GM&quot;S eventhub to the channel and initialize." created="2017-09-13 13:12:53.0" updateauthor="rickr" updated="2017-09-13 14:03:52.0"/>
<Action id="30851" issue="20729" author="rickr" type="comment" body="https://jira.hyperledger.org/browse/FAB-5695  ACL eventhub" created="2017-09-13 16:37:33.0" updateauthor="rickr" updated="2017-09-13 16:37:33.0"/>
<Action id="30871" issue="20729" author="peoplehlj" type="comment" body="Thank you  ~rickr  for clarifying, I will watch the FAB-5695." created="2017-09-14 07:05:43.0" updateauthor="peoplehlj" updated="2017-09-14 07:05:43.0"/>
<Action id="32400" issue="20729" author="ryokawajp" type="comment" created="2017-10-16 03:04:41.0" updateauthor="ryokawajp" updated="2017-10-16 03:04:41.0"> <body><! CDATA Hi  ~rickr   and  ~suganuma , I had the same issue when sending usual Invoke transactions. And thank you for the patch,  ~peoplehlj .  I agree that the event hub connection should be restricted the users of the same org, thus the peers to be listened are limited to one peer.  However, since I followed the guidance in the following document, I set the user's organization and the peer's organization to have different MSPIDs. * Sub-section 3) of Best Practice section  https://hyperledger-fabric.readthedocs.io/en/latest/msp.html#best-practices   In the business level, the users and the peer are in the same organization (enterprise) but they could use different MSPIDs because of some administration purpose (So I assumed that it is ok to manage the user keys/certs of both orgs within a client).  Anyway, I will also be watching FAB-5695. Thank you.     ></body> </Action>
