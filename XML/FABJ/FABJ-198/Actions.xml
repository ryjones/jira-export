<Action id="38514" issue="26731" author="rickr" type="comment" created="2018-01-12 17:43:58.0" updateauthor="rickr" updated="2018-01-12 17:46:01.0"> <body><! CDATA Hi -  Thanks for looking into this.  The consistence sets were not meant to solve the problem Byzantine failure tampering directly. The purpose was to fail fast if the proposals results are inconsistent  This will happen in the fabric when responses are sent to the orderer and then to committer peers.  They make sure the signatures are consistent.   The signatures are across the whole payload response so the SDK should probably group by that.  Today the SDK is then only catching a subset of the possible failures.  I'll probably use this JIRA to investigate changing that.    The SDK never chooses the largest grouping.  By default the only thing the SDK does is throw an exception when trying to send to the orderer proposals that are inconsistent which can be turned off.  I decided to make it also a utility that applications can call so they if they want could chose which consistence set.   Maybe certain peers are more trusted than others  ></body> </Action>
<Action id="38525" issue="26731" author="rickr" type="comment" created="2018-01-12 20:29:20.0" updateauthor="rickr" updated="2018-01-12 20:29:20.0"> <body><! CDATA Consistency set should be based off  of   https://github.com/hyperledger/fabric-chaincode-java/blob/308eb634db3054bc75a5c944946bf3458ca1f478/shim/src/main/proto/peer/proposal_response.proto#L49         ></body> </Action>
<Action id="38560" issue="26731" author="denyeart" type="comment" created="2018-01-14 20:27:10.0" updateauthor="denyeart" updated="2018-01-14 20:28:24.0"> <body><! CDATA I agree with this.  The consistency check should compare the ProposalResponse payloads, rather than just the RWSet.  The ProposalResponse payload is what gets signed upon endorsement, and therefore this will match the validation checking that committing peers do.  The ProposalResponse payload also includes the chaincode response (over and above the results RWSet), which is what should be checked for consistency for client queries across N peers.      ~harrisob@us.ibm.com  I'm tagging you so that you can check whether node js SDK is correctly comparing the ProposalResponse payloads.  ></body> </Action>
<Action id="38602" issue="26731" author="ryokawajp" type="comment" created="2018-01-15 02:36:01.0" updateauthor="ryokawajp" updated="2018-01-15 02:36:01.0"> <body><! CDATA  ~rickr   ~denyeart , thank you for the comments. I understood that getProposalResponseConsistencySets() was developed for another reason so it is not a bug. Our team just tried to implement BFT for query TXes by ourselves and found that getProposalResponseConsistencySets() is useful and reused it.  According to the link in Rick's comment, ProposalResponse.payload (type is ProposalResponsePayload) contains both proposal hash and serialized ChaincodeAction. So this object looks perfect for our purpose. I also agree to use this.  ></body> </Action>
<Action id="38870" issue="26731" author="rickr" type="comment" body="In review https://gerrit.hyperledger.org/r/#/c/16807/" created="2018-01-18 17:41:57.0" updateauthor="rickr" updated="2018-01-18 17:41:57.0"/>
<Action id="42075" issue="26731" author="ryokawajp" type="comment" created="2018-03-23 14:35:16.0" updateauthor="ryokawajp" updated="2018-03-23 14:35:16.0"> <body><! CDATA Thank you  ~rickr  and  ~denyeart  for the modification, and sorry for this late reply. It is in the master branch and in v1.1.0-alpha tag!   ></body> </Action>
<Action id="42076" issue="26731" author="rickr" type="comment" body="Only in master branch which is still v1.1.0 and in SNAPSHOT-1.1.0 in Maven." created="2018-03-23 14:40:08.0" updateauthor="rickr" updated="2018-03-23 14:40:08.0"/>
