<Issue id="29055" key="FABJ-329" number="329" project="10605" reporter="aatkddny" assignee="rickr" creator="aatkddny" type="10001" summary="java-sdk - allow NetworkConfiguration to be updated" priority="2" resolution="10001" status="6" created="2018-03-31 13:24:36.0" updated="2018-09-11 17:12:51.0" resolutiondate="2018-09-11 17:12:51.0" votes="0" watches="2" workflowId="34737"> <description><! CDATA When pulling the NetworkConfig JsonObject from a third party service it doesn't always have everything one needs to then use the new HFClient methods. The ability to add them to the NetworkConfig is necessary here to have this all work as intended.  ======  Exact sample to reproduce:  Use the IBM blockchain apis (the new ones in Beta). The connection_profile you can hit through their API has everything you need except two properties required on the orderer and the peer.  This causes the   client.loadChannelFromConfig (client = HFClient) to fail.  The missing properties are the same in all cases:  "sslProvider", "openSSL"  "negotiationType", "TLS"  Without wishing to design the application, simply providing visibility to these in NetworkConfig with getters and allowing access to the Node object would suffice. :      *private* Map<String, Node> orderers;      *private* Map<String, Node> peers;  =====   Without this there one is forced to manually walk the Json and put them in the grpcOptions fields before creating the NetworkConfig, which surely isn't what was intended.  As other third party infrastructure suppliers pile on, I'm sure it won't just be this particular vendor that exposes this issue, this is just where I found it.  To save time - you can't set them after you do the loadChannelFromConfig and before you do the channel.initialize either. The Properties objects returned in both Peer and Orderer are cloned.  Allowing a setter there too would suffice, but it seems (to me at least) that having the NetworkConfig correct before starting is the more elegant solution.      ></description> </Issue>
