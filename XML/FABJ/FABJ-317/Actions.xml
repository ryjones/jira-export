<Action id="20661" issue="14516" author="tuand" type="comment" created="2017-02-02 16:53:45.0" updateauthor="tuand" updated="2017-02-02 16:56:46.0"> <body><! CDATA as a first step, see if we have a common interface for signing and verifying. This matches with the fabric's BCCSP interface.  {noformat} /** * * BCCSP is the blockchain cryptographic service provider that offers the * implementation of cryptographic standards and algorithms * * This follows the definition of BCCSP in hyperledger/fabric/bccsp/bccsp.go * */  public interface Bccsp {  	/** 	 * hash() hashes the given message according to the options set in hashOpts. 	 * if hashOpts is null, the default hash function is used. 	 *  	 * @param message 	 *            the text to be hashed 	 * @param hashOpts 	 *            options for the hash function 	 * @return 	 * @throws CryptoException 	 */ 	public byte   hash(byte   message, Properties hashOpts) throws CryptoException;  	/** 	 * sign() signs the message according to the signerOpts. The signerOpts 	 * should be appropriate for the algorithm used. 	 *  	 * @param privateKey 	 *            the key used to sign the message 	 * @param message 	 *            the message to be signed. 	 * @param signerOpts 	 *            options to be passed to the signer 	 * @return 	 * @throws CryptoException 	 */ 	public byte   sign(PrivateKey privateKey, byte   message, Properties signerOpts) throws CryptoException;  	/** 	 * verify() verifies the given signature against the given clear text. 	 *  	 * @param plainText 	 *            The original text 	 * @param signature 	 *            The signature blob 	 * @param pemCert 	 *            The certificate of the signer. Contents of the .PEM file. 	 * @param verifierOpts 	 * @return 	 */ 	public boolean verify(byte   plainText, byte   signature, byte   pemCert, Properties verifierOpts);  	// TODO see if these methods are needed for sdk-java 	// keyGen(), KeyDeriv(), keyImport(), getKey(), getHash(), encrypt(), 	// decrypt()  } {noformat}  ></body> </Action>
<Action id="20692" issue="14516" author="rickr" type="comment" body="I don&apos;t like introducing new terms that many who just want to write chain code and use the SDK are unfamiliar with.  Please stick to CryptoUtils.java and CryptoUitlsImpl.java.  User of the SDK will immediately have an understand what this interface and implementation is for. " created="2017-02-05 17:38:03.0" updateauthor="rickr" updated="2017-02-05 17:38:32.0"/>
<Action id="20716" issue="14516" author="tuand" type="comment" created="2017-02-06 16:40:52.0" updateauthor="tuand" updated="2017-02-06 16:40:52.0"> <body><! CDATA My view is that SDK users will never see these interfaces,  rather we should have sign, verify, etc ... methods for the Chain or User classes.  Developers that will be extending the SDK are familiar with MSP/BCCSP/Identities objects as that's what coming from the peer and the orderer. Also, any configuration we receive from fabric will follow these conventions.  It's still somewhat early since we don't have a clear picture of what fabric is generating so I'm sure this will change very soon.  Also, need to see what sdk-node is doing and see that we don't diverge too much    ></body> </Action>
<Action id="21468" issue="14516" author="rickr" type="comment" body="Is this really necessary? I&apos;m not seeing a huge payback on this. .. Post V1 maybe ?" created="2017-03-12 19:30:41.0" updateauthor="rickr" updated="2017-03-12 19:30:41.0"/>
<Action id="21485" issue="14516" author="tuand" type="comment" created="2017-03-13 13:23:12.0" updateauthor="tuand" updated="2017-03-13 13:23:12.0"> <body><! CDATA Low priority unless some requirement comes out of the genesis block/config update work.   Can label post V1  ></body> </Action>
