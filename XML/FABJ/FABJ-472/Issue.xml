<Issue id="41966" key="FABJ-472" number="472" project="10605" reporter="coada" creator="coada" type="10004" summary="Same orderer can be added multiple times to channel" priority="3" resolution="10001" status="6" created="2019-08-22 10:04:13.0" updated="2019-10-22 12:43:01.0" resolutiondate="2019-10-22 10:10:01.0" votes="0" watches="1" workflowId="55008"> <description><! CDATA I have detected an issue where I am able to add the same orderer to a channel several times. The problem originates from Channel.java storing orderers as a {{LinkedList}} collection (see code  here|https://github.com/hyperledger/fabric-sdk-java/blob/master/src/main/java/org/hyperledger/fabric/sdk/Channel.java#L172 ). A list in Java allows duplicates, however it does not make sense to allow duplicate orderers in a channel. Peers are stored as a {{HashSet}}, which does not allow duplicates.  Having duplicate orderers in a channel leads to longer delays to perform transactions if the orderer is unreachable, as the channel will pick another orderer in the list that might be the same unreachable orderer.  *Edit*: I would recommend using a key/value collection where the key is the URL of the object. I managed to add two peer objects to the channel, where the peers have same URL but different names - this scenario also does not make sense.  ></description> </Issue>
