<Issue id="21032" key="FABC-275" number="275" project="10607" reporter="vdods" assignee="aambati" creator="vdods" type="10004" summary="fabric-ca expects certificate chains in the wrong order" priority="3" resolution="10000" status="6" created="2017-09-28 00:46:25.0" updated="2018-07-18 22:04:07.0" resolutiondate="2017-11-29 14:59:48.0" votes="0" watches="2" workflowId="32455"> <description><! CDATA TLS 1.2 RFC (see links below) specifies that a cert chain must come host-first, and that each successive cert must be the issuer of the previous.  See "certificate_list" and surrounding paragraphs on page 47/48 {noformat} certificate_list This is a sequence (chain) of certificates.  The sender's certificate MUST come first in the list.  Each following certificate MUST directly certify the one preceding it.  Because certificate validation requires that root keys be distributed independently, the self-signed certificate that specifies the root certificate authority MAY be omitted from the chain, under the assumption that the remote end must already possess it in order to validate it in any case.{noformat} This ordering is expected by golang's http package where, for example in mutual TLS, the https server would load the server's cert chain (server's cert first in the chain) and key when calling ListenAndServeTLS, e.g. {code:java} server.ListenAndServeTLS("server-cert-chain.pem", "server-key.pem") {code} and the client (also using golang's http package) would configure TLS by loading its cert chain (the client's cert first in the chain) and key, e.g. {code:java} tls.LoadX509KeyPair("client-cert-chain.pem", "client-key.pem") {code} However, the `ca.chainfile` config var in fabric-ca apparently requires the chain to come host-last, which directly contradicts the TLS RFC.  I recommend switching the order to what's expected by the RFC.      http://www.rfc-base.org/rfc-5246.html    http://www.rfc-base.org/txt/rfc-5246.txt      ></description> </Issue>
