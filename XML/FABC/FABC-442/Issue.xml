<Issue id="16192" key="FABC-442" number="442" project="10607" reporter="clayton sims" assignee="smithbk" creator="clayton sims" type="10001" summary="Fix/improve CA error handling and logging" priority="3" resolution="10000" status="6" created="2017-05-02 21:35:52.0" updated="2018-07-20 19:16:15.0" resolutiondate="2017-08-15 06:44:10.0" votes="0" watches="5" workflowId="32624"> <description><! CDATA In the process of fixing bug FAB-3468, I discovered that the problem was more systemic to many errors and was also impossible to fix without either changing code in CFSSL or by perfoming the error handling ourself.  The CFSSL code is a relatively small amount of code and is honestly overly complex and restrictive anyway, so I think the easiest and best way is to just do the error handling ourself.  The design points for error handling in the server are as follows.  This includes the logging of errors in the server, errors sent back to the client from the server, and generating an access log in the server.  1) Create our own http.Server so we can create an HTTP access log as well as logging of each request received and response sent very easily, i.e. in one place in the code.  This code is currently in CFSSL and can not be changed (or at least not very easily).  2) Don't log errors deep in the request handling path, but rather return back to our http.Server object and log the error associated with the response there.  This ensures that we log an error in one place rather than split across multiple logging statements.  3) Create our own augmented error class which contains both an HTTP status code and an error code, allowing us to easily convey which HTTP status code to log at the top level.  4) Simplify the server handler interface to return a response body object or an error.  If a non-augmented error is returned, translate it to a 500 error.  This allows us to easily return any HTTP status code.  Given the way CFSSL code was structured, it was only possible to return 400 and 500 errors, not a 401 for example.  5) Create a context object to represent a request in the server to which the handlers have access.  This allows us to share logic between handlers more easily and thus be more consistent in error handling.  Because of this object, we no longer have to pass information between handlers via HTTP headers; instead, there is a real object to represent the request and response context, so we are able to add additional fields to it.  It also prevents us from having to read the request body multiple times, which we were doing previously; instead, we read it once and store it in this context object.  Also note that the bug described in FAB-3468 was because of CFSSL's error handling.  As already stated, it only allows us to return 400 and 500 HTTP status code errors and is just not very good and is way to complex to follow.  So I am copying and modifying (simplifying) the CFSSL error handling code, including where the access log was being written.  ></description> </Issue>
