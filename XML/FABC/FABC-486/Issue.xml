<Issue id="15470" key="FABC-486" number="486" project="10607" reporter="smithbk" assignee="skarim" creator="smithbk" type="10001" summary="Enhance fabric-ca-server to support multiple CAs" priority="3" resolution="10000" status="6" created="2017-03-27 19:38:56.0" updated="2018-07-20 19:15:52.0" resolutiondate="2017-04-25 18:24:50.0" votes="1" watches="4" workflowId="32668"> <description><! CDATA Enhance fabric-ca-server to support multiple CAs.  The goals are: 1) In a dev/test environment, to make it easy to use a single fabric-ca-server to host multiple CAs, each with its own root of trust. 2) Support the "OU" model in which a single fabric-ca-server manages multiple organizational units.   Each OU has its own CA cert signed by a root CA.  The fabric-ca-server init and start commands will support the following two additional mutually exclusive options: {code} 1) --cacount <number-of-CAs> This is really just a convenience method to automatically generate multiple cafiles as would be used in option 2 below. This is useful in a dev environment to spin up any number of CAs, automatically generating a unique name for each based on its index number.  2) --cafiles <CA-config-files> For each CA config file in the list, generate a separate signing CA.  Each CA config file in this list MAY contain all of the same elements as are found in the server config file except port, debug, and tls sections.  In other words, there will always only be one listening endpoint for all CAs hosted by the server. {code}  The config values for each CA hosted by the server are determined by looking in the CA config file 1st.  If the value is not specified there, then the normal precedence is used.   So for each config item for each CA server, the following precedence order is used to determine the value: 1) CA config file 2) command line option 3) environment variable 4) server config file 5) default value   For example, consider the following command: {code} fabric-ca-server start -b admin:adminpw --cacount 2 {code}  The above command will automatically generate the normal fabric-ca-server-config.yaml file with the additional elements: {code} cafiles: - ca/ca1/fabric-ca-server-config.yaml ca/ca2/fabric-ca-server-config.yaml {code} where ca/ca1/fabric-ca-server-config.yaml contains {code} ca: # Name of this CA name: ca1 {code} and ca/ca2/fabric-ca-server-config.yaml contains {code} ca: # Name of this CA name: ca2 {code}  Note that all relative path file names such as db.datasource, even though listened in the server config file, are treated as being relative to the CA config file.  This keeps all generated material separate for each CA.  For postgres and mysql options, a single database server may be configured, but a separate database name based on the "ca.name" will be created in order to keep all database elements separate.  If the server's config has a "ca" section, then it also serves as a root CA and all of the CA config files have associated CA certificates which are issued by the root CA.  The fabric-ca-client command will also add the "--ca <ca-name>" option to all commands to denote which CA the request is being sent to.   If no option is specified, the default CA will be used.  The default CA will be the name of the CA in the server config file if present, or the name in the 1st CA config file.  All REST requests will have an optional CA name field added to the request body.  The GET /info endpoint will be changed to support both GET /info and PUT /info.  The fabric-ca-client info command will always use POST /info so it can send a body.   ></description> </Issue>
