<Issue id="15496" key="FABC-369" number="369" project="10607" reporter="rennman" assignee="smithbk" creator="rennman" type="10004" summary="fabric-ca-server panic when statically linking against pthread lib" priority="2" resolution="10000" status="6" created="2017-03-29 14:12:26.0" updated="2018-07-18 22:04:27.0" resolutiondate="2017-10-25 20:39:59.0" votes="0" watches="5" workflowId="32549"> <description><! CDATA While attempting TLS-protected connections to a postgres DB, it was discovered that the fabric-ca-server is subject to panic as a consequence of a C system call to get the current DB user, user.Current() from the golang os package -- more specifically exploiting embedded c code in the user package via getpwuid_r().  An analysis shows that the code is victim to a bug in glibc, and is exposed when the app is statically linked against the pthread lib. An in-depth discussion can be found here: https://tschottdorf.github.io/golang-static-linking-bug  The simplest solution is just to build the docker execs without the -static flag. In docker-env.mk: #DOCKER_GO_LDFLAGS += -linkmode external -extldflags '-static -lpthread' DOCKER_GO_LDFLAGS += -linkmode external -extldflags '-lpthread'  I have verified this solution in my environment. By making this change and re-building both the exec and docker images, the problem is resolved. However, I don't have enough information to understand the genesis of this flag, and although I'm sure it merely propagated from the original fabric source tree, it warrants feedback from someone who understands the ramifications of such a base change, and whether it should be generally applied in other projects.   ></description> </Issue>
