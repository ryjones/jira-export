<Issue id="18524" key="FABC-210" number="210" project="10607" reporter="smithbk" assignee="smithbk" creator="smithbk" type="10004" summary="CI is failing frequently at client_whitebox_test.go:124" priority="3" resolution="10000" status="6" created="2017-06-21 19:22:17.0" updated="2018-07-18 22:03:53.0" resolutiondate="2017-07-27 19:55:19.0" votes="0" watches="1" workflowId="32390" security="10001"> <description><! CDATA The following failure is occurring more and more frequently in CI:  14:57:10 --- FAIL: TestTLSClientAuth (5.61s) 14:57:10 	client_whitebox_test.go:124: Failed to reenroll over HTTPS: POST failure  Post https://localhost:7058/reenroll: dial tcp 127.0.0.1:7058: getsockopt: connection refused ; not sending  The unit tests start and stop servers rapidly and has exposed a timing window in server close. This is not a problem that can occur when using the fabric-ca-server CLI, but only when using the library APIs as is done by the unit tests.  The Server object is defined in lib/server.go.  Here is how server.Stop is supposed to work. 1) The server.Stop function closes the listener file descriptor.  (I refer to the "stop thread" as the thread which calls server.Stop.) The stop thread then waits by reading from a channel associated with the server object. 2) The listener thread detects an error because the file descriptor was closed in #1 by the server thread. The listener thread then releases the listening port and writes true to the channel from which the stop thread is reading. 3) The stop thread reads from the channel and returns without error. 4) We are now safe to start the Server again because the port is now unbound.  The main problem was that the listener thread was writing true to the channel before checking to see if it needed to close the listener file descriptor.  The listener thread needs to try to close the file descriptor because it is possible that the listen will return for another reason other than Stop being called. Another problem is that the listener thread was also calling the logic to wait for the listener to finish.  This of course should have only been called by the stop thread. And finally, there was also a small timing window in closeListener that required a mutex.  ></description> </Issue>
