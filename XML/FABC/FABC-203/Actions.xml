<Action id="21388" issue="15251" author="smithbk" type="comment" created="2017-03-08 17:32:29.0" updateauthor="smithbk" updated="2017-03-08 17:32:29.0"> <body><! CDATA This is an issue in bccsp in fabric due to Vlad's change.  I suggest we handle as initially handled by cfssl as described at https://github.com/cloudflare/cfssl/pull/281/commits/df0f4fb436edacc03bde50ba5e9c8d53d111398d That is, we document the libtool dependency by default and add support for "-tags nopkcs11" for the go build. Either that or reverse it and build w/o pcks11 support by default and add support for "-tags pkcs11" support, noting the libtool dependency.  ></body> </Action>
<Action id="21393" issue="15251" author="mastersingh24" type="comment" created="2017-03-08 18:18:34.0" updateauthor="mastersingh24" updated="2017-03-08 18:18:34.0"> <body><! CDATA I agree with using tags as well as documenting the dependency. I'd say that for the fabric-ca-server the default should be PKCS11 and for fabric-ca-client the default should be NOPKCS11 but if we want to have a single default, then I'd go with PKCS11  ></body> </Action>
<Action id="21406" issue="15251" author="vpaprots" type="comment" created="2017-03-09 07:18:40.0" updateauthor="vpaprots" updated="2017-03-09 07:18:40.0"> <body><! CDATA fabric-ca-client I believe is to be used with -M option? need pkcs11 there as well.. I much rather have the 'document' approach. I don't think this is bias speaking, but let me explain..  Interesting about tags.. I would had thought that -tags option would download a specific git tag, but its actually documented as "a list of build tags to consider satisfied during the build". That was exactly what I was reaching for.  I was originally looking at things like here: http://blog.ralch.com/tutorial/golang-conditional-compilation/ (and I wouldnt want anything at ALL like that in our code! C preprocessor macros!? just no!)  That said.. conditional builds are evil. executable with pkcs11.. executable without pkcs11.. just doubled what dockers we need to push out!? test cases to run?  (Another 'too clever alternative' is to see if we can just copy the contents of the header into fabric.. whats in there? a C specification for dlopen() and other dll support functions? will look)  ></body> </Action>
<Action id="21407" issue="15251" author="smithbk" type="comment" created="2017-03-09 12:25:50.0" updateauthor="smithbk" updated="2017-03-09 12:45:59.0"> <body><! CDATA Copying the C header may cause the compile to succeed but would then fail to link I believe. Also, when it is compiled with the "-tags nopkcs11" option, we would need it to build in a mock version of miekg/pkcs11 which returns a nice error saying something like "PKCS11 is not supported in this build.  You must reinstall without the '-tags nopkcs11' flag to add PKCS11 support."  With regard to doubling test coverage, I'm thinking that we could create a main wrapper around the pkcs11 tests only and automate the testing both with and without the "-tags nopkcs11" within a single test run.  I don't think we need to run every test twice.  But that's a thought.      ></body> </Action>
<Action id="21428" issue="15251" author="smithbk" type="comment" created="2017-03-10 08:14:12.0" updateauthor="smithbk" updated="2017-03-10 08:14:12.0"> <body><! CDATA See https://github.com/miekg/pkcs11/pull/47 If this pull request is accepted quickly, then revendoring will work. If this pull request takes a while, the nopkcs11.go in the pull request could be used in bccsp as the basis for a solution.  ></body> </Action>
<Action id="21432" issue="15251" author="vpaprots" type="comment" created="2017-03-10 15:34:48.0" updateauthor="vpaprots" updated="2017-03-10 15:37:50.0"> <body><! CDATA  ~mastersingh24 , I think I misinterpreted "I agree with using tags as well as documenting the dependency." You want us to: 1. "use tags AND documenting the dependency." 2. "use tags OR documenting the dependency."  I interpreted that we just needed to 'document the dependency', no code involved.   Is the priority set to highest correct? Libtool header files are missing, we already installed them on the build machines. Things appear working.  NOTE: This dependency does also exist for fabric, so documentation needs an update there too NOTE2: If tags is to be the solution, I would rather see this done via BCCSP. PKCS11 Bindings are too low level for this.. Though I do wonder how we would do it for fabric build.. havent yet found tags option for `go build`  ></body> </Action>
<Action id="21439" issue="15251" author="smithbk" type="comment" created="2017-03-10 16:42:54.0" updateauthor="smithbk" updated="2017-03-10 16:46:03.0"> <body><! CDATA I'm dividing this into 2 jira items: one high priority and one normal.  1) High priority is to update docs to note this as a prereq with instructions of how to install.  Using this jira item for this one and I've assigned this to Allen since he has some experience with installing on various platforms.  The fabric-ca readthe docs that needs to be updated is in the prereqs section at the beginning of fabric/docs/source/Setup/ca-setup.rst.   I'm not sure where to update for fabric, but suggest grepping for "prereq" in docs.  2) Lower priority is to add build tag support to allow someone to build without PKCS11.   This is split off to jira item https://jira.hyperledger.org/browse/FAB-2731  ></body> </Action>
<Action id="21585" issue="15251" author="rennman" type="comment" body="Addressed in Change 7167 with documentation updates." created="2017-03-21 14:42:35.0" updateauthor="rennman" updated="2017-03-21 14:42:35.0"/>
