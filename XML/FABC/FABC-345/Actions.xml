<Action id="27897" issue="18987" author="smithbk" type="comment" body="I can&apos;t think of anything to even investigate here.  We will need to know how to reproduce to make progress on this." created="2017-07-05 19:21:00.0" updateauthor="smithbk" updated="2017-07-05 19:21:00.0"/>
<Action id="27898" issue="18987" author="ptippett" type="comment" body="OK.  Not surprised.  As soon as we see this again, I&apos;ll update the JIRA with a live network you can look at." created="2017-07-05 19:51:43.0" updateauthor="ptippett" updated="2017-07-05 19:51:43.0"/>
<Action id="27955" issue="18987" author="ptippett" type="comment" body="Hi Keith. Moving this to fabric 1.0 since we were able to reproduce and through further debug with Mihir, agreed this should be fixed for Fabric V1." created="2017-07-06 16:09:13.0" updateauthor="ptippett" updated="2017-07-06 16:09:13.0"/>
<Action id="27960" issue="18987" author="mrshah-ibm" type="comment" body="Uploaded all the debug info  ^ca_issue.zip " created="2017-07-06 17:30:08.0" updateauthor="mrshah-ibm" updated="2017-07-06 17:30:08.0"/>
<Action id="27962" issue="18987" author="smithbk" type="comment" created="2017-07-06 17:52:12.0" updateauthor="smithbk" updated="2017-07-06 17:53:26.0"> <body><! CDATA Some notes from debugging this.  It seems this is happening with two different users logging in concurrently to the same CA. We call the DB to get the password for each user.  The 1st one is failing because the 2nd "DB: Getting identity" is perhaps overwriting the result of the 1st before it can check the password of the 1st.  {code} 2017/07/05 22:04:05  INFO  Listening on https://0.0.0.0:7054 2017/07/05 22:04:11  DEBUG  Received request POST /enroll Authorization: Basic YWRtaW5QZWVyT3JnMUNBMjowMzRlMjIwNzk2 {"hosts":null,"certificate_request":"-----BEGIN CERTIFICATE REQUEST-----\nMIIBETCBuQIBADAbMRkwFwYDVQQDExBhZG1pblBlZXJPcmcxQ0EyMFkwEwYHKoZI\nzj0CAQYIKoZIzj0DAQcDQgAE8IBRqVpzhLm05YnHTxKxXE3Nb3lGtyzwYcvq/5P4\nV+JnkSER8JtHYLg2SHWRNFrSLkJgyGIAApBx8HAUESZ2LaA8MDoGCSqGSIb3DQEJ\nDjEtMCswGwYDVR0RBBQwEoIQZmFicmljLWNhLTE5MTAyYzAMBgNVHRMEBTADAQH/\nMAoGCCqGSM49BAMCA0cAMEQCIGmrrwxTM2WXiyYhRKFoNFRJqQRp2kxec+FgPWDA\n94nVAiAhTG15FkRRedAGo9zMe8uqCD8lOm7xJaxPuX3eulD3yA==\n-----END CERTIFICATE REQUEST-----\n","profile":"ca","crl_override":"","label":"","CAName":"PeerOrg1CA"} 2017/07/05 22:04:11  DEBUG  Directing traffic to CA PeerOrg1CA 2017/07/05 22:04:11  DEBUG  DB: Getting identity adminPeerOrg1CA2 2017/07/05 22:04:12  DEBUG  Received request POST /enroll Authorization: Basic YWRtaW5QZWVyT3JnMUNBMTo2ZDZmNDA3OWZj {"hosts":null,"certificate_request":"-----BEGIN CERTIFICATE REQUEST-----\nMIIBEjCBuQIBADAbMRkwFwYDVQQDExBhZG1pblBlZXJPcmcxQ0ExMFkwEwYHKoZI\nzj0CAQYIKoZIzj0DAQcDQgAEJN/sktMmSXi/WdXaeKDabU/NbrProOD/OfalbfY8\nKYhHvrnAc43bfUvK5sNQISewKdKf+HfAjk5NWRse68I5raA8MDoGCSqGSIb3DQEJ\nDjEtMCswGwYDVR0RBBQwEoIQZmFicmljLWNhLTE5MTAyYTAMBgNVHRMEBTADAQH/\nMAoGCCqGSM49BAMCA0gAMEUCIQDaurY91jpZjN51O4avU8gIp7buWk/md3G67MJA\n5u6GoQIgOxOblKuFWRuI4kDiUYO12NM45v5vRwR1W9ZAfnsRehg=\n-----END CERTIFICATE REQUEST-----\n","profile":"ca","crl_override":"","label":"","CAName":"PeerOrg1CA"} 2017/07/05 22:04:12  DEBUG  Directing traffic to CA PeerOrg1CA 2017/07/05 22:04:12  DEBUG  DB: Getting identity adminPeerOrg1CA1 2017/07/05 22:04:12  DEBUG  DB: Login user adminPeerOrg1CA2 with max enrollments of -1 and state of 0 2017/07/05 22:04:12  DEBUG  Failed to login 'adminPeerOrg1CA2': Incorrect password 2017/07/05 22:04:12  DEBUG  DB: Login user adminPeerOrg1CA1 with max enrollments of -1 and state of 0 2017/07/05 22:04:14  DEBUG  Successfully incremented state for identity adminPeerOrg1CA1 to 1 2017/07/05 22:04:14  DEBUG  DB: identity adminPeerOrg1CA1 successfully logged in 2017/07/05 22:04:14  DEBUG  Identity/Pass was correct {code}  The following code is suspicious and wondering if I could be misunderstanding how Go handles memory allocation of stack variables, but don't think so: {code} // GetUser gets user from database func (d *Accessor) GetUser(id string, attrs   string) (spi.User, error) { 	log.Debugf("DB: Getting identity %s", id)  	err := d.checkDB() 	if err != nil { 		return nil, err 	}  	var userRec UserRecord 	err = d.db.Get(&userRec, d.db.Rebind(getUser), id) 	if err != nil { 		return nil, err 	}  	return d.newDBUser(&userRec), nil } {code}  This also doesn't explain how the wrong password is in the actual DB, but it is still very suspicious that this happens 10% of the time and the concurrent login requests seem to fit that pattern.   ></body> </Action>
<Action id="27963" issue="18987" author="smithbk" type="comment" body="I submitted https://gerrit.hyperledger.org/r/11417 to include the passwords just to debug this, so narrow down where the password is going wrong." created="2017-07-06 18:13:56.0" updateauthor="smithbk" updated="2017-07-06 18:13:56.0"/>
<Action id="27966" issue="18987" author="mastersingh24" type="comment" body="Is the wrong password the same as the password for the other user?" created="2017-07-06 18:45:29.0" updateauthor="mastersingh24" updated="2017-07-06 18:45:29.0"/>
<Action id="27967" issue="18987" author="mrshah-ibm" type="comment" created="2017-07-06 20:13:00.0" updateauthor="mrshah-ibm" updated="2017-07-06 20:14:57.0"> <body><! CDATA  ~mastersingh24  no, it is not.. It is either partial or complete junk value.    {quote}sqlite> select * from users; admin|2773800200000|client|| \{"name":"hf.IntermediateCA","value":"1"},\{"name":"hf.Registrar.Roles","value":"client,user,peer,validator,auditor,ca"},\{"name":"hf.Registrar.DelegateRoles","value":"client,user,validator,auditor"},\{"name":"hf.Revoker","value":"1"} |0|-1 WebAppAdmin|37df13dae2|client|| \{"name":"hf.Registrar.DelegateRoles","value":"client,user,validator,auditor"},\{"name":"hf.Revoker","value":"1"},\{"name":"hf.IntermediateCA","value":"1"},\{"name":"hf.Registrar.Roles","value":"client,user,peer,validator,auditor,ca"} |0|-1 adminmanager|e26c580b48|client|| \{"name":"hf.Registrar.Roles","value":"client,user,peer,validator,auditor,ca"},\{"name":"hf.Registrar.DelegateRoles","value":"client,user,validator,auditor"},\{"name":"hf.Revoker","value":"1"},\{"name":"hf.IntermediateCA","value":"1"} |0|-1 adminPeerOrg1CA1|6d6f4079fc|client|| \{"name":"hf.IntermediateCA","value":"1"},\{"name":"hf.Registrar.Roles","value":"client,user,peer,validator,auditor,ca"},\{"name":"hf.Registrar.DelegateRoles","value":"client,user,validator,auditor"},\{"name":"hf.Revoker","value":"1"} |1|-1 adminPeerOrg1CA2|Inf|client|| \{"name":"hf.Revoker","value":"1"},\{"name":"hf.IntermediateCA","value":"1"},\{"name":"hf.Registrar.Roles","value":"client,user,peer,validator,auditor,ca"},\{"name":"hf.Registrar.DelegateRoles","value":"client,user,validator,auditor"} |0|-1 adminCA|adminCApw|client|| \{"name":"hf.IntermediateCA","value":"1"},\{"name":"hf.Registrar.Roles","value":"client,user,peer,validator,auditor,ca"},\{"name":"hf.Registrar.DelegateRoles","value":"client,user,validator,auditor"},\{"name":"hf.Revoker","value":"1"} |0|-1 adminOrderer|adminOrdererpw|client|| \{"name":"hf.Revoker","value":"1"},\{"name":"hf.IntermediateCA","value":"1"},\{"name":"hf.Registrar.Roles","value":"client,user,peer,validator,auditor,ca,orderer"},\{"name":"hf.Registrar.DelegateRoles","value":"client,user,validator,auditor,orderer"} |0|-1 adminPeer|adminPeerpw|client|| \{"name":"hf.Registrar.Roles","value":"client,user,peer,validator,auditor,ca"},\{"name":"hf.Registrar.DelegateRoles","value":"client,user,validator,auditor"},\{"name":"hf.Revoker","value":"1"},\{"name":"hf.IntermediateCA","value":"1"} |0|-1 {quote}    admin|2773800200000 should be admin|27738002e5  adminPeerOrg1CA2|Inf should be adminPeerOrg1CA2|034e220796  as per the config below {quote}\{ "name": "admin", "pass": "27738002e5", "type": "client", "maxEnrollments": 0, "affiliation": "", "attrs": \{ "hf.Registrar.Roles": "client,user,peer,validator,auditor,ca", "hf.Registrar.DelegateRoles": "client,user,validator,auditor", "hf.Revoker": true, "hf.IntermediateCA": true } }, {quote}   {quote}\{ "name": "adminPeerOrg1CA2", "pass": "034e220796", "type": "client", "maxEnrollments": 0, "affiliation": "", "attrs": \{ "hf.Registrar.Roles": "client,user,peer,validator,auditor,ca", "hf.Registrar.DelegateRoles": "client,user,validator,auditor", "hf.Revoker": true, "hf.IntermediateCA": true } }, {quote}  ></body> </Action>
<Action id="27968" issue="18987" author="smithbk" type="comment" created="2017-07-06 20:21:22.0" updateauthor="smithbk" updated="2017-07-06 20:21:22.0"> <body><! CDATA There is a conversion problem for passwords with a lowercase “e” down in the sqlx library code. We can work around this by changing the type of the password field to   byte and casting ourselves before storing in the DB.  I have the fix but am working on a test case now.  ></body> </Action>
<Action id="27969" issue="18987" author="jonathanlevi" type="comment" created="2017-07-06 20:25:16.0" updateauthor="jonathanlevi" updated="2017-07-06 20:25:16.0"> <body><! CDATA Hi all,  ~smithbk  "*There is a conversion problem for passwords with a lowercase “e” down in the sqlx library code."*  What is the issue please and why do we believe that it is only with a lowercase "e" ? ** I would like to identify the issue before we evaluate e quick workaround, please... Thanks.     ></body> </Action>
<Action id="27970" issue="18987" author="jonathanlevi" type="comment" created="2017-07-06 20:30:53.0" updateauthor="jonathanlevi" updated="2017-07-06 21:01:27.0"> <body><! CDATA Also, ״by *changing the type of the password field* to   byte and casting ourselves *before storing in the DB*.״  1. What type is the password field now?  2. Are you/we still storing passwords in cleartext in the DB?  ></body> </Action>
<Action id="27973" issue="18987" author="mastersingh24" type="comment" created="2017-07-06 21:00:49.0" updateauthor="mastersingh24" updated="2017-07-06 21:02:02.0"> <body><! CDATA I don't think this is a "bug" with sqlx - it appears that it is treating this as numbers and evaluating "e" as an exponent.  I'm sure if the database field type was a char / varchar rather than bytes / blobs this would likley not happen  ></body> </Action>
<Action id="27974" issue="18987" author="jonathanlevi" type="comment" body="I&apos;m 100% sure it&apos;s not a bug in sqlx. Can we please get a few samples of the &quot;breaking stuff&quot; ? Sorry, trying to assist..." created="2017-07-06 21:04:30.0" updateauthor="jonathanlevi" updated="2017-07-06 21:04:30.0"/>
<Action id="27975" issue="18987" author="smithbk" type="comment" created="2017-07-06 21:19:53.0" updateauthor="smithbk" updated="2017-07-06 21:19:53.0"> <body><! CDATA Right, I assume it is a sqlx feature to do this conversion ... not one that I was aware of. 1) The type of the password field is now   byte in UserRecord.  It was previously string. I didn't change the SQL type.  It is still "bytea". I could have made the type varchar and then limit the password length, but thought it was easier to store as bytes. 2) Yes, we are storing in cleartext in the DB, though I don't recall this being flagged earlier. We should store the hash and compare hashes. Is this another change for v1?    ></body> </Action>
<Action id="27976" issue="18987" author="smithbk" type="comment" body="See https://gerrit.hyperledger.org/r/#/c/11417/3/lib/server_test.go for a test case" created="2017-07-06 21:34:56.0" updateauthor="smithbk" updated="2017-07-06 21:34:56.0"/>
<Action id="27977" issue="18987" author="jonathanlevi" type="comment" created="2017-07-06 21:37:13.0" updateauthor="jonathanlevi" updated="2017-07-06 21:37:13.0"> <body><! CDATA I see, one use-case. So it's not the sqlx, Gari is right above...   Please can you answer the above 3 questions? Also, does the test case fail without the fix?     ></body> </Action>
<Action id="27978" issue="18987" author="jonathanlevi" type="comment" created="2017-07-06 21:42:51.0" updateauthor="jonathanlevi" updated="2017-07-06 21:42:51.0"> <body><! CDATA OK, so instead of waiting - just quickly, I remember us ( ~mastersingh24 ,  ~JonathanLevi ) merging it, "temporarily", 6 months ago, during the "COP" days:  https://gerrit.hyperledger.org/r/#/c/4387   But it seems like still, until now: passwords are stored, passed around and compared in the clear :(  https://github.com/hyperledger/fabric-ca/blob/f013d54aa432a67bb5398369afb8b1572ad02e7f/lib/dbaccessor.go#L350-L352   So  ~smithbk  suggests to start comparing a   byte to a   byte of passwords in the clear above.  What are we going to do? I'm open to suggestions.  ></body> </Action>
<Action id="27979" issue="18987" author="smithbk" type="comment" created="2017-07-06 22:14:35.0" updateauthor="smithbk" updated="2017-07-06 22:14:35.0"> <body><! CDATA Jonathan, I thought I had responded to all questions.   Could you point out which ones I missed?  Thanks  Yes, the test case fails without the fix and it passes with the fix.    ></body> </Action>
<Action id="27980" issue="18987" author="yacovm" type="comment" created="2017-07-06 22:15:10.0" updateauthor="yacovm" updated="2017-07-06 22:26:49.0"> <body><! CDATA {code:java} CREATE TABLE users (id VARCHAR(64) NOT NULL, token blob, type VARCHAR(64), affiliation VARCHAR(64), attributes VARCHAR(256), state INTEGER, max_enrollments INTEGER, PRIMARY KEY (id)) DEFAULT CHARSET=utf8 COLLATE utf8_bin{code} This is the code that creates the users table, right?  My suggestion (in case we want not to store passwords as they are stored now) is that we store the hash of the password the user provided and upon login, we compare the hash.  We also can use a randomly generated salt for each user record.  In order to be backward compatible we can do the following:  Make a patch that upon startup of the fabric-CA, it checks if the table has the salt column and: * If yes- means database was upgraded before, so proceeds without doing anything. * If not - means the database needs to be upgraded. So it copies the users table to a temporary table, drops the user table, creates it anew with the salt column, and then copies the data where the token is hashed and then put into the token column of the new table (I guess we can maybe use ALTER TABLE but not sure if all RDBMS providers of fabric-CA have this statement)   *Note: Of course, this is only a suggestion to a circumstance in which we decide to change the way the users table is saved in the database.*     ></body> </Action>
<Action id="27992" issue="18987" author="smithbk" type="comment" created="2017-07-07 03:45:00.0" updateauthor="smithbk" updated="2017-07-07 03:53:26.0"> <body><! CDATA I created a separate jira item for storing the hash of the password in the DB. See https://jira.hyperledger.org/browse/FAB-5203. If this is merged for v1, we shouldn't have to worry about backwards compatibility. The bcrypt library generates a random salt for each hash under the covers.  ></body> </Action>
