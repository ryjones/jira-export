<Issue id="28510" key="FABC-543" number="543" project="10607" reporter="dsanchezseco" creator="dsanchezseco" type="10001" summary="Inaccurate naming of CA certs when calling &quot;fabric-ca-client getcacerts&quot;" priority="4" status="10000" created="2018-03-14 09:52:06.0" updated="2019-07-27 14:48:54.0" votes="0" watches="0" timeoriginalestimate="3600" timeestimate="3600" workflowId="32725"> <description><! CDATA The command returns the CA and TLS certificates in the db and place them correctly in the MSP subfolders, but the naming is inaccurate as is using the host's url for the naming of the certs instead of the name of the proprietary of the cert.     !image-2018-03-14-10-48-16-788.png!  the .pem in cacerts should be named rca instead of ica (and probably the port shouldn't be included as is reffering to the called CA not to the actual CA owner of that cert).  Additionally the certs are being created even if there aren't(empty file)   *fabric-ca/cmd/fabric-ca-client/getcacert.go ; 91-170*    {code:java} // Store the CAChain in the CACerts folder of MSP (Membership Service Provider) // The root cert in the chain goes into MSP 'cacerts' directory. // The others (if any) go into the MSP 'intermediatecerts' directory. func storeCAChain(config *lib.ClientConfig, si *lib.GetServerInfoResponse) error { mspDir := config.MSPDir // Get a unique name to use for filenames serverURL, err := url.Parse(config.URL) if err != nil { return err } fname := serverURL.Host //<- name generation if config.CAName != "" { fname = fmt.Sprintf("%s-%s", fname, config.CAName) } fname = strings.Replace(fname, ":", "-", -1) fname = strings.Replace(fname, ".", "-", -1) + ".pem" tlsfname := fmt.Sprintf("tls-%s", fname)  ...  // Store the root certificates in the "cacerts" msp folder certBytes := bytes.Join(rootBlks,   byte("")) if config.Enrollment.Profile == "tls" { err := storeCert("TLS root CA certificate", tlsRootCACertsDir, tlsfname, certBytes) //<-  ..  } else { err = storeCert("root CA certificate", rootCACertsDir, fname, certBytes) //<-  ..  } // Store the intermediate certificates in the "intermediatecerts" msp folder certBytes = bytes.Join(intBlks,   byte("")) if config.Enrollment.Profile == "tls" { err = storeCert("TLS intermediate certificates", tlsIntCACertsDir, tlsfname, certBytes) //<-  ..  } else { err = storeCert("intermediate CA certificates", intCACertsDir, fname, certBytes) //<-  ..  } return nil } {code}    ></description> </Issue>
