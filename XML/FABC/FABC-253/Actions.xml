<Action id="30677" issue="20692" author="lehors" type="comment" created="2017-09-08 13:19:15.0" updateauthor="lehors" updated="2017-09-08 15:00:22.0"> <body><! CDATA The main issue has to do with opening DBs and never explicitly closing them. server.Init() opens the DB (there actually are more than one in case of a mutli-CA server but the problem is the same) and nothing/nobody closes it.  This problem can mostly be addressed by adding a server function to close its DB. The question is who should be responsible for calling this function and when?  server.Stop() can call it but in the case where server.Start() hasn't been called this isn't appropriate (server.Stop() will actually raise an error). So, one would need to call it after calling server.Init() if server.Start() is not called.   ~keithsmith  in a chat exchange ( https://chat.hyperledger.org/channel/fabric-pr-review?msg=CiELHAAL53ZFSA5Tv ) mentioned that Init shouldn't leave the DB open. However, closing it makes every subsequent operation, such as GetUser(), fails because they all assume that the DB is open. Should Init really close the DB then? If so when should it be reopened? When Start is called?  Besides, there are many error cases that have to be dealt with which raises again the question of when the DB should be closed. For instance, should server.Init() close the DB if it's returning an error? What about server.Start()?  ></body> </Action>
<Action id="30686" issue="20692" author="lehors" type="comment" created="2017-09-08 18:48:29.0" updateauthor="lehors" updated="2017-09-08 18:48:29.0"> <body><! CDATA So here are two possible approaches that seem reasonable:  Approach #1: * Let Init() open the DB and leave it open unless an error is raised (if any error is returned the DB is closed if it ever were opened). * Add a public function called CloseDB() that must be explicitly called if Init() was called and didn't return any error, and Start() is never called. * Have Stop() call CloseDB()   Approach #2: * Add a private function called closeDB() * Let Init() open the DB and close it before returning. * Have Start() reopen the DB and leave it open unless an error is raised ((if any error is returned the DB is closed) * Have Stop() call closeDB()   The advantage of the latter is that it keeps this whole business away from the application. The disadvantage is that it requires closing and reopening the DB(s) (there are several of them in case of a multiCA server).  For what it's worth approach #1 is the easiest to implement because it is closer to how the code works today.  ></body> </Action>
<Action id="30738" issue="20692" author="lehors" type="comment" created="2017-09-11 19:56:02.0" updateauthor="lehors" updated="2017-09-11 19:56:45.0"> <body><! CDATA I investigated both approaches and I'm now leaning towards #2 because it leaves the server API unchanged and keeps this DB management business internal to the server.  This does come at a cost in that the DB is closed and reopened if one explicitly calls Init() and then Start() as described above but this can be avoided in case Start() is called directly. So, all in all, this seems a reasonable trade-off.     ></body> </Action>
