<Action id="23973" issue="16812" author="smithbk" type="comment" created="2017-05-17 21:52:45.0" updateauthor="smithbk" updated="2017-05-17 21:52:45.0"> <body><! CDATA So the CSRs in bc.pem and ibm.pem work correctly, but the CSR shown in the trace does not work.  Is that correct?   I properly formatted the CSR from the trace and placed it in a file named `csr.pem` as shown below. {code:java} ----BEGIN CERTIFICATE REQUEST--- MIIBqDCCAU4CAQAwEDEOMAwGA1UEAxMFYWRtaW4wggEzMIHsBgcqhkjOPQIBMIHg AgEBMCwGByqGSM49AQECIQD/////AAAAAQAAAAAAAAAAAAAAAP////////////// /zBEBCD/////AAAAAQAAAAAAAAAAAAAAAP///////////////AQgWsY12Ko6k+ez 671VdpiGvGUdBrDMU7D2O848PifSYEsEQQRrF9Hy4SxCR/i85uVjpEDydwN9gS3r M6D0oTlF2JjClk/jQuL+Gn+bjufrSnwPnhYrzjNXazFezsu2QGg3v1H1AiEA//// /wAAAAD//////////7zm+q2nF56E87nKwvxjJVECAQEDQgAE80dMWkLUc1JHRBcr EcpBVUkBfLiJ2NPY56anGU19ZRSE1w7DZIybcTLbz6UqCKZHPYzr+SrMA8wdY7qH 3C/VxKAAMAoGCCqGSM49BAMCA0gAMEUCIQD+YcWlMUFV21EA4JnxyxmWXk6R6f0u 2eMlEQ3FdS///QIgO6zWfKzEg359t9fhsYeNZUG4EHPbk0ZNXCwe1spn3vg= ---END CERTIFICATE REQUEST----{code} And then try to parse it as follows, I get an error from openssl: {code:java} $ openssl req -in csr.pem -noout -text unable to load X509 request 85197:error:0906D06C:PEM routines:PEM_read_bio:no start line:/BuildRoot/Library/Caches/com.apple.xbs/Sources/OpenSSL098/OpenSSL098-64.30.2/src/crypto/pem/pem_lib.c:648:Expecting: CERTIFICATE REQUEST{code}    ></body> </Action>
<Action id="23975" issue="16812" author="rickr" type="comment" created="2017-05-17 21:57:44.0" updateauthor="rickr" updated="2017-05-17 21:57:44.0"> <body><! CDATA openssl req -in bc.pem -noout -text Certificate Request: Data: Version: 0 (0x0) Subject: CN=admin Subject Public Key Info: Public Key Algorithm: id-ecPublicKey Public-Key: (256 bit) pub:  04:64:df:ce:bc:a3:34:1f:96:d4:6a:9d:aa:12:7a: b5:3c:98:40:26:b3:e3:13:f3:64:0d:be:10:5c:a2: 86:d0:81:33:ac:92:5f:43:a8:f2:91:c0:b6:75:23: 49:52:fd:e9:7d:01:98:39:50:d4:11:fb:54:f2:78: f0:98:b0:cb:fd ASN1 OID: prime256v1 NIST CURVE: P-256 Attributes: a0:00 Signature Algorithm: ecdsa-with-SHA256 30:44:02:20:79:6b:34:26:f4:fb:60:c6:69:93:67:07:9e:c3: a7:c2:b8:52:37:20:c2:ad:6c:c1:c5:5a:e0:24:05:32:e7:37: 02:20:49:73:bd:f7:f5:14:55:16:11:7f:70:9d:2c:fa:2c:40: 1b:92:e9:f4:0a:b3:86:c5:78:71:a9:1d:a0:d5:91:15  ></body> </Action>
<Action id="23976" issue="16812" author="rickr" type="comment" created="2017-05-17 21:58:40.0" updateauthor="rickr" updated="2017-05-17 21:58:40.0"> <body><! CDATA openssl req -in ibm.pem -noout -text Certificate Request: Data: Version: 0 (0x0) Subject: CN=admin Subject Public Key Info: Public Key Algorithm: id-ecPublicKey Public-Key: (256 bit) pub:  04:cf:28:1f:f7:70:70:45:d7:e3:36:1a:dd:68:b6: 8e:6d:92:24:bb:3d:cc:45:c5:39:f0:9f:40:a6:56: 47:5c:4d:07:0b:80:f8:9d:d3:fe:b3:e7:2c:25:50: 8b:19:f5:30:67:b6:91:fb:3a:9e:a9:a3:5c:c8:56: 86:13:f1:48:b0 Field Type: prime-field Prime: 00:ff:ff:ff:ff:00:00:00:01:00:00:00:00:00:00: 00:00:00:00:00:00:ff:ff:ff:ff:ff:ff:ff:ff:ff: ff:ff:ff A:  00:ff:ff:ff:ff:00:00:00:01:00:00:00:00:00:00: 00:00:00:00:00:00:ff:ff:ff:ff:ff:ff:ff:ff:ff: ff:ff:fc B:  5a:c6:35:d8:aa:3a:93:e7:b3:eb:bd:55:76:98:86: bc:65:1d:06:b0:cc:53:b0:f6:3b:ce:3c:3e:27:d2: 60:4b Generator (uncompressed): 04:6b:17:d1:f2:e1:2c:42:47:f8:bc:e6:e5:63:a4: 40:f2:77:03:7d:81:2d:eb:33:a0:f4:a1:39:45:d8: 98:c2:96:4f:e3:42:e2:fe:1a:7f:9b:8e:e7:eb:4a: 7c:0f:9e:16:2b:ce:33:57:6b:31:5e:ce:cb:b6:40: 68:37:bf:51:f5 Order:  00:ff:ff:ff:ff:00:00:00:00:ff:ff:ff:ff:ff:ff: ff:ff:bc:e6:fa:ad:a7:17:9e:84:f3:b9:ca:c2:fc: 63:25:51 Cofactor: 1 (0x1) Attributes: Requested Extensions: X509v3 Subject Key Identifier:  94:D9:6A:5E:22:2D:0D:90:94:91:ED:80:91:74:D2:75:BB:4D:AD:02 Signature Algorithm: ecdsa-with-SHA256 30:45:02:20:11:bb:04:5f:05:91:2e:ce:65:ef:bc:8c:25:39: 23:e2:50:3f:3b:49:e0:18:0c:93:62:32:2e:4e:03:2a:f5:9a: 02:21:00:8f:b4:0e:88:03:9c:8c:c1:0d:8c:ec:29:fc:63:1e: d5:77:57:ed:8b:45:53:08:d2:ac:e5:0c:09:d0:8d:c3:16  ></body> </Action>
<Action id="23977" issue="16812" author="rickr" type="comment" created="2017-05-17 21:59:58.0" updateauthor="rickr" updated="2017-05-17 21:59:58.0"> <body><! CDATA Down loaded both .. see results above.     No bc.pem IS accepted by FabricCA ibm.pem is NOT  ></body> </Action>
<Action id="23982" issue="16812" author="smithbk" type="comment" created="2017-05-17 22:27:45.0" updateauthor="smithbk" updated="2017-05-17 22:28:36.0"> <body><! CDATA Given the BCCSP integration, fabric-ca-server now uses BCCSP to sign a CSR, so the error is occurring there.  Note the error "asn1: structure error: tags don't match" in the trace.  Unfortunately, BCCSP doesn't prepend context to an error so we don't know for sure what path it took to return this error.  My guess would be that the call to "ecdsa.Sign" below in fabric/bccsp/sw is returning the error, but without any debug logging or adding context to errors, it is difficult to tell for sure.  Anyway, hopefully Vlad will know off the top of his head.  If not, we will need to be able to reproduce and add more logging to debug. {code:java} func signECDSA(k *ecdsa.PrivateKey, digest   byte, opts bccsp.SignerOpts) (signature   byte, err error) {         r, s, err := ecdsa.Sign(rand.Reader, k, digest)         if err != nil {                 return nil, err         }          s, _, err = ToLowS(&k.PublicKey, s)         if err != nil {                 return nil, err         }          return MarshalECDSASignature(r, s) } {code}       ></body> </Action>
<Action id="23983" issue="16812" author="rickr" type="comment" body="Was told that CSSFL was doing the parsing. Are you using the latest CSSFL ? " created="2017-05-17 22:30:56.0" updateauthor="rickr" updated="2017-05-17 23:17:23.0"/>
<Action id="24011" issue="16812" author="smithbk" type="comment" created="2017-05-18 12:30:35.0" updateauthor="smithbk" updated="2017-05-18 12:36:17.0"> <body><! CDATA The problem is not in CFSSL nor in BCCSP.  It is in the x509.ParseCertificateRequest function apparently.  I was able to reproduce the error with the code below.  One thing I don't yet understand is why I had to add some extra dash characters to the csr string below in the code in order to reproduce; otherwise, pem.Decode fails since it expects 5 dash characters.   Without these characters in the original request in the description, I'm still not sure why we don't get a "PEM block not found" error instead, which makes me think that we may be losing some characters in the process of logging some how???  Anyway, next to dig into the x509.ParseCertificateRequest method.  I'm wondering if the inner encoding may be BER instead of DER for example.  BER is a superset of DER.  Continuing to investigate. {code:java} package main  import (   "fmt"   "encoding/pem"   "crypto/x509" )  func main() {    csr := ` -----BEGIN CERTIFICATE REQUEST----- MIIBqDCCAU4CAQAwEDEOMAwGA1UEAxMFYWRtaW4wggEzMIHsBgcqhkjOPQIBMIHg AgEBMCwGByqGSM49AQECIQD/////AAAAAQAAAAAAAAAAAAAAAP////////////// /zBEBCD/////AAAAAQAAAAAAAAAAAAAAAP///////////////AQgWsY12Ko6k+ez 671VdpiGvGUdBrDMU7D2O848PifSYEsEQQRrF9Hy4SxCR/i85uVjpEDydwN9gS3r M6D0oTlF2JjClk/jQuL+Gn+bjufrSnwPnhYrzjNXazFezsu2QGg3v1H1AiEA//// /wAAAAD//////////7zm+q2nF56E87nKwvxjJVECAQEDQgAE80dMWkLUc1JHRBcr EcpBVUkBfLiJ2NPY56anGU19ZRSE1w7DZIybcTLbz6UqCKZHPYzr+SrMA8wdY7qH 3C/VxKAAMAoGCCqGSM49BAMCA0gAMEUCIQD+YcWlMUFV21EA4JnxyxmWXk6R6f0u 2eMlEQ3FdS///QIgO6zWfKzEg359t9fhsYeNZUG4EHPbk0ZNXCwe1spn3vg= -----END CERTIFICATE REQUEST-----    `    block, _ := pem.Decode(  byte(csr))    if block == nil {       panic("PEM block not found")    }    if block.Type != "NEW CERTIFICATE REQUEST" && block.Type != "CERTIFICATE REQUEST" {       panic("Invalid PEM block type: "+block.Type)    }    req, err := x509.ParseCertificateRequest(block.Bytes)    if err != nil {       panic("Failed to parse request: "+err.Error())    }    fmt.Printf("OK: %+v\n", req) } {code}          ></body> </Action>
<Action id="24034" issue="16812" author="smithbk" type="comment" created="2017-05-18 16:21:29.0" updateauthor="smithbk" updated="2017-05-18 16:21:29.0"> <body><! CDATA OK, I've taken this as far as I can for now, until we get more info from the provider.   Here is a modified version of the program above which they can use to both reproduce and verify if/when they are able to support this other format which the golang x509.ParseCertificateRequest supports.   To use it, just compile and run with the filename as the argument to see if it works. {code:java} package main  import (     "crypto/x509"     "encoding/pem"     "fmt"     "io/ioutil"     "os" )  func main() {     if len(os.Args) != 2 {         fmt.Printf("Usage: %s <CSR-file>\n", os.Args 0 )         os.Exit(1)     }     buf, err := ioutil.ReadFile(os.Args 1 )     if err != nil {         fmt.Printf("Failed to read file: %s\n", err)         os.Exit(1)     }     block, _ := pem.Decode(buf)     if block == nil {         fmt.Printf("Failed to find PEM block: %s\n", err)         os.Exit(1)     }     if block.Type != "NEW CERTIFICATE REQUEST" && block.Type != "CERTIFICATE REQUEST" {         fmt.Printf("Invalid PEM block type: %s\n", block.Type)         os.Exit(1)     }     _, err = x509.ParseCertificateRequest(block.Bytes)     if err != nil {         fmt.Printf("Failed to parse CSR: %s\n", err)         os.Exit(1)     }     fmt.Printf("Successfully parsed CSR\n") } {code}    ></body> </Action>
<Action id="25079" issue="16812" author="rickr" type="comment" body="Has this been reported to the _provider_?  Issue/ticket # ?" created="2017-06-02 10:47:00.0" updateauthor="rickr" updated="2017-06-02 10:47:00.0"/>
<Action id="25216" issue="16812" author="mastersingh24" type="comment" body="I&apos;m adding fabric-sdk-java as a component as well" created="2017-06-03 09:50:44.0" updateauthor="mastersingh24" updated="2017-06-03 09:50:44.0"/>
<Action id="25228" issue="16812" author="rickr" type="comment" body="The issue/fix is with fabric_ca any other user of ca could generate valid certificates as those and hit the same issue." created="2017-06-03 12:17:13.0" updateauthor="rickr" updated="2017-06-03 12:17:13.0"/>
<Action id="25660" issue="16812" author="smithbk" type="comment" created="2017-06-07 15:35:53.0" updateauthor="smithbk" updated="2017-06-07 15:35:53.0"> <body><! CDATA Vlad, I'm assigning to you so that you can paste the link for the issue opened against the provider.  IIRC, you opened one. We decided to wait until hearing from the provider before proceeding with writing our own code to handle this format.  This is the issue in which the ecdsa public key in the CSR was stored with A & B values directly, but the golang ParseCertificate doesn't recognize that format.   ></body> </Action>
<Action id="28687" issue="16812" author="vpaprots" type="comment" created="2017-07-19 17:19:47.0" updateauthor="vpaprots" updated="2017-07-19 17:19:47.0"> <body><! CDATA  ~rickr  can you confirm that you got the fix from IBMJCE team and it works please?  That said, even if the fix is there, do we want to handle this case regardless? (somebody that did not apply the above ifix.. or some other library that specifies the curve via A&B.. we could include the ifix as part of the dependency lists)  I looked through the Golang code, no A or B specified..    {quote}// See FIPS 186-3, section D.2.3  p256Params = &CurveParams\{Name: "P-256"}  p256Params.P, _ = new(big.Int).SetString("115792089210356248762697446949407573530086143415290314195533631308867097853951", 10)  p256Params.N, _ = new(big.Int).SetString("115792089210356248762697446949407573529996955224135760342422259061068512044369", 10)  p256Params.B, _ = new(big.Int).SetString("5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b", 16)  p256Params.Gx, _ = new(big.Int).SetString("6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296", 16)  p256Params.Gy, _ = new(big.Int).SetString("4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5", 16)  p256Params.BitSize = 256     p256RInverse, _ = new(big.Int).SetString("7fffffff00000001fffffffe8000000100000000ffffffff0000000180000000", 16) {quote}  so we would have to hardcode our own A&B, to match it to the right curve..  ></body> </Action>
<Action id="28688" issue="16812" author="rickr" type="comment" body="Yes I got a fix and it worked.  However still see this as an issue as the certificate was valid even without the _fix._" created="2017-07-19 17:25:52.0" updateauthor="rickr" updated="2017-07-19 17:25:52.0"/>
<Action id="30505" issue="16812" author="smithbk" type="comment" body="Is this really a highest priority?" created="2017-09-05 13:43:00.0" updateauthor="smithbk" updated="2017-09-05 13:43:00.0"/>
<Action id="30506" issue="16812" author="rickr" type="comment" body="Given that it&apos;s not been addressed in over 3 months guess not. " created="2017-09-05 13:52:36.0" updateauthor="rickr" updated="2017-09-05 13:52:36.0"/>
<Action id="34333" issue="16812" author="mastersingh24" type="comment" created="2017-11-04 13:34:24.0" updateauthor="mastersingh24" updated="2017-11-04 13:34:24.0"> <body><! CDATA I'm closing this as WON'T FIX as there is no requirement to support every possible format, especially formats that don't appear to be in widespread use.  Unless I'm missing something, fabric-ca (via Golang) supports PKCS10 using RFC5480 for EC Subject Public Key Info.    And FWIW - openssl generates CSRs in the above format as well  ></body> </Action>
