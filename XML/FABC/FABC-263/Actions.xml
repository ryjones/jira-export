<Action id="21588" issue="15415" author="smithbk" type="comment" created="2017-03-21 15:15:21.0" updateauthor="smithbk" updated="2017-03-21 15:15:21.0"> <body><! CDATA I agree with making this more user-friendly by: 1) handling with or without the leading 0.  If it is difficult to determine exactly when to prepend the leading 0, you may consider using the LIKE operator with a pattern match, obviously being careful to not match something we shouldn't.  This may be more applicable to other DBs also.  This is just a consideration. 2) I think allowing decimal is good.  The rule could be that we assume hex if there is a non-decimal character; otherwise, we assume decimal.  We also look for a leading "0x" and strip it off if present.  ></body> </Action>
<Action id="21594" issue="15415" author="rennman" type="comment" created="2017-03-21 16:01:47.0" updateauthor="rennman" updated="2017-03-21 16:01:47.0"> <body><! CDATA 1 - I think the basic user assumption is that the SN is treated as an integer up to but not exceeding 160 bits and treated accordingly, not as a string. Consequently, if wildcarding produces the intended result, that's fine. I will test with all the DB's we support.  2 - As a user I don't find it to be overly burdensome to even go so far as to require '0x' to explicitly indicate hexadecimal to eliminate any ambiguity.  ></body> </Action>
<Action id="21773" issue="15415" author="rennman" type="comment" created="2017-03-31 16:34:48.0" updateauthor="rennman" updated="2017-03-31 16:34:48.0"> <body><! CDATA Since the revoke code has been merged, this is a serious issue. All operations (register, revoke, reenroll) fail intermittently. I thought I was seeing things, but a basic loop:  {code:java} while ./scripts/fvt/reregister_test.sh;do :; done  {code} in a script file, and run in the fabric-fvt container  {code:java} docker run -ti -v $PWD:/opt/gopath/src/github.com/hyperledger/fabric-ca hyperledger/fabric-ca-fvt ./repeat.sh {code}  will show that occasionally, a certificate is issued that causes us to add the leading 0 -- 2017/03/31 15:37:45  DEBUG  Checking for revocation/expiration of certificate owned by 'admin' 2017/03/31 15:37:45  DEBUG  DB: Get certificate by serial (20e246b27fe0e2b18d4ccf4d77da47b482d5983b) and aki (062d7886188106355e299ee6d97c44dad8aecb18) Error: Error response from server was: Authorization failure  but the DB shows admin|20e246b27fe0e2b18d4ccf4d77da47b482d5983b|62d7886188106355e299ee6d97c44dad8aecb18||good|0| ...  I reaffirm my insistence that SN is a 20 octet, non-negative number, regardless of it's encoding and should treated as such. I understand that few, if any SQL implementations have native support for huge integers, so a little massaging of the data is necessary.  ></body> </Action>
<Action id="21774" issue="15415" author="rennman" type="comment" body="Just a clarification that the above failure was due to the inability to find the cert via AKI, so I suppose a similar logic applies." created="2017-03-31 16:54:18.0" updateauthor="rennman" updated="2017-03-31 16:54:18.0"/>
<Action id="21844" issue="15415" author="skarim" type="comment" body="So if I understand correctly, that database does not store any zeros in front of serial or aki. If we were to remove any leading zeros in user input of serial and/or aki then the database lookup of certificate should succeed. " created="2017-04-03 17:19:16.0" updateauthor="skarim" updated="2017-04-03 17:19:16.0"/>
<Action id="21845" issue="15415" author="rennman" type="comment" body="Evidently. When I display the DB with the cmd-line tool, the leading zeros do not appear." created="2017-04-03 17:46:31.0" updateauthor="rennman" updated="2017-04-03 17:46:31.0"/>
<Action id="22085" issue="15415" author="skarim" type="comment" body="This has already been fixed, leading zeros are not stored in DB. However, this caused the certificate lookup issue which I opened https://jira.hyperledger.org/browse/FAB-3038 to address. I am marking this as done. " created="2017-04-11 13:51:00.0" updateauthor="skarim" updated="2017-04-11 13:51:20.0"/>
