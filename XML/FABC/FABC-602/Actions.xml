<Action id="18572" issue="12465" author="christopherferris" type="comment" body="copying last comment for posterity - @ibmmark @JonathanLevi @mastersingh24 IMO, we&apos;ve only addressed a symptom. The root cause is actually not the bloated TCert storing, but that we don&apos;t have an effective strategy for dealing with a long running system vis storage of the db. We&apos;ve only prolonged things a bit by addressing the symptom. Not saying that removing the TCerts was a bad idea. It was necessary. However, we need a more effective strategy for long term operations." created="2016-08-18 12:59:49.0" updateauthor="christopherferris" updated="2016-08-18 12:59:49.0"/>
<Action id="18573" issue="12465" author="christopherferris" type="comment" body=" ~smithbk  this really isn&apos;t a bug, but a limitation of the current system that needs stories that are intended to outline what changes are needed by whom, and why." created="2016-08-18 13:01:56.0" updateauthor="christopherferris" updated="2016-08-18 13:01:56.0"/>
<Action id="18574" issue="12465" author="smithbk" type="comment" created="2016-08-18 13:14:10.0" updateauthor="smithbk" updated="2016-08-18 13:14:10.0"> <body><! CDATA With regard to strategy, we need to have a cap on the amount of storage that will be used no matter how long we run. Here is a proposal.  1) Add a configuration option to membersrvc.yaml similar to the following: maxTCertExpirationTime: <seconds> We need this to support expiration of TCerts also and provide some default.  2) Store generator info for each batch of tcerts and not the tcerts themselves, as has been suggested.  3) Add an configuration option to membership.yaml similar to the following: maxTCertBatchHistory: <maxTCertBatchHistory>  If maxTCertBatchHistory is not specified, then we calculate a default value based on some maximum transaction rate. The calculation of this default value would be: maxTCertBatchHistory = maxBatchOfTCerts / second * maxExpirationTime in seconds We would have to choose a default "maxBatchOfTCerts / second" rate based on performance numbers.  Membership services then prunes the DB based on the value of maxTCertBatchHistory.  At any point in time, it could keep more than maxTCertBatchHistory entries depending on how often pruning is done, but it must never keep less than maxTCertBatchHistory entries.  ></body> </Action>
<Action id="22474" issue="12465" author="mastersingh24" type="comment" body="this was for v0.6 which we are no longer maintaining" created="2017-04-14 17:47:14.0" updateauthor="mastersingh24" updated="2017-04-14 17:47:14.0"/>
