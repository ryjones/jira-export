<Issue id="14149" key="FABC-31" number="31" project="10607" reporter="skarim" assignee="skarim" creator="skarim" type="10001" summary="Convert configuration files to be more user friendly and easy to understand" priority="3" resolution="10000" status="6" created="2017-01-18 04:05:12.0" updated="2018-07-20 19:15:52.0" resolutiondate="2017-03-10 15:55:49.0" votes="0" watches="2" timeoriginalestimate="115200" timeestimate="115200" workflowId="32211"> <description><! CDATA Currently configuration files for COP on both server and client side lack clarity and definition as to what each property means. Configuration files are currently stored as JSON format because that is what CFSSL uses, but then fabric is using yaml.  The goal is to convert configuration files to be more user friendly and easy to understand, also to maintain consistency in configuration files through out all the components (fabric-ca and fabric). Both JSON and YAML files will be supported, with YAML being the default and preferred format.  Users can put configuration in the YAML or JSON config file and override any of these with an environment variable.  We will continue to support the same command line arguments that cfssl supports, but generally folks will not need to use these ... well, except for the "-config" option to locate the config file in the 1st place.  But this is optional, because we will look in the home directory for a well-known config file name by default (server-config.yaml/json for server and client-config.yaml/json for the client).  In a bit more detail ...  The config/cli is a bit clumsy and not as consistent as it should be.   The reason is that until now we have had to make our config file compatible with the one that cfssl expects, but we are going to break that link so that we can convert from the fabric-ca config file format to the format that cfssl expects.   This gives us flexibility we need.  We can then use viper to read the server or client config file.  We can then convert it to the format expected by cfssl and call the cli/cli.go's LoadConfig function with the converted bytes.  Since we are then using viper for the client and server config, we get the use of env variables for free and can also support yaml and json format easily.  The proposed layout of the YAML files for both server and client are below.  TODO: Define which ones are required vs optional and specify default values.  *Server:*  {code:none} ##################################### #    CA Certificate and Key Section ##################################### ca:  cert: ec.pem key: ec-key.pem  ##################################### #    Database section ##################################### database:  type: sqlite3 datasource: cop.db  tls: enabled: false ca: file: root.pem cert: file: tls-cert.pem key: file: tls-key.pem  ##################################### #    TLS section ##################################### tls:  disable: false ca: file: root.pem cert: file: tls-cert.pem key: file: tls-key.pem  ##################################### #    Users section ##################################### Users:  admin: pass: "adminpw" type: "client" affiliation: "bank_a" attrs: name: "hf.Registrar.DelegateRoles" value: "client,user,validator,auditor" name: "hf.Revoker" value: "true"  ##################################### #    Affiliation section ##################################### affiliations:  banks_and_institutions: banks: - bank_a - bank_b - bank_c institutions: - institution_a  ##################################### #    Signing section ##################################### signing:  default: usages: - cert - sign expiry: 8000h  expiry: usages: - cert - sign expiry: 1s  ##################################### #    Crypto section #    Specifies crypto primitives used for: #    1) Authorization header verification #    2) TCert generation (key derivation) #    3) Others are TBD ##################################### crypto: software: hash_family: SHA2 security_level: 256 ephemeral: false key_store_dir: keys {code}  *client:* {code:none} ##################################### # Client Configuration #####################################  serverURL: https://localhost:8888  ##################################### #    TLS section ##################################### tls: cert: file: tls-cert.pem key: file: tls-key.pem ca: file: root.pem  ##################################### #    Crypto section #    Specifies crypto primitives used for: #    1) Authorization header signing #    2) Others are TBD ##################################### crypto: software: hash_family: SHA2 security_level: 256 ephemeral: false key_store_dir: keys {code}  ></description> </Issue>
