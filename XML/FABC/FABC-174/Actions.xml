<Action id="44021" issue="30024" author="christopherferris" type="comment" body="I tagged  ~smithbk " created="2018-05-07 22:14:00.0" updateauthor="christopherferris" updated="2018-05-07 22:14:00.0"/>
<Action id="44219" issue="30024" author="smithbk" type="comment" body="I just looked at it and understand the issue and how to fix.  Working on it." created="2018-05-10 21:14:59.0" updateauthor="smithbk" updated="2018-05-10 21:14:59.0"/>
<Action id="44624" issue="30024" author="dhuseby" type="comment" body=" ~smithbk  what&apos;s the ETA? Is the severity still critical? I think this bug deserves a CVE since Fabric is being used in the wild." created="2018-05-18 01:33:46.0" updateauthor="dhuseby" updated="2018-05-18 01:33:46.0"/>
<Action id="44626" issue="30024" author="dhuseby" type="comment" body=" ~smithbk  it&apos;s important that we know what the severity is because we&apos;re going to pay a bug bounty on this." created="2018-05-18 01:36:24.0" updateauthor="dhuseby" updated="2018-05-18 01:36:24.0"/>
<Action id="44687" issue="30024" author="smithbk" type="comment" created="2018-05-19 14:58:48.0" updateauthor="smithbk" updated="2018-05-19 15:24:37.0"> <body><! CDATA  ~dhuseby  The severity depends on whether you can get someone else's authorization header.  This should not be possible when using HTTPS unless there is a proxy involved which logs the traffic.  In this case, someone with access to the proxy would be able to steal someone else's authorization header.  We do not log the authorization header even at debug level of trace, so they can't get the authorization header from the logs.  Since proxies are pretty standard, I would say the likelihood of a breach is moderate, and the severity of the harm they could do is severe (since they could delete identities which someone else lists).  The following change set was merged into master which fixes this issue:  https://gerrit.hyperledger.org/r/#/c/21743/ However, it breaks compatibility with SDKs.  See https://jira.hyperledger.org/browse/FAB-10205 Another change set is underway to fix this incompatibility as described below.   See https://gerrit.hyperledger.org/r/#/c/22025/.  The plan is to: 1) Add support for a FABRIC_CA_SERVER_AUTHHDR_COMPATIBILITY env variable which when set to true, accepts both an old and new token format, and when set to false, accepts only the new token format (which fixes this issue).  Initially however, the default value will be "true". 2) Update all SDKs to send the new token format. 3) Change the default value FABRIC_CA_SERVER_AUTHHDR_COMPATIBILITY to false.  This will allow someone to upgrade the server and start it with FABRIC_CA_SERVER_AUTHHDR_COMPATIBILITY set to true, upgrade all clients, and then restart the server with FABRIC_CA_SERVER_AUTHHDR_COMPATIBILITY set to false (or just remove it).  Of course this is only necessary if they need to upgrade the fabric-ca-server to without an outage of its clients.  I'll be attaching sub-tasks to this jira for each of the SDKs.  ></body> </Action>
<Action id="44694" issue="30024" author="smithbk" type="comment" created="2018-05-20 10:39:18.0" updateauthor="smithbk" updated="2018-05-20 10:39:18.0"> <body><! CDATA  ~dhuseby  I would like to change my response regarding the severity of this issue.  I do NOT think it is a real issue and is therefore NOT severe.  As I stated before, it really depends on whether or not it is possible to see someone else's authorization header.  But it should not be possible to see someone else's authorization header, or that indicates an issue in whatever exposes that authorization header.    For example, if there is a proxy which terminates a TLS connection is used AND that proxy logs the authorization header, the security issue would be with the proxy which logs the authorization header which it should not be doing.  Furthermore, if you are able to see a user's authorization header, then you could masquerade as that user by using their Basic authorization header which is on the "POST /api/v1/enroll" request and then enrolling as that user (assuming their max_enrollment setting has not been exceeded).  ></body> </Action>
<Action id="44698" issue="30024" author="smithbk" type="comment" created="2018-05-20 19:05:48.0" updateauthor="smithbk" updated="2018-05-20 19:05:48.0"> <body><! CDATA  ~dhuseby   ~mastersingh24   ~ChristopherFerris  If everyone agrees that this is not a real issue (any more so than using a Basic auth header), I propose that:  1) For v1.2, we submit a change set which reverts  https://gerrit.hyperledger.org/r/#/c/21743/ and therefore fixes https://jira.hyperledger.org/browse/FAB-10205 and abandon https://gerrit.hyperledger.org/r/#/c/22025/.  2) For v1.3, we re-evaluate the importance of guarding against theft of authorization headers ... and if so, we change the token format only once.  Pls comment.  ></body> </Action>
<Action id="44741" issue="30024" author="mastersingh24" type="comment" body=" ~smithbk  - I agree with your assessment and believe that this is going to cause a lot of unnecessary work and confusion." created="2018-05-21 15:15:23.0" updateauthor="mastersingh24" updated="2018-05-21 15:15:23.0"/>
<Action id="44750" issue="30024" author="christopherferris" type="comment" body="I agree with the assessment, Keith, and with the approach to resolve." created="2018-05-21 16:33:25.0" updateauthor="christopherferris" updated="2018-05-21 16:33:25.0"/>
<Action id="44754" issue="30024" author="smithbk" type="comment" body="ok, we are proceeding with a change set to revert https://gerrit.hyperledger.org/r/#/c/21743/ " created="2018-05-21 17:40:01.0" updateauthor="smithbk" updated="2018-05-21 17:40:01.0"/>
<Action id="45095" issue="30024" author="dhuseby" type="comment" created="2018-05-24 20:13:59.0" updateauthor="dhuseby" updated="2018-05-24 20:15:34.0"> <body><! CDATA  ~mastersingh24   ~ChristopherFerris   I have a couple of questions:  1) Can Fabric be deployed without TLS link layer confidentiality?  2) What is the default deploy?   3) What does a user have when they follow the "getting started" documentations?  Our "default deploys" have to be secure as well as what the user gets when following the "getting started" documentation.  I really don't like that the server authentication relies on link layer confidentiality.  There's a reason why basic auth isn't ever used in the wild.  This needs to be fixed for sure, but it needs to be done in a smart way.  ></body> </Action>
<Action id="45388" issue="30024" author="dhuseby" type="comment" body=" ~smithbk  can you answer these? ^^^" created="2018-05-31 21:58:12.0" updateauthor="dhuseby" updated="2018-05-31 21:58:12.0"/>
<Action id="46316" issue="30024" author="christopherferris" type="comment" created="2018-06-20 19:05:27.0" updateauthor="christopherferris" updated="2018-06-20 19:05:27.0"> <body><! CDATA  ~dhuseby  - 1. We're talking now about Fabric-ca, not Fabric. 2. There is no "default deploy" because we do not deal with production deployment in the project at this time. That is an exercise for the implementer. 3. Getting Started is not intended for production, it is a configuration for running on your laptop and the use of the CA is only an option. As configured, it would use TLS.     ></body> </Action>
<Action id="47059" issue="30024" author="dhuseby" type="comment" body=" ~ChristopherFerris  ok, just checking.  I still don&apos;t like relying on TLS when there is a way to do this without that dependency. I just closed out the H1 report and the bounty has been paid." created="2018-07-07 00:04:05.0" updateauthor="dhuseby" updated="2018-07-07 00:04:05.0"/>
<Action id="50119" issue="30024" author="skarim" type="comment" body="Since fixing this has SDK impacts, this needs to address early in a release cycle. Changing fix version to 1.4" created="2018-09-08 03:18:39.0" updateauthor="skarim" updated="2018-09-08 03:18:39.0"/>
<Action id="51270" issue="30024" author="skarim" type="comment" body="https://gerrit.hyperledger.org/r/c/26614/" created="2018-09-27 14:09:12.0" updateauthor="skarim" updated="2018-09-27 14:09:12.0"/>
