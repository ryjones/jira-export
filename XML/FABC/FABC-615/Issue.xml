<Issue id="12661" key="FABC-615" number="615" project="10607" reporter="smithbk" assignee="smithbk" creator="smithbk" type="10001" summary="I want to dynamically manage participants on an existing chain" priority="5" resolution="10001" status="6" created="2016-09-12 19:22:15.0" updated="2019-07-27 14:42:45.0" resolutiondate="2019-07-27 14:40:59.0" votes="0" watches="5" timeoriginalestimate="288000" timeestimate="230400" workflowId="34581"> <description><! CDATA NOTE: Hyperledger Fabric V1 provides all of the primitives to build what is described below, but this will not be provided as part of V1.  It is more appropriate to be built as an application on top of V1.  There are multiple reasons for gathering signatures at the app level, and this is one of them, so even though it would be built as an application, it probably makes sense to build as a library or as a service which can be used for multiple use cases.  ---------------- The following is the original info for this FAB --------------------  I want to dynamically add a new participant with a new COP/CA to a existing chain. Suppose chain1 is bootstrapped with peers P1 and P2 using CA1 and peers P3 and P4 using CA2 according to the procedure described in FAB-359.   I now want to dynamically add CA3 to the same chain with the approval of CA1 and CA2.  1.2.3) cop client submitJoinRequest <root.pem> This command is invoked by a “sponser” participant to submit a request for another participant to join the blockchain network. For example, assume companies C1 and C2 are already in the network and C3 wants to join. C3 runs the “cop server init” command to create the root.pem file. C3 then sends this file out-of-band to C1. In this case, C1 is functioning as C3’s sponsor to join the network. Assuming that C1 approves of C3 joining, C1 invokes this “cop client submitJoinRequest” command. This invokes the COP system chaincode which places the request on the system ledger and depending on the configured join policy, it may require C2 to also approve. The COP system chaincode emits a custom event to which C2 is listening. Once notified, C2 invokes “cop client listJoinRequests” (which calls the COP system chaincode) to see the domain and certificate of who is requesting to join as well as who else has already approved. Based on this, C2 approves or denies the join request, using “cop client approveJoinRequest” or “cop client denyJoinRequest”, respectively, which again invokes COP system chaincode.  1.2.4) cop client listJoinRequests Lists all current join requests along with a unique <joinRequestId>.  1.2.5) cop client approveJoinRequest <joinRequestId> Approves the join request.  1.2.6) cop client denyJoinRequest <joinRequestId> Denies a join request.  1.2.7) cop client listParticipants Lists the current participants in the blockchain network.  1.2.8) cop client updateJoinPolicy { add | remove | updatePolicy }  <policyString> Update the join policy associated with a group for a specific operation. The <policyString> may be something like the following: “unanimous” if all current members must agree before the operation is performed “percentage 50” if 50% of the current group members must agree “identity <cert>” if it must be approved by a single identity     ></description> </Issue>
