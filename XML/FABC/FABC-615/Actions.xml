<Action id="19095" issue="12661" author="jyellick" type="comment" created="2016-10-03 16:09:23.0" updateauthor="jyellick" updated="2016-10-03 16:09:23.0"> <body><! CDATA My first concern is that the addition of a new MS instance does not seem to be atomic.  Namely, what happens if MS1 approves of MS3, but MS2 does not?  Presumably, peers of MS1 would consider MS3's transactions to be valid, but MS2 would not, and the world state might diverge.  Since we have the concept of endorsement, would it not make more sense to retrieve endorsements from all necessary members (in this case MS1 and MS2) and submit it as a single transaction?   It's difficult for me to tell, but it sounds like chaincode is being invoked directly without going through ordering to emit the 'custom event'?  To my knowledge, events are tied to transactions, and transactions must go through ordering, am I missing something?  To me, this whole process seems like it should be handled transactions and chaincode.  Here is a proposed flow.  1. New entity wants to join the network 2. The entity creates a special "I want to join the network proposal" 3. It sends it to the other parties for endorsement 4. It, or someone submits the endorsed transaction for ordering 5. All peers in the network see this transaction, which is valid and verifiable because of the endorsement, and allow the entity to begin transacting  The advantages I see to this:  1. It is atomic, there is never any ambiguity about whether the new entity is allowed to transact. 2. There is no manual distribution of any key material, it is included in the transaction 3. It re-uses existing concepts and structures of endorsement rather than inventing a new multi-party agreement method  ></body> </Action>
<Action id="19109" issue="12661" author="smithbk" type="comment" created="2016-10-04 19:01:21.0" updateauthor="smithbk" updated="2016-10-04 19:01:21.0"> <body><! CDATA Jason, I don't agree.  Two main points: 1) The modification of the trusted roots is atomic. Assuming a unanimous policy, when the transaction containing the final required signature is received, the trust store is atomically updated.  The previous transactions simply accumulate signatures. 2) The period over which we may gather signatures may be days, weeks, or longer.  We don't want a client to need to keep the state of the proposal around that long.  In my model, that state is kept in chaincode.  ></body> </Action>
