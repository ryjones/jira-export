<Action id="19887" issue="13476" author="mastersingh24" type="comment" created="2016-11-29 12:21:07.0" updateauthor="mastersingh24" updated="2016-11-29 12:21:07.0"> <body><! CDATA so in the case where you can use LDAP, does that mean the database is not used at all?  And in that case, what about the storage of certificates, revocation/CRL, etc which as I understand it all require the use of a database.  seems to me you cannot support "read" only LDAP alone?  or would this just simply "replace" the custom piece added for enrollment?  ></body> </Action>
<Action id="19891" issue="13476" author="smithbk" type="comment" body=" ~mastersingh24  Gari, yes, this is just replacing the custom piece for enrollment.  If LDAP is configured, register requests will fail and enroll will simply call LDAP to authenticate user.  The user table in the DB will not be used but the certificate table will be used." created="2016-11-29 15:18:52.0" updateauthor="smithbk" updated="2016-11-29 15:18:52.0"/>
<Action id="19893" issue="13476" author="jonathanlevi" type="comment" created="2016-11-29 17:37:13.0" updateauthor="jonathanlevi" updated="2016-11-29 18:53:42.0"> <body><! CDATA Sorry, I don't understand this item at all. Let me ask a few guiding questions maybe?  Let's start from the basics:  1. *Requirements* What is the exact requirement? Is it "Supporting LDAP" ? - By configuring it in a YAML as a user repository? That is, statically configured (and not on the fly)? - Do you want to support it in a read-only mode? And only so?   2. *Design* How do we want to achieve (whatever you suggest/propose/want to address in 1) above. For example,  - Are we going to have a unified interface or not?  - That is, why do we have an Accessor (btw: you changed it to DBAccessor, so let's update the issue) with all these inserts/deletes etc. - Maybe you/we might want to have a ReadWriteAccessor/WriteableAccessor or a ReadOnlyAccessor, etc. - Not sure we would like to expose or use the (DB) Accessor terminology at all (e.g., LDAP being just a Lightweight Dir. Acc. Protocol, etc.)  In short, can we iterate a quick design for review? It may save us a lot of time and probably make us think/clarify all of the above questions, etc.   Please note that we don't need a 300-page design doc PDF, even a 1,2-pager with the proposed design, sent before jumping to the code should do.  We can probably use the markdown syntax here in JIRA, if it's easier. Showing the 2 options (say, flow with LDAP vs. no-LDAP), etc.   3. *Implementation* We can get back to this after 1 and 2, but just quickly,   Example 1: {quote}     if (type == 'sqllite3') return NewUserRegistrySQLLite3(config) ... for other types of user registries ... or use switch statement :-){quote}  In general/as a rule of thumb, this kind of code usually warrants a "step back":  Example 2: I don't believe we should store that username password pairs in a struct and definitely not in a clear-text/form. Imagine the criticism we'd get here. What's the feature/upside?  --- Happy to discuss more/thoughts welcome. -- Jonathan  ></body> </Action>
<Action id="19896" issue="13476" author="smithbk" type="comment" created="2016-11-29 20:42:49.0" updateauthor="smithbk" updated="2016-11-29 20:42:49.0"> <body><! CDATA The overall requirements/goals of adding LDAP support are to: 1) Remove the requirement of storing passwords for a webapp (even though it's a one-time password), and 2) reduce admin and programming overhead to manage user credentials and attributes.  In particular, use LDAP to: 1) Determine who can enroll (via LDAP bind).  This means a webapp would not be required to have credentials of it's own to dynamically register other users, but could simply pass the user's user/pass to the COP server which then calls LDAP bind. 2) Retrieve user attributes (via LDAP query). The COP server's config file will optionally contain a section pointing to an LDAP server, so this is statically configured. The COP server accesses the LDAP server in read-only mode. We are not looking at exposing this API to the user.  It is a COP SPI.  It is a unified SPI in the sense that the COP server uses this SPI to perform all user-related functions.  I hope this helps clarify the direction and reason for this SPI.    ></body> </Action>
<Action id="19918" issue="13476" author="jonathanlevi" type="comment" created="2016-11-30 23:42:05.0" updateauthor="jonathanlevi" updated="2016-11-30 23:42:05.0"> <body><! CDATA Hi  ~keithsmith , yes, it does clarify the reason/requirement (1 above). Statically configured, read-only and attributes retrieval by querying using LDAP. Thanks for this.  Back to the other parts (2&3): I wanted to suggest some more work on the design, e..g, describing the flow (maybe via a component interaction diagram or so?) as I didn't want a certain configuration (e.g, LDAP) to invalidate the rest of the API calls, etc. That's what I meant when I asked, for example, whether we require a "unified" API (that is, exposing the common functionality only, and extending with specifics when they are available).   I still think that a design document will help a lot here (esp. for others) or at least a component interaction diagram. It will def clarify some of these use-cases/stories even more (not just for this specific JIRA item, sure).     ></body> </Action>
<Action id="19958" issue="13476" author="smithbk" type="comment" body=" ~jonathan Jonathan, see my update to the description section.  See in particular the COP server&apos;s LDAP config and following numbered steps describing the flow.  I can do a web sequence diagram if needed, but hopefully the steps are clear.   Attaching a diagram to Jira isn&apos;t that friendly :-(" created="2016-12-05 22:28:23.0" updateauthor="smithbk" updated="2016-12-05 22:28:23.0"/>
<Action id="20009" issue="13476" author="smithbk" type="comment" body="See http://gerrit.hyperledger.org/r/3055" created="2016-12-07 09:07:37.0" updateauthor="smithbk" updated="2016-12-07 09:07:37.0"/>
