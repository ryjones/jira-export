<Issue id="13476" key="FABC-620" number="620" project="10607" reporter="smithbk" assignee="smithbk" creator="smithbk" type="10001" summary="LDAP support to authenticate users and get attributes" priority="3" resolution="10000" status="6" created="2016-11-17 22:08:18.0" updated="2018-07-20 19:17:28.0" resolutiondate="2016-12-21 13:20:20.0" votes="0" watches="4" workflowId="34586"> <description><! CDATA The overall requirements/goals of adding LDAP support are to: 1) Remove the requirement of storing passwords for a webapp (even though it's a one-time password), and 2) reduce admin and programming overhead to manage user credentials and attributes.  In particular, use LDAP to: 1) Determine who can enroll (via LDAP bind). This means a webapp would not be required to have credentials of it's own to dynamically register other users, but could simply pass the user's user/pass to the COP server which then calls LDAP bind. 2) Retrieve user attributes (via LDAP query). The COP server's config file will optionally contain a section pointing to an LDAP server, so this is statically configured. The COP server accesses the LDAP server in read-only mode. We are not looking at exposing this API to the user. It is a COP SPI. It is a unified SPI in the sense that the COP server uses this SPI to perform all user-related functions.  From a configuration standpoint, the COP server's config file will contain a section similar to the following in order to enable this LDAP support. {code} { "ldap": { "url": "ldaps://uid=admin,ou=system:secret@localhost" "userfilter": "(uid=%s)" } {code}  When LDAP is configured, enrollment works as follows: # A COP client or client SDK sends an enrollment request with a basic authorization header # The COP server receives the enrollment request, decodes the user/pass in the authorization header, looks up the DN (Distinquished Name) associated with the user using the "userfilter", and then attempts an LDAP bind with the user's password.  If successful, the enrollment processing proceeds  When LDAP is configured, attributes work as follows: # A client SDK sends a request for a batch of tcerts *with one or more attributes*to the COP server # The COP server receives the tcert request and does as follows: ##  extracts the enrollment ID from the token in the authorization header (after validating the token) ## does an LDAP search/query to the LDAP server, requesting all of the attribute names received in the tcert request ## the attribute values are placed in the tcert as normal   The remainder of this description pertains to some initial work required to make an LDAP-friendly user management wrapper SPI over the current DB code.  This SPI is hidden from user, but makes the code cleaner to implement LDAP.  The following is the current user management API.  {code}type Accessor interface { 	SetDB(db *sqlx.DB) 	InsertUser(user UserRecord) error 	DeleteUser(id string) error 	UpdateUser(user UserRecord) error 	GetUser(id string) (UserRecord, error) 	InsertGroup(name string, parentID string) error 	DeleteGroup(name string) error 	GetGroup(name string) (string, string, error) }{code}  In order to hide the SQL dependency and allow LDAP or hopefully any user registry to be added, let's change to similar to the following:  {code} func NewUserRegistry(type, config string) (UserRegistry, error) { if (type == 'sqllite3') return NewUserRegistrySQLLite3(config) ... for other types of user registries ... or use switch statement :-) }  type UserRegistry interface { LoginUserBasicAuth(user, pass string) (User, error) 	InsertUser(user UserInfo) error 	UpdateUser(user UserInfo) error DeleteUser(id string) error 	GetGroup(name string) (Group, error) GetRootGroup() (Group, error) 	InsertGroup(name string, parentID string) error 	DeleteGroup(name string) error }  type UserInfo struct { Name           string Pass            string Type            string Attributes      Attribute }  type User interface { GetAttributes() (  Attribute, error) }  type Group interface { GetName() string GetChildren() (  Group, error) }  type Attribute struct { Name  string Value  string   // or   byte? } {code}  In addition, since we don't currently provide a server API and this is only for the COP server, these APIs should be in cli/server.   The only pieces that should be in fabric-cop/api are client APIs.  When adding support for LDAP, all APIs which would update the user registry will return an error.  We will assume the normal LDAP APIs are used to register users and COP will only read from LDAP.  ></description> </Issue>
