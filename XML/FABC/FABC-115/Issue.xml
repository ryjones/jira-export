<Issue id="13874" key="FABC-115" number="115" project="10607" reporter="smithbk" assignee="smithbk" creator="smithbk" type="10002" summary="Enhance the &quot;fabric-ca-server init&quot; command to support intermediate fabric-ca-server initialization" priority="3" resolution="10000" status="6" created="2016-12-21 14:44:09.0" updated="2018-07-18 22:03:33.0" resolutiondate="2017-04-14 15:52:49.0" votes="0" watches="3" workflowId="32295"> <description><! CDATA This allows an intermediate fabric-ca-server to initialize itself by sending an enroll request to the root (or parent) fabric-ca server.  So in this case, the "fabric-ca server init" command becomes a client to another fabric-ca server.  The differences from a normal enroll command are: 1) The caller associated with the basic auth credentials must have the 'hf.IntermediateCA" attribute.  We can't allow any registered user to get a CA certificate; otherwise, we'd have a security hole. 2) The issued certificate must have the CA flag set. 3) The default names of the key and cert files that are produced are the same as those created by the "cop server init" command (e.g. server-cert.pem and server-key.pem), not those of the enroll command.  So why use an intermediate fabric-ca-server?   What are the benefits or use cases? 1) *Increased security*  It is more secure because you can take the root fabric-ca-server off-line when not needed.  It is only needed when issuing intermediate CA certs, which is only needed when initializing an intermediate fabric-ca-server.  You can also run the root fabric-ca-server on a more secure network which is only reachable via intermediate servers. 2) *Lower administrative overhead when key is compromised* If the private key of an intermediate fabric-ca-server is compromised, the administrative overhead is much less.  You can revoke the compromised certificate and simply get another intermediate CA cert.  Since endpoints trust the certificate associated with the root fabric-ca-server, there is no need to have all endpoints update their root of trust. 3) *Bootstrapping cluster members* It makes it easier to bootstrap a cluster of intermediate servers by giving each member of a cluster the same or a different enrollment ID and secret to get it's CA cert.  If the same enrollment ID and secret is used, then the number of times the secret can be used is configured on the root fabric-ca-server to allow at least that many members to occur.  The connection from the intermediate to the root server may be over TLS to prevent the secret from being stolen.  ></description> </Issue>
