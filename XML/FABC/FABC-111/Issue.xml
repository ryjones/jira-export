<Issue id="15221" key="FABC-111" number="111" project="10607" reporter="smithbk" creator="smithbk" type="10002" summary="Create docker-compose for fabric-ca-server cluster with mariadb failover" priority="5" resolution="10001" status="6" created="2017-03-06 13:45:29.0" updated="2019-03-26 11:45:52.0" resolutiondate="2019-03-26 11:45:52.0" votes="0" watches="1" workflowId="32291"> <description><! CDATA Create a fabric-ca/docker/cluster/docker-compose.yml file which using Gong Su's instructions below.   This uses mariadb as a transparent failover mechanism for the DB.  See  https://mariadb.com/kb/en/mariadb/mariadb-vs-mysql-features/  Here are Gong Su's instructions:   OK I have setup and tested the 2-host HA for mariadb using haproxy+keepalived described in the link in the previous note. The machines (zLinux Debian 9 guests) are configured with the following external and internal hostnames/IPs. A single ca-ha.pok.ibm.com/192.168.2.1 is used by clients (e.g., CAs) to connect to the mariadb. The setup requires a fair amount of configuration. But once setup, it does work.  external hostname external IP internal hostname internal IP host1: obc01.pok.ibm.com 9.47.152.79 obc-ca01.pok.ibm.com 192.168.1.1 host2: obc02.pok.ibm.com 9.47.152.80 obc-ca02.pok.ibm.com 192.168.1.2 exposed: ca-ha.pok.ibm.com 192.168.1.10  Steps that I went through to setup the whole thing:  1. Install mariadb, haproxy, and keepalived. Enable nonlocal IP binding by creating /etc/sysctl.d/local.conf with the following line:  net.ipv4.ip_nonlocal_bind=1  And run sysctl net.ipv4.ip_nonlocal_bind=1 to set immediately without rebooting.  2. Add the following to /etc/hosts on both host1 and host2 for internal hostname and IP resolving:  192.168.1.1 obc-ca01.pok.ibm.com obc-ca01 192.168.1.2 obc-ca02.pok.ibm.com obc-ca02 192.168.1.10 ca-ha.pok.ibm.com ca-ha  3. Create IP aliases on host1 and host2:  ip addr add 192.168.1.1/24 dev eth0 (on host1) ip addr add 192.168.1.2/24 dev eth0 (on host2)  Note do NOT create ip alias for 192.168.1.10. That's managed by keepalived.  4. Shutdown and configure mariadb with galera on both host1 and host2 by modifying /etc/mysql/mariadb.conf.d/50-server.cnf (showing for host1, change blue lines for host2 accordingly):  modify  {color:#205081}bind-address = 192.168.1.1{color} append   galera  # Mandatory settings wsrep_on=ON wsrep_provider=/usr/lib/galera/libgalera_smm.so wsrep_cluster_address=gcomm://192.168.1.1,192.168.1.2 {color:#205081}wsrep_node_address=192.168.1.1{color} {color:#205081}wsrep_node_name=obc-ca01.pok.ibm.com{color} binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 # Custom settings wsrep_cluster_name="ca_galera" wsrep_sst_method=rsync  5. To start mariadb with galera, you must run galera_new_cluster then followed by systemctl start mariadb on the first host. On the rest of the hosts you just need to run systemctl start mariadb. To verify galera is working, run the command  mysql -u root -e 'SELECT VARIABLE_VALUE as "cluster size" FROM INFORMATION_SCHEMA.GLOBAL_STATUS WHERE VARIABLE_NAME="wsrep_cluster_size"'  and you should see cluster size 2. After you shutdown the cluster and next time when you start the cluster, you must run galera_new_cluster first from the LAST host on which you shutdown mariadb.  6. Add mariadb users to allow haproxy to connect to mariadb for health check. Connect to mariadb and run the following on either host1 or host2 (changes get sync-ed to the other host by galera, another way to check galera is working):  mysql -u root -e 'CREATE USER "haproxy"@"obc-ca01.pok.ibm.com"' mysql -u root -e 'CREATE USER "haproxy"@"obc-ca02.pok.ibm.com"'  7. Shutdown and configure haproxy on both host1 and host2 by appending to /etc/haproxy/haproxy.cfg (same for both hosts):  frontend mariadb bind 192.168.1.10:3306 mode tcp option tcplog default_backend mariadb_galera  backend mariadb_galera balance source mode tcp option tcpka option mysql-check user haproxy server mariadb1 192.168.1.1:3306 check weight 1 server mariadb2 192.168.1.2:3306 check weight 1  Start haproxy with systemctl start haproxy.  8. Configure keepalived on both host1 and host2 by creating /etc/keepalived/keepalived.conf (showing for host1, change blue line for host2 accordingly):  vrrp_script haproxy { script "/usr/bin/killall -0 haproxy" interval 2 fall 2 rise 2 } vrrp_instance haproxy_1 { virtual_router_id 1 advert_int 1 nopreempt state BACKUP interface eth0 virtual_ipaddress { 192.168.1.10 dev eth0 } track_script { haproxy } }  and start keepalved with systemctl start keepalived.  If all goes well, now you should be able to connect to mariadb by telling your client that mariadb is at ca-ha.pok.ibm.com (which resolves to 192.168.1.10).  You can kill one instance of mariadb, haproxy, and keepalived from either host1 or host2, in any order, and you should still be able to reach mariadb going to ca-ha.pok.ibm.com from either host1 or host2.   ></description> </Issue>
