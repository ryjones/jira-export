<Action id="23985" issue="16010" author="smithbk" type="comment" created="2017-05-18 00:04:56.0" updateauthor="smithbk" updated="2017-06-23 15:32:04.0"> <body><! CDATA The bug appears to be that the lib/spi/userregistry.go API is polluted a bit. I think the GetUserInfo function should be removed from the UserRegistry interface. All places which currently use this call via this interface (lib/ca.go and lib/serverrevoke.go) should use GetUser instead. There is no need to support both and the GetUser API is the higher level abstraction that we intended to be used. Of course GetUserInfo can still be used in the DB implementation of UserRegistry, but it should not be used outside of DB specific code.  Also note that maxenrollments is not supported for LDAP.  The reason is that in order to support this, we would either need to write to the LDAP registry to keep track of the current number of enrollments for the user, or we would need to keep parallel information in fabric-ca-server's DB for the users in LDAP.  I don't think either of these is desirable, so we choose for now to not support this for LDAP.   So maxenrollments is only something that is checked in the DB implementation of the UserRegistry.Login call, not in LDAP's implementation of this function.  ></body> </Action>
<Action id="23986" issue="16010" author="smithbk" type="comment" created="2017-05-18 00:11:42.0" updateauthor="smithbk" updated="2017-05-18 00:11:42.0"> <body><! CDATA For attributes, see  https://godoc.org/gopkg.in/ldap.v2#NewSearchRequest   I pass the names of attributes and the response contains  https://godoc.org/gopkg.in/ldap.v2#EntryAttribute   which are associated with the user.  ></body> </Action>
<Action id="24352" issue="16010" author="smithbk" type="comment" created="2017-05-25 16:51:24.0" updateauthor="smithbk" updated="2017-05-25 16:51:24.0"> <body><! CDATA I'm marking as v1.1 because there is currently no support for attributes in certificates in v1.  Also note that the code is already there for LDAP to retrieve attributes, but this JIRA item should be used to provide documentation and test cases.   ></body> </Action>
<Action id="27283" issue="16010" author="rennman" type="comment" created="2017-06-23 15:58:25.0" updateauthor="rennman" updated="2017-06-23 15:58:25.0"> <body><! CDATA It's slightly more complicated, I think. Although we do have a mechanism to retrieve attributes from the LDAP server (I believe ink the original test did include a retrieval of the user's email),  we have not yet defined a schema that would accommodate the fields that we actually use, e.g.   hf.Registrar.Roles   hf.Registrar.DelegateRoles   hf.Revoker   hf.IntermediateCA  We currently rely on the structural object class of inetOrgPerson, which doesn't contain these attributes. We would need to get registered OIDs from IANA, associate with the custom attributes, then create auxiliary object classes that would be added to the user entry.  ></body> </Action>
<Action id="28304" issue="16010" author="smithbk" type="comment" created="2017-07-13 11:31:40.0" updateauthor="smithbk" updated="2017-07-13 11:31:40.0"> <body><! CDATA I don't think we need to register OIDs with IANA.  We can simply provide an example. That is, we can create an object class, say "hfInetOrgPerson" which extends "inetOrgPerson" and adds these attributes.   See http://www.yolinux.com/TUTORIALS/LinuxTutorialLDAP-DefineObjectsAndAttributes.html for an example of how to do this.  ></body> </Action>
<Action id="28305" issue="16010" author="smithbk" type="comment" body="On 2nd thought, in order to allow existing LDAP repositories to be used without modification (i.e. without extending the schema), we should consider providing a way to map the &quot;hf.*&quot; attributes to other LDAP attributes.  I&apos;ll give this some thought." created="2017-07-13 11:38:06.0" updateauthor="smithbk" updated="2017-07-13 11:38:06.0"/>
<Action id="28332" issue="16010" author="skarim" type="comment" created="2017-07-13 17:44:37.0" updateauthor="skarim" updated="2017-07-13 17:48:09.0"> <body><! CDATA Proposing the following on how to tackle fabric-ca attributes with LDAP. With LDAP enabled the only attributes that come into play are hf.Revoker and hf.IntermediateCA. Attributes hf.Registrar.Roles and hf.Registrar.DelegateRoles only come into play during user registration and registration via fabric-ca is not supported with LDAP enabled.  To indicate if a user in the LDAP directory has one of these fabric-ca attributes, we will use the 'ou' LDAP attribute. In the LDAP configuration section of the fabric-ca server, two new configuration parameters will be added.  The configuration section may look like:  {code:none} LDAP: hf.Revoker: revoker # OU name for identities with revocation privileges hf.IntermediateCA: intermediateCA # OU name for intermediate CA identities {code}  With the configuration above, if a user in LDAP has an 'ou' of 'revoker' then they can revoke a specific certificate or revoke all the certificates of a specific user. But, they cannot revoke the user itself only all its associated certificates. Affiliation hierarchy is not going to be supported with LDAP, thus no affiliation check will be performed. The same approach will be taken for hf.IntermediateCA attribute.   ></body> </Action>
<Action id="30219" issue="16010" author="smithbk" type="comment" created="2017-08-25 17:07:16.0" updateauthor="smithbk" updated="2017-08-25 17:20:20.0"> <body><! CDATA A single OU will not be sufficient.  OUs are arranged hierarchically, are order dependent, and need not be unique. For example, the Admin OU is not unique below, and the order of OUs is significant. {code} C=US, O=Org1, OU=Finance, OU=Admin, CN=Alice C=US, O=Org1, OU=Engineering, OU=Admin, CN=Bob {code}  The following should work though: {code} LDAP: attributes: hf.Revoker: DN like 'C=US, O=Org1, OU=Finance, OU=Admin, CN=*' {code}  So in this example, Alice is a revoker but Bob is not. Obviously the "DN like" part depends on the expr framework, so unless someone is really pushing to get this, should wait until post v1.1.  ></body> </Action>
<Action id="31684" issue="16010" author="smithbk" type="comment" created="2017-10-06 19:05:11.0" updateauthor="smithbk" updated="2017-10-06 19:05:11.0"> <body><! CDATA https://gerrit.hyperledger.org/r/14275  FAB-3416  Vendoring govaluate https://gerrit.hyperledger.org/r/14279  FAB-3416  Map LDAP attrs to fabric CA attrs  ></body> </Action>
<Action id="34651" issue="16010" author="rennman" type="comment" created="2017-11-15 21:14:02.0" updateauthor="rennman" updated="2018-01-08 21:53:14.0"> <body><! CDATA  https://gerrit.hyperledger.org/r/#/c/15455/   Enhance fvt image LDAP attributes     In order to exploit the new function, the fvt environment will be updated to include the following: # Enable the memberOf overlay for the slapd server # Create groups that infer access control and can be used to correlate with native fabric-ca server attributes: |Attr|Group| |hf.Revoker|cn=Revoker,ou=groups,dc=example,dc=com| |hf.GenCrl|cn=Gencrl,ou=groups,dc=example,dc=com| |hf.Revoker hf.GenCrl|cn=pkiAdmin,ou=groups,dc=example,dc=com| |hf.IntermediateCa|cn=Ca,ou=groups,dc=example,dc=com| # Create groups that be used to correlate with user 'type' as defined by native fabric-ca server attribute hf.Type: |Type|Group| |peer|cn=Peer,ou=groups,dc=example,dc=com| |client|cn=Client,ou=groups,dc=example,dc=com| |user|cn=User,ou=groups,dc=example,dc=com| |app|cn=App,ou=groups,dc=example,dc=com| |auditor|cn=Auditor,ou=groups,dc=example,dc=com| |validator|cn=Validator,ou=groups,dc=example,dc=com| # Create new organizational hierarchies that correspond to existing fabric-ca test artifacts and samples: ## ou=department1,ou=bank_a,dc=hyperledeger,dc=example,dc=com ## ou=department1,ou=bank_b,dc=hyperledeger,dc=example,dc=com ## ou=department1,ou=bank_c,dc=hyperledeger,dc=example,dc=com ## ou=department1,ou=org1,dc=hyperledeger,dc=example,dc=com ## ou=department2,ou=org1,dc=hyperledeger,dc=example,dc=com ## ou=department1,ou=org2,dc=hyperledeger,dc=example,dc=com ## ou=department2,ou=org2,dc=hyperledeger,dc=example,dc=com # Create new user groups with divergent affiliation paths: ## dn: ou=dev,ou=fabric,dc=hyperledeger,dc=example,dc=com ## dn: ou=users,ou=dev,ou=fabric,dc=hyperledeger,dc=example,dc=com ## dn: ou=peers,ou=dev,ou=fabric,dc=hyperledeger,dc=example,dc=com ## dn: ou=tst,ou=fabric,dc=hyperledeger,dc=example,dc=com ## dn: ou=users,ou=tst,ou=fabric,dc=hyperledeger,dc=example,dc=com ## dn: ou=peers,ou=tst,ou=fabric,dc=hyperledeger,dc=example,dc=com # Create new admins that have affiliation authority only with their domain scope: ## uid=devadmin,ou=dev,ou=fabric,dc=hyperledeger,dc=example,dc=com ## uid=tstadmin,ou=dev,ou=fabric,dc=hyperledeger,dc=example,dc=com # Create a new admin that hangs off of the LDAP root hierarchy and has implicit authority to all sub-nodes: uid=rootadmin,dc=example,dc=com # Create converters to map LDAP groups to fabric-ca attributes {code:java} converters: - name: hf.GenCRL value: attr("memberOf") =~ "cn=Gencrl,ou=groups,dc=example,dc=com" || attr("memberOf") =~ "cn=pkiAdmin,ou=groups,dc=example,dc=com" - name: hf.Revoker  value: attr("memberOf") =~ "cn=Revoker,ou=groups,dc=example,dc=com" || attr("memberOf") =~ "cn=pkiAdmin,ou=groups,dc=example,dc=com" - name: hf.IntermediateCA value: attr("memberOf") =~ "cn=Ca,ou=groups,dc=example,dc=com" - name: hf.Registrar.Roles value: map(attr("memberOf"),"roles") maps: ROLES: - name: cn=Client,ou=groups,dc=example,dc=com value: client - name: cn=User,ou=groups,dc=example,dc=com value: user - name: cn=Peer,ou=groups,dc=example,dc=com value: peer - name: cn=App,ou=groups,dc=example,dc=com value: app - name: cn=Auditor,ou=groups,dc=example,dc=com value: auditor - name: cn=Validator,ou=groups,dc=example,dc=com value: validator - name: cn=pkiAdmin,ou=groups,dc=example,dc=com value: pkiadmin {code} # Update the fvt ldap_test to check access control equivalent to ## hf.Revoker ( both + and - ) ## hf.GenCrl  ( both + and - ) ## proper affiliation path for revocation # Fix a bug in lib/ldap/client.go that does not account for case sensitivity when calculating affiliation path from DN # Fix a debug print bug in lib/serverrequestcontext.go # scripts/fvt/intermediateca_test.sh is updated to use LDAP instead of the fabric-ca native registry in order to test hf.intermediateCa for LDAP identities  ></body> </Action>
