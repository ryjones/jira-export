<Action id="33201" issue="22849" author="harsha544" type="comment" body="Per  ~rennman &apos;s Suggestion tried increasing the overall wait time by *{color:#333333}gocov test -timeout 15m $PKGS | gocov-xml &gt; coverage.xml{color}* (from a default of 10 mins) to 15 mins. However the UT were still not passing on every run." created="2017-10-26 01:48:29.0" updateauthor="harsha544" updated="2017-10-26 01:48:29.0"/>
<Action id="33202" issue="22849" author="harsha544" type="comment" body="^^^  ~rameshthoomu  request you to kindly re-run some more fabric-ca UT in sandbox. And advice on the same." created="2017-10-26 01:51:38.0" updateauthor="harsha544" updated="2017-10-26 01:52:13.0"/>
<Action id="33242" issue="22849" author="rennman" type="comment" created="2017-10-26 18:31:23.0" updateauthor="rennman" updated="2017-10-26 18:31:23.0"> <body><! CDATA This still appears to be a permissions problem: {{main_test.go:540: Enroll command invoked with -c /tmp/client-config.json failed: Failed to store TLS root certificate at '/tmp/msp/tlscacerts/tls-localhost-7090.pem': open /tmp/msp/tlscacerts/tls-localhost-7090.pem: permission denied}}  The failing test creates the directory with appropriate permissions before writing the file: {{os.MkdirAll(dir, 0755)}} where {{dir=/tmp/msp/tlscacerts/}}  The error is returned from {{ioutil.WriteFile()}}, where the filename is {{tls-localhost-7090.pem}}  This ought to work, since the '7' in '0755' is sufficient for the creator of the dir to cd, ls, and create a file in that dir.  Does this fail consistently? What is the umask setting for the host machine? Are there any extended acls defined? Under what user/group id is the test being run? Is the sticky bit set anywhere? Are there any other security products installed/configured on the host machine (selinux, etc....) I'm grasping at straws, but it's an environment issue.  ></body> </Action>
<Action id="33320" issue="22849" author="smithbk" type="comment" body=" ~harsha544  What release is this against?  master or v1.0.3?  If this is against v1.0.3, then you should be using go 1.7" created="2017-10-27 17:57:49.0" updateauthor="smithbk" updated="2017-10-27 17:57:49.0"/>
<Action id="33330" issue="22849" author="harsha544" type="comment" created="2017-10-28 04:38:04.0" updateauthor="harsha544" updated="2017-10-28 04:38:04.0"> <body><! CDATA  ~smithbk  This is against master head code of fabric-ca hence we are using go1.9  ~rennman  Sorry for being late, I will get required details and come back to you.  ></body> </Action>
<Action id="33333" issue="22849" author="harsha544" type="comment" created="2017-10-28 14:49:16.0" updateauthor="harsha544" updated="2017-10-28 14:53:43.0"> <body><! CDATA  ~rennman  Here's the requested information :-  jenkins@blockchain-5:~$ getenforce  *Disabled* jenkins@blockchain-5:~$ umask  *0002* jenkins@blockchain-5:~$ id uid=1001(jenkins) gid=1001(jenkins) groups=1001(*jenkins*),27(*sudo*),116(*docker*) jenkins@blockchain-5:~$ ls -ld /tmp *drwxrwxrw*t 18 root root 16384 Oct 28 14:46 /tmp jenkins@blockchain-5:~$     Will do multiple runs on above node to see if it consistently fails or passes.  ></body> </Action>
<Action id="33334" issue="22849" author="harsha544" type="comment" created="2017-10-28 16:31:06.0" updateauthor="harsha544" updated="2017-10-28 16:31:06.0"> <body><! CDATA  ~rennman  Enclosed multiple run data for Node5 which consistently fails. Also enclosing run data from node2 where Fabric-CA  UT is passing. Here are selinux,umask details from node2 :-  jenkins@blockchain-2:~$ getenforce *Disabled* jenkins@blockchain-2:~$ umask *0002* jenkins@blockchain-2:~$ id uid=1001(jenkins) gid=1001(jenkins) groups=1001(*jenkins*),27(*sudo*),110(*lxd*),116(*docker*) jenkins@blockchain-2:~$ ls -ld /tmp *drwxrwxrwt* 20 root root 266240 Oct 28 16:29 /tmp jenkins@blockchain-2:~$  ></body> </Action>
<Action id="33629" issue="22849" author="harsha544" type="comment" body=" ~rennman   ~smithbk  Any suggestions/thoughts please ?" created="2017-10-31 18:32:15.0" updateauthor="harsha544" updated="2017-10-31 18:32:15.0"/>
<Action id="33640" issue="22849" author="rennman" type="comment" body=" ~harsha544  Nothing stands out based on the info provided. There is only one failure from one operation in one test. If you can give me access to blockchain-5, I can try to do some runtime troubleshooting." created="2017-10-31 19:54:22.0" updateauthor="rennman" updated="2017-10-31 19:54:22.0"/>
<Action id="34207" issue="22849" author="rennman" type="comment" created="2017-11-01 19:58:55.0" updateauthor="rennman" updated="2017-11-01 19:58:55.0"> <body><! CDATA It turns out that we are leaving some data lying around in /tmp. In and of itself, that's not a bad thing, but 1 - the data storage on the power systems is persistent 2 - In late Sep, the UT was run under the 'root' user Consequently, two of the tests – testInsertAndGetUser() from lib/dasqlite_test.go, and TestClientCommandsNoTLS() from ./cmd/fabric-ca-client/main_test.go – were failing due to permissions issues with the leftover data from the old test run.  I deleted the problem files, and all of the UT ran successfully.  ></body> </Action>
<Action id="34232" issue="22849" author="harsha544" type="comment" created="2017-11-02 08:59:34.0" updateauthor="harsha544" updated="2017-11-02 08:59:34.0"> <body><! CDATA  ~rennman   I ran multiple fabric-ca UTs on blockchain-5, ensured I cleaned up /tmp before I executed UT, however at times I encounter this failure :-   **** Test killed with quit: ran too long (10m0s).* FAIL    github.com/hyperledger/fabric-ca/lib    600.103s error: exit status 1 panic: EOF  Do you think there's more obvious fix as opposed to increasing overall wait time to 15 mins. **  ></body> </Action>
<Action id="34253" issue="22849" author="rennman" type="comment" body=" ~harsha544  Other than figuring out where the bottleneck is, no. From my experience, the performance on ppc is terrible. The most likely culprit is poor I/O performance." created="2017-11-02 16:04:34.0" updateauthor="rennman" updated="2017-11-02 16:05:42.0"/>
