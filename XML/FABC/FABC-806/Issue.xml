<Issue id="37242" key="FABC-806" number="806" project="10607" reporter="ooharawork" assignee="mastersingh24" creator="ooharawork" type="10004" summary="A user who enrolls the MSP can obtain a certificate with an arbitrary expiration date" priority="3" resolution="10000" status="6" created="2019-01-30 01:01:31.0" updated="2019-12-05 17:39:29.0" resolutiondate="2019-12-05 17:39:29.0" votes="0" watches="5" workflowId="48832"> <description><! CDATA h2. Summary  A user who enrolls the MSP can obtain a certificate with an arbitrary expiration date before the cacert's expiry, because fabric-ca-server sets the date based on a parameter from the client, with no check other than to compare it with cacert's expiry. The server should check the validity to ensure that it would not exceed a deadline defined in the server.  h2. Background  According to RFC 5280, it is CA's (hence virutally CA admin's) responsibility to set the expiry date to an appropriate value :  {quote} 4.1.2.5 Validity The certificate validity period is the time interval during which the CA warrants that it will maintain information about the status of the certificate.  ...  (notAfter). {quote}  h2. Observation  h3. Expected Behavior  The ca server should not permit any non-admin user to set an arbitrary expiry date of a certificate.  h3. Actual Behavior  In Fabric, {{fabric-ca-client enroll}} sends a request like this:  {code:json} {"hosts": "myhost" , "certificate_request":"-----BEGIN CERTIFICATE REQUEST ... \n", "profile":"", "crl_override":"", "label":"example", "NotBefore":"0001-01-01T00:00:00Z", "NotAfter":"0001-01-01T00:00:00Z", "CAName":""} {code}  Here, we have a {{NotAfter}} field. In the current implementation of fabric-ca-client, it is always sent with the ``zero'' value above. With that default value, the ca server sets the expiry date as per specified in a profile in the server side, which is ok. https://github.com/hyperledger/fabric-ca/blob/release-1.3/lib/serverenroll.go#L109   However, by using curl or a modified client, you can send a crafted request in which the NotAfter field is set to an arbitrary date. The server accepts NotAfter field if it does not exceed cacert's expiry, then sets it to the enrolled certificate for the user.   h2. Conclusion  Enroll/reenroll interface on the server should check temporal validity of NotAfter parameter, comparing not only with cacert's expiry, but also with some other deadline explicitly specified for that parameter.  ></description> </Issue>
