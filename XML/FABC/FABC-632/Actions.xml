<Action id="19228" issue="12937" author="mastersingh24" type="comment" created="2016-10-14 12:42:30.0" updateauthor="mastersingh24" updated="2016-10-14 12:42:30.0"> <body><! CDATA First, thanks for doing this  ~ellaki   One thing which we should also consider as part of this discussion is how auditing would be handled as well. It seems that in all cases unless you put explicit trust in the "client" that the TCA / membership services needs to store some amount of information about the mapping between client / enrollment / tcert.   Options 1 and 3 require less long term storage than Option 2 but nonetheless storage is still required in order for an "authority" to release some type of material in order to "re-link" transactions.  If I read option 2 correctly, this is really just standard PKI except for the fact that CSRs must be signed with the long term enrollment key in order for the TCA to "securely" store the mapping of which tcerts where issued to which client.   But it seems that for audit purposes the TCA would need to minimally store the serial number of every tcert ever requested by a client (assuming that the auditors are not willing to rely on end clients alone to keep everything around).  I am not sure that option 3 is realistic in a multi-party, distributed environment.  So I suppose I tend to lean towards option #2 / #2.1    ></body> </Action>
<Action id="19266" issue="12937" author="elli-androulaki" type="comment" created="2016-10-18 14:03:37.0" updateauthor="elli-androulaki" updated="2016-10-18 14:03:37.0"> <body><! CDATA Hi  ~mastersingh24 , You are correct. Option 1 and 3 require have less space overhead on the TCA side to accommodate also auditability needs.  For option 2, to accommodate secure auditability requirements, i.e., traceability/re-linkability of a client's transactions or retrieving the identity of the owner of a certificate, without the membership service being able to frame a user, CSRs would need to be signed and stored in one or more oof these places:  (i) inside the tcert, e.g., in an encrypted form (resulting into bigger tcerts), or  (ii) in the TCA premise (resulting into higher space overhead on TCA side), or/and, (iii) on the client-side (if motivated/trustworthy to do so).  If signed CSRs are stored in TCerts, no further storing of these would be needed. However, the size of TCerts would be considerably increased.  If client-auditors require that the client stores signed CSRs, having the TCA only storing the TCert numbers associated to a client tcerts would suffice.  However, a membership service auditor may not be satisfied in this case. Here the answers that membership service would give to a client-auditor (auditor auditing a client's behavior), and to a membership service auditor should be ensured not to be contradicting. To achieve the latter, the membership service should be able to provide for each tcert issued the associated signed CSR.  I also agree with you on option 3.   Option 2/2.1 is definitely simpler.      ></body> </Action>
<Action id="19267" issue="12937" author="elli-androulaki" type="comment" body=" ~smithbk ,  ~adc ,  ~ales ,  ~ashku  do you have any comments on this?" created="2016-10-18 14:04:58.0" updateauthor="elli-androulaki" updated="2016-10-18 15:38:37.0"/>
<Action id="19271" issue="12937" author="ashutosh_kumar" type="comment" body=" ~ellaki  : Thanks for putting together the document. I&apos;ll look into this by end of this week as material covered needs more time for me to comprehend. " created="2016-10-18 19:30:15.0" updateauthor="ashutosh_kumar" updated="2016-10-18 19:30:15.0"/>
<Action id="19276" issue="12937" author="angelo.decaro" type="comment" body="It would be interesting to see if we can reduce the number of signatures to be sent in #2 by aggregating them in some way. Schnorr (and maybe the variant EdDSA) would allow that." created="2016-10-19 06:26:27.0" updateauthor="angelo.decaro" updated="2016-10-19 07:45:41.0"/>
<Action id="19277" issue="12937" author="elli-androulaki" type="comment" created="2016-10-19 07:33:14.0" updateauthor="elli-androulaki" updated="2016-10-19 07:33:14.0"> <body><! CDATA Thanks all for your answers.   ~adc , (though have not looked into the specifics of EdDSA) to my knowledge Schnorr is not supported with standard PKCS#11 calls.  Also, not clear to me how this could help reduce the number of signatures if not some non-standard trick on key-generation is used. May you please elaborate?  ></body> </Action>
<Action id="19278" issue="12937" author="angelo.decaro" type="comment" created="2016-10-19 07:51:39.0" updateauthor="angelo.decaro" updated="2016-10-19 07:51:39.0"> <body><! CDATA There is no need to trick the Schnorr key generation process in order to have signature aggregation. Also, at the end of the day Schnorr keys looks like ECDSA key, ECDSA is a variant of Schnorr.  Bitcoin community is also exploring them. The fact that PKCS#11 does not support Schnorr signature should not limit our exploration. It is also interesting to note that ECDSA does not have a proof of security (only the variants have), instead Schnorr has.   ></body> </Action>
<Action id="19279" issue="12937" author="elli-androulaki" type="comment" created="2016-10-19 08:11:48.0" updateauthor="elli-androulaki" updated="2016-10-19 08:11:48.0"> <body><! CDATA  ~adc  I do not disagree with what you say in terms of exploration, or in terms of how secure Schnorr signatures are. In fact we should do research around it!   Having said that, the aim of this jira item is to explore the **tradeoffs** of alternative tcert-key-generation designs that can be implemented **without modifying** standard HSM firmware interface (PKCS#11). Given this as requirement, do you see any direct application on EdDSA being possible, while reducing the space requirements on the TCA side? Thanks.  ></body> </Action>
<Action id="19299" issue="12937" author="smithbk" type="comment" body="With regard to 2/2.1 and the CSR storage options, what if the client sent both a CSR and a signed hash of CSR and the TCA puts signed hash of the CSR into the TCert?   This wouldn&apos;t increase the size of the TCert too much, but would we lose anything?" created="2016-10-19 17:55:00.0" updateauthor="smithbk" updated="2016-10-19 17:55:00.0"/>
<Action id="19310" issue="12937" author="angelo.decaro" type="comment" body="EdDSA, as a variant of Schnorr, has the same issues. It is not currently supported by default, unfortunately, I would add." created="2016-10-20 06:17:14.0" updateauthor="angelo.decaro" updated="2016-10-20 06:17:14.0"/>
<Action id="19349" issue="12937" author="elli-androulaki" type="comment" body=" ~keithsmith  So, having the tcert including the client-signature on the content of the certificate could act as a way of ownership of a certain certificate owner. This would be essentially being equivalent to having a single CSR per TCert. Each CSR could then be included in the TCert (in an encrypted form, to avoid linkability). The problem in this case would be that you would have an increased communication overhead as the client to issue N TCerts would need to send along 2xN signatures, instead of N+1 as with following option 2 directly. " created="2016-10-21 15:21:11.0" updateauthor="elli-androulaki" updated="2016-10-21 15:21:11.0"/>
<Action id="19519" issue="12937" author="smithbk" type="comment" body="So the conclusion of all of this is that we will provide both #1 and #2 as options.  Sound correct?" created="2016-10-26 17:55:03.0" updateauthor="smithbk" updated="2016-10-26 17:55:03.0"/>
<Action id="19776" issue="12937" author="elli-androulaki" type="comment" body="Fine for me!" created="2016-11-17 14:50:32.0" updateauthor="elli-androulaki" updated="2016-11-17 14:50:32.0"/>
