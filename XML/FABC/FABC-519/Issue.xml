<Issue id="15366" key="FABC-519" number="519" project="10607" reporter="smithbk" creator="smithbk" type="10001" summary="fabric-ca-server needs a way to limit what can be in an issued certificate" priority="3" status="10000" created="2017-03-15 16:55:21.0" updated="2019-07-27 14:59:29.0" votes="0" watches="3" workflowId="32701"> <description><! CDATA Once you have an enrollment ID and secret, you can send an enrollment request to the fabric-ca-server with a CSR that has any fields that you want.  Now that the fabric is using the OU field to make authorization decisions, we need to be able to restrict which OU fields can be requested in a CSR based on which user is enrolling; otherwise, a user with an enrollment ID and secret could gain access by requesting an OU that he/she shouldn't have.  Furthermore, I could imagine chaincode wanting to use some other field in a certificate to make access control decisions.  Therefore, the fabric-ca-server should more generally be able restrict what constitutes a valid CSR, and I think doing so on a per identity type basis makes sense.  Here is a proposal for how to fix this.  The fabric-ca-server already requires the "type" to be specified when registering an identity. Furthermore, it already checks to make sure that a user can only register identities with authorized types via the "hf.Registrar.Roles" and "hf.Registrar.DelegateRoles" attributes. Here is the default definition for the bootstrap admin. {code} identities: - name: admin pass: adminpw type: client affiliation: "" attrs: hf.Registrar.Roles: "client,user,peer,validator,auditor,ca" hf.Registrar.DelegateRoles: "client,user,validator,auditor" hf.Revoker: true hf.IntermediateCA: true {code}  A new config section should be added similar to the following: {code} roles: peer:  certfilter: "<bool-expr-for-valid-cert>" user: certfilter: "<bool-expr-for-valid-cert>"     {code}  So when an enrollment request is received for a particular type of user, the type must in the "roles" section and the associated certfilter's boolean expression must evaluate to true on the certificate before returning it successfully.  This allows a linkage to be established between identity types and fields in a certificate on which access control decisions are being made (e.g. OU).  The precise boolean expression language will be posted later, but will be based on govaluate, so not reinventing the wheel.  An alternative approach rather than associating the boolean expression with the identity type is to associate an expression with each identity.  This would be more flexible in that you don't have to create a new type for each slightly different expression that you may want.  The disadvantage is that I don't think we could use govaluate because we would need to limit the language to something that could easily be "subsetted"; that is, when a registrar registers an identity, we need to make sure that they can only register an identity with a subset that they themselves own.  That is what the hf.Registrar.Roles is about.  The registrar can't registrar an identity with a type that isn't in one of it's roles.  And yes, we should use "type" or "roles" but not both as they are being mixed here.   ></description> </Issue>
