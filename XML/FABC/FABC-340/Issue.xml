<Issue id="22485" key="FABC-340" number="340" project="10607" reporter="rennman" assignee="aambati" creator="rennman" type="10004" summary="fabric-ca db lock errors in sqlite3" priority="3" resolution="10000" status="6" created="2017-10-18 15:38:22.0" updated="2018-07-18 22:04:21.0" resolutiondate="2017-10-31 19:48:37.0" votes="0" watches="2" workflowId="32520"> <description><! CDATA When sending multiple parallel requests to a fabric_ca server cluster that uses shared sqlite3 databases, the server occasionally returns a 'database locked' error.  This should be considered a transient failure, and not a fatal error. Although the code does attempt to account for this in NewUserRegistrySQLLite3() -- {code:java} // Set maximum open connections to one. This is to share one connection // across multiple go routines. This will serialize database operations // with in a single server there by preventing "database is locked" // error under load. The "Database is locked" error is still expected // when multiple servers are accessing the same database (but mitigated // by specifying _busy_timeout to 5 seconds).{code} -- data from fvt test suggests that the timeout is insufficient for the load generated by the clustering fvt test.  The recommendation is to increase the timeout to 10 seconds: {code:java} @@ -43,7 +43,7 @@ func NewUserRegistrySQLLite3(datasource string) (*sqlx.DB, error) { return nil, errors.WithMessage(err, "Failed to create SQLite3 database") }  - db, err := sqlx.Open("sqlite3", datasource+"?_busy_timeout=5000") + db, err := sqlx.Open("sqlite3", datasource+"?_busy_timeout=10000") if err != nil { return nil, errors.Wrap(err, "Failed to open sqlite3 DB") } {code}    This has been empirically proven to work for the purposes of the test.     From the sqlite3 documentation:  int sqlite3_busy_timeout(sqlite3*, int ms);  This routine sets a  busy handler|https://sqlite.org/c3ref/busy_handler.html  that sleeps for a specified amount of time when a table is locked. The handler will sleep multiple times until at least "ms" milliseconds of sleeping have accumulated. After at least "ms" milliseconds of sleeping, the handler returns 0 which causes  sqlite3_step()|https://sqlite.org/c3ref/step.html  to return  SQLITE_BUSY|https://sqlite.org/rescode.html#busy .     ></description> </Issue>
