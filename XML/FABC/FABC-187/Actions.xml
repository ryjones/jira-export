<Action id="25931" issue="17714" author="mastersingh24" type="comment" created="2017-06-09 21:44:11.0" updateauthor="mastersingh24" updated="2017-06-09 21:44:53.0"> <body><! CDATA Not quite sure understand exactly what you are doing here.  Are you trying to run fabric-ca-client in parallel with the same config?  ~dbshah   ></body> </Action>
<Action id="25945" issue="17714" author="dbshah" type="comment" created="2017-06-10 07:00:04.0" updateauthor="dbshah" updated="2017-06-10 07:00:04.0"> <body><! CDATA I am running this command:     fabric-ca-client enroll -u https://adminOrderer:adminOrdererpw@fabric-ca-0a.net_blockchain.com:7054 --caname OrdererCA&   fabric-ca-client enroll -u https://adminOrderer:adminOrdererpw@fabric-ca-0a.net_blockchain.com:7054 --caname OrdererCA     To make simultaneous enroll call to CA. So the second call happens before the server has replied on the first one.  ></body> </Action>
<Action id="25950" issue="17714" author="mastersingh24" type="comment" body="Assigning to myself to take a look" created="2017-06-10 12:29:01.0" updateauthor="mastersingh24" updated="2017-06-10 12:29:01.0"/>
<Action id="25961" issue="17714" author="mastersingh24" type="comment" created="2017-06-10 18:21:14.0" updateauthor="mastersingh24" updated="2017-06-10 18:23:16.0"> <body><! CDATA So this issue is actually a bit more interesting than it seems at first glance.  If you use sqlite as the database, it's actually possible to enroll at least 1 more time than max enrollments if you submit two enroll requests at just the right time (you can basically use the same commands as in the comment above from  ~dbshah .  It looks like in the case of MySQL that attempting to make the exact same update to a row is fine but does not result in the row actually changing.  So it turns out that it's actually the desired result else you would have 2 successful enrollments but the enrollment count would only be incremented by 1.  But need to look more into what we should do if anything in the near term  ></body> </Action>
<Action id="25970" issue="17714" author="mastersingh24" type="comment" created="2017-06-10 22:28:36.0" updateauthor="mastersingh24" updated="2017-06-10 22:30:15.0"> <body><! CDATA While we could try transactions and locks, looks like adjust the SQL to  {code} UPDATE users SET state = state + 1 WHERE (id = ? AND state < ?) {code}  will do the trick.  It will allow concurrent updates since it does state = state + 1 while at the same time still honoring max enrollments  ></body> </Action>
<Action id="25984" issue="17714" author="mastersingh24" type="comment" body="http://gerrit.hyperledger.org/r/10453" created="2017-06-11 11:48:18.0" updateauthor="mastersingh24" updated="2017-06-11 11:48:18.0"/>
<Action id="25992" issue="17714" author="mastersingh24" type="comment" body=" ~dbshah  - we should have a release candidate later this week which will include this fix (but feel free to pull it down and give it a try as well)" created="2017-06-11 16:04:23.0" updateauthor="mastersingh24" updated="2017-06-11 16:04:23.0"/>
