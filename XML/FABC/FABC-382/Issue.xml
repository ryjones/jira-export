<Issue id="23865" key="FABC-382" number="382" project="10607" reporter="rennman" assignee="aambati" creator="rennman" type="10004" summary="Need a way to configure key lengths/algorithm for CSR" priority="3" resolution="10000" status="6" created="2017-11-08 20:41:21.0" updated="2018-07-18 22:04:29.0" resolutiondate="2017-12-13 15:21:54.0" votes="0" watches="2" workflowId="32562"> <description><! CDATA The users guide explicitly indicates a choice between three well-known ECDSA curves:    prime256v1    secp384r1   secp521r1 by configuring {code:java} key:    algo: ecdsa    size: 256|384|521{code}  as part of the ca.csr section. However, this apparently has no effect. RSA is not mentioned, but it is a reasonable assumption that it is supported, given the 'algo:' keyword, but that apparently isn't supported either.  The presumed alternative (not described in the document) is to configure in BSSCP (inferring the 'security' parm): {code:java} bccsp:    default: SW    sw:       hash: SHA2       security: 256|384|521{code}  but this has no effect as well, and there is no obvious way to code the required algorithm.   Lastly, there is an indication in the bccsp code in getBCCSPKeyOpts() that RSA actually *is* supported, as well as multiple key sizes, though secp521r1 is still apparently a TBD: {code:java} case "rsa": switch kr.Size() { case 2048: ... case 3072: ... case 4096: ... default: // Need to add a way to specify arbitrary RSA key size to bccsp return nil, errors.Errorf("Invalid RSA key size: %d", kr.Size()) } case "ecdsa": switch kr.Size() { case 256: ... case 384: ... case 521: ... // Need to add curve P521 to bccsp // return &bccsp.ECDSAP512KeyGenOpts{Temporary: false}, nil return nil, errors.New("Unsupported ECDSA key size: 521") {code}  ></description> </Issue>
