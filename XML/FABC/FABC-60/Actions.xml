<Action id="57372" issue="18573" author="nyet" type="comment" created="2019-02-20 17:54:11.0" updateauthor="nyet" updated="2019-02-20 17:54:11.0"> <body><! CDATA The problem is the keystore contains (potentially) more than a few private keys. The TLS private cert should probably not be saved in keystore at all - it takes a few more steps to figure out which file in the keystore belongs to the tls cert in `signcerts`  Â   ></body> </Action>
<Action id="57373" issue="18573" author="nyet" type="comment" created="2019-02-20 18:17:58.0" updateauthor="nyet" updated="2019-02-20 18:20:24.0"> <body><! CDATA Even worse, the CA server can only sign using `FABRIC_CA_SERVER_CA_KEYFILE` since `FABRIC_CA_SERVER_TLS_KEYFILE` is only used as the TLS server endpoint.  So having a separate TLSCA is best practice,e but the ca-server does not support it.  https://lists.hyperledger.org/g/fabric/topic/29938289  ></body> </Action>
<Action id="57377" issue="18573" author="mastersingh24" type="comment" created="2019-02-20 18:44:45.0" updateauthor="mastersingh24" updated="2019-02-20 18:44:45.0"> <body><! CDATA  ~nyet    {quote}So having a separate TLSCA is best practice,e but the ca-server does not support it.{quote}  You can run multiple physical Fabric CA servers or you can use the multi-root capability if you want a single process:  https://hyperledger-fabric-ca.readthedocs.io/en/release-1.4/users-guide.html#setting-up-multiple-cas  ></body> </Action>
<Action id="57986" issue="18573" author="nyet" type="comment" created="2019-03-07 17:48:18.0" updateauthor="nyet" updated="2019-03-07 17:48:18.0"> <body><! CDATA Is there a way to derive the _sk name from the public cert, so we know which _sk file to copy to tls-key.pem?  The exhaustive way is to extract the public key from each private key and compare it with tls-crt.pem but that seems like the long way around  ></body> </Action>
<Action id="57992" issue="18573" author="nyet" type="comment" created="2019-03-07 19:30:49.0" updateauthor="nyet" updated="2019-04-12 18:11:03.0"> <body><! CDATA {code:java} $ openssl x509 -pubkey -noout -in cert.pem | openssl ec -pubin -outform DER | openssl dgst -sha1 read EC key writing EC key (stdin)= 19966dcc83a5c2629db0c5499b5e2c2af96a5546 $ openssl x509 -noout -text -in cert.pem .... X509v3 Subject Key Identifier: 8C:03:4E:5F:2A:50:0E:19:8E:F3:32:DE:8B:47:37:69:B5:28:2F:01 X509v3 Authority Key Identifier: keyid:75:90:C3:22:6D:DE:A9:3B:AA:E1:F5:D2:AE:6E:FE:3D:80:15:C0:8E {code} {code:java} $ ls -1 keystore/ 5dae05ed804b89c6b1331ca80a4b5b6ada56638717d32ba5aff6a20b830d54c8_sk {code}  http://certificateerror.blogspot.com/2011/02/how-to-validate-subject-key-identifier.html   https://security.stackexchange.com/questions/128944/generate-subject-key-identifier-by-hand-using-openssl-command-sequence  {code:java} $ openssl x509 -pubkey -noout -in cert.pem | openssl ec -pubin -outform DER | openssl dgst -sha1 read EC key writing EC key (stdin)= 19966dcc83a5c2629db0c5499b5e2c2af96a5546 {code} {code:java} $ openssl x509 -pubkey -noout -in cert.pem | openssl ec -pubin -outform DER | openssl dgst -sha256 read EC key writing EC key (stdin)= 527d94807515a71e0bff631101491271a82ebb09209ecb440056263bf2bde10c {code}  ></body> </Action>
<Action id="59221" issue="18573" author="nyet" type="comment" created="2019-04-12 23:01:10.0" updateauthor="nyet" updated="2019-04-12 23:05:39.0"> <body><! CDATA Well this works but has an error that I guess can be ignored: {code} $ ls -1 keystore 5dae05ed804b89c6b1331ca80a4b5b6ada56638717d32ba5aff6a20b830d54c8_sk $ openssl x509 -noout -in cert.pem -pubkey | openssl asn1parse 0:d=0  hl=2 l=  89 cons: SEQUENCE 2:d=1  hl=2 l=  19 cons: SEQUENCE 4:d=2  hl=2 l=   7 prim: OBJECT            :id-ecPublicKey 13:d=2  hl=2 l=   8 prim: OBJECT            :prime256v1 23:d=1  hl=2 l=  66 prim: BIT STRING $ openssl x509 -noout -in cert.pem -pubkey | openssl asn1parse -strparse 23 -out pub.der; openssl dgst -r pub.der | cut -f 1 -d " " 0:d=0  hl=2 l=  12 prim: OCTET STRING       HEX DUMP :620A8A6BA03AD06D2C78387D 14:d=0  hl=4 l=  32 prim: appl   9218   Error in encoding 140718717883456:error:0D07207B:asn1 encoding routines:ASN1_get_object:header too long:../crypto/asn1/asn1_lib.c:101: 5dae05ed804b89c6b1331ca80a4b5b6ada56638717d32ba5aff6a20b830d54c8 {code}  ></body> </Action>
<Action id="59226" issue="18573" author="nyet" type="comment" created="2019-04-15 05:25:00.0" updateauthor="nyet" updated="2019-05-24 15:40:24.0"> <body><! CDATA Specifying hl + l with {{-length}} seems to work, interestingly: {code:sh} openssl x509 -noout -in cert.pem -pubkey | openssl asn1parse -strparse 23 -length 34 -out pub.der {code} Or {code:sh} openssl x509 -noout -pubkey -in cert.pem | openssl ec -pubin -outform d | dd ibs=26 skip=1 | openssl dgst -sha256 {code}   https://github.com/openssl/openssl/issues/1381   ></body> </Action>
