<Issue id="15606" key="FABC-243" number="243" project="10607" reporter="rennman" assignee="skarim" creator="rennman" type="10004" summary=" SECURITY  Out-of-memory condition - need defensive code for CRL/OSCP retrieval" priority="2" resolution="10000" status="6" created="2017-04-06 19:00:03.0" updated="2018-07-18 22:04:00.0" resolutiondate="2017-07-27 20:07:57.0" votes="0" watches="4" workflowId="32423"> <description><! CDATA There are other cases where we aren't defending against this (reading a config file comes to mind) but in those cases the server administrator is in control.  In this case, we are at the mercy of bad actors sending requests to an active server.  Given the enrollment of an admin, and the following structure: {code:java} /tmp/fabric-ca ├── admin │   ├── enroll.yaml │   ├── fabric-ca-client-config.yaml │   └── msp │       ├── cacerts │       ├── keystore │       │   ├── key.pem │       │   └── key.pem.old │       └── signcerts │           ├── cert.pem │           └── cert.pem.old {code}  cert.pem.old and key.pem.old represent the original enrollment authentication data. Trudy has replaced them with cert.pem that contains a CDP with a vaule of http://mal-server/10G.file  We just keep reading until we choke:  {code:java} fatal error: runtime: out of memory runtime stack: runtime.throw(0xaaeca9, 0x16) 	/usr/local/go/src/runtime/panic.go:566 +0x95 runtime.sysMap(0xc820500000, 0x400000000, 0x0, 0xfbcd78) 	/usr/local/go/src/runtime/mem_linux.go:219 +0x1d0 runtime.(*mheap).sysAlloc(0xfa3100, 0x400000000, 0x41a600) 	/usr/local/go/src/runtime/malloc.go:407 +0x37a .... {code}  traceable back to here: {code:java} vendor/github.com/cloudflare/cfssl/revoke/revoke.go:105 {code}    ></description> </Issue>
