<Issue id="15517" key="FABP-54" number="54" project="10611" reporter="baohua" assignee="camelbeck" creator="baohua" type="10002" summary="Enable coverage in testing cases" priority="3" resolution="10000" status="6" created="2017-03-30 02:44:19.0" updated="2018-07-19 01:08:06.0" resolutiondate="2017-04-05 08:56:46.0" votes="0" watches="2" timeoriginalestimate="288000" timeestimate="288000" workflowId="34461"> <description><! CDATA Enable coverage report in the testing results.  pytest-cov and coverage packages are used to achieve this goal.  Coverage.py is a tool for measuring code coverage of Python programs. It monitors the program, noting which parts of the code have been executed, then analyzes the source to identify code that could have been executed but was not. Pytest-cov is the plugin produces coverage reports. All features offered by the coverage package should be available, either through pytest-cov or through coverageâ€™s config file. And it depends on coverage >= 3.7.1.  Code coverage measuring can be divided into three phases: execution, analysis, report. For pytest-cov, these three phases are completed in one time and they are done along with the pytest unit test work. For coverage, execution is done with command "run", analysis and report are done in "report" command. Besides, coverage can combine results from different parts and output a uniform reporting.  As our project will be tested in several different virtualenvs, I would like the coverage report is based on the combined result from these different environments. Thus, I will use coverage to implement analysis and report work.  For the reason that pytest-cov is done along with pytest, I will use it to implement the execution work.  ></description> </Issue>
