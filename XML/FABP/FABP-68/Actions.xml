<Action id="38710" issue="26820" author="vieiramanoel" type="comment" body="Using pycurl all posts can be made, using tls certificate. The fabric-ca cert files are certs self-signed and aren&apos;t recognized by pyopenssl, we should decide a approach to SDK, if we continue using requests library or change the lib that we make requests to fabric-ca in order to accept TLS without huge effort for this" created="2018-01-16 18:43:22.0" updateauthor="vieiramanoel" updated="2018-01-18 05:33:47.0"/>
<Action id="38822" issue="26820" author="baohua" type="comment" created="2018-01-18 05:15:59.0" updateauthor="baohua" updated="2018-01-18 05:15:59.0"> <body><! CDATA  ~grapebaba   ~tcz001 .  Thoughts?  ></body> </Action>
<Action id="38823" issue="26820" author="vieiramanoel" type="comment" created="2018-01-18 05:29:11.0" updateauthor="vieiramanoel" updated="2018-01-18 05:33:10.0"> <body><! CDATA As I commented on a  issue|https://github.com/requests/requests/issues/4477  at requests repo on github:   ...  Everything goes well when I POST from curl:  {code} curl --cacert "./ca-cert.pem" https://ca.goledger.com:7054/api/v1/cainfo -X POST {code}   You can follow the discussion there and see that the problem isn't with the library itself but somehow with the openssl and fabric-ca communication.   So I asked at  #fabric-ca channel|https://chat.hyperledger.org/channel/fabric-ca?msg=Zy3AYJhnoC36NqDvM  about it and smithbk said "You can't connect to fabric-ca-server using openssl.", then I had a hangout with him and he recommended to use another way to request do REST-API that doesn't use openssl. (Ignoring verify warnings/errors is enough for us).   ~vitorduarte  (A teammate which have worked with me on that) Tested doing a get_cainfo() request using pycurl instead requests lib and everything went fine.   Our proposal is to change the manner (lib) that we make requisitions to fabric-ca's REST API in order to implement TLS communication too.  ></body> </Action>
<Action id="38848" issue="26820" author="grapebaba" type="comment" body="I changed cert and key file, the CN of this cert is &apos;ca.org1.example.com&apos;, you can edit your /etc/hosts, let localhost point to it. Then use &apos;ca.org1.example.com&apos; instead of &apos;localhost&apos; in ca_test when enabled tls.Note your current openssl version since old version not support tls 1.2" created="2018-01-18 14:50:40.0" updateauthor="grapebaba" updated="2018-01-18 14:50:40.0"/>
<Action id="38852" issue="26820" author="vieiramanoel" type="comment" created="2018-01-18 15:04:36.0" updateauthor="vieiramanoel" updated="2018-01-18 15:04:36.0"> <body><! CDATA We're not using tests certs, we have a CA running on aws and trying to use sdk o communicate with it. I'll try to update openssl and see if it works    ></body> </Action>
<Action id="38854" issue="26820" author="grapebaba" type="comment" body="from your error, your ca cert seems not match fabric requirement. you can change the cert and key file" created="2018-01-18 15:09:25.0" updateauthor="grapebaba" updated="2018-01-18 15:09:25.0"/>
<Action id="43563" issue="26820" author="guillaumecisco" type="comment" created="2018-04-27 15:28:40.0" updateauthor="guillaumecisco" updated="2018-04-27 15:47:17.0"> <body><! CDATA Hey there,  I've just created a fix by using pycurl for testing the fabric-sdk-py project with fabric-ca sample with version 1.1 It works well with this fix  https://gerrit.hyperledger.org/r/#/c/21123/   I've assigned  ~grapebaba  to the CR as I'm new here and I don't know anyone yet, please feel free to reassing it.  I've also noticed there is still no `register` method in the caservice, is it missing or in another file?  Thanks,  ></body> </Action>
<Action id="43568" issue="26820" author="guillaumecisco" type="comment" created="2018-04-27 16:45:02.0" updateauthor="guillaumecisco" updated="2018-04-27 16:45:14.0"> <body><! CDATA Currently build is failing with pycurl in requirements.txt. Need to install libcurl4-openssl-dev as described here:  https://stackoverflow.com/questions/23937933/could-not-run-curl-config-errno-2-no-such-file-or-directory-when-installing   ></body> </Action>
<Action id="43589" issue="26820" author="baohua" type="comment" created="2018-04-28 00:12:57.0" updateauthor="baohua" updated="2018-04-28 00:12:57.0"> <body><! CDATA  ~GuillaumeCisco , yes, kai is the correct person.  And pls help post the link to  https://chat.hyperledger.org/channel/fabric-sdk-py  to call for more reviews after CI passed.  Thanks!  ></body> </Action>
<Action id="43914" issue="26820" author="baohua" type="comment" created="2018-05-05 00:11:49.0" updateauthor="baohua" updated="2018-05-05 00:11:49.0"> <body><! CDATA  ~GuillaumeCisco , let me summarize the problem.     So openssl lib cannot make it work to connect to fabric-ca?  And we must use pycurl and libcurl4-openssl-dev to make it work?  If so, we need to consider add the dependency into requirement.txt and requirement-test.txt, and update this limitation into the doc.  ></body> </Action>
<Action id="44460" issue="26820" author="guillaumecisco" type="comment" created="2018-05-16 09:13:23.0" updateauthor="guillaumecisco" updated="2018-05-16 09:35:06.0"> <body><! CDATA Hello there, Sorry for long delay I was on vacation.  I don't know if the problem with the `requests` package is necessarily due to openssl lib but it looks like it. According to this thread:  https://github.com/requests/requests/issues/4477   What I know which works is `pycurl` package with the fabric-sdk-py code. I simply translated the `requests` code to `pycurl` code. Unfortunately, for correctly installing `pycurl` via pip from a `requirements.txt` file, the environment seems to need the `libcurl-openssl-dev` lib already installed as described in this thread:   https://stackoverflow.com/questions/23937933/could-not-run-curl-config-errno-2-no-such-file-or-directory-when-installing   This has to be installed via `apt install libcurl-openssl-dev`, not from pip or from the `requirements.txt`. On my own machine, it is easy to test it. But I don't know how to specify it for the Test CI to install it before launching the tests.  And yes, we need to add some tests, and update this limitation into the doc.  Hope it's more clear now :)  ></body> </Action>
<Action id="44461" issue="26820" author="baohua" type="comment" created="2018-05-16 09:32:58.0" updateauthor="baohua" updated="2018-05-16 09:32:58.0"> <body><! CDATA Thanks for the reply.  Hence can u help dig out the root cause is due to the requests lib? Not we take a wrong way to use it?  So surprised as requests is well-adopted in lots of applications.  ></body> </Action>
<Action id="44464" issue="26820" author="guillaumecisco" type="comment" created="2018-05-16 09:43:18.0" updateauthor="guillaumecisco" updated="2018-05-16 09:43:18.0"> <body><! CDATA Yes, it surprised me a lot too, that's why I gave it a try with `pycurl` for testing. According to the github issue, we should transform the tls cert for making it works with requests, but I have absolutely no idea how to do it. Pycurl internally does it as far as I understand.  ></body> </Action>
<Action id="44556" issue="26820" author="baohua" type="comment" created="2018-05-17 13:28:24.0" updateauthor="baohua" updated="2018-05-17 13:28:24.0"> <body><! CDATA OK, so the root cause is that requests cannot support our cert's format?  Interesting, so what's the difference, and what kind of format that requests can support?  I want to understand the root cause better in case we make the right decision on the problem.  ></body> </Action>
<Action id="44561" issue="26820" author="michaelwang" type="comment" body="there is a similar issue here.  https://github.com/grpc/grpc/issues/6722  please have a look at this for some clue." created="2018-05-17 14:02:10.0" updateauthor="michaelwang" updated="2018-05-17 14:02:10.0"/>
<Action id="44568" issue="26820" author="guillaumecisco" type="comment" created="2018-05-17 14:24:41.0" updateauthor="guillaumecisco" updated="2018-05-17 14:26:38.0"> <body><! CDATA If I understand correctly the issue I should generate Certs using the P-256 curve for testing it with the `requests` package? How can I modify that in the config?  My fabric-ca-client-config.yaml has default:    bccsp: default: SW sw: hash: SHA2 security: 256 filekeystore: # The directory used for the software file-based keystore keystore: msp/keystore  ></body> </Action>
<Action id="44860" issue="26820" author="grapebaba" type="comment" created="2018-05-22 14:44:49.0" updateauthor="grapebaba" updated="2018-05-22 14:44:49.0"> <body><! CDATA  ~vieiramanoel   ~GuillaumeCisco   For generate ecc cert, please refer to standard x509 approach. Our sdk actually support ssl when fabric ca enable TLS.  You can try with steps below:  1.We have a test ecc key/cert pair under dir test/fixtures/ca/fabric-ca-server  2 Add two lines in your /etc/hosts    {code:java} 127.0.0.1 ca.org1.example.com localhost ca.org1.example.com{code}    3.Change docker-compose.yaml under test/fixtures/ca, enable ca TLS.Add below to docker-compose.yaml {code:java} environment: - FABRIC_CA_SERVER_TLS_ENABLED=true - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server/ca-cert.pem - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server/ca-key.pem{code} 4.Change ca_test.py under test/integration, in setUp method, change ca_server_address with ca.org1.example.com instead of localhost and add cert path {code:java} def setUp(self): self._enrollment_id = ENROLLMENT_ID self._enrollment_secret = ENROLLMENT_SECRET # self._enrollment_id = "testUser" # self._enrollment_secret = "user1" if os.getenv("CA_ADDR"): self._ca_server_address = os.getenv("CA_ADDR") else: self._ca_server_address = "ca.org1.example.com:7054" self.cert_path= os.path.normpath( os.path.join(os.path.dirname(__file__), "../fixtures/ca/fabric-ca-server/ca-cert.pem") ) self.compose_file_path = os.path.normpath( os.path.join(os.path.dirname(__file__), "../fixtures/ca/docker-compose.yml") ) self.start_test_env(){code} 5.Change test method, use https and cert part to request ca {code:java} CAClient(target="https://" + self._ca_server_address,ca_certs_path=self.cert_path){code} 6.Run test not use makefile, since for ssl we must use python 3.4 + and openssl 1.0.1 {code:java} tox -epy36 -- test test/integration/ca_test.py  {code}    ></body> </Action>
<Action id="44876" issue="26820" author="vieiramanoel" type="comment" body="Kai, if you start a new ca-fabric and let it generate its own certificates the SDK won&apos;t work with those certificates, so no, SDK can&apos;t work with fabric-ca. And we should discuss a approach to solve this. Use the test certfiles isn&apos;t the best workaround " created="2018-05-22 18:08:20.0" updateauthor="vieiramanoel" updated="2018-05-22 18:08:20.0"/>
<Action id="44923" issue="26820" author="grapebaba" type="comment" body="That demonstrate requests can work with https if you specific root cert in cert_path, i don&apos;t see any difference how your cert come from" created="2018-05-23 01:33:30.0" updateauthor="grapebaba" updated="2018-05-23 01:33:30.0"/>
<Action id="50368" issue="26820" author="guillaumecisco" type="comment" created="2018-09-12 15:51:26.0" updateauthor="guillaumecisco" updated="2018-09-12 16:10:46.0"> <body><! CDATA This issue should be reopened. The fabric-ca does not generate the same kind of ca-cert.pem, the fabric python sdk test fixtures folder tests with. I've just tried the last 0.7.0 version with my fix using pycurl for testing, and it does not even work anymore. I get a tls: unsupported certificate But this is another issue.  The current behavior with the last 0.7.0 fabric python sdk and fabric-ca 1.1.1 still does not work with the `requests` call:    {code:java} requests.exceptions.SSLError: HTTPSConnectionPool(host='my-rca', port=7054): Max retries exceeded with url: /api/v1/cainfo (Caused by SSLError(SSLError(1, ' SSL: CERTIFICATE_VERIFY_FAILED  certificate verify failed (_ssl.c:833)'),)){code}    I've just run the following python commands:    {code:java} from hfc.fabric_ca.caservice import ca_service cli = ca_service(target="https://my-rca:7054", ca_certs_path='./path/to/my/generated/ca-cert.pem', ca_name='my-rca') cli._ca_client.get_cainfo(){code}    I decided to see what is different between the generated cert from fabric-ca and the one used in the fabric-sdk python tests.  from fixtures: {code:java} openssl x509 -text --noout -in ca-cert.pem{code} {code:java} Certificate: Data: Version: 3 (0x2) Serial Number: 21:1d:8b:47:d7:da:f3:1b:39:ba:79:c9:27:d3:c5:4b Signature Algorithm: ecdsa-with-SHA256 Issuer: C = US, ST = California, L = San Francisco, O = org1.example.com, CN = ca.org1.example.com Validity Not Before: Jun 23 12:33:19 2017 GMT Not After : Jun 21 12:33:19 2027 GMT Subject: C = US, ST = California, L = San Francisco, O = org1.example.com, CN = ca.org1.example.com Subject Public Key Info: Public Key Algorithm: id-ecPublicKey Public-Key: (256 bit) pub: 04:28:85:70:85:3c:c9:ac:bc:f3:7e:42:23:fc:ef: 80:d7:c0:75:f2:4d:9c:48:a1:16:75:26:df:59:92: 29:14:94:9b:f7:2c:3c:42:81:2c:6e:d9:38:c2:3f: 49:24:3f:f0:39:26:b5:78:30:ff:a5:0a:2b:7a:30: a6:db:90:a6:05 ASN1 OID: prime256v1 NIST CURVE: P-256 X509v3 extensions: X509v3 Key Usage: critical Digital Signature, Key Encipherment, Certificate Sign, CRL Sign X509v3 Extended Key Usage:  Any Extended Key Usage X509v3 Basic Constraints: critical CA:TRUE X509v3 Subject Key Identifier:  0E:72:92:24:E8:B3:F3:17:84:C8:A9:3C:5B:8E:F6:F4:C1:C9:1D:9E:6E:57:7C:45:C3:31:63:60:9F:E4:00:11 Signature Algorithm: ecdsa-with-SHA256 30:44:02:20:30:83:be:c8:ad:c5:6f:0b:f5:11:73:1c:b5:06: a6:e3:68:ba:44:ec:52:6a:76:80:1e:b6:d8:da:85:42:d5:f2: 02:20:2b:0c:a5:d4:92:da:46:dd:9e:d5:03:6b:28:b4:f6:fe: 3f:59:1b:42:e7:d1:31:0a:b1:e5:ae:0f:c6:5f:09:2f  {code} from generated from ca: {code:java} openssl x509 -text --noout -in ca-cert.pem {code}   {code:java} Certificate: Data: Version: 3 (0x2) Serial Number: 1a:88:de:22:f3:0a:e2:f3:3f:5d:99:7d:ae:fc:da:82:61:33:e0:4b Signature Algorithm: ecdsa-with-SHA256 Issuer: C = FR, ST = NA, L = Paris, O = na, CN = my-rca Validity Not Before: Sep 12 08:02:00 2018 GMT Not After : Sep  8 08:02:00 2033 GMT Subject: C = FR, ST = NA, L = Paris, O = na, CN = my-rca Subject Public Key Info: Public Key Algorithm: id-ecPublicKey Public-Key: (256 bit) pub: 04:f3:b7:d7:54:64:bf:e8:77:4c:52:29:25:e5:4e: 7d:d9:e3:7d:cd:49:1e:3e:3d:6b:e5:82:e1:55:3e: 06:6a:1c:e6:fa:2b:5e:54:1d:2d:82:77:78:f7:84: 34:77:bf:d8:f9:1e:3b:13:d9:f6:61:cf:5a:6d:22: 83:0b:9b:1c:f1 ASN1 OID: prime256v1 NIST CURVE: P-256 X509v3 extensions: X509v3 Key Usage: critical Certificate Sign, CRL Sign X509v3 Basic Constraints: critical CA:TRUE, pathlen:0 X509v3 Subject Key Identifier:  4F:37:67:70:57:70:A1:62:57:49:F7:8B:9A:43:D8:3C:30:81:83:8B Signature Algorithm: ecdsa-with-SHA256 30:45:02:21:00:92:b0:e6:25:59:34:bc:2b:c3:63:5a:72:08: 67:93:75:9d:50:01:de:54:0b:08:cc:6f:ff:76:3f:fa:c4:6c: eb:02:20:12:25:bc:5e:8d:b9:ff:a3:1e:d4:86:84:8b:b0:cc: c4:87:6a:cb:ef:00:38:13:65:4d:15:5c:93:d5:d4:fc:e0  {code}    The only big difference I see is this part: {code:java} X509v3 Extended Key Usage:  Any Extended Key Usage {code} And it should be the one clue according to my other researches.  https://stackoverflow.com/questions/14435839/ssl-alert-43-when-doing-client-authentication-in-ssl   Can someone confirm this?  ></body> </Action>
<Action id="50393" issue="26820" author="baohua" type="comment" created="2018-09-13 01:58:57.0" updateauthor="baohua" updated="2018-09-13 01:58:57.0"> <body><! CDATA  ~GuillaumeCisco , v0.7.0 only was tested with fabric 1.0.0.     We will start the fabric-ca with latest version support after it.  I guess this might be due to a version issue (have you tried the certs inside latest fabric version?).  Thanks!  ></body> </Action>
<Action id="50403" issue="26820" author="guillaumecisco" type="comment" created="2018-09-13 10:01:14.0" updateauthor="guillaumecisco" updated="2018-09-13 10:01:14.0"> <body><! CDATA Thanks Baohua for your quick answer, I really appreciate this.  I've just run the tests with the 1.0 version and the exact same thing happens. Looks like the certs produced by the fabric-ca are incorrect or I'm missing a configuration for generating correct certs from fabric-ca.  Any idea why my fabric-ca generate certs without: {code:java} X509v3 Extended Key Usage:  Any Extended Key Usage {code} ?  Thank you,  ></body> </Action>
<Action id="50418" issue="26820" author="baohua" type="comment" body="Would you like to have a look at  https://github.com/hyperledger/fabric-samples/tree/release-1.2/fabric-ca.  Which gives example on how to use fabric-ca to generate credentails." created="2018-09-13 14:46:33.0" updateauthor="baohua" updated="2018-09-13 14:46:33.0"/>
<Action id="50468" issue="26820" author="guillaumecisco" type="comment" created="2018-09-14 15:55:04.0" updateauthor="guillaumecisco" updated="2018-09-14 15:55:04.0"> <body><! CDATA Thanks  ~baohua  for pointing me to this project. As you should imagine, I'm hardly testing in all the ways the fabric-ca-server binary. I found something very interesting. Fabric-ca uses a cloudfare dependency:  cfssl|https://github.com/cloudflare/cfssl   As explained : {code:java} CFSSL is CloudFlare's PKI/TLS swiss army knife. It is both a command line tool and an HTTP API server for signing, verifying, and bundling TLS certificates. It requires Go 1.8+ to build. {code}  Fabric-ca uses the NewSigner method of this dependency for signing certificates:   https://github.com/cloudflare/cfssl/blob/master/initca/initca.go#L144 {code:java} // NewFromSigner creates a new root certificate from a crypto.Signer. func NewFromSigner(req *csr.CertificateRequest, priv crypto.Signer) (cert, csrPEM   byte, err error) { policy := CAPolicy() if req.CA != nil { if req.CA.Expiry != "" { policy.Default.ExpiryString = req.CA.Expiry policy.Default.Expiry, err = time.ParseDuration(req.CA.Expiry) if err != nil { return nil, nil, err } }  policy.Default.CAConstraint.MaxPathLen = req.CA.PathLength if req.CA.PathLength != 0 && req.CA.PathLenZero == true { log.Infof("ignore invalid 'pathlenzero' value") } else { policy.Default.CAConstraint.MaxPathLenZero = req.CA.PathLenZero } }  csrPEM, err = csr.Generate(priv, req) if err != nil { return nil, nil, err }  s, err := local.NewSigner(priv, nil, signer.DefaultSigAlgo(priv), policy) if err != nil { log.Errorf("failed to create signer: %v", err) return }  signReq := signer.SignRequest{Request: string(csrPEM)} cert, err = s.Sign(signReq) return } {code} As you can see, the policy used is an instance of CAPolicy which is: https://github.com/cloudflare/cfssl/blob/master/initca/initca.go#L219 {code:java} // CAPolicy contains the CA issuing policy as default policy. var CAPolicy = func() *config.Signing { return &config.Signing{ Default: &config.SigningProfile{ Usage:          string{"cert sign", "crl sign"}, ExpiryString: "43800h", Expiry:       5 * helpers.OneYear, CAConstraint: config.CAConstraint{IsCA: true}, }, } }  {code} *{color:#de350b}This is the very important part{color}*: the Usage is: {code:java} Usage:   string{"cert sign", "crl sign"}, {code} Contrary to ExpiryString, CAConstraint.MaxPathLen and  CAConstraint.MaxPathLenZero, Usage is never overrided with the tls profile as described in the fabric-ca-server.conf: {code:java} ############################################################################# #  Signing section # #  The "default" subsection is used to sign enrollment certificates; #  the default expiration ("expiry" field) is "8760h", which is 1 year in hours. # #  The "ca" profile subsection is used to sign intermediate CA certificates; #  the default expiration ("expiry" field) is "43800h" which is 5 years in hours. #  Note that "isca" is true, meaning that it issues a CA certificate. #  A maxpathlen of 0 means that the intermediate CA cannot issue other #  intermediate CA certificates, though it can still issue end entity certificates. #  (See RFC 5280, section 4.2.1.9) # #  The "tls" profile subsection is used to sign TLS certificate requests; #  the default expiration ("expiry" field) is "8760h", which is 1 year in hours. ############################################################################# signing: default: usage: - digital signature expiry: 8760h profiles: ca: usage: - cert sign - crl sign expiry: 43800h caconstraint: isca: true maxpathlen: 0 tls: usage: - signing - key encipherment - server auth - client auth - key agreement expiry: 8760h {code}   The NewSigner func is called in fabric-ca/lib/ca.go, it is used for creating the certificate from the init command : https://github.com/hyperledger/fabric-ca/blob/release-1.2/lib/ca.go#L274 {code:java} // Get the CA certificate for this CA func (ca *CA) getCACert() (cert   byte, err error) { if ca.Config.Intermediate.ParentServer.URL != "" { # ... volontary deleted code for better reading } else { // This is a root CA, so create a CSR (Certificate Signing Request) if ca.Config.CSR.CN == "" { ca.Config.CSR.CN = "fabric-ca-server" } csr := &ca.Config.CSR if csr.CA == nil { csr.CA = &cfcsr.CAConfig{} } if csr.CA.Expiry == "" { csr.CA.Expiry = defaultRootCACertificateExpiration } if csr.KeyRequest == nil { csr.KeyRequest = GetKeyRequest(ca.Config) } req := cfcsr.CertificateRequest{ CN:           csr.CN, Names:        csr.Names, Hosts:        csr.Hosts, KeyRequest:   &cfcsr.BasicKeyRequest{A: csr.KeyRequest.Algo, S: csr.KeyRequest.Size}, CA:           csr.CA, SerialNumber: csr.SerialNumber, } log.Debugf("Root CA certificate request: %+v", req) // Generate the key/signer _, cspSigner, err := util.BCCSPKeyRequestGenerate(&req, ca.csp) if err != nil { return nil, err } // Call CFSSL to initialize the CA cert, _, err = initca.NewFromSigner(&req, cspSigner) if err != nil { return nil, errors.WithMessage(err, "Failed to create new CA certificate") } } return cert, nil }  {code}  I decided to modify the NewSigner func by adding (for testing):   {code:java} policy.Default.Usage =   string{"digital signature", "key encipherment", "crl sign", "cert sign", "any"} {code}  I rebuilt the docker images and test it with my own network. Successfully the generated cert has correct reflected modifications !!! Houra !  Unfortunately, using this cert with the python SDK returns exactly the same SSL error. I can see in my rca logs, this line:   {code:java} 2018/09/14 15:28:32 http: TLS handshake error from 172.23.0.1:48860: remote error: tls: unsupported certificate {code}  Something is wrong here, and I clearly don't understand what. Any help is welcome about this issue.  A also decided to test what  ~grapebaba  suggests. I modified the files in the fabric sdk py project, and run tox. It did not work! The error is still the same:   {code:java} E               requests.exceptions.SSLError: HTTPSConnectionPool(host='localhost', port=7054): Max retries exceeded with url: /api/v1/cainfo (Caused by SSLError(SSLError(1, ' SSL: CERTIFICATE_VERIFY_FAILED  certificate verify failed (_ssl.c:833)'),))  {code} Has it been clearly reported the fabric sdk python works with tls? Has it been tested? Can we access and reproduce this test?  Last issue: As we have seen, the tls part in the signing part of the fabric-ca-server.conf.yaml is never used, so all the certificates will end with :   {code:java} X509v3 extensions: X509v3 Key Usage: critical Certificate Sign, CRL Sign X509v3 Basic Constraints: critical CA:TRUE, pathlen:0 {code} I think this a new issue and it should be addressed? Thoughts?  Thank you for reading everything, I've tried to be the most exhaustive possible. Do not hesitate for more informartions.  ></body> </Action>
<Action id="50482" issue="26820" author="baohua" type="comment" created="2018-09-15 01:15:32.0" updateauthor="baohua" updated="2018-09-15 01:15:32.0"> <body><! CDATA Seems there's something wrong with fabric-ca generated cert files?  Thanks for your full analysis, and let's involve fabric-ca team for more comments:   ~rameshthoomu ,  ~skarim , would you like to help give some hints?  ></body> </Action>
<Action id="50519" issue="26820" author="guillaumecisco" type="comment" created="2018-09-17 08:48:38.0" updateauthor="guillaumecisco" updated="2018-09-17 14:50:38.0"> <body><! CDATA Thank you very much  ~baohua  for your implication in this issue. I think the next step is to be able to reproduce the tests from  ~grapebaba . I did not succeed using its recommendations. Help is welcome here :)  For more digging into this issue, I'd like to post new functions that will help us understand better the creation of the cert. Even if it does not solve the main problem, it will solve this new discovered issue.  The NewSigner func use this piece of code when no policy is passed as a parameter (which is not our case): {code:java} if policy == nil { policy = &config.Signing{ Profiles: map string *config.SigningProfile{}, Default:  config.DefaultConfig()} } {code} Let's see what is the config.DefaultConfig(): {code:java} func DefaultConfig() *SigningProfile { d := helpers.OneYear return &SigningProfile{ Usage:          string{"signing", "key encipherment", "server auth", "client auth"}, Expiry:       d, ExpiryString: "8760h", } } {code} Interestingly, we have the `"signing", "key encipherment", "server auth", "client auth"` parameters created as a default config which is totally different from the CAPolicy: {code:java} var CAPolicy = func() *config.Signing { return &config.Signing{ Default: &config.SigningProfile{ Usage:          string{"cert sign", "crl sign"}, ExpiryString: "43800h", Expiry:       5 * helpers.OneYear, CAConstraint: config.CAConstraint{IsCA: true}, }, } } {code} It clearly shows us we cannot currently change the policy by modifying the fabric-ca-server.config.yaml from the generated certificates and maybe it is wanted.  ></body> </Action>
<Action id="50551" issue="26820" author="guillaumecisco" type="comment" created="2018-09-17 14:39:25.0" updateauthor="guillaumecisco" updated="2018-09-17 14:39:25.0"> <body><! CDATA Ok folks, I succeeded to make *{color:#00875a}it works!!!{color}* Using the "should be" loaded configuration from the tls part of the fabric-ca-config.yaml, and not as I used during my tests from the cert in the test/fixtures.  Basically, replacing the added part: {code:java} policy.Default.Usage =   string{"digital signature", "key encipherment", "crl sign", "cert sign", "any"} {code} by: {code:java} policy.Default.Usage =   string{"signing", "key encipherment", "server auth", "client auth", "key agreement", "crl sign", "cert sign"} {code} as defined here in the fabric-ca-server-config.yaml: {code:java} ############################################################################# #  Signing section # #  The "default" subsection is used to sign enrollment certificates; #  the default expiration ("expiry" field) is "8760h", which is 1 year in hours. # #  The "ca" profile subsection is used to sign intermediate CA certificates; #  the default expiration ("expiry" field) is "43800h" which is 5 years in hours. #  Note that "isca" is true, meaning that it issues a CA certificate. #  A maxpathlen of 0 means that the intermediate CA cannot issue other #  intermediate CA certificates, though it can still issue end entity certificates. #  (See RFC 5280, section 4.2.1.9) # #  The "tls" profile subsection is used to sign TLS certificate requests; #  the default expiration ("expiry" field) is "8760h", which is 1 year in hours. ############################################################################# signing: default: usage: - digital signature expiry: 8760h profiles: ca: usage: - cert sign - crl sign expiry: 43800h caconstraint: isca: true maxpathlen: 0 tls: usage: - signing - key encipherment - server auth - client auth - key agreement expiry: 8760h {code} make my shell curl or python requests works correctly!  The issue should be reopened. We now know the tls usage part from the config is never loaded and our generated cert are incorrect. What we need to do : Parse correctly the tls usage part, and sign our cert with the correct policy, not the default loaded from cfssl.  I'll try to make a Pull request, but I'm not confortable with the go language and gerrit/jira.  So in my opinion, the fabric python sdk works with version 1.0 to 1.2 of fabric-ca (with patch). We need to patch fabric-ca, and release a new version.  Thank you all, for helping me finding the cause of this issue. If others maintainers can help me creating the patch, it will be highly appreciated.  ></body> </Action>
<Action id="55915" issue="26820" author="guillaumecisco" type="comment" created="2019-01-21 14:22:50.0" updateauthor="guillaumecisco" updated="2019-01-21 14:22:50.0"> <body><! CDATA The last version of fabric-sdk-py works correctly. I have been able to get the ca cert thanks to get_cainfo method.  Can be closed.  ></body> </Action>
<Action id="55958" issue="26820" author="baohua" type="comment" body=" ~GuillaumeCisco , thanks, will close the issue!" created="2019-01-22 01:49:52.0" updateauthor="baohua" updated="2019-01-22 01:49:52.0"/>
