<Issue id="39878" key="FABCAG-28" number="28" project="11206" reporter="medikent" assignee="mbwhite" creator="medikent" type="10100" summary="Update Fabric Chaincode vendoring docs to include usage of &quot;go mod vendor&quot;" priority="3" status="10100" created="2019-05-16 20:14:51.0" updated="2020-11-18 11:12:54.0" votes="0" watches="2" workflowId="52773"> <description><! CDATA The existing docs do not state that *go mod vendor* is a way to vendor dependencies for projects running on go1.11+. I suggest adding language like the following:    *_Go mod vendor_* is the simplest way to vendor dependencies for a given chaincode when you need to use a Go library not a part of the standard Golang libraries nor a part of the Hyperledger Fabric standard libraries. The *fabric-tools* container image typically used to install chaincode on a Fabric network comes packaged with the Golang standard libraries and the Hyperledger Fabric standard libraries available on the GOPATH. Since no other dependencies are available by default in the *fabric-tools* image then vendoring dependencies must be done in order to use the *fabric-tools* image to build chaincode depending on libraries not present by default in the *fabric-tools* image.  When using Golang 1.11+ follow this simple process to vendor dependencies for chaincode: # Write chaincode that uses libraries requiring vendoring # Run _*go mod init*_ __ in the directory. This should create the *go.mod* and *go.sum* files. # Run _*go mod vendor*_ __ in the directory. This should create the *vendor* directory with a copy of all the versions of packages the chaincode depends on which correspond to the versions contained in the *go.sum* file. # Mount the entire directory into a *fabric-tools* container and run _*peer chaincode install ...*_ __ with the appropriate command line options.  ></description> </Issue>
