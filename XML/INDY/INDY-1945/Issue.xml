<Issue id="36811" key="INDY-1945" number="1945" project="10303" reporter="sergey.khoroshavin" assignee="sergey.khoroshavin" creator="sergey.khoroshavin" type="10002" summary="Implementation: Improve catch-up to use audit ledger for consistency" priority="3" resolution="10000" status="10001" created="2019-01-16 07:07:11.0" updated="2019-03-29 20:33:07.0" resolutiondate="2019-03-29 20:33:07.0" votes="0" watches="3" workflowId="48376"> <description><! CDATA *Acceptance criteria* * Catch-up should be improved roughly as described in https://github.com/hyperledger/indy-plenum/blob/master/design/catchup-and-audit-proposal.md#catch-up: ** LEDGER_STATUS is asked for Audit ledger only, returning its last seq_no (let’s call it audit_seq_no) ** after figuring out that catch-up is needed node sends REQUEST_CONSISTENCY_PROOF consisting of: *** ledger_id *** minimum/maximum audit_seq_no ** node that receives REQUEST_CONSISTENCY_PROOF: *** given min/max audit_seq_no finds corresponding min/max seq_no inside ledger defined by ledger_id (thanks to Audit ledger it’s O(1) operation) *** sends CONSISTENCY_PROOF message as usual ** then catch-up proceeds as usual * It might make sense to try to be closer to current logic by sending CONSISTENCY_PROOFs in response to LEDGER_STATUS (thus not requiring explicit REQUEST_CONSISTENCY_PROOF message), however this will require sending multiple CONSISTENCY_PROOFs per one LEDGER_STATUS, which feels like a questionable design decision and can potentially lead to some unexpected edge cases. This requires some additional analysis as part of PoA   ></description> </Issue>
