<Action id="50451" issue="33744" author="andkononykhin" type="comment" body=" ~esplinr   ~ashcherbakov   ~sergey-shilov  prioritize please" created="2018-09-14 12:50:40.0" updateauthor="andkononykhin" updated="2018-09-14 12:50:40.0"/>
<Action id="50865" issue="33744" author="danielhardman" type="comment" created="2018-09-20 15:42:32.0" updateauthor="danielhardman" updated="2018-09-20 15:42:32.0"> <body><! CDATA Just repeating a comment I made in INDY-1701:  I am happy to see these tickets. Thank you for taking my request to address pinning so seriously.  I'd like to clarify what I consider to be the success criteria here. My first major goal is to eliminate the phenomenon where a component below X in the stack can break X unexpectedly, because X consumes the latest version of its dependence, and "latest" can change without warning. We have repeatedly experienced this among the layers of our own stack. My second major goal is to improve reproducibility of builds; if you build against "latest" of something today, and do the same thing 6 months from now, you might not have the same binary at all.  How we pin (to an exact version or to a fuzzy version) should be governed by pragmatism and human wisdom. If we are dealing with dependencies that are known to exhibit very stable and predictable behaviors with respect to semver, then I think it would be to our advantage to use fuzzy pinning (e.g., pin to a version >= N, rathern than version = N). For example, if we have a dependency on iptables, pinning to an exact version would be very undesirable, since it prevents the system from receiving upgrades and security patches, violates sysadmin expectations, and creates unnecessary brittleness. Distro iptables packages use semver reliably, so we can predict whether an upgrade will remain compatible. I suspect that most other third-party dependencies we have are similar to iptables in this respect, in that their semver contract is reliable and fuzzy pinning is preferred.  On the other hand, if we are dealing with components that change unpredictably, and that do not give us confidence about semver conformance, then perhaps an exact pin is merited. This might be the case with our own software components, for example. Perhaps in 6 months our semver conformance will be better, but right now, many things in many of our layers can change without warning...  Expectations of sysadmins is a good indicator of whether we're making wise pinning decisions. They need to be able to patch a system using normal workflows, and not to be hampered or puzzled or shocked by constraints we create. I think the handful of packages that we write could have pretty strong version constraints, but we don't want to prevent them from picking up security patches from openssl or other system-relevant libraries and tools.  ></body> </Action>
<Action id="64635" issue="33744" author="ashcherbakov" type="comment" body="indy-anoncreds is deprecated" created="2019-10-11 12:01:41.0" updateauthor="ashcherbakov" updated="2019-10-11 12:01:41.0"/>
