<Issue id="17712" key="INDY-193" number="193" project="10303" reporter="spivachuk" assignee="danielhardman" creator="spivachuk" type="10004" summary="Node stops to write new transactions to its ledger if it has blacklisted primary of master instance" priority="3" resolution="10000" status="10001" created="2017-06-09 20:57:24.0" updated="2019-03-29 20:33:26.0" resolutiondate="2019-03-29 20:33:26.0" votes="0" watches="4" timeoriginalestimate="32400" timeestimate="32400" workflowId="17716"> <description><! CDATA A node detected that the primary of the master protocol instance is malicious and blacklisted it on a catch-up, then succeeded with the catch-up but after this stops to write new transactions to its own ledger.  The bug was faced on the following versions: * sovrin-node 0.3.129 master deb package, * sovrin-client 0.3.125 master deb package.  Steps to reproduce and results: # Install a local pool from Vagrant script with changed APT repositories from {{xenial stable}} to {{xenial master}} in {{sovrin-environments/vagrant/training/vb-multi-vm/scripts/agent.sh}} and {{sovrin-environments/vagrant/training/vb-multi-vm/scripts/validator.sh}}. # Connect to any node VM, open the node log and identify which node has been elected as the primary of the master protocol instance (search for the string "selected primary" for this). Call this node <NodeX> in what follows. # Connect to <NodeX> VM via SSH, open the file {{/usr/local/lib/python3.5/dist-packages/plenum/common/ledger_manager.py}} and after the following line in {{LedgerManager.processCatchupReq}} method {code:java} txns = ledger.getAllTxn(start, end) {code} insert the following code to simulate a malicious node {code:java} if (txns): # Corrupt a signature of some transaction some_seq_no = next(iter(txns.keys())) txns some_seq_no  'signature'  = '67rpwLCuS5DGA8KGZXKsVQ7dnPb9goRLoKfgGbLfQg9WoLUgNY77E2jT11fem3coV9nAkguBACzrU1iyZM4B8roQ' {code} # Connect to each node VM via SSH, open the identity ledger file in live mode and leave each session open. # Connect to the client VM via SSH and launch {{sovrin}}. # Execute: {{connect test}} # Execute: {{new key with seed 000000000000000000000000Trustee1}} # Execute: {{send NYM dest=1111111111111111}} *  The transaction creating NYM 1111111111111111 is added to the identity ledgers on all the nodes.  * *  CLI reports: {{Nym 1111111111111111 added}}  * # Stop the node service on some node other than <NodeX>. Call this node <NodeY> in what follows. *  CLI reports that it has been disconnected from <NodeY>.  * # Execute: {{send NYM dest=2222222222222222}} *  The transaction creating NYM 2222222222222222 is added to the identity ledgers of all the nodes except <NodeY>.  * *  CLI reports: {{Nym 2222222222222222 added}}  * # Execute: {{send NYM dest=3333333333333333}} *  The transaction creating NYM 3333333333333333 is added to the identity ledgers of all the nodes except <NodeY>.  * *  CLI reports: {{Nym 3333333333333333 added}}  * # Execute: {{send NYM dest=4444444444444444}} *  The transaction creating NYM 4444444444444444 is added to the identity ledgers of all the nodes except <NodeY>.  * *  CLI reports: {{Nym 4444444444444444 added}}  * # Start the node service on <NodeY>. *  CLI reports that it has been connected to <NodeY>.  * *  The transactions creating NYMs 2222222222222222, 3333333333333333, 4444444444444444 are added (in 10-20 seconds) to the identity ledger of <NodeY>.  * # Connect to <NodeY> VM via SSH, open the node log and search for the string "blacklisting node". *  An occurrence in the following message is found: {{<NodeY> blacklisting node <NodeX> for reason Sent transactions that could not be verified}}  * # Execute: {{send NYM dest=5555555555555555}} {color:#ff0000}*  Actual: The transaction creating NYM 5555555555555555 is added to the identity ledgers of all the nodes except <NodeY>.  *{color} {color:#0000ff}*  Expected: The transaction creating NYM 5555555555555555 is added to the identity ledgers of all the nodes.  *{color} *  CLI reports: {{Nym 5555555555555555 added}}  *  ></description> </Issue>
