<Action id="35351" issue="18337" author="spivachuk" type="comment" created="2017-11-22 16:39:09.0" updateauthor="spivachuk" updated="2017-11-22 16:39:09.0"> <body><! CDATA *PoA*  We see the following 3 options for validation of genesis transactions.  *1. Perform only static validation of genesis transactions using {{SafeRequests}} construction and invoke this validation from {{GenesisTxnInitiatorFromFile}}. {{SafeRequest}} will be created from a transaction dict (read from a genesis transactions file) transformed into a request dict using {{plenum.common.txn_util.txnToReq}} function. {{SafeRequest.__ init __}} performs static validation of the content being passed to it using {{FiledValidator}} class hierarchy.*  Static validation detects such unintentional errors as wrong or missed fields or wrong types of filed values. However, it does not detect authority or permission errors.   *2. Move adding of genesis transactions to {{Node}} level and use {{Node.applyReq}} method to add each genesis transaction (this will include transformation of transactions to requests in the way described in Option 1). Perform both static and dynamic validation of genesis transactions using {{SafeRequests}} construction and {{Node.doStaticValidation}} and {{Node.doDynamicValidation}} methods.*  Dynamic validation requires each genesis transaction to be completely processed in the usual way in order for it to be checked in everywhere before next transactions are validated. This is so because dynamic validation relies on previously processed transactions. Thus use of {{Node.applyReq}} method for adding genesis transactions one by one may be insufficient for dynamic validation to be performed properly. So this option seems to be risky. Eventually it may require additional actions besides {{Node.applyReq}} for processing genesis transactions and that in turn may lead to undesirable logic duplication in handling genesis and ordinary transactions.   *3. Move adding of genesis transactions to {{Node}} level and use {{Node.handleOneClientMsg}} method for this, i.e. emulate sending of client requests containing the genesis transactions to the node (this will include transformation of transactions to requests in the way described in Option 1) and introduce a special mode of node functioning for processing genesis transactions that will remove some constraints (e.g. the constraint requiring that identifier field is mandatory because genesis transactions may not have it).*  This option seems to be safer for dynamic validation than Option 2 because this option processes genesis transactions in the same way (mostly) as ordinary transactions. However, it requires consensus with other nodes to add genesis transactions to the ledgers.  -- Option 1 is the least time-consuming one. If the goal of genesis transactions validation is protection against human mistakes but not against malicious actions then Option 1 looks the most preferable.   ></body> </Action>
<Action id="65487" issue="18337" author="esplinr" type="comment" body="This would be useful validation, but it doesn&apos;t change the behavior of the network as it is currently used. So we will not be prioritizing this work in the near future." created="2019-11-12 15:31:45.0" updateauthor="esplinr" updated="2019-11-12 15:31:45.0"/>
