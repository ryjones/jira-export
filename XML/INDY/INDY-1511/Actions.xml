<Action id="47930" issue="32139" author="ckochenower" type="comment" created="2018-07-26 17:57:36.0" updateauthor="ckochenower" updated="2018-07-26 18:00:17.0"> <body><! CDATA This experiment initially lead me and  ~krw910  to believe that we had discovered a potential bug in context to view change.  The experiment ran as expected to the following point: # Discover who the primary and it's replicas are (Primary: Node1 Replicas: Node2, 3, 4) # Stop as many of the replicas as possible w/o falling out of consensus. min(3, validator_info 'Pool_info'  'f_value' ) ) # Stop the primary # Wait a reasonable amount of time for a view change to complete  While waiting for the view change to complete, each of the nodes reported the following as their master:  ```Node    Master  Node1   Node1:0  Node10  None  Node2   Node1:0  Node3   Node1:0  Node4   None  Node5   None  Node6   None  Node7   None  Node8   None  Node9   None```  It appears that nodes 4 through 10 could not elect a new master even though Node4 is one of the replicas. I would have expected Node4 to quickly be elected as the master.  The state of the pool appeared to settle here for a long time (> 10 minutes), which led me to believe the experiment found a potential problem. The pool stayed in this state the entire time it took me to explain the problem to Kelly and begin writing up a JIRA issue detailing what we had found.  The pool recovered as I was writing up the JIRA issue. It took what felt like forever, but it nevertheless recovered.  I will run the experiment again and measure how long my 10 node pool takes to recover during this experiment. The plan will be to alter the experiment to wait long enough for the view change to complete under the aforementioned conditions.  ></body> </Action>
<Action id="47939" issue="32139" author="ckochenower" type="comment" created="2018-07-26 20:58:45.0" updateauthor="ckochenower" updated="2018-07-26 20:58:45.0"> <body><! CDATA I configured the experiment to check for a view change every 60 seconds up to 20 times (up to 20 minute wait for view change). The view change to Node4 as the master occurred after approximately 16 minutes when the experiment stopped replicas Node2, Node3 followed by primary Node1. {code:java}  2018-07-26 19:41:47 DEBUG   primary:110  Check 16 of 20 if view change is complete   2018-07-26 19:41:47 DEBUG   primary:111  Stopped primary: Node1   2018-07-26 19:41:47 DEBUG   primary:112  Current primary: Node4   2018-07-26 19:41:47 DEBUG   primary:114  View change detected!   2018-07-26 19:41:47 DEBUG   node:148  start node: Node2   2018-07-26 19:41:49 DEBUG   node:148  start node: Node3   2018-07-26 19:41:52 DEBUG   node:148  start node: Node1   2018-07-26 19:41:54 DEBUG   activity:175    => succeeded with 'True'   2018-07-26 19:41:54 INFO   hypothesis:149  Steady state hypothesis: Can write nym   2018-07-26 19:41:54 INFO   activity:158  Probe: can-write-nym   2018-07-26 19:41:54 DEBUG   write_nym:11  seed: 000000000000000000000000Trustee1 genesis_file: /home/ubuntu/chaosindy/pool_transactions_genesis pool_name: vcs_pool1 my_wallet_name: vcs_my_wallet1 their_wallet_name: vcs_their_wallet1 timeout: 60   2018-07-26 19:41:54 DEBUG   ledger_interaction:34  # 0. Set protocol version to 2   2018-07-26 19:41:54 DEBUG   ledger_interaction:41  # 1. Create ledger config from genesis txn file   2018-07-26 19:41:54 DEBUG   ledger_interaction:43  pool_name: vcs_pool1   2018-07-26 19:41:54 DEBUG   ledger_interaction:44  pool_config: {"genesis_txn": "/home/ubuntu/chaosindy/pool_transactions_genesis"}   2018-07-26 19:41:54 DEBUG   ledger_interaction:52  pool_config: {"genesis_txn": "/home/ubuntu/chaosindy/pool_transactions_genesis"}   2018-07-26 19:42:10 DEBUG   ledger_interaction:65  # 4. Create Their Wallet and Get Wallet Handle   2018-07-26 19:42:20 DEBUG   ledger_interaction:77  # 5. Create My DID   2018-07-26 19:42:20 DEBUG   ledger_interaction:80  # 6. Create Their DID from Trustee1 seed   2018-07-26 19:42:20 DEBUG   ledger_interaction:86  # 8. Prepare and send NYM transaction   2018-07-26 19:42:21 DEBUG   ledger_interaction:90  # 9. Prepare and send GET_NYM request   2018-07-26 19:42:36 DEBUG   activity:175    => succeeded with 'True'   2018-07-26 19:42:36 DEBUG   hypothesis:172  allowed tolerance is True   2018-07-26 19:42:36 INFO   hypothesis:179  Steady state hypothesis is met!   2018-07-26 19:42:36 INFO   experiment:283  Let's rollback...   2018-07-26 19:42:36 INFO   rollback:28  Rollback: start-stopped-primary   2018-07-26 19:42:36 INFO   activity:158  Action: start-stopped-primary   2018-07-26 19:42:36 DEBUG   validator_info:22  Found 'chaos' process   2018-07-26 19:42:36 DEBUG   validator_info:34  subprocess pid: 27596 chaos pid: 27596   2018-07-26 19:42:36 DEBUG   validator_info:37  tempdir: /tmp/validator-info.27596   2018-07-26 20:28:35 DEBUG   node:161  start node: Node2   2018-07-26 20:28:37 DEBUG   node:161  start node: Node1   2018-07-26 19:42:36 INFO   rollback:28  Rollback: cleanup-validator-info   2018-07-26 19:42:36 INFO   activity:158  Action: cleanup-validator-info   2018-07-26 19:42:36 DEBUG   validator_info:22  Found 'chaos' process   2018-07-26 19:42:36 DEBUG   validator_info:34  subprocess pid: 27596 chaos pid: 27596   2018-07-26 19:42:36 DEBUG   validator_info:37  tempdir: /tmp/validator-info.27596   2018-07-26 19:42:36 DEBUG   activity:175    => succeeded with 'True'   2018-07-26 19:42:36 INFO   experiment:254  Experiment ended with status: completed   2018-07-26 19:42:36 DEBUG   caching:42  Clearing activities cache  End printing captured results...    real	22m39.942s  user	1m4.476s  sys	0m7.708s{code} I then configured the experiment to check for a view change every 60 seconds up to 20 times (up to 20 minute wait for view change), but told the experiment that f == 2 instead of 3. Doing so caused the experiment to shut down 1 replica instead of 2. Replicas Node3 and Node4 would remain up. Just Node2 would be stopped before stopping the master (Node1). The view change to Node3 as the master occurred after approximately 9 minutes when the experiment stopped replica Node2 followed by primary Node1. {code:java}  2018-07-26 20:27:51 DEBUG   primary:110  Check 9 of 20 if view change is complete   2018-07-26 20:27:51 DEBUG   primary:111  Stopped primary: Node1   2018-07-26 20:27:51 DEBUG   primary:112  Current primary: Node3   2018-07-26 20:27:51 DEBUG   primary:114  View change detected!   2018-07-26 20:27:51 DEBUG   node:161  start node: Node2   2018-07-26 20:27:53 DEBUG   node:161  start node: Node1   2018-07-26 20:27:56 DEBUG   activity:175    => succeeded with 'True'   2018-07-26 20:27:56 INFO   hypothesis:149  Steady state hypothesis: Can write nym   2018-07-26 20:27:56 INFO   activity:158  Probe: can-write-nym   2018-07-26 20:27:56 DEBUG   write_nym:11  seed: 000000000000000000000000Trustee1 genesis_file: /home/ubuntu/chaosindy/pool_transactions_genesis pool_name: vcs_pool1 my_wallet_name: vcs_my_wallet1 their_wallet_name: vcs_their_wallet1 timeout: 60   2018-07-26 20:27:56 DEBUG   ledger_interaction:34  # 0. Set protocol version to 2   2018-07-26 20:27:56 DEBUG   ledger_interaction:41  # 1. Create ledger config from genesis txn file   2018-07-26 20:27:56 DEBUG   ledger_interaction:43  pool_name: vcs_pool1   2018-07-26 20:27:56 DEBUG   ledger_interaction:44  pool_config: {"genesis_txn": "/home/ubuntu/chaosindy/pool_transactions_genesis"}   2018-07-26 20:27:56 DEBUG   ledger_interaction:52  pool_config: {"genesis_txn": "/home/ubuntu/chaosindy/pool_transactions_genesis"}   2018-07-26 20:28:09 DEBUG   ledger_interaction:65  # 4. Create Their Wallet and Get Wallet Handle   2018-07-26 20:28:20 DEBUG   ledger_interaction:77  # 5. Create My DID   2018-07-26 20:28:20 DEBUG   ledger_interaction:80  # 6. Create Their DID from Trustee1 seed   2018-07-26 20:28:20 DEBUG   ledger_interaction:86  # 8. Prepare and send NYM transaction   2018-07-26 20:28:21 DEBUG   ledger_interaction:90  # 9. Prepare and send GET_NYM request   2018-07-26 20:28:35 DEBUG   activity:175    => succeeded with 'True'   2018-07-26 20:28:35 DEBUG   hypothesis:172  allowed tolerance is True   2018-07-26 20:28:35 INFO   hypothesis:179  Steady state hypothesis is met!   2018-07-26 20:28:35 INFO   experiment:283  Let's rollback...   2018-07-26 20:28:35 INFO   rollback:28  Rollback: start-stopped-primary   2018-07-26 20:28:35 INFO   activity:158  Action: start-stopped-primary   2018-07-26 20:28:35 DEBUG   validator_info:22  Found 'chaos' process   2018-07-26 20:28:35 DEBUG   validator_info:34  subprocess pid: 22564 chaos pid: 22564   2018-07-26 20:28:35 DEBUG   validator_info:37  tempdir: /tmp/validator-info.22564   2018-07-26 20:28:35 DEBUG   node:161  start node: Node2   2018-07-26 20:28:37 DEBUG   node:161  start node: Node1   2018-07-26 20:28:39 DEBUG   activity:175    => succeeded with 'True'   2018-07-26 20:28:39 INFO   rollback:28  Rollback: cleanup-validator-info   2018-07-26 20:28:39 INFO   activity:158  Action: cleanup-validator-info   2018-07-26 20:28:39 DEBUG   validator_info:22  Found 'chaos' process   2018-07-26 20:28:39 DEBUG   validator_info:34  subprocess pid: 22564 chaos pid: 22564   2018-07-26 20:28:39 DEBUG   validator_info:37  tempdir: /tmp/validator-info.22564   2018-07-26 20:28:39 DEBUG   activity:175    => succeeded with 'True'   2018-07-26 20:28:39 INFO   experiment:254  Experiment ended with status: completed   2018-07-26 20:28:39 DEBUG   caching:42  Clearing activities cache  End printing captured results...    real	13m21.365s  user	0m50.716s  sys	0m4.276s{code}  ></body> </Action>
<Action id="48038" issue="32139" author="ckochenower" type="comment" created="2018-07-27 14:47:29.0" updateauthor="ckochenower" updated="2018-07-27 14:48:04.0"> <body><! CDATA Results of running this experiment in perpetuity overnight are as follows (message shared with the Berdyaev 6 team in Slack):  The experiment does the following:  1. Shut down indy-node on all but the last replica in round-robin order. No pauses/waits between shutting down each node. Each replica is stopped sequentially as fast as possible, which is effectively less than a few seconds apart. 2. Shut down the master 3. Check for a view change every 60 seconds up to 20 times (20 minute view change timeout) ...  After step 1 above, the cluster (n - f remaining nodes) begin reporting "None" as their master for approximately 8 minutes per stopped replica until the last replica is considered for role as master. In other words, in my 10 node cluster, the experiment starts with Node1 as the master and Nodes 2 - 4 as replicas. f = 3 and replica count = 4. If just the first replica is stopped (Node2) followed by the master (Node1), it takes approximately 8-9 minutes to complete a view change, during which time Nodes 3 - 10 report "None" as their master.  Taking down two replicas (Node 2 and 3) followed by the master (Node1) results in a time of 16 minutes to complete a view change. Deductive reasoning suggests that if a third replica was stopped, it will take an additional 8 to 9 minutes to complete a view change. I can't test that, because I only have 10 nodes and replica count is 4 (based on cluster size).  I ran this experiment in perpetuity (1000 times) last night starting around 5 PM. It ran 29 iterations of the experiment before a paramiko stacktrace caused the experiment to hang indefinitely:  ``` 2018-07-27 09:30:57 DEBUG   execute:248  kwargs: \{"connect_kwargs": null, "connect_timeout": 10} Process Process-93: Traceback (most recent call last): File "/usr/lib/python3.5/multiprocessing/process.py", line 249, in _bootstrap self.run() File "/usr/lib/python3.5/multiprocessing/process.py", line 93, in run self._target(*self._args, **self._kwargs) File "/home/ubuntu/chaosindy/chaosindy/execute/execute.py", line 262, in do_work as_sudo=as_sudo, **kwargs_dict) File "/home/ubuntu/chaosindy/chaosindy/execute/execute.py", line 205, in _parallel_execute_on_host rtn = c.sudo(action, hide=True) File "<decorator-gen-4>", line 2, in sudo File "/home/ubuntu/.venvs/chaostoolkit/lib/python3.5/site-packages/fabric-2.1.3-py3.5.egg/fabric/connection.py", line 29, in opens self.open() File "/home/ubuntu/.venvs/chaostoolkit/lib/python3.5/site-packages/fabric-2.1.3-py3.5.egg/fabric/connection.py", line 501, in open self.client.connect(**kwargs) File "/home/ubuntu/.venvs/chaostoolkit/lib/python3.5/site-packages/paramiko-2.4.1-py3.5.egg/paramiko/client.py", line 338, in connect retry_on_signal(lambda: sock.connect(addr)) File "/home/ubuntu/.venvs/chaostoolkit/lib/python3.5/site-packages/paramiko-2.4.1-py3.5.egg/paramiko/util.py", line 279, in retry_on_signal return function() File "/home/ubuntu/.venvs/chaostoolkit/lib/python3.5/site-packages/paramiko-2.4.1-py3.5.egg/paramiko/client.py", line 338, in <lambda> retry_on_signal(lambda: sock.connect(addr)) socket.timeout: timed out  2018-07-27 09:31:00 DEBUG   execute:243  Execute on host...  2018-07-27 09:31:00 DEBUG   execute:244  host: Node10  2018-07-27 09:31:00 DEBUG   execute:245  action: validator-info -v --json  2018-07-27 09:31:00 DEBUG   execute:246  user: None  2018-07-27 09:31:00 DEBUG   execute:247  as_sudo: True  2018-07-27 09:31:00 DEBUG   execute:248  kwargs: \{"connect_kwargs": null, "connect_timeout": 10}  2018-07-27 09:31:04 DEBUG   execute:229   P0  routine quits```  It took 10 hours 43 minutes to run through 29 iterations of the experiment after which a socket timeout inside paramiko caused the perpetual execution of the experiment to hang.  Indy Node did it's job 29 times w/o fail. Each iteration of the experiment resulting in 16 to 17 minutes to complete a view change.  corin.kochenower  8:41 AM  The math suggests that it takes approximately 22 minutes to run each iteration of the experiment. 16 to 17 minutes, of which, waiting for a view change. (edited)  ></body> </Action>
<Action id="48040" issue="32139" author="ckochenower" type="comment" created="2018-07-27 14:52:02.0" updateauthor="ckochenower" updated="2018-07-27 14:52:11.0"> <body><! CDATA Results from perpetual execution of this experiment:  https://drive.google.com/file/d/1dbeJmAHm6s0I2g_8ZhtNGgbAqKMhgy8y/view?usp=sharing  ></body> </Action>
<Action id="48057" issue="32139" author="ckochenower" type="comment" created="2018-07-27 17:45:17.0" updateauthor="ckochenower" updated="2018-07-27 17:45:17.0"> <body><! CDATA  ~krw910 ,  ~esplinr , and  ~stevetolman  - I had a quick look at the  View Change Hardening epic|https://jira.hyperledger.org/browse/INDY-1376  and found the following commit...   https://github.com/hyperledger/indy-plenum/pull/717/files   ...which significantly increases view change related timeouts ( "INDY-1341: Increase viewchange/catchup timeout to 5 minutes" ). "Simple Timeout fixes of the current View Change protocol" as a temporary fix until current/open viewchange related tasks in the epic are completed.   From the short descriptions on the following issues, I suspect the view change slowness experienced during this experiment may be resolved once the legacy to PBFT refactor is completed. | |INDY-1468|Latency measurements in monitor should be windowed|!/secure/viewavatar?size=xsmall&avatarId=10318&avatarType=issuetype!|{color:#4a6785}TO TEST{color}| Vladimir Shishkin|https://jira.hyperledger.org/secure/ViewProfile.jspa?name=VladimirWork | _Actions_|https://jira.hyperledger.org/rest/api/1.0/issues/31782/ActionsAndOperations | | |INDY-1383|Simplify current view change process|!/secure/viewavatar?size=xsmall&avatarId=10318&avatarType=issuetype!|{color:#4a6785}NEW{color}| Sergey Khoroshavin|https://jira.hyperledger.org/secure/ViewProfile.jspa?name=sergey.khoroshavin | _Actions_|https://jira.hyperledger.org/rest/api/1.0/issues/30782/ActionsAndOperations | | |INDY-1344|Implement legacy viewchanger using design for PBFT view change|!/secure/viewavatar?size=xsmall&avatarId=10318&avatarType=issuetype!|{color:#4a6785}NEW{color}|_Unassigned_| _Actions_|https://jira.hyperledger.org/rest/api/1.0/issues/30382/ActionsAndOperations | | |INDY-1345|Integrate refactored legacy viewchanger into current codebase|!/secure/viewavatar?size=xsmall&avatarId=10318&avatarType=issuetype!|{color:#4a6785}NEW{color}|_Unassigned_| _Actions_|https://jira.hyperledger.org/rest/api/1.0/issues/30383/ActionsAndOperations | | |INDY-1346|Implement hybrid legacy/PBFT viewchanger|!/secure/viewavatar?size=xsmall&avatarId=10318&avatarType=issuetype!|{color:#4a6785}NEW{color}|_Unassigned_|   ~VladimirWork ,  ~sergey.khoroshavin , or  ~ashcherbakov  - Can you confirm that the slowness experienced will likely be resolved with the legacy to PBFT viewchanger refactor?  ></body> </Action>
<Action id="48086" issue="32139" author="ashcherbakov" type="comment" created="2018-07-30 04:43:23.0" updateauthor="ashcherbakov" updated="2018-07-30 04:43:23.0"> <body><! CDATA  ~ckochenower  Yes, the slowness is caused by the fact that we do not have PBFT View Change, and the PBFT View Change is the only correct fix. We have to have this slowness, otherwise the chances that View Change will fail are quite high.     ></body> </Action>
