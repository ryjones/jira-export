<Issue id="18514" key="INDY-292" number="292" project="10303" reporter="ozheregelya" assignee="danielhardman" creator="ozheregelya" type="10004" summary="Validation works incorrectly with batching" priority="2" resolution="10000" status="10001" created="2017-06-21 13:23:38.0" updated="2019-03-29 20:32:44.0" resolutiondate="2019-03-29 20:32:44.0" votes="0" watches="3" workflowId="18514"> <environment><! CDATA Build Info: sovrin-node version: 0.3.140 OS/Platform: Ubuntu 16.04.2 LTS  ></environment> <description><! CDATA *Overview:* Incorrect behavior occurs after sending lots of invalid NYMs at once. In this case invalid NYMs mean multiple sending of send NYM with the same dest and different verkeys. Note: load_test.py was modified for sending lots of invalid NYMs: row 176 signer.identifier was changed to constant identifier. Constant identifier should be changed before each running of the script. Here is this version of load_test script:  ^load_test_inv.py   *Case 1:* Behavior is differeSending invalid NYMs one by one. Steps to Reproduce: 1. python3 load_test.py --clients-list load_test_clients.list --timeout 15 -t NYM -c 1 -r 14 => The last output of script: {code:java} ================================ Test time: 140.95470929145813 Average latency: 10.066737873213631 Throughput: 0.0 Error rate: 0.09932268365047384 Succeeded: 1 Failed: 13 ================================{code} It works as expected. Succeeded transaction added unique NYM, the rest NYMs were not added because creator of NYM can't update verkey. 2. Change identifier value in the script to unique one. 3. python3 load_test.py --clients-list load_test_clients.list --timeout 15 -t NYM -c 1 -r 14 --at-once => The last output of script: {code:java} ================================ Test time: 1.0311000347137451 Average latency: 1.0199457577296667 Throughput: 13.577732061551808 Error rate: 0.0 Succeeded: 14 Failed: 0 ================================{code} Actual Results: All invalid transactions are succeeded when the script was run with --at-once key.  Expected Results: Only the first transaction should be succeeded, the rest ones should not be succeeded.  Case 2: Cluster is crashed after sending of 1000 invalid transactions at once (independently on turned on or turned off view changes). 1. python3 load_test.py --clients-list load_test_clients.list --timeout 15 -t NYM -c 1 -r 1000 --at-once => the last output of script: {code:java} ================================ Test time: 9160.375793457031 Average latency: 4133.603355242252 Throughput: 0.010807416882472507 Error rate: 0.09835841021320937 Succeeded: 99 Failed: 901 ================================{code} Actual Results: On 103th transaction Node1C and Node2C appeared in both ackNodes and nackNodes columns of pref_results spreadsheet:  ^perf_results_1_1000_1497994390.csv  The rest transactions were failed. After completion of the test cluster does not send NYMs.  Expected Results: Only the first transaction should be succeeded, the rest ones should not be succeeded. Cluster should not crash.  Additional Information: Running of load script with following parameters (500 transactions instead of 1000): {code:java} python3 load_test.py --clients-list load_test_clients.list --timeout 15 -t NYM -c 1 -r 500 --at-once{code} didn't break the cluster. For 500 transactions behavior is the same as for 14 transactions.  pref_results for 500 transactions:  ^perf_results_1_500_1497994295.csv  Nodes logs:  ^logs.tar.gz   ></description> </Issue>
