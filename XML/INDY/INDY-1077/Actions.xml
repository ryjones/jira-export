<Action id="38344" issue="26317" author="sergey.minaev" type="comment" created="2018-01-09 15:31:58.0" updateauthor="sergey.minaev" updated="2018-01-09 15:31:58.0"> <body><! CDATA There is problem while using leveldb for hash storage: we need check size for some operation and current code iterate over all records on each write to check count. AFAIK leveldb doesn't support any efficient call for this operation, so we should implement optimization on higher level.  PR with possible fix|https://github.com/hyperledger/indy-plenum/pull/495/files .  ></body> </Action>
<Action id="38500" issue="26317" author="dsurnin" type="comment" created="2018-01-12 13:19:07.0" updateauthor="dsurnin" updated="2018-01-12 13:19:07.0"> <body><! CDATA After further discussion and analysis it looks like this fix is complete and does not need any modifications for the moment. ready for performance test  ></body> </Action>
<Action id="38690" issue="26317" author="vladimirwork" type="comment" created="2018-01-16 16:07:03.0" updateauthor="vladimirwork" updated="2018-01-16 16:07:03.0"> <body><! CDATA Build Info: indy-node 1.2.273  Steps to Validate: 1. Install node and stop it. 2. Place file with 100k json NYMs to node named `txns`. 3. Run `python3 -m cProfile -s time add_json_txns_to_ledger.py txns`. 4. Check the cprofile results.  Actual Results: {noformat} 87754442 function calls (83407144 primitive calls) in 61.532 seconds  Ordered by: internal time  ncalls  tottime  percall  cumtime  percall filename:lineno(function) 915180   10.358    0.000   17.030    0.000 base58.py:30(b58encode_int) 40230462    6.672    0.000    6.672    0.000 {built-in method builtins.divmod} 915180    6.450    0.000   24.074    0.000 base58.py:41(b58encode) 300153    4.567    0.000    5.493    0.000 {method 'Put' of 'leveldb.LevelDB' objects} 1600433/1600296    2.276    0.000    5.214    0.000 typing.py:1043(__subclasscheck__) 200046/200038    1.772    0.000    7.839    0.000 msgpack_serializer.py:45(__sort_dict) 7844401/4843364    1.477    0.000    7.025    0.000 {built-in method builtins.isinstance} 1330318/100008    1.391    0.000    3.360    0.000 hash_store.py:87(getNodePosition) 1600498/1600322    1.356    0.000    2.397    0.000 abc.py:194(__subclasscheck__) 1630368    1.349    0.000    1.349    0.000 util.py:24(highest_bit_set) 3003483    1.040    0.000    1.040    0.000 _weakrefset.py:70(__contains__) {noformat}  Additional Info: Load test run against AWS acceptance pool (4 clients x 25 threads x 1000 NYMs to write) takes a bit more than 3 hours (vs 4.5-5 hours before fix).  ></body> </Action>
