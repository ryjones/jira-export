<Action id="29492" issue="19768" author="bdonneaux" type="comment" created="2017-08-07 13:39:46.0" updateauthor="bdonneaux" updated="2017-08-07 13:44:19.0"> <body><! CDATA The above mentioned sovrin-packaging repo can not be found on Github.  Does anyone know what happened to its content?  Maybe  here|https://github.com/hyperledger/indy-node/tree/master/build-scripts/ubuntu-1604 ?  ></body> </Action>
<Action id="30498" issue="19768" author="bdonneaux" type="comment" created="2017-09-05 10:15:31.0" updateauthor="bdonneaux" updated="2017-09-05 11:41:10.0"> <body><! CDATA I've spent quite some time trying to "mirror" the deb packages I've found in the  sovrin xenial repo|https://repo.sovrin.org/lib/apt/xenial/stable/ .  Because CentOS/EPEL does not provide Python 3.5 (only 3.4), I thought it makes sense to look in alternative repositories: -  SCLo|https://wiki.centos.org/SpecialInterestGroup/SCLo  - Software Collection ( el7|http://mirror.centos.org/centos/7/sclo/x86_64/rh/rh-python35/ ) -  IUS|https://ius.io/  Community Project ( el7|https://dl.iuscommunity.org/pub/ius/stable/CentOS/7/x86_64/ )  Since we've previously tested Sovrin using IUS packages, I've decided to give it a try. Using  mock|https://github.com/rpm-software-management/mock  and  fpm|https://github.com/jordansissel/fpm , I've been able to package indy-node and all its declared dependencies.  Here is how a "yum install" looks like:  ==============================  Package Arch Version Repository Size ==============================  Installing: python35u-indy-node noarch 1.1.33-1 local 236 k Installing for dependencies: pbc x86_64 0.5.14-1.el7 local 203 k python35u x86_64 3.5.4-1.ius.centos7 local 50 k python35u-base58 noarch 0.2.4-1 local 4.6 k python35u-charm-crypto x86_64 0.44-0.el7.giteec00df local 460 k python35u-dateutil noarch 2.6.1-1 local 188 k python35u-indy-anoncreds noarch 1.0.10-1 local 43 k python35u-indy-plenum noarch 1.1.24-1 local 561 k python35u-intervaltree noarch 2.1.0-1 local 22 k python35u-ioflo noarch 1.5.4-1 local 238 k python35u-jsonpickle noarch 0.9.5-1 local 25 k python35u-lazy-object-proxy x86_64 1.3.1-1 local 13 k python35u-leveldb x86_64 0.194-1 local 1.2 M python35u-libnacl noarch 1.5.2-1 local 12 k python35u-libs x86_64 3.5.4-1.ius.centos7 local 9.1 M python35u-msgpack-python x86_64 0.4.6-1 local 12 k python35u-orderedset x86_64 2.0-1 local 208 k python35u-pip noarch 9.0.1-1.ius.centos7 local 1.8 M python35u-portalocker noarch 0.5.7-1 local 7.1 k python35u-prompt-toolkit noarch 0.57-1 local 153 k python35u-psutil x86_64 5.3.0-1 local 213 k python35u-pygments noarch 2.2.0-1 local 727 k python35u-pyzmq x86_64 16.0.2-1 local 2.8 M python35u-raet noarch 0.6.8-1 local 150 k python35u-rlp noarch 0.6.0-1 local 15 k python35u-semver noarch 2.7.8-1 local 6.5 k python35u-setuptools noarch 33.1.1-1.ius.centos7 local 652 k python35u-sha3 x86_64 0.2.1-1 local 72 k python35u-six noarch 1.10.0-1 local 10 k python35u-sortedcontainers noarch 1.5.7-1 local 28 k python35u-timeout-decorator noarch 0.4.0-1 local 6.1 k python35u-ujson x86_64 1.33-1 local 57 k python35u-wcwidth noarch 0.1.7-1 local 18 k  Transaction Summary ====================================  Install 1 Package (+32 Dependent packages)  Total download size: 19 M Installed size: 81 M     Now busy trying to test node/client to see if it works and what's missing.  But I've to say I'm lost going back and forth between indy and sovrin documentation and trying to understand the differences.  Next step will be to implement script(s) to automate the packaging and try to expose them on a public repo.  ></body> </Action>
<Action id="30538" issue="19768" author="danielhardman" type="comment" created="2017-09-05 21:32:53.0" updateauthor="danielhardman" updated="2017-09-05 21:32:53.0"> <body><! CDATA Hi,  ~bdonneaux . Exciting progress! I know  ~nage  will be excited as well, and may chime in with additional help.  I apologize for the confusion. Here's a quick summary of the state of packages and .deb files, to explain the relationship for RPM work.  The topmost package that all sovrin validators should run is "sovrin" (not "sovrin-node", "sovrin-client", etc–those are old and deprecated names). This package is built from  https://github.com/sovrin-foundation/sovrin.  The sovrin.deb lays down genesis transaction files and not much else right now–but in the future it might include some handy utilities such as the one sovrin validator nodes use to assess their security posture. But I expect that package to always be lightweight and simple. It depends on indy-node (https://github.com/hyperledger/indy-node), which in turn depends on indy-plenum. These two packages are the heart of the software itself.  The client code/CLI in indy-node also has a dependency on indy-anoncreds. We expect this dependency to eventually disappear, as client/CLI code in indy-node migrates into indy-sdk instead.  RPMs should follow this same division. Sovrin != indy-node, because it specifies a governance model and a set of genesis transactions that is a layer on top of indy-node (the raw software). Likewise indy-node (validator logic) must remain separate from indy-plenum (consensus protocol), because indy may use a different consensus protocol (e.g., Hyperledger Fabric) at some point in the future.  Hope this helps.  ></body> </Action>
<Action id="30603" issue="19768" author="bdonneaux" type="comment" created="2017-09-07 08:06:38.0" updateauthor="bdonneaux" updated="2017-09-07 08:06:38.0"> <body><! CDATA Now I got it :P  It is explained on both README pages though. But many documents are still referring to sovrin-node, client and common packages. And since those are still present in the xenial repo, I though they were still used.  Anyway, I've managed to package sovrin as well and its installation by yum trigger the installation of indy-node and the 32 others dependencies.  While I'm waiting to get access to SovrinHelpers Jenkins library to start playing with the pipeline and automate the packaging, I'm testing the packages I've got so far.  Remarks regarding underlying dependencies: #  libsodium|https://github.com/jedisct1/libsodium/releases : Requirements for indy-plenum-1.1.24>reat-0.6.8->libnacl-1.5.2 on Ubuntu refer to libsodium18 v1.0.8-5 which provides libsodium.so.18. CentOS/Redhat/EPEL 7 provides "only" libsodium v1.0.5-1 which provides libsodium.so.13. However, the maintainer of the  Fedora package|https://src.fedoraproject.org/rpms/libsodium  -  Remi Collet|https://src.fedoraproject.org/user/remi  - has also published a  libsodium-last v1.0.13-1|http://rpms.famillecollet.com/enterprise/7/remi/x86_64/libsodium-last-1.0.13-1.el7.remi.x86_64.rpm  (but I can't find the the SRPM!). In any case, from what I'm reading in the  code|https://github.com/saltstack/libnacl/blob/v1.5.2/libnacl/__init__.py  of libnacl, the library version should not be an issue, as it looks for so lib in sequence (18, 17, 13, 10, 5, 4) and will pickup the highest one. This being said, the  change logs|https://github.com/jedisct1/libsodium/releases  of latest stable version are stating a few improvement that may impact the performance. #  pyzmq|https://github.com/zeromq/pyzmq : Requirements for indy-plenum-1.1.24>pyzmq-16.0.2 can be met with zeromq-devel-4.1.4-5.el7 from EPEL but generating a warnings: "Detected ZMQ version: 4.1.4, but pyzmq targets ZMQ 4.1.6. libzmq features and fixes introduced after 4.1.4 will be unavailable". Alternatively, the package can be compiled against the embedded lib (which is 4.1.6) if zeromq-devel is not installed. I've chosen the test this second option.  #  pbc|https://crypto.stanford.edu/pbc/ : Requirements for indy-anoncreds-1.0.10>Charm-Crypto are met with pbc-devel-0.5.14-1.el7 that we've already packaged a while ago for sovrin-node. I still need to publish the spec somewhere and deal with the lack of stable  release|https://github.com/JHUISI/charm/releases  tag for Charm-Crypto. But I've decided to use a specific  git commit|https://github.com/JHUISI/charm/commit/eec00dfacee4cb879a6bd0ce80f44e390936e2c3  in the mean time in order to package a pre-release version (python35u-charm-crypto-0.44-0.el7.giteec00df).  ></body> </Action>
<Action id="30606" issue="19768" author="bdonneaux" type="comment" created="2017-09-07 09:30:41.0" updateauthor="bdonneaux" updated="2017-09-07 09:30:41.0"> <body><! CDATA If anyone wants to try those "one shot test packages" for CentOS7, I've temporarily published them in yum repo  here|https://store.digital-me.nl/public/sovrin-el7-x86_64/ .  Disclaimer: most of them are not signed (yet)! Try at your own risk. But any feedback will be appreciated.  Meanwhile, the IUS and Remi keys can be found  here|https://github.com/iuscommunity-pkg/ius-release/blob/master/SOURCES/IUS-COMMUNITY-GPG-KEY  and  there|http://rpms.famillecollet.com/RPM-GPG-KEY-remi .  ></body> </Action>
<Action id="30607" issue="19768" author="andkononykhin" type="comment" created="2017-09-07 09:46:13.0" updateauthor="andkononykhin" updated="2017-09-07 09:46:13.0"> <body><! CDATA Hello,  ~bdonneaux   For now SovrinHelpers (and one more library that is used form it indirectly) actually support external build package process.  All three repos (sovrin, indy-node and indy-plenum) implements deb packages build routine. Please check the following urls: *  indy-plenum builder|https://github.com/hyperledger/indy-plenum/blob/c37e8358f02cf438ec12ec1a2e5fa15d28a4501a/Jenkinsfile#L203  *  indy-node builder|https://github.com/andkononykhin/indy-node/blob/5fa2f762d479e68a8e02e2b59b94b4c2829284d8/Jenkinsfile#L75  *  sovrin builder|https://github.com/sovrin-foundation/sovrin/blob/d88cea91d93b6988bcd1bed7b8aa1c5dfefef7f4/Jenkinsfile#L7   They are quite the same and expected to support API:  Args: * name: name of the package (for now it's always the same as name from the top of the accordant Jenkinsfiles) * releaseVersion: triple of numbers, like semver * sourcePath: location (absolute path) of cloned github repo in Jenkins workspace  Returns: * docker volume name or local path to directory with prepared packages  Returned path/volume then used by uploader logic.  Described scheme was tested and used only with deb packaging and uses prepared infrastructure (apt repository) on repo.sovrin.org.  I guess it could be refactored and adjusted to support multiple packaging but I think we can start with integration of rpm building logic into github repos.  Best regards  ></body> </Action>
<Action id="30611" issue="19768" author="bdonneaux" type="comment" created="2017-09-07 12:05:15.0" updateauthor="bdonneaux" updated="2017-09-07 12:05:15.0"> <body><! CDATA Regarding Charm-Crypto, I've already opened an  issue|https://github.com/JHUISI/charm/issues/143  asking for a better/fresher tag. According to  jakinyele|https://github.com/jakinyele , we shall see soon a pre-release tag for v0.50.  ></body> </Action>
<Action id="30748" issue="19768" author="bdonneaux" type="comment" created="2017-09-12 09:16:38.0" updateauthor="bdonneaux" updated="2017-09-12 09:16:38.0"> <body><! CDATA Thanks to Sovrin support, I've managed to replay the whole getting-started guide about Alice.  So I'm now pretty much confident the code is complete, well compiled and correctly packaged for CentOS 7. Now full steam on the scripting part to build those packages.  ></body> </Action>
<Action id="31002" issue="19768" author="bdonneaux" type="comment" created="2017-09-19 08:21:00.0" updateauthor="bdonneaux" updated="2017-09-19 08:21:00.0"> <body><! CDATA Status: - our own CI infra has been upgraded to support Docker - publish on PyPI has been disable in centos branch, so PL can work until package step - now trying to implement function buildRpmCentos in Jenkins file (based on existing buildDebUbuntu)  REM: I think an underlying requirement for this issue would be to publish SovrinHelpers Jenkins library in Github. Because it will likely need some tuning to support centos. Starting with some extra options to make it more flexible. For instance, allowing to build packages without publishing them (sort of dryrun). For now I'm reworking it a local Git repo. I wonder how hard it will be to merge later...  ></body> </Action>
<Action id="31017" issue="19768" author="bdonneaux" type="comment" body="I believe this issue to be pending on and/or impacted by INDY-835." created="2017-09-19 18:06:02.0" updateauthor="bdonneaux" updated="2017-09-19 18:06:02.0"/>
<Action id="31669" issue="19768" author="bdonneaux" type="comment" created="2017-10-06 10:27:58.0" updateauthor="bdonneaux" updated="2017-10-06 10:27:58.0"> <body><! CDATA Today, I've managed to PR some improvements for indy-node which were required to test the current CD pipeline on CentOS: still building only deb packages, but using Docker 1.12 on a CentOS 7 Jenkins slave.  Once this PR will be merged, I'll create additional PRs for similar changes in the other repos, then only start sending PRs to support CentOS packaging.  ></body> </Action>
<Action id="36009" issue="19768" author="bdonneaux" type="comment" created="2017-12-08 11:45:22.0" updateauthor="bdonneaux" updated="2018-03-07 08:05:21.0"> <body><! CDATA I've been able to package indy-node as rpm in a forked branch using the existing buildscripts as suggested:   https://github.com/digital-me/indy-node/tree/centos/build-scripts/centos-7.3.1611   In order to achieve this, I needed to altered a copy of the Jenkins shared lib (SovrinHelpers) which is not publicly available.  But there is now a couple of issues that should help us stitching things together, starting with INDY-997.  As for me, it does not make sense to PR any centos build scripts as long as we can not interact with the shared lib for the packaging steps (without publishing).  ></body> </Action>
<Action id="41286" issue="19768" author="bdonneaux" type="comment" created="2018-03-07 08:11:02.0" updateauthor="bdonneaux" updated="2018-03-07 08:13:39.0"> <body><! CDATA Waiting for the Indy shared lib to be published (INDY-997), I've managed to validate, test and package IndyAnonCreds + PBC and Charm using our own original idea ( https://github.com/digital-me/jenkins-lib-lazy|https://github.com/digital-me/jenkins-lib-lazy ):     !IndyAnonCred-LazyPL.png!  TODO:  1. Explore ways to tune the lib to support extra steps (before and after docker inside tasks) to act on the produced result (test reports and packages for instances).  2. See how to merge our "lazy scripts" in the new shared lib published since by Indy:  https://github.com/hyperledger/indy-jenkins-pipeline-lib   ></body> </Action>
<Action id="41341" issue="19768" author="bdonneaux" type="comment" body="On the way, I have  PR|https://github.com/blynn/pbc/pull/13  some changes in PBC and have the scripts of AnonCreds pointing at a specific  branch|https://github.com/digital-me/pbc/tree/indy-0.5.14  supporting rpm spec in the meantime." created="2018-03-07 22:59:27.0" updateauthor="bdonneaux" updated="2018-03-07 22:59:27.0"/>
