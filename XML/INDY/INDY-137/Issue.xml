<Issue id="17372" key="INDY-137" number="137" project="10303" reporter="devin-fisher" assignee="danielhardman" creator="devin-fisher" type="10004" summary="Initializing State loads the whole ledger into Memory" priority="3" resolution="10000" status="10001" created="2017-06-01 16:51:29.0" updated="2019-03-29 20:33:09.0" resolutiondate="2019-03-29 20:33:09.0" votes="0" watches="3" workflowId="17376"> <description><! CDATA    When initializing the state of Plenum the whole ledger is loaded into memory and then processed to create the state.  This operation could fail or be very inefficient if the ledger is large (the domain ledger should in time).     Currently, the implementation is doubly bad since getAllTxn load all txn into an OrderedDict and then they are enumerated into a list in initStateFromLedger. So there could be a two large data structures holding pointers to all the Txn.    {code:java} @staticmethod def initStateFromLedger(state: State, ledger: Ledger, reqHandler): # If the trie is empty then initialize it by applying # txns from ledger if state.isEmpty: txns =  _ for _ in ledger.getAllTxn().values()  reqHandler.updateState(txns, isCommitted=True) state.commit(rootHash=state.headHash)  def initDomainState(self): self.initStateFromLedger(self.states DOMAIN_LEDGER_ID , self.domainLedger, self.reqHandler){code}       ></description> </Issue>
