<Action id="59194" issue="39167" author="vladimirwork" type="comment" created="2019-04-12 12:55:48.0" updateauthor="vladimirwork" updated="2019-04-12 12:55:48.0"> <body><! CDATA Build Info: indy-node 1.7.0~dev891  Steps to Reproduce: 1. Start test pool setting ACCEPTABLE_DEVIATION_PREPREPARE_SECS config parameter to lower value foNode3 (60) and ForceViewChangeFreq = 1800. 2. Stop that node while other nodes are ordering (10 txns/sec). 3. Start the node after some time expecting that the node will perform catchup more than the time set for the mentioned config parameter send set of txns. 4. Repeat steps 2 and 3 one more time.  Actual Results: *Node3 has ViewNo 0* but all other nodes have 4 at the end of the test. Node3 *doesn't catch up* txns after Step 4 (but after Step 3 *it does*). There are suspicions codes in logs: {noformat} 2019-04-12 10:25:39,257|NOTIFICATION|node.py|VIEW CHANGE: Node3 got one of primary suspicions codes 20 2019-04-12 10:25:40,663|WARNING|node.py|Node3 raised suspicion on node Node4 for Pre-Prepare message has already ordered requests; suspicion code is 42 2019-04-12 10:25:40,663|NOTIFICATION|node.py|VIEW CHANGE: Node3 got one of primary suspicions codes 42 2019-04-12 10:25:40,664|WARNING|node.py|Node3 raised suspicion on node Node4 for Pre-Prepare message has already ordered requests; suspicion code is 42 2019-04-12 10:25:40,665|NOTIFICATION|node.py|VIEW CHANGE: Node3 got one of primary suspicions codes 42 2019-04-12 10:26:23,384|WARNING|node.py|Node3 raised suspicion on node Node2 for Pre-Prepare message has incorrect reject; suspicion code is 20 2019-04-12 10:26:23,384|NOTIFICATION|node.py|VIEW CHANGE: Node3 got one of primary suspicions codes 20 2019-04-12 10:26:24,617|WARNING|node.py|Node3 raised suspicion on node Node2 for Pre-Prepare message has incorrect reject; suspicion code is 20 {noformat}  ^INDY-2046-12-04-2019-stalled-node.tar.gz    ></body> </Action>
<Action id="59248" issue="39167" author="derashe" type="comment" created="2019-04-15 18:37:24.0" updateauthor="ashcherbakov" updated="2019-04-18 13:47:56.0"> <body><! CDATA *Validation plan:*  Mention: for all tests 4 nodes pool would be enough * Tests on checking pool consistency ** Now, request mainly identified by full digest (with signatures and plugins included). This was done to avoid situation, when nodes can consider two txns with same body, but different signatures/plugins, as one. This can be checked by test below. *** run pool with default config *** create txn (mint, node, nym) node **** case #1: multisign it with different , but authorized, nyms **** case #2: set different plugin's fields (FEES) *** send one, wait for it to be written *** send second, ensure that it will be recknacked ** Send these txns in a one batch *** run pool with modified config (Max3PCBatchSize=2, Max3PCBatchWait=9999, UPDATE_STATE_FRESHNESS=False) *** remember last_ordered batch on nodes *** remember sizes of a ledgers *** create same txns that in prev case, send them one by one (do not pay attention to reply, cause sdk cannot track two requests with same reqId) *** wait a bit *** ensure that last_ordered == old_last_ordered + 1 *** ensure that ledger_size == old_ledger_size + 1 ** Send same requests to check logic did not change *** run pool with default config *** create requests from prev case and sign it once *** send it once, get a reply  *** send it second time, get a reply * Multisignature functionality ** #1 *** create request, sign it with both signature and multisignature *** send it, ensure it reqnacked ** #2  *** create request, send it without signing *** ensure it reqnacked * Multisignature rules correct application (test these with most important requests - mint, node, nym. Use only multisignature to sign the request) ** #1 *** set request constraint to None *** ensure that any role can send such a request ** #2 *** set request constraint to some role (Steward f.e.) *** ensure that only Steward can send such a request ** #3 *** set request constraint to some role or some role (Steward or Trustee f.e.) *** ensure that only mentioned roles can send such a request *** ensure that request with both of this signatures can be successfully written ** #4 *** set request constraint to some role and some role (Steward and Trustee f.e.) *** ensure that no single role can send such a request *** ensure that only request, signed with mentioned roles, can be written ** #5 *** repeat step #4 with constraint like ( 2x Steward and/or Trustee) ** #6 *** repeat step #4 with constraint like ( 2x Steward and/or 2x Trustee) ** #7 *** repeat step #4 with constraint like ( 5x Steward and/or 2x Trustee) ** #8 *** repeat step #4 with constraint like ( Steward and Trustee) or (Steward and Trust Anchor)  ></body> </Action>
<Action id="59365" issue="39167" author="vladimirwork" type="comment" body="Cases with rules are blocked by IS-1237." created="2019-04-22 10:56:09.0" updateauthor="vladimirwork" updated="2019-04-22 10:56:09.0"/>
<Action id="59388" issue="39167" author="vladimirwork" type="comment" created="2019-04-22 15:21:59.0" updateauthor="vladimirwork" updated="2019-04-22 15:21:59.0"> <body><! CDATA Build Info: indy-node 1.7.0.dev900 libindy 1.8.2~1065  Case with single batch has been checked manually and other cases are implemented in https://github.com/VladimirWork/indy-test-automation/blob/master/system/draft/TestMultiSigSuite.py  ></body> </Action>
