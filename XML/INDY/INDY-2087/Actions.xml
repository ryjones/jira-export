<Action id="60190" issue="39821" author="toktar" type="comment" created="2019-05-21 08:11:30.0" updateauthor="toktar" updated="2019-05-30 13:34:52.0"> <body><! CDATA *PoA:*   A command to set multiple AUTH_RULEs by one transaction.  Transaction AUTH_RULES is not divided into a few AUTH_RULE transactions, and is written to the ledger with one transaction with the full set of rules that come in the request. If one rule fails validation, the request with all rules will be rejected.  A request format for the AUTH_RULES transaction: {code:java} class AuthRuleField(MessageValidator): schema = ( (CONSTRAINT, ConstraintField(ConstraintEntityField(), ConstraintListField())), (AUTH_ACTION, ChooseField(values=(ADD_PREFIX, EDIT_PREFIX))), (AUTH_TYPE, LimitedLengthStringField(max_length=NAME_FIELD_LIMIT)), (FIELD, LimitedLengthStringField(max_length=NAME_FIELD_LIMIT)), (OLD_VALUE, AuthRuleValueField(optional=True)), (NEW_VALUE, AuthRuleValueField()) )   class ClientAuthRulesOperation(MessageValidator): schema = ( (TXN_TYPE, ConstantField(AUTH_RULES)), (RULES, IterableField(AuthRuleField())) ) {code} Request Example:       {code:java} { 'operation': { 'type':'122', 'rules':   {'constraint':{   'constraint_id': 'OR', 'auth_constraints':  {'constraint_id': 'ROLE',  'role': '0', 'sig_count': 1,  'need_to_be_owner': False,  'metadata': {}},   {'constraint_id': 'ROLE',  'role': '2', 'sig_count': 1,  'need_to_be_owner': True,  'metadata': {}}   },  'field' :'services', 'auth_type': '0',  'auth_action': 'EDIT', 'old_value': ' VALIDATOR ', 'new_value': '  ' }, ...   },  'identifier': '21BPzYYrFzbuECcBV3M1FH', 'reqId': 1514304094738044, 'protocolVersion': 1, 'signature': '3YVzDtSxxnowVwAXZmxCG2fz1A38j1qLrwKmGEG653GZw7KJRBX57Stc1oxQZqqu9mCqFLa7aBzt4MKXk4MeunVj' } {code} Reply Example: {code:java} {     'op':'REPLY', 'result':{   'txnMetadata':{   'seqNo':1, 'txnTime':1551776783 }, 'reqSignature':{   'values':    {   'value':'4j99V2BNRX1dn2QhnR8L9C3W9XQt1W3ScD1pyYaqD1NUnDVhbFGS3cw8dHRe5uVk8W7DoFtHb81ekMs9t9e76Fg', 'from':'M9BJDuS24bqbJNvBRsoGg3' }  , 'type':'ED25519' }, 'txn':{   'type':'122', 'data':{ 'rules':   {'constraint':{   'constraint_id': 'OR', 'auth_constraints':  {'constraint_id': 'ROLE',  'role': '0', 'sig_count': 1,  'need_to_be_owner': False,  'metadata': {}},   {'constraint_id': 'ROLE',  'role': '2', 'sig_count': 1,  'need_to_be_owner': True,  'metadata': {}}   },  'field' :'services', 'auth_type': '0',  'auth_action': 'EDIT', 'old_value': ' VALIDATOR ', 'new_value': '  ' }, ...   } 'protocolVersion':2, 'metadata':{   'from':'M9BJDuS24bqbJNvBRsoGg3', 'digest':'ea13f0a310c7f4494d2828bccbc8ff0bd8b77d0c0bfb1ed9a84104bf55ad0436', 'reqId':711182024 } }, 'ver':'1', 'rootHash':'GJNfknLWDAb8R93cgAX3Bw6CYDo23HBhiwZnzb4fHtyi', 'auditPath':   } } {code}    PR:  https://github.com/hyperledger/indy-node/pull/1296   ></body> </Action>
<Action id="60686" issue="39821" author="ashcherbakov" type="comment" created="2019-06-05 11:56:47.0" updateauthor="ashcherbakov" updated="2019-06-05 11:57:15.0"> <body><! CDATA Please create the following system tests: - Test1: ** send GET_AUTH_RULE without parameters (to get all AUTH_RULES) ** get the output, and use it as the input for AUTH_RURLES - Test2: ** send GET_AUTH_RULE without parameters (to get all AUTH_RULES) ** get the output, modify a couple of rules ** use the modified output as the input for AUTH_RULES ** make sure that modified rules are applied - Test3: ** send AUTH_RULES to modify 1 rule ** make sure that modified rule is applied - Test4: ** send AUTH_RULES to modify 2 rules ** make sure that modified rules are applied  ></body> </Action>
<Action id="60687" issue="39821" author="toktar" type="comment" created="2019-06-05 12:01:15.0" updateauthor="toktar" updated="2019-06-05 12:01:15.0"> <body><! CDATA Problem reason: * There is no command to set many auth rules at once.  Changes: * Add command AUTH_RULES * Add tests  PR: *  https://github.com/hyperledger/indy-node/pull/1296   Version: * indy-node 1.9.0~dev987 master  Risk factors: * AUTH_RULE, AUTH_RULES and GET_AUTH_RULES requests  Risk: * Medium  Covered with tests: *  test_auth_rules_transaction.py|https://github.com/hyperledger/indy-node/pull/1296/files#diff-484a99aecf8962df26d645b7a6cdc9a7   *  test/auth_rule/auth_framework/edit_auth_rules.py|https://github.com/hyperledger/indy-node/pull/1296/files#diff-074a0cc7cbfc278e726b4fe7e4e3cb4d    Recommendations for QA: Test integration between indy-sdk and indy-node for AUTH_RULE, AUTH_RULES and GET_AUTH_RULES requests  ></body> </Action>
<Action id="60761" issue="39821" author="andkononykhin" type="comment" created="2019-06-07 13:21:35.0" updateauthor="andkononykhin" updated="2019-06-07 13:21:35.0"> <body><! CDATA Implemented new  system test with the following scenario: # start new docker pool # using trustee1 did send add steward1 nym - should pass # using trustee1 did send add trustee nym - should pass # using steward1 did send add steward nym - should be rejected # using steward1 did send add trustee nym - should be rejected # using trustee1 did and AUTH RULES txn set constraints to allow one steward to perform both nym add trustee and nym add steward operations  - should pass # using trustee1 did and get auth rule verfiy that authrules have been set properly # check that trustee1 is not allowed to add stewards and trustees any more - expect REJECTs # check that steward1 is allowed to do that  Run the scenario on pool using the following versions of artifacts: * client: ** libindy 1.9.0~1130 and python wrapper version 1.9.0-dev-1130 * pool: ** indy-node 1.9.0~dev987 ** indy-plenum 1.9.0~dev808  Test passed.  For now  the test|https://github.com/hyperledger/indy-test-automation/blob/ebbd775b3baa008981d10fb9f2a28f54a418fc13/system/draft/TestAuthMapSuite.py#L1065  is a part of  the pull request|https://github.com/hyperledger/indy-test-automation/pull/25  to indy-test-automation repository.  ></body> </Action>
