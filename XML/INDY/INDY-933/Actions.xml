<Action id="49873" issue="22886" author="lovesh" type="comment" created="2018-09-05 07:35:24.0" updateauthor="lovesh" updated="2018-09-05 07:35:24.0"> <body><! CDATA {quote}Primary needs to initiate re-signing of the same state periodically {quote} Why periodically? Shouldn't it be just once. If the primry sees no new txns for say 5 secs, it can send (the protocol can enforce by other nodes demanding it) the aggregate signature on empty state with timestamp. As far as freshness of replies by clients on a low traffic network (1 txn every minute or below) is concerned:  The client can have a config variable like _staleness_tolerance_ which determines how much staleness it is willing to accept. eg. it _staleness_tolerance_ is set to 30 mins and client asks 1 node for reply, it gets a reply with state proof but that is 35 minutes old, the client then asks another node, it still gets a response that is 33 minutes old, the client then asks another node, it keeps on asking nodes till it gets a reply that is <= 30 minutes old or has talked to >f nodes. Clients asking multiple nodes should not be a problem for nodes since we are imagining this condition in a network with low traffic anyway.  Also client should track how fresh and timely responses then get from different nodes and keep a sorted list of nodes in that order. The client should ask the topmost node in the list whenever a read is needed.  ></body> </Action>
<Action id="49882" issue="22886" author="ashcherbakov" type="comment" created="2018-09-05 11:00:08.0" updateauthor="ashcherbakov" updated="2018-09-05 11:00:08.0"> <body><! CDATA  ~lovesh  As I understand, you propose that if there is no load for 5 sec, then Primary sends aggregated signature of the previous PrePrepare, so that all Nodes have the same BLS multi-sig for the latest state and can generate correctly signed state proofs. However, in the current implementation this is not needed, since each Node individually calculates multi-signature based on the verified quorum of COMMITs, so that a Node can provide correctly signed state proof even without next PrePrepare received from the Primary. That means that nodes may have different (though correct) multi-sig values for the latest state, but this doesn't matter (until we have catch-up of BLS store), and the the multi-sig value for the state will be updated by the one calculated by the Primary with the next PrePrepare, so eventually it becomes equal on all nodes.  ></body> </Action>
<Action id="49883" issue="22886" author="lovesh" type="comment" body="Your&apos;re right, i mentioned that its optional in doc but forgot to mention here" created="2018-09-05 12:13:04.0" updateauthor="lovesh" updated="2018-09-05 12:13:04.0"/>
<Action id="55121" issue="22886" author="ashcherbakov" type="comment" created="2018-12-24 15:17:52.0" updateauthor="ashcherbakov" updated="2018-12-24 15:17:52.0"> <body><! CDATA *PoA:* # Enable BLS multi-sig for all ledgers # Send PrePrepare with no requests just to update the BLS multi-sig regularily ** Track the time of last sent PrePrepare for each ledger by master Primary ** Add two new vales to config: *** UPDATE_STATE_FRESHNESS = True/False *** STATE_FRESHNESS_WINDOW = 60 (sec) <--- need to decide exact value ** Check if state needs to be updated for a ledger before sending the next 3PC batch *** check if feature is enabled in config *** check for every ledger sequentially *** get the latest timstamp for the ledger's state (from `bls_store`), that is get the latest key (`get_last_key`). *** do it as the first action in `send3PCBatch` ** If the state needs to be updated, send a common PrePrepare, but with empty requests ** Do a common 3PC. Make sure that everything works if requests are empty. ** Do not send `Order` msg to the Node if there are no requests.  Integration Tests: # Check that the state gets updated for every ledger according to the STATE_FRESHNESS_WINDOW and no requests at all # Check that the state gets updated for every ledger according to the STATE_FRESHNESS_WINDOW if there are requests sent for 1 of the ledgers only  ></body> </Action>
<Action id="55182" issue="22886" author="ashcherbakov" type="comment" body="PR: https://github.com/hyperledger/indy-plenum/pull/1047" created="2018-12-29 15:53:49.0" updateauthor="ashcherbakov" updated="2018-12-29 15:53:49.0"/>
<Action id="55489" issue="22886" author="ashcherbakov" type="comment" created="2019-01-10 11:31:20.0" updateauthor="ashcherbakov" updated="2019-01-11 08:49:22.0"> <body><! CDATA Changes: - Periodically (5 min) update BLS state for every ledger - Support BLS multi-sigs for Pool ledger - Fix the problem with ordering on backup instances after view change  PR: -  https://github.com/hyperledger/indy-plenum/pull/1047   Version: - TBD  Risk factors: - Consensus - Ordering - View change triggerring  Risk: - Med  Covered with tests: - tests in plenum/test/freshness  Recommendations for QA # Run acceptance load test # Run some acceptance for POOL ledge txns (NODE txn) # Check that we have fresh enough time (not more than 5 mins outdated) for every ledger in replies: ** Send requests (for every ledger) ** Wait for more than 5 mins ** Send read requests for every ledger ** Check that the time in the Reply is not older than 5 mins from the current one *** Check  {{state_proof}}/ {{multi_signature}}/ {{value/}} {{timestamp}}{{}} # Check the item 3 for Tokens Ledgers (so that freshness is updated for payments)  ></body> </Action>
<Action id="55709" issue="22886" author="toktar" type="comment" created="2019-01-16 09:24:56.0" updateauthor="toktar" updated="2019-01-16 09:24:56.0"> <body><! CDATA Version: * indy-node 1.6.758 -master * indy-plenum 1.6.653 -master  ></body> </Action>
<Action id="55761" issue="22886" author="vladimirwork" type="comment" body="GET_TXN doesn&apos;t support state proofs so we can&apos;t check freshness for pool and config ledger." created="2019-01-17 13:53:31.0" updateauthor="vladimirwork" updated="2019-01-17 13:53:31.0"/>
<Action id="55763" issue="22886" author="vladimirwork" type="comment" created="2019-01-17 15:29:47.0" updateauthor="vladimirwork" updated="2019-01-18 13:28:29.0"> <body><! CDATA Build Info: indy-node 1.6.760 libindy 1.7.0~924 (libindy 1.6.8 + libsovtoken 0.9.6 for token case since it is the last libsovtoken for now)  Actual Results: Pool ledger freshness (x) INDY-1954 Config ledger freshness (x) INDY-1954 Domain ledger freshness (/) Sovtoken ledger freshness (!) INDY-1954 (verify_payment also based on GET_TXN) Production load for pool with freshness (/)  So freshness works for all domain txns and for part of token txns, all other ledgers will be supported after INDY-1954 fix and in scope of INDY-1928.  ></body> </Action>
