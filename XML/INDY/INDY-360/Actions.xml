<Action id="27642" issue="18825" author="peacekeeper" type="comment" created="2017-06-29 18:51:53.0" updateauthor="peacekeeper" updated="2017-06-29 18:51:53.0"> <body><! CDATA I think this is can be very useful in a number of attack types.  For certain attacks this may not help, e.g. imagine someone somehow managed to manipulate ledger contents, and "stopping" it is not enough, it would actually have to be reverted to an earlier state in order to stop the damage.  ></body> </Action>
<Action id="27653" issue="18825" author="danielhardman" type="comment" created="2017-06-29 19:34:46.0" updateauthor="danielhardman" updated="2017-06-29 19:34:46.0"> <body><! CDATA Comment from Sam Smith:     The first priority is to make it dead simple for any admin to switch  their node into/outof  read only mode. So that at most its seconds from getting a notice to flipping the "circuit breaker".   This can then be augmented in the future with automated reasoning that will trip the circuit breaker without human intervention. The risk of doing so is minimized if its truly a do no harm mode (or at least minimizes the harm).   The next priority is to minimize the disruption. Since read only mode means that nodes will not accept write transactions there might be deleterious side effects based on assumptions clients and other nodes are making about the apparent refusal or inability to accept/process/respond to write transactions.    We can be smarter about this by having an explicit recognized announced response for read only mode of operation. So for example when a client makes a request for a write transaction instead of just dropping the request (which could cause a burst of retries and other things a client might do  as a result of transactions being dropped) the Node responds with  "I am in readonly mode  try again in 60 seconds". This allows clients and other nodes to more gracefully adapt to the change.  That is read only mode is explicitly announced by the Node to anyone that attempts to write to it and can be queried.    Another deleterious side effect could be metrics for selecting leader nodes. A node that goes into read only mode would look like its a bad node from a performance or reputation point of view so any algorithms that are monitoring performance to determine future leader elections or fitness in the pool will be biased or inaccurate if a node goes into read only mode unless it is specifically included as an exception case for metric calculation.   The rule should be that If a client or node sees >= f+1 nodes in read only mode then there should be no lasting deleterious side effects with respect to how that client or node treats those nodes that are in read only mode such as metrics or reputation. And clients should gracefully throttle retries so as not to cause a packet storm.    ></body> </Action>
<Action id="28450" issue="18825" author="dsurnin" type="comment" created="2017-07-15 12:11:45.0" updateauthor="dsurnin" updated="2017-07-15 12:11:45.0"> <body><! CDATA  ~danielhardman   Should it be config transaction and should it be written to ledger?  Do we want "read only"-ness in protocol level (node will have new state) or do we want actual ledger files be written protected (for example _chmod a-w "_ledger_files_"_)?  Do we need a schedule for a read only, i.e. "do not write anything from 13:00 to 17:00 or 3 hours from now, in other time it is ok to write" ?  What about read only state near update time, i.e. scenario: node were scheduled to update in 10 sec, set read only, node updated. What node state do we expect?  The same question with restart, what node state do we expect to have after read only node restarted?  ></body> </Action>
<Action id="28482" issue="18825" author="dsurnin" type="comment" created="2017-07-17 09:10:40.0" updateauthor="dsurnin" updated="2017-07-17 09:10:40.0"> <body><! CDATA email from  ~danielhardman   We need to invent a mechanism that's as simple as possible, that's reversible, and that doesn't undermine the principle of diverse trust. i think it might be modeled on the POOL_UPGRADE, maybe, except that it wouldn't need a schedule. Maybe we just say POOL_CONFIG writes=False, and then later, POOL_CONFIG writes=True, or something like that.   The purpose of this mechanism is to have a way to stop ongoing damage from a spammer.  ></body> </Action>
<Action id="28483" issue="18825" author="dsurnin" type="comment" created="2017-07-17 09:12:00.0" updateauthor="dsurnin" updated="2017-07-17 09:12:00.0"> <body><! CDATA I created small gdoc to proceed with discussion   https://docs.google.com/document/d/1wQpJXPhLOMxOp7XgV_3DGdzR_nInGvERhcH9O17M3U4      ></body> </Action>
<Action id="28792" issue="18825" author="dsurnin" type="comment" created="2017-07-21 13:39:13.0" updateauthor="dsurnin" updated="2017-07-21 13:39:13.0"> <body><! CDATA for the moment the changes are in indy-node   https://github.com/hyperledger/indy-node/pull/250      ></body> </Action>
<Action id="28809" issue="18825" author="ashcherbakov" type="comment" created="2017-07-21 16:06:16.0" updateauthor="ashcherbakov" updated="2017-07-21 16:06:16.0"> <body><! CDATA  ~dsurnin  It was decided that we don't need PrePrepare filter for now, just discrd client Requests if in read-only mode. Please create a separate ticket for handling PrePrepare.  ></body> </Action>
<Action id="28834" issue="18825" author="dsurnin" type="comment" created="2017-07-22 10:50:09.0" updateauthor="dsurnin" updated="2017-07-22 10:50:09.0"> <body><! CDATA the last fixes are ready to be merged  indy-node 1699644c9da2fb8cf737c3aea67aa5ed19ee7eb7  tests  sovrin-node/sovrin_client/test/cli/test_pool_config.py  sovrin-node/sovrin_node/test/pool_config/*     new command format  send POOL_CONFIG writes=True force=False  writes and force are bool parameters; writes is required and force is not. default for force is False  command is allowed for Trustee only     Please note - the changes requires testing clients commands in both writable and readonly modes  also different startup scenarios should be tested - restart in readonly mode, with/without catchup, with/without upgrade etc.  also validation of command's messages is required  ></body> </Action>
<Action id="28872" issue="18825" author="dsurnin" type="comment" body="merged " created="2017-07-24 03:26:04.0" updateauthor="dsurnin" updated="2017-07-24 03:26:04.0"/>
<Action id="28874" issue="18825" author="krw910" type="comment" created="2017-07-24 04:56:56.0" updateauthor="krw910" updated="2017-07-24 04:56:56.0"> <body><! CDATA Notes from Dmitry on what to cover with the limited changes:  There were no any changes to read transaction except GET_TXN, so basically checking one or two command in both modes should sufficient. all write txns should be working almost the same way, so I think send NYM should be enough to test I think it is a minim to check in both modes after restart and after upgrade use cases I'm aware the most since I checked it not too much and catch up scenarios there wasn't any significant changes in restart, upgrade, catch up, just to make sure it still the same  ></body> </Action>
<Action id="29054" issue="18825" author="krw910" type="comment" created="2017-07-26 16:30:41.0" updateauthor="krw910" updated="2017-07-26 16:30:41.0"> <body><! CDATA This works just fine. A new ticket has been logged to remove the rights from a TGB role so only a Trustee can perform this operation.        ></body> </Action>
