<Action id="33295" issue="22881" author="gudkov" type="comment" created="2017-10-27 12:42:52.0" updateauthor="gudkov" updated="2017-10-27 12:42:52.0"> <body><! CDATA > that we have the latest State Proof  The proposed solution doesn't solve the problem of getting "latest" state. It only allows making sure that it is state proof for the concrete date. It causes the obvious problem for rarely updated pools. All received proofs will be too old to trust.  ></body> </Action>
<Action id="33298" issue="22881" author="ashcherbakov" type="comment" body="The issue with rarely updated pool can be solved by https://jira.hyperledger.org/browse/INDY-933 (so we update multi-signature every N seconds)" created="2017-10-27 12:49:57.0" updateauthor="ashcherbakov" updated="2017-10-27 14:45:29.0"/>
<Action id="33315" issue="22881" author="ashcherbakov" type="comment" body="Ok, it looks like initial PoAs already contained the same approach (https://docs.google.com/document/d/1WRkqNqXXi1LoVxZu0C353uR0KRatoQuvrV_UZNDuNcc/edit#heading=h.rte6ku9uqfb2), so it was just missed in the current implementation." created="2017-10-27 16:08:25.0" updateauthor="ashcherbakov" updated="2017-10-27 16:08:25.0"/>
<Action id="33357" issue="22881" author="ashcherbakov" type="comment" created="2017-10-30 10:23:04.0" updateauthor="ashcherbakov" updated="2017-10-31 15:41:52.0"> <body><! CDATA Changes: # BLS multi-signature is now calculated over the following array: {code} ledger_id, state_root_hash, pool_state_root_hash, txn_root_hash, timestamp {code} where ledger_id: id of the ledger multisig is created over state_root_hash: root hash (base58) of the state associated with ledger_id and multisig is created over pool_state_root_hash: root hash (base58) of pool state needed to anchor the state of Nodes participated in multisig txn_root_hash: root hash (base58) of the ledger associated with ledger_id and multisig is created over timestamp: timestamp of the state the multisig is created over  The value for multi-signature is calculated as msgpack serialized dict of fields above sorted in alphabetical order by keys  The Result sent to client with Replies is changed a bit to support this multi-component value: {code} {<txn-sepcific fields> 'txnTime': 1509351179, 'seqNo': 9, 'reqId': 1509351179375352,  'identifier': '4AdS22kC7xzb4bcqg9JATuCfAMNcQYcZa1u5eWzs6cSJ', 'state_proof': { 	'multi_signature': { 		'participants':  'Gamma', 'Alpha', 'Delta' , 		'signature': 'RZir972nhZqPNR2mrJRyQ8tUtQSEC13eFsAFfUAMdVsVm8gwSj7chkCVW7crZ8gzcTZKnmCsLzcY1BAyptVH3axYmtk1FrouSC9PfXmdv9bAfPogNDc99TPBMxUmH5BdiWtBqBhcdgDscw5XTpwXMh5kjHGVhZ8jtnoBRUnYXfY9Ry', 		'value': { 			'timestamp': 1509351179, 			'pool_state_root_hash': '7zzGLtFhgYU68z4qwbTr1edweRN1naz6u71tvUDC9UGt', 			'txn_root_hash': '8tXbYmhYrvA6x2y8murmpw5pe7h5tR2hkb1fCQ4bFLmi', 			'state_root_hash': 'DR95nhGqT7GbxPi7fwRGs63XnpAimQN7tJNu4724kCCr',  			'ledger_id': 1 		} 	}, 	'proof_nodes': '+QFn8qA8iiEKWlZYbpsQpBw7gY6e19O5Yu1n69WuD6iOGMdJU5DPjnsidHlwZSI6ImJ1eSJ9+QExgICg/z7X4Kbks98q5LZoyWKyB16vNhQmO8B36Onbz9aUaziAoOkwBIZQU6meTGpVGn8gnArmK4/3EBcfRUrcaECp7AjkoH+mTD6m9guPfJi1NRS/ycWzW7AjPZLjZ1LQLCKNVhrMoAlqV6pkrGYm21AhuCJuyfJq/HQP1kXXokX5iyh5mdzvgKApciTKL+FVdP39bxBwVFjVNGyKRwh1aiZWrJaQoMwTbKAQXABUnMiqhgZ4m6Gv+dlSexO95N2s5b+vXFL/ke8GoYCgcme6jpzxwHVqClrAwpHJY/tW+/TKU/NVtjhpUDaLYp2gCM3C41C+braaKFifLMlxc77kPNEax1pNXMj6HBeu+9aAoLahkK/Vnn+9MS9XBBoCnNJ9RrKGCllWQxYSIA3qAJgWgIA=',  	'root_hash': 'DR95nhGqT7GbxPi7fwRGs63XnpAimQN7tJNu4724kCCr' }, } {code} # Made a hotfix to not crash when incorrect value is passed to indy-crypto  PRs: - https://github.com/hyperledger/indy-plenum/pull/433 - https://github.com/hyperledger/indy-node/pull/425 - https://github.com/hyperledger/indy-plenum/pull/434  Build: - indy-node 1.2.192  New tickets: - Created IS-402 to support the changes in libindy - Created IS-403 to fix the problems with indy-crypto  Recommendations to QA: - Check that BLS feature still works as expected.  ></body> </Action>
<Action id="34577" issue="22881" author="ozheregelya" type="comment" created="2017-11-13 01:30:44.0" updateauthor="ozheregelya" updated="2017-11-13 01:30:44.0"> <body><! CDATA  ~ashcherbakov ,  ~VladimirWork   Regression testing of state proofs was performed on indy-node=1.2.208. Following cases were verified: * Reading and writing without configured bls keys (reading is possible when at least 2 of 5 nodes are active); * Reading and writing with configured bls keys (reading with only 1 client in the pool works without any errors); * Reading and writing with invalid bls keys (reading is possible when at least 2 of 5 nodes are active, but unclear messages appear if some nodes areÂ stopped); * Backward compatibility with the latest stable client (indy-node on client machine is 1.1.43-stable, indy-node on the pool is 1.2.208-master).  If it is enough for verification of this ticket, please move it to Done.  ></body> </Action>
