<Action id="30203" issue="20417" author="ashcherbakov" type="comment" created="2017-08-25 14:31:30.0" updateauthor="ashcherbakov" updated="2017-08-25 14:31:30.0"> <body><! CDATA We increased limits for max message length. Now it's 128 MB: https://github.com/hyperledger/indy-plenum/commit/1ba2d758d3fd0be92325ea223633584bb69d2552 It should fix the issues with load tests. However, we need to re-think whether this is a proper size, and re-think whether we implemented this limitation at a proper place.  ></body> </Action>
<Action id="30214" issue="20417" author="krw910" type="comment" body="Linked to INDY-756" created="2017-08-25 16:34:08.0" updateauthor="krw910" updated="2017-08-25 16:34:08.0"/>
<Action id="30215" issue="20417" author="krw910" type="comment" created="2017-08-25 16:37:29.0" updateauthor="krw910" updated="2017-08-25 16:37:41.0"> <body><! CDATA  ~ashcherbakov  ~nage  ~stevetolman  ~danielhardman  We need to limit incoming messages per source not as an overall total buffer size.  This relates to INDY-756 where we want to limit transaction size independent of the message size.   ></body> </Action>
<Action id="30250" issue="20417" author="ozheregelya" type="comment" created="2017-08-28 10:45:33.0" updateauthor="ozheregelya" updated="2017-08-28 10:45:33.0"> <body><! CDATA MSG_LEN_LIMIT=128MB was verified on following version: Build Info:   indy-node 1.0.111   indy-anoncreds 1.0.25   indy-plenum 1.0.97   sovrin 1.0.23 OS/Platform: Ubuntu 16.04.2 LTS Setup: performance pool (7 nodes, 4 clients)  python3 load_test.py --clients-list load_test_clients.list -t NYM -c 5 -r 100 --at-once was run on 4 clients at the same time. 2000 transactions were send without any problems.  ></body> </Action>
<Action id="30408" issue="20417" author="alexander.shekhovcov" type="comment" created="2017-08-31 12:45:20.0" updateauthor="alexander.shekhovcov" updated="2017-08-31 12:45:20.0"> <body><! CDATA (/) *Resolved:*  Split a batch on pieces during {{flushOutBoxes}} in case if the batch excesses the maximum allowed length. https://github.com/hyperledger/indy-plenum/pull/367  (i) *How to test:*  The command: {code} python3 load_test.py --clients-list load_test_clients.list -t NYM -c 10 -r 100 --at-once {code}  should not cause "InvalidMessageExceedingSizeException".    ></body> </Action>
<Action id="30475" issue="20417" author="ozheregelya" type="comment" created="2017-09-03 14:56:41.0" updateauthor="ozheregelya" updated="2017-09-03 15:20:20.0"> <body><! CDATA *Build Info:*   indy-node 1.1.130   indy-anoncreds 1.1.25   indy-plenum 1.1.121   sovrin 1.1.26 OS/Platform: Ubuntu 16.04.2 LTS Setup: 7 nodes, 4 clients  *Reason for Rejection:* Problem from one of comments INDY-25 (https://jira.hyperledger.org/browse/INDY-25?focusedCommentId=29369&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-29369) reproduces after this fix.  *Case 1:* Pre-conditions: Turn back limits to 128K on each node to disable Alex's changes https://jira.hyperledger.org/browse/INDY-765?focusedCommentId=30203&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-30203 1. sudo -iu sovrin 2. echo "MSG_LEN_LIMIT=128*1024" >> /home/sovrin/.sovrin/sovrin_config.py 3. systemctl restart sovrin-node 4. exit Steps to Reproduce: 1. Connect to the pool. 2. Set yourself as default Trustee. 3. Send ATTRIB transaction with long raw field (see attached file  ^length1.txt ). 4. Try to send NYM. => NYM was not send. 5. Exit the CLI.  *Actual Results:* Exception appear: {code:java} sovrin@test> exit Active wallet "Default" saved (/home/ubuntu/.sovrin/wallets/test/default.wallet) Goodbye. Traceback (most recent call last): File "/usr/local/bin/sovrin", line 78, in <module> run_cli() File "/usr/local/bin/sovrin", line 56, in run_cli looper.run(cli.shell(*commands)) File "/usr/local/lib/python3.5/dist-packages/stp_core/loop/looper.py", line 289, in __exit__ self.shutdownSync() File "/usr/local/lib/python3.5/dist-packages/stp_core/loop/looper.py", line 285, in shutdownSync self.loop.run_until_complete(self.shutdown()) File "/usr/lib/python3.5/asyncio/base_events.py", line 387, in run_until_complete return future.result() File "/usr/lib/python3.5/asyncio/futures.py", line 274, in result raise self._exception File "/usr/lib/python3.5/asyncio/tasks.py", line 239, in _step result = coro.send(None) File "/usr/local/lib/python3.5/dist-packages/stp_core/loop/looper.py", line 275, in shutdown await self.runFut File "/usr/lib/python3.5/asyncio/futures.py", line 363, in __iter__ return self.result() # May raise too. File "/usr/lib/python3.5/asyncio/futures.py", line 274, in result raise self._exception File "/usr/lib/python3.5/asyncio/tasks.py", line 239, in _step result = coro.send(None) File "/usr/local/lib/python3.5/dist-packages/stp_core/loop/looper.py", line 222, in runForever await self.runOnceNicely() File "/usr/local/lib/python3.5/dist-packages/stp_core/loop/looper.py", line 205, in runOnceNicely msgsProcessed = await self.prodAllOnce() File "/usr/local/lib/python3.5/dist-packages/stp_core/loop/looper.py", line 150, in prodAllOnce s += await n.prod(limit) File "/usr/local/lib/python3.5/dist-packages/sovrin_client/client/client.py", line 179, in prod s = await super().prod(limit) File "/usr/local/lib/python3.5/dist-packages/plenum/client/client.py", line 244, in prod s = await self.nodestack.service(limit) File "/usr/local/lib/python3.5/dist-packages/stp_zmq/kit_zstack.py", line 108, in service c = await super().service(limit) File "/usr/local/lib/python3.5/dist-packages/stp_zmq/zstack.py", line 441, in service return self.processReceived(pracLimit) File "/usr/local/lib/python3.5/dist-packages/stp_zmq/zstack.py", line 551, in processReceived self.msgHandler((msg, frm)) File "/usr/local/lib/python3.5/dist-packages/sovrin_client/client/client.py", line 102, in handleOneNodeMsg super().handleOneNodeMsg(wrappedMsg, excludeFromCli) File "/usr/local/lib/python3.5/dist-packages/plenum/client/client.py", line 314, in handleOneNodeMsg self.reqRepStore.addReject(msg, frm) File "/usr/local/lib/python3.5/dist-packages/plenum/persistence/client_req_rep_store_file.py", line 72, in addReject self.delimiter, reason)) File "/usr/local/lib/python3.5/dist-packages/storage/directory_store.py", line 44, in appendToValue with open(self.keyFilePath(key), mode="a+") as f: IsADirectoryError:  Errno 21  Is a directory: '/home/ubuntu/.sovrin/data/clients/AXfp1PZK9KdSSj9GyJGwwnXUxmTystHLCgMydrMhRVN6/Requests/'{code}    *Expected Results:* CLI should not be broken.  Additional Information: Logs are not attached due to large size. You can see them on the performance pool machines (Nodes 1 - 7, Clients 3 and 4).  *Case 2:* Sending lots of NYMs using load_test was also verified. Running  python3 load_test.py --clients-list load_test_clients.list -t NYM -c 10 -r 100 --at-once on 3 client at the same time worked without any issues.  ></body> </Action>
<Action id="30486" issue="20417" author="dsurnin" type="comment" created="2017-09-04 12:32:04.0" updateauthor="dsurnin" updated="2017-09-04 12:32:04.0"> <body><! CDATA I tested this case locally and it works.  for the moment parameter MSG_LEN_LIMIT is stored in config. in case client and node are run on different machines the configs are different. if node's MSG_LEN_LIMIT is smaller than client's MSG_LEN_LIMIT it is possible that client can send big txn but node silently ignore it and client does not receive any response - just waits. also it leads to crash on exit since connection still opened.     ></body> </Action>
<Action id="30488" issue="20417" author="mzk-vct" type="comment" body="Here is a new ticket created for the problem discussed in previous two comments https://jira.hyperledger.org/browse/INDY-805" created="2017-09-04 12:42:24.0" updateauthor="mzk-vct" updated="2017-09-04 12:42:24.0"/>
<Action id="30499" issue="20417" author="ozheregelya" type="comment" body="Need to revert Alex&apos;s changes: https://jira.hyperledger.org/browse/INDY-765?focusedCommentId=30203&amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-30203" created="2017-09-05 11:31:08.0" updateauthor="ozheregelya" updated="2017-09-05 11:31:08.0"/>
<Action id="30502" issue="20417" author="ozheregelya" type="comment" body="Sending of large transactions using CLI and sending lots of transactions using load_test.py by different clients work correctly with changed limitation on client." created="2017-09-05 12:08:57.0" updateauthor="ozheregelya" updated="2017-09-05 12:08:57.0"/>
<Action id="30670" issue="20417" author="andrey.goncharov" type="comment" created="2017-09-08 10:12:32.0" updateauthor="andrey.goncharov" updated="2017-09-08 10:12:32.0"> <body><! CDATA Fixed in  https://github.com/hyperledger/indy-plenum/commit/c37e8358f02cf438ec12ec1a2e5fa15d28a4501a   indy-plenum 1.1.123  ></body> </Action>
<Action id="30674" issue="20417" author="ozheregelya" type="comment" created="2017-09-08 11:40:37.0" updateauthor="ozheregelya" updated="2017-09-08 11:40:37.0"> <body><! CDATA New limit was verified on following build (RC): indy-plenum= 1.1.25 indy-anoncreds= 1.0.10 indy-node= 1.1.35 sovrin= 1.1.6  ></body> </Action>
<Action id="30819" issue="20417" author="danielhardman" type="comment" created="2017-09-13 14:28:14.0" updateauthor="danielhardman" updated="2017-09-13 14:28:14.0"> <body><! CDATA I need some clarification about what was implemented: # Did we make it so the max size of a message is a per-message limit? Or is it a per-batch limit? Or a per-zmq-queue limit? # Is there still a MSG_LEN_LIMIT config option?  ></body> </Action>
<Action id="30820" issue="20417" author="danielhardman" type="comment" body=" ~andrey.goncharov  After answering the questions above, you can set the status back to Customer Validation and assign back to me..." created="2017-09-13 14:29:05.0" updateauthor="danielhardman" updated="2017-09-13 14:29:05.0"/>
<Action id="30823" issue="20417" author="mzk-vct" type="comment" created="2017-09-13 14:50:51.0" updateauthor="mzk-vct" updated="2017-09-13 14:50:51.0"> <body><! CDATA  ~danielhardman  # It is both per-message and per-batch since batch is actually a message type.  However batch has special logic for creation, if it's too large then it's split on smaller batches. # Yes, there is a MSG_LEN_LIMIT, its default value is 128kb. # In addition to this in ticket https://jira.hyperledger.org/browse/INDY-756  ~dsurnin  implemented size limitation by transaction type. It discards requests which are too large for their type.        ></body> </Action>
