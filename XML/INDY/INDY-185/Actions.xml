<Action id="25840" issue="17663" author="lovesh" type="comment" body="Our current calculation is *f = floor(n-1/3)* so when you demote a node, n becomes 6 and f becomes 1, our write quorums size is equal to *2f+1* which turns out to be 3 and hence the transaction succeeds since you have 4 nodes after 2 more crash. This problem is not particularly severe transactions since failures are not stopping the transactions. The fundamental problem with such calculation is that quorums don&apos;t intersect, so you have 6 nodes and write quorum size is 3 so you have 2 non-intersecting quorums, also a client can do reads from *f+1* which is 2 and still miss every node from a write quorum of *2f+1* which is 3 nodes, the way to solve is to use write quorum {n-f | n-f &gt;=2f+1}" created="2017-06-09 12:25:07.0" updateauthor="lovesh" updated="2017-06-09 12:28:10.0"/>
<Action id="26369" issue="17663" author="ashcherbakov" type="comment" body=" ~lovesh  Should we ask BFT community about this?" created="2017-06-15 08:17:33.0" updateauthor="ashcherbakov" updated="2017-06-15 08:17:33.0"/>
<Action id="26560" issue="17663" author="lovesh" type="comment" created="2017-06-16 14:47:02.0" updateauthor="lovesh" updated="2017-06-19 11:20:42.0"> <body><! CDATA I asked folks from hyperledger fabric, they pointed me to https://github.com/hyperledger/fabric/blob/v0.6/consensus/pbft/pbft-core.go#L460-L470 and they use *(n+f+2)/2* for prepared (including PRE-PREPARE) and committed quorum and *n-f* for view change quorum, so every correct node *(n-f)* should be part of view change but only correct node *(f+1)* needs to see each phase of the 3 phase commit. This is how you come to *(n+f+2)/2*: a byzantine quorum *q* needs to satisfy correctness so every quorum needs to intersect in 1 correct replica, thus *2q > n+f => (n+f)/2 < q*, so minimum value of *q* is *(n+f)/2 + 1* or *(n+f+2)/2*   ></body> </Action>
<Action id="26727" issue="17663" author="ashcherbakov" type="comment" body=" ~lovesh  Do we have an answer from  RFBT authors?" created="2017-06-19 12:51:45.0" updateauthor="ashcherbakov" updated="2017-06-19 12:51:45.0"/>
<Action id="26738" issue="17663" author="ashcherbakov" type="comment" body=" ~lovesh   ~alexander.shekhovcov  Regardless of what the final values for consensus will be, let&apos;s make sure that we have single places in code where these consensuses are specified for each of the case, so that we can change it easily." created="2017-06-19 13:58:37.0" updateauthor="ashcherbakov" updated="2017-06-19 13:58:37.0"/>
<Action id="26742" issue="17663" author="lovesh" type="comment" body=" ~alexander.shekhovcov  No, we don;t have an answer from RFBT authors." created="2017-06-19 14:17:11.0" updateauthor="lovesh" updated="2017-06-19 14:17:11.0"/>
<Action id="26830" issue="17663" author="alexander.shekhovcov" type="comment" created="2017-06-20 09:44:35.0" updateauthor="alexander.shekhovcov" updated="2017-06-20 09:50:06.0"> <body><! CDATA The current quorums: * PROPAGATE quorum *> f + 1* * PREPARE quorum *>= 2 * f* * COMMIT quorum *>= 2 * f + 1* * REPLY quorum *>= f + 1*  The PROPAGATE quorum has strict "> f + 1"  From "RBFT: Redundant Byzantine Fault Tolerance" {quote}*When a node receives f + 1 PROPAGATE* *messages for a given request, the request is ready to be* *given to the replicas of the f + 1 protocol instances running* *locally, for ordering.* {quote} Should we use also greater or equal?  ></body> </Action>
<Action id="26831" issue="17663" author="ashcherbakov" type="comment" created="2017-06-20 09:52:24.0" updateauthor="ashcherbakov" updated="2017-06-20 09:52:24.0"> <body><! CDATA From Lovesh: lovesh  9:30 PM   @alexander.shcherbakov I have got answer from RBFT's author and he is supportive of using n-f but i have asked him a followup question on using n+f+2/2, i will tell you when he replies to that.   ></body> </Action>
<Action id="26857" issue="17663" author="ashcherbakov" type="comment" created="2017-06-20 15:07:45.0" updateauthor="ashcherbakov" updated="2017-06-20 15:07:45.0"> <body><! CDATA Items from ART meeting with a suggestion how to proceed with the task: - enumerate the places where this needs to change (some of which will not be obvious -- the calculation may be done differently in different places -- perhaps switch to using the “do we have quorum?” functions). We need one module where we define what the thresholds are. - use n-f for a quorum of PREPARES and COMMITS - use n-f for a quorum for View Change (INSTANCE_CHANGE) - discuss (n+f+2)/2 for prepared and committed quorum and n-f quorum for view changes.   ></body> </Action>
<Action id="27256" issue="17663" author="alexander.shekhovcov" type="comment" created="2017-06-23 11:21:19.0" updateauthor="alexander.shekhovcov" updated="2017-06-23 11:21:19.0"> <body><! CDATA *(/)*  *Problem reason:* - 6-nodes pool with 2 malicious is able to get consensus because 2*f+1=3 for N=6   *Changes:* - set the commit quorum (write consensus) N-f  *Committed into:*  https://github.com/evernym/plenum/pull/224  *Risk:* Medium  *Covered with tests:*  test_6_nodes_pool_cannot_reach_quorum_with_2_faulty  *Recommendations for QA:* Steps: # a 6 nodes pool is running # stop 2 non primary nodes # check the pool does not process transactions        ></body> </Action>
<Action id="27390" issue="17663" author="krw910" type="comment" created="2017-06-26 20:23:55.0" updateauthor="krw910" updated="2017-06-26 20:23:55.0"> <body><! CDATA I verified this ticket using 7 nodes. We followed the formula. On writes we needed 2f+1 and on the reads we needed f+1.     So with 7 nodes we needed 5 good nodes to do any writes and 3 good nodes to do any reads.  ></body> </Action>
<Action id="28085" issue="17663" author="ashcherbakov" type="comment" created="2017-07-10 12:06:36.0" updateauthor="ashcherbakov" updated="2017-07-10 12:06:36.0"> <body><! CDATA The issue was re-opened since QA reported that 4 of 6 nodes could come to a write consensus (however n-f is 5).   *Problem reason:* - Could not reproduced the issue. - QA couldn't reproduce it as well - All related tests pass - However, found out that not all tests used correct values for consensus. Some of the tests still used old values (2f+1, etc.)  *Changes:* - Updates the tests to use correct values for consensus in all places - Added more tests - Moved catch-up-related quroum values (ledger_status, consistency_proof, etc.) into `quorums.py` (a common place for all quorums)  *Committed into:*  https://github.com/hyperledger/indy-plenum/pull/260  *Risk:* Low  *Covered with tests:*   test_quorum_disconnected.py|https://github.com/hyperledger/indy-plenum/pull/260/files#diff-afd973ef3aa5d2b26d79bfe2a41d6897    test_num_prepare_with_2_of_6_faulty.py|https://github.com/hyperledger/indy-plenum/pull/260/files#diff-6adb16b24a1fcba1dd48232a7c2b4f41    test_num_commit_with_2_of_6_faulty.py|https://github.com/hyperledger/indy-plenum/pull/260/files#diff-052d8d02b8bf538bbddcbb490a61536c    test_quorum_faulty.py|https://github.com/hyperledger/indy-plenum/pull/260/files#diff-a48b48e51a20ee4d0608a88bc910c411         ></body> </Action>
<Action id="28337" issue="17663" author="aleksey-roldugin" type="comment" created="2017-07-13 18:47:31.0" updateauthor="aleksey-roldugin" updated="2017-07-13 18:47:31.0"> <body><! CDATA h6. BUILD  repository master sovrin 0.2.9 sovrin-client 0.4.26 h6. CASE 1  Verification: # Setup a pool of 7 nodes. # Demote a node. # Stop 2 nodes. # Try to send a NYM.  Result:  NYM is not added. h6. CASE 2  Verification: # 6 nodes pool is running. # Stop 2 non primary nodes. # Check the pool does not process transactions.  Result:  Pool does not process transactions. h6. Additional information  Both cases were also verified on some previous versions.  ></body> </Action>
