<Issue id="42685" key="INDY-2243" number="2243" project="10303" reporter="donqui" creator="donqui" type="10002" summary="Change the way we handle messages coming from removed remotes" priority="3" status="10200" created="2019-10-09 08:38:05.0" updated="2019-10-09 15:18:35.0" votes="0" watches="1" workflowId="55762"> <description><! CDATA *Problem description*  When a node is demoted it still has a established zmq connection to all other nodes. If a connection to one or more nodes is lost demoted node tries to reconnect but never manages to confirm that the connection is really established. This is because it does not receive *pongs* for his *pings* as other nodes do not respond to messages from the demoted nodes (they are dropped in batched.py). As the demoted node does not receive the pong for it's ping it assumes that it was a network issue and tries to reconnect indefinitely.  This leads to: # Unnecessary traffic because of constant pings sent by the demoted node in a desperate attempt to reconnect to the lost remote (nodes that do not get pongs try to ping forever) # CPU cycles spent on handling these messages by the participating nodes (nodes are acting on the ping and generating a pong that is being dropped by batched.py) # Logs constantly getting filled by lines saying that we got a message from a node that for some reason is no longer participating in the pool (Node has removed rid)  Snippets of logs showing this behaviour are bellow:  *Node3 (demoted node):* {code:bash} $ tail -f /var/log/indy/sandbox/Node3.log 2019-10-08 13:12:44,048|DEBUG|node.py|Node3 sending message MESSAGE_REQUEST{'params': {'ledgerId': 0}, 'msg_type': 'LEDGER_STATUS'} to 2 recipients:  'Node2', 'Node1'  2019-10-08 13:12:44,049|TRACE|batched.py|Node3 sending msg b'{"op":"MESSAGE_REQUEST","params":{"ledgerId":0},"msg_type":"LEDGER_STATUS"}' to Node2 2019-10-08 13:12:44,049|TRACE|zstack.py|Node3 transmitting message b'{"op":"MESSAGE_REQUEST","params":{"ledgerId":0},"msg_type":"LEDGER_STATUS"}' to Node2 by socket 178 46152880 2019-10-08 13:12:44,050|WARNING|zstack.py|Remote Node2 is not connected - message will not be sent immediately.If this problem does not resolve itself - check your firewall settings 2019-10-08 13:12:44,050|TRACE|batched.py|Node3 sending msg b'{"op":"MESSAGE_REQUEST","params":{"ledgerId":0},"msg_type":"LEDGER_STATUS"}' to Node1 2019-10-08 13:12:44,050|TRACE|zstack.py|Node3 transmitting message b'{"op":"MESSAGE_REQUEST","params":{"ledgerId":0},"msg_type":"LEDGER_STATUS"}' to Node1 by socket 184 46220592 2019-10-08 13:12:44,050|WARNING|zstack.py|Remote Node1 is not connected - message will not be sent immediately.If this problem does not resolve itself - check your firewall settings 2019-10-08 13:12:45,772|DEBUG|kit_zstack.py|Node3 matched remote Node4 HA(host='10.0.0.5', port=9707) 2019-10-08 13:12:45,772|DEBUG|kit_zstack.py|Node3 matched remote Node2 HA(host='10.0.0.3', port=9703) 2019-10-08 13:12:45,772|DEBUG|kit_zstack.py|Node3 matched remote Node1 HA(host='10.0.0.2', port=9701) 2019-10-08 13:12:45,773|DEBUG|zstack.py|Node3 pinged Node2 2019-10-08 13:12:45,773|DEBUG|zstack.py|Node3 pinged Node1 2019-10-08 13:12:45,774|TRACE|kit_zstack.py|Node3 next check for retries in 2.00 seconds 2019-10-08 13:12:45,789|TRACE|batched.py|Node3 sending msg b'pi' to Node2 2019-10-08 13:12:45,789|TRACE|zstack.py|Node3 transmitting message b'pi' to Node2 by socket 178 46152880 2019-10-08 13:12:45,791|TRACE|batched.py|Node3 sending msg b'pi' to Node1 2019-10-08 13:12:45,792|TRACE|zstack.py|Node3 transmitting message b'pi' to Node1 by socket 184 46220592 {code}  *Node1 (participating node):* {code:bash} $ tail -f /var/log/indy/sandbox/Node1.log | grep 'removed rid' 2019-10-08 13:10:55,422|WARNING|batched.py|CONNECTION: Node1 has removed rid 6KTs7Q9Lng5uX6oWCkVifiJ6hSpkdHiRijAsXtAunnGN 2019-10-08 13:10:57,424|WARNING|batched.py|CONNECTION: Node1 has removed rid 6KTs7Q9Lng5uX6oWCkVifiJ6hSpkdHiRijAsXtAunnGN 2019-10-08 13:10:59,483|WARNING|batched.py|CONNECTION: Node1 has removed rid 6KTs7Q9Lng5uX6oWCkVifiJ6hSpkdHiRijAsXtAunnGN 2019-10-08 13:11:01,455|WARNING|batched.py|CONNECTION: Node1 has removed rid 6KTs7Q9Lng5uX6oWCkVifiJ6hSpkdHiRijAsXtAunnGN 2019-10-08 13:11:03,457|WARNING|batched.py|CONNECTION: Node1 has removed rid 6KTs7Q9Lng5uX6oWCkVifiJ6hSpkdHiRijAsXtAunnGN {code}  *Node2 (participating node):* {code:bash} $ tail -f /var/log/indy/sandbox/Node2.log 2019-10-08 13:13:29,949|TRACE|zstack.py|Node2 got ping from 6KTs7Q9Lng5uX6oWCkVifiJ6hSpkdHiRijAsXtAunnGN 2019-10-08 13:13:29,949|DEBUG|zstack.py|Node2 ponged 6KTs7Q9Lng5uX6oWCkVifiJ6hSpkdHiRijAsXtAunnGN 2019-10-08 13:13:29,950|WARNING|batched.py|CONNECTION: Node2 has removed rid 6KTs7Q9Lng5uX6oWCkVifiJ6hSpkdHiRijAsXtAunnGN 2019-10-08 13:13:29,951|DEBUG|message_processor.py|Node2 discarding message deque( b'po' ) because CONNECTION: rid 6KTs7Q9Lng5uX6oWCkVifiJ6hSpkdHiRijAsXtAunnGN no longer available 2019-10-08 13:13:30,842|TRACE|has_action_queue.py|Node2 running action flush_metrics with id 879 2019-10-08 13:13:30,843|TRACE|has_action_queue.py|Node2 scheduling action flush_metrics with id 882 to run in 10.0 seconds 2019-10-08 13:13:30,843|TRACE|has_action_queue.py|Node2 running action checkPerformance with id 878 2019-10-08 13:13:30,843|TRACE|node.py|Node2 checking its performance 2019-10-08 13:13:30,843|TRACE|node.py|Node2 ordered no new requests 2019-10-08 13:13:30,844|TRACE|has_action_queue.py|Node2 scheduling action checkPerformance with id 883 to run in 10 seconds 2019-10-08 13:13:31,242|DEBUG|kit_zstack.py|Node2 matched remote Node1 HA(host='10.0.0.2', port=9701) 2019-10-08 13:13:31,243|DEBUG|kit_zstack.py|Node2 matched remote Node4 HA(host='10.0.0.5', port=9707) 2019-10-08 13:13:31,243|TRACE|kit_zstack.py|Node2 next check for retries in 2.00 seconds 2019-10-08 13:13:32,007|TRACE|zstack.py|Node2 got 1 messages through listener 2019-10-08 13:13:32,008|TRACE|zstack.py|Node2 got ping from 6KTs7Q9Lng5uX6oWCkVifiJ6hSpkdHiRijAsXtAunnGN 2019-10-08 13:13:32,008|DEBUG|zstack.py|Node2 ponged 6KTs7Q9Lng5uX6oWCkVifiJ6hSpkdHiRijAsXtAunnGN 2019-10-08 13:13:32,009|WARNING|batched.py|CONNECTION: Node2 has removed rid 6KTs7Q9Lng5uX6oWCkVifiJ6hSpkdHiRijAsXtAunnGN 2019-10-08 13:13:32,009|DEBUG|message_processor.py|Node2 discarding message deque( b'po' ) because CONNECTION: rid 6KTs7Q9Lng5uX6oWCkVifiJ6hSpkdHiRijAsXtAunnGN no longer available {code}   *Proposed Solution* # Move the ping-pong handling logic to a higher part of the stack where we have the knowledge of an exact status of a node that is communicating with us - now it is handled by zstack. This way we can know if a node trying to connect is demoted, malicious, or something else and act accordingly. # Log IP addresses, content and other valuable information of requests coming from nodes that should not be communicating with the pool. This will allow for automation of the blacklisting process (fail2ban), and better better understanding of the problems. # Respond with a special message (poison pill) to demoted/removed nodes that will tell them `You cannot participate in the pool, please shut-down`. After the promotion the node can be started, establish the connection, catch-up, and start participating in the network.  *Acceptance Criteria* * Nodes receiving the requests should not act on the messages but should instead drop them immediately. * Nodes that are trying to reconnect to the pool which they are not a part of any-more should not do that indefinitely. * Change the log messages so that they contain good descriptions of the problem. This will help operators in identifying and understanding the problem. * Change the documentation for the promotion/demotion process  ></description> </Issue>
