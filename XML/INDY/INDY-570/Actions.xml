<Action id="37678" issue="19758" author="sergey-shilov" type="comment" created="2017-12-20 15:04:47.0" updateauthor="sergey-shilov" updated="2017-12-20 16:51:16.0"> <body><! CDATA  ~avkrishnan   ~ashcherbakov   ~danielhardman   ~andkononykhin   Hi all,  sending of FIN segment (i.e. "graceful shutdown") is not a proper way of initiation of termination of TCP connection from the server side. The FIN segment is sent when close() is called without any additional flags set for socket, but in this case the kernel holds this socket about 2 minutes in TIME_WAIT state. This is not acceptable for the server side. Proper way of termination of TCP connection from the server side is to send RST segment instead of FIN segment. Such segment is sent when close() is called for socket for which SO_LINGER socket option is set with timeout 0. In this case: - the kernel drops corresponding socket structure immediately; - the client is informed that the server side does not longer expect any TCP segments from this client.  So now I'm looking for any mechanisms that ZMQ provides to achieve such behaviour, further steps depend on it.  ></body> </Action>
<Action id="37727" issue="19758" author="sergey-shilov" type="comment" created="2017-12-21 17:11:27.0" updateauthor="sergey-shilov" updated="2017-12-21 17:11:27.0"> <body><! CDATA  ~lovesh   ~avkrishnan   ~ashcherbakov   ~andkononykhin   Hi all,  today we discussed ZMQ issue and summarised our current knowledge, so we propose the following roadmap to solve it: # try to find ZMQ API that allows to terminate client connections from the server side, if not then # take a look at ZMQ code whether there is some undocumented features to do that, if there is not then # propose own patch to ZMQ developers to do that if these changes are not so big, if not then # prepare our vision of dividing of node process into 3 processes where node-to-node communication and node-to-client communication are separated processes (mid term solution proposed by  ~lovesh ), but in this case we still need possibility to control client connections from the server side.  ></body> </Action>
<Action id="37801" issue="19758" author="sergey-shilov" type="comment" created="2017-12-26 16:56:31.0" updateauthor="sergey-shilov" updated="2017-12-26 16:56:31.0"> <body><! CDATA Seems like there is no any ZMQ API to track and close clients connections from the server side using ZMQ_ROUTER socket, so I've created an issue for libzmq:  https://github.com/zeromq/libzmq/issues/2877  ></body> </Action>
<Action id="38346" issue="19758" author="sergey-shilov" type="comment" created="2018-01-09 16:45:25.0" updateauthor="sergey-shilov" updated="2018-01-09 16:52:57.0"> <body><! CDATA  ~lovesh   ~avkrishnan   ~danielhardman   ~ashcherbakov   ~andkononykhin   ~nage   ~tharmon   ~mgbailey   ~gudkov   Hi all,  my investigation showed that there is no any ZMQ API to track and close clients connections from the server side. Also there is no way to tell ZMQ to accept no more than N incoming connections per port. I've created an issue for libzmq:  https://github.com/zeromq/libzmq/issues/2877  and the answer from ZMQ guys was "use firewall and authentication".  For now we have authentication, it allows to: - terminate client connection in case of failed authentication; - terminate client connection after handshake timeout (ZMQ_HANDSHAKE_IVL) if some client initiates TCP connection and then becomes silent.  But we have not firewall. As a firewall we can use iptables to limit number of sumultaneous connections per port. Corresponding iptables rule may be added manually by steward or automatically by install script. The questions here is what max number of sumultaneous connections should be specified? Just to remind: the main problem of non-limited number of clients connections is situation when we can not open some file as the limit of opened file descriptors is reached. The main point here is that we always should have ability to open files that are necessary for node functionality. So I propose the following solution:   1. calculate approximate number of file descriptors needed to open local files, DBs etc. (F)   2. calculate approximate number of file descriptors needed for communication with other nodes (N)   3. define some window, i.e. some number of spare file descriptors as two steps above calculate file descriptors approximately (W)   4. now we can calculate max number of clients connections (X): X = LimitNOFILE - (F + N + W)  Described solution is short term solution.  Mid term solution is to divide the single process node into 3 processes (as proposed by Lovesh):   1. node-to-node communication   2. node-to-client communication   3. all other node logic but it looks like we need iptables here too.  ></body> </Action>
<Action id="38418" issue="19758" author="ashcherbakov" type="comment" created="2018-01-11 08:16:10.0" updateauthor="ashcherbakov" updated="2018-01-11 08:16:10.0"> <body><! CDATA Although ZMQ works good for Node-to-Node communication, it looks like it's not the best choice for Node-to-Client communication because of ZMQ limitations. So, we propose the following: 1) use firewall (iptables) as a short-term hotfix; 2) get rid of ZMQ as Node-to-Client solution and use something else. As an option, we can consider a similar approach as for Agent-to-Agemt communication in libindy (use `authcrypt` and any transport, for instance pure http).   ></body> </Action>
<Action id="38426" issue="19758" author="ashcherbakov" type="comment" body="Created INDY-1087 and INDY-1085 to address the items above" created="2018-01-11 12:41:24.0" updateauthor="ashcherbakov" updated="2018-01-11 12:41:24.0"/>
