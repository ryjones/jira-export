<Action id="61484" issue="40927" author="vladimirwork" type="comment" created="2019-07-05 12:16:55.0" updateauthor="vladimirwork" updated="2019-07-05 12:16:55.0"> <body><! CDATA The issue reproduces against Persistent AWS pool only (both for 1.1.45 and 1.1.49 sovrin). The same case against Load AWS pool (clear ledger and without upgrade sequence) returns no errors (both for 1.1.46 and 1.1.49 sovrin).  ></body> </Action>
<Action id="61489" issue="40927" author="toktar" type="comment" created="2019-07-05 15:11:14.0" updateauthor="toktar" updated="2019-07-08 08:10:12.0"> <body><! CDATA *PoA:* * Add  to ZStack.open() {code:java} self.listener.setsockopt(zmq.ROUTER_MANDATORY, 1){code}  * Rename _transmitThroughListener_ to __transmit_one_msg_through_listener_ ** _add a catching of zmq.Again and zmq.ZMQError(with 113 code)_ ** _add parameter need_to_resend to method reply_ * Add the method _transmitThroughListener_ which will ** store a new message in the __pending___client___messages_ dictionary _remoteName  ->_ (last_update_ts, List  msg  ) ** do __transmit_one_msg_through_listener()_ for every message for  _remoteName_ from the  _ _pending___client___messages_  ** remove every sent message from the dictionary, if it doesn't need re-sending * Add waiting messages re-sending by schedule every RESEND_CLIENT_MSG_TIMOUT via QueueTimer * Add removing of old messages from __pending___client___messages_ by REMOVE_CLIENT_MSG_TIMOUT for every client messages sending  * Limit size of __pending___client___messages_ by constant PENDING_CLIENT_MESSAGES_LIMIT * Limit size of the list of messages in value from __pending___client___messages_ by constant PENDING_MESSAGES_FOR_ONE_CLIENT_LIMIT * Add unit tests  ></body> </Action>
<Action id="61893" issue="40927" author="toktar" type="comment" body="PR:  https://github.com/hyperledger/indy-plenum/pull/1260 " created="2019-07-17 07:36:06.0" updateauthor="toktar" updated="2019-07-17 07:36:06.0"/>
<Action id="61911" issue="40927" author="vladimirwork" type="comment" created="2019-07-17 13:38:42.0" updateauthor="vladimirwork" updated="2019-07-17 13:59:41.0"> <body><! CDATA Testing PoA:  1. Check fix against 7~11 nodes docker pool with traffic shaping tool simulating bad network. 2. Check fix against Persistent AWS pool (extracted from the latest backup and manually upgraded to master). 3. Get actual builder net / staging net genesis txns and valid DID and check fix against any of this pools. 4. Explore issue with successful and unsuccessful responses after pool restart (if initial issue will be reproduced in scope of previous steps).  ></body> </Action>
<Action id="61914" issue="40927" author="toktar" type="comment" created="2019-07-17 14:19:51.0" updateauthor="toktar" updated="2019-07-17 14:54:24.0"> <body><! CDATA *Problem reason:* - When a node sends a message to unknown client, the message will be skipped without any exceptions.  *Changes:* - Messages that have not been sent are sent later with other messages for this client.  *PR:* *  https://github.com/hyperledger/indy-node/pull/1382  *  https://github.com/hyperledger/indy-plenum/pull/1260   *Version:* * indy-node 1.9.1030 -master * (indy-plenum 1.9.843 -master)  *Risk factors:* - Messages for a client will not be sent.  *Risk:* - Medium  *Test:* *  test_send_client_msgs_with_delay_reqs.py|https://github.com/hyperledger/indy-plenum/pull/1260/files#diff-72ea619b115b8f258e236251093d03b0   *  test_stashed_client_messages.py|https://github.com/hyperledger/indy-plenum/pull/1260/files#diff-b7fd8e10b3f29bccc881665051168d87    *Recommendations for QA:* * Start a docker pool with 4 nodes * Block traffic between Node2, Node3, Node4 and a client * Send invalid request which shouldn't pass a dynamic validation. * Unblock traffic between Node2 and client * Send valid request. * Check that the client get the quorum(2) of rejects. * Check that the client received a reply for the second request  ></body> </Action>
<Action id="62034" issue="40927" author="vladimirwork" type="comment" created="2019-07-23 10:09:53.0" updateauthor="vladimirwork" updated="2019-07-23 10:09:53.0"> <body><! CDATA Build Info: indy-node 1.9.0~1034  Steps to Validate: 1. Start a docker pool with 4 nodes. 2. Block traffic between Node2, Node3, Node4 and a client. 3. Send invalid request which shouldn't pass a dynamic validation. 4. Unblock traffic between Node2 and client. 5. Send valid request.  Actual Results: Client receives reject and reply for 1st and 2nd request respectively.  Additional Info: Case is also verified against persistent AWS pool (where the issue was found).  ></body> </Action>
