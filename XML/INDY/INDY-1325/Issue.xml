<Issue id="30159" key="INDY-1325" number="1325" project="10303" reporter="trthhrtz" creator="trthhrtz" type="10004" summary="ledger.build_schema_request requires extra params" priority="3" resolution="10000" status="10001" created="2018-05-13 17:21:29.0" updated="2019-03-29 20:34:46.0" resolutiondate="2019-03-29 20:34:46.0" votes="0" watches="1" workflowId="30166"> <description><! CDATA   {code:java} # 1. print_log('\n1. Creates a new local pool ledger configuration that is used ' 'later when connecting to ledger.\n') pool_config = json.dumps({'genesis_txn': genesis_file_path}) try: await pool.create_pool_ledger_config(config_name=pool_name, config=pool_config) except Exception: await pool.delete_pool_ledger_config(config_name=pool_name) await pool.create_pool_ledger_config(config_name=pool_name, config=pool_config) # 2. print_log('\n2. Open pool ledger and get handle from libindy\n') pool_handle = await pool.open_pool_ledger(config_name=pool_name, config=None)  # 3. print_log('\n3. Creating new secure wallet\n') try: await wallet.create_wallet(pool_name, wallet_name, None, None, None) except: await wallet.delete_wallet(wallet_name, None) await wallet.create_wallet(pool_name, wallet_name, None, None, None)  # 4. print_log('\n4. Open wallet and get handle from libindy\n') wallet_handle = await wallet.open_wallet(wallet_name, None, None)  # 5. print_log('\n5. Generating and storing steward DID and verkey\n') steward_seed = '000000000000000000000000Steward1' did_json = json.dumps({'seed': steward_seed}) steward_did, steward_verkey = await signus.create_and_store_my_did(wallet_handle, did_json) print_log('Steward DID: ', steward_did) print_log('Steward Verkey: ', steward_verkey)  # 6. print_log('\n6. Generating and storing trust anchor DID and verkey\n') trust_anchor_did, trust_anchor_verkey = await signus.create_and_store_my_did(wallet_handle, "{}") print_log('Trust anchor DID: ', trust_anchor_did) print_log('Trust anchor Verkey: ', trust_anchor_verkey)  # 7. print_log('\n7. Building NYM request to add Trust Anchor to the ledger\n') nym_transaction_request = await ledger.build_nym_request(submitter_did=steward_did, target_did=trust_anchor_did, ver_key=trust_anchor_verkey, alias=None, role='TRUST_ANCHOR') print_log('NYM transaction request: ') pprint.pprint(json.loads(nym_transaction_request))  # 8. print_log('\n8. Sending NYM request to the ledger\n') nym_transaction_response = await ledger.sign_and_submit_request(pool_handle=pool_handle, wallet_handle=wallet_handle, submitter_did=steward_did, request_json=nym_transaction_request) print_log('NYM transaction response: ') pprint.pprint(json.loads(nym_transaction_response))  # 9. print_log('\n9. Build the SCHEMA request to add new schema to the ledger as a Steward\n') seq_no = 1 schema = { 'seqNo': seq_no, 'dest': steward_did, 'data': { 'name': 'gvt', 'version': '1.0', 'attr_names':  'age', 'sex', 'height', 'name'  } } schema_data = schema 'data'  print_log('Schema data: ') pprint.pprint(schema_data) print_log('Schema: ') pprint.pprint(schema) schema_request = await ledger.build_schema_request(steward_did, json.dumps(schema_data)) {code} The last line will raise {code:java} _indy_loop_callback: Function returned error 113 Error occurred: ErrorCode.CommonInvalidStructure {code} However, if you substitute the schema to:  {code:java} schema = { 'seqNo': seq_no, 'dest': steward_did, 'data': { "id": "1", "name": "gvt", "version": "1.0", "attrNames":  "age", "sex", "height", "name" , "ver": "1.0" } } {code} It works.  According to the docs (https://github.com/hyperledger/indy-node/blob/master/docs/transactions.md#schema )|https://github.com/hyperledger/indy-node/blob/master/docs/transactions.md)  it should be the other way around.     Full code is available here  https://github.com/hyperledger/indy-sdk/blob/master/doc/how-tos/save-schema-and-cred-def/python/write_schema_and_cred_def.py            ></description> </Issue>
