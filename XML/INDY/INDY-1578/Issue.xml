<Issue id="32752" key="INDY-1578" number="1578" project="10303" reporter="ckochenower" assignee="keichiri" creator="ckochenower" type="10004" summary="Promotion Workflow - Potential race condition when restarting node after promotion" priority="3" resolution="10000" status="10001" created="2018-08-11 00:28:49.0" updated="2019-03-29 20:32:35.0" resolutiondate="2019-03-29 20:32:35.0" votes="0" watches="2" workflowId="43988"> <environment><! CDATA The output from `apt list --installed` and `pip3 freeze` are as follows: {noformat} ubuntu@kellyohio7:~$ sudo apt list --installed | grep indy indy-anoncreds/xenial,now 1.0.32 amd64  installed  indy-node/xenial,now 1.4.497 amd64  installed,upgradable to: 1.6.556  indy-plenum/xenial,now 1.4.442 amd64  installed,upgradable to: 1.6.497  libindy-crypto/xenial,now 0.4.0 amd64  installed  python3-indy-crypto/xenial,now 0.4.1 amd64  installed   ubuntu@kellyohio7:~$ sudo pip3 freeze | grep indy indy-anoncreds==1.0.32 indy-crypto==0.4.1 indy-node==1.4.497 indy-plenum==1.4.442 indy-plenum-dev==1.4 {noformat}   ></environment> <description><! CDATA When running the Demote Replica Chaos experiment defined by INDY-1541, one or more nodes persistently get "stuck" even following the prescribed restart following node promotion.   ~ashcherbakov  asked that I log this issue and attach the following artifacts:  1.  Logs for demoted/promoted nodes 2. Logs for at least 1 normal node  Identical steps to those executed by the Demote Replica Chaos experiment were exercised manually and thus removed chaostoolkit/chaosindy from the equation and was unable to reproduce the problem. Perhaps there is a race condition caused by the programmatic execution of the steps faster than can be done manually?  Manual steps and their results are outlined in the following comment on INDY-1541:  https://jira.hyperledger.org/browse/INDY-1541?focusedCommentId=48747&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-48747  The attached logs are for the following nodes:  Node1 - Was the master before indy-node was stopped to force view change. What you see in the screenshot is Node1's state following a indy-node service start on Node1 immediately AFTER promoting Node3 and Node4 (indy-node was restarted on Node3 and Node4 as prescribed by the "node promotion workflow")  Node4 - The demoted node that has the correct/expected state following promotion and indy-node service restart  Node3 - The demoted node that has the incorrect/unexpected state following promotion and indy-node service restart  Node2 - The replica that became the master after indy-node on Node1 was stopped.    ></description> </Issue>
