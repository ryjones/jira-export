<Action id="30059" issue="19858" author="lovesh" type="comment" body="This POA attached in the ticket was obsolete; we are proceeding with BLS rather than CoSi. Have a look at the attached google doc now" created="2017-08-22 06:35:51.0" updateauthor="lovesh" updated="2017-08-22 06:36:23.0"/>
<Action id="30105" issue="19858" author="ashcherbakov" type="comment" created="2017-08-23 13:00:43.0" updateauthor="ashcherbakov" updated="2017-08-23 13:00:43.0"> <body><! CDATA A link to PoA:  PoA|https://docs.google.com/document/d/1WRkqNqXXi1LoVxZu0C353uR0KRatoQuvrV_UZNDuNcc/edit#heading=h.myk709jx20js   The current problems/questions: 1. Crypto lib. Charm has inappropriate license, while there is no python implementation in milagro. 2. Who calculates the multi-sig (see discussion and proposed Options in PoA): Primary or each node individually. Each Option has cons and pro. Although calculation of multi-sig of each nodes individually looks more simple and stable, some future features may require to have the same value for multi-sig. So, probably we should follow with Option 2 (Primary calculates and propagates it).   ></body> </Action>
<Action id="30975" issue="19858" author="ashcherbakov" type="comment" created="2017-09-18 12:55:38.0" updateauthor="ashcherbakov" updated="2017-09-18 12:55:38.0"> <body><! CDATA * We created a separate Rust-based indy-crypto lib (with Python wrapper). * The final multi-sig is created by Primary and propagated to nodes with Pre-Prepares for next batches. At the same time, each node calculates its own multi-sig to be able to reply immediately for the latest state. The multi-sig for the latest state may be different, but verification will work fine. Once a multi-sig calculkated by a Primary is received for a state, it will replace the multi-sig calculated by the Node, so that eventually we will have equal multi-sigs for all nodes. * We do not support historical multi-sigs as of now (there is INDY-859 for this) * Multi-sig config parameters (elliptic curve, generator, etc.) are hard-coded as of now; there is a separate task to store them in config ledger (INDY-858)  ></body> </Action>
<Action id="31135" issue="19858" author="ashcherbakov" type="comment" created="2017-09-25 15:08:07.0" updateauthor="ashcherbakov" updated="2017-10-02 09:04:44.0"> <body><! CDATA What is done: - Supported indy-crypto for working with BLS signatures; - Created separate classed (with unit and integration tests) for BLS-related logic; - Supported BLS sigs in consensus protocol;  PR: - https://github.com/hyperledger/indy-node/pull/358  Build: indy-node 1.1.149  Comments for QA: - state proofs will be supported in python CLI in the scope of INDY-790 (not this one). - we need to test the following: -- test that consensus works when no BLS keys are generated -- test that consensus works when we have BLS created for some nodes ( < n-f and >= n-f; n-f is BLS consensus) -- test that consensus works when we have BLS created for all or >= n-f nodes and we have multi-sigs calculated and saved.  How to init BLS for a node: - run `init_bls_keys --name <NodeName> --seed <seed>` - note the generated key - send NODE txn with 'bls_key' in DATA for this node.  ></body> </Action>
<Action id="31201" issue="19858" author="krw910" type="comment" body="Changed back to test because the subtasks were completed, but the testing is coming from this ticket." created="2017-09-27 13:39:55.0" updateauthor="krw910" updated="2017-09-27 13:39:55.0"/>
<Action id="32616" issue="19858" author="vladimirwork" type="comment" created="2017-10-18 12:40:19.0" updateauthor="vladimirwork" updated="2017-10-18 12:40:19.0"> <body><! CDATA Build Info: indy-node 1.1.167  Preconditions: Install pool of 3 nodes.  Steps to Reproduce: 1. Change blskey for the Node1. 2. Try to add some NYMs.  Actual Results: NYMs write in Node1 ledger only. See attachments for more info. !change_bls_3_nodes_pool.PNG|thumbnail!   ^_node1.txt    ^_node2.txt    ^_node3.txt    Expected Results: The pool should work normally.  Additional Info: - It's unable to write NYMs at all if we restart Node2 and Node3 after Step 2. - Is it expected behaviour - node restarts during the send NODE command execution?  ></body> </Action>
<Action id="32938" issue="19858" author="ashcherbakov" type="comment" created="2017-10-20 18:09:11.0" updateauthor="ashcherbakov" updated="2017-10-20 18:23:35.0"> <body><! CDATA Problem cause: * It was not possible to rotate BLS keys without re-starting Nodes; * Also the Nodes without BLS keys didn't participate in calculation of BKS signatures (although BLS keys are not required to verify signatures)   Changes: * Re-factored bls classes to separate signing and verification: -* split bls crypto to signer and verifier -* split bls_bft and bls_bft_replica -* each node always can verify BL sigs and calculate multi-sigs even if it can not create BLS sigs (if BLS keys are not initialized on the node) * Support correct rotation of BLS keys: -* Node can work with newly initialized BLS keys without re-start -* Node works correctly if BLS keys saved in NODE txn and on disk differ -* added tests  PRs: * https://github.com/hyperledger/indy-plenum/pull/425 * https://github.com/hyperledger/indy-node/pull/409  Addes tests: * https://github.com/hyperledger/indy-plenum/blob/master/plenum/test/bls/test_add_bls_key.py * https://github.com/hyperledger/indy-plenum/blob/master/plenum/test/bls/test_update_bls_key.py * https://github.com/hyperledger/indy-plenum/blob/master/plenum/test/bls/test_add_incorrect_bls_key.py * https://github.com/hyperledger/indy-plenum/blob/master/plenum/test/bls/test_update_incorrect_bls_key.py  Build: master 1.1.172  Recommendation to QA: * Have a pool without BLS keys; add BLS keys one by one; check that BLS started working after all nodes get keys (no restart required) * Have a pool without BLS keys; add incorrect BLS keys one by one (send NODE txn with keys different from init_bls_keys result); check that pool still works, but BLS is not enabled * Have a pool with BLS keys; update BLS keys one by one; check that BLS still works (no restart required) * Have a pool with BLS keys; update BLS key to incorrect one by one; check that BLS is disabled (since we don't have enough BLS keys for BLS consensus) Note: Although it's not required to restart the pool, CLI needs to be restarted each changing of keys.  ></body> </Action>
<Action id="32989" issue="19858" author="vladimirwork" type="comment" body="All bls scripts should be run by &quot;indy&quot; user." created="2017-10-23 15:36:01.0" updateauthor="vladimirwork" updated="2017-10-23 15:36:01.0"/>
<Action id="33005" issue="19858" author="ozheregelya" type="comment" created="2017-10-23 18:45:09.0" updateauthor="ozheregelya" updated="2017-10-24 09:08:41.0"> <body><! CDATA It looks like init_bls_keys still does not work on upgraded pool. See attached logs:  ^Node1.log   ^Node2.log   ^Node3.log   ^Node4.log   ^cli.log   UDP: .indy folder of Node1:  ^indy.7z   ></body> </Action>
<Action id="33104" issue="19858" author="ashcherbakov" type="comment" body="The cause of the issye is that `init_bls_key` was called with incorrect alias (node1 instead of Node1), and alias is case sensitive." created="2017-10-24 09:18:10.0" updateauthor="ashcherbakov" updated="2017-10-24 09:18:10.0"/>
<Action id="33120" issue="19858" author="vladimirwork" type="comment" created="2017-10-24 15:26:33.0" updateauthor="vladimirwork" updated="2017-10-24 15:26:33.0"> <body><! CDATA Build Info: indy-node 1.1.177  Steps to Validate - Case 1: 1. Have a pool with BLS keys. 2. Update BLS keys one by one. 3. Check that BLS still works (no restart required).  Actual Results: BLS calculates and works normally. !bls_positive.PNG|thumbnail!   Steps to Validate - Case 2: 1. Have a pool with BLS keys. 2. Update BLS key to incorrect one by one. 3. Check that BLS is disabled (since we don't have enough BLS keys for BLS consensus).  Actual Results: BLS doesn't work because keys in bls_pk of each node don't match keys in pool ledger. !bls_negative.PNG|thumbnail!   ></body> </Action>
<Action id="33160" issue="19858" author="ozheregelya" type="comment" created="2017-10-25 13:46:53.0" updateauthor="ozheregelya" updated="2017-10-25 13:46:53.0"> <body><! CDATA Build Info: indy-node 1.1.178, 1.1.180  Case 2: 1. Set up the pool with old version (without state proofs support). 2. Upgrade it to the latest master. 3. Initialize bls keys on nodes one by one. 4. Send NODE transactions with valid blskey values. 5. Restart the CLI. 6. Stop services on n-1 node, check that GET transactions work.  Actual Results: Signatures are correct, reading with one node work.  Case 3: 1. Set up the pool with old version (without state proofs support). 2. Upgrade it to the latest master. 3. Initialize bls keys on nodes one by one. 4. Send NODE transactions with invalid blskey values. 5. Restart the CLI. 6. Stop services on n-1 node, check that GET transactions don't work.  Actual Results: Transactions are not signed when blskeys are invalid.    Full list of verified cases: https://docs.google.com/spreadsheets/d/1XzJ6yK1z4em_N-ZY6IMeGxs54x-ar4uYKOYR_x5_CCo/edit#gid=0  ></body> </Action>
