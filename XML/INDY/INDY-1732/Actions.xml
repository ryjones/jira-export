<Action id="57310" issue="34198" author="anikitindsr" type="comment" created="2019-02-19 16:35:23.0" updateauthor="anikitindsr" updated="2019-02-20 08:03:53.0"> <body><! CDATA h2. Plan of attack h3. Needed changes and features: * Storing auth rules in config ledger * Using rules from config ledger (get rules from state, not from source code defined auth_map structure) * New transaction for adding/modifying current rules * genesis transaction (for bootstrap purposes) * Modifying docs (about new transaction into config ledger and genesis file) * Need to create task for indy-sdk to support new write transaction  h3. Storing auth rules in config ledger.  Storing auth rules in config ledger consists of: * Define a format to storing. What's the "key" and what's the "value" * Make serialization and deserialization methods (for put and get actions) * Make some cache. Because we use auth rules for validation all of requests, we can use a cache (like idrCache for NYM roles). But it can be implemented as the next step of integration in a separate task. * Make a couple of tests, unit and integration, for checking storing and catchup/revert cases.  h4. Format to storing.  During new auth_map implementation, was assumed, that rule_id should be used as a key for storing into ledger. Serialized instance of corresponded auth_constraint class should be a value. All the rules have a unique rule_id represantion. In other words, rule_id as a key will give unique couple of pair "key-value" for storing into ledger. Value represantion should be serializable and deserializable. I propose, that json-like serialization is the most comman way for the value storing. h4. Serialization/deserialization  As i noticed before, for value i propose a simple json serialization and also we should add method for making corresponded auth_constraint object from serialized value. We should create some "compositor" class, which can make AuthConstraint object from serialized value. In sum for this prupose we should add: * value serialization * procedure for making AuthConstraint from serialized value * put pair of rule_id/AuthConstraint into cache (optional for now)  h3. Modify applying rule from config_ledger  As of no, we use LocalAuthStrategy for getting corresponded auth constraints by default and also we have a template for ConfigLedgerAuthStrategy which is empty now. In this step we can implement corresponded method (get_auth_constraint and _find_auth_constraint_key) and move to it by changing "authPolicy" parameter in config file. We should pass state of ConfigLedger directly to auth validator for request validation with actual uncommitted auth rules. In the future we can pass some cache with uncommitted state. Steps to validate: * Find corresponded rule_id in state/cache for incoming action_id * Get uncommitted auth constraint from config ledger's state * Make AuthConstraint * Using general workflow for checking auth constraint do request validation  h3. New transaction for adding/modyfing current rules  For this step, we should add 2 new types of transactions for ConfigReqHandler. Adding new transaction consists of: * Add new client message type with static validation if needed * Add dynamic validation. It mens, that we should check, that user can write this transaction. For initial case we can use some "genesis" rule or rules from corresponded genesis file and then do it as in previous step * Add write method with corresponded serialization.  h3. Genesis transaction  This step should be discussed h3. Modifying docs  Add information about new write transactions to ConfigLedger and genesis file. h3. Tests  All of changes should be covered by unit and integration tests.  Â   ></body> </Action>
