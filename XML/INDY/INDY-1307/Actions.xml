<Action id="48390" issue="29799" author="sergey.khoroshavin" type="comment" created="2018-08-03 15:31:37.0" updateauthor="sergey.khoroshavin" updated="2018-08-03 15:50:20.0"> <body><! CDATA I'd like to elaborate on how and what should be done here.  First of all, as stated in issue, we already have simple scripts for some bulk management of nodes. I wrote them as fast as possible as part of load testing that I had to perform myself, and used them many times afterwards. I chose Ansible because: - I had positive prior experience with it - it's learning curve is very low (and I wanted these scripts to be usable by anyone in our team) - it doesn't require central server (so no additional infrastructure is needed) - it doesn't require agents on target hosts - it has large community  Main problem with current playbooks is that they are monolithic, variables are embedded in playbooks and there is no code reuse. Proper way of handling this is with _roles_, which can be parametrized and used in other roles and end-user playbooks. I think there should be separate reusable roles at least for: - node installation - config updates - restarts - log retrieval - cleanups  Another problem is that there are no tests now. Recently I've evaluated some testing options in my pet project. - Test Kitchen + Kitchen-Ansible/Ansiblepush + Inspec - seemed very nice, very modular, Inspec has tons for ready to use modules, there's also DevSec community providing some security profiles written in Inspec which can be run both in tests and against staging/production environment. There are downsides however: it's not meant to test multi-machine environments (but there are some workarounds, at least for Vagrant), and it cannot handle cases when Ansible reboots target nodes (and it seems like there's no workaround for that case). - Molecule + Inspec - also seemed very nice at first, Molecule has native support for Ansible, handles multi-machine environments well, doesn't have issues when playbook needs to reboot target machine, and we can still get all benefits of writing tests in Inspec. However, integration between Inspec and Molecule is poor. First, it doesn't run Inspec against target nodes, it actually installs it and runs it ON target nodes. It's slow, it changes target state (and there were reports that for some people it really caused problems) and it's output is harder to read. And on top of that when Inspec tests are parametrized by attributes these attributes should be provided in separate file instead of central test case config. - Molecule + TestInfra - all benefits of Molecule, TestInfra is nicely integrated, and tests are written in Python with PyTest. Downside is that TestInfra doesn't have as much features as Inspec and there are no 3rd-party tests for security hardening.  Given that Indy Node is written in Python and chances are high that we'll need  multinode setups (check that we can really create working pool) and reboots during tests (check that node was correctly installed and successfully starts after reboot) I'd go with last option, but there might be other opinions.  Finally, after refactoring of current code and covering it with tests is done additional roles can be added: - uploading logs to S3 bucket, instead of downloading them directly to workstation - downloading logs from S3 bucket to workstation - running log processing directly in testing pool (INDY-1373) - performance scripts installation - provisioning node pools and load agents  Also it might be beneficial to publish node installation role to Ansible Galaxy, so it can be easily used by anyone who wish to install their own node.   ></body> </Action>
