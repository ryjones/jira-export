<Issue id="35148" key="INDY-1818" number="1818" project="10303" reporter="benjsmi" assignee="derashe" creator="benjsmi" type="10001" summary="Init Indy Node should output Base58-encrypted verkey already" priority="3" resolution="10000" status="10001" created="2018-11-06 22:42:32.0" updated="2019-03-29 20:33:09.0" resolutiondate="2019-03-29 20:33:09.0" votes="0" watches="2" workflowId="46583"> <description><! CDATA  In the Steward Getting Started Guide|https://docs.google.com/document/d/1AH618bj4q9U8FS1uyoIgbcvwNzaghBCQ1v44tNpZ2OU/edit#heading=h.votw8a9lan5j   Shows that the verkey will come out looking something like this: {quote}{{bfede8c4581f03d16eb053450d103477c6e840e5682adc67dc948a177ab8bc9b}} {quote} Which to the best of my knowledge is a hexlified version of the verkey.  Later on,  in the guide|https://docs.google.com/document/d/1AH618bj4q9U8FS1uyoIgbcvwNzaghBCQ1v44tNpZ2OU/edit#heading=h.eg8r1qxkvix7 , to send the the client to add the Steward's node to the ledger, they must execute: {quote}python3 -c "from plenum.common.test_network_setup import TestNetworkSetup; print(TestNetworkSetup.getNymFromVerkey(str.encode('bfede8c4581f03d16eb053450d103477c6e840e5682adc67dc948a177ab8bc9b')))" {quote} If they send the hex version of their verkey, the transaction would be rejected.  I've been able to produce the Base 58 version of the verkey in Node.js with just a simple Base 58 library, decoding the hex verkey into a string and then encoding it with the library.  This way when the user gets to this step: {quote}indy> ledger node target=<validator_verkey_in_Base58> node_ip=<validator_node_ip_address> node_port=<node_port> client_ip=<validator_client_ip_address> client_port=<client_port> alias=<validator_alias> services=VALIDATOR blskey=<validator_bls_key> blskey_pop=<validator_bls_key_pop> {quote} They then use this base58 key they obtained above.  Can we make it so that the base58-encrypted key comes out when you run init_indy_node?        ></description> </Issue>
