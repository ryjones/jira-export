<Issue id="27755" key="INDY-1178" number="1178" project="10303" reporter="danielhardman" assignee="seanbohan_sovrin" creator="danielhardman" type="10002" summary="improve handling of demotion and promotion" priority="3" status="10200" created="2018-02-14 21:46:16.0" updated="2018-02-15 07:57:49.0" votes="0" watches="5" workflowId="27757"> <description><! CDATA Today, it is possible to prevent a known node from participating in consensus by submitting a transaction that changes its services list (in its config) to an empty list. We call this "demotion". Later, if we reactivate the node, we submit a new transaction that does "promotion".  We need some enhancements: # We need to split our current genesis txn handling into two parts, such that a network has a set of genesis txns, plus a set of subsequent txns that evolve the nodes–where BOTH of these txn sets are in external files that could be distributed with an install image. This will allow a .deb file to lay down genesis txns plus any subsequent txns that change the node pool, short-circuiting catchup for the node pool and allowing a new node or client to tolerate a case where the original set of validators, and the set of validators today, are totally disjoint. # We need a node state that is terminal, so we can retire a node and prevent it from being re-promoted. This eliminates an attack surface. # We need a way for demoted nodes to periodically catch up in some limited fashion, so a node that has been demoted for a long time can have minimal catchup time once it is promoted again. Perhaps this could be done with a rudimentary rsync running as a cron job, or by listening for ledger evolution from a single validator that replicates to it using state proofs to prevent tampering. (The latter approach would give us part of the observer feature, though it is not an observer feature by itself, since the idled/demoted node would not necessarily need to support read-only queries, and might not replicate very aggressively.)   Since the Sovrin Board of Trustees wants to accept many steward applications, but doesn't want to run a giant validator pool, this feature is fairly urgent from Sovrin's point of view.  ></description> </Issue>
