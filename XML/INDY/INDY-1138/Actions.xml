<Action id="41150" issue="27370" author="sergey-shilov" type="comment" created="2018-03-02 15:54:02.0" updateauthor="sergey-shilov" updated="2018-03-02 15:54:02.0"> <body><! CDATA The main question here is a persistent storage for storing of _(timestamp, root)_ pairs with ability to efficiently get the closest lower key. Our quick investigation shown that the best solution here is to use RocksDB as LevelDB has not required functionality and relational DBs look as too expensive solution for key-value storage. RocksDB is a fast, lightweight,Â high performance key-value persistent storage. From the official RocksDB doc:  "Start from *4.13*, Rocksdb added _{{Iterator::SeekForPrev()}}_. This new API will seek to the last key that is less than or equal to the target key, in contrast with _{{Seek()}}_."   https://github.com/facebook/rocksdb/wiki/SeekForPrev   This is exact what we need for current task. And also it fully correlates with INDY-1205, so I'm switching to this blocker task.  ></body> </Action>
<Action id="41672" issue="27370" author="anikitindsr" type="comment" created="2018-03-15 09:35:35.0" updateauthor="anikitindsr" updated="2018-03-15 09:35:35.0"> <body><! CDATA PR: https://github.com/hyperledger/indy-node/pull/602 Changes: * created state-timestampe storage, key - timestamp, value - root_hash of state for txn timestamp. * added method get_equal_or_prev into parent KeyValueStorage class and implementation for LevelDB  ></body> </Action>
