<Action id="28268" issue="18443" author="krw910" type="comment" created="2017-07-12 19:37:28.0" updateauthor="krw910" updated="2017-07-12 19:37:28.0"> <body><! CDATA My conversation with Nikita on how to use the "new identifier" command to create a new verkey to take ownership of an identity or to rotate my verkey. These are just notes and a set of steps needs to be documented once I have tested the process.  *nikita.spivachuk* `new key` and `new identifier` are actually different kinds of the same command. Both they generate a triplet <identifier, verification key, signing key>. Below there are different kinds of `new key/identifier` command:  `new key  with seed <SEED> ` generates a cryptonym (which is used as both the identifier and verification key) and a corresponding signing key.  `new identifier  with seed <SEED> ` generates a 16-byte identifier, a full verification key and a corresponding signing key.  `new identifier abbr  with seed <SEED> ` generates a 16-byte identifier, an abbreviated verkey and a corresponding signing key.  `new identifier <ID>  with seed <SEED> ` generates the specified identifier (<ID>), a full verification key and a corresponding signing key. (edited)  So the command `new identifier <ID>` executed several times in succession with the same <ID> allows just to change the key pair while staying with the same identifier. (edited)   *nikita.spivachuk* `new key`/`new identifier` command generates a triplet and activate it in the wallet.  There is also `use identifier <ID>` command that activates an already existing (in the wallet) triplet by its identifier (<ID>).   *kelly.wilson* Awesome. So if I want to rotate my verkey all I do is run "new identifier <ID>" to get a new verkey/private key pairing? If I do that can I say "use identifier" and then "send NYM dest=<ID> verkey=<new verkey>"?   *nikita.spivachuk* >So if I want to rotate my verkey all I do is run "new identifier <ID>" to get a new verkey/private key pairing? You execute `new identifier <ID>` where <ID> is your identifier.   *kelly.wilson* How do you get that verkey on the ledger with your ID?   *nikita.spivachuk* >If I do that can I say "use identifier" and then "send NYM dest=<ID> verkey=<new verkey>"? The command is `use identifier <ID>` where <ID> is an identifier already existing in the wallet.  There is no sense to execute `use identifier <ID>` right after `new identifier <ID>` if ids are the same. In such the case `use identifier <ID>` just activates the already active identifier just generated by `new identifier <ID>`. (edited)  *kelly.wilson* Ok, I will try that out. So you are right if that works as designed we don't need INDY-290   *nikita.spivachuk* If a verkey has already been set in the ledger for your identifier then the following scenario will NOT work: `new identifier <ID>` `send NYM dest=<ID> verkey=<GENERATED_VERKEY>` (edited)   *kelly.wilson* So you cannot rotate your verkey that way. How do a rotate my verkey?   *nikita.spivachuk* This will not work because the key pair in the wallet will be replaced with the new generated one and so the request `send NYM` will be signed using the new key which the ledger is not aware of.  As a workaround, one could use two CLIs, generate a new key pair in the first CLI, then update the verkey in the ledger from the second CLI and after that use the first CLI.  ></body> </Action>
<Action id="28301" issue="18443" author="spivachuk" type="comment" created="2017-07-13 09:41:48.0" updateauthor="spivachuk" updated="2017-07-13 09:41:48.0"> <body><! CDATA *An addition to the previous comment:* The user can also use two keyrings in the same CLI (instead of two CLIs or two machines) in order to rotate their key.  ></body> </Action>
<Action id="28686" issue="18443" author="krw910" type="comment" created="2017-07-19 16:36:19.0" updateauthor="krw910" updated="2017-07-19 16:36:19.0"> <body><! CDATA I am unable to come up with any steps that allow me to rotate a verkey. I need step by step instructions.  The main issue here is the wallet.  I cannot create a new identifier to get a new verkey while in the wallet I am using. If I do I cannot send the NYM command because my signature no longer matches. If I run "use identifier" from a different wallet then switch to my main wallet I can send the command, but now my verkey is in the other wallet and I cannot do any more operations from my main wallet.  We have to have step by step instructions on how to rotate a verkey and keep the same wallet. The need to be clear enough we can write up a document for the Trustees and Stewards. Once you have instructions please send them to me for verification.   ></body> </Action>
<Action id="28705" issue="18443" author="ashcherbakov" type="comment" body=" ~ozheregelya   ~VladimirWork  I think you did some experiments regarding this. Do you have an instruction?" created="2017-07-20 07:49:46.0" updateauthor="ashcherbakov" updated="2017-07-20 07:49:46.0"/>
<Action id="28724" issue="18443" author="ozheregelya" type="comment" created="2017-07-20 14:36:26.0" updateauthor="ozheregelya" updated="2017-07-20 14:38:02.0"> <body><! CDATA  ~krw910 ,  ~ashcherbakov  I've updated instruction for rotation of verkey:  https://docs.google.com/document/d/1_CQ1mldMNSgNGqR1urvjcXL2QXVxPz760_cLFXXMpTc/edit#|https://docs.google.com/document/d/1_CQ1mldMNSgNGqR1urvjcXL2QXVxPz760_cLFXXMpTc/edit  Here are steps:  1. Add new identity (DID): {code:java} User’s client: sovrin@test> new keyring wallet1 Active keyring "Default-dd49d5" saved (/home/sovrin/.sovrin/keyrings/test/default-dd49d5.wallet) New keyring wallet1 created Active keyring set to "wallet1" sovrin@test> new key Key created in keyring wallet1 Identifier for key is RrTkY1dPvpxJShvtHoPe8Y Verification key is ~MKpejEBYGxdQzHRZ1CZk1Z Current identifier set to RrTkY1dPvpxJShvtHoPe8Y  Trustee’s client: sovrin@test> new keyring trusteeWallet Active keyring "Default-dd49d5" saved (/home/sovrin/.sovrin/keyrings/test/default-dd49d5.wallet) New keyring trusteeWallet created Active keyring set to "trusteeWallet" sovrin@test> new key with seed 000000000000000000000000Steward1 Key created in keyring trusteeWallet Identifier for key is Th7MpTaRZVRYnPiabds81Y Verification key is ~7TYfekw4GUagBnBVCqPjiC Current identifier set to Th7MpTaRZVRYnPiabds81Y sovrin@test> send NYM dest=RrTkY1dPvpxJShvtHoPe8Y verkey=~MKpejEBYGxdQzHRZ1CZk1Z Adding nym RrTkY1dPvpxJShvtHoPe8Y Nym RrTkY1dPvpxJShvtHoPe8Y added {code}    2. Create new keyring to backup active verkey before generating new one and generate new verkey: {code:java} User’s client: sovrin@test> new keyring draftWallet Active keyring "wallet1" saved (/home/sovrin/.sovrin/keyrings/test/wallet1.wallet) New keyring draftWallet created Active keyring set to "draftWallet" sovrin@test> new identifier RrTkY1dPvpxJShvtHoPe8Y Identifier created in keyring draftWallet New identifier is RrTkY1dPvpxJShvtHoPe8Y New verification key is 8141LM6L6Lm3XXB76sGVDuBE5q8w94WLZBkRBkTZ2NTP Current identifier set to RrTkY1dPvpxJShvtHoPe8Y {code}    3. Sending newly generated verkey (stored in draftWallet) to the ledger using current verkey (stored in wallet1): {code:java} sovrin@test> use keyring wallet1 Active keyring "draftWallet" saved (/home/sovrin/.sovrin/keyrings/test/draftwallet.wallet) Active keyring set to "wallet1" sovrin@test> use identifier RrTkY1dPvpxJShvtHoPe8Y Current identifier set to RrTkY1dPvpxJShvtHoPe8Y sovrin@test> send NYM dest=RrTkY1dPvpxJShvtHoPe8Y verkey=8141LM6L6Lm3XXB76sGVDuBE5q8w94WLZBkRBkTZ2NTP Adding nym RrTkY1dPvpxJShvtHoPe8Y Nym RrTkY1dPvpxJShvtHoPe8Y added {code}    Now key pair for RrTkY1dPvpxJShvtHoPe8Y  in keyring wallet1 is invalid. But user is able to use keypair in draftWallet. If it is important to use keyring wallet1, user can rotate verkey one more time: {code:java} sovrin@test> new identifier RrTkY1dPvpxJShvtHoPe8Y Identifier created in keyring wallet1 New identifier is RrTkY1dPvpxJShvtHoPe8Y New verification key is 7DraUMinVb67g6uMxio955u7MSBSKKSMzfUoUxZCQYRK Current identifier set to RrTkY1dPvpxJShvtHoPe8Y sovrin@test> use keyring draftWallet Active keyring "wallet1" saved (/home/sovrin/.sovrin/keyrings/test/wallet1.wallet) Active keyring set to "draftWallet" sovrin@test> use identifier RrTkY1dPvpxJShvtHoPe8Y Current identifier set to RrTkY1dPvpxJShvtHoPe8Y sovrin@test> send NYM dest=RrTkY1dPvpxJShvtHoPe8Y verkey=7DraUMinVb67g6uMxio955u7MSBSKKSMzfUoUxZCQYRK Adding nym RrTkY1dPvpxJShvtHoPe8Y Nym RrTkY1dPvpxJShvtHoPe8Y added {code}    As we can see, rotation of verkey is possible. But I agree with Kelly. It will be better to create new command for rotation verkey because current procedure of rotation verkeys looks like tricky workaround and it is really inconvenient for users.  ></body> </Action>
<Action id="28725" issue="18443" author="ozheregelya" type="comment" created="2017-07-20 14:48:37.0" updateauthor="ozheregelya" updated="2017-07-20 14:49:10.0"> <body><! CDATA {quote}The scenario is that someone like a Trust Anchor creates an ID and puts it on the ledger without a verification key. Now they want to give that ID to an owner and the owner needs to provide a verification key.  Today in the CLI with the way that wallets work you need to have the private key in the wallet of the new owner. The only way you can do that today is with the 'new key' command being run from the CLI on the target owners machine.  So in order for the target owner to take ownership of a key would be to generate that public private key pair on their machine. {quote} Steps for this scenario:  Trustee/TrustAnchor client: {code:java} sovrin@test> new key Key created in keyring trusteeWallet Identifier for key is VWWqQERPa2LHGY86UNJKWY Verification key is ~Xn8r1Fk5maDqfxgLityASU Current identifier set to VWWqQERPa2LHGY86UNJKWY sovrin@test> send NYM dest=VWWqQERPa2LHGY86UNJKWY Adding nym VWWqQERPa2LHGY86UNJKWY Error: client request invalid: CouldNotAuthenticate() sovrin@test> new key with seed 000000000000000000000000Steward1 Key created in keyring trusteeWallet Identifier for key is Th7MpTaRZVRYnPiabds81Y Verification key is ~7TYfekw4GUagBnBVCqPjiC Current identifier set to Th7MpTaRZVRYnPiabds81Y sovrin@test> send NYM dest=VWWqQERPa2LHGY86UNJKWY Adding nym VWWqQERPa2LHGY86UNJKWY Nym VWWqQERPa2LHGY86UNJKWY added{code} User client: {code:java} sovrin@test> new identifier VWWqQERPa2LHGY86UNJKWY Identifier created in keyring draftWallet New identifier is VWWqQERPa2LHGY86UNJKWY New verification key is 4qvUoW4yGSpqxjjGLWtZETngiHT5JoGA5pSq8uwFqcA7 Current identifier set to VWWqQERPa2LHGY86UNJKWY{code} User provides generated verkey (4qvUoW4yGSpqxjjGLWtZETngiHT5JoGA5pSq8uwFqcA7) to Trustee/TrustAnchor by some way and Trustee/TrustAnchor send it to ledger: Trustee/TrustAnchor client: {code:java} sovrin@test> send NYM dest=VWWqQERPa2LHGY86UNJKWY verkey=4qvUoW4yGSpqxjjGLWtZETngiHT5JoGA5pSq8uwFqcA7 Adding nym VWWqQERPa2LHGY86UNJKWY Nym VWWqQERPa2LHGY86UNJKWY added{code} Check that user can use his identifier: {code:java} sovrin@test> send NYM dest=VWWqQERPa2LHGY86UNJKWY Adding nym VWWqQERPa2LHGY86UNJKWY Nym VWWqQERPa2LHGY86UNJKWY added{code} After these actions user can change his verkey himself as described in my previous comment after step 1.  ></body> </Action>
<Action id="28736" issue="18443" author="ozheregelya" type="comment" created="2017-07-20 16:05:00.0" updateauthor="ozheregelya" updated="2017-07-20 16:05:00.0"> <body><! CDATA  ~krw910 ,  Also I'm not sure what do you mean {quote}new command to transfer ownership {quote} The only association which I have is the end of guardianship. Guardianship of Trustee/TrustAnchor (or any other person who created the identity) ends automatically when Trustee/TrustAnchor set up the verkey for the identity (send NYM dest=VWWqQERPa2LHGY86UNJKWY verkey=4qvUoW4yGSpqxjjGLWtZETngiHT5JoGA5pSq8uwFqcA7).   To summarize, we have ways to do both of actions: transfer ownership and change the verkey. But it will be nice to have one command for rotation verkey instead of tricky scenario.  So, what should we do with this ticket?  ></body> </Action>
<Action id="28752" issue="18443" author="krw910" type="comment" body=" ~ozheregelya  what I meant by &quot;new command to transfer ownership&quot; is if when adding the NYM to the ledger they also added the verkey. Now to give that NYM to someone they need to generate a new verkey and have it changed which is basically the same as rotating a key." created="2017-07-20 20:52:28.0" updateauthor="krw910" updated="2017-07-20 20:52:28.0"/>
<Action id="28753" issue="18443" author="krw910" type="comment" created="2017-07-20 20:59:40.0" updateauthor="krw910" updated="2017-07-20 20:59:40.0"> <body><! CDATA Nikita Spivachuk Olga Zheregelya thanks for the steps. Unfortunately, those steps require the user to use the new wallet (draftwallet) they created to generate the new key pair after rotating their verkey. This is not acceptable because all the operations I have done as that user are in wallet1 which they can no longer use.  The steps that have been provide require abandoning their wallet if they rotate their verkey. We have to be able to rotate someones keys without losing their primary wallet.  ></body> </Action>
<Action id="28768" issue="18443" author="ashcherbakov" type="comment" created="2017-07-21 08:30:28.0" updateauthor="ashcherbakov" updated="2017-07-21 08:30:28.0"> <body><! CDATA  ~krw910   ~ozheregelya   ~spivachuk  As I understand, they use `draftwallet` as a temporarily buffer only. The user can continue working with wallet1, but he has to rotate the keys one more time (this time using wallet1 as a buffer, and doing real rotation with draftwallet). So, it's possible to rotate the key and still use the same wallet, but the procedure is really not obvious and complicated.   So,  ~krw910   ~danielhardman   ~stevetolman , the question is whether this is OK for MGL (I think for MGL that's fine, as key rotation will probably be not very usual operation right after MGL). We can create a ticket in M1 to make this procedure more simple and obvious, and don't require using a temporarily wallet for rotation.  ></body> </Action>
<Action id="28769" issue="18443" author="ashcherbakov" type="comment" body="BTW  ~krw910   ~stevetolman  Nikita&apos;s on vacation now (till Jul, 28)." created="2017-07-21 08:31:21.0" updateauthor="ashcherbakov" updated="2017-07-21 08:31:21.0"/>
<Action id="28780" issue="18443" author="ozheregelya" type="comment" created="2017-07-21 10:15:30.0" updateauthor="ozheregelya" updated="2017-07-21 10:15:30.0"> <body><! CDATA  ~krw910 , {quote}what I meant by "new command to transfer ownership" is if when adding the NYM to the ledger they also added the verkey. Now to give that NYM to someone they need to generate a new verkey and have it changed which is basically the same as rotating a key. {quote} As I understand these procedure: 1. User generates identifier, verkey and signing key in his wallet. 2. He provides identifier and verkey to Trustee/TrustAnchor/etc. 3. Trustee/TrustAnchor/etc adds his identifier with verkey to the ledger. 4. After that user can use his identifier.  After these actions user's signing key was not shared to someone, so I'm not sure that user really have to change verkey.  ></body> </Action>
<Action id="29607" issue="18443" author="dsurnin" type="comment" created="2017-08-09 15:26:58.0" updateauthor="dsurnin" updated="2017-08-09 15:26:58.0"> <body><! CDATA  ~krw910   ~danielhardman   ~ozheregelya   ~ashcherbakov   It would be nice to emphasize that a command changes the key. What do you think about the name "change key for ID xxxxx" ?  Also only the identity owner can change the key, so we do not need to provide actual id - we must use current one.  As a result command can be "change key" or "change current key"?     What do you think?  ></body> </Action>
<Action id="29690" issue="18443" author="dsurnin" type="comment" created="2017-08-11 10:05:03.0" updateauthor="dsurnin" updated="2017-08-11 10:05:03.0"> <body><! CDATA new command "change current key  with seed <seed> " added  node 0e233a119cea2e5f7a69d882c38f5d5ccd01e1c6  test  sovrin-node/sovrin_client/test/cli/test_change_key.py  ></body> </Action>
<Action id="29738" issue="18443" author="ozheregelya" type="comment" created="2017-08-11 16:44:43.0" updateauthor="ozheregelya" updated="2017-08-11 16:44:43.0"> <body><! CDATA Build Info:   indy-node 1.0.100   indy-anoncreds 1.0.25   indy-plenum 1.0.91   sovrin 1.0.22   python3-rlp 0.5.1   python3-sha3 0.2.1   python3-pyzmq 16.0.2 OS/Platform: Ubuntu 16.04.2 LTS Setup: 4 nodes, 1 client  New command works correctly in following cases: * change current key for identity owner before sending in to ledger. => error * change current key for identity owner send to ledger but with empty verkey. => error * change current key for identity owner send to ledger with verkey. => works correctly, identity owner is able to sign transactions, old verkey is invalid.  Additional testing is needed for invalid cases (like crashing CLI during processing of command).  ></body> </Action>
<Action id="29955" issue="18443" author="ozheregelya" type="comment" created="2017-08-17 13:37:44.0" updateauthor="ozheregelya" updated="2017-08-17 13:37:44.0"> <body><! CDATA Build Info:   indy-node 1.0.110   indy-anoncreds 1.0.25   indy-plenum 1.0.97   sovrin 1.0.23 OS/Platform: Ubuntu 16.04.2 LTS Setup: 4 nodes, 1 client  Following invalid cases were verified: * Interruption of changing verkey after sending to the ledger and before updating of wallet. => Information in the wallet and in the ledger are not synchronized. See INDY-732. * Changing verkey when the pool is unavailable. => Nothing happened (same as for send NYM to unavailable pool). Verkey in the wallet is not changed without changing value in the ledger.  ></body> </Action>
