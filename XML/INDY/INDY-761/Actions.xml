<Action id="30180" issue="20386" author="krw910" type="comment" body=" ~ashcherbakov  can you assign this ticket out so we can unblock the SDK project." created="2017-08-24 21:01:58.0" updateauthor="krw910" updated="2017-08-24 21:01:58.0"/>
<Action id="30197" issue="20386" author="ashcherbakov" type="comment" body=" ~Artemkaaas  Can you please provide pool logs with DEBUG level?" created="2017-08-25 10:31:15.0" updateauthor="ashcherbakov" updated="2017-08-25 10:31:15.0"/>
<Action id="30200" issue="20386" author="sergey.minaev" type="comment" body="  ^failed_schema_request.zip  another same fail for schema request and get schema. But only default logs level" created="2017-08-25 12:55:47.0" updateauthor="sergey.minaev" updated="2017-08-25 12:55:47.0"/>
<Action id="30204" issue="20386" author="sergey.minaev" type="comment" body="one more logs with maximum log level and failed   ^attrib_requests_AND_claim_def_requests_failed.zip  " created="2017-08-25 14:49:56.0" updateauthor="sergey.minaev" updated="2017-08-25 14:49:56.0"/>
<Action id="30668" issue="20386" author="mzk-vct" type="comment" created="2017-09-08 09:40:40.0" updateauthor="mzk-vct" updated="2017-09-08 09:40:40.0"> <body><! CDATA This problem cannot be fully solved since it is the fundamental problem of distributed systems. But we can make decrease its frequency, here is a pull reuqest: https://github.com/hyperledger/indy-plenum/pull/362  To make it appear less often and avoid negative effects it may be required to: 1. Make checks on clients side for state freshness by checking seq.no, update time or some other property. 2. Increase read-reply quorum    ></body> </Action>
<Action id="30770" issue="20386" author="mzk-vct" type="comment" created="2017-09-12 15:48:27.0" updateauthor="mzk-vct" updated="2017-09-12 15:48:27.0"> <body><! CDATA  ~danielhardman   ~nage We need your thoughts about this problem.  *Brief explanation:* # Client sends WRITE request # He then gets *f+1* confirmations for it  - quorum achieved, client considers request to be written # He sends READ request and waits for *f + 1* replies # Client gets replies for READ and expect them to contain the same value it sent in WRITE transaction  Success of step 3 depends on whether client receives replies from nodes which really wrote WRITE transaction. Despite the fact that pool-internal quorum for ordering is *n-f* it does not mean that all of these n-f nodes already wrote the data, it just means that they *decided* to do it.     This is a generic problem of distributed systems and solutions look more like searching tradeoff between performance and consistency.  The most simple solution is to make client send READ to the same nodes he got replies for WRITE from. But this does not cover the case when READ is sent by other client. Another solution is to change read quorum - make client wait for an equal replies for READ from majority of nodes, not just f + 1. We also can introduce some freshness criteria for READs.  *This problem requires additional discussion*  We have three tickets caused by this problem: - this one - https://jira.hyperledger.org/browse/INDY-354 - https://jira.hyperledger.org/browse/INDY-355     ></body> </Action>
<Action id="30916" issue="20386" author="gudkov" type="comment" body="Looks like it will be nice to discuss this on ART" created="2017-09-15 09:39:24.0" updateauthor="gudkov" updated="2017-09-15 09:39:24.0"/>
<Action id="30966" issue="20386" author="ashcherbakov" type="comment" created="2017-09-18 10:08:28.0" updateauthor="ashcherbakov" updated="2017-09-18 10:08:28.0"> <body><! CDATA  ~gudkov  We've already discussed it on one of the recent ARTs. The decision is that it's really not a problem, but rather a property of distributed systems.  Once we have state proofs (should have it soon), each reply to the client will contain the result, state proof, seq_no and timestamp. So, if the client isn't satisfied with seqNo/timestamp, he should either send another request in some time (assuming the node doesn't yet have the latest result), or use another validatior/observer node.  ></body> </Action>
<Action id="31257" issue="20386" author="danielhardman" type="comment" body="Thank you for the excellent summary of the problem, Victor. I agree with Alex&apos;s summary of the ART decision, and I agree with the ART decision itself: we will gladly benefit from the ways that state proofs helps, but this is a fundamental problem of distributed systems and we will not do anything special to solve it right now." created="2017-09-28 21:26:00.0" updateauthor="danielhardman" updated="2017-09-28 21:26:00.0"/>
