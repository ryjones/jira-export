<Action id="43491" issue="29474" author="mgbailey" type="comment" body="I love this ticket, but here is a concern.  If notifications that require no action from a steward become too plentiful, like more than one a day, then stewards are likely to start filtering and ignoring notifications. We need to make sure that stewards are able to enable / disable each type of notification at their discretion.  I believe that this is already the case, and it should continue to be so." created="2018-04-26 14:26:14.0" updateauthor="mgbailey" updated="2018-04-26 14:26:14.0"/>
<Action id="43492" issue="29474" author="ashcherbakov" type="comment" body="Agree. The main thing to decide in practise is what notification type(s) should we use. I believe we&apos;ve just addressed this issue in INDY-1251." created="2018-04-26 14:34:22.0" updateauthor="ashcherbakov" updated="2018-04-26 14:34:22.0"/>
<Action id="43494" issue="29474" author="mgbailey" type="comment" body="Thinking on this more, a steward should be able to configure not only whether to receive a notification, but also what notification method to use for the notification. For example, urgent messages may go to SMS, and pedestrian ones to email.  This will probably be accomplished by whatever notification service they use.  We should provide the hooks / tags / whatever is necessary for this." created="2018-04-26 14:49:09.0" updateauthor="mgbailey" updated="2018-04-26 14:49:09.0"/>
<Action id="43495" issue="29474" author="ashcherbakov" type="comment" created="2018-04-26 14:57:42.0" updateauthor="ashcherbakov" updated="2018-04-26 14:57:42.0"> <body><! CDATA Yes. I agree that eventually we should have it. But I think we should start with something simple before TDE.  ></body> </Action>
<Action id="43529" issue="29474" author="esplinr" type="comment" created="2018-04-27 00:19:36.0" updateauthor="esplinr" updated="2018-04-27 00:19:36.0"> <body><! CDATA This appears to be another risky issue due to it containing vague requirements based on our guesses at what people need rather than user research.  I recognize the importance for admins to have proactive information about the state of their nodes, but Mike's feedback causes me to be concerned that this implementation won't meet the need in practice.  In addition, responding to log events is a solved problem and we shouldn't reimplement it. We should just ensure that our notifications can be fed into systems built for this purpose.  I propose that we proceed with the implementation, but keep it as minimal as possible. As long as the administrators can feed the notifications through the system of their choice, they can send it through a system that allows them to configure filters for the events that they consider most useful. We can adapt our implementation over time based on that feedback.   ></body> </Action>
<Action id="43546" issue="29474" author="esplinr" type="comment" body="These system events result in log messages. I&apos;m going to remove this from the team&apos;s backlog until we better understand whether additional notifications are necessary." created="2018-04-27 13:18:41.0" updateauthor="esplinr" updated="2018-04-27 13:18:41.0"/>
<Action id="47835" issue="29474" author="ckochenower" type="comment" created="2018-07-25 22:24:10.0" updateauthor="ckochenower" updated="2018-07-25 22:31:20.0"> <body><! CDATA  ~esplinr  or  ~ashcherbakov  - Do we have all system events defined anywhere? Like a glossary or dictionary of events.  I agree that tools for interpreting their meaning based on frequency, severity, etc. are needed.  I think the automotive industry has done a great job evolving the  OBD|https://en.wikipedia.org/wiki/On-board_diagnostics  standards (currently OBD2). We could learn a lot from the OBD standards that directly apply to Indy Node (like a car), Stewards (driver/owner), and Engineers (technician, mechanic, hardware engineer, protocol engineer). I believe we can model our diagnostic/health-check status reporting in the same/similar fashion and expose the right data to the right people in a safe and useful manner.  Just like in a vehicle, there may be conditions external to indy-node inter-node communication that causes false positives. Some conditions may be symptomatic of a more severe problem, but turn out to be out of control of Indy Node (i.e. failing hardware).  In a modern car some conditions immediately illuminate the check engine light. Other conditions must be experienced a certain number of times and possibly within a certain time frame to cause the check engine light to illuminate. Temporary codes/events/conditions are stored when non-critical symptoms/conditions are experienced (i.e. low or high voltage readings on oxygen sensors). When frequency and timeframe meet certain criteria, a code is "stored" permanently, requiring a tool/technician to clear the code. Some permanent codes illuminate the check engine light and others do not. Some temporary codes illuminate the check engine light, but may get cleared after a restart or further diagnostics don't see the problem anymore; causing the check engine light to turn off without intervention.  When the check engine light is illuminated, subsystems (i.e. power train control module) enter fail-safe mode to minimize the chance for catastrophic failure without stranding the driver on the side of the road. The car doesn't run efficiently, but it will run.  I believe we have some conditions we don't want Stewards to effectively ignore. A big red check engine light needs to be in their face and possibly blink or make audible sounds when critical sub-systems/components experience fault/failure.  On one of my long road trips, I blew one of 6 spark plugs out of the engine head. My car immediately illuminated the check engine light and entered "limp mode". The oxygen fuel mixture was set to the safest (not most efficient) levels and the engine would cutout over 3000 RPMs to prevent further heat-related damage.  Root Cause Analysis (RCA): The spark plug had backed out of the threads slowly over time due to a "crush washer" that had not been replaced after the last spark plug inspection. The old plug was put back in and torqued to spec, but apparently wasn't sufficient to maintain torque. As the plug began backing out of the threads (likely due to vibration), eventually sensors began registering misfires. Air gap caused arching and arching caused the spark plug to melt. It melted to the point that the pressure from the pressure stroke produced enough pressure to blow the spark plug out of the head, taking the threads with it.  It was winter, my entire family was in the car, and we were high in a mountain pass about 15 miles from help. I was able to "limp" back to safety. Pretty impressive engineering in my opinion.  ></body> </Action>
<Action id="64585" issue="29474" author="esplinr" type="comment" body="Validator-info now reports all system events that we believe need to be monitored. Logging those events, and notifying network administrators, should be set up for each Indy network. If additional changes are required to assist with monitoring, we will create new tasks to track that work." created="2019-10-11 09:33:47.0" updateauthor="esplinr" updated="2019-10-11 09:33:47.0"/>
