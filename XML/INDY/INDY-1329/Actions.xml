<Action id="45004" issue="30169" author="spivachuk" type="comment" body="After a discussion with  ~ashcherbakov , we decided not to stabilize short own checkpoints because it is not completely correct to name a checkpoint stable when we don&apos;t check its digest. Instead we will not consider a quorumed stashed checkpoint corresponding by the upper bound to a completed short own checkpoint when evaluating the size of the replica lag for catch-up." created="2018-05-23 18:26:24.0" updateauthor="spivachuk" updated="2018-05-23 18:26:24.0"/>
<Action id="45194" issue="30169" author="spivachuk" type="comment" created="2018-05-28 13:31:22.0" updateauthor="spivachuk" updated="2018-05-28 13:33:24.0"> <body><! CDATA *Problem reason:* - Short own checkpoints were never stabilized, so received checkpoints with the same upper bound were kept in the stash. This might lead to a redundant catch-up because the threshold of a lag in stashed checkpoints which causes catch-up was reached earlier than it should in case the short own checkpoint had already been completed and the next checkpoint had not been completed yet. - Stashed received checkpoints were not removed after catch-up. So they continue to be considered in the lag for catch-up and thus a redundant catch-ups may be triggered further while the node is being in the same view.  *Changes:* - Added logic of excluding a complete short checkpoint from the lag for catch-up. Added integration tests for this logic. - Added removal of own and stashed received checkpoints on non-primary replicas after catch-up. Added unit tests for this logic. - Added removal of previous stashed received checkpoints on own checkpoint stabilization. Enhanced {{test_second_checkpoint_after_catchup_can_be_stabilized}} to verify this logic. - Simplified code for removal of stashed checkpoints. - Rolled back the recent changes in garbage collection since they had turned out to be not completely correct.  *PRs:* - https://github.com/hyperledger/indy-plenum/pull/690 - https://github.com/hyperledger/indy-plenum/pull/704 - https://github.com/hyperledger/indy-node/pull/714 - https://github.com/hyperledger/indy-node/pull/724  *Version:* - indy-node 1.3.428-master - indy-plenum 1.2.375-master  *Risk factors:* - The moment of triggering a catch-up on a lag of the master replica occurred right after another catch-up in the same view. - The moment of triggering a catch-up on a lag of the master replica in case another catch-up was performed some time ago in the same view.  *Risk:* - Low  *Covered with tests:* - {{test_node_catchup_after_checkpoints}} - {{test_lag_size_for_catchup}} - {{test_complete_short_checkpoint_not_included_in_lag_for_catchup}} - {{test_incomplete_short_checkpoint_included_in_lag_for_catchup}} - {{test_second_checkpoint_after_catchup_can_be_stabilized}} - {{test_checkpoints_removed_on_master_non_primary_replica_after_catchup}} - {{test_checkpoints_removed_on_backup_non_primary_replica_after_catchup}} - {{test_checkpoints_not_removed_on_backup_primary_replica_after_catchup}}  ></body> </Action>
<Action id="45407" issue="30169" author="vladimirwork" type="comment" body="Cannot run load test to check large catchups because of IS-740." created="2018-06-01 13:34:09.0" updateauthor="vladimirwork" updated="2018-06-01 16:29:07.0"/>
<Action id="45485" issue="30169" author="vladimirwork" type="comment" created="2018-06-04 16:12:34.0" updateauthor="vladimirwork" updated="2018-06-04 16:12:34.0"> <body><! CDATA Build Info: indy-node 1.3.439  Steps to Validate: 1. Install pool. 2. Check catchup for 1..f nodes disconnected with 2.1. 20..25.000 txns in ledger. 2.2. More than 1 catchup in one view. 2.3. Catchup under load.  Actual Results: All nodes have the same amount of txns in all ledgers after all cases.  ></body> </Action>
