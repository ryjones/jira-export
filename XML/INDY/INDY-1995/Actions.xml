<Action id="57773" issue="37682" author="anikitindsr" type="comment" created="2019-03-01 08:29:51.0" updateauthor="anikitindsr" updated="2019-03-01 11:52:23.0"> <body><! CDATA The last changes was added into indy-node 1.6.837 Also, was added a debug logging when we use auth rule from state. Please take it into account. recommendation for QA.  For testing INDY-2003: * setup pool of 4 nodes * check, that current rule is worked (for example for adding new steward we must be a trustee) * change constraint for this rule by sending AUTH_RULE txn (not implemented yet from indy-sdk side). For example, only steward can create steward * check, that step 2 is not worked now and only steward can create new stewards * check, that reject will be returned if we try to change rule not from local map * check, that only trustee can send AUTH_RULE txn  For testing INDY-2002 and INDY-2001: * setup pool of 4 nodes * run add_rules_to_config_state scripts for all the nodes (stops all nodes before) * run load_test with several type of transactions (add NYM, ATTRIB, SCHEMA, CLAIM_DEF, NODE, editing NODE txn for example) * check, that there is strings in logs, like "Using auth constraint from state"  Some acceptance testing for checking that there is no any degradations or regressions: * setup 25 nodes pool * run add_rules_to_config_state on all nodes * run acceptance load_test  ></body> </Action>
<Action id="57973" issue="37682" author="ozheregelya" type="comment" created="2019-03-07 14:14:06.0" updateauthor="ozheregelya" updated="2019-03-13 11:48:33.0"> <body><! CDATA *-Case 1:-* verified on indy-node 1.6.855 There is no validation for "role" value in constraint: {code:java} pool(p1):wallet(w):did(V4S...e6f):indy> ledger custom {"reqId":23,"identifier":"V4SGRU86Z58d6TV7PBUe6f","operation":{"type":"120","constraint":{"constraint_id":"ROLE","role":"ololo","sig_count":1,"need_to_be_owner":false,"metadata":{}},"field":"role","auth_type":"1","new_value":"","auth_action":"ADD"},"protocolVersion":2} sign=true Response:  {"result":{"txnMetadata":{"seqNo":11,"txnTime":1551967509},"reqSignature":{"type":"ED25519","values": {"from":"V4SGRU86Z58d6TV7PBUe6f","value":"4k6fXFoyJF8YueKt6pc6TizgfTHQ931ryBwEVEWi8X5dMNdTdsLoJT8xTHAcxSVhwHfCzX3WxYPTn97gCEwEbwfm"} },"auditPath": "DzveqQuop7uS1werAeUggpUrS4sjhr3UmKHsYtNJrjTb","CbvSdfmqEwaGX2nsdoETsbhbpk7pMBumjMYop8AjUN8c" ,"rootHash":"G62oxG7xeALd1Zt9BBPhypEyHxzpJpbpeTGCbN5B7GSd","ver":"1","txn":{"data":{"auth_action":"ADD","field":"role","auth_type":"1","new_value":"","constraint":{"need_to_be_owner":false,"constraint_id":"ROLE","metadata":{},"sig_count":1,"role":"ololo"}},"type":"120","protocolVersion":2,"metadata":{"digest":"7f7d698d5ce73862ee122a213e904efc76002b7285a49b58791d4668561e871a","from":"V4SGRU86Z58d6TV7PBUe6f","reqId":23}}},"op":"REPLY"}{code} Here: "constraint_id":"ROLE",{color:#ff0000}"role":"ololo"{color}  is invalid value and transaction should not be written.  -*Case 2:*- -"*" value works inconsistently for "role" in "constraint" and for "field":"role","auth_type":"1","new_value":"*".-  -*Steps to Reproduce:*- -1. Send following rule (Trust Anchor can add "*"):- {code:java} ledger custom {"reqId":101,"identifier":"V4SGRU86Z58d6TV7PBUe6f","operation":{"type":"120","constraint":{"constraint_id":"ROLE","role":"101","sig_count":1,"need_to_be_owner":false,"metadata":{}},"field":"role","auth_type":"1","new_value":"*","auth_action":"ADD"},"protocolVersion":2} sign=true {code} -2. Set yourself as TRUST_ANCHOR.-  -3. Check which roles can be added by TRUST_ANCHOR.-  -*Actual Results:*-  -"*" mean only adding of identity owner here.- {code:java}  pool(p1):wallet(wallolo):did(2Qg...VrF):indy> ledger nym did=2QgL6eshMaLCaPcjvu4111 Nym request has been sent to Ledger. Metadata: +------------------------+-----------------+---------------------+---------------------+ | From                   | Sequence Number | Request ID          | Transaction time    | +------------------------+-----------------+---------------------+---------------------+ | 2QgL6eshMaLCaPcjvu4VrF | 18              | 1551969878495845634 | 2019-03-07 14:44:38 | +------------------------+-----------------+---------------------+---------------------+ Data: +------------------------+------+ | Did                    | Role | +------------------------+------+ | 2QgL6eshMaLCaPcjvu4111 | -    | +------------------------+------+ pool(p1):wallet(wallolo):did(2Qg...VrF):indy> ledger nym did=2QgL6eshMaLCaPcjvu4111 role=TRUST_ANCHOR Transaction has been rejected: Rule for this action is: 1 STEWARD signature is required OR 1 TRUSTEE signature is required {code} -*Expected Results:*- -"*" for new_value of role field should work on the same manner as for "role" in constraint (i.e. should mean all possible roles including None role), or should not be a valid value if it's impossible.-  *Case 2* won't fix since it caused by ANYONE_CAN_WRITE flag and ANYONE_CAN_WRITE flag will be removed in INDY-1956  ></body> </Action>
<Action id="58036" issue="37682" author="anikitindsr" type="comment" body="About &quot;Case: 2&quot;. In the first step was changed rule for adding new NYM. After this txn we expect, that users with role &quot;101&quot; (TRUST_ANCHOR) can *_add_* NYM txn with anyone value for field &quot;role&quot;. Then, on step 3, we create a identity owner without defining role&apos;s field and then we send a NYM txn with *_editing_* role&apos;s field. Rule for editing existing NYM wasn&apos;t changed, that  means, that transaction rejecting is an expected behaviour" created="2019-03-11 08:47:10.0" updateauthor="anikitindsr" updated="2019-03-11 08:47:10.0"/>
<Action id="58039" issue="37682" author="vladimirwork" type="comment" created="2019-03-11 11:54:34.0" updateauthor="vladimirwork" updated="2019-03-11 11:54:34.0"> <body><! CDATA Build Info: indy-node 1.6.846  Steps to Reproduce: 1. Try to send node txn (*to add new node*, not to demote existing one) with empty 'services' field.  Actual Results: There is an error: client request invalid: UnauthorizedClientRequest(\"Request can not be authorized as action is not allowed.  Expected Results: We could add new nodes with empty services field using old auth map and we should keep this behaviour.  ></body> </Action>
<Action id="58087" issue="37682" author="ozheregelya" type="comment" created="2019-03-12 13:53:31.0" updateauthor="ozheregelya" updated="2019-03-13 11:47:45.0"> <body><! CDATA -Case 4:- verified on indy-node 1.6.855 "" is invalid value for old_value field.    {code:java} pool(p1):wallet(w):did(V4S...e6f):indy> ledger custom {"reqId":11,"identifier":"V4SGRU86Z58d6TV7PBUe6f","operation":{"type":"120","constraint":{"constraint_id":"OR","auth_constraints": {"constraint_id":"ROLE","role":"0","sig_count":1,"need_to_be_owner":false,"metadata":{}},{"constraint_id":"ROLE","role":"2","sig_count":1,"need_to_be_owner":true,"metadata":{}},{"constraint_id":"ROLE","role":"101","sig_count":1,"need_to_be_owner":true,"metadata":{}} },"field":"role","auth_type":"1","auth_action":"EDIT","old_value":"","new_value":"101"},"protocolVersion":2} sign=true Transaction has been rejected: validation error  ClientAuthRuleOperation : empty string (old_value=) {code}    "" should be valid value (for example, for <None> role, in case of changing identity owned to any other role).  ></body> </Action>
<Action id="58094" issue="37682" author="ozheregelya" type="comment" created="2019-03-12 16:27:03.0" updateauthor="ozheregelya" updated="2019-03-12 16:27:52.0"> <body><! CDATA Load test results look good (when the auth rules are used from state, there is no performance degradation in comparison with indy-node 1.6.738: pool still is able to write 33 - 35 txns/sec).  !nym_perf_11032019_2.png|thumbnail!  ></body> </Action>
<Action id="58110" issue="37682" author="ozheregelya" type="comment" created="2019-03-13 11:18:16.0" updateauthor="ozheregelya" updated="2019-03-13 11:18:16.0"> <body><! CDATA Case 5: In case of Node txn validation for STEWARD role still presents even if the rule was changed. {code:java} pool(p1):wallet(w):did(V4S...e6f):indy> ledger custom {"reqId":111,"identifier":"V4SGRU86Z58d6TV7PBUe6f","operation":{"type":"120","constraint":{"constraint_id":"OR","auth_constraints": {"constraint_id":"ROLE","role":"101","sig_count":1,"need_to_be_owner":false,"metadata":{}} },"field":"services","auth_type":"0","auth_action":"EDIT","old_value":" 'VALIDATOR' ","new_value":"  "},"protocolVersion":2} sign=true pool(p1):wallet(w):did(V4S...e6f):indy> ledger custom {"reqId":111,"identifier":"V4SGRU86Z58d6TV7PBUe6f","operation":{"type":"120","constraint":{"constraint_id":"OR","auth_constraints": {"constraint_id":"ROLE","role":"101","sig_count":1,"need_to_be_owner":false,"metadata":{}} },"field":"services","auth_type":"0","auth_action":"EDIT","old_value":"  ","new_value":" 'VALIDATOR' "},"protocolVersion":2} sign=true pool(p1):wallet(w):did(UhQ...WAf):indy> ledger node target=4Tn3wZMNCvhSTXPcLinQDnHyj56DTLQtL61ki4jo2Loc alias=Node5 services= Transaction has been rejected: UhQ8PZG8muEPRYvMs9wWAf is not a steward so cannot update a node{code} Note that the problem appears only for demote/promote of nodes. Similar case for adding node works well.  ></body> </Action>
<Action id="58136" issue="37682" author="vladimirwork" type="comment" created="2019-03-14 09:49:09.0" updateauthor="vladimirwork" updated="2019-03-14 09:49:21.0"> <body><! CDATA Build Info: indy-node 1.6.858  Steps to Validate: 1. Try to send node txn (to add new node, not to demote existing one) with empty 'services' field.  Actual Results: Nodes with empty 'services' field are added successfully.  ></body> </Action>
<Action id="58185" issue="37682" author="vladimirwork" type="comment" created="2019-03-15 11:46:42.0" updateauthor="vladimirwork" updated="2019-03-15 11:47:15.0"> <body><! CDATA Case 5: Build Info: indy-node 1.6.861  Actual Results: {noformat} pool(docker):wallet(docker):did(V4S...e6f):indy> ledger custom {"reqId":111,"identifier":"V4SGRU86Z58d6TV7PBUe6f","operation":{"type":"120","constraint":{"constraint_id":"OR","auth_constraints": {"constraint_id":"ROLE","role":"101","sig_count":1,"need_to_be_owner":false,"metadata":{}} },"field":"services","auth_type":"0","auth_action":"EDIT","old_value":" 'VALIDATOR' ","new_value":"  "},"protocolVersion":2} sign=true Response:  {"op":"REPLY","result":{"rootHash":"42TDiKJNQiBegte8KMeQaCAMsHk1JjvqCHfgqkHnQUPx","txnMetadata":{"txnTime":1552647677,"seqNo":1},"ver":"1","txn":{"protocolVersion":2,"type":"120","data":{"auth_action":"EDIT","auth_type":"0","constraint":{"auth_constraints": {"metadata":{},"role":"101","need_to_be_owner":false,"constraint_id":"ROLE","sig_count":1} ,"constraint_id":"OR"},"field":"services","old_value":" 'VALIDATOR' ","new_value":"  "},"metadata":{"reqId":111,"from":"V4SGRU86Z58d6TV7PBUe6f","digest":"5d8ec44a9bda929d49ae1200b6a0a110526c6de07ea0259ee50d5c821e11ccb8"}},"auditPath":  ,"reqSignature":{"type":"ED25519","values": {"value":"3mFrSzSnr9ob3jrxsX2etSxpk953EnM629z2W3NeudkM2tdQZoJvWayf5QBTvzYoXfRkomrfDHcnTiVbjLBqXXzv","from":"V4SGRU86Z58d6TV7PBUe6f"} }}} pool(docker):wallet(docker):did(V4S...e6f):indy> ledger custom {"reqId":111,"identifier":"V4SGRU86Z58d6TV7PBUe6f","operation":{"type":"120","constraint":{"constraint_id":"OR","auth_constraints": {"constraint_id":"ROLE","role":"101","sig_count":1,"need_to_be_owner":false,"metadata":{}} },"field":"services","auth_type":"0","auth_action":"EDIT","old_value":"  ","new_value":" 'VALIDATOR' "},"protocolVersion":2} sign=true Response:  {"result":{"auditPath": "42TDiKJNQiBegte8KMeQaCAMsHk1JjvqCHfgqkHnQUPx" ,"txn":{"data":{"constraint":{"auth_constraints": {"metadata":{},"need_to_be_owner":false,"constraint_id":"ROLE","sig_count":1,"role":"101"} ,"constraint_id":"OR"},"old_value":"  ","auth_type":"0","auth_action":"EDIT","field":"services","new_value":" 'VALIDATOR' "},"protocolVersion":2,"metadata":{"reqId":111,"digest":"2c9b6753fed0ab65c6b4868b3cd7b8ab9826f9b65223177723638e8ee3ad7c6c","from":"V4SGRU86Z58d6TV7PBUe6f"},"type":"120"},"reqSignature":{"type":"ED25519","values": {"value":"4oxvQ8m4q8tadAiNkqy42j8tzrTMqSRNeMAKB4He4tyh99yZyJnBmuLKxKo6inABQDJTK4U2AAeBzDzumpWXE5aq","from":"V4SGRU86Z58d6TV7PBUe6f"} },"ver":"1","txnMetadata":{"txnTime":1552647697,"seqNo":2},"rootHash":"GGM8cUuqNnXT7Y6HYdgbMg8N9P592WTWfouAuX8D2EXo"},"op":"REPLY"} pool(docker):wallet(docker):did(V4S...e6f):indy> did use VnxoLY944SQjpctrfzWGaz Did "VnxoLY944SQjpctrfzWGaz" has been set as active pool(docker):wallet(docker):did(Vnx...Gaz):indy> ledger node target=4SWokCJWJc69Tn74VvLS6t2G2ucvXqM9FDMsWJjmsUxe alias=Node5 services= Transaction has been rejected: VnxoLY944SQjpctrfzWGaz is not a steward of node 4SWokCJWJc69Tn74VvLS6t2G2ucvXqM9FDMsWJjmsUxe {noformat}  Now we have another error here: new TA is not a Steward of Node5 but we have the rule that we should not be the owner to perform node demotion (just TA role is needed).  Expected Results: Node demotion should be successfull in this case.  ></body> </Action>
<Action id="58188" issue="37682" author="vladimirwork" type="comment" body="Case 5 will be fixed in scope of INDY-2024, all other cases was verified above." created="2019-03-15 13:03:54.0" updateauthor="vladimirwork" updated="2019-03-15 13:03:54.0"/>
