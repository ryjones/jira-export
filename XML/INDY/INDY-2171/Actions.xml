<Action id="62001" issue="41301" author="derashe" type="comment" created="2019-07-22 10:45:28.0" updateauthor="derashe" updated="2019-07-23 07:11:18.0"> <body><! CDATA PoA  For implementing such a functionality, we need to make changes to a few request handling modules. * Signature validation (validateClientMsg) - block, executed before static validation, where we check request's signature(s). We need to add more validaton to _getVerkey_ method. So it could validate message without identifier stored in ledger/state, in case this is nym request and return verkey from operation * Auth rules validation. ** New optional boolean field "non_ledger_did" added to the AuthAction and constraints structure.  ** Additional dynamic validation in nym_handler, so it will check if identifier == dest in case of non-ledger addition. It will also pass AuthAction with non_ledger_did==True in case identifier DID doesn't exist.  ** Validation for non_ledger_did at RolesAuthorizer ** New non_ledger_did AUTH_RULE flag ** By default, non_ledger_did will mostly be set as False. For now it seems reasonable to turn it on only for nym txn. * Cover this changes with tests. ** Unit and integration tests in indy-node and plenum ** Payment cases on plugin's side  ></body> </Action>
<Action id="62162" issue="41301" author="derashe" type="comment" created="2019-07-26 11:47:19.0" updateauthor="ashcherbakov" updated="2019-07-26 12:30:20.0"> <body><! CDATA Problem reason/description:  We need to implement non-ledger writing feature and ability to enable/disable it.   Changes:  Feature implemented by modifying signature verification and is configurable by auth_rules  PR:  https://github.com/hyperledger/indy-plenum/pull/1276    https://github.com/hyperledger/indy-node/pull/1396    https://github.com/sovrin-foundation/token-plugin/pull/283   Version: indy-node 1.9.1~dev1042  Recommendations for QA * tests for indy node: ** Ensure that a DID not present on the ledger can not create new NYMs by default. ** set AuthConstraint for nym transaction like: role=*, off_ledger_signature=True, sig_count=1. Ensure that nym that has not been written on ledger, can send nym txn of himself, with his signature included (that is it needs to be signed against the newly created key) ** set AuthConstraint for nym transaction like: role=*, off_ledger_signature=True, sig_count=2. Ensure that nym that has not been written on ledger, can send nym txn of himself, with his signature and someone's on-ledger did signature included. ** set AuthConstraint for nym transaction like: role=*, off_ledger_signature=True, sig_count=0. Ensure that nym that has not been written on ledger, can send nym txn of himself, with his signature included. ** set AuthConstraint for nym transaction like: role=*, off_ledger_signature=False, sig_count=1. Ensure that this nym cannot send txn. * test for plugins: ** set AuthConstraint for nym transaction like: role=trustee OR role = '*' off_ledger_signature=True metadata=\{plguin_requirements: amount}. Ensure that trustee can write nym without plugin requirements and that off-ledger nym can write only with satisfying plugin requirements  ></body> </Action>
<Action id="62164" issue="41301" author="ashcherbakov" type="comment" created="2019-07-26 12:33:54.0" updateauthor="ashcherbakov" updated="2019-07-26 12:33:54.0"> <body><! CDATA Also please note, that * `off_ledger_signature=True ` can be set for any ( * ) role only. * An off-ledger DID must sign the txn by the newly created DID (that is identifier=dest and signature is created against verkey). Otherwise signature verification will not pass. * GET_AUTH_RULE reply contains the new `off_ledger_signature` field regardless of whether it has been ever set for a rule.     ></body> </Action>
<Action id="62237" issue="41301" author="vladimirwork" type="comment" created="2019-07-29 20:01:51.0" updateauthor="vladimirwork" updated="2019-07-29 20:01:51.0"> <body><! CDATA Build Info: 1.9.1~dev1043 plugins 1.0.1~dev69  Build Info: 1. Set AuthConstraint for nym transaction like: role=*, off_ledger_signature=True, sig_count=1. Ensure that nym that has not been written on ledger, can send nym txn of himself, with his signature included (that is it needs to be signed against the newly created key). 2. Set AuthConstraint for nym transaction like: role=*, off_ledger_signature=True, sig_count=2. Ensure that nym that has not been written on ledger, can send nym txn of himself, with his signature and someone's on-ledger did signature included. 3. Set AuthConstraint for nym transaction like: role=*, off_ledger_signature=True, sig_count=0. Ensure that nym that has not been written on ledger, can send nym txn of himself, with his signature included. 4. Set AuthConstraint for nym transaction like: role=*, off_ledger_signature=False, sig_count=1. Ensure that this nym cannot send txn. 5. Set AuthConstraint for nym transaction like: role=trustee OR role = '*' off_ledger_signature=True metadata={plguin_requirements: amount}. Ensure that trustee can write nym without plugin requirements and that off-ledger nym can write only with satisfying plugin requirements.  Actual Results: Feature works as expected.  ></body> </Action>
