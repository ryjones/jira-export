<Action id="52520" issue="34601" author="spivachuk" type="comment" created="2018-10-22 14:00:45.0" updateauthor="spivachuk" updated="2018-10-23 13:48:36.0"> <body><! CDATA *Issue #1*  The structure of a write request incoming in a Propagate or in a MessageRep with a Propagate is validated against the schema several times. This is redundant and time-consuming.  *Issue #2*  Now static validation ({{Node.doStaticValidation}}) is always performed for a write request received from a client and is never performed for a write request received from a node in a Propagate or a MessageRep with a Propagate. It is an issue because if a request is received only from nodes in Propagates and / or MessageReps with Propagates then static validation is not done. Static validation must be performed one time for a write request received from a client and all its Propagates received from nodes and this validation must be performed when the node sees the request for the first time.  *Issue #3*  Static validationÂ ({{Node.doStaticValidation}}) is not performed and the signature is not verified for a write request received in a MessageRep with a Propagate.  ></body> </Action>
<Action id="52521" issue="34601" author="spivachuk" type="comment" created="2018-10-22 14:01:47.0" updateauthor="spivachuk" updated="2018-10-22 14:01:47.0"> <body><! CDATA *PoA for Issue #1:*  Replace constructing of a SafeRequest instance with constructing of a Request instance in {{Node.verifySignature}}, {{Node.processPropagate}} and {{PropagateHandler.create}} methods to eliminate redundant validations of the request structure. (The request structure is validated earlier - in scope of constructing the Propagate instance.)  ></body> </Action>
<Action id="52528" issue="34601" author="spivachuk" type="comment" created="2018-10-22 17:00:36.0" updateauthor="spivachuk" updated="2018-10-23 14:54:24.0"> <body><! CDATA *PoA for Issues #2 and #3:*  Now we perform schema validation, static validation ({{Node.doStaticValidation}}) and signature verification when processing incoming messages from ZStack level. This makes it impossible to use {{Propagator.requests}} map for skipping validation of already validated requests. This is so because a node handles ZStack queues and inBox queues sequentially. Thus multiple ZStack-level messages representing the same client request can be processed in one pass while the corresponding typed messages being created are just enqueued to inBox and not processed synchronously. So {{Propagator.requests}} map will not be populated at this step (it is populated when typed messages from inBox are processed). Now, to avoid repeated signature verification, such the workflow makes us to maintain additional map of authenticated requests ({{ReqAuthenticator}} maintains this map).  If we move static validation ({{Node.doStaticValidation}}) and signature verification from the step of processing incoming ZStack-level messages to the step of processing typed inBox-level messages, then we will be able to ensure single-time static validation / signature verification (on the first reception of a request either from a client or as a Propagate from a node) with use of {{Propagator.requests}} map only. No additional maps of validated requests will be needed. By the way, this will fix the issue with a lack of static validation and signature verification for a request received in a MessageRep with a Propagate.  The plan for this fix is as follows: * Perform only validation against a schema in {{Node.handleOneClientMsg}} and {{Node.handleOneNodeMsg}} methods. * In {{Node.processClientRequest}}, {{Node.processNodeRequest}} and {{Node.processPropagate}} methods: *# Perform static validation ({{Node.doStaticValidation}}) and signature verification if in {{Propagator.requests}} there is no ReqState for the request digest or if there is a ReqState for this digest but the request signature in it is different. *# If both static validation and signature verification succeed (this may happen only in case there is no ReqState for the request digest in {{Propagator.requests}}) then add the ReqState for the request digest to {{Propagator.requests}}. * Remove the additional map of authenticated requests and its usage from {{ReqAuthenticator}} class.  ></body> </Action>
<Action id="52545" issue="34601" author="spivachuk" type="comment" body="Created INDY-1768 for fixing *Issues #2 and #3*." created="2018-10-23 14:57:25.0" updateauthor="spivachuk" updated="2018-10-23 15:52:03.0"/>
<Action id="52547" issue="34601" author="spivachuk" type="comment" created="2018-10-23 15:51:46.0" updateauthor="spivachuk" updated="2018-10-23 15:51:46.0"> <body><! CDATA *Changes:* - Made changes according to PoA for *Issue #1*.  *PRs:* -  https://github.com/hyperledger/indy-plenum/pull/953  -  https://github.com/hyperledger/indy-node/pull/994   *Version:* - indy-node 1.6.642-master - indy-plenum 1.6.569-master  *Risk factors:* - Nothing is expected.  *Risk:* - Low  *Covered with tests:* - {{test_schema_validation_for_request_from_client}} - {{test_request_schema_validation_for_propagate}}  ></body> </Action>
<Action id="52592" issue="34601" author="nataliadracheva" type="comment" created="2018-10-24 14:28:31.0" updateauthor="nataliadracheva" updated="2018-10-24 14:28:31.0"> <body><! CDATA *Scenario 1:* *Build version:*  indy-node: 1.6.645 indy-plenum: 1.6.570 *Test description:* Verify the static validation cases. *Preconditions:* Docker pool of 4 nodes. *Steps to validate:* # Run indy-cli. # Connect to the pool. # Send requests to the pool: * Send a valid write request (e.g. nym). * Send a valid custom request. * Send invalid custom requests: ** with an unexpected field; ** without a mandatory field; ** with a typo in a field name; ** with a typo in a field value.  ** without a signature where it is required (e.g. for nym request).  *Expected results:* Pool responds with expected success replies in case of correct requests and throws errors when invalid requests are sent. *Actual results:* Pool responds with expected success replies in case of correct requests and throws errors when invalid requests are sent. (/) *Additional info:*   ^indy_cli.log   Scheduled a performance test for this ticket.  ></body> </Action>
