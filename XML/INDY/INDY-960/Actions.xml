<Action id="36020" issue="24436" author="spivachuk" type="comment" created="2017-12-08 16:04:55.0" updateauthor="spivachuk" updated="2017-12-08 16:05:41.0"> <body><! CDATA Problem state / reason: - The issue with recovering Merkle tree was fixed in scope of INDY-893. - The issue with warnings about that a node is trying to commit a batch with a particular state root but no uncommitted found was caused by a missed call of {{Node.onBatchCreated}} method on re-applying a batch prior to ordering before ledgers synchronization in case the batch was rejected previously due to catch-up start. This resulted in absence of the batch in {{IdrCache.uncommitted}} list when the batch was being ordered by the node. - The issue with warnings about {{IndexError}} was revealed by the previous one and caused by a missed {{return}} statement in {{IdrCache.onBatchCommitted}} method.  Changes: - Fixed a bug with a missed {{return}} statement in {{IdrCache.onBatchCommitted}} method. - Fixed a bug with a missed call of {{Node.onBatchCreated}} method on re-applying a batch prior to ordering before ledgers synchronization in case the batch was rejected previously due to catch-up start. - Wrote a test verifying that a batch rejected due to catch-up start can be successfully re-applied and ordered later before ledgers synchronization without any warnings.  Committed into: - https://github.com/hyperledger/indy-plenum/pull/474 - https://github.com/hyperledger/indy-node/pull/474 - https://github.com/hyperledger/indy-node/pull/481 - indy-plenum 1.2.193 master - indy-node 1.2.229 master  Risk factors: - Nothing is expected.  Risk: - Low  Covered with tests: - {{test_batch_rejected_on_catchup_start_can_be_ordered_before_ledgers_sync}}  ></body> </Action>
<Action id="36626" issue="24436" author="vladimirwork" type="comment" created="2017-12-12 14:00:43.0" updateauthor="vladimirwork" updated="2017-12-12 14:00:43.0"> <body><! CDATA Build Info: indy-node 1.2.234  Steps to Validate: 1. Install pool of 4 nodes. 2. Place load test files to /home/indy at any node (e.g. Node 1). 3. Run `python3 add_keys.py Steward1 000000000000000000000000Steward1`. 4. Run `python3 load_test.py -c 10 -r 1000` as indy user (works). 5. Run `python3 load_test.py -c 20 -r 2000` as indy user (works).  Actual Results: Pool works normally. Both scripts run successfully. All nodes have the same domain ledger txn count after scripts' running.  ></body> </Action>
