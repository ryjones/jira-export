<Action id="57922" issue="38026" author="toktar" type="comment" created="2019-03-06 12:18:54.0" updateauthor="toktar" updated="2019-03-06 12:18:54.0"> <body><! CDATA  ~esplinr    We can add one command, which with all parameters produces a specific record from the auth_rule map, and without parameters, gives the entire auth_rule map. Also, we can add a filter. When sending not a complete list of parameters, return all entries that match. That is, when sending only auth_txn= NYM, the client receives a list of records related to the NYM transaction.  ></body> </Action>
<Action id="57944" issue="38026" author="esplinr" type="comment" created="2019-03-06 18:31:15.0" updateauthor="esplinr" updated="2019-03-06 18:49:47.0"> <body><! CDATA Great thinking  ~Toktar  and  ~Artemkaaas . I think having one command that both returns a single auth rule or all auth rules is an improvement to what I proposed.  It sounds useful to also have a capability to filter for arbitrary matching, but we don't yet know how people will want to use this command and we don't have a common use case that requires the filter. I propose that we avoid that work until people ask for it, and then extend the command. But please consider this idea as a possible future enhancement during the implementation so that in the future it wouldn't be harder than necessary.  ></body> </Action>
<Action id="58085" issue="38026" author="toktar" type="comment" created="2019-03-12 12:35:58.0" updateauthor="toktar" updated="2019-03-12 12:58:36.0"> <body><! CDATA *PoA:*  Add the GET_AUTH_RULE command to get a constraint for an authentication rule or a full list of rules from Ledger by the auth key parameters. Two options are possible in a request build: *1) Getting one rule.* If the request has a full list of parameters (or without `old_value`), then the reply will contain one constraint for this key. If the key was found in the state (ledger has a transaction to change rule with this key) then pool return the rule (constraints for the key), the serialized key and a consistency proof for the found transaction. If the key was not found in the state, a client will receive rule from static auth_rule map and the serialized key without a consistency proof. A key is an authenticated action in the format {code}action--auth_type--field--old_value--new_value{code} Request Example: {code:java} {   'reqId':572495653, 'signature':'366f89ehxLuxPySGcHppxbURWRcmXVdkHeHrjtPKNYSRKnvaxzUXF8CEUWy9KU251u5bmnRL3TKvQiZgjwouTJYH', 'identifier':'M9BJDuS24bqbJNvBRsoGg3', 'operation':{   'field':'role', 'new_value':'101', 'type':'121', 'auth_type':'1', 'auth_action':'ADD' }, 'protocolVersion':2 } {code}  Response Example: {code:java} {   'op':'REPLY', 'result':{   'type':'121', 'auth_type':'1', 'reqId':441933878, 'identifier':'M9BJDuS24bqbJNvBRsoGg3', 'new_value':'101', 'data':{   'ADD--1--role--*--101':{   'auth_constraints':    {   'sig_count':1, 'role':'0', 'constraint_id':'ROLE', 'need_to_be_owner':False, 'metadata':{    } }, {   'sig_count':1, 'role':'2', 'constraint_id':'ROLE', 'need_to_be_owner':False, 'metadata':{    } }  , 'constraint_id':'AND' } }, 'field':'role', 'state_proof':{   'proof_nodes':'+Pz4+pUgQURELS0xLS1yb2xlLS0qLS0xMDG44vjguN57ImF1dGhfY29uc3RyYWludHMiOlt7ImNvbnN0cmFpbnRfaWQiOiJST0xFIiwibWV0YWRhdGEiOnt9LCJuZWVkX3RvX2JlX293bmVyIjpmYWxzZSwicm9sZSI6IjAiLCJzaWdfY291bnQiOjF9LHsiY29uc3RyYWludF9pZCI6IlJPTEUiLCJtZXRhZGF0YSI6e30sIm5lZWRfdG9fYmVfb3duZXIiOmZhbHNlLCJyb2xlIjoiMiIsInNpZ19jb3VudCI6MX1dLCJjb25zdHJhaW50X2lkIjoiQU5EIn0=', 'root_hash':'DauPq3KR6QFnkaAgcfgoMvvWR6UTdHKZgzbjepqWaBqF', 'multi_signature':{   'signature':'RNsPhUuPwwtA7NEf4VySCg1Fb2NpwapXrY8d64TLsRHR9rQ5ecGhRd89NTHabh8qEQ8Fs1XWawHjbSZ95RUYsJwx8PEXQcFEDGN3jc5VY31Q5rGg3aeBdFFxgYo11cZjrk6H7Md7N8fjHrKRdxo6TzDKSszJTNM1EAPLzyC6kKCnF9', 'value':{   'state_root_hash':'DauPq3KR6QFnkaAgcfgoMvvWR6UTdHKZgzbjepqWaBqF', 'pool_state_root_hash':'9L5CbxzhsNrZeGSJGVVpsC56JpuS5DGdUqfsFsR1RsFQ', 'timestamp':1552395470, 'txn_root_hash':'4CowHvnk2Axy2HWcYmT8b88A1Sgk45x7yHAzNnxowN9h', 'ledger_id':2 }, 'participants':    'Beta', 'Gamma', 'Delta'   } }, 'auth_action':'ADD' } {code} *2) Getting all rules.* If the request are not contain fields other than txn_type, the response will contain a full list of authentication rules. A consistency proof will not contained in a reply. Request Example: {code:java} {   'reqId':575407732, 'signature':'4AheMmtrfoHuAEtg5VsFPGe1j2w1UYxAvShRmfsCTSHnBDoA5EbmCa2xZzZVQjQGUFbYr65uznu1iUQhW22RNb1X', 'identifier':'M9BJDuS24bqbJNvBRsoGg3', 'operation':{   'type':'121' }, 'protocolVersion':2 } {code}  Response Example: {code:java} {   'op':'REPLY', 'result':{   'reqId':575407732, 'type':'121', 'data':{   'ADD--118--action--*--*':{   'constraint_id':'ROLE', 'sig_count':1, 'metadata':{    }, 'need_to_be_owner':False, 'role':'0' }, 'EDIT--1--role--0--':{   'constraint_id':'ROLE', 'sig_count':1, 'metadata':{    }, 'need_to_be_owner':False, 'role':'0' }, ... }, 'identifier':'M9BJDuS24bqbJNvBRsoGg3' } } {code}  ></body> </Action>
<Action id="58173" issue="38026" author="toktar" type="comment" created="2019-03-15 09:02:16.0" updateauthor="toktar" updated="2019-03-15 09:02:16.0"> <body><! CDATA *Problem reason:* - No command to get current authentication rule or all authentication rules.  *Changes:* - Added a command GET_AUTH_RULE="121" which with all parameters for an authentication key returns a constraint for this key. And without any parameters (only txn_type) returns all list of authentication rules  *PR:* *  https://github.com/hyperledger/indy-node/pull/1200  *  https://github.com/hyperledger/indy-plenum/pull/1126  *  https://github.com/hyperledger/indy-plenum/pull/1121   *Version:* * indy-node 1.6.861 -master * (indy-plenum 1.6.726 -master)  *Risk factors:* - Problem with a new command  *Risk:* - No  *Test:* *  test_get_auth_rule.py|https://github.com/hyperledger/indy-node/pull/1200/files#diff-f03e515138eaf1a7305699c31b0b06e7  *  get_auth_rule_handler.py|https://github.com/hyperledger/indy-node/pull/1200/files#diff-73f4439b8c963b9c5b57ab5249786889   *Recommendations for QA:* * Send GET_AUTH_RULE without parameters after pool start. Compare with rules from  https://github.com/hyperledger/indy-node/blob/master/docs/source/auth_rules.md  * Send GET_AUTH_RULE with parameters for an authentication key. Compare with  auth_rules.md|https://github.com/hyperledger/indy-node/blob/master/docs/source/auth_rules.md  * Write an AUTH_RULE txn.  ** Send GET_AUTH_RULE  for this key, check the rule. ** Send GET_AUTH_RULE  for getting all rules, check the changed rule.  ></body> </Action>
<Action id="58194" issue="38026" author="vladimirwork" type="comment" created="2019-03-15 15:14:06.0" updateauthor="vladimirwork" updated="2019-03-15 15:18:48.0"> <body><! CDATA Build Info: indy-node 1.6.861  Steps to Validate: 1. Run getting one rule txn for different fields, new values, auth actions. 2. Run getting all rules txn. 3. Write some rules in the ledger and repeat steps 1 and 2. 4. Check 'data' field for each response.  Actual Results: All txns return data accoding to filter in case of getting one rule txn and all rules in case of getting all txn (`ledger custom` txn was used since libindy and indy-cli don't support this txn yet so addditional checks will be performed ans system test will be implemented in scope of IS-1202).  ></body> </Action>
