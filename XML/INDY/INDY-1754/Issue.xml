<Issue id="34606" key="INDY-1754" number="1754" project="10303" reporter="gdshaw" assignee="toktar" creator="gdshaw" type="10004" summary="Function plenum.common.util.randomString does not return fully random result" environment="Testing was performed against libnacl 1.6.1, however Nettitude would expect the outcome to be the same regardless of the environment." priority="4" resolution="10000" status="10001" created="2018-10-11 15:43:07.0" updated="2019-03-29 20:35:02.0" resolutiondate="2019-03-29 20:35:02.0" votes="0" watches="3" workflowId="46009"> <description><! CDATA There is an off-by-one error in the function plenum.common.util.randomString which means that returned values containing an odd number of hex digits cannot end with an 'F'.  This occurs because the final digit is obtained by evaluating the expression randombytes_uniform(15). The intent was presumably to obtain a number between 0 and 15 inclusive, however the function interprets its argument as an exclusive upper bound, therefore the value 15 can never be generated.  To test this, Nettitude generated 100,000 values using randomString each with 3 hex digits, then counted the number of occurrences of each value. As expected, no results ending in an 'F' were observed.  The effect is to reduce the entropy of generated values by approximately 0.1 bits compared to a random number generator with a uniform distribution. It is very unlikely that this would ever make the difference between a vulnerability being exploitable or not, however a fix is recommended on the grounds that the code does not behave as expected.  ></description> </Issue>
