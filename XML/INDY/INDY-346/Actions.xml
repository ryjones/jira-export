<Action id="27789" issue="18756" author="andrey.goncharov" type="comment" created="2017-07-03 14:49:45.0" updateauthor="andrey.goncharov" updated="2017-07-03 14:49:45.0"> <body><! CDATA I'd like to weigh in: # We can specify sovrin-packaging to use for building the artifact in Jenkinsfile (it can be as simple as a hash of a commit in sovrin-packaging)  # We can move post-install and pre-install hooks from sovrin-packaging to corresponding repos, leaving sovrin-packaging with only common build logic  ></body> </Action>
<Action id="27793" issue="18756" author="andkononykhin" type="comment" created="2017-07-03 18:58:11.0" updateauthor="andkononykhin" updated="2017-07-03 18:58:11.0"> <body><! CDATA It seems reasonable and helpful, and in general I don't mind moving mentioned things (as well as I guess lists of excluded files/dirs) but I'm not sure that it follows widely used practice.  Why do we need to publish our way of package maintenance? It's not a secret but it's our own way. What if someone wants to build package for non-systemd oses?  ></body> </Action>
<Action id="27797" issue="18756" author="devin-fisher" type="comment" created="2017-07-03 22:00:38.0" updateauthor="devin-fisher" updated="2017-07-03 22:00:38.0"> <body><! CDATA  ~andrey.goncharov  We should be able to reproduce a build with a git tag (not a deb manifest) or what is the point of having them.  We create magic If we maintain the git hash to a separate repo in the built repo.  We want to a developer of INDY to be able to do all of their work reading the code in repo they are working on. I wonder if its worth a lot of custom effort it just to maintain common build logic. How much logic do we envision having? From what I can see there is not much logic in sovrin-packaging that deals with build activities. Most of the complexity of pack_debs.py is dealing with non-uniformity (deb-build.json).  The rest of the repo is dealing with publishing to DEB repos which is not needed to reproducible builds.  Additionally, we hope to move to two main repos in INDY soon. So I question is it worth maintaining common logic when that logic should be a little orchestration and an fpm command.  We want any build we do to be reproducible. Not just the DEB file builds we do now.   ~andkononykhin  We have to be open about the process that we use for INDY or we (evernym or DSR) will be the only ones that can work on the build side of the project. But we don't want that. It would be nice if a lot of people could work on it. The Linux Foundation has full-time employees that share this burden in the future. But only if we build it in a way that is open.  Also, can you elaborate what you mean by "follows widely used practice." I'd like to understand that.     ></body> </Action>
<Action id="27822" issue="18756" author="andkononykhin" type="comment" created="2017-07-04 11:10:10.0" updateauthor="andkononykhin" updated="2017-07-04 11:10:10.0"> <body><! CDATA  ~devin-fisher  {quote}Also, can you elaborate what you mean by "follows widely used practice." I'd like to understand that.{quote} It's my impression after checking several repos with source code. I haven't seen packages build routine. I think install routine without packaging is more frequent case. {quote}We have to be open about the process that we use for INDY or we (evernym or DSR) will be the only ones that can work on the build side of the project. {quote} I think you are right but it's not only lack of sharing build routine. I think it's more lack of docs problem.   ~alexander.shekhovcov  is working on moving from fpm in scope of INDY-344 and it seems that it's better to wait his solution before making decision about current task implementation.  ></body> </Action>
<Action id="28319" issue="18756" author="alexander.shekhovcov" type="comment" created="2017-07-13 15:08:53.0" updateauthor="alexander.shekhovcov" updated="2017-07-13 15:09:18.0"> <body><! CDATA PoA: * place the build scripts in the repos indy-node, indy-plenum, indy-anoncreds * leave building 3rd parties (base58, pbc, reat, ...) in the private repo sovrin-packaging * leave uploading scripts in the private repo sovrin-packaging  ></body> </Action>
<Action id="28399" issue="18756" author="andkononykhin" type="comment" body="Assigned to me temporarily: need to improve jenkins scripts to support in-repo defined logic of debs build " created="2017-07-14 14:31:29.0" updateauthor="andkononykhin" updated="2017-07-14 14:31:29.0"/>
<Action id="28571" issue="18756" author="alexander.shekhovcov" type="comment" created="2017-07-18 13:11:53.0" updateauthor="alexander.shekhovcov" updated="2017-07-18 13:12:30.0"> <body><! CDATA (/) *Problem reason:* - deb packages are not reproducible  *Changes:* - place the build logic in the repos: indy-node, indy-plenum, indy-anoncreds - change maintainer fields - copy packages from repo.evernym.com to repo.sovrin.org because the maintainer field was changed  - other build enhancements  *Committed into:* https://github.com/hyperledger/indy-plenum/pull/280 https://github.com/hyperledger/indy-anoncreds/pull/73 https://github.com/hyperledger/indy-node/pull/237 https://github.com/evernym/sovrin-packaging/tree/feature/reproducible-build https://github.com/evernym/jenkins-shared/tree/test  indy-anoncreds 0.4.16+ indy-node 0.4.41+ indy-plenum 0.4.58+  *Risk factors:* Installation / removing deb packages.  *Risk:*  Low  *Covered with tests:* Testing is not supposed.  *Recommendations for QA:* 1. Install indy-node and do common checks 2. Remove indy-node indy-anoncreds indy-plenum. Removing should not generate any errors and warning    ></body> </Action>
<Action id="28767" issue="18756" author="vladimirwork" type="comment" created="2017-07-21 08:28:54.0" updateauthor="vladimirwork" updated="2017-07-21 08:28:54.0"> <body><! CDATA Build Info: sovrin 0.2.11 indy-node 0.4.53 indy-anoncreds 0.4.18 indy-plenum 0.4.64  Steps to Validate: 1. Install sovrin pool and do common checks (send and get NYMs). 2. Remove sovrin -> indy-node -> indy-anoncreds -> indy-plenum. 3. Remove indy-plenum on other node.  Actual Results: There are no errors/warnings due to installation and removal of packages. Removal of underlying packages also removes all upper packages.  ></body> </Action>
<Action id="28808" issue="18756" author="danielhardman" type="comment" created="2017-07-21 16:00:12.0" updateauthor="danielhardman" updated="2017-07-21 16:00:12.0"> <body><! CDATA  ~VladimirWork , I don't understand how the test procedure that you described will prove that builds are reproducible. My assumption about testing is that we'd use a procedure sort of like this: * do a build * allow code to evolve * do another build that references the same code commits as the original * prove that the second build produces a package that is identical to the first one, except perhaps for timestamps and similar noise  ></body> </Action>
<Action id="28877" issue="18756" author="alexander.shekhovcov" type="comment" created="2017-07-24 08:50:10.0" updateauthor="alexander.shekhovcov" updated="2017-07-24 09:37:58.0"> <body><! CDATA  ~VladimirWork  I suggest the following procedure: # Clone indy-node sources ** {{git clone git@github.com:hyperledger/indy-node.git}} # Checkout the 0.4.53-master tag ** {{cd indy-node && git checkout 0.4.53-master}} # Make the build using docker ** remove "-dev" prefixes in setup.py ** set __version__=(0,4,53) in_ _metadata__.py ** {{cd build-scripts/ubuntu-1604 && ./build-indy-node-docker.sh <ablosute path to cloned repo>}} # Compare deb from CI and just built deb   *  ** docker run -it --rm -v indy-node-deb-u1604:/build ubuntu:16.04 bash ** apt update && apt install wget mc ** wget  https://repo.sovrin.org/deb/pool/xenial/master/i/indy-node/indy-node_0.4.53_amd64.deb  ** open mc and compare content of just downloaded deb and the deb file in the /build/ folder  Post the difference here and let's discuss.        ></body> </Action>
<Action id="28880" issue="18756" author="vladimirwork" type="comment" body="Differences are in attachment. !debian_control.PNG|thumbnail!  !debian_md5sums.PNG|thumbnail!  !info.PNG|thumbnail!  !manifest.PNG|thumbnail! " created="2017-07-24 10:40:28.0" updateauthor="vladimirwork" updated="2017-07-24 10:40:28.0"/>
<Action id="28886" issue="18756" author="alexander.shekhovcov" type="comment" created="2017-07-24 11:39:37.0" updateauthor="alexander.shekhovcov" updated="2017-07-24 13:50:31.0"> <body><! CDATA We still have a part of the build code which lives in CI and sets up source code before build. The build code does: # replacing `-dev` suffix in setup.py # creating manifest.txt # altering some dependencies for indy-node because automatic adding `python3-*` makes indy-node dependent on python3-python-dateutil which does not exist. So we have to use `sed` to replace some lines in setup.py.   ~devin-fisher   ~danielhardman  Could we assume the ticket resolved with the above assumptions?  It is fairly simple to move those steps in the build scripts but testing can take time. I concern about what we can finish testing before MGL.   ></body> </Action>
<Action id="29229" issue="18756" author="alexander.shekhovcov" type="comment" created="2017-07-31 13:21:46.0" updateauthor="alexander.shekhovcov" updated="2017-08-03 15:15:28.0"> <body><! CDATA PRs: https://github.com/hyperledger/indy-plenum/pull/313 https://github.com/hyperledger/indy-node/pull/267 https://github.com/hyperledger/indy-anoncreds/pull/84 https://github.com/sovrin-foundation/sovrin/pull/7  Waiting when the master branch is unblocked.  *How to test:* 1. download the latest packages https://repo.sovrin.org/deb/pool/xenial/master/i/ https://repo.sovrin.org/deb/pool/xenial/master/s/sovrin/ 2. checkout master branches 3. make local builds  {code} build-scripts/ubuntu-1604/build-<package name>-docker.sh <path-to-sources> <version>  {code} Run a container and attach a volume {code} docker run -it --rm -v <package name>-deb-u1604:/build ubuntu:16.04 {code}  4. compare local builds with CI builds  repos: indy-anoncreds indy-plenum indy-node sovrin  I expect difference in some dates for example in changelog.gz. Anyway let's discuss here the got difference.        ></body> </Action>
<Action id="29403" issue="18756" author="alexander.shekhovcov" type="comment" created="2017-08-03 13:55:09.0" updateauthor="alexander.shekhovcov" updated="2017-08-03 13:55:09.0"> <body><! CDATA Ready for testing: indy-anoncreds 1.0.23+ indy-plenum 1.0.82+ indy-node 1.0.75+ sovrin 1.0.18+  ></body> </Action>
<Action id="29445" issue="18756" author="vladimirwork" type="comment" body="Differences are in attachment. !_deb_size_diff.PNG|thumbnail!  !_info_diff.PNG|thumbnail!  !_md5_diff.PNG|thumbnail!  !_plenum_manifest_diff.PNG|thumbnail!  !_sourcestxt_diff.PNG|thumbnail! " created="2017-08-04 10:31:14.0" updateauthor="vladimirwork" updated="2017-08-04 10:31:14.0"/>
<Action id="29448" issue="18756" author="vladimirwork" type="comment" body="  ^ci-builds.tar.gz    ^docker-builds.tar.gz  " created="2017-08-04 10:46:00.0" updateauthor="vladimirwork" updated="2017-08-04 10:46:00.0"/>
<Action id="29451" issue="18756" author="vladimirwork" type="comment" created="2017-08-04 13:26:38.0" updateauthor="vladimirwork" updated="2017-08-04 13:26:38.0"> <body><! CDATA Build Info: indy-node 1.0.76 sovrin 1.0.18 indy-plenum 1.0.82 indy-anoncreds 1.0.24  Steps to Validate: 1. Get the CI builds:  wget https://repo.sovrin.org/deb/pool/xenial/master/i/indy-node/indy-node_1.0.76_amd64.deb wget https://repo.sovrin.org/deb/pool/xenial/master/s/sovrin/sovrin_1.0.18_amd64.deb wget https://repo.sovrin.org/deb/pool/xenial/master-latest/i/indy-plenum/indy-plenum_1.0.82_amd64.deb wget https://repo.sovrin.org/deb/pool/xenial/master-latest/i/indy-anoncreds/indy-anoncreds_1.0.24_amd64.deb  2. Get the sources of the same versions and build it with docker:  git clone https://github.com/hyperledger/indy-node.git cd indy-node && git checkout 1.0.76-master cd build-scripts/ubuntu-1604 && ./build-indy-node-docker.sh /home/sovrin/indy-node/ 1.0.76  git clone https://github.com/hyperledger/sovrin.git cd sovrin && git checkout 1.0.18-master cd build-scripts/ubuntu-1604 && ./build-sovrin-docker.sh /home/sovrin/sovrin/ 1.0.18  git clone https://github.com/hyperledger/indy-plenum.git cd indy-plenum && git checkout 1.0.82-master cd build-scripts/ubuntu-1604 && ./build-indy-plenum-docker.sh /home/sovrin/indy-plenum/ 1.0.82  git clone https://github.com/hyperledger/indy-anoncreds.git cd indy-anoncreds && git checkout 1.0.24-master cd build-scripts/ubuntu-1604 && ./build-indy-anoncreds-docker.sh /home/sovrin/indy-anoncreds/ 1.0.24  3. Get the docker builds:  docker run -it --rm -v indy-node-deb-u1604:/build ubuntu:16.04 docker cp f4b08d15a8ad:/build/indy-node_1.0.76_amd64.deb /home/sovrin/docker-builds/indy-node_1.0.76_amd64.deb  docker run -it --rm -v sovrin-deb-u1604:/build ubuntu:16.04 docker cp 4439ff24b064:/build/sovrin_1.0.18_amd64.deb /home/sovrin/docker-builds/sovrin_1.0.18_amd64.deb  docker run -it --rm -v indy-plenum-deb-u1604:/build ubuntu:16.04 docker cp e059d2bcde58:/build/indy-plenum_1.0.82_amd64.deb /home/sovrin/docker-builds/indy-plenum_1.0.82_amd64.deb  docker run -it --rm -v indy-anoncreds-deb-u1604:/build ubuntu:16.04 docker cp 4c5cca29718d:/build/indy-anoncreds_1.0.24_amd64.deb /home/sovrin/docker-builds/indy-anoncreds_1.0.24_amd64.deb  4. Compare CI and docker builds.  Actual Results: There are whole deb size differences only, but not in each file size inside it and the content of files is the same in each build pair. The deb size differences can be caused by the different compression actions during the build process with CI and Docker and it can be investigated additionally if needed.  ></body> </Action>
