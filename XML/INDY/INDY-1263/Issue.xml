<Issue id="29294" key="INDY-1263" number="1263" project="10303" reporter="ozheregelya" creator="ozheregelya" type="10004" summary=" QA  Script for filling the ledger doesn&apos;t work" priority="3" status="10200" created="2018-04-09 17:50:43.0" updated="2018-04-23 09:04:40.0" votes="0" watches="2" workflowId="29299"> <description><! CDATA Steps to Reproduce: 1. Set up the pool. 2. Make sure that it works by sending several transactions. 3. Stop the pool. 4. Set yourself as indy user. 5. Run the generate_txns.py script. 6. Run the add_json_txns_to_ledger.py.  Actual Results: {code:java} ubuntu@californiaQALarge1:~/txn_add$ sudo python3 add_json_txns_to_ledger.py txns100K1  2018-04-08 11:37:57,866 | DEBUG | __init__.py ( 59) | register | Registered VCS backend: git 2018-04-08 11:37:57,920 | DEBUG | __init__.py ( 59) | register | Registered VCS backend: hg 2018-04-08 11:37:57,979 | DEBUG | __init__.py ( 59) | register | Registered VCS backend: svn 2018-04-08 11:37:57,979 | DEBUG | __init__.py ( 59) | register | Registered VCS backend: bzr NODE_NAME=Node1 NODE_PORT=9701 NODE_CLIENT_PORT=9702 CLIENT_CONNECTIONS_LIMIT=15360 2018-04-08 11:37:58,486 | DEBUG | ledger.py ( 207) | start | Starting ledger... 2018-04-08 11:37:58,492 | DEBUG | ledger.py ( 78) | recoverTree | Recovering tree from hash store of size 18 2018-04-08 11:37:58,492 | DEBUG | ledger.py ( 88) | recoverTree | Recovered tree in 0.0003837309777736664 seconds 2018-04-08 11:37:58,512 | DEBUG | ledger.py ( 207) | start | Starting ledger... 2018-04-08 11:37:58,517 | DEBUG | ledger.py ( 78) | recoverTree | Recovering tree from hash store of size 15 2018-04-08 11:37:58,518 | DEBUG | ledger.py ( 88) | recoverTree | Recovered tree in 0.000365738058462739 seconds 2018-04-08 11:37:58,518 | INFO | pool_manager.py ( 425) | _set_node_order | Node1 sets node Node1 (Gw6pDLhcBcoQesN72qfotTgFa7cbuqZpkX3Xo6pLhPhv) order to 5 2018-04-08 11:37:58,518 | INFO | pool_manager.py ( 425) | _set_node_order | Node1 sets node Node2 (8ECVSk179mjsjKRLWiQtssMLgp6EPhWXtaYyStWPSGAb) order to 5 2018-04-08 11:37:58,518 | INFO | pool_manager.py ( 425) | _set_node_order | Node1 sets node Node3 (DKVxG2fXXTU8yT5N7hGEbXB3dfdAnYv1JczDUHpmDxya) order to 5 2018-04-08 11:37:58,518 | INFO | pool_manager.py ( 425) | _set_node_order | Node1 sets node Node4 (4PS3EDQ3dW1tci1Bp6543CfuuebjFrg36kLAUcskGfaA) order to 5 2018-04-08 11:37:58,518 | INFO | pool_manager.py ( 425) | _set_node_order | Node1 sets node Node5 (4SWokCJWJc69Tn74VvLS6t2G2ucvXqM9FDMsWJjmsUxe) order to 5 2018-04-08 11:37:58,519 | INFO | pool_manager.py ( 425) | _set_node_order | Node1 sets node Node6 (Cv1Ehj43DDM5ttNBmC6VPpEfwXWwfGktHwjDJsTV5Fz8) order to 5 2018-04-08 11:37:58,519 | INFO | pool_manager.py ( 425) | _set_node_order | Node1 sets node Node7 (BM8dTooz5uykCbYSAAFwKNkYfT4koomBHsSWHTDtkjhW) order to 5 2018-04-08 11:37:58,519 | INFO | pool_manager.py ( 425) | _set_node_order | Node1 sets node Node8 (98VysG35LxrutKTNXvhaztPFHnx5u9kHtT7PnUGqDa8x) order to 5 2018-04-08 11:37:58,519 | INFO | pool_manager.py ( 425) | _set_node_order | Node1 sets node Node9 (6pfbFuX5tx7u3XKz8MNK4BJiHxvEcnGRBs1AQyNaiEQL) order to 5 2018-04-08 11:37:58,519 | INFO | pool_manager.py ( 425) | _set_node_order | Node1 sets node Node10 (HaNW78ayPK4b8vTggD4smURBZw7icxJpjZvCMLdUueiN) order to 6 2018-04-08 11:37:58,519 | INFO | pool_manager.py ( 425) | _set_node_order | Node1 sets node Node11 (2zUsJuF9suBy2iKkcgmm8uoMB6u5Dq2oHoRuchrZbj2N) order to 6 2018-04-08 11:37:58,519 | INFO | pool_manager.py ( 425) | _set_node_order | Node1 sets node Node12 (BXV4SXKEJeYQ8XCRHgpw1Xume5ntqALsRhbUYcF85Mse) order to 6 2018-04-08 11:37:58,519 | INFO | pool_manager.py ( 425) | _set_node_order | Node1 sets node Node13 (71WAtEevzz8aZr8baNJhQCUDLwRhM7LeaErSKNWWKxzn) order to 6 2018-04-08 11:37:58,519 | INFO | pool_manager.py ( 425) | _set_node_order | Node1 sets node Node14 (FEUGMFWCSAM725vyH8JZnsitiNUy31NPhugVKb8zDpng) order to 6 2018-04-08 11:37:58,520 | INFO | pool_manager.py ( 425) | _set_node_order | Node1 sets node Node15 (DPZ8GJ1NyNZGJMU6qQZVuBsumY1aVzvcV4FqQK9Y215x) order to 6 2018-04-08 11:37:58,540 | INFO | node.py ( 777) | _create_bls_bft | BLS: BLS Signatures will be used for Node Node1 Traceback (most recent call last): File "add_json_txns_to_ledger.py", line 91, in <module> config=config) File "/usr/local/lib/python3.5/dist-packages/plenum/server/node.py", line 195, in __init__ self.addGenesisNyms() File "/usr/local/lib/python3.5/dist-packages/plenum/server/node.py", line 2699, in addGenesisNyms self.addNewRole(txn) File "/usr/local/lib/python3.5/dist-packages/plenum/server/node.py", line 2666, in addNewRole v = DidVerifier(verkey, identifier=identifier) File "/usr/local/lib/python3.5/dist-packages/plenum/common/verifier.py", line 34, in __init__ assert verkey, 'verkey must be provided' AssertionError: verkey must be provided{code}   Expected Results: Generated transactions should be written.  ></description> </Issue>
