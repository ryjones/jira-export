<Action id="49473" issue="33007" author="zhigunenko.dsr" type="comment" created="2018-08-28 07:53:12.0" updateauthor="zhigunenko.dsr" updated="2018-08-28 07:53:12.0"> <body><! CDATA *Test run:* 1 *Environment:* indy-node 1.6.71 (25 AWS nodes) plugins 0.9.0+11.83  Plugin ledger size: 0k -> 40k logLevel = INFO STACK_COMPANION=0 *Goal:* understanding the maximum of payment ledger performance. *Load:* up to 250 processes of  {code} python3.5 perf_processes.py -g pool_transactions_genesis -m t -n 1 -c 1 -l 0.06000 -y one -k payment -o output & {code} *Results:* Last ViewNo - {color:#008000}2{color} Duration - {color:#008000}48+ hours{color} Pool {color:#008000}in action{color}. Transactions written: {color:#008000}40k+{color} Throughput: write - up to {color:#008000}7 txns/sec{color}, but most of the time - less than 1 txns/sec.  *Additional Info:* Load script generates new transactions only limited time, then closed. This is the reason of load decreasing.  ></body> </Action>
<Action id="49556" issue="33007" author="zhigunenko.dsr" type="comment" created="2018-08-29 14:24:02.0" updateauthor="zhigunenko.dsr" updated="2018-08-29 14:24:02.0"> <body><! CDATA *Test run:* 2 *Environment:* indy-node 1.6.71 (25 AWS nodes) plugins 0.9.0+14.86  Domain ledger size: 159 -> 14841 Plugin ledger size: 370 -> 15198 logLevel = INFO STACK_COMPANION=0 *Goal:* understanding pool behavior regarding "txn+fee" *Load:* 5 clients {code:java} python3.5 ~/indy-node/scripts/performance/perf_processes.py -g ~/indy-node/scripts/performance/pool_transactions_genesis -m t -n 1 -c 1 -l 0.50000 -y one -k "{\"fees_nym\"}" {code} *Results:* ViewChanges during load - {color:orange}10{color} Duration - {color:#008000}3.5 hours{color} Pool {color:#008000}in action{color}. Transactions written: {color:#008000}14.5k+{color} Throughput: write - up to {color:orange}2 txns/sec{color}  *Additional Info:* Load script generates less transactions than pool can handle.  ></body> </Action>
<Action id="49687" issue="33007" author="zhigunenko.dsr" type="comment" created="2018-08-31 10:35:43.0" updateauthor="zhigunenko.dsr" updated="2018-08-31 10:35:43.0"> <body><! CDATA *Test run:* 3 *Environment:* indy-node 1.6.587 (25 AWS nodes) plugins (master, custom build)  Domain ledger size: 40 -> 57 Plugin ledger size: 0 -> 19k+ logLevel = INFO STACK_COMPANION=0 *Goal:* understanding the maximum of payment ledger performance. *Load:* 5 clients {code:java} python3.5 ~/indy-node/scripts/performance/perf_processes.py -g ~/indy-node/scripts/performance/pool_transactions_genesis -m t -n 1 -c 1 -l 5.0000 -y one -k "{\"payment\"}" {code} *Results:* ViewChanges during load - {color:orange}10+{color} Duration - {color:orange}30 min{color} Pool {color:#008000}in action{color}. Transactions written: {color:#008000}19k+{color} Throughput: write - up to {color:green}12 txns/sec{color}, stable - {color:green}10txns/sec{color}  *Additional Info:* There is no fix from INDY-1643  ></body> </Action>
<Action id="49957" issue="33007" author="zhigunenko.dsr" type="comment" created="2018-09-06 08:48:30.0" updateauthor="zhigunenko.dsr" updated="2018-09-06 14:57:09.0"> <body><! CDATA *Load setup if fees enabled:*  ||Transaction||Shares||Requests frequency||Total requests(3h)|| |cred_def|5|0.72|7776| |revoc_reg_entry|5|0.72|7776| |payment|20|2.86|31320| |attrib|15|2.2|23760| |schema+fee|5|0.72|7776| |nym+fee|20|2.9|31320| ||Transaction||Shares||Requests frequency||Total requests(3h)|| |get_nym|45|45|486000| |get_schema|10|10|108000| |get_cred_def|10|10|108000| |get_revoc_reg|10|10|108000| |get_revoc_reg_delta|10|10|108000| |get_attrib|10|10|108000| |verify_payment|5|5|54000|  *Warning:* "schema+fee" must be launched as penultimate (at the only AWS instance) "nym+fee" must be launched as the latest (at the only AWS instance)  *How to work with table:* _"Shares"_ is proportion from original criteria (INDY-1343) where payments were separated from domain transactions.   If fee is enabled _"domain_txn+fee"_ means both _domain txn_ and corresponding _payment_.   So if fee set for attrib you need to subtract corresponding shares from payment _(20 - 15 = 5)_.   Next recalculate _"Requests frequency"_ (_-l_ for load script) according to the formula:   _Frequency=Shares * (100 / SUM(Shares)) / 10_,   there is _(100 / SUM(Shares))_ - percent distribution, and 10 is _"10 txns/sec"_   _"Total requests(3h)"_ means how many transactions are expected during _3*60*60_ seconds.   In order to avoid _"no generated requests"_ during test it needs to generate them before.    *Example for 5 client instances:* Each instance run 200 clients. Clients are distributed equally between transaction types. Each client prepares enough data for three-hour test. _"-b"_ is equal _"Total requests"_ divided by number of clients for corresponding transaction. ALPHA: {code} python3.5 perf_processes.py -g pool_transactions_genesis -m t -n 1 -y one -k cred_def -c 50 -l 0.72 -b 156 python3.5 perf_processes.py -g pool_transactions_genesis -m t -n 1 -y one -k revoc_reg_entry -c 50 -l 0.72 -b 156 python3.5 perf_processes.py -g pool_transactions_genesis -m t -n 1 -y one -k "{\"payment\":{\"payment_addrs_count\": 627,\"payment_method\":\"null\", \"plugin_lib\": \"libnullpay.so\", \"plugin_init_func\":\"nullpay_init\"}}" -c 50 -l 2.86 python3.5 perf_processes.py -g pool_transactions_genesis -m t -n 1 -y one -k attrib -c 50 -l 2.2 -b 476 {code}  BRAVO: {code:java} python3.5 perf_processes.py -g pool_transactions_genesis -m t -n 1 -y one -k "{\"fees_schema\":{\"payment_addrs_count\": 39,\"payment_method\":\"null\", \"plugin_lib\": \"libnullpay.so\", \"plugin_init_func\":\"nullpay_init\"}}" -c 200 -l 0.72 {code}  CHARLIE: {code:java} python3.5 perf_processes.py -g pool_transactions_genesis -m t -n 1 -y one -k "{\"fees_nym\":{\"payment_addrs_count\": 157,\"payment_method\":\"null\", \"plugin_lib\": \"libnullpay.so\", \"plugin_init_func\":\"nullpay_init\"}}" -c 200 -l 2.9 {code}  DELTA: {code:java} python3.5 perf_processes.py -g pool_transactions_genesis -m t -n 1 -y one -k get_nym -c 100 -l 45 -b 4860 & python3.5 perf_processes.py -g pool_transactions_genesis -m t -n 1 -y one -k "{\"verify_payment\":{\"payment_addrs_count\": 540,\"payment_method\":\"null\", \"plugin_lib\": \"libnullpay.so\", \"plugin_init_func\":\"nullpay_init\"}}" -c 100 -l 5 & echo "Fin" {code}  ECHO: {code:java} python3.5 perf_processes.py -g pool_transactions_genesis -m t -n 1 -y one -k get_schema -c 40 -l 10 -b 2700 python3.5 perf_processes.py -g pool_transactions_genesis -m t -n 1 -y one -k get_cred_def -c 40 -l 10 -b 2700 python3.5 perf_processes.py -g pool_transactions_genesis -m t -n 1 -y one -k get_revoc_reg -c 40 -l 10 -b 2700 python3.5 perf_processes.py -g pool_transactions_genesis -m t -n 1 -y one -k get_revoc_reg_delta -c 40 -l 10 -b 2700 python3.5 perf_processes.py -g pool_transactions_genesis -m t -n 1 -y one -k get_attrib -c 40 -l 10 -b 2700 {code}  ></body> </Action>
<Action id="51145" issue="33007" author="vladimirwork" type="comment" body="Testing should be continued after INDY-1665 confirmation testing." created="2018-09-25 07:57:51.0" updateauthor="vladimirwork" updated="2018-09-25 07:57:51.0"/>
<Action id="51260" issue="33007" author="ozheregelya" type="comment" created="2018-09-27 11:21:02.0" updateauthor="ozheregelya" updated="2018-09-27 11:22:42.0"> <body><! CDATA *Test run 4:* (Ext-26-09-18-mix) Environment: indy-node 1.6.610 + plugins libindy 1.6.6~750 + plugins load script 1.0.5  *Load from script:* 2.5+2.5+2.5+2.5 txns/sec (started one-by-one). {code:java} perf_processes.py -g ~/ext_transactions_genesis -m t -n 1 -y one -s 000000000000000000000000Trustee1 -s 000000000000000000000000Trustee2 -s 000000000000000000000000Trustee3 -s 000000000000000000000000Trustee4 --ext  "{\"payment_addrs_count\":1000,\"addr_mint_limit\":1000000,\"payment_method\":\"sov\",\"plugin_lib\":\"libsovtoken.so\",\"plugin_init\":\"sovtoken_init\",\"trustees_num\":4}" -k " {\"nym\":{\"count\": 4}}, {\"schema\":{\"count\": 1}}, {\"attrib\":{\"count\": 3}}, {\"cred_def\":{\"count\": 1}}, {\"revoc_reg_def\":{\"count\": 1}}, {\"payment\":{\"count\": 9}} " -c 10 -b 1 -l 2.5 {code} *Pool throughput:* 2.5 txns/sec during 3 hours run well. When the rest scripts started, View Change was happened and pool stopped ordering. *Txns written:* 122866 | 46315 (domain | sovtoken).    !Ext-26-09-18-mix.png|thumbnail! Logs and full metrics: s3://qanodelogs/INDY-1607-Ext-26-09-18-mix  ></body> </Action>
<Action id="51345" issue="33007" author="spivachuk" type="comment" created="2018-09-28 12:09:38.0" updateauthor="spivachuk" updated="2018-09-28 12:29:56.0"> <body><! CDATA *Investigation on Test Run 4:* Actually the pool continued ordering after the view had changed to view 1 (approximately at 21:13 on 09/26). But some nodes (*Node3, Node11, Node13, Node15, Node24, Node25*) were performing this view change for a long time, completed it later than other nodes (at 21:19 - 21:21) and *were not participating in ordering* after this. *The diagram* *attached* *to the previous comment is from Node13*, so the ordering on it stopped on the view change beginning at 21:13.  ></body> </Action>
<Action id="51348" issue="33007" author="ozheregelya" type="comment" created="2018-09-28 12:43:53.0" updateauthor="ozheregelya" updated="2018-09-28 12:52:07.0"> <body><! CDATA *Environment:* indy-node 1.6.615 libindy 1.6.6~759 load script 1.0.5  *Test run 5:* (Ext-27-09-18-mix-no-fees) *Load from script:* from 5 txns/sec to 10 txns/sec (smooth increasing of load, after that stable load with 10 txns/sec) {code:java} perf_processes.py -g ~/live_transactions_genesis -m t -n 1 -y freeflow -s 000000000000000000000000Trustee1 -s 000000000000000000000000Trustee2 -s 000000000000000000000000Trustee3 -s 000000000000000000000000Trustee4 --ext "{\"payment_addrs_count\":1000,\"addr_mint_limit\":1000000,\"payment_method\":\"sov\",\"plugin_lib\":\"libsovtoken.so\",\"plugin_init\":\"sovtoken_init\",\"trustees_num\":4,\"set_fees\":{\"1\":1,\"100\":1,\"101\":1,\"102\":1,\"113\":1,\"10001\":1}}" -k " {\"nym\":{\"count\": 4}}, {\"schema\":{\"count\": 1}}, {\"attrib\":{\"count\": 3}}, {\"cred_def\":{\"count\": 1}}, {\"revoc_reg_def\":{\"count\": 1}}, {\"payment\":{\"count\": 9}} " -c 5 -b 1 -l 1  perf_processes.py -g ~/live_transactions_genesis -m t -n 1 -y freeflow -s 000000000000000000000000Trustee1 -s 000000000000000000000000Trustee2 -s 000000000000000000000000Trustee3 -s 000000000000000000000000Trustee4 --ext "{\"payment_addrs_count\":1000,\"addr_mint_limit\":1000000,\"payment_method\":\"sov\",\"plugin_lib\":\"libsovtoken.so\",\"plugin_init\":\"sovtoken_init\",\"trustees_num\":4,\"set_fees\":{\"1\":1,\"100\":1,\"101\":1,\"102\":1,\"113\":1,\"10001\":1}}" -k " {\"nym\":{\"count\": 4}}, {\"schema\":{\"count\": 1}}, {\"attrib\":{\"count\": 3}}, {\"cred_def\":{\"count\": 1}}, {\"revoc_reg_def\":{\"count\": 1}}, {\"payment\":{\"count\": 9}} " -c 2 -b 1 -l 1   3x perf_processes.py -g ~/live_transactions_genesis -m t -n 1 -y freeflow -s 000000000000000000000000Trustee1 -s 000000000000000000000000Trustee2 -s 000000000000000000000000Trustee3 -s 000000000000000000000000Trustee4 --ext "{\"payment_addrs_count\":1000,\"addr_mint_limit\":1000000,\"payment_method\":\"sov\",\"plugin_lib\":\"libsovtoken.so\",\"plugin_init\":\"sovtoken_init\",\"trustees_num\":4,\"set_fees\":{\"1\":1,\"100\":1,\"101\":1,\"102\":1,\"113\":1,\"10001\":1}}" -k " {\"nym\":{\"count\": 4}}, {\"schema\":{\"count\": 1}}, {\"attrib\":{\"count\": 3}}, {\"cred_def\":{\"count\": 1}}, {\"revoc_reg_def\":{\"count\": 1}}, {\"payment\":{\"count\": 9}} " -c 2 -b 1 -l 1{code} *Pool throughput:* pool processed 10 txns/sec during 6 hours, but note that there are less sovtoken txns than expected. That means that payment addresses stopped working by some reason in the load script and the load was without payment txns. *Txns written:* 501296 | 10020 *!no_fees-node-13.png|thumbnail!* Logs and full metrics: s3://qanodelogs/INDY-1607-Ext-27-09-18-mix-no-fees     *Test run 6:* (Live-27-09-18-mix-fees) *Load from script:* from 5 txns/sec to 10 txns/sec (smooth increasing of load, after that stable load with 10 txns/sec) {code:java} perf_processes.py -g ~/live_transactions_genesis -m t -n 1 -y freeflow -s 000000000000000000000000Trustee1 -s 000000000000000000000000Trustee2 -s 000000000000000000000000Trustee3 -s 000000000000000000000000Trustee4 --ext "{\"payment_addrs_count\":1000,\"addr_mint_limit\":1000000,\"payment_method\":\"sov\",\"plugin_lib\":\"libsovtoken.so\",\"plugin_init\":\"sovtoken_init\",\"trustees_num\":4,\"set_fees\":{\"1\":1,\"100\":1,\"101\":1,\"102\":1,\"113\":1,\"10001\":1}}" -k " {\"nym\":{\"count\": 4}}, {\"schema\":{\"count\": 1}}, {\"attrib\":{\"count\": 3}}, {\"cred_def\":{\"count\": 1}}, {\"revoc_reg_def\":{\"count\": 1}}, {\"payment\":{\"count\": 9}} " -c 5 -b 1 -l 1  perf_processes.py -g ~/live_transactions_genesis -m t -n 1 -y freeflow -s 000000000000000000000000Trustee1 -s 000000000000000000000000Trustee2 -s 000000000000000000000000Trustee3 -s 000000000000000000000000Trustee4 --ext "{\"payment_addrs_count\":1000,\"addr_mint_limit\":1000000,\"payment_method\":\"sov\",\"plugin_lib\":\"libsovtoken.so\",\"plugin_init\":\"sovtoken_init\",\"trustees_num\":4,\"set_fees\":{\"1\":1,\"100\":1,\"101\":1,\"102\":1,\"113\":1,\"10001\":1}}" -k " {\"nym\":{\"count\": 4}}, {\"schema\":{\"count\": 1}}, {\"attrib\":{\"count\": 3}}, {\"cred_def\":{\"count\": 1}}, {\"revoc_reg_def\":{\"count\": 1}}, {\"payment\":{\"count\": 9}} " -c 2 -b 1 -l 1   3x perf_processes.py -g ~/live_transactions_genesis -m t -n 1 -y freeflow -s 000000000000000000000000Trustee1 -s 000000000000000000000000Trustee2 -s 000000000000000000000000Trustee3 -s 000000000000000000000000Trustee4 --ext "{\"payment_addrs_count\":1000,\"addr_mint_limit\":1000000,\"payment_method\":\"sov\",\"plugin_lib\":\"libsovtoken.so\",\"plugin_init\":\"sovtoken_init\",\"trustees_num\":4,\"set_fees\":{\"1\":1,\"100\":1,\"101\":1,\"102\":1,\"113\":1,\"10001\":1}}" -k " {\"nym\":{\"count\": 4}}, {\"schema\":{\"count\": 1}}, {\"attrib\":{\"count\": 3}}, {\"cred_def\":{\"count\": 1}}, {\"revoc_reg_def\":{\"count\": 1}}, {\"payment\":{\"count\": 9}} " -c 2 -b 1 -l 1{code} *Pool throughput:* when the load become stable, pool processed 10 txns/sec during 2 hours. After that it failed with OOM and stopped ordering. *Txns written:* 11198 | 21163 !fees-node-13.png|thumbnail! Logs and full metrics: s3://qanodelogs/INDY-1607-Live-27-09-18-mix-fees  ></body> </Action>
<Action id="51351" issue="33007" author="ozheregelya" type="comment" created="2018-09-28 13:03:36.0" updateauthor="ozheregelya" updated="2018-09-28 13:03:36.0"> <body><! CDATA *Conclusion:*  Pool process load of 10 txns/sec with wanted mixture of txns with fees during 2 hours.  In both of cases (with fees and without fees) pool fails with OOM, so, this case may be re-tested with pool with 32Gb RAM in scope of INDY-1717 (according comment will be added to INDY-1717).  Logs for OOM issues will be added to INDY-1721 epic.  Problem from Test Run 4 will be moved to separate ticket.  ></body> </Action>
