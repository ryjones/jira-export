<Action id="51760" issue="33065" author="ashcherbakov" type="comment" created="2018-10-04 14:11:10.0" updateauthor="ashcherbakov" updated="2018-10-04 14:11:10.0"> <body><! CDATA The results are in  https://docs.google.com/presentation/d/1WCwyFMkKJFjaUGlysp49Pitjcv6TIayEMKzCaKzUf_g/edit#slide=id.p    *Problems with RBFT:* * Very chatty protocol * Propagation phase is a bottleneck * Requires more resources than other protocols (CPU, Memory) * RBFT’s focus is protecting against performance degradation of the primary, but this is not our highest priority in Sovrin ** We can incentivize Stewards to provide good performance by paying them in tokens. As a result, the probability of such malicious actions is lower than in a common abstract case, and such rare situations can hopefully be caught by active monitoring systems. * RBFT doesn’t work well if Consensus (ordering phase) is partially combined with execution (uncommitted state) as done in Plenum, since there is nothing to execute by backup Replicas.  *Observations:* * Observation 1: Poor primary performance is not our biggest concern * Observation 2: Biggest current bottleneck is request propagation * Observation 3: Protocols with MAC are more performant, but more difficult  *Protocols:* * PBFT * Aardvark * Spinning * Tendermint * Stellar  *Conclusion* * We should use some ideas from Aardvark (like separate NICs and regular view changes) * If we improve existing Plenum code base, then the easiest options are (in order of difficulty): ** PBFT ** Aardvark ** Tendermint ** Spinning * If we start from scratch, then we should consider Tendermint or Spinning     ></body> </Action>
