<Action id="62399" issue="41515" author="andkononykhin" type="comment" created="2019-07-30 15:27:35.0" updateauthor="andkononykhin" updated="2019-07-30 15:42:01.0"> <body><! CDATA *PoA* * list all dependencies (top level + transitional) that are used on clean xenial env (installed during indy-node installation) * similar for bionic, options ** may try to install from indy xenial ** manually check available versions using dpkg / apt tools * compare and make a decision regarding possibility of xenial deps set usage for bionic. I believe it is possible in any case since missed packages / versions might be packed from sources and published to sovrin debian repository * inspect dependencies compatibility and their release notes and make a decision: ** is it possible (and reasonable) to keep the same env for both platforms, if yes - options: *** keep xenial env *** move to bionic env *** use some other env: bump dependencies to some versions compatible with each other and appropriate for indy projects ** otherwise - decide which set of deps is acceptable for each platform * make a decision regarding the ways of locking the test environments to ones that will be expected on production (INDY-1706 is useful but might be outdated) * choose which transitional dependencies might be not locked / pinned: since we would need to pin them for debian as well it would require to add them to debian package 'Depends' field making it quite long. Thus, it makes sense to not pin deps that might be considered as stable or are not updated for the platform.   I vote for the same env for both platforms since: * python is a platform independent language in general (but for sure requires some attention to file system related operation, some platform dependent modules) * it seems much easier to maintain (other platform might come into play) and test  ></body> </Action>
<Action id="63986" issue="41515" author="esplinr" type="comment" created="2019-09-23 20:11:48.0" updateauthor="esplinr" updated="2019-09-23 20:13:55.0"> <body><! CDATA The current Python packages we are building because they are newer than Ubuntu 16.04: https://repo.sovrin.org/deb/pool/xenial/stable-latest/p/  I would be surprised if we could remove the custom packages for a specific version of pyzmq and rocksdb, but I think we can take the repository defaults for the other packages. python-base58 might be an Indy specific package contributed by Evernym.  ></body> </Action>
<Action id="65169" issue="41515" author="esplinr" type="comment" created="2019-10-29 21:22:45.0" updateauthor="esplinr" updated="2019-10-29 21:22:45.0"> <body><! CDATA As we enable support for Ubunut 18.04, we need to rethink our dependency pinning. We took a very conservative line in 2018 because we were seeing a lot of library churn, but things have been more stable in 2019. We currently see more problems from too strict pinning than we do with too loose dependency management.  Daniel does a good job explaining appropriate pinning here: https://jira.hyperledger.org/browse/INDY-1701?focusedCommentId=50863&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-50863  Critical dependencies probably should continue to be explicitly pinned.  Some major dependencies should probably be pinned to a version less than the next major version, so we keep API stability but also get security updates.  Most dependencies shouldn't need to be pinned anymore so that people can experiment and report problems they encounter with new versions.   ></body> </Action>
