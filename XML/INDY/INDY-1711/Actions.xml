<Action id="51796" issue="34000" author="toktar" type="comment" body="PR: https://github.com/hyperledger/indy-plenum/pull/936" created="2018-10-05 12:25:56.0" updateauthor="toktar" updated="2018-10-05 12:25:56.0"/>
<Action id="52016" issue="34000" author="toktar" type="comment" created="2018-10-10 14:21:43.0" updateauthor="toktar" updated="2018-10-10 15:19:32.0"> <body><! CDATA Problem reason: - The recursion in LedgerManager._processCatchupReplies method causes the call stack overflow during catch-up of a large ledger.  Changes: - Changed a recursion to a cycle in  LedgerManager._processCatchupReplies method - Added a unit tests for CatchupRep logic.  PR: *  https://github.com/hyperledger/indy-plenum/pull/936  *  https://github.com/hyperledger/indy-node/pull/971   Version: * indy-node 1.6.627 -master * indy-plenum 1.6.560 -master  Risk factors: - Catch-up process  Risk: - Low  Covered with tests: *  test_process_catchup_replies.py|https://github.com/hyperledger/indy-plenum/pull/936/files#diff-7623a00740392088721dd40ae96a2d58   Recommendations for QA: * Test catch-up of a large ledger.  ></body> </Action>
<Action id="52071" issue="34000" author="zhigunenko.dsr" type="comment" created="2018-10-11 08:07:28.0" updateauthor="zhigunenko.dsr" updated="2018-10-11 08:07:28.0"> <body><! CDATA *Steps to Validate:* 1) Setup docker / AWS pool with 4 nodes 2) Stop the third node 3) Write 300-500k txns 4) Set network delay on node1 and node2 5) Start and catchup node3  ></body> </Action>
<Action id="52403" issue="34000" author="ozheregelya" type="comment" created="2018-10-18 08:55:55.0" updateauthor="ozheregelya" updated="2018-10-18 08:55:55.0"> <body><! CDATA *Steps to Validate* (correction with regard to INDY-1657)*:*  1. Setup AWS pool (because testing in docker will not make sense because OOM in docker will happen faster than in case of AWS pool). 2. Fill the ledger using load script, or restore it form backup on all nodes exclude one (ledger size should be at least 600K because initial problems with large ledger catch up were noticed on ~600K ledger, but for ~300K catch up worked). 3. Prepare node for catch up. 3.1. Stop the instance, change instance type to m4.2xlarge, start the instance (it is expected that catch up will fail because of OOM on node with 8GB RAM). 3.2. Make sure that node is clear (no data in ledgers). 3.3. Make sure that genesis files are correct. 3.4 (optional). Add additional logging for catch up by changing 'trace' to 'info' here: https://github.com/hyperledger/indy-plenum/pull/916/files#diff-d2bf9d811236a80877dac9c803bd2a0aR1975 3.5. Make sure that log level is INFO. 4. Start the node which was prepared to catch up. 5. Wait until the end of catch up. 6. Write several txns, make sure that they were written by all nodes including catched up node. 7. Run small load test (100-1000 txns) without high load. Make sure that all nodes have wrote all txns.  ></body> </Action>
<Action id="52525" issue="34000" author="nataliadracheva" type="comment" created="2018-10-22 15:14:06.0" updateauthor="nataliadracheva" updated="2018-10-22 15:14:23.0"> <body><! CDATA *Scenario 1:* *Build version:*  indy-node: 1.6.639 indy-plenum: 1.6.568 *Test description:* Test catch up. *Preconditions:* Node 24 and Node 25 are demoted, the pool is filled with 500k transactions (nyms) *Steps to Validate:* 1. Promote Node 24 and restart its indy-node service. => Node 24 successfully finished a catch up of 500k transactions. 2. Fill ledger with 200k more transactions. 3. Promote Node 25 and restart its indy-node service. *Expected results:* Both demoted nodes could finish a catch up successfully. *Actual results:* Both demoted nodes could finish a catch up successfully. *Additional info:* ~/logs/indy-1711/success/  ></body> </Action>
