<Issue id="18879" key="INDY-367" number="367" project="10303" reporter="srottem" creator="srottem" type="10004" summary="Windows build instructions need review" priority="4" resolution="10200" status="10001" created="2017-07-01 16:21:45.0" updated="2019-10-11 10:16:29.0" resolutiondate="2019-10-11 10:16:29.0" votes="0" watches="1" workflowId="18879"> <description><! CDATA The instructions for building under Windows is insufficient for a beginner to get started quickly, especially with regard to building source dependencies.  For example these are a few of the issues I ran into: * The link for downloading pre-built dependencies is broken * That cmake must be installed before attempting to build milagro-crypto-c. I attempted to use the MinGW cmake and ran unto trouble not realizing that there was another one for use in Windows. * Figuring out how to disable post-build events in milagro-crypto-c and that it should be done in all projects in the solution * That the libzmq-pw projects SDK target is 8.1 and this may be an issue on other versions of windows.   I had to change it for Windows 10 - how to change it might be useful. * Understanding whether the draft API and libsodium settings in libzmq-pw need to be changed in all projects of the solution or not and where to change these settings. * Finding where to change the output file name in libzmq-pw should be performed - simply changing it in General > Target Name of the libzmq project causes compiler warning MSB8012 and all other projects in the solution fail to build. * The paths specified in ~\builds\msvc\vs2017\libzmq.import.props specify a directory that may be invalid as it incorrectly assumes that the source root will be named libzmq.  Maybe this needs to be in a different ticket since its a different repo? * That rust needs to be installed (and what cargo is) and maybe a link to how to do so * What cargo command needs to be run to get the appropriate build (the specific command) * Finding the correct build artifact was problematic as I didn't know what output to expect or where specifically it would be written.  This appears to be ~/target/de * I didn't get an openssl related build failure complaining about gdi32.lib - perhaps the workaround instructions should say "if" rather than "when" the build fails?  ></description> </Issue>
