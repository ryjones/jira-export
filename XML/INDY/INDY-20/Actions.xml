<Action id="24344" issue="17086" author="ashcherbakov" type="comment" created="2017-05-25 15:59:33.0" updateauthor="ashcherbakov" updated="2017-05-25 15:59:33.0"> <body><! CDATA The issue we faced in INDY-15 was just about network communication (network stack faced a non-utf message). No non-utf data were added into the Ledger. However, we should be able to handle a case when we have non-utf data in Ledger. It can be part of Input Sanitization task.  ></body> </Action>
<Action id="24507" issue="17086" author="danielhardman" type="comment" created="2017-05-26 19:28:28.0" updateauthor="danielhardman" updated="2017-05-26 19:31:11.0"> <body><! CDATA Just now I was experimenting with the `rlp` module in python, and I saw something that looked almost identical to what  ~krw910 Â reported in his stack traces about a corrupted ledger: {code:java} >>> import rlp >>> rlp.encode('abc') b'\x83abc' >>>{code} The thing to note here is that we have run-length encoded text, and the RL prefix looks an awful lot like the garbage character that wasn't UTF-8 in the ledger where we expected it from an ATTRIB transaction.  So... My theory is that somewhere in our code, we are calling {code:java} rlp.encode(){code} on the values that go into a ledger record for an ATTRIB txn, but not calling {noformat} rlp.decode(){noformat} on the way back out.  ></body> </Action>
<Action id="24578" issue="17086" author="ashcherbakov" type="comment" body=" ~danielhardman  I think we realized that the Ledger wasn&apos;t corrupted. It was only about network communication." created="2017-05-29 10:22:39.0" updateauthor="ashcherbakov" updated="2017-05-29 10:22:39.0"/>
<Action id="26242" issue="17086" author="danielhardman" type="comment" created="2017-06-14 05:49:09.0" updateauthor="danielhardman" updated="2017-06-14 05:49:09.0"> <body><! CDATA I want us not to crash when we encounter a ledger record that we cannot read. We could ignore it, or we could at a minimum exit cleanly while printing a message about which record is corrupt, with a suggestion that one way to fix the problem is to rebuild the ledger.  Ideally, a node that gets into this state should still start and run, just so it can receive POOL_UPGRADE transactions that allow it to get new software that is more capable of dealing with the corruption (maybe a migration script would reset or fix the corruption).  ></body> </Action>
