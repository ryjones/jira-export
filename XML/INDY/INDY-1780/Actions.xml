<Action id="52764" issue="34886" author="sergey-shilov" type="comment" created="2018-10-30 13:15:14.0" updateauthor="sergey-shilov" updated="2018-10-30 13:15:14.0"> <body><! CDATA *Plan of Attack*  Items of Requests queue are wrapped requests objects with additional meta data (class _ReqState_). Such item is created during adding of request to Requests queue. We can extend this meta data with _created_ts_ field. Also there should be a periodic task that clears all requests staying in the queue for more than X minutes (configurable) by comparison of _created_ts_ field with current time stamp. As a second step we can implement clearing of all requests for a stable checkpoint on master, but it's discussable.  All these actions may be enabled or disabled using the node's configuration.  ></body> </Action>
<Action id="52772" issue="34886" author="sergey-shilov" type="comment" created="2018-10-30 15:30:07.0" updateauthor="sergey-shilov" updated="2018-10-30 15:30:07.0"> <body><! CDATA For now the main question is the phase of request processing when deletion of request object does not lead to significant side effects, i.e. traffic amplification (lots of message requests), losing of seqno that leads to stashing of everything and so on.  Another one option is a limit for Requests queue size. But this solution should also be reviewed for side effects.  ></body> </Action>
<Action id="52823" issue="34886" author="sergey-shilov" type="comment" created="2018-10-31 15:47:17.0" updateauthor="sergey-shilov" updated="2018-10-31 15:47:17.0"> <body><! CDATA As a result of the several discussions about the solution we plan to: * add the first time out for the request's propagates quorum phase that starts when request is added to the Requests queue, when the time out is spent the request is dropped from the Requests queue. As such request is not forwarded to the replicas then the dropping of the request is safe operation on this phase. * add the second time out for the request's ordering phase (pre-prepare, prepare, commit), when the time out is spent the request is dropped from the Requests queue. This operation is not safe as the KeyError exception may occur during request handling in replicas, so modification of the code base is needed to handle such situation. Some critical points when the second time out is spent and the request is dropped: ** Pre-prepare: *** Sending by the primary: pre-prepare is not sent as request was dropped *** Receiving by the non-primary: original request is re-asked from other nodes using the MessageRequest (current implementation) ** Prepare/commit/ordered: original request is not needed for the ledger as it is applied to uncommitted state on the pre-prepare stage, it is needed just to send out the reply to the client, so it is enough to handle the KeyError gracefully or to tell the replicas that request does not exist any more when request is dropped (implementation is needed)  Both described time outs are supposed to be very long (hours), we can treat this rather as some rear "sanity check" then some regular process.  ></body> </Action>
<Action id="53257" issue="34886" author="sergey-shilov" type="comment" created="2018-11-09 12:27:30.0" updateauthor="sergey-shilov" updated="2018-11-09 12:27:30.0"> <body><! CDATA Draft implementation of dropping of outdated requests is done as an optional strategy that is disabled by default. https://github.com/hyperledger/indy-plenum/pull/973 Further implementation and investigation of possible side affects will be done in scope of INDY-1836, so this ticket may be closed.  ></body> </Action>
