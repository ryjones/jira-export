<Action id="29216" issue="19547" author="ashcherbakov" type="comment" created="2017-07-31 09:27:49.0" updateauthor="ashcherbakov" updated="2017-07-31 09:27:49.0"> <body><! CDATA *The problem reproduced in the test* Pre-Conditions: * We have 4 Nodes, Alpha is a primary. * All nodes (on master replica) have a random delay for some 3PC messages. * Alpha has no (or short) delays for neither 3PC. * Gamma has very long delays for both PREPARE and COMMIT  * Beta and Delta have long delays for COMMIT, but no (or short) delays for PREPARE * All delays are only for receiving a 3PC message. Sending is done without any delays. That's how our tests make artificial delays. Steps: * All replica's last oredered pp seqno is (0,1) * Alpha, Beta and Delta receive n-f-1=2 PREPAREs => they send n-f=3 COMMITs * Alpha has no delays for received COMMITs, so it Orders the Request => Alpha's last ordered pp SeqNo is (0,2) * Beta and Delta have long delay for received COMMITs, so, although they have a quorum of COMMITs, they don't Order it => Beta's and Delta's last ordered pp SeqNo is still (0,1) * View change is started. * We try to perform N=5 rounds of catchup without any transaction caught up for Beta and Delta. It took 2 seconds to complete these 2 rounds of catch-up, although delay for COMMITs is much longer. * We have a quorum for View Change Done (Beta, Delta, Gamma) for last ordered = (0,1) => view is changed. Result: * Alpha's ledger becomes invalid (it ordered one additional txn (0,1) which wasn't ordered by anyone else). * The ledger is append-only, so Alpha's Ledger becomes broken forever.  *Problem in general* * We have a write consensus of n-f, and consensus for catch-up of f+1. * So, if more than n-f-(f+1)=n-2f-1 nodes agreed to order a txn but failed/crashed before writing it to the Ledger, then we have a stalled/broken Ledger.  *Severity of the issue* Not major/critical, because * For n=4, f=1, we may still have 2 nodes agreed to write a txn fail before ordering, and will be able to recover the Ledger during catch-up. * The test reproduced the issue is quote artificial because ** It has very long delays  ** The delays are for *some* messages only (usually if this is a network issue, then the delay will be for all messages) ** The delay is only for receiving the messages (not for sending). IN a real network the delay will be usually for both.  *Short-term solution (to fix possible problems in the test)* * Print delays in tests (for easier debug in future and notice correlation between delays and failures) * Make catch-up longer (5 rounds were completed for just 2 seconds; it looks too fast). Have a minimum timeout for catchup during view change. * Do not have random delays in the test more than this timeout.  *Long-term solution for the General Problem* * Persist COMMITs, so that we can recover after start-up all txns that were agreed to be ordered, but not ordered yet for some reasons. * Have a separate story this. * I think the priority is Minor  ></body> </Action>
<Action id="29243" issue="19547" author="ashcherbakov" type="comment" created="2017-07-31 15:06:25.0" updateauthor="ashcherbakov" updated="2017-07-31 15:06:25.0"> <body><! CDATA A short-term solution is implemented in the scope of this ticket: https://github.com/hyperledger/indy-plenum/pull/317  https://jira.hyperledger.org/browse/INDY-472 is created for a long-term solution.  ></body> </Action>
<Action id="29338" issue="19547" author="ashcherbakov" type="comment" body="build: indy-node 1.0.69" created="2017-08-02 08:59:36.0" updateauthor="ashcherbakov" updated="2017-08-02 08:59:36.0"/>
<Action id="29359" issue="19547" author="vladimirwork" type="comment" body="test_view_change_all_nodes_random_delay.py passes during multiple pytest runs (20 passes from 20 runs). !Screenshot.PNG|thumbnail! " created="2017-08-02 16:16:21.0" updateauthor="vladimirwork" updated="2017-08-02 16:16:21.0"/>
