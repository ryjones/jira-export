<Action id="59945" issue="39762" author="artemkaaas" type="comment" created="2019-05-13 08:40:08.0" updateauthor="artemkaaas" updated="2019-05-13 09:16:01.0"> <body><! CDATA Could you share logs or all commands you entered? I am able to create MINT transaction without a DID  {code:java} indy> wallet open w2 key=k2 Wallet "w2" has been opened wallet(w2):indy> pool connect p1 Pool "p1" has been connected pool(p1):wallet(w2):indy> load-plugin library=libsovtoken.so initializer=sovtoken_init Plugin has been loaded: "libsovtoken.so" pool(p1):wallet(w2):indy> payment-address create payment_method=sov Payment Address has been created "pay:sov:EXCH9fh3NzMvGvJzrtu1vB9qr4ddcvPbuJqch5fenqeg8hcGN" pool(p1):wallet(w2):indy> ledger mint-prepare outputs=(pay:sov:EXCH9fh3NzMvGvJzrtu1vB9qr4ddcvPbuJqch5fenqeg8hcGN,100) MINT transaction has been created: {"operation":{"type":"10000","outputs": {"address":"EXCH9fh3NzMvGvJzrtu1vB9qr4ddcvPbuJqch5fenqeg8hcGN","amount":100} },"reqId":3166139930,"protocolVersion":2,"identifier":"LibsovtokenDid11111111"} {code}  It works.  The second and the third validation errors really there are.  *But* it is expected behavior. Seems we need set `submitter_did` as a required field.  ></body> </Action>
<Action id="59957" issue="39762" author="esplinr" type="comment" body=" ~lbendixsen  Can you share the exact auth_rule you had configured on the ledger when you tried this use case?" created="2019-05-13 15:20:49.0" updateauthor="esplinr" updated="2019-05-13 15:20:49.0"/>
<Action id="59958" issue="39762" author="esplinr" type="comment" created="2019-05-13 15:24:26.0" updateauthor="esplinr" updated="2019-05-13 15:24:26.0"> <body><! CDATA Can you also share the version numbers of the other software you were using for this test? * LibSovToken * Indy Node * Indy Token Plugins  ></body> </Action>
<Action id="59962" issue="39762" author="lbendixsen" type="comment" created="2019-05-13 16:07:35.0" updateauthor="lbendixsen" updated="2019-05-13 16:07:35.0"> <body><! CDATA I cannot yet share the auth_rule because I have not yet written the code needed for "get_all_auth_rules".  I will say, though that it should be the default as I have not yet changed it.  I am testing on the BuilderNet which was updated to the latest on 5-6-2019.  LibSovToken - (built on a MAC from master 5-6-2019)  Indy Node - 1.7.1   Indy Token Plugins - 0.9.11 (Sovrin version 1.1.41)  ></body> </Action>
<Action id="60002" issue="39762" author="ashcherbakov" type="comment" created="2019-05-14 16:51:42.0" updateauthor="ashcherbakov" updated="2019-05-14 16:51:42.0"> <body><! CDATA  ~lbendixsen   1) *First issue* (that it's not possible to send MINT without an identifier): * It looks like you use stable versions of Node/Plugins, stable CLI, but manually built master libsovtoken, isn't it?  Can you please try this with the officially built stable version of libsovtoken? Are you running the test (CLI) on Ubuntu or Mac? * If the issue is reproduced on stable, can you please provide exact steps and command you did in CLI?  2) *Second issue: Transaction has been rejected: validation error  SafeRequest : The identifier is not contained in signatures* * This is expected and fine. If there is identifier (author/sender of a txn), and a number of signatures, we do require that the identifier must also sign the txn.  We require this to avoid tricky attacks. For example, Bob and Malfoy create a CRED_DEF both signing the txn, but use Alice's DID as Identifier. So, there will be a CRED_DEF txn on the ledger for which Alice is the author, while Alice is not aware of this txn at all.   3) *Third issue:* *Transaction has been rejected: client request invalid: InsufficientCorrectSignatures(3, 4)* * This exception may indicate that there is no NYM txn for the non-Trustee DID you created. So, the ledger can not verify 1 of 4 signatures since he's not aware of the public key (verkey) for the signature. * Can you please make sure that you sent a NYM txn for the unprivileged DID you use for signing and sending? * The error itself is not so descriptive and clear, so we may create a minor bug to fix this error message to avoid confusion in future.  ></body> </Action>
<Action id="60007" issue="39762" author="lbendixsen" type="comment" created="2019-05-14 19:34:50.0" updateauthor="lbendixsen" updated="2019-05-14 19:34:50.0"> <body><! CDATA Thanks for looking into the issues, Alexander. And sorry for the lack of needed details and steps in the original description, I'll be better next time. :)  1) First Issue:  I am on a MAC and I think I was also not using the latest stable CLI as well as not the latest stable libsovtoken. I built both, because I am on a MAC.  I am uncertain how long it will take me to find MAC released versions of the CLI and libsovtoken, so here is the original command sent after setting up the pool and wallet and using no DID, then success while using the unpermissioned DID.  I will continue trying to find MAC released versions, try again, and post those results in a future comment.  pool(buildernet):wallet(testnet_wallet):indy> ledger mint-prepare outputs=(pay:sov:52CuALbWKBX66sDnmf8zL5HvxFYyjzFNuaibERRNhPgKP1bBu,1200000000000000000)  *Error: Invalid structure*    *Caused by: Plugin returned error*  pool(buildernet):wallet(testnet_wallet):indy> did use GcyGfNY7y9WuEqUGdEoAxQ  *Did "GcyGfNY7y9WuEqUGdEoAxQ" has been set as active*  pool(buildernet):wallet(testnet_wallet):did(Gcy...AxQ):indy> ledger mint-prepare outputs=(pay:sov:52CuALbWKBX66sDnmf8zL5HvxFYyjzFNuaibERRNhPgKP1bBu,1200000000000000000)  *MINT transaction has been created:*       {"operation":\{"type":"10000","outputs": {"address":"52CuALbWKBX66sDnmf8zL5HvxFYyjzFNuaibERRNhPgKP1bBu","amount":1200000000000000000} },"reqId":3479987566,"protocolVersion":2,"identifier":"GcyGfNY7y9WuEqUGdEoAxQ"}  2) ok, understood.  3) I am including the original custom CLI call that failed to use the signature with the non-privileged NYM, and then an extra command from today showing the NYM on the ledger.  Original failed txn USEing non-priveleged DID (including 4 signatures, 3 TRUSTEE and 1 non-priviledged) -  pool(buildernet):wallet(testnet_wallet):did(*Gcy...AxQ*):indy> ledger custom \{"identifier":"GcyGfNY7y9WuEqUGdEoAxQ","operation":{"outputs": {"address":"52CuALbWKBX66sDnmf8zL5HvxFYyjzFNuaibERRNhPgKP1bBu","amount000"},"protocolVersion":2,"reqId":3479987566,"signatures":\{"5M3i1PbpvEQmTk25EmAY6N":"4Rsn1mcuK7KMPgy5BZiPGysWyLdQeK7u7xk9a3pmvF4HH2Sid4mzB1e7hVztfSQincW4C1rLAb7wj21JcWpo4fhb","6feBTywcmJUriqqnGc1zSJ":"2Tt9aMeqhyfz1pWoCskDEYL35z2uh1HCihoQ29gWY2gNnJQ5NAKnHD","GcyGfNY7y9WuEqUGdEoAxQ":"3txpUMemuhhUo4iFZbM34CSiUYTUUpF3csdUcyJGLpBYdbnYrEzd37wSg9rDfJVJsHckFQfMLzR9ywJEcK8Yxhj4","Kv2YdE5KGgdruMGW6p5w4b":"paPauVLGkDsM8gXeJsvEzgVQzm67VeZLziWcDKMRjWDARqu8noqgH"}}  *Transaction has been rejected: client request invalid: InsufficientCorrectSignatures(3, 4)*     A similar txn request also failed when USEing my Trustee DID for Buildernet (custom txn attempted as a Trustee):  pool(buildernet):wallet(testnet_wallet):did(*5M3...Y6N*):indy> ledger custom \{"identifier":"GcyGfNY7y9WuEqUGdEoAxQ","operation":{"outputs": {"address":"52CuALbWKBX66sDnmf8zL5HvxFYyjzFNuaibERRNhPgKP1bBu","amount000"},"protocolVersion":2,"reqId":3479987566,"signatures":\{"5M3i1PbpvEQmTk25EmAY6N":"4Rsn1mcuK7KMPgy5BZiPGysWyLdQeK7u7xk9a3pmvF4HH2Sid4mzB1e7hVztfSQincW4C1rLAb7wj21JcWpo4fhb","6feBTywcmJUriqqnGc1zSJ":"2Tt9aMeqhyfz1pWoCskDEYL35z2uh1HCihoQ29gWY2gNnJQ5NAKnHD","GcyGfNY7y9WuEqUGdEoAxQ":"3txpUMemuhhUo4iFZbM34CSiUYTUUpF3csdUcyJGLpBYdbnYrEzd37wSg9rDfJVJsHckFQfMLzR9ywJEcK8Yxhj4","K2w8H44Z4PeRHphoAcFi4n":"4gV4aSz5X5aBoJpCPhi5R5PUQEQqk7ddYA45m16gLThQjUQivrEn4A","Kv2YdE5KGgdruMGW6p5w4b":"paPauVLGkDsM8gXeJCuwzhpu7r2chqDCFtseuAjka5p234ZYc4isvEzgVQzm67VeZLziWcDKMRjWDARqu8noqgH"}}  *Transaction has been rejected: client request invalid: InsufficientCorrectSignatures(4, 5)*  Finally, here is the request showing that the NYM is on the ledger:  pool(buildernet):wallet(testnet_wallet):did(V5q...2WP):indy> ledger get-nym did=GcyGfNY7y9WuEqUGdEoAxQ  *Following NYM has been received.*  *Metadata:*  +------------------------+-----------------+---------------------+---------------------+  | *Identifier *            | *Sequence Number* | *Request ID*          | *Transaction time*    |  +------------------------+-----------------+---------------------+---------------------+  | V5qJo72nMeF7x3ci8Zv2WP | 37              | 1557858362892512000 | 2019-05-08 17:17:53 |  +------------------------+-----------------+---------------------+---------------------+  *Data:*  +------------------------+------------------------+-------------------------+------+  | *Identifier *            | *Dest *                  | *Verkey*                  | *Role* |  +------------------------+------------------------+-------------------------+------+  | V5qJo72nMeF7x3ci8Zv2WP | GcyGfNY7y9WuEqUGdEoAxQ | ~8puM2StuMtC6CyfSgni6ve | -    |  +------------------------+------------------------+-------------------------+------+  ></body> </Action>
<Action id="60009" issue="39762" author="lbendixsen" type="comment" body="Oops, it looks like we do not publish official builds of Indy-CLI or libsovtoken for the MAC.  I will try and make sure I have the &quot;stable&quot; release of each and then try the steps again." created="2019-05-14 20:20:34.0" updateauthor="lbendixsen" updated="2019-05-14 20:20:34.0"/>
<Action id="60010" issue="39762" author="lbendixsen" type="comment" created="2019-05-14 22:19:38.0" updateauthor="lbendixsen" updated="2019-05-14 22:19:38.0"> <body><! CDATA Here are the commands and their results after getting and building on MAC from the stable branches: (Indy-CLI 1.8.3 and libsovtoken 0.9.8).  pool(buildernet):wallet(testnet_wallet):indy> ledger mint-prepare outputs=(pay:sov:52CuALbWKBX66sDnmf8zL5HvxFYyjzFNuaibERRNhPgKP1bBu,1000000000000000)  *MINT transaction has been created:*       {"operation":\{"type":"10000","outputs": {"address":"52CuALbWKBX66sDnmf8zL5HvxFYyjzFNuaibERRNhPgKP1bBu","amount":1000000000000000} },"reqId":2788483592,"protocolVersion":2,"identifier":"LibsovtokenDid11111111"}  pool(buildernet):wallet(testnet_wallet):indy> did use 5M3i1PbpvEQmTk25EmAY6N  *Did "5M3i1PbpvEQmTk25EmAY6N" has been set as active*  pool(buildernet):wallet(testnet_wallet):did(5M3...Y6N):indy> ledger sign-multi txn=\{"operation":{"type":"10000","outputs": {"address":"52CuALbWKBX66sDnmf8zL5HvxFYyjzFNuaibERRNhPgKP1bBu","amount":1000000000000000} },"reqId":2788483592,"protocolVersion":2,"identifier":"LibsovtokenDid11111111"}  *Transaction has been signed:*  *{"identifier":"LibsovtokenDid11111111","operation":\{"outputs": {"address":"52CuALbWKBX66sDnmf8zL5HvxFYyjzFNuaibERRNhPgKP1bBu","amount":1000000000000000} ,"type":"10000"},"protocolVersion":2,"reqId":2788483592,"signatures":\{"5M3i1PbpvEQmTk25EmAY6N":"3LSZpjd1avbFQoTfhi9nyBky4VmCd9kZtQHLxHdNw36ix6ERp5SFdxjYwC68iBfnQn4iw8gHpevhfrBbnA4wzM6t"}}*  <other signatures were obtained from other trustees at this point>     pool(buildernet):wallet(testnet_wallet):did(5M3...Y6N):indy> ledger custom \{"identifier":"LibsovtokenDid11111111","operation":{"outputs": {"address":"52CuALbWKBX66sDnmf8zL5HvxFYyjzFNuaibERRNhPgKP1bBu","amount":1000000000000000} ,"type":"10000"},"protocolVersion":2,"reqId":2788483592,"signatures":\{"5M3i1PbpvEQmTk25EmAY6N":"3LSZpjd1avbFQoTfhi9nyBky4VmCd9kZtQHLxHdNw36ix6ERp5SFdxjYwC68iBfnQn4iw8gHpevhfrBbnA4wzM6t","K2w8H44Z4PeRHphoAcFi4n":"ndHPu1aYLH75TuQNNCGiecsFypUUYVLbFT23xVpdjbnKALwpiJff36cknwaXpyXWMztBgKi9Wqfbm3b82MNT73a","YLCJ5wri6K8asJnHdJXzDP":"DeJcecf4TUURtVcNTbZL3e4psCfxA3CoVceTkWGYgiJmLSxW5U2PECfHTr9yZkHGBYL9ASMrkxZWeiFNhgWnNiS"}}  *Transaction has been rejected: validation error  SafeRequest : The identifier is not contained in signatures*  <I did not continue the original test pattern for this case because I cannot sign for the LibsovtokenDid11111111 identifier>     As you can see, I was able to build the transaction without a DID, but then it was impossible for me to actually submit the txn.  From the CLI, a mint-prepare command must be run by a Trustee for it to be usable later, it appears.  One reason I continue to pursue this issue is because Artem wrote a minting tool that can build a txn without using a DID and then it is able to successfully send it later.  I don't know which one is right, I just noticed the difference.    The original summary of this ticket (issue 1) is resolved at this point so please advise on whether a new ticket should be created for subsequent issues needing addressed (if any).  ></body> </Action>
<Action id="60016" issue="39762" author="ashcherbakov" type="comment" created="2019-05-15 08:26:47.0" updateauthor="ashcherbakov" updated="2019-05-15 08:26:47.0"> <body><! CDATA  ~lbendixsen  Thanks for the update and re-testing.  So. let me summarize it.  *Issue1:* # was a build issue, and resolved with the correct builds. # As for {quote}As you can see, I was able to build the transaction without a DID, but then it was impossible for me to actually submit the txn. From the CLI, a mint-prepare command must be run by a Trustee for it to be usable later, it appears. One reason I continue to pursue this issue is because Artem wrote a minting tool that can build a txn without using a DID and then it is able to successfully send it later. I don't know which one is right, I just noticed the difference.{quote}           The situation is the following: * On the latest stable, if there is a MINT without a DID created, then libsovtoken puts a default DID there (`LibsovtokenDid11111111 `), and hence we see the issue that you've described ==> *on the latest stable a valid DID must always be specified for MINT txn* * On the latest master, if there is a MINT without a DID created, then *libsovtoken doesn't put any default DID (leaving it None)* (see https://github.com/sovrin-foundation/libsovtoken/pull/376). *==> on the latest master, a MINT without a DID works correctly*     *Issue2:* not an issue, but expected behavior.  *Issue3:*  So, the non-privileged DID is on the ledger, thanks for checking this. {quote}<other signatures were obtained from other trustees at this point>  {quote} Can you please also check, that DIDs for each Trustee also present on the ledger?  In particular, can you please check that the following DIDs are present on the ledger: * 5M3i1PbpvEQmTk25EmAY6N * 6feBTywcmJUriqqnGc1zSJ * K2w8H44Z4PeRHphoAcFi4n * Kv2YdE5KGgdruMGW6p5w4b     If they all present, are we sure that all the signatures are correct (no keys have been rotated for example?)  ></body> </Action>
<Action id="60042" issue="39762" author="lbendixsen" type="comment" created="2019-05-15 21:43:37.0" updateauthor="lbendixsen" updated="2019-05-15 21:43:37.0"> <body><! CDATA  ~ashcherbakov   Issue 3 response:  All of the DIDs mentioned are trustees on the BuilderNet.  +------------------------+-------------------------+---------+  | *Dest *                  | *Verkey*                  | *Role*    |  +------------------------+-------------------------+---------+  | 5M3i1PbpvEQmTk25EmAY6N | ~7iwFwParUgTffA22Q5Tgvg | TRUSTEE |  +------------------------+-------------------------+---------+  | *Dest *                  | *Verkey*                  | *Role*    |  +------------------------+-------------------------+---------+  | 6feBTywcmJUriqqnGc1zSJ | ~EpnvDMWiFSSu1YksE1Cg3n | TRUSTEE |  +------------------------+-------------------------+---------+     +------------------------+------------------------+-------------------------+---------+  | *Identifier *            | *Dest *                  | *Verkey*                  | *Role*    |  +------------------------+------------------------+-------------------------+---------+  | 5M3i1PbpvEQmTk25EmAY6N | K2w8H44Z4PeRHphoAcFi4n | ~Kc1rbBmDKrvudmbu3Pf7cx | TRUSTEE |  +------------------------+------------------------+-------------------------+---------+     +------------------------+------------------------+---------------------------------------------+---------+  | *Identifier *            | *Dest *                  | *Verkey*                                      | *Role*    |  +------------------------+------------------------+---------------------------------------------+---------+  | 5M3i1PbpvEQmTk25EmAY6N | Kv2YdE5KGgdruMGW6p5w4b | ZKk1VDyZmBQkqvfvEKXeagNrzzWEPoAFReGBxRdMtca | TRUSTEE |  +------------------------+------------------------+---------------------------------------------+---------+        Also, in case you need it, here is an excerpt from the log for a BuilderNet node for the "original" issue 3 txn request:  2019-05-08 17:18:13,191|INFO|message_processor.py|FoundationBuilder discarding message (\{'identifier': 'GcyGfNY7y9WuEqUGdEoAxQ', 'reqId': 3479987566, 'operation': {'outputs':  {'address': '52CuALbWKBX66sDnmf8zL5HvxFYyjzFNuaibERRNhPgKP1bBu', 'amount': 1200000000000000000} , 'type': '10000'}, 'protocolVersion': 2, 'signatures': \{'6feBTywcmJUriqqnGc1zSJ': '2Tt9aMeD75EVWowLU2LGJAuFu3ZWaNdMiNAszHcZBqhyfz1pWoCskDEYL35z2uh1HCihoQ29gWY2gNnJQ5NAKnHD', '5M3i1PbpvEQmTk25EmAY6N': '4Rsn1mcuK7KMPgy5BZiPGysWyLdQeK7u7xk9a3pmvF4HH2Sid4mzB1e7hVztfSQincW4C1rLAb7wj21JcWpo4fhb', 'Kv2YdE5KGgdruMGW6p5w4b': 'paPauVLGkDsM8gXeJCuwzhpu7r2chqDCFtseuAjka5p234ZYc4isvEzgVQzm67VeZLziWcDKMRjWDARqu8noqgH', 'GcyGfNY7y9WuEqUGdEoAxQ': '3txpUMemuhhUo4iFZbM34CSiUYTUUpF3csdUcyJGLpBYdbnYrEzd37wSg9rDfJVJsHckFQfMLzR9ywJEcK8Yxhj4'}}, b'3r>% xnD5chOs^HaDZ:CH+6S}1V/vM=LFc9)qb*s') because InsufficientCorrectSignatures(3, 4)     I can attach the full log if you need it.  ></body> </Action>
<Action id="60048" issue="39762" author="ashcherbakov" type="comment" created="2019-05-16 07:13:03.0" updateauthor="ashcherbakov" updated="2019-05-16 07:13:03.0"> <body><! CDATA  ~lbendixsen  As I can see from the `verkey` format (non-abbreviated, no `~`, and 32 bytes instead of 16) for `Kv2YdE5KGgdruMGW6p5w4b`, it may be rotated.  Can you please double-check that the signature from `Kv2YdE5KGgdruMGW6p5w4b` is really correct and created by a private key matching the verkey (ZKk1VDyZmBQkqvfvEKXeagNrzzWEPoAFReGBxRdMtca) on the ledger?  ></body> </Action>
<Action id="60076" issue="39762" author="lbendixsen" type="comment" created="2019-05-16 17:08:16.0" updateauthor="lbendixsen" updated="2019-05-16 17:08:16.0"> <body><! CDATA  ~ashcherbakov   I am able to verify that the signature came from Matt Norton.  He very likely tested key rotation on his Trustee DID, so you are accurate with that part of your assessment. At the time he did the key rotation, I remember now, there was a probable bug that occurred where the ledger noted the rotation, but his wallet didn't or vice-versa. So your assessment in that case is also accurate. However: after trying the transaction as noted above with 4 signatures (3 of them being trustees and one of those three being this likely "bad" signature) I had the proposed transaction signed 1 more time with a verified good signature (newly created TRUSTEE, with no key rotation).  The results are listed below.    For clarification, there are 5 total signatures in the attempt shown below, 3 from known valid TRUSTEES with no key rotation bug possible, 1 from a trustee with a probable key rotation bug, and 1 from a non-privileged DID.  A mint transaction was later successful on the BuilderNet with just 3 TRUSTEE signatures (one of which was the additional one added to the txn shown below). The transaction shown below was attempted shortly after the original one noted in this ticket (within a few hours) as part of the original test run.  pool(buildernet):wallet(testnet_wallet):did(Gcy...AxQ):indy> ledger custom \{"identifier":"GcyGfNY7y9WuEqUGdEoAxQ","operation":{"outputs": {"address":"52CuALbWKBX66sDnmf8zL5HvxFYyjzFNuaibERRNhPgKP1bBu","amount000"},"protocolVersion":2,"reqId":3479987566,"signatures":\{"5M3i1PbpvEQmTk25EmAY6N":"4Rsn1mcuK7KMPgy5BZiPGysWyLdQeK7u7xk9a3pmvF4HH2Sid4mzB1e7hVztfSQincW4C1rLAb7wj21JcWpo4fhb","6feBTywcmJUriqqnGc1zSJ":"2Tt9aMeqhyfz1pWoCskDEYL35z2uh1HCihoQ29gWY2gNnJQ5NAKnHD","GcyGfNY7y9WuEqUGdEoAxQ":"3txpUMemuhhUo4iFZbM34CSiUYTUUpF3csdUcyJGLpBYdbnYrEzd37wSg9rDfJVJsHckFQfMLzR9ywJEcK8Yxhj4","K2w8H44Z4PeRHphoAcFi4n":"4gV4aSz5X5aBoJpCPhi5R5PUQEQqk7ddYA45m16gLThQjUQivrEn4A","Kv2YdE5KGgdruMGW6p5w4b":"paPauVLGkDsM8gXeJCuwzhpu7r2chqDCFtseuAjka5p234ZYc4isvEzgVQzm67VeZLziWcDKMRjWDARqu8noqgH"}}  *Transaction has been rejected: client request invalid: InsufficientCorrectSignatures(4, 5)*     ></body> </Action>
<Action id="60111" issue="39762" author="ashcherbakov" type="comment" created="2019-05-17 10:47:43.0" updateauthor="ashcherbakov" updated="2019-05-17 10:47:43.0"> <body><! CDATA  ~lbendixsen  Thanks for update and checking this.  The current Indy-Node behavior is that all signatures passed must be valid regardless of the required number of signatures.   So, even if we need just 3 signatures, but signed the transaction with 4, and 1 of them is invalid, the txn will be rejected.  If you think this is an issue - feel free to create a bug for this.  As for the current task - I think we can close it, can't we?  ></body> </Action>
<Action id="60121" issue="39762" author="lbendixsen" type="comment" body="Yes, thanks for the explanations and the help with understanding what was going on." created="2019-05-17 14:39:59.0" updateauthor="lbendixsen" updated="2019-05-17 14:39:59.0"/>
