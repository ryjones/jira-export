<Action id="48468" issue="32419" author="ckochenower" type="comment" created="2018-08-06 20:19:19.0" updateauthor="ckochenower" updated="2018-08-06 20:19:19.0"> <body><! CDATA Results:  !Screen Shot 2018-08-06 at 2.03.18 PM.png|thumbnail!   The demoted node (Node4) is the only node that ended up with the expected state. I did not account for the fact that the number of replicas would be reduced from 4 to 3 when dropping the number of nodes participating in consensus was reduced from 10 to 9.  ></body> </Action>
<Action id="48516" issue="32419" author="ckochenower" type="comment" created="2018-08-07 20:41:37.0" updateauthor="ckochenower" updated="2018-08-07 20:51:28.0"> <body><! CDATA Results of demoting two replicas:  !Screen Shot 2018-08-07 at 2.13.14 PM.png|thumbnail!   *Experiment Steps:* RC = node_info 'Count_of_replicas'  F = validator_info 'Pool_info'  'f_value'  # Start with 10 nodes (RC = 4, F = 3) and steady state is met (can write an nym) # Demote two of the replicas. Node4 and Node3 were demoted (RC = 3, F = 2) # Force a view change by stopping indy-node on the master (Node1) # Wait for a view change # Start indy-node on the original master (Node1) # Steady state is met # Rollback Steps (best effort to undo changes made during experiment): ## Promote and restart Node3 ## Promote and restart Node4 ## Start indy-node on the original master (Node1)  Why are Node1 (original master) and Node4 still reporting RC = 3 and F = 2? Node1's indy-node service was started AFTER the view change. Both Node3 and Node4 promoted and indy-node service was restarted AFTER they were promoted. Why would Node3 report the correct replica count (RC) and f value (F) and Node4 would not?  Restarting Node4 a *second* time seems to improve the situation. RC = 4 and F = 3 with Node7 selected/elected as R3:  !Screen Shot 2018-08-07 at 2.36.04 PM.png|thumbnail!   Restarting Node1 seems to improve the situation. RC = 4 and F = 3 with Node7 selected/elected as R3. Note that the Node1 was the original master when the experiment began. It was stopped (indy-node service stopped) to force a view change and was started (indy-node service started) AFTER the view change was detected.  !Screen Shot 2018-08-07 at 2.40.13 PM.png|thumbnail!    ~spivachuk  or  ~ashcherbakov  - Your feedback would be appreciated.  ></body> </Action>
<Action id="48522" issue="32419" author="ckochenower" type="comment" created="2018-08-08 00:11:21.0" updateauthor="ckochenower" updated="2018-08-08 00:11:21.0"> <body><! CDATA Running the demote-replica experiment described above for 5 iterations results in failures (ledger timeout when trying to write a nym) after at most 4 iterations.       ></body> </Action>
<Action id="48550" issue="32419" author="ashcherbakov" type="comment" created="2018-08-08 10:31:54.0" updateauthor="ashcherbakov" updated="2018-08-08 10:31:54.0"> <body><! CDATA  ~ckochenower  I think a ticket needs to be created for this issue. Can it be that Node 1 and Node 4 were not stopped and re-started properly for the first time?  ></body> </Action>
<Action id="48575" issue="32419" author="ckochenower" type="comment" created="2018-08-08 15:19:28.0" updateauthor="ckochenower" updated="2018-08-08 15:38:38.0"> <body><! CDATA  ~ashcherbakov  - I suppose it is possible.  stop_by_node_name|https://github.com/evernym/chaosindy/blob/master/chaosindy/actions/node.py#L128-L149  in chaosindy.actions.node, by default ("gracefully" and "force" kwargs), will attempt to gracefully shutdown the indy-node service, but will then attempt to kill associated pids if the graceful attempt to shutdown indy-node times out after 30 seconds.  I will dig through the experiment output to make sure indy-node was stopped and later started "gracefully" for both Node1 and Node4. If both nodes report that a `systemctl stop indy-node` fails or times out, we will have a potential explanation.  ></body> </Action>
<Action id="48577" issue="32419" author="ckochenower" type="comment" created="2018-08-08 16:14:31.0" updateauthor="ckochenower" updated="2018-08-08 16:15:56.0"> <body><! CDATA  ~ashcherbakov  - The indy-node-control service is started when the indy-node service is started, but is not stopped when the indy-node service is stopped. Is this by design?  When a node is promoted, the node needs to be restarted as part of the promotion workflow. Does only the indy-node service need to be restarted or does the indy-node-control service also need to be restarted?  ></body> </Action>
<Action id="48583" issue="32419" author="ckochenower" type="comment" body="`systemctl stop &lt;service&gt;` does not wait until a unit terminates before it returns successful (return code 0). indy-node has been known to take up to a minute to gracefully stop. I will enhance the stop_by_node_name function to wait up to 60 seconds (poll every 6 seconds up to 10 times) for the pids associated with indy-node and indy-node-control to disappear." created="2018-08-08 18:46:22.0" updateauthor="ckochenower" updated="2018-08-08 18:46:22.0"/>
<Action id="48605" issue="32419" author="ashcherbakov" type="comment" created="2018-08-09 09:40:22.0" updateauthor="ashcherbakov" updated="2018-08-09 09:40:22.0"> <body><! CDATA {quote}Does only the indy-node service need to be restarted or does the indy-node-control service also need to be restarted? {quote} `indy-node` service is enough. {quote}`systemctl stop <service>` does not wait until a unit terminates before it returns successful (return code 0). indy-node has been known to take up to a minute to gracefully stop. I will enhance the stop_by_node_name function to wait up to 60 seconds (poll every 6 seconds up to 10 times) for the pids associated with indy-node and indy-node-control to disappear. {quote} Ok, hopefully that should help.  ></body> </Action>
<Action id="48642" issue="32419" author="ckochenower" type="comment" created="2018-08-09 15:17:39.0" updateauthor="ckochenower" updated="2018-08-09 16:08:32.0"> <body><! CDATA Experiment results after making the aforementioned improvements to stop_by_node_name. suggest the "stuck" nodes are likely a node issue rather than an issue with the chaos experiment.  !Screen Shot 2018-08-09 at 8.48.03 AM.png|thumbnail!  The following output is an extract from the full experiment output (   ^run-demote-replica.out  ).  It shows that nodes that are promoted by the experiment are definitely being restarted (guaranteed stop followed by start).  {code} (chaostoolkit) ubuntu@KellyStableClientVirgina:~/chaosindy$ grep "^*" ./run-demote-replica.out  ********************** Experiment Iteration 1 of 1 ******************** * 2018-08-09 15:09:39 INFO   experiment:188  Running experiment: Demote Replica * 2018-08-09 15:09:39 INFO   activity:158  Probe: can-write-nym * 2018-08-09 15:09:47 INFO   hypothesis:179  Steady state hypothesis is met! * 2018-08-09 15:09:47 INFO   activity:158  Action: demote-n-backup-primaries * 2018-08-09 15:10:06 DEBUG   node:767  Demoting Node4 * 2018-08-09 15:10:10 DEBUG   node:767  Demoting Node3 * 2018-08-09 15:10:14 INFO   activity:158  Action: force-a-view-change * 2018-08-09 15:10:29 DEBUG   node:162  stop node: Node1 * 2018-08-09 15:10:32 INFO   activity:158  Action: start-stopped-primary-after-view-change * 2018-08-09 15:10:48 DEBUG   primary:146  Check 0 of 6 if view change is complete * 2018-08-09 15:10:48 DEBUG   primary:147  Former primary: Node1 * 2018-08-09 15:10:48 DEBUG   primary:148  Current primary: Node1 * 2018-08-09 15:11:17 DEBUG   primary:146  Check 1 of 6 if view change is complete * 2018-08-09 15:11:17 DEBUG   primary:147  Former primary: Node1 * 2018-08-09 15:11:17 DEBUG   primary:148  Current primary: None * 2018-08-09 15:11:47 DEBUG   primary:146  Check 2 of 6 if view change is complete * 2018-08-09 15:11:47 DEBUG   primary:147  Former primary: Node1 * 2018-08-09 15:11:47 DEBUG   primary:148  Current primary: Node2 * 2018-08-09 15:11:47 DEBUG   primary:150  View change detected! * 2018-08-09 15:11:48 INFO   activity:150  Pausing before next activity for 60s... * 2018-08-09 15:12:48 INFO   activity:158  Probe: check-demoted-backup-primary-status * 2018-08-09 15:13:04 INFO   hypothesis:149  Steady state hypothesis: Can write a nym * 2018-08-09 15:13:04 INFO   activity:158  Probe: can-write-nym * 2018-08-09 15:13:17 INFO   hypothesis:179  Steady state hypothesis is met! * 2018-08-09 15:13:17 INFO   rollback:28  Rollback: promote-demoted-backup-primaries * 2018-08-09 15:13:17 INFO   activity:158  Action: promote-demoted-backup-primaries * 2018-08-09 15:13:17 DEBUG   node:821  Promoting Node4 * 2018-08-09 15:13:21 DEBUG   node:831  Restart Node4 * 2018-08-09 15:13:21 DEBUG   node:162  stop node: Node4 * 2018-08-09 15:13:21 DEBUG   node:166  Attempting to stop indy-node service gracefully... * 2018-08-09 15:13:24 DEBUG   node:184  Ensuring node services are stopped: try 0... * 2018-08-09 15:13:24 DEBUG   node:149  Ensure indy-node/indy-node-control is stopped... * 2018-08-09 15:13:26 DEBUG   node:191  Node services guaranteed to be stopped. * 2018-08-09 15:13:26 DEBUG   node:213  start node: Node4 * 2018-08-09 15:13:28 DEBUG   node:742  Setting Node3's services to >VALIDATOR< * 2018-08-09 15:13:38 DEBUG   node:831  Restart Node3 * 2018-08-09 15:13:38 DEBUG   node:162  stop node: Node3 * 2018-08-09 15:13:38 DEBUG   node:166  Attempting to stop indy-node service gracefully... * 2018-08-09 15:13:39 DEBUG   node:184  Ensuring node services are stopped: try 0... * 2018-08-09 15:13:39 DEBUG   node:149  Ensure indy-node/indy-node-control is stopped... * 2018-08-09 15:13:40 DEBUG   node:191  Node services guaranteed to be stopped. * 2018-08-09 15:13:40 DEBUG   node:213  start node: Node3 * 2018-08-09 15:13:41 INFO   rollback:28  Rollback: start-stopped-primary * 2018-08-09 15:13:41 INFO   activity:158  Action: start-stopped-primary * 2018-08-09 15:13:41 DEBUG   node:213  start node: Node1 * 2018-08-09 15:13:43 INFO   rollback:28  Rollback: cleanup * 2018-08-09 15:13:43 INFO   activity:158  Action: cleanup {code}   ></body> </Action>
<Action id="48684" issue="32419" author="ashcherbakov" type="comment" body="Can you please create a bug ticket for this? Can you please attach logs for demoted/promoted nodes as well as for at least 1 normal node?" created="2018-08-10 06:55:41.0" updateauthor="ashcherbakov" updated="2018-08-10 06:55:41.0"/>
<Action id="48743" issue="32419" author="ckochenower" type="comment" created="2018-08-10 21:46:46.0" updateauthor="ckochenower" updated="2018-08-10 21:52:22.0"> <body><! CDATA  ~ashcherbakov  - Yes, I will create a ticket. I would like to remove chaosindy from the equation and manually simulate the process to determine if it is a race condition of some sort. Either way, a ticket will be created.  I will do the following manually:  Steps 9-13 are likely where we may be getting a race condition. As each node is promoted, the pool's f_value and Count_of_replicas are potentially affected. Going from 8 to 9 nodes _f_ = 2 = (8-1)/3 vs. 9 to 10 nodes _f_ = 3 = (9-1)/3 changes f_value to 3 and Count_of_replicas to 4.  # Reset the pool. Delete all data directories and restart the nodes. The result should be 10 nodes, f_value = 3, Count_of_replicas=4, and 12 or so transactions on the domain ledger. Node1 will be the master, Node2-4 are the backup primaries (replicas). # Demote Node4 using indy-cli # Demote Node3 using indy-cli # Stop indy-node on Node1 to force a view change # Wait for the view change to complete # Start indy-node on Node1 # Wait for Node1 to catchup # Promote Node3 using indy-cli # Restart indy-node on Node3 # Observe that f_value and Count_of_replicas are not changed (f_value = 2, Count_of_replicas = 3). # Promote Node4 using indy-cli # Restart indy-node on Node4 # Observe that f_value and Count_of_replicas were both increased by 1 (f_value = 3, Count_of_replicas = 4).  If we get different results, perhaps we are dealing with a race condition.  ></body> </Action>
<Action id="48747" issue="32419" author="ckochenower" type="comment" created="2018-08-10 23:56:34.0" updateauthor="ckochenower" updated="2018-08-10 23:56:34.0"> <body><! CDATA Results of manually simulating "Demote Replica" chaos experiment:  2. Demote Node4 using indy-cli 3. Demote Node3 using indy-cli  Following Node4/3 demotion: Node3 is still a replica for all nodes in the cluster. *Is this a problem?*  !Screen Shot 2018-08-10 at 3.56.27 PM.png|thumbnail!   4. Stop indy-node on Node1 to force a view change 5. Wait for the view change to complete  A replacement for Node3 as a replica only happens after a view change: !Screen Shot 2018-08-10 at 4.02.03 PM.png|thumbnail!   6. Start indy-node on Node1 7. Wait for Node1 to catchup !Screen Shot 2018-08-10 at 4.04.57 PM.png|thumbnail!   8. Promote Node3 using indy-cli 9. Restart indy-node on Node3  Node3 catches up with the rest of the participating nodes. !Screen Shot 2018-08-10 at 4.10.22 PM.png|thumbnail!   10. Observe that f_value and Count_of_replicas are not changed (f_value = 2, Count_of_replicas = 3). !Screen Shot 2018-08-10 at 4.10.22 PM.png|thumbnail!   11. Promote Node4 using indy-cli After promoting Node4 and before restarting Node4, replicas are selected/elected. !Screen Shot 2018-08-10 at 4.15.40 PM.png|thumbnail!   12. Restart indy-node on Node4 13. Observe that f_value and Count_of_replicas were both increased by 1 (f_value = 3, Count_of_replicas = 4). !Screen Shot 2018-08-10 at 4.19.35 PM.png|thumbnail!   *Conclusion*: We appear to have a race condition causing the experiment to result in invalid/unexpected state. Chaos experiments are able to execute the above steps faster than I could manually.  ></body> </Action>
<Action id="48778" issue="32419" author="ashcherbakov" type="comment" created="2018-08-13 07:22:22.0" updateauthor="ashcherbakov" updated="2018-08-13 07:22:22.0"> <body><! CDATA > Following Node4/3 demotion: Node3 is still a replica for all nodes in the cluster. *Is this a problem?* This is expected. As of now, re-election is done only during the view change, and view change is triggered only if master's primary is degraded or stopped. If one of backups' primaries is stopped/degraded/demoted - the view change will not be triggered.  We may (and probably should) improve it in future, but as of now this is expected.  ></body> </Action>
<Action id="48792" issue="32419" author="ckochenower" type="comment" body=" ~ashcherbakov  - I created  INDY-1577|https://jira.hyperledger.org/browse/INDY-1577  assuming a demoted node playing the role of replica was a problem. I will close the issue once you or  ~spivachuk  respond to the two questions on the issue." created="2018-08-13 15:01:02.0" updateauthor="ckochenower" updated="2018-08-13 15:01:02.0"/>
