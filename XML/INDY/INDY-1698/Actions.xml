<Action id="50389" issue="33711" author="krw910" type="comment" created="2018-09-12 21:58:51.0" updateauthor="krw910" updated="2018-09-12 21:58:51.0"> <body><! CDATA Changing this to Highest priority because it causes a crash   ></body> </Action>
<Action id="50659" issue="33711" author="sergey-shilov" type="comment" created="2018-09-19 13:16:47.0" updateauthor="sergey-shilov" updated="2018-09-19 13:16:47.0"> <body><! CDATA  ~esplinr   ~danielhardman   ~krw910   ~devin-fisher   ~KitHat   ~ashcherbakov   ~sergey.khoroshavin   ~steptan   Hello everyone.  Seems like this is such a critical problem for the indy-node that there is no any regulation of plugins behaviour.  On the node side we can not catch everything when some plugin's function is called. As a plugin is a black box for the node then exception catching code would look like 'except Exception', i.e. the most basic exception class. Ok, we can catch it, but how to handle this? For example, if PRE_DYNAMIC_VALIDATION hook raises some exception, there may be at least three possible ways: * Send out 'Reject' reply (but the reason is unknown or may look very strange) * Silently drop * The worst case: the plugin entered some failed state and all further requests causes raising of exception and only node process restart helps, so continue working does not make sense  But catching of basic exception does not provide any information which way to choose.  On my opinion the solution is some regulative doc (let's call it contract) that the indy-node provides for plugins. This contract will have the list of supported hooks provided by the indy-node, for each hook we can specify: * What exceptions are caught by indy-node (i.e. expected exceptions) and node's reaction on each type of exception (for example, send out 'Reject'). * All other exceptions causes node's process restart (may be not immediate to have the ability to gracefully finalise some node's structures, for example flush out boxes, but anyway node's process will be restarted).  Each *valid* plugin should follow this contract, otherwise working capacity is not guaranteed.  That is my proposal, any ideas on that?  ></body> </Action>
<Action id="50825" issue="33711" author="sergey.khoroshavin" type="comment" created="2018-09-20 09:13:31.0" updateauthor="sergey.khoroshavin" updated="2018-09-20 09:13:31.0"> <body><! CDATA {quote} All other exceptions causes node's process restart (may be *not immediate to have the ability to gracefully finalise some node's structures, for example flush out boxes*, but anyway node's process will be restarted). {quote}  Just wanted to elaborate on why this is important. During tests with buggy plugins we sometimes encountered the following situation: - primary started ordering request by sending PREPREPARE and modifying uncommited state - other nodes agreed, sent PREPARE and modified their uncommited state as well - prepare certificate was reached on _n-f-1_ nodes and they sent COMMITs - other _f+1_ nodes received those _n-f-1_ COMMITs as well as enough PREPAREs to reach certificate and send their own COMMIT - now these _f+1_ nodes have _n-f_ COMMITs (including their own) so they can finish ordering of batch, and they have their own COMMIT in outbox - _f+1_ nodes execute plugin commit hook which crash node due to some bug, so _f+1_ COMMITs are lost - we end up with _f+1_ restarted nodes with clean consensus state (zero viewNo and ppSeqNo, no messages) and _n-f-1_ nodes with unfinished batch for which they will never get enough COMMITs - so pool cannot order anymore until restart of at least _n-2f_ nodes with dirty state  The same situation will happen if we just restart node on unexpected plugin exception without flushing outboxes.  ></body> </Action>
<Action id="50880" issue="33711" author="devin-fisher" type="comment" created="2018-09-20 19:12:36.0" updateauthor="devin-fisher" updated="2018-09-20 19:12:36.0"> <body><! CDATA  ~sergey-shilov  I very much agree with you proposal to document the contract between plenum and the plugin. But I think some strategy for how plenum will protect itself in the event that the plugin don't follow the contract is still needed and is the main thing that this ticket should be driving us towards.      ></body> </Action>
<Action id="64631" issue="33711" author="ashcherbakov" type="comment" body="We get rid of hooks now and use Configurable request Handlers" created="2019-10-11 11:52:52.0" updateauthor="ashcherbakov" updated="2019-10-11 11:52:52.0"/>
<Action id="64634" issue="33711" author="esplinr" type="comment" created="2019-10-11 12:00:17.0" updateauthor="esplinr" updated="2019-10-11 12:00:17.0"> <body><! CDATA This issue makes two requests: * Indy Node should protect itself from plugins that are behaving badly. Our design for plugins does not allow this, as plugins can create additional ledgers that need to be managed on the audit ledger, and so if the plugin behaves badly consensus should stop until the problem is resolved. Plugins need to be tested to the same level as the rest of the ledger. However, moving from plugin hooks to plugin interfaces should make it easier to create well behaved plugins.  * We should document the interface. We have created the following documents:  https://github.com/hyperledger/indy-plenum/blob/master/docs/source/plugins.md   https://github.com/hyperledger/indy-plenum/blob/master/docs/source/request_handling.md  If people need more documentation, we should create new issues to guide the effort.  ></body> </Action>
