<Action id="45443" issue="28920" author="sergey-shilov" type="comment" created="2018-06-04 06:50:42.0" updateauthor="sergey-shilov" updated="2018-06-04 06:50:42.0"> <body><! CDATA Found the following official tuning guide: https://github.com/facebook/rocksdb/wiki/RocksDB-Tuning-Guide  ></body> </Action>
<Action id="45694" issue="28920" author="sergey-shilov" type="comment" created="2018-06-08 13:03:30.0" updateauthor="sergey-shilov" updated="2018-06-14 13:30:29.0"> <body><! CDATA *Problem state / reason:*  For now we run RocksDB instances with default options. But we can achieve much better performance/memory usage by tuning of RocksDB storages according to actual node's workloads.  But such tuning requires full understanding of each configuration parameter and all side effects of parameters changing. In fact tuning of RocksDB is very complex and understanding of each parameter takes much time. From the official  RocksDB tuning guide|https://github.com/facebook/rocksdb/wiki/RocksDB-Tuning-Guide : _"RocksDB is very flexible, which is both good and bad. You can tune it for variety of workloads and storage technologies. ... However, flexibility is not always user-friendly. We introduced a huge number of tuning options that may be confusing. ... Tuning RocksDB is often a trade off between three amplification factors: write amplification, read amplification and space amplification."_  And the guide ends with the following: "_Unfortunately, configuring RocksDB optimally is not trivial. *Even we as RocksDB developers don't fully understand the effect of each configuration change.* If you want to fully optimize RocksDB for your workload, we recommend experiments and benchmarking, while keeping an eye on the three amplification factors."_  So that we decided to slightly reduce the scope of this ticket: final optimized RocksDB configuration is not a target. The main targets of this ticket: * provide possibility to get RocksDB statistics; * figure out the set of configurable parameters that *do not break the storage that was initially created with other parameters' values;* * provide mechanism to configure each RocksDB storage separately according to its' specific workload * set obvious parameters according to our needs and limitations  *Changes:* * Created RocksDB configuration structure with the set of parameters that changed values do not break existing storages * Implemented mechanism of applying of RocksDB configuration to RocksDB's options * Set *keep_log_file_num = 5* for all storages to avoid too many created log files (each time storage is open a new log file is created) * Set *db_log_dir = '/dev/null'* for *read_ledger* script as there is no way to disable creating of log file during opening of storage (see previous note)  Other parameters may be changed in future if we see some problems in RocksDB I/O statistics.  *NOTE: CHANGE ROCKSDB PARAMETERS VERY CAREFUL AS EVEN DEVELOPERS OF ROCKSDB DO NOT FULLY UNDERSTAND ALL SIDE EFFECTS OF CHANGED OPTIONS!*  *Committed into:*       https://github.com/hyperledger/indy-plenum/pull/731       https://github.com/hyperledger/indy-node/pull/758      indy-node  1.4.458-master|https://github.com/hyperledger/indy-node/releases/tag/1.4.458-master   *Risk factors:*      Nothing is expected.  *Risk:*      Low  *Recommendations for QA:* * Set up and run a pool * Check that running _read_ledger_ does not lead to creation of new RocksDB LOG files: ** Check _/var/lib/indy/sandbox/data/NodeX/pool_transactions_ folder on some NodeX, it should contain one *LOG* file ** Run _read_ledger_ tool several times to read pool ledger:  _# read_ledger --type pool_ ** Then check _/var/lib/indy/sandbox/data/NodeX/pool_transactions_ folder, no any additional *LOG.old.** files like *LOG.old.1528554337890741* expected, just single *LOG* file should exist * Check limit of kept RocksDB LOG files: ** Restart indy-node service several times (> 5), after each restart check the number of *LOG** files in _/var/lib/indy/sandbox/data/NodeX/pool_transactions_ folder. Each restart should lead to new *LOG.old.XXX* file created, but overall number of *LOG** files should not be greater than *5*.  ></body> </Action>
<Action id="46097" issue="28920" author="vladimirwork" type="comment" created="2018-06-18 12:13:07.0" updateauthor="vladimirwork" updated="2018-06-18 12:13:07.0"> <body><! CDATA Build Info: indy-node 1.4.464  Steps to Validate: 1. Install \ upgrade pool of \ to 1.4.464 version. 2. Check that running read_ledger does not lead to creation of new RocksDB LOG files. 3. Check limit of kept RocksDB LOG files. 4. Check that pool writes and reads txns.  Actual Results: Pool works and logs files normally.  ></body> </Action>
