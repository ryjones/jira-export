<Issue id="17185" key="INDY-83" number="83" project="10303" reporter="danielhardman" assignee="nage" creator="danielhardman" type="10001" summary="As an Indy developer, I want to easily create a canonical dev env" priority="3" resolution="10000" status="10001" created="2017-05-26 17:45:35.0" updated="2019-10-09 09:39:05.0" resolutiondate="2019-10-09 09:39:05.0" votes="0" watches="4" workflowId="17189"> <description><! CDATA This story gets at the problem that it is hard to take a naked machine and get to a point where a developer has all libraries and dependencies installed, has all code laid out in a canonical way, and can run all tests and observe them pass. This should not be.  The success criterion for this story is: A developer can begin with a freshly installed OS (ubuntu 16+ or Windows 10+ must work; OSX desirable), read some *brief* instructions, and get to a fully functional dev environment with very little interaction. Ideally, the instructions would say something like "On Ubuntu, the packages you need are stored in a requirements.txt-style file at <url>, and you can install them all with this command: cat apt-packages.txt | sudo apt-get install"  Constraints on the solution (try very hard to achieve this; negotiate if it seems impossible):  1. Packages not written by Indy developers should be installed the way they will be installed for those who eventually run the software in production; that is, install as system packages, using the OS package manager. So for example, charm-crypto, pytest and so forth should all be installed system-wide with apt, yum, chocolatey, etc--NOT with pip.  2. Python virtual environments should not be required, but should be possible.  3. Components (github repos) should be assumed to live as siblings of one another under any convenient, common parent directory. They should discover one another's presence in that sibling location automatically, without any "pip install -e" type workflow.  4. Automated tests must be runnable from the command line at any folder inside the common parent with no difference in results, other than different scopes. Any dependencies should be discovered and resolved by the testrunner.  5. It should be possible to run a source code component in combination with os-package-manager packages for its dependencies. So, for example, if I only want to work on sovrin-node, I should be able to do "apt-get install plenum ledger anoncreds", and the dependencies should all seamlessly resolve--and if I later change my mind and want to work on anoncreds also, I should be able to get the code, and then do "apt-get remove anoncreds" and have the dependencies resolve seamlessly. Of course, having bleeding edge code in sovrin-node, but slightly stale code in a .deb for anoncreds might not work if the sovrin-node code depends on the latest-and-greatest anoncreds. So it should also be possible for a developer to install a bleeding edge anoncreds.deb with dpkg (not from a published repo), or to get the anoncreds source if it's *totally* bleeding edge.  6. The solution should be comfortable to use within 1 or 2 common python IDEs (including PyCharm, since we commonly use it). It should also be comfortable to use from the command line and with editors like vim and emacs.  ></description> </Issue>
