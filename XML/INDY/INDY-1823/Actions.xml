<Action id="53146" issue="35171" author="vladimirwork" type="comment" body="All logs\journals\metrics are in ev@evernymr33:logs/1823.7z" created="2018-11-07 14:19:21.0" updateauthor="vladimirwork" updated="2018-11-07 14:19:21.0"/>
<Action id="53384" issue="35171" author="toktar" type="comment" created="2018-11-13 14:02:25.0" updateauthor="toktar" updated="2018-11-14 12:16:10.0"> <body><! CDATA *PoA:* Consider the case when  Node1 has committed_pool_root_hash_1, Node2 has committed_pool_root_hash_2 It's correct situation because in one moment nodes can ordered different counts of batches. Now Node1 is sending a commit message and using committed_pool_root_hash_1 and data from PrePrepare to sign it. Node2 receives the commit from Node1 and validate it with its current committed_pool_root_hash, which is equal to committed_pool_root_hash_2 and different from the one used during signing. So, pool root hashes are different, and, although commit is correct, BLS signature verification fails, Commit is considered as invalid, and this batch will never be ordered. In order to fix the bug, we need to do the following: *  Add the current uncommitted pool state root hash to "POOL_STATE_ROOT_HASH" to PrePrepare message (Put it before PLUGIN_FIELDS for correct plugins work. Plugins add this field in the end of PrePrepare message) * Extend validation of received PrePreapares to check, that POOL_STATE_ROOT_HASH is equal to the node's uncommitted state root hash. If they are not equal - raise a suspicious error. * Change commit BLS signature creating. Now it should use pool state root hash from PrePrepare message instead committed state root hash. We can do it because pool state root hash from PrePrepare has already been verified in PrePrepare validation. * Change validation of a commit BLS signature. Now it should use pool state root hash from PrePrepare message instead committed state root hash. * Change logging message in case with incorrect BLS signature for commit message. Add information about an incorrect Commit message * Change using BLS key in creating signature from committed state to using key from uncommitted state. * Add unit tests: ** test for create3PCBatchwith for full requests queues ** test for create3PCBatchwith for pool_ledger (signature will not be added) ** test for successful finish for create3PCBatch (signature added, _bls_latest_multi_sig==None)  ** test for update_commit with _can_process_ledger() = false ** test for update_commit with _bls_latest_multi_sig = false ** test for successful finish for update_commit (signature added)  ** test for validate_commit with no BLS_MULTI_SIG in pre_prepare ** test for validate_commit with invalid pool_state_root_hash ** test for validate_commit with correct pool_state_root_hash ** test for validate_commit with no pool_state_root_hash ** test for processPrePrepare with no POOL_STATE_ROOT_HASH ** test for processPrePrepare with invalid POOL_STATE_ROOT_HASH ** test for processPrePrepare with correct POOL_STATE_ROOT_HASH ** test for processPrePrepare for indirect order of PrePrepares (PP2, PP1, check successful process for PP1, PP2 ) * Add integration test:  ** All nodes receive PrePrepare1(txn1 for pool_ledger) ** Nodes 1, 2 ordered txn1 and nodes 3, 4 did not. ** All nodes  receive PrePrepare2(txn2 for domain_ledger) ** Nodes 3, 4 receive commits from nodes 1, 2 ** Nodes 1, 2 ordered txn1 ** Check that all nodes ordered txn2  ></body> </Action>
<Action id="53479" issue="35171" author="vladimirwork" type="comment" body="Unit and integration tests were reviewed and discussed. Fix will be implemented in scope of INDY-1846." created="2018-11-15 11:11:16.0" updateauthor="vladimirwork" updated="2018-11-15 11:11:16.0"/>
