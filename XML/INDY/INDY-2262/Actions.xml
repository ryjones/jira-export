<Action id="65072" issue="42973" author="ashcherbakov" type="comment" created="2019-10-29 12:15:02.0" updateauthor="ashcherbakov" updated="2019-11-21 14:30:05.0"> <body><! CDATA *PoA Main Idea* * Extend Audit Ledger with the information about the current node registry * Calculate Primaries at the beginning of new view based on the Node Reg as it was at the beginning of last view where at least 1 txn has been ordered * Do view changes on every change of node reg  *PoA* 1) Write the integration tests above *DONE*: https://github.com/hyperledger/indy-plenum/pull/1397  2) Extend Audit txn with information about the current node registry *DONE*, https://github.com/hyperledger/indy-plenum/pull/1397 * Create `NodeRegistryBatchHandler` and register it for Pool Ledger batches (make sure it's called before `AuditBatchHandler`)  ** `NodeRegistryBatchHandler` updates `ThreePcBatch` with the information about the current node registry (after applying the current Batch) as a list of Nodes ** It needs to track the uncommitted nodeReg and revert it properly according to the general BatchHandler API   * Extend `AuditBatchHandler` to put the current nodeReg there ** Use delta approach as for primaries if nodeReg hasn't been changed to reduce the txn size  3) Change primary calculation to use the nodeReg as it was at the beginning of the last view where at least 1 txn has been ordered *DONE* https://github.com/hyperledger/indy-plenum/pull/1398 * Extend `NodeRegistryBatchHandler` with methods to get ** uncommitted nodeReg ** committed nodeReg ** nodeReg at the beginning of the last view where at least 1 txn has been ordered ** update nodeReg at the beginning of the last view correctly when doing revert of uncommitted state * Extend PrimarySelector to use new logic: - *DONE* https://github.com/hyperledger/indy-plenum/pull/1398 ** Inject NodeRegistryBatchHandler ** Use the given viewNo, nodeReg at the beginning of the last view (from NodeRegistryBatchHandler) and round robin to select primaries * Either remove primaries field from the Audit Ledger, or calculate it every time using PrimarySelector * Remove FuturePrimariesBatchHandler  4) Update `NodeRegistryBatchHandler` after catchup *DONE* https://github.com/hyperledger/indy-plenum/pull/1397 * Calculate current nodeReg from audit ledger DONE * Calculate nodeReg at the beginning of the last view from audit ledger TBD * Either get the primaries from the audit ledger (as of now), or calculate it using `PrimarySelector` (based on nodeReg at the beginning of the last view). TBD  5) Send Instance Change after a Node txn changing the number of Nodes is sent *DONE*  6) For nodes jumping from view X to view X+2 *DONE* https://github.com/hyperledger/indy-plenum/pull/1398 * They need to restore primaries at  the beginning of view X+1 from the (uncommitted) audit ledger * They If they don't have any txns from X+1 view in audit ledger, then they should fallback to the nodeReg of the beginning of view X.  * Another option to restore primaries for view X+1:  ** add current primary into INSTANCE CHANGE message ** Get the primaries from the quorum of INSTANCE CHANGEs (if node is doing a view change to view X+2, then it has a quorum of INSTANCE CHANGES with primaries for view X+1)  ></body> </Action>
<Action id="65319" issue="42973" author="ashcherbakov" type="comment" body="The current work is in https://github.com/ashcherbakov/indy-plenum/tree/indy-2262" created="2019-11-06 15:27:44.0" updateauthor="ashcherbakov" updated="2019-11-06 15:27:44.0"/>
<Action id="65566" issue="42973" author="ashcherbakov" type="comment" created="2019-11-15 12:27:35.0" updateauthor="ashcherbakov" updated="2019-11-18 12:12:32.0"> <body><! CDATA *Main Changes:* * Implemented NodeRegHandler to store uncommitted and committed node regs, as well as nod regs for previous view * Store nodeReg in audit ledger * Use node registry as it was at the beginning of last view for Primary Selection * Do view change on every change of node registry length (adding, promoting, demoting nodes) * Get rid of Future Primaries Batch Handler * Get rid of primaries in PrePrepares * Added integration tests reproducing the issue  *Other Changes:* * Process Checkpoints for future views to be able to caught up and cleanups of Checkpointer validator * Simplify PrimarySelector logic * Get rid of outdated Config parameters related to view change * Remove outdated code and cleanup * Some random fixes and improvements  *PRs:* * https://github.com/hyperledger/indy-plenum/pull/1397 * https://github.com/hyperledger/indy-plenum/pull/1400 * https://github.com/hyperledger/indy-plenum/pull/1398 * https://github.com/hyperledger/indy-plenum/pull/1395  *Build:* * indy-node 1.12.0.dev1132  * sovrin plugins 1.0.5.dev115  *Recommendation for QA:* * System tests for different combinations of adding/promoting/demoting nodes * Send NODE txn one by one (waiting for Reply) as well as in batch  ></body> </Action>
<Action id="65642" issue="42973" author="vladimirwork" type="comment" created="2019-11-20 09:08:16.0" updateauthor="vladimirwork" updated="2019-11-20 09:08:16.0"> <body><! CDATA Build Info: indy-node 1.12.0~dev1132 plugins 1.0.5~dev115  Steps to Validate: 1. Run TestProductionSuite. 2. Run https://github.com/hyperledger/indy-test-automation/blob/f460054667c2e9720417ac9514d07082b54d6cd8/system/draft/test_misc.py#L1978  Actual Results: All tests pass successfully.  ></body> </Action>
