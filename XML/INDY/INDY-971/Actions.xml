<Action id="41316" issue="24508" author="spivachuk" type="comment" body="In addition to introduction of a state machine to the catch-up logic, the whole node catch-up procedure must be divided into separate procedures for each of the replicas. Please see the comments to INDY-1153 for details." created="2018-03-07 15:39:53.0" updateauthor="spivachuk" updated="2018-03-07 15:39:53.0"/>
<Action id="43199" issue="24508" author="spivachuk" type="comment" created="2018-04-20 08:06:04.0" updateauthor="spivachuk" updated="2018-04-25 12:18:46.0"> <body><! CDATA During analysis of the current logic of catch-up the following issues have been found in it: * Possible start of catch-up from an arbitrary ledger on reception of a newer {{LedgerStatus}}. * If catch-up was triggered by reception of a newer {{LedgerStatus}} then {{Node.allLedgersCaughtUp}} is called each time when any ledger catch-up is completed, not only once when all the ledgers have been caught up. * {{LedgerManager.mark_ledger_synced}} is called periodically on reception of each {{n-f-1}}'th not newer {{LedgerStatus}} that is not an indication of catch-up necessity while this method calls {{LedgerInfo.postCatchupCompleteClbk}} and {{Node.allLedgersCaughtUp}}. * Execution of 3PC-batch after catch-up in case it was applied before catch-up and then reverted at catch-up start. * Absence of removal of {{PrePrepares}} from {{Replica.stashingWhileCatchingUp}}. * Absence of asking other nodes for {{LedgerStatuses}} on reception of a newer {{LedgerStatus}} from one node (when catch-up is not in progress). * If catch-up is not in progress then the node ignores incoming {{ConsistencyProof}} (which may be sent in reply to {{LedgerStatus}} that was sent to a reconnected node). * If catch-up is in progress and some ledger catch-up has not been started yet then the node does not respond older {{LedgerStatuses}} for this ledger with {{ConsistencyProofs}} until it starts catch-up of this ledger. * Different quorums for not newer {{LedgerStatuses}} and none-proofs which actually mean the same. * Mode.syncing is used instead of Mode.discovering. * Wrong log message on reaching the quorum of none-proofs in {{LedgerManager.canProcessConsistencyProof}}.  ></body> </Action>
<Action id="43424" issue="24508" author="spivachuk" type="comment" created="2018-04-25 16:11:08.0" updateauthor="spivachuk" updated="2018-04-25 16:15:03.0"> <body><! CDATA The statuses of the issues found in the current logic of catch-up are as follows: * Possible start of catch-up from an arbitrary ledger on reception of a newer {{LedgerStatus}}. _ This catch-up triggerÂ together with the wrong catch-up workflow can be removed from the current logic due to we have another catch-up trigger - the checkpoint-based one - for the case if a ledger lags behind from the ledgers on other nodes. _ * If catch-up was triggered by reception of a newer {{LedgerStatus}} then {{Node.allLedgersCaughtUp}} is called each time when any ledger catch-up is completed, not only once when all the ledgers have caught up. _ Will be eliminated if the ledger status based catch-up trigger is removed. _ * {{LedgerManager.mark_ledger_synced}} is called periodically on reception of each {{n-f-1}}'th not newer {{LedgerStatus}} that is not an indication of catch-up necessity while this method calls {{LedgerInfo.postCatchupCompleteClbk}} and {{Node.allLedgersCaughtUp}}. _ Will be eliminated if the ledger status based catch-up trigger is removed. _ * Execution of 3PC-batch after catch-up in case it was applied before catch-up and then reverted at catch-up start. _ Can be fixed in the current logic. _ * Absence of removal of {{PrePrepares}} from {{Replica.stashingWhileCatchingUp}}. _ Can be fixed in the current logic. _ * Absence of asking other nodes for {{LedgerStatuses}} on reception of a newer {{LedgerStatus}} from one node (when catch-up is not in progress). _ Will be eliminated if the ledger status based catch-up trigger is removed. _ * If catch-up is not in progress then the node ignores incoming {{ConsistencyProof}} (which may be sent in reply to {{LedgerStatus}} that was sent to a reconnected node). _ Will be eliminated if the ledger status based catch-up trigger is removed. _ * If catch-up is in progress and some ledger catch-up has not been started yet then the node does not respond older {{LedgerStatuses}} for this ledger with {{ConsistencyProofs}} until it starts catch-up of this ledger. _ Can be fixed in the current logic. _ * Different quorums for not newer {{LedgerStatuses}} and none-proofs which actually mean the same. _ Can be fixed in the current logic. _ * Mode.syncing is used instead of Mode.discovering. _ Can be fixed in the current logic. _ * Wrong log message on reaching the quorum of none-proofs in {{LedgerManager.canProcessConsistencyProof}}. _ Can be fixed in the current logic. _  Created the task INDY-1297 for removing ledger status based catch-up trigger together with wrong catch-up workflow and the bug INDY-1298 for fixing the rest found issues in the current logic of catch-up.  ></body> </Action>
<Action id="43427" issue="24508" author="spivachuk" type="comment" created="2018-04-25 16:34:11.0" updateauthor="spivachuk" updated="2018-04-25 16:34:11.0"> <body><! CDATA PR with state diagrams for catch-up actors (the new catch-up design): https://github.com/hyperledger/indy-plenum/pull/630  Interaction between catch-up actors and 3PC actor must be designed in scope of INDY-1299.  ></body> </Action>
<Action id="43453" issue="24508" author="spivachuk" type="comment" body="Created the separate task INDY-1301 for a design of the division of the whole node catch-up procedure into separate procedures for each of the replicas." created="2018-04-26 09:09:26.0" updateauthor="spivachuk" updated="2018-04-26 09:09:26.0"/>
