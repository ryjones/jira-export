<Action id="44587" issue="30346" author="esplinr" type="comment" created="2018-05-17 15:29:11.0" updateauthor="esplinr" updated="2018-05-17 17:29:11.0"> <body><! CDATA Our test pool can have more variety if we use images from multiple organizations: * Evernym * BC.gov's VON Docker image (Alpine Linux), published to Docker Hub ** Source here: https://github.com/PSPC-SPAC-buyandsell/von-image ** Variations published to Docker Hub here: https://hub.docker.com/r/bcgovimages/von-image/ * IBM's Docker Image  It would also benefit from having a variety of agents: * IBM * BC.gov * BYU * Evernym  ></body> </Action>
<Action id="44593" issue="30346" author="krw910" type="comment" created="2018-05-17 16:15:30.0" updateauthor="krw910" updated="2018-05-17 16:15:30.0"> <body><! CDATA  ~esplinr  You left off the required pool size. We are testing with and planning on a 25 node pool. Do you want to add that to the requirements and let us know if it needs to be higher than 25? We cannot go lower since I believe we are already on track to have that many Stewards.   ></body> </Action>
<Action id="44602" issue="30346" author="esplinr" type="comment" body="Thanks Kelly. I added that." created="2018-05-17 17:30:32.0" updateauthor="esplinr" updated="2018-05-17 17:30:32.0"/>
<Action id="44998" issue="30346" author="esplinr" type="comment" created="2018-05-23 17:07:32.0" updateauthor="esplinr" updated="2018-05-23 17:07:32.0"> <body><! CDATA I updated the description with feedback from James, Daniel, Steve, etc.  Failures will not necessarily block production deployment of the system, but they should be logged in order for them to be discussed.  ></body> </Action>
<Action id="45270" issue="30346" author="krw910" type="comment" body=" ~esplinr  I have a question about your comment that failures not necessarily blocking production deployment. I now see the requirement as a goal, but do we have a bare minimum requirement. In other words do we shoot for the goal and just take any area we fall short in on a case by case basis or is there a &quot;we cannot fall below &apos;this&apos; line&quot;? I am not asking for a lower bar, but it might help to distinguish a high priority issue from a medium or low priority issue." created="2018-05-29 19:36:45.0" updateauthor="krw910" updated="2018-05-29 19:36:45.0"/>
<Action id="45512" issue="30346" author="esplinr" type="comment" body=" ~krw910  Instead of negotiating a minimum requirement in advance of the test, I would prefer to see if we are happy with the test results. If we are not happy, we can evaluate the impact on delivery any additional work would have." created="2018-06-04 21:43:54.0" updateauthor="esplinr" updated="2018-06-04 21:43:54.0"/>
<Action id="46882" issue="30346" author="zhigunenko.dsr" type="comment" created="2018-07-03 16:15:39.0" updateauthor="zhigunenko.dsr" updated="2018-07-03 16:15:39.0"> <body><! CDATA *Test run:* 1 *Environment:* indy-node 1.4.483 (25 AWS nodes) Ledger size: 975k -> 1035k *Goal:* proof that big ledger can successfully write *Load:* {code} python3 perf_processes.py -g pool_transactions_genesis -b 10 -r 2 -t 10 -c 10 -n 11 -k "{\"nym\": {\"count\": 4}} {code} *Results:* Duration - {color:green}3 hours{color} Transactions written: 54479 Throughput: write - {color:orange}5 txns per second{color} *Findings:* * Big ledger can successfully write * Simultaneous reading and writing haven't been checked * Possibly load script generates less transactions than expected from parameters calculation  ----  *Test run:* 2 *Environment:* indy-node 1.4.483 (25 AWS nodes) Ledger size: 1035k -> 1069k *Goal:* pool works with ~250 concurrent clients that read 100 txns/sec and write 10 txns/sec *Load:* Four instances {code} python3 perf_processes.py -g pool_transactions_genesis -b 10 -r 2 -m t -c 38 -t 15 -n 1 -k nym {code} 152 clients with total throughput 10 txns / sec  Two instances {code} python3 perf_processes.py -g pool_transactions_genesis -b 10 -r 2 -m t -c 50 -t 1 -n 1 -k "{\"get_nym\": {\"file_name\": \"./load_test_1/successful\"}}" {code} 100 clients with total throughput 100 txns / sec  *Results:* Duration - {color:green}3 hours{color} Transactions written: 34249 (also another 1605 failed by pool timeout) Transactions read: 472059 (also another 928 failed by pool timeout) Throughput: write - {color:orange}3.17 txns/sec{color}, read - {color:orange}43.7 txns/sec{color} *Findings and further actions:* * If pool is not bottleneck, parameterized script throughput must be increased twice to achieve KPI * Schemas, attribs and cred-defs must be added to load (INDY-1378 required for revocation) * "Thread mode" allows to generate more connections on the same hardware  ></body> </Action>
<Action id="46911" issue="30346" author="zhigunenko.dsr" type="comment" created="2018-07-04 12:16:16.0" updateauthor="zhigunenko.dsr" updated="2018-07-04 12:16:16.0"> <body><! CDATA *Test run:* 3 *Environment:* indy-node 1.4.483 (25 AWS nodes) Ledger size: 1069k -> 1100k logLevel = INFO *Goal:* pool works with ~378 concurrent clients that read 100 txns/sec and write 10 txns/sec in total *Load:* Four instances {code} python3 perf_processes.py -g pool_transactions_genesis -b 10 -r 2 -m t -c 57 -t 20 -n 1 -k "{\"nym\": {\"count\": 4},\"nym\": {\"attrib\": 1},\"nym\": {\"schema\": 1},\"nym\": {\"cred_def\": 1}}" {code} 228 clients with total throughput 11 txns / sec  Two instances {code} python3 perf_processes.py -g pool_transactions_genesis -b 10 -r 10 -m t -c 75 -t 2 -n 4 -k "{\"get_nym\": {\"file_name\": \"./load_test_1/successful\"}}" {code} 150 clients with total throughput 100 txns / sec  *Results:* Last ViewNo - 82 Duration - {color:green}12 hours{color} Pool {color:red}stopped writing on 1100k transactions{color} - INDY-1448  ></body> </Action>
<Action id="47088" issue="30346" author="zhigunenko.dsr" type="comment" created="2018-07-09 10:25:38.0" updateauthor="zhigunenko.dsr" updated="2018-07-09 10:25:38.0"> <body><! CDATA *Test run:* 4 *Environment:* indy-node 1.4.494 (25 AWS nodes) Ledger size: 975k -> 1065k logLevel = INFO *Goal:* pool works with ~1000 concurrent clients that read 100 txns/sec and write 10 txns/sec in total *Load:* {code} python3 perf_processes.py -g pool_transactions_genesis -b 10 -r 2 -m t -c 286 -t 57 -n 1 -k "{\"nym\": {\"count\": 4},\"nym\": {\"attrib\": 1},\"nym\": {\"schema\": 1},\"nym\": {\"cred_def\": 1}}" {code} {code} python3 perf_processes.py -g pool_transactions_genesis -b 10 -r 2 -m t -c 143 -t 57 -n 1 -k "{\"nym\": {\"count\": 4},\"nym\": {\"attrib\": 1},\"nym\": {\"schema\": 1},\"nym\": {\"cred_def\": 1}}" {code} {code} python3 perf_processes.py -g pool_transactions_genesis -b 10 -r 2 -m t -c 143 -t 57 -n 1 -k "{\"nym\": {\"count\": 4},\"nym\": {\"attrib\": 1},\"nym\": {\"schema\": 1},\"nym\": {\"cred_def\": 1}}" {code} 572 clients with total throughput 10 txns / sec  {code} python3 perf_processes.py -g pool_transactions_genesis -b 10 -r 2 -m t -c 143 -t 4 -n 1 -k "{\"get_schema\": {\"file_name\": \"./load_schema/successful\"}}" {code} {code} python3 perf_processes.py -g pool_transactions_genesis -b 10 -r 2 -m t -c 143 -t 4 -n 1 -k "{\"get_attrib\": {\"file_name\": \"./load_attrib/successful\"}}" {code} {code} python3 perf_processes.py -g pool_transactions_genesis -b 10 -r 2 -m t -c 143 -t 4 -n 1 -k "{\"get_nym\": {\"file_name\": \"./load_nym/successful\"}}" {code} 429 clients with total throughput 107 txns / sec  *Results:* Last ViewNo - 1 Duration - {color:green}3 hours{color} Pool {color:green} doesn't stopped writing{color} Transactions written: 89911 (no fails) Transactions read: 869357 (no fails) Throughput: write - {color:orange}8.32 txns/sec{color}, read - {color:orange}80.5 txns/sec{color}  ></body> </Action>
<Action id="47122" issue="30346" author="zhigunenko.dsr" type="comment" created="2018-07-09 20:22:55.0" updateauthor="zhigunenko.dsr" updated="2018-07-09 20:22:55.0"> <body><! CDATA *Test run:* 5 *Environment:* indy-node 1.4.494 (25 AWS nodes) Ledger size: 975k -> 1065k logLevel = INFO *Goal:* pool works with ~1000 concurrent clients that read 100 txns/sec and write 10 txns/sec in total *Load:* {code} python3 perf_processes.py -g pool_transactions_genesis -b 10 -r 2 -m t -c 286 -t 19 -n 4 -k "{\"nym\": {\"count\": 4},\"nym\": {\"attrib\": 1},\"nym\": {\"schema\": 1},\"nym\": {\"cred_def\": 1}}" {code} {code} python3 perf_processes.py -g pool_transactions_genesis -b 10 -r 2 -m t -c 143 -t 19 -n 4 -k "{\"nym\": {\"count\": 4},\"nym\": {\"attrib\": 1},\"nym\": {\"schema\": 1},\"nym\": {\"cred_def\": 1}}" {code} {code} python3 perf_processes.py -g pool_transactions_genesis -b 10 -r 2 -m t -c 143 -t 19 -n 4 -k "{\"nym\": {\"count\": 4},\"nym\": {\"attrib\": 1},\"nym\": {\"schema\": 1},\"nym\": {\"cred_def\": 1}}" {code} 572 clients with total throughput 120 txns / sec  {code} python3 perf_processes.py -g pool_transactions_genesis -b 10 -r 2 -m t -c 143 -t 7 -n 2 -k "{\"get_schema\": {\"file_name\": \"./load_schema/successful\"}}" {code} {code} python3 perf_processes.py -g pool_transactions_genesis -b 10 -r 2 -m t -c 143 -t 7 -n 2 -k "{\"get_attrib\": {\"file_name\": \"./load_attrib/successful\"}}" {code} -python3 perf_processes.py -g pool_transactions_genesis -b 10 -r 2 -m t -c 143 -t 7 -n 2 -k "{\"get_nym\": {\"file_name\": \"./load_nym/successful\"}}"-  {color:orange}286 clients{color} with total throughput 81 txns / sec  *Results:* Last ViewNo - no view changes Duration - {color:orange}2 hours 20 minutes{color} Pool {color:orange} stopped writing because of "no space left"{color} Transactions written: 91k+ Throughput: write - {color:green}12 txns/sec{color}  ></body> </Action>
<Action id="47359" issue="30346" author="zhigunenko.dsr" type="comment" created="2018-07-16 14:19:19.0" updateauthor="zhigunenko.dsr" updated="2018-07-16 14:19:19.0"> <body><! CDATA *Test run:* 6 *Environment:* indy-node 1.4.500 (25 AWS nodes) Ledger size: 230k -> 926k logLevel = INFO STACK_COMPANION=1 *Goal:* pool works with ~1000 concurrent clients that write 15 txns/sec in total *Load:* {code} python3 perf_processes.py -g pool_transactions_genesis -m t -c 200 -t 22 -n 1 -k nym python3 perf_processes.py -g pool_transactions_genesis -m t -c 200 -t 66 -n 1 -k schema python3 perf_processes.py -g pool_transactions_genesis -m t -c 200 -t 66 -n 1 -k attrib python3 perf_processes.py -g pool_transactions_genesis -m t -c 200 -t 132 -n 1 -k cred_def python3 perf_processes.py -g pool_transactions_genesis -m t -c 200 -t 132 -n 1 -k cred_def {code}  *Results:* Last ViewNo - {color:orange}11 view changes{color} Duration - {color:green}12 hours +{color} Pool {color:orange} stopped writing{color} Transactions written: {color:green}700k+{color} Throughput: write - {color:green}15 txns/sec{color} INDY-1477 has been created  *Additional info:* Lack of RAM or disk space could have arisen Free RAM stably decreasing in work time, look like a memory leaks  ></body> </Action>
<Action id="47361" issue="30346" author="zhigunenko.dsr" type="comment" created="2018-07-16 14:35:12.0" updateauthor="zhigunenko.dsr" updated="2018-07-16 14:35:12.0"> <body><! CDATA *Test run:* 7 *Environment:* indy-node 1.4.500 (25 AWS nodes) Ledger size: 27 -> 242k logLevel = INFO STACK_COMPANION=1 *Goal:* pool works with ~1000 concurrent clients that write 20 txns/sec in total *Load:* {code} python3 perf_processes.py -g pool_transactions_genesis -m t -c 200 -t 33 -n 2 -k nym python3 perf_processes.py -g pool_transactions_genesis -m t -c 200 -t 50 -n 1 -k schema python3 perf_processes.py -g pool_transactions_genesis -m t -c 200 -t 50 -n 1 -k attrib python3 perf_processes.py -g pool_transactions_genesis -m t -c 200 -t 100 -n 1 -k cred_def python3 perf_processes.py -g pool_transactions_genesis -m t -c 200 -t 100 -n 1 -k cred_def {code}  *Results:* Last ViewNo - {color:red}24 view changes{color} Duration - {color:red}6 hours{color} Pool {color:orange} stopped writing{color} Transactions written: {color:green}700k+{color} Throughput: write - {color:green}15 txns/sec{color} in peak  After first 2 hours and 105k txns performance starts decreased INDY-1478 has been created  ></body> </Action>
<Action id="47421" issue="30346" author="zhigunenko.dsr" type="comment" created="2018-07-17 14:13:38.0" updateauthor="zhigunenko.dsr" updated="2018-07-17 14:13:38.0"> <body><! CDATA *Test run:* 8 *Environment:* indy-node 1.4.500 (25 AWS nodes) Ledger size: 247k -> 354k logLevel = INFO STACK_COMPANION=1 *Goal:* pool works with ~1000 concurrent clients that write 10 txns/sec and read 100 txns/sec in total  *Load:* {code} python3 perf_processes.py -g pool_transactions_genesis -m t -c 167 -t 33 -n 1 -k nym python3 perf_processes.py -g pool_transactions_genesis -m t -c 167 -t 33 -n 1 -k "{\"schema\": 1, \"attrib\": 3}" python3 perf_processes.py -g pool_transactions_genesis -m t -c 167 -t 132 -n 1 -k cred_def --- python3 perf_processes.py -g pool_transactions_genesis -m t -c 167 -t 2.7 -n 1 -k get_nym python3 perf_processes.py -g pool_transactions_genesis -m t -c 167 -t 6 -n 1 -k "{\"get_schema\": 1, \"get_attrib\": 1}" python3 perf_processes.py -g pool_transactions_genesis -m t -c 167 -t 12 -n 1 -k get_cred_def {code}  *Results:* Last ViewNo - {color:green}no view change{color} Duration - {color:green}3 hours{color} Pool {color:green} in action {color} Transactions written: {color:green}108k+{color} Throughput: write - {color:green}10 txns/sec{color} , read - {color:orange}56 txns/sec{color}  ></body> </Action>
<Action id="47434" issue="30346" author="zhigunenko.dsr" type="comment" created="2018-07-17 18:00:51.0" updateauthor="zhigunenko.dsr" updated="2018-07-17 18:00:51.0"> <body><! CDATA *Test run:* 9 *Environment:* indy-node 1.4.500 (25 AWS nodes) Ledger size: 354k -> 461k logLevel = INFO STACK_COMPANION=1 *Goal:* pool works with ~1000 concurrent clients that write 10 txns/sec and read 100 txns/sec in total  *Load:* {code} python3 perf_processes.py -g pool_transactions_genesis -m t -c 167 -t 33 -n 1 -k nym python3 perf_processes.py -g pool_transactions_genesis -m t -c 167 -t 33 -n 1 -k "{\"schema\": 1, \"attrib\": 3}" python3 perf_processes.py -g pool_transactions_genesis -m t -c 167 -t 132 -n 1 -k cred_def --- python3 perf_processes.py -g pool_transactions_genesis -m t -c 167 -t 1.35 -n 1 -k get_nym python3 perf_processes.py -g pool_transactions_genesis -m t -c 167 -t 3 -n 1 -k "{\"get_schema\": 1, \"get_attrib\": 1}"		 python3 perf_processes.py -g pool_transactions_genesis -m t -c 167 -t 6 -n 1 -k get_cred_def {code} *Results:* Last ViewNo - {color:#008000}no view change{color} Duration - {color:#008000}3 hours{color} Pool {color:#008000}in action {color} Transactions written: {color:#008000}106k+{color} Transactions read: {color:#FFA500}798k+{color} Throughput: write - {color:#008000}10 txns/sec{color} , read - {color:#FFA500}73.9 txns/sec{color}  ></body> </Action>
<Action id="47514" issue="30346" author="zhigunenko.dsr" type="comment" created="2018-07-19 08:03:06.0" updateauthor="zhigunenko.dsr" updated="2018-07-19 08:03:06.0"> <body><! CDATA *Test run:* 10 *Environment:* indy-node 1.4.504 (25 AWS nodes) Ledger size: 0k -> 106k logLevel = INFO STACK_COMPANION=0 *Goal:* pool works with ~1000 concurrent clients that write 10 txns/sec and read 100 txns/sec in total  *Load:* {code} python3 perf_processes.py -g pool_transactions_genesis -m t -c 167 -t 33 -n 1 -k nym python3 perf_processes.py -g pool_transactions_genesis -m t -c 167 -t 33 -n 1 -k "{\"schema\": 1, \"attrib\": 3}" python3 perf_processes.py -g pool_transactions_genesis -m t -c 167 -t 132 -n 1 -k cred_def --- python3 perf_processes.py -g pool_transactions_genesis -m t -c 167 -t 1.35 -n 1 -k get_nym python3 perf_processes.py -g pool_transactions_genesis -m t -c 167 -t 3 -n 1 -k "{\"get_schema\": 1, \"get_attrib\": 1}"		 python3 perf_processes.py -g pool_transactions_genesis -m t -c 167 -t 6 -n 1 -k get_cred_def {code} *Results:* Last ViewNo - {color:#008000}no view change{color} Duration - {color:#008000}3 hours{color} Pool {color:#008000}in action {color} Transactions written: {color:#008000}106k+{color} Transactions read: {color:#FF0000}510k+{color} Throughput: write - {color:#008000}10 txns/sec{color} , read - {color:#FF0000}51 txns/sec{color}  Reading throughput *degradation*: 30%  ></body> </Action>
<Action id="47702" issue="30346" author="ozheregelya" type="comment" body="Note that with such values of -k parameter (get_nym, get_schema, get_attrib, get_cred_def, without specifying of the source file) the load script reads random data, not existing in the ledger." created="2018-07-24 10:37:40.0" updateauthor="ozheregelya" updated="2018-07-24 10:37:40.0"/>
<Action id="49013" issue="30346" author="zhigunenko.dsr" type="comment" created="2018-08-17 12:25:51.0" updateauthor="zhigunenko.dsr" updated="2018-08-17 12:25:51.0"> <body><! CDATA *Test run:* 11 *Environment:* indy-node 1.4.500 (25 AWS nodes) Ledger size: 0k -> 156k + 9k logLevel = INFO *Goal:* pool works with ~1000 concurrent clients that write 10 txns/sec and read 100 txns/sec in total  *Load:* 5 instances, each of them creates 200 clients generates required distribution of requests/transactions  *Results:* {color:#FFA500}Regular view changes{color} Duration - {color:#008000}10 hours{color} Pool {color:#008000}in action {color} Transactions written: {color:#FFA500}165k+{color} Transactions read: {color:#FFA500}2.5kk+{color} Throughput: write - {color:#FF0000}10 txns/sec{color} , read - {color:#FFA500}67+ txns/sec{color}  ></body> </Action>
<Action id="49014" issue="30346" author="zhigunenko.dsr" type="comment" created="2018-08-17 12:26:55.0" updateauthor="zhigunenko.dsr" updated="2018-08-17 12:26:55.0"> <body><! CDATA *Reason to close:* Future exploration will be continued in scope of INDY-1607  ></body> </Action>
