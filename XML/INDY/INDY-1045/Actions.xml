<Action id="37832" issue="26111" author="spivachuk" type="comment" created="2017-12-28 16:20:37.0" updateauthor="spivachuk" updated="2017-12-28 16:51:01.0"> <body><! CDATA *Problem reason:* The issue is the same as one described in INDY-959. The only difference is that in INDY-959 there were pool transactions with duplicated client requests, while in this bug there are domain transactions with duplicated client requests. For example, for the request {{('VjyDVzQ5s7rJ8HZTgEdvT5', 1510007293268391)}} in {{korea.log}} we can see the following events occurred on 2017-12-15: - At 18:59:49,557 {{korea}} received PREPREPARE with this client request for the instance 0 from {{virginia}}. - At 18:59:49,561 {{korea}} sent MESSAGE_REQUEST for PROPAGATE of this client request to all the others. - At 18:59:50,390 {{korea}} received MESSAGE_RESPONSE with PROPAGATE of this client request from {{virginia}}. - At 19:01:44,606 {{korea}} received MESSAGE_REQUEST for PROPAGATE of this client request from {{virginia}}. - At 19:01:44,616 {{korea}} sent MESSAGE_RESPONSE with PROPAGATE of this client request to {{virginia}}. - At 19:01:45,089 {{korea}} received PROPAGATE of this client request from {{virginia}}.  So we can see that {{virginia}} requested PROPAGATE of the client request which it propagated just now. If we look into {{virginia.log}} we can see the following events occurred on 2017-12-15: - At 18:59:50,987 {{virginia}} committed this client request into the ledger. - At 19:01:20,013 {{virginia}} was initiating after the restart. - At 19:01:45,808 {{virginia}} committed this client request into the ledger once again.  So after the restart {{virginia}} committed once again the client request that it had already committed before the restart. This was so because {{virginia}} was not able to detect that it saw this client request earlier (as we have noticed in {{korea.log}} above). If there were the fix made in scope of INDY-959 then, already having the transaction in the ledger, {{virginia}} would process neither the request received directly from the client nor the propagated request (the request received directly from the client would be just replied basing on the current data in the ledger). Hence {{virginia}} would not commit this client request into the ledger again.  *Problem state:* The bug with a lack of a check of the request presence in seqNoDB on processing of the belated PROPAGATE message was fixed in scope of INDY-959.  ></body> </Action>
<Action id="38377" issue="26111" author="vladimirwork" type="comment" created="2018-01-10 09:24:30.0" updateauthor="vladimirwork" updated="2018-01-10 09:24:30.0"> <body><! CDATA Build Info: indy-node 1.2.261  Steps to Validate: 1. Install pool of 4..7 nodes. 2. Send about 250 txns to the pool. 3. Check the pool/domain ledger count. 4. Shutdown and start all machines in the pool (docker container *stop and start* if docker pool is used). 5. Check the pool/domain ledger count.  Actual Results: Pool and domain counts after machines' rebooting are the same as before.  ></body> </Action>
