<Action id="63696" issue="42321" author="ashcherbakov" type="comment" created="2019-09-12 09:15:29.0" updateauthor="ashcherbakov" updated="2019-09-26 11:41:24.0"> <body><! CDATA PoA: #  DONE  Make sure that ViewChange and NewView messages work correctly when sent via network layer (serialized and deserialized). As of now it will not work, since it uses tuples and Checkpoint messages which will be deserialized to dicts and lists. #  DONE  Investigate why not all simulation tests pass #  DONE  Fix the processing of Instance Changes  #  DONE  Fix primaries in new view audit txns when only 1 batch has been ordered on some nodes  #  DONE  Improve timeouts in simulation tests to reproduce two issues above (plus potentially lack of ViewChange requests) #  DONE  Fix last pre-prepare time when reverting bacthes before View Change #  DONE  Write a couple of simple integration tests for view change ** Test 1: *** Send `NeedViewChange` messages to all the nodes *** Make sure that view change finished ** Test 2: *** Order a couple of batches on all nodes *** Send `NeedViewChange` messages to all the nodes *** Make sure that view change finished ** Test 3: *** Stop next primary *** Send `NeedViewChange` messages to all the nodes *** Make sure that view change finished ** Test 4: *** Delay Commits on all nodes except Node4 *** Order a couple of batches on all nodes except Node 4 (it needs to be preparedÂ  on Node  *** Send `NeedViewChange` messages to all the nodes *** Make sure that view change finished, all nodes have the same data, and the pool is functional (new requests can be written) ** Test 5: *** Delay Commits on all nodes except Node4 *** Make sure a request is ordered *** Make sure a request is pre-prepared on Node4 *** Reset delay without processing *** Stop Node2 and *** Send `NeedViewChange` messages to all the nodes *** Make sure that viewno=2, all nodes have the same data, and the pool is functional (new requests can be written) ** Test 6: *** Lagging one node more then 1 checkpoint but less then needed to catchup. *** Forcing view change. *** Ensure, that lagged node will try to reorder batches after pool's stable checkpoint *** Send requests for next stable checkpoint *** Ensure, that lagged node will start catch-up and continue ordering as other nodes (set last_ordered with new view_no) #  IN PROGRESS  Create a build with a new View Change Service integrated  ~sergey.khoroshavin   ** OrderingServiceMsgValidator into Ordering Service ** Modify View Changer to switch to new View Change Service ** Skip old tests in view-change folder (and potentially catch-up folder) ** Try to fix other tests if they can be fixed quickly; otherwise skip them as well ** Modify the tests from the previous item to start a real view change (by performance degradation for example) instead of explicit message sending   ></body> </Action>
<Action id="64117" issue="42321" author="ashcherbakov" type="comment" created="2019-09-25 10:58:01.0" updateauthor="ashcherbakov" updated="2019-09-25 14:31:25.0"> <body><! CDATA Follow-up tasks: * INDY-2229 * INDY-2230 * INDY-2231  Other possible future improvements: # Consider starting catchup after view change immediately if a Replica doesn't have a checkpoint from the NewView (lagged behind). # Consider removing primaries from PrePrepare, and do a View Change on every change of N.   ></body> </Action>
<Action id="64197" issue="42321" author="ashcherbakov" type="comment" created="2019-09-30 06:45:57.0" updateauthor="ashcherbakov" updated="2019-09-30 06:45:57.0"> <body><! CDATA *PRs:* * https://github.com/hyperledger/indy-plenum/pull/1333 *  https://github.com/hyperledger/indy-plenum/pull/1334  * https://github.com/hyperledger/indy-plenum/pull/1336 * https://github.com/hyperledger/indy-plenum/pull/1338 * https://github.com/hyperledger/indy-plenum/pull/1341 * https://github.com/hyperledger/indy-plenum/pull/1344 * https://github.com/hyperledger/indy-plenum/pull/1347 * https://github.com/hyperledger/indy-plenum/pull/1349 * https://github.com/hyperledger/indy-plenum/pull/1345  ></body> </Action>
<Action id="64198" issue="42321" author="ashcherbakov" type="comment" body="The work will be continued in the scope of INDY-2140 and INDY-2146" created="2019-09-30 06:46:24.0" updateauthor="ashcherbakov" updated="2019-09-30 06:46:24.0"/>
