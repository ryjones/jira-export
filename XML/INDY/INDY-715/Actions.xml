<Action id="30266" issue="19974" author="alexander.shekhovcov" type="comment" created="2017-08-28 15:53:49.0" updateauthor="alexander.shekhovcov" updated="2017-08-28 15:53:49.0"> <body><! CDATA For current moment `validator-info` reads json file which the Node prints each 60 sec. Let's see how it works. As the next step communication validator-info with node may be implemented using client-server model.   *How to test:* Install 1.0.122+ and make sure that `validator-info` command is available in shell and prints actual information (see description)   ></body> </Action>
<Action id="30300" issue="19974" author="alexander.shekhovcov" type="comment" body=" ~VladimirWork  `validator-info` returns {{&quot;There are no info files in /home/sovrin/.sovrin&quot;}} first 60 sec after first start. For now that is expected behavior." created="2017-08-29 10:28:44.0" updateauthor="alexander.shekhovcov" updated="2017-08-29 10:29:48.0"/>
<Action id="30301" issue="19974" author="vladimirwork" type="comment" created="2017-08-29 10:55:58.0" updateauthor="vladimirwork" updated="2017-08-29 10:55:58.0"> <body><! CDATA Build Info: indy-node 1.1.125  Actual Results: 1. Only "sovrin" user can run "validator-info" cause files are in /home/sovrin/.sovrin. 2. There is no node status in "validator-info": "Validator Node1 is Failed to connect to bus: No such file or directory" cause "sovrin" user can't check "systemctl status sovrin-node.service". 3. There are incorrect IPs in "validator-info -v" and "validator-info --json": 0.0.0.0 for all nodes. 4. There are incorrect versions in "validator-info -v": "indy-node:1.0.28 sovrin:1.0.3" and there are nulls in "validator-info --json": "software": {"indy-node": null,"sovrin": null}. 5. How "average-per-second" parameters are calculated? How can we check low amounts of txns (less than 60 txns during 60 seconds for example - will we see "0" if node printed json in the moment when no txns are reading/writing?)?  Expected Results: 2. Need to get node status normally by "sovrin" user. 3. Need to get correct IPs. 4. Need to get correct versions with -v. Need to get correct versions with --json or remove version block from it.  Other points need to be clarified.  ></body> </Action>
<Action id="30302" issue="19974" author="alexander.shekhovcov" type="comment" created="2017-08-29 11:25:10.0" updateauthor="alexander.shekhovcov" updated="2017-08-29 11:26:01.0"> <body><! CDATA {quote}1. Only "sovrin" user can run "validator-info" cause files are in /home/sovrin/.sovrin.{quote} Try to use --basedir option if execute "validator-info" from non sovrin user. {code}  validator-info --basedir /home/sovrin/.sovrin {code}  {quote}2. There is no node status in "validator-info": "Validator Node1 is Failed to connect to bus: No such file or directory" cause "sovrin" user can't check "systemctl status sovrin-node.service". {quote} This is a know problem for docker. For workaround use #1.  {quote}3. There are incorrect IPs in "validator-info -v" and "validator-info --json": 0.0.0.0 for all nodes.{quote} Will be fixed.  {quote} 4. There are incorrect versions in "validator-info -v": "indy-node:1.0.28 sovrin:1.0.3" and there are nulls in "validator-info --json" ... {quote} Will be fixed.  {quote} 5. How "average-per-second" parameters are calculated? How can we check low amounts of txns (less than 60 txns during 60 seconds for example - will we see "0" if node printed json in the moment when no txns are reading/writing?)? {quote}  "average-per-second" parameters are calculated like: {code} avg_reads = node.total_read_request_number / (time.time() - self._node.created) avg_writes = node.monitor.totalRequests / (time.time() - self._node.created) {code} So you may start a pool then send some amount of txns and check the result after 60 sec. If there is not issues in implementation you will see some values > 0.    ></body> </Action>
<Action id="30318" issue="19974" author="alexander.shekhovcov" type="comment" created="2017-08-29 15:02:52.0" updateauthor="alexander.shekhovcov" updated="2017-08-29 15:04:50.0"> <body><! CDATA  ~tharmon  I am going to set parameters *bindings > client > ip*, *bindings > node > ip* from node's pool ledger. Is it correct? If a node is not a part of pool (there are no any records in the pool ledger about the node) validator-info output looks like: {code} Node Port:        None/tcp on None Client Port:      None/tcp on None {code}  Is this okay? Why we use CIDR address? Should I hard code '/32' for the addresses?    ></body> </Action>
<Action id="30319" issue="19974" author="tharmon" type="comment" created="2017-08-29 15:21:33.0" updateauthor="tharmon" updated="2017-08-29 15:21:33.0"> <body><! CDATA  ~alexander.shekhovcov , I actually want to know where the bindings are happening, not where the ledger says they should be happening. In other words, the only things that should be gotten from the ledger are the port numbers. These should then be checked with the operating system to see which interfaces they are bound to.  I'm expecting to see {{0.0.0.0/0}} as the output for this. I don't want that output, but my guess is that right now the validators are not binding to specific interfaces, but are instead binding to all interfaces. That wouldn't be a good thing, and I want a tool that will surface that if it's happening.  That's the reason for the CIDR address, and no, it shouldn't be hard-coded to {{/32}}.  ></body> </Action>
<Action id="30320" issue="19974" author="tharmon" type="comment" body=" ~VladimirWork  See my comment above regarding {{0.0.0.0}}. That is the IP they are binding to, which is a problem (in my opinion)." created="2017-08-29 15:22:28.0" updateauthor="tharmon" updated="2017-08-29 15:22:28.0"/>
<Action id="30323" issue="19974" author="alexander.shekhovcov" type="comment" created="2017-08-29 15:57:11.0" updateauthor="alexander.shekhovcov" updated="2017-08-29 15:59:36.0"> <body><! CDATA  ~tharmon  Is {{/32}} in the example a network mask of the interface to which node (or client) is bound to?  So if I have a node bound to the interface: {code} enp0s3    Link encap:Ethernet  HWaddr 08:00:27:ef:97:7c   inet addr:10.0.2.15  Bcast:10.0.2.255  Mask:255.255.255.0 inet6 addr: fe80::3ab2:52a7:c4bb:ab79/64 Scope:Link UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1 RX packets:44872 errors:0 dropped:0 overruns:0 frame:0 TX packets:31590 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000  RX bytes:60528613 (60.5 MB)  TX bytes:2098874 (2.0 MB)  {code}  the output for validator-info should be: {code} ... Node Port:        9701/tcp on 10.0.2.15/24 ... {code}  Am I correct?   ></body> </Action>
<Action id="30325" issue="19974" author="andkononykhin" type="comment" created="2017-08-29 16:37:13.0" updateauthor="andkononykhin" updated="2017-08-29 16:43:41.0"> <body><! CDATA  ~tharmon  {quote} ~alexander.shekhovcov , I actually want to know where the bindings are happening, not where the ledger says they should be happening. In other words, the only things that should be gotten from the ledger are the port numbers. These should then be checked with the operating system to see which interfaces they are bound to. {quote} For now its harcoded in plenum/stp_zmq/zstack.py as  {code:java} self.listener.bind('tcp://*:{}'.format(self.ha 1 )){code}    so we bind to all ifaces and only port number is configurable. ( http://api.zeromq.org/2-1:zmq-tcp#toc3)   Could you explain a bit more: * What is the reason to see subnet mask? * What is the sense of 0.0.0.0/mask form in the scope of node as listening server? * Shouldn't we enumerate all ifaces with accordant masks instead?  Thank you  ></body> </Action>
<Action id="30383" issue="19974" author="tharmon" type="comment" created="2017-08-30 17:06:51.0" updateauthor="tharmon" updated="2017-08-30 17:06:51.0"> <body><! CDATA I think there are some basic differences in how we are seeing this. So, let me explain where I'm coming from:  * While we don't have the ability to only bind to a specific interface at this point, this is something we should allow in the future. Up until this point, I assumed that is what was happening, but didn't know for sure. * There are a number of security reasons why I would want certain ports not binding to all interfaces. * If I see a binding of {{0.0.0.0/0}}, that indicates to me that the service has bound to all interfaces, a fact of which I need to be aware of as an administrator. * The subnet mask becomes more interesting when the ability exists to bind to a specific interface. CIDR conveys more information to me in a compact form about the interface that is allowing in traffic.  {quote} * Shouldn't we enumerate all ifaces with accordant masks instead? {quote}  That would be a possible alternative, though {{0.0.0.0/0}} implies that to me, as that is how the OS reports that type of binding to all interfaces.  Regarding the proposed example above:  {quote} the output for validator-info should be: {code} ... Node Port:        9701/tcp on 10.0.2.15/24 ... {code} Am I correct? {quote}  Yes, that is what I would expect.  ></body> </Action>
<Action id="30406" issue="19974" author="vladimirwork" type="comment" created="2017-08-31 08:29:57.0" updateauthor="vladimirwork" updated="2017-08-31 09:23:01.0"> <body><! CDATA Build Info: indy-node 1.1.126  Steps to Reproduce - Case 1: 1. Perform "python3 load_test.py -t GET_NYM -c 10 -r 100". 2. Check read transactions per second count.  Actual Results: Read Transactions/Seconds:  0.00  Expected Results: There should be not 0 value.  ></body> </Action>
<Action id="30420" issue="19974" author="andkononykhin" type="comment" created="2017-08-31 15:37:11.0" updateauthor="andkononykhin" updated="2017-08-31 15:37:11.0"> <body><! CDATA  ~tharmon  Thank you for clarification. We have implemented that in the same way with some additional things. * Port is the only parameter which is taken into account by validator-info tool * we use 'ss' tool to determine all bindings expecting more than one (e.g. in case of multiple protocols on the same ip:port) * if * is detected IP is set to 0.0.0.0/0, otherwise we explore ip/mask from matched net interface using 'ip' tool * protocol value is also got from 'ss' tool output  So, I changed a bit a json schema you required in description: node/client bindings is array of triples (ip/mask, port, protocol).  ></body> </Action>
<Action id="30453" issue="19974" author="vladimirwork" type="comment" created="2017-09-01 13:54:19.0" updateauthor="vladimirwork" updated="2017-09-01 13:54:30.0"> <body><! CDATA Build Info: indy-node 1.1.128  Actual Results: "validation-info" works with the following parameters: --basedir /home/sovrin/.sovrin (for non-sovrin users) -v (for verbose mode) --json (for JSON output)  All parameters are actual (including statistics data about ledger reads/writes per second).  ></body> </Action>
<Action id="30456" issue="19974" author="vladimirwork" type="comment" body=" ~tharmon  &quot;validator-info&quot; looks good. You can check that the tool is good enough from your side before it will be merged in RC using &gt;=1.1.128 master version." created="2017-09-01 14:35:37.0" updateauthor="vladimirwork" updated="2017-09-01 14:35:37.0"/>
