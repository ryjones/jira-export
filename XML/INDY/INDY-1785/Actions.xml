<Action id="54367" issue="34909" author="andkononykhin" type="comment" created="2018-12-05 11:26:07.0" updateauthor="andkononykhin" updated="2018-12-05 11:26:07.0"> <body><! CDATA *PoA*: * read AWS docs regarding spot instances utilization rules * explore AWS SDK for python to choose most convenient API to manage spots * write tests to check: ** instances launched as spots ** max prices set properly ** during termination related spot requests cancelled as well * add options to stateful_set module: ** to switch between on-demand and spot instances ** to set max price * update playbook to pass spot options from their level  ></body> </Action>
<Action id="54445" issue="34909" author="andkononykhin" type="comment" created="2018-12-06 14:01:52.0" updateauthor="andkononykhin" updated="2018-12-06 14:02:59.0"> <body><! CDATA *Problem reason*:  AWS provides ability to use spot instances that cost much less than on-demand. The feature wasn't supported by pool automation scripts.  *Changes:* * improved logic of ec2 instances provisioning with ability to switch to use spot instances and to specify max price * added related options for provisioning role * spot instances are default  *Committed into*:   https://github.com/hyperledger/indy-node/pull/1074   *Risk factors*:  Nothing is expected.  *Risk*:  Low    *Covered with tests*: * tests for stateful_set ansible module  *Recommendations for QA*:  Note: * you might encounter errors like  *MaxSpotInstanceCountExceeded* for some regions. Seems it usually appear for new accounts or accounts that just start using spots. To unblock yourself you may try to limit set of regions to _us-east-1, us-east-2, eu-west-1_ which should have higher limit values.  Test cases *  spots ** create inventory directory using namespace-config.py script (keep defaults for instance type = t2.micro for testing purposes) ** run provisioning playbook ** using AWS console check that instances' parameter "Lifecycle" is "spot" ** you can check that there is a respective spot request: max price should match current priceces for on-demand instances ( https://aws.amazon.com/ec2/pricing/on-demand/ ) ** destroy instances * spots with specified max price ** create inventory with additional option *--localhosts.aws_ec2_spot_max_price=0.01* (it should be acceptable for all regions even for most expensive like Tokyo) ** do all the steps as before ** check spot requests for created instances: max price should be lower than before ** destroy instances * on-demand: ** create inventory with switched on spots: *--localhosts.aws_ec2_market_spot false* ** provision and check that all instances have _normal_ value for Lifecycle parameter (means on-demand) ** destroy instances  ></body> </Action>
<Action id="54465" issue="34909" author="ozheregelya" type="comment" created="2018-12-06 22:55:52.0" updateauthor="ozheregelya" updated="2018-12-06 22:55:52.0"> <body><! CDATA *Steps to Validate:* 1. Create default inventory. =>  spot instances created by default. 2. Create inventory with *--localhosts.aws_ec2_spot_max_price*. => spot instances created. 3. Create inventory with *--localhosts.aws_ec2_market_spot false*. => on-demand instances created.  *Actual Results:* Creation of spot instances supported, enabled by default, and works as expected.  ></body> </Action>
