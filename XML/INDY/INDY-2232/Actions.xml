<Action id="64129" issue="42495" author="vladimirwork" type="comment" body="Debug logs: ev@evernymr33:logs/pool_ledger_catchup.tar.gz" created="2019-09-25 16:22:43.0" updateauthor="vladimirwork" updated="2019-09-25 16:22:43.0"/>
<Action id="64130" issue="42495" author="vladimirwork" type="comment" body="System test: https://github.com/VladimirWork/indy-test-automation/blob/2db2a986bc72e7d4ffd5c36ed5c362ebaabe08c7/system/indy-node-tests/TestCatchUpSuiteExtended.py#L34" created="2019-09-25 16:25:54.0" updateauthor="vladimirwork" updated="2019-09-25 16:25:54.0"/>
<Action id="64154" issue="42495" author="vladimirwork" type="comment" body="Test passes with 1 and 100 txns written but fails with 25 and 50." created="2019-09-26 11:52:10.0" updateauthor="vladimirwork" updated="2019-09-26 11:52:10.0"/>
<Action id="64155" issue="42495" author="ashcherbakov" type="comment" created="2019-09-26 12:41:11.0" updateauthor="ashcherbakov" updated="2019-09-26 15:36:00.0"> <body><! CDATA A quick analysis showed the following: * We start Node8 and start sending 50 more requests *at the same time* * This means that most probably Node8 will not catchup all these new 50 txns, but only part of them (the ones already ordered at the time of catchup start and gathering ledger statuses and consistency proofs) * As we have a case with ordering during catchup, Node8 stashes all 3PC messages received during catchup. * It also receives Propagates for these requests, but *discards them since there is no NYM transaction used to sign the requests in Propagates yet* (we haven't caught up domain ledger yet). * Once Node8 finished catcup (in caught up about 20 of 50 txns in this test run; and ended up with last ordered = (0, 82)), it starts unstashing and applying 3PC messages * Most of the requests are not finalized, so it requests Propagates from other nodes * It was able to order till (0, 99) requesting missing Propagates. * But other nodes stabilized a checkpoint then and removed all requests below 100. * So, Node 8 wasn't able to process next PrePrepares since it didn't have propagated requests, and there is no way to get it from other nodes because they already removed them.  Â   If we sent more requests, the node would be able to catchup and continue ordering.  ></body> </Action>
<Action id="64166" issue="42495" author="ashcherbakov" type="comment" created="2019-09-26 16:00:32.0" updateauthor="ashcherbakov" updated="2019-09-26 16:00:32.0"> <body><! CDATA Next steps and recommendation: * Exetnd/modify tests: ** Test1: send less than 100 (CHK_FREQ) transactions in total. This will test that we can catchup during ordering and can apply messages stashed during catchup. The test should pass. ** Test2: wait until Node8 caught up before sending more requests. This will test that cathup of Pool ledger works, and we can continue ordering. The test should pass ** Test3: send about 200 more transactions after the new node joins. This will test that although the Node can not start ordering immediately because of the issue described above, the node will catchup and continue ordering after a quorum of checkpoints from other nodes. * Fix the issue described above: it looks like a correct fix is to do INDY-1960  ></body> </Action>
<Action id="64167" issue="42495" author="vladimirwork" type="comment" created="2019-09-26 16:04:28.0" updateauthor="vladimirwork" updated="2019-09-26 16:04:28.0"> <body><! CDATA The same issue with config ledger has bee catched: we don't wait for catchup before ordering, write more than 100 config txns during test (2x55) and don't send any additional txns before final catchup checking.  ev@evernymr33:logs/config_catchup_failure.tar.gz  ></body> </Action>
<Action id="64169" issue="42495" author="ashcherbakov" type="comment" created="2019-09-26 16:48:20.0" updateauthor="ashcherbakov" updated="2019-09-26 16:51:17.0"> <body><! CDATA The reason why the test with config failed is because Node8 didn't have connection to Node1 after restart. Since Node1 is a Primary, Node 8 didn't receive any PrePrepares at all, that's why it wasn't able to order anything after catchup.   So, it looks like this is the same issue as in INDY-2222  ></body> </Action>
