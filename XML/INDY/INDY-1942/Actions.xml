<Action id="59439" issue="36800" author="ashcherbakov" type="comment" created="2019-04-24 07:02:08.0" updateauthor="ashcherbakov" updated="2019-04-24 07:17:51.0"> <body><! CDATA  ~esplinr  Questions about requirements: # Should the GET_TRANSACTION_AUTHOR_AGREEMENT request support getting of old versions of the agreement, or only the current (latest) one? # If GET_TRANSACTION_AUTHOR_AGREEMENT needs to support getting of old versions, then do we have any requirements about what should be used as an ID for old agreements? Should we have an explicit `version` field for every agreement, and make sure (during validation of the agreement on the ledger) that the next version is greater than the previous one, so that the version is a unique identifier? Can we use the version in GET_TRANSACTION_AUTHOR_AGREEMENT request then? If the version is empty, then the latest agreement will be returned. # What can be the maximum size of the Agreement? The thing is that we have a limitation for the maximum size of a transaction/request to the Ledger, and this is 128 KB. # As I understand, we should have a GET_TRANSACTION_AUTHOR_AGREEMENT_MECHANISM request (in addition to mechaism write transaction). Should the request support getting of old versions of the mechanisms list, or only the current (latest) one? # If GET_TRANSACTION_AUTHOR_AGREEMENT_MECHANISM  needs to support getting of old versions, then do we have any requirements about what should be used as an ID for old lists?  ></body> </Action>
<Action id="59443" issue="36800" author="esplinr" type="comment" created="2019-04-24 09:43:09.0" updateauthor="esplinr" updated="2019-04-24 09:43:09.0"> <body><! CDATA 1 and 2: It should be possible to look up a TAA by the hash used to sign a transaction. The text is versioned, so it would be helpful to store an explicit version and do a lookup by version, if it is easy to do so. It is not necessary to store the version of the text in the transactions that are written to the ledger—the hash is sufficient.  3: The current size of the agreement proposed by the Sovrin Foundation is ~15K. I believe a 128KB limit is reasonable.  4 and 5: When examining a transaction, it will occasionally be necessary to look up the transaction author agreement mechanism that was in force at the time the transaction was written in order to get the description associated with the label, and the URL that points to additional information. Given that the list is expected to always be short, it is reasonable to return the entire list. This implies that there needs to be an explicit version number associated with the list of agreement mechanisms.  Q6: Are the versions of the TAA and the Agreement Mechanism List assigned by the ledger, or explicitly set by the user? A6: It is must useful if they are set by the user. Any unique string should be allowed, so the user can name the "version" in a way that is natural for their use case of the ledger.  Q7: Is it possible to update just part of the list of agreement mechanisms? For example, edit a description of a single entry, or only update the URL. A7: No. The entire list must be updated in order to make any changes. The list is short enough that this is practical.  ></body> </Action>
<Action id="59475" issue="36800" author="ashcherbakov" type="comment" created="2019-04-24 16:25:57.0" updateauthor="ashcherbakov" updated="2019-04-24 16:25:57.0"> <body><! CDATA  ~esplinr   ~sergey.minaev   More questions that may affect the decision whether we would like to combine TRANSACTION_AUTHOR_AGREEMENT and TRANSACTION_AGREEMENT_MECHANISM txns into one: * Q8: Should the user be aware of the description/URL of the selected acceptance mechanism? Should the description/URL be signed by the user? * Q9: Should the user be aware of all acceptance mechanisms when signing TAA? Should all the acceptance mechanisms be signed by the user?   TA signing for XFER txns: * Q10: There is no DID-based signature for XFER txn. We have input-address-based signature only. Should we sign TA fields by input-address-based signature?  ></body> </Action>
<Action id="59480" issue="36800" author="esplinr" type="comment" created="2019-04-24 21:56:41.0" updateauthor="esplinr" updated="2019-04-24 21:56:41.0"> <body><! CDATA A8: The description / URL of the acceptance mechanisms does not need to be signed by the user as part of the transaction, but the API should make it easy for an application developer to display it to the user.  A9: The acceptance mechanism is selected by the application developer, who chooses the mechanism that best matches the UX being used by the application to obtain user agreement before submission of the transaction to the ledger.  A10: Acceptance of the Transaction Author Agreement is indicated by including the hash of the agreement in the signed transaction that is submitted to the ledger. The format by which the transaction is currently signed is sufficient to demonstrate that agreement.  Q11: How likely is it that the list of acceptance mechanisms would change separate from the agreement? (If they always change together, they could conceivably be tracked on the ledger as the same transaction.) A11: It is rare that the list of acceptance mechanisms would change separate from the agreement. But if such a change  was required, bundling the list along with the Transaction Author Agreement would change the hash of the agreement and force all users in the network to re-accept the agreement the next time they try to write to the ledger. That would be an important UX cost.  Additional thoughts on A4-5: Assuming that the list of acceptance mechanisms is separate from the transaction author agreement, then we will need an API to map a transaction on the domain ledger to the associated list of the acceptance mechanisms. Possible ways to do the mapping include: * Always traversing through the audit ledger (because it should be rare) * Including the sequence number of the list in the transaction format on the domain ledger * Including an explicit version string in the list on the config ledger, and then including that version string in the transaction on the domain ledger.  ></body> </Action>
<Action id="59482" issue="36800" author="sergey.minaev" type="comment" created="2019-04-25 08:31:44.0" updateauthor="sergey.minaev" updated="2019-04-25 09:00:30.0"> <body><! CDATA Q12: Is it correct assumption about TAA: TAA text doesn't contain ANY assumptions, limitations etc about acceptance mechanisms list (AML). And it's fully independent of the AML? Q13: Is correct (in general) to include all details of acceptance mechanisms into TAA text? Q14: Does "Additional thoughts on A4-5" above means that user may not know actual mechanism and including label of mechanism under signature has not law impact  ></body> </Action>
<Action id="59483" issue="36800" author="sergey.minaev" type="comment" body="Q15: If TAA and AML are separate entities, must the latest version of AML be used by user?" created="2019-04-25 08:41:00.0" updateauthor="sergey.minaev" updated="2019-04-25 08:41:00.0"/>
<Action id="59499" issue="36800" author="esplinr" type="comment" created="2019-04-25 14:40:42.0" updateauthor="esplinr" updated="2019-04-25 14:40:42.0"> <body><! CDATA A12: Correct. The legal text of the author agreement is not dependent on the list of acceptance mechanisms.  A13: Including the details of the acceptance mechanisms in the TAA text doesn't hurt the legal agreement, but it could force users to re-accept the agreement if it is necessary to change the list of acceptance mechanisms (even in trivial ways such as updating the URL or fixing a typo).  A14: The mechanism the user follows to review and accept the agreement is integral to the software the user selects for interacting with the ledger. The developer of that software will design the UX to follow one of the acceptable approaches for getting the user's agreement. The developer will then hard-code into the software the label describing that approach (hopefully as a configuration parameter to make it easy to change should the network administrator ever choose to change the label). The software includes that label into the transaction on behalf of the user simply so that in the future there is an indication of how the user reviewed the agreement without exposing the user to the correlation risk that would come with recording the specific software package that was used.  A15: When submitting a transaction to the ledger, it is only necessary to have an acceptance mechanism label that is still one of the valid mechanisms in the list on the ledger. The description and associated URL are guides for the developer, and can be used in the future to describe what interaction the user probably had when accepting the agreement, but is not binding in the same way as the text of the agreement.  More additional thoughts on A4-5: Though we have to ensure that a transaction submitted to the ledger is using an acceptance mechanism label that is currently part of the approved list, it is not very important to get an old list of acceptance mechanisms. The list of acceptance mechanisms can change without the software being updated, so long as the label is still valid. It is a requirement for the network administrator to change the labels if the implied user interaction is different enough to invalidate software that is currently in use in the ecosystem. For this reason, looking up an old list of acceptance mechanisms does not need to be a fast operation and could require traversing ledger history based on the datetime of the transactions or by referencing the audit ledger. An explicit version number for the list of acceptance mechanisms might be helpful, but is not required.  Based on our conversations, we see three approaches: 1. Include  the acceptance mechanism list as part of the transaction author agreement text. Pro: Strong legal assurance that the user understood the acceptance mechanism, and that the label matches a specific description at a point in time. Con: Could require users to re-accept the agreement more often than necessary. Note: Our legal council said that the acceptance mechanism is a guide, and it is not necessary to have a strong mapping between the label and the description.  2. Include the acceptance mechanism list as separate fields in the same ledger transaction as the author agreement. Pro: Easier development, while allowing the mechanisms to be changed without changing the hash of the agreement. Con: The author agreement and the acceptance mechanism list are separate concerns, so combining them seems unnatural.  3. Have a separate ledger transaction for the author agreement and the acceptance mechanism list. Pro: This is the most flexible and natural approach. Con: It is the most work.  We will pursue the third approach unless it seems to be too expensive.  ></body> </Action>
<Action id="59538" issue="36800" author="ashcherbakov" type="comment" body="Design: https://github.com/hyperledger/indy-node/blob/master/design/txn_author_agreement.md" created="2019-04-26 17:34:26.0" updateauthor="ashcherbakov" updated="2019-04-26 17:34:26.0"/>
<Action id="59609" issue="36800" author="sergey.khoroshavin" type="comment" created="2019-04-30 14:58:53.0" updateauthor="sergey.khoroshavin" updated="2019-04-30 14:59:07.0"> <body><! CDATA  ~esplinr  Q16: Should there be a way to disable Transaction Author Agreement mechanism after it is enabled by sending first TAA transaction?  ></body> </Action>
