<Action id="66536" issue="43860" author="sergey.khoroshavin" type="comment" created="2020-01-08 13:52:51.0" updateauthor="sergey.khoroshavin" updated="2020-01-09 10:53:02.0"> <body><! CDATA *PoA* * Promotion/demotion related logic should be available in simulation tests - Alex ** There should be single source of truth for nodeRegs (both current and at the start of view) and Quorums (N, F) *** Most probably it should be in ConsensusSharedData *** It should be updated by appropriate req or batch handlers or services, available in simulation tests *** Legacy code containing copies of this data should be refactored to make it a read-only properties accessing single source of truth (if it is in ConsensusSharedData then one from master instance should be used) ** Code starting a view change should be placed in service available in simulation tests * View Changer improvements - Sergey Kh. * SimNetwork should be able to provide message delaying functionality similar to one available in integration tests - Sergey Kh. ** When "sending" message process it using list of processors ** Processors can added or removed from this list "on the fly" ** Last added processors are used first ** Each processor consists of selector and action ** Selector is a function indicating whether an action should applied for this message (very much like current delayers) ** Action can be one of *** Discard(probability) - discard message with some probability (if not discarded handle it by next processor) *** Deliver(min_delay,max_delay) - schedule message for delivery *** Stash - stash message into some storage, reapply all processors if stashing processor is removed from list * Following generic test case should be implemented - Andrew N. ** Create pool with random number of nodes and random initial view_no (and hence random primary) ** Schedule some random transactions over period of time ** Schedule some promotion/demotion transaction during this period ** Schedule some view changes during this period ** Make sure all transactions are ordered and nodes are in the same state eventually ** Make sure that this test fails before fixes are merged ** *NOTE* We're not going to actually start and stop nodes in this test, and amount of promotion/demotion transaction should be limited so that pool won't become nonfunctional without new nodes. Real starting/stopping nodes should be done in scope of INDY-2148  ></body> </Action>
<Action id="66739" issue="43860" author="ashcherbakov" type="comment" body="The first item will be done in the scope of INDY-2329" created="2020-01-17 13:34:25.0" updateauthor="ashcherbakov" updated="2020-01-17 13:34:25.0"/>
<Action id="66748" issue="43860" author="ashcherbakov" type="comment" created="2020-01-17 14:18:02.0" updateauthor="ashcherbakov" updated="2020-01-17 14:34:09.0"> <body><! CDATA Item1 - TBD in INDY-2329 Item 2 - https://github.com/hyperledger/indy-plenum/pull/1454, https://github.com/hyperledger/indy-plenum/pull/1457 Item 3 - https://github.com/hyperledger/indy-plenum/pull/1459 Item 4 - https://github.com/hyperledger/indy-plenum/pull/1453, https://github.com/hyperledger/indy-plenum/pull/1455  Item 1 and merging of PRs will be done in the scope of INDY-2329  ></body> </Action>
