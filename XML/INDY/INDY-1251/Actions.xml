<Action id="42297" issue="28970" author="ashcherbakov" type="comment" created="2018-03-29 09:17:00.0" updateauthor="ashcherbakov" updated="2018-03-29 09:17:00.0"> <body><! CDATA Please contact  ~andrey.goncharov  for more info regarding Spikes functionality.  Please contact  ~mgbailey  and  ~tharmon  on applying this to the Live Pools.  ></body> </Action>
<Action id="42392" issue="28970" author="mgbailey" type="comment" body="We had this enabled on the STN through early January, and we were getting ~100 emails per day from the network.  This amounts to spam, and so we all just made filters for the emails and redirected them to a folder.  In other words, the tool as implemented was useless.  Has it been improved since then?" created="2018-03-30 15:05:14.0" updateauthor="mgbailey" updated="2018-03-30 15:05:14.0"/>
<Action id="43205" issue="28970" author="sergey-shilov" type="comment" created="2018-04-20 12:28:54.0" updateauthor="sergey-shilov" updated="2018-04-20 12:28:54.0"> <body><! CDATA *Problem state / reason:*  See ticket description and Mike's comment.  *Changes:*  Changed math of node request and cluster throughtput spikes detection. The main changes: * Now smoothing constant (alpha) is really constant as declares exponential moving average (EMA), alpha = 2 / (N + 1), where N is a minimal count of passed periods needed for comparison of expected value and real value, a.g. learning period. For now N = 15, so alpha = 0.125. * Rised min activity from 2 to 10, a.g. we start to compare expected and real values if we handle more than 10 request per time period, that now is set to 60 secs (10 requests per minute). * Rised borders coefficient to extend the lower and higher borders when observed value is treated as normal relative to expected value, previous border coefficient = 3:  - lower border:  expected_val / 3 - higher border: expected_val * 3 new borders coefficient = 10: - lower border:  expected_val / 10 - higher border: expected_val * 10 Also implemented weighted borders coefficient. It means adaptation of borders coefficient to larger values using formula:      weighted_borders_coef = borders_coef / log(expected_val) Such approach allows to lower borders for larger values. This functionality is optional and enabled by default.  *Committed into:*      https://github.com/hyperledger/indy-plenum/pull/640     https://github.com/hyperledger/indy-node/pull/657     indy-node 1.3.382-master  *Risk factors:*      Nothing is expected.  *Risk:*      Low  *Recommendations for QA:*  Check indynotifierplugin installation and configuration guide. Check spike detection behaviour under various load, emulate spikes and check that notification emails received, check silence timeout.  ></body> </Action>
<Action id="43469" issue="28970" author="esplinr" type="comment" body=" ~tharmon  and  ~mgbailey : Is it adequate to notify the Stewards via email? Are there security concerns with an SMTP plugin used for sending?" created="2018-04-26 13:19:53.0" updateauthor="esplinr" updated="2018-04-26 13:19:53.0"/>
<Action id="43483" issue="28970" author="mgbailey" type="comment" body=" ~esplinr  It may be worthwhile to ask stewards what notification services they would like to use.  Most would be able to use SMTP, but probably have better tools available. For example, our node runs in AWS, so we were able to integrate with AWS SNS, which allows a range of notification paths, including SMTP and SMS.  ~EvelynEvergreene , please send a group email to the steward technical contacts to survey them on notification services they use." created="2018-04-26 14:15:10.0" updateauthor="mgbailey" updated="2018-04-26 14:15:10.0"/>
<Action id="43490" issue="28970" author="tharmon" type="comment" created="2018-04-26 14:24:59.0" updateauthor="tharmon" updated="2018-04-26 14:24:59.0"> <body><! CDATA Depending on how the SMTP is implemented there are certainly security concerns. I see that as a route of last resort.  Also, regarding the math mentioned by  ~sergey-shilov , I also want thresholds added. What I mean by this is that relative changes in a small number are much more likely to happen than with the same percentage of a larger number. In other words, in order to get a spike notification, I want the traffic to have changed by not only X%, but also at least Y amount in actual transactions per second. That principle should apply to all of the alerts.  ></body> </Action>
<Action id="43498" issue="28970" author="sergey-shilov" type="comment" created="2018-04-26 15:24:47.0" updateauthor="sergey-shilov" updated="2018-04-26 15:24:47.0"> <body><! CDATA  ~tharmon   Please notice that we implemented weighted borders to deal with growing numbers, this logic is enable by default: * lower border:  expected_val / (borders_coef / log(expected_val)) * higher border: expected_val * (borders_coef / log(expected_val))  instead of * lower border:  expected_val / borders_coef * higher border: expected_val * borders_coef  So that the higher border for expected 10000 will be 25000 instead of 100000 (if borders_coef = 10, default for now).  But it's ok to add some threshold in requests count per time period (for example, 2000), and in this case the higher border for expected 10000 will be 12000 instead of calculated 25000. Did I understand your idea properly?  ></body> </Action>
<Action id="43526" issue="28970" author="esplinr" type="comment" created="2018-04-26 23:56:43.0" updateauthor="esplinr" updated="2018-04-26 23:56:43.0"> <body><! CDATA Tasks like this are prone to eternally evolving without meeting the actual need. We should release what we have and get some feedback after real world usage.  * We don't yet understand real world traffic patterns, so further changes to the spike detection are guesswork. * We don't yet understand the most useful methods for node administrators to be notified of irregular traffic. * Node administrators who are concerned about outbound SMTP can use an SMTP proxy to shuttle the notifications to other services.  If this proves inadequate, then we should create a new issue and link it to this one. In that issue we can capture clear requirements that we can field test for suitability.  ></body> </Action>
<Action id="43544" issue="28970" author="esplinr" type="comment" created="2018-04-27 13:01:16.0" updateauthor="esplinr" updated="2018-04-27 13:01:16.0"> <body><! CDATA More context: * This functionality has been in the product for a few releases * It is disabled by default * The email subsystem is pluggable * This work is to refine the rules used to alert on a spike in requests  We will verify that the work in this ticket did not make the default configuration any worse, and then we will close it. We will raise new tickets if we decide further changes should be made to this functionality.  ></body> </Action>
<Action id="43586" issue="28970" author="sergey-shilov" type="comment" created="2018-04-27 20:56:26.0" updateauthor="sergey-shilov" updated="2018-04-27 20:56:26.0"> <body><! CDATA  ~esplinr  Yeah, sure!  For now all our coefficients and absulte thresholds are pulled out of the air (special thanks to  ~steptan  for providing this idiom in English). So I think that our (developers') main goal is to implement correct and flexible core math and provide enough configurable parameters to tune it in future according to real world traffic without upgrading of the code base. And I think that we've done it. Applyed approach of traffic forecasting based on exponential moving average seems adequate for detection of abnormal traffic.   ~tharmon  Regarding my previous comment, just for clarification (of course if I understood your idea properly): proposed static threshold (in example was 2000) is not a replacement of calculated higher border, but maximal difference between expected and actual traffic, a.g.:  _higher_border = min(expected_val * (borders_coef / log(expected_val)), expected_val + treshold)_  _if actual_val > higher_border:_         _..........._  ></body> </Action>
<Action id="44079" issue="28970" author="zhigunenko.dsr" type="comment" created="2018-05-08 15:48:40.0" updateauthor="zhigunenko.dsr" updated="2018-05-08 15:48:40.0"> <body><! CDATA *Reason to rejection:* Following  manual|https://github.com/hyperledger/indy-node/blob/master/docs/node-monitoring-tools-for-stewards.md  these cases hadn't raised notifications: - upgrade with non-existent version - upgrade(reinstall) with the same version - upgrade with the right version and following cancel  *Environment:* indy-anoncreds 1.0.32 indy-cli 1.3.1~507 indy-node 1.3.404 indy-plenum 1.2.347 libindy 1.3.1~507 libindy-crypto 0.4.0 python3-indy-crypto 0.4.0 Notice that indynotifieremail artifact has version 0.0.9 and was created Jan 29, 2018  *Steps to reproduce:* 1) set up vagrant pool 2) install sendmail 3) check test email to guarantee sendmail availability 4) setup indy.env like this {code} NODE_NAME=Node1 NODE_PORT=9701 NODE_CLIENT_PORT=9702 CLIENT_CONNECTIONS_LIMIT=15360 INDY_NOTIFIER_EMAIL_RECIPIENTS="login1@domain1.com NodeRequestSuspiciousSpike ClusterThroughputSuspiciousSpike ClusterLatencyTooHigh NodeUpgradeScheduled NodeUpgradeComplete NodeUpgradeFail PoolUpgradeCancel, login2@domain2.com NodeRequestSuspiciousSpike ClusterThroughputSuspiciousSpike ClusterLatencyTooHigh NodeUpgradeScheduled NodeUpgradeComplete NodeUpgradeFail PoolUpgradeCancel" {code} on validator01 5) restart indy-node for applying new settings 6) send these type commands: - try _ledger pool-upgrade force=true_ with non-existent version like 3.3.0 - try _ledger pool-upgrade reinstall=true_ with the same version as used - try _ledger pool-upgrade action=star_t and next _ledger pool-upgrade action=cancel_  *Actual results:* - sendmail log contain record only about test mail from step 2, no errors/records after it, service is alive - no email notification neither work email nor guerrillamail.com - all transactions accepted by legder - all attempts to upgrade took place on nodes  *Excpected results:* - E-mail notifications for all scheduled/successful/failed/cancelled upgrades - Appropriate records in sendmail log  ></body> </Action>
<Action id="44234" issue="28970" author="ashcherbakov" type="comment" created="2018-05-11 11:04:20.0" updateauthor="ashcherbakov" updated="2018-05-11 11:04:20.0"> <body><! CDATA  ~zhigunenko.dsr  Why do we care about updates here? This is not scope of the ticket. The ticket is about Spikes in the traffic according to the rules specified in the ticket. Does it work?  ></body> </Action>
<Action id="44266" issue="28970" author="zhigunenko.dsr" type="comment" created="2018-05-11 15:51:39.0" updateauthor="zhigunenko.dsr" updated="2018-05-11 15:51:39.0"> <body><! CDATA  ~ashcherbakov  Problem is actual both for upgrade and spikes. Consecutive load testing 100txns * 1client then 10 then 20 to 40 clients don't provoke  any sendmail activity  ></body> </Action>
<Action id="44317" issue="28970" author="sergey-shilov" type="comment" created="2018-05-14 10:56:40.0" updateauthor="sergey-shilov" updated="2018-05-14 10:56:40.0"> <body><! CDATA  ~zhigunenko.dsr   This ticket is not about pool upgrade, it's about spikes detection.  Did you check logs? Was spike detected by spike detection module? What expected/actual load was logged?  ></body> </Action>
<Action id="44341" issue="28970" author="sergey-shilov" type="comment" created="2018-05-14 15:01:53.0" updateauthor="sergey-shilov" updated="2018-05-14 15:01:53.0"> <body><! CDATA  ~zhigunenko.dsr   ~ashcherbakov   By the way, sending of email is just a notification stage of spike detection. The core functionality is a detection math and thresholds. So the first thing that should be checked is that load thresholds are exceeded, that's why logs are important here.  ></body> </Action>
<Action id="44343" issue="28970" author="sergey-shilov" type="comment" created="2018-05-14 15:36:43.0" updateauthor="sergey-shilov" updated="2018-05-14 15:36:43.0"> <body><! CDATA  ~zhigunenko.dsr   One missed thing from me: to enable spike detection the following parameter should be specified in the indy-node config file:  {color:#333333}SpikeEventsEnabled=True{color}  {color:#333333} ~ashcherbakov  It is disabled by default for now, should we enable it by default? {color}  ></body> </Action>
<Action id="44344" issue="28970" author="ashcherbakov" type="comment" body="I think the decisions whether it should be enabled by default should come from the Customer Success Team ( ~esplinr   ~mgbailey   ~tharmon )?" created="2018-05-14 15:38:50.0" updateauthor="ashcherbakov" updated="2018-05-14 15:38:50.0"/>
<Action id="44550" issue="28970" author="zhigunenko.dsr" type="comment" created="2018-05-17 12:36:54.0" updateauthor="zhigunenko.dsr" updated="2018-05-17 12:36:54.0"> <body><! CDATA *Actual results:* * NodeRequestSuspiciousSpike - notification has been received * ClusterThroughputSuspiciousSpike - notification has been received * ClusterLatencyTooHigh - situation hadn't being reached * NodeUpgradeScheduled - notification has been received * NodeUpgradeComplete - notification has been received * NodeUpgradeFail - notification has been received * PoolUpgradeCancel - notification has been received  *Additional information:*  Manual|https://github.com/hyperledger/indy-node/blob/master/docs/node-monitoring-tools-for-stewards.md  requires some additional updates (INDY-1342)  ></body> </Action>
