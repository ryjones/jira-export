<Issue id="24855" key="INDY-1021" number="1021" project="10303" reporter="dsurnin" creator="dsurnin" type="10004" summary="Intermittently failing test: test_primary_recvs_3phase_message_outside_watermarks" description="Total 1 runs 153 passed, 1 failed, 0 errors, 14 skipped_____________ test_primary_recvs_3phase_message_outside_watermarks _____________ perf_chk_patched = &lt;module &apos;plenum_config.py&apos; from &apos;/tmp/pytest-of-indy/pytest-1/0/etc/indy/plenum_config.py&apos;&gt; chkFreqPatched = &lt;module &apos;plenum_config.py&apos; from &apos;/tmp/pytest-of-indy/pytest-1/0/etc/indy/plenum_config.py&apos;&gt; looper = &lt;stp_core.loop.looper.Looper object at 0x7f829c67a588&gt; txnPoolNodeSet =  Alpha, Beta, Gamma, Delta , sdk_pool_handle = 137 sdk_wallet_client = (138, &apos;6ouriXMZkLeHsuXrN1X1fd&apos;), reqs_for_logsize = 40 def test_primary_recvs_3phase_message_outside_watermarks(perf_chk_patched, chkFreqPatched, looper, txnPoolNodeSet, sdk_pool_handle, sdk_wallet_client, reqs_for_logsize): &quot;&quot;&quot; One of the primary starts getting lot of requests, more than his log size and queues up requests since they will go beyond its watermarks. This happens since other nodes are slow in processing its PRE-PREPARE. Eventually this primary will send PRE-PREPARE for all requests and those requests will complete &quot;&quot;&quot; tconf = perf_chk_patched delay = 5 instId = 0 reqs_to_send = 2 * reqs_for_logsize + 1 logger.debug(&apos;Will send \{} requests&apos;.format(reqs_to_send)) npr = getNonPrimaryReplicas(txnPoolNodeSet, instId) pr = getPrimaryReplica(txnPoolNodeSet, instId) from plenum.server.replica import TPCStat orderedCount = pr.stats.get(TPCStat.OrderSent) for r in npr: r.node.nodeIbStasher.delay(ppDelay(delay, instId)) r.node.nodeIbStasher.delay(pDelay(delay, instId)) tm_exec_1_batch = waits.expectedTransactionExecutionTime(len(txnPoolNodeSet)) batch_count = math.ceil(reqs_to_send / tconf.Max3PCBatchSize) total_timeout = (tm_exec_1_batch + delay) * batch_count def chk(): assert orderedCount + batch_count == pr.stats.get(TPCStat.OrderSent) sdk_send_random_and_check(looper, txnPoolNodeSet, sdk_pool_handle, sdk_wallet_client, reqs_to_send) &gt; looper.run(eventually(chk, retryWait=1, timeout=total_timeout)) plenum/test/checkpoints/test_message_outside_watermark1.py:53: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ stp_core/loop/looper.py:259: in run return self.loop.run_until_complete(what) /usr/lib/python3.5/asyncio/base_events.py:387: in run_until_complete return future.result() /usr/lib/python3.5/asyncio/futures.py:274: in result raise self._exception /usr/lib/python3.5/asyncio/tasks.py:239: in _step result = coro.send(None) stp_core/loop/looper.py:250: in wrapper raise ex stp_core/loop/looper.py:237: in wrapper results.append(await coro) stp_core/loop/eventually.py:183: in eventually raise ex stp_core/loop/eventually.py:156: in eventually res = coroFunc(*args) _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ def chk(): &gt; assert orderedCount + batch_count == pr.stats.get(TPCStat.OrderSent) E AssertionError: assert (0 + 9) == 8 E + where 8 = &lt;bound method Stats.get of \{&apos;CommitSent&apos;: 8, &apos;PrePrepareSent&apos;: 8, &apos;PrepareRcvd&apos;: 24, &apos;OrderSent&apos;: 8, &apos;CommitRcvd&apos;: 17, &apos;PrepareSent&apos;: 0, &apos;PrePrepareRcvd&apos;: 0, &apos;ReqDigestRcvd&apos;: 0}&gt;(&lt;TPCStat.OrderSent: 7&gt;) E + where &lt;bound method Stats.get of \{&apos;CommitSent&apos;: 8, &apos;PrePrepareSent&apos;: 8, &apos;PrepareRcvd&apos;: 24, &apos;OrderSent&apos;: 8, &apos;CommitRcvd&apos;: 17, &apos;PrepareSent&apos;: 0, &apos;PrePrepareRcvd&apos;: 0, &apos;ReqDigestRcvd&apos;: 0}&gt; = \{&apos;CommitSent&apos;: 8, &apos;PrePrepareSent&apos;: 8, &apos;PrepareRcvd&apos;: 24, &apos;OrderSent&apos;: 8, &apos;CommitRcvd&apos;: 17, &apos;PrepareSent&apos;: 0, &apos;PrePrepareRcvd&apos;: 0, &apos;ReqDigestRcvd&apos;: 0}.get E + where \{&apos;CommitSent&apos;: 8, &apos;PrePrepareSent&apos;: 8, &apos;PrepareRcvd&apos;: 24, &apos;OrderSent&apos;: 8, &apos;CommitRcvd&apos;: 17, &apos;PrepareSent&apos;: 0, &apos;PrePrepareRcvd&apos;: 0, &apos;ReqDigestRcvd&apos;: 0} = Alpha:0.stats E + and &lt;TPCStat.OrderSent: 7&gt; = &lt;enum &apos;TPCStat&apos;&gt;.OrderSent plenum/test/checkpoints/test_message_outside_watermark1.py:50: AssertionError" priority="3" resolution="10000" status="10001" created="2017-12-07 12:37:58.0" updated="2019-03-29 20:34:24.0" resolutiondate="2019-03-29 20:34:24.0" votes="0" watches="4" workflowId="24857"/>
