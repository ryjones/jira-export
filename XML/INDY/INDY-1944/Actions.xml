<Action id="56793" issue="36810" author="ashcherbakov" type="comment" created="2019-02-08 14:08:57.0" updateauthor="ashcherbakov" updated="2019-02-11 08:52:48.0"> <body><! CDATA PoA:  1) Register the new AUDIT ledger - no state is needed - make sure it's present in the list of ledgers  2) Audit Ledger catchup - catch-up audit ledger first - make sure it's caught up  3) Write to audit ledger for every Ordered 3PC Batch - make sure that audit ledger is updated after every ordered 3pc batch - check it for different combinations of 3PC batches from different ledgers and different 3PC batch sizes - put all required data into the txn and test the format  4) Include audit ledger txn root hashes into PrePrepare - add it as a last (optional) field - make sure it doesn't break compatibility - apply audit ledger txn during validation of PrePrepare and compare the root - raise Suspicious error if they are not equal  5) Update Documentation  6)  Optional  Move all catch-up related logic to Catchup Helper class from the Node monolith  ></body> </Action>
<Action id="56904" issue="36810" author="ashcherbakov" type="comment" created="2019-02-12 08:09:23.0" updateauthor="ashcherbakov" updated="2019-02-28 13:11:46.0"> <body><! CDATA Audit Ledger txn format: {code:java} { "ver": "1", "txn": { "type": "2", # AUDIT "protocolVersion": 2, # CURRENT_PROTOCOL_VERSION  "data": { "ver": "1", "viewNo": <...>, # view no of last 3PC batch "ppSeqNo": <...>, # ppSeqNo of last 3PC batch "ledgerSize": { # a map of ledger_id -> size 0: <...>, # pool ledger size 1: <...>, # domain ledger size 2: <...>, # config ledger size 1001: <...>, # plugin ledger size }, "ledgerRoot": {  # either a root hash as base58, or a delta, that is a difference between the current audit txn seqno and a seq_no of audit txn where it was changed last time 0: <...>, # pool ledger root (hash or seqno delta) 1: <...>, # domain ledger root (hash or seqno delta) 2: <...>, # config ledger root (hash or seqno delta) 1001: <...>, # plugin ledger root (hash or seqno delta) # -1: <...>, in case of shared root for all ledgers  }, "stateRoot": {   # a state root hash as base58 for the ledgers that changed the state in this 3PC 0: <...>, # pool state root hash 1: <...>, # domain state root hash 2: <...>, # config state root hash 1001: <...>, # plugin state root hash # -1: <...>, in case of shared root for all ledgers   }     }, "metadata": { }, }, "txnMetadata": { "txnTime": <...>, "seqNo": <...>, }, "reqSignature": { } } {code} Please note, that `ledgerRoot` and `stateRoot` have values for all ledgers (or one `-1` value in future once we have a combined root). `ledgerRoot` value for every ledger can be either * ledger/state root hash as base58, if this ledger was changed in the 3PC batch the audit txn is created for * delta, that is a difference between the current audit txn seq_no and a seq_no of audit txn where it was changed last time  If the ledger is never changed, then the corresponding ledger_id is not present at all.  This is done so for # Easy way to verify the data consistency when doing external audit of the ledger. One can compare the root hash after applying each 3PC batch # Easy way to find out a txn (3PC batch) from audit ledger where a ledger had the given root hash. This will be needed for a new protocol of BLS multi-sig using audit ledger. # More compact data than if we stored all root hashes all the time (even if it's not changed).  Use case: Get the value at the given time - ts and ledger_id as an input - find an audit ledger txn at the given timestamp (using ts_store index) - if the ledger_id's value is a root has is present in the audit txn - return it - if the ledger_id's value is a delta (an integer), then get the audit txn for the `seq_no=current_audit_seq_no-delta` and get the root hash of the ledger from there  ></body> </Action>
<Action id="56907" issue="36810" author="ashcherbakov" type="comment" created="2019-02-12 08:44:43.0" updateauthor="ashcherbakov" updated="2019-02-26 16:08:45.0"> <body><! CDATA h2. *Examples of 2 audit txn.*  Sizes of ledgers before: "0": 10, "1": 5, "2": 15, "1001": 100, h3. *Batch1: DOMAIN ledger (15 txns)* {code:java} { "ver": "1", "txn": { "type": "2",  "protocolVersion": 2,  "data": {  "ver": "1",  "viewNo": 0, "ppSeqNo": 1,  "ledgerSize": { 0: 10, 1: 20, 2: 15, 1001: 100,  }, "ledgerRoot": { 0: 2, 1: "domain_ledger_root_hash_1",  2: 1, }, "stateRoot": { 1: "domain_state_root_hash_1"  } }, "metadata": { }, }, "txnMetadata": { "txnTime": 100001, "seqNo": 10,  }, "reqSignature": { } }  {code} h3. *Batch2: POOL ledger (1 txn)* {code:java} { "ver": "1", "txn": { "type": "2", "protocolVersion": 2, "data": { "ver": "1", "viewNo": 0, "ppSeqNo": 2, "ledgerSize": { 0: 11, 1: 20, 2: 15, 1001: 100,  }, "ledgerRoot":{  0: "pool_ledger_root_hash_2", 1: 1, 2: 2 }, "stateRoot":{ 0: "pool_state_root_hash_2"  }    }, "metadata": { }, }, "txnMetadata": { "txnTime": 100005, "seqNo": 11, }, "reqSignature": { } }{code}       ></body> </Action>
<Action id="57455" issue="36810" author="ashcherbakov" type="comment" created="2019-02-22 13:18:54.0" updateauthor="ashcherbakov" updated="2019-02-26 15:59:28.0"> <body><! CDATA *Changes:* * Added Audit ledger as the first ledger for catchup * Audit ledger is updated for each 3PC batch (see format above) * Audit ledger txn root is included into PrePrepare and validated by others when processing PrePrepare * Audit Ledger Handler is implemented taking into account Pluggable Request Handlers approach * A couple of re-factorings and improvements have been done  *Covered by tests* * plenum/tests/audit_ledger folder  *PR* *  https://github.com/hyperledger/indy-plenum/pull/1091  *  https://github.com/hyperledger/indy-node/pull/1182  * https://github.com/hyperledger/indy-plenum/pull/1100  *Risk* * Medium  *Build* * 1.6.832  *Recommendation for QA:* * Test that audit ledger is updated during the load (audit ledger ID is 3) * Audit ledger as of now does not fix any known issues. But it should nor introduce any new issues not affect performance a lot. * So, the main task here is a regression testing ** Run acceptance load test (10 writes, 100 reads per sec) ** Test that catchup of all ledgers work correctly ** Test that view change works correctly ** Test that Audit ledger is shown properly in validator info  ></body> </Action>
<Action id="57461" issue="36810" author="ashcherbakov" type="comment" body="BTW the next Pool upgrade (to 1.7) can be forced to avoid some issues with audit ledger." created="2019-02-22 15:03:36.0" updateauthor="ashcherbakov" updated="2019-02-22 15:03:36.0"/>
<Action id="57533" issue="36810" author="vladimirwork" type="comment" created="2019-02-25 11:19:30.0" updateauthor="vladimirwork" updated="2019-02-25 11:19:30.0"> <body><! CDATA We have a number instead of "audit" word in validator-info: {noformat} Total pool Transactions:  7 Total ledger Transactions:  18 Total config Transactions:  0 Total 3 Transactions:  0 {noformat}   ></body> </Action>
<Action id="57536" issue="36810" author="vladimirwork" type="comment" created="2019-02-25 13:12:08.0" updateauthor="vladimirwork" updated="2019-02-25 13:14:12.0"> <body><! CDATA Build Info: indy-node 1.6.832  Steps to Reproduce: 1. Run 7 nodes pool. 2. Run slight load about 1 writing txn per second. 3. Stop the 7th node. 4. Stop the load. 5. Start the 7th node. 6. Check catch-up for all ledgers.  Actual Results: Audit ledger doesn't catch up at 7th node (but domain ledger does) and it grows at 1-6 nodes. !INDY-1944.PNG|thumbnail! Logs: ev@evernymr33:logs/1944_logs.tar.gz  Expected Results: All ledgers should catch up successfully.  ></body> </Action>
<Action id="57550" issue="36810" author="toktar" type="comment" body="&quot;Audit&quot; in validator-info added in scope of the task INDY-2008" created="2019-02-25 15:10:01.0" updateauthor="toktar" updated="2019-02-25 15:10:01.0"/>
<Action id="57554" issue="36810" author="vladimirwork" type="comment" body="Validator-info fixes will be tested in scope of INDY-2008. Catch-up will be tested in scope of INDY-1945 and INDY-1946." created="2019-02-25 15:31:00.0" updateauthor="vladimirwork" updated="2019-02-25 15:31:00.0"/>
<Action id="57555" issue="36810" author="ozheregelya" type="comment" created="2019-02-25 15:31:27.0" updateauthor="ozheregelya" updated="2019-02-25 15:31:27.0"> <body><! CDATA Load test results for indy-node 1.6.832: Pool worked under production load *without plugins* during two days. 2394800 txns were written, all nodes are in sync, but two nodes failed with 'No space left'. So, load test result looks good enough. Load *with plugins* is blocked by ST-511.  ></body> </Action>
