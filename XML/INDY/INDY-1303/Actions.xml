<Action id="44319" issue="29722" author="anikitindsr" type="comment" created="2018-05-14 11:19:41.0" updateauthor="anikitindsr" updated="2018-05-14 11:19:41.0"> <body><! CDATA Test cases for proving, that old protocol doesn't work: * Delaying commit messages for all nodes. Send some requests, undelaying commit messages for non primary node and force view change process. When view change complete, we can get wrong state root for non primary node. * If we have n-f+1 nodes and the next step is disconnect primary. In that case, we have n-f nodes, which will start to initiate view_change process by sending instance change messages. After this if one of other nodes will be restarted, then remaining nodes will not elect new primary, besause restarted node will lost current viewNo and will try to send IC message with viewNo "0". If instance change will be initiated by "primary degraded", then restarted node must order some resuests, before understanding, that "primary degraded"  ></body> </Action>
<Action id="44531" issue="29722" author="ashcherbakov" type="comment" created="2018-05-17 07:55:13.0" updateauthor="ashcherbakov" updated="2018-05-17 07:55:13.0"> <body><! CDATA Scenario from INDY-1259: - Have the same last_prepared (uncommiited) certificate on all nodes, so that all nodes, for example, have 1 uncommitted request for which they have a prepared certificate but haven't ordered it yet. - Delay COMMITs on all nodes except NodeX - Start view change =>View change ends and the prepared certificate will be reached on NodeX but not on other nodes. => we have 1 node with 1 more txn than others which can not be recovered since the ledger is append only.  ></body> </Action>
<Action id="44745" issue="29722" author="sergey.khoroshavin" type="comment" created="2018-05-21 15:57:33.0" updateauthor="sergey.khoroshavin" updated="2018-05-24 10:41:49.0"> <body><! CDATA *#1*  Test case: - given 4 nodes - increase view change timeout to exceed allowed test running time - disable normal view change to make tests deterministic - indefinitely delay receiving commit messages on all nodes - send some requests - wait until all nodes have same last prepare certificate - indefinitely delay receiving prepare messages on two nodes - send one more request - wait until other two nodes increase last prepare certificate - trigger view change on all nodes (using view_changer.on_master_degradation) - stop delaying commits - wait for view change done on all nodes  Expected result with correct view change: view change will be successfully finished Expected result with current view change: view change will take maximum time allowed for view change, triggering test timeout  ></body> </Action>
<Action id="44958" issue="29722" author="sergey.khoroshavin" type="comment" created="2018-05-23 09:58:15.0" updateauthor="sergey.khoroshavin" updated="2018-05-24 11:06:25.0"> <body><! CDATA *#2*  Subcase: - given node A - indefinitely delay receiving commit messages on all nodes - send some requests - wait until all nodes have same last prepared certificate - trigger view change on all nodes - stop delaying commits on A - wait until view change is complete - stop delaying commits on other nodes  Test case: given nodes N1, N2, N3, N4 disable normal view change to make tests deterministic run test subcase for N4 run test subcase for N1 try ordering transactions  Expected result with correct view change: transactions should be ordered normally Expected result with current view change: second view change won't finish because pool is in inconsistent state  ></body> </Action>
<Action id="45031" issue="29722" author="toktar" type="comment" created="2018-05-24 09:29:01.0" updateauthor="toktar" updated="2018-05-24 10:04:56.0"> <body><! CDATA #3  Test case: - disable normal view change to make tests deterministic - delay commits for all nodes except node X - send request - check ordered transaction in node X - start view_change - check end of view change for all nodes - switch off commits' delay - get reply (means that request was ordered in all nodes) - repeat  Expected result with correct view change: transactions should be ordered normally Expected result with current view change: node X can't finish second transaction  ></body> </Action>
<Action id="45057" issue="29722" author="spivachuk" type="comment" created="2018-05-24 13:35:31.0" updateauthor="spivachuk" updated="2018-05-24 15:32:25.0"> <body><! CDATA *#4*  Test subcase: - given node A - indefinitely delay receiving InstanceChange and ViewChangeDone messages on node A - indefinitely delay receiving Commit messages on all nodes - send some requests - wait until all nodes have same last prepare certificate - trigger view change on all nodes (using view_changer.on_master_degradation) - stop delaying InstanceChange messages on all nodes except A - wait for view change done on all nodes except A - stop delaying Commit messages - stop delaying InstanceChange messages on node A - give time for node A to proceed with view change up to sending ViewChangeDone - stop delaying ViewChangeDone messages on node A - wait for view change done on A  Test case: - given nodes N1, N2, N3, N4 - disable normal view change to make tests deterministic - run test subcase for N4 - run test subcase for N1 - try ordering transactions  Expected result with correct view change: transactions should be ordered normally Expected result with current view change: second view change won't finish because pool is in inconsistent state  ></body> </Action>
<Action id="45190" issue="29722" author="spivachuk" type="comment" created="2018-05-28 11:36:46.0" updateauthor="spivachuk" updated="2018-05-28 11:36:46.0"> <body><! CDATA *#5*  Test subcase: - given node A - indefinitely delay receiving InstanceChange and ViewChangeDone messages on node A - indefinitely delay receiving Commit messages on all nodes - send some requests - wait until all nodes have same last prepare certificate - trigger view change on all nodes (using view_changer.on_master_degradation) - stop delaying InstanceChange messages on all nodes except A - wait for view change done on all nodes except A - stop delaying Commit messages - stop delaying ViewChangeDone messages on node A - wait for propagate primary done on node A - stop delaying InstanceChange messages on node A  Test case: - given nodes N1, N2, N3, N4 - disable normal view change to make tests deterministic - run test subcase for N4 - run test subcase for N1 - try ordering transactions  Expected result with correct view change: transactions should be ordered normally Expected result with current view change: second view change won't finish because pool is in inconsistent state  ></body> </Action>
