<Action id="61905" issue="40174" author="toktar" type="comment" created="2019-07-17 11:42:45.0" updateauthor="toktar" updated="2019-07-17 11:42:45.0"> <body><! CDATA *PoA:* * Change re-asking LedgerStatuses via QueueTimer to RepeatingTimer * Don't add scheduler stopping for a quorum of LEDGER_STATUS because after same LEDGER_STATUSes ConsProofService does a catchup finish and stops all schedulers. In a case when LEDGER_STATUSes are richer, we ask ConsistencyProofs and stop schedulers before. * Change re-asking ConsistencyProofs via QueueTimer to RepeatingTimer * Don't add scheduler stopping with the same reasons as for LEDGER_STATUSes  * Add a test for LedgerStatuses: ** Start a catchup  ** Delay LedgerStatuses twice (use MockTimer) ** Check that the catchup finished * Add a test for ConsistencyProofs ** Start a catchup  ** Delay ConsistencyProof twice (use MockTimer) ** Check that the catchup finished  ></body> </Action>
<Action id="61943" issue="40174" author="toktar" type="comment" body="PR: https://github.com/hyperledger/indy-plenum/pull/1269" created="2019-07-18 12:50:51.0" updateauthor="toktar" updated="2019-07-18 12:50:51.0"/>
<Action id="61951" issue="40174" author="toktar" type="comment" created="2019-07-18 14:36:10.0" updateauthor="toktar" updated="2019-07-19 00:41:22.0"> <body><! CDATA *Problem reason:* - In a catchup LedgerStatuses re-ask once. If a node doesn't receive a response for this re-ask then catchup will not be finished. - In a catchup ConsistencyProofs re-ask once. If a node doesn't receive a response for this re-ask then catchup will not be finished.  *Changes:* - Change re-asking LedgerStatuses via QueueTimer to RepeatingTimer - Change re-asking ConsistencyProofs via QueueTimer to RepeatingTimer - Add tests  *PR:* *  https://github.com/hyperledger/indy-plenum/pull/1269   *Version:* * indy-node 1.9.1031 -master * (indy-plenum 1.9.844 -master)  *Risk factors:* - If the fix is incorrect, it is possible that a catchup will not be completed.  *Risk:* - Low  *Test:* *  test_node_catchup_with_connection_problem.py|https://github.com/hyperledger/indy-plenum/pull/800/files#diff-8bc091580aee91c53dee265fc1fa708d    *Recommendations for QA:* * Start a docker pool with 4 nodes * Make the Node4 slow (maybe delay all messages for this node) * Initiate network delays for the Node4 for delay catchup messages. * Start a catchup for the Node4. * Reset network delays after 60 seconds. * Check that the catchup finished after a while.  ></body> </Action>
<Action id="62002" issue="40174" author="vladimirwork" type="comment" created="2019-07-22 11:31:18.0" updateauthor="vladimirwork" updated="2019-07-22 11:31:18.0"> <body><! CDATA Build Info: indy-node 1.9.1031 indy-plenum 1.9.844  Steps to Validate: 1. Start a docker pool with 4 nodes. 2. Initiate network delays for the Node4 for delay catchup messages. 3. Start a catchup for the Node4. 4. Reset network delays after 60 seconds. 5. Check that the catchup finished after a while.  Actual Results: Pool catches up successfully.  ></body> </Action>
