<Action id="28310" issue="18690" author="alexander.shekhovcov" type="comment" created="2017-07-13 13:51:02.0" updateauthor="alexander.shekhovcov" updated="2017-07-14 09:06:35.0"> <body><! CDATA (/)  *Problem reason:* - A node's ledger might get out of sync for different reasons (say, write to db failed), thus it will be lagging behind and will not be able to process newer PRE-PREPAREs, PREPAREs and COMMITs. The node has to be restarted in order to participate in consensus again.   *Changes:* - a node starts the catchup procedure in case the node stashes two checkpoints with quorum. It is an emergency recovery mechanism.   *Committed into:*  https://github.com/hyperledger/indy-plenum/pull/270   indy-node 0.4.30  *Risk factors:* Can cause unexpected behavior because the catchuping of a broken node is not tested well.  *Risk:* Medium  *Covered with tests:*  test_node_catchup_after_checkpoints  *Recommendations for QA:* 1. Make a non-primary node is not participating in consensus without disconnection it (disconnecting/connecting starts catchup itself).   2. Make sure the node does not process requests "missing PRE-PREPAREs between X and Y" is quite a common reason.  3. Send more than 200 requests (one checkpoint == 100 batches)  4. Make sure the node catchup and participating     We decided do not implement starting the catchup procedure by timeout in case a node misses checkpoints because it is rather risky to start the catchup procedure in an arbitrary moment. Anyway, this ticket implements an emergency recovery mechanism which has to be safe enough for main functionality.   We can implement the timeout option later after MGL.        ></body> </Action>
<Action id="28863" issue="18690" author="ozheregelya" type="comment" created="2017-07-23 17:14:57.0" updateauthor="ozheregelya" updated="2017-07-23 17:18:50.0"> <body><! CDATA *Build Info:*   indy-node 0.4.52   indy-anoncreds 0.4.18   indy-plenum 0.4.64   sovrin 0.2.10   python3-rlp 0.5.1   python3-sha3 0.2.1   python3-pyzmq 16.0.2 OS/Platform: Ubuntu 16.04.2 LTS Setup: 4 nodes, 1 client  *Steps to Reproduce:*  1. Set up pool of 4 nodes. 2. Write random information into home/sovrin/.sovrin/data/nodes/Node4/transactions_sandbox/1 {code:java} ||||1|V4SGRU86Z58d6TV7PBUe6f|~CoRER63DVYnWZtK8uAzNbx||||||0|| V4SGRU86Z58d6TV7PBUe6f||||1|Th7MpTaRZVRYnPiabds81Y|~7TYfekw4GUagBnBVCqPjiC||||||2|| V4SGRU86Z58d6TV7PBUe6f||||1|EbP4aYNeTHL6q385GuVpRV|~RHGNtfvkgPEUQzQNtNxLNu||||||2|| V4SGRU86Z58d6TV7PBUe6f||||1|4cU41vWW82ArfxJxHkzXPG|~EMoPA6HrpiExVihsVfxD3H||||||2|| V4SGRU86Z58d6TV7PBUe6f||||1|TWwCRQRZ2ZHMJFn9TzLp7W|~UhP7K35SAXbix1kCQV4Upx||||||2|| V4SGRU86Z58d6TV7PBUe6f||||1|7JhapNNMLnwkbiC2ZmPZSE|~LgpYPrzkB6awcHMTPZ9TVn|||||||| Th7MpTaRZVRYnPiabds81Y|1500558332385065|2qsX8mt6cgLJNdhHZ93HU4P9nC95TdA7ZPKHCissHXAURDhdzZhtw6rTWh18D62efyoNg542McyUwN7gMAgMhYRZ|1500558332|1|RrTkY1dPvpxJShvtHoPe8Y|~MKpejEBYGxdQzHRZ1CZk1Z|||||||| RrTkY1dPvpxJShvtHoPe8Y|1500559298686229|59a8PsivEnAc6KZ7yyq2ftN3sTYBUnYaqGhm1gZRvDxX6vSvSqpZDjhkmCSoemdToPzSdECNSFbyCe9A7gXZehPc|1500559298|1|RrTkY1dPvpxJShvtHoPe8Y|8141LM6L6Lm3XXB76sGVDuBE5q8w94WLZBkRBkTZ2NTP|||||||| RrTkY1dPvpxJShvtHoPe8Y|1500559769713363|4pMLbHGEuUSZQoeiN7BiT9w41WjQ25Lym3dDS5ktWf9qAVPicrNXZ6Vwdc1U2Qp9Dou1iXrLqfPMVgsycHbYB56H|1500559769|1|RrTkY1dPvpxJShvtHoPe8Y|7DraUMinVb67g6uMxio955u7MSBSKKSMzfUoUxZCQYRK|||||||| Th7MpTaRZVRYnPiabds81Y|1500561721619998|4gwd5rTAPvWa8xLuVV7WCn91iCvbztzMgyBpZTVRSeR5iE3Yw1S856HV2ehbuPRhHX3kv2SYfxz77cmL5QqEhBNB|1500561721|1|VWWqQERPa2LHGY86UNJKWY||||||||| Th7MpTaRZVRYnPiabds81Y|1500561976072049|3BX2N8WiYzneYguE3f9zPVJJkpPG9bAu7pyWYoJWLy1Kn9pQZLrkbJzJXe9do2ZNwhLyMG3Tmd62adyuoVtPbv9u|1500561976|1|VWWqQERPa2LHGY86UNJKWY|4qvUoW4yGSpqxjjGLWtZETngiHT5JoGA5pSq8uwFqcA7|||||||| VWWqQERPa2LHGY86UNJKWY|1500561988523410|5EHM7wSqZWCij9QYXQqrFeAs9RmyPHAoMRP899t5cNpk4HMB9cM4MNMQooP8L5YyCASfrPEfyuH7bNpsPte8hmUd|1500561988|1|VWWqQERPa2LHGY86UNJKWY||||||||| Th7MpTaRZVRYnPiabds81Y|1500568279362189|3JfjA5Dz66qLTo7ozxokAEnsAjcCCWZyWkBaCe11kRCnpKPqomE5Pwzc4jtb8YD3wdBTZVh84A4fTrZ6QjPGbRH4|1500568279|1|W6CUN1QHTpYa2HxxJ7aRP4aLfi8cx8AJ6cFvY9pv85A||||||||| V4SGRU86Z58d6TV7PBUe6f|1500568361305289|2zW4ouSgvcwcwfKTyWnBwVY2cWCSvtnt5ggGD9653GjBaraQaq8r2Hbd3wva4zzsFCf9zdtsd1jVofnwPHhbd1rs|1500568361|1|W6CUN1QHTpYa2HxxJ7aRP4aLfi8cx8AJ6cFvY9pv85A|||||||0|| Th7MpTaRZVRYnPiabds81Y|1500568442641013|wGUoFSdZ3AJTn9abTJB3vaW5R5g2sqoAiEyR38eoPA9aNXwRtqcuRzBCUDks4E5MEK8JCFkC4o5B4gjn1mj4VP8|1500568442|1|W6CUN1QHTpYa2HxxJ7aRP4aLfi8cx8AJ6cFvY9pv85A|W6CUN1QHTpYa2HxxJ7aRP4aLfi8cx8AJ6cFvY9pv85A|||||||| W6CUN1QHTpYa2HxxJ7aRP4aLfi8cx8AJ6cFvY9pv85A|1500568452134573|3aJr54MFsCvAu3b78uzS3xsKNHdHxyAXmXtgqEyqThGqR64J28nNicSTPufFyN9c5JoYgkR4RQ9TSGu1E6sy661E|1500568452|1|W6CUN1QHTpYa2HxxJ7aRP4aLfi8cx8AJ6cFvY9pv851||||||||| Th7MpTaRZVRYnPiabds81Y|1500633526998862|3qe1Uay5nthHe2jFTrAr7GiyMZUiZeko5mLtfRewnuAbjRXv4BGDyDF4LxhLgnkYc69599iJGYydZtEBcqpVste7|1500633527|1|W6CUN1QHTpYa2HxxJ7aRP4aLfi8cx8AJ6cFvY9pv999||||||||| adsfcasdffsadfasdfadsfdsfTh7MpTaRZVRYnPiabds81Y|1500633919216149|3FADUPQd4iQTuht1uzuYLkDCPQJBUVfyiMdS9Geot1Vz6AibNPMSV8FCppmwDDZ6PaFPG3uytpx771bK3vfoFFzF|1500633919|1|Hh6q3aMwJ7xtk7CHusCk9R||||||||| asdfasdfadsf safddsafasdfasdfadsf sadfsadfsadf{code} 3. Send several NYMs to test nodes communication, compare transactions files. {code:java} root@ec2fb355fd7e:/home/sovrin/.sovrin# wc -l data/nodes/Node4/transactions_sandbox/1 21 data/nodes/Node4/transactions_sandbox/1{code} {code:java} root@c0ecf5b26ddb:/home/sovrin/.sovrin# wc -l data/nodes/Node3/transactions_sandbox/1 23 data/nodes/Node3/transactions_sandbox/1{code} 4. Using add_keys.py and load_test.py send more than 200 transactions. 5. Compare transaction files again. {code:java} 21 data/nodes/Node4/transactions_sandbox/1 root@ec2fb355fd7e:/home/sovrin/.sovrin# vim Node4.log {code} {code:java} root@c0ecf5b26ddb:/home/sovrin/.sovrin# wc -l data/nodes/Node3/transactions_sandbox/1 523 data/nodes/Node3/transactions_sandbox/1{code} *Actual Results:* Files are different, catchup has not happened.  *Expected Results:* Catchup should happen, files should be the same.   ^logs1.tar.gz   ></body> </Action>
<Action id="28865" issue="18690" author="ozheregelya" type="comment" body="This ticket needs in additional discussion, so it is reassigned to  ~VladimirWork ." created="2017-07-23 17:20:33.0" updateauthor="ozheregelya" updated="2017-07-23 17:20:33.0"/>
<Action id="28965" issue="18690" author="alexander.shekhovcov" type="comment" created="2017-07-25 12:41:20.0" updateauthor="alexander.shekhovcov" updated="2017-07-25 13:56:29.0"> <body><! CDATA Needs a fix because it turned out that replicas do not move their watermarks after catchup finished.  The issue breaks only recovery feature and does not break main functionality.   ></body> </Action>
<Action id="29043" issue="18690" author="alexander.shekhovcov" type="comment" created="2017-07-26 15:24:16.0" updateauthor="alexander.shekhovcov" updated="2017-07-26 15:27:51.0"> <body><! CDATA fixed:  In case of triggering catchup a replica changes its watermark bounders.  *How to test:*  1. patch a node code: {code} vim /usr/local/lib/python3.5/dist-packages/plenum/server/node.py {code} go to "def sendToReplica"  before {code} if self.msgHasAcceptableInstId(msg, frm) and {code}  add  {code} from datetime import datetime if int(datetime.now().minute / 10) % 2: logger.warning("The node misses all replica messages") return {code}  so the node will not process 3pc messages between each odd ten minutes in an hour, for example  14:00:00-14:09:59 - works 14:10:00-14:19:59 - does not work 14:20:00-14:29:59 - works ...  2. save the file and restart the sovrin-node service  3. in non-working interval send 150 NYM requests 4. check that the node ledger is behind 5. in working interval send more then 200 NYMs  6. check that the node ledger is actual  Make sure what the node is non-primary and does not have disconnection during the testing (except step #2).     ></body> </Action>
<Action id="29223" issue="18690" author="vladimirwork" type="comment" created="2017-07-31 12:13:13.0" updateauthor="vladimirwork" updated="2017-07-31 12:13:56.0"> <body><! CDATA Build Info: indy-node 1.0.68  Steps to Validate: 1. Patch a node code according to comment above. 2. Save the file and restart the sovrin-node service. 3. In non-working interval send 150 NYM requests. 4. Check that the node ledger is behind. 5. In working interval send more then 200 NYMs.  Actual Results: All nodes' ledgers are actual.  ></body> </Action>
