<Action id="65717" issue="40610" author="anikitindsr" type="comment" created="2019-11-22 10:14:34.0" updateauthor="anikitindsr" updated="2019-11-22 10:14:34.0"> <body><! CDATA Aslo, what we have to do in catchup_service in terms of simulation tests: * Move all on_start and on_finish stuffsÂ  from node's side * Move select_primaries_after_catchup into internal_bus using. Maybe it should be divided into separate steps or moved to view_change service.  ></body> </Action>
<Action id="66533" issue="40610" author="sergey.khoroshavin" type="comment" created="2020-01-08 12:58:28.0" updateauthor="sergey.khoroshavin" updated="2020-01-08 13:52:33.0"> <body><! CDATA *PoA*  * Make catchup services available in simulation tests ** Preliminary refactorings *** Make master instance buses available in LedgerManager (this is going to be temporary) *** Replace pre/post catchup callbacks with internal messages *** Replace postTxnAddedToLedger callback with internal message? (not sure) *** Make WriteReqHandler and DatabaseManager available in LedgerManager *** Remove ledger registering functionality from LedgerManager ** Refactor SeederService so that it can be used in simulation tests *** Remove dependency on channels, subscribe to buses instead *** Remove dependency on CatchupDataProvider, use DatabaseManager instead *** Move SeederService out of LedgerManager, create it in: **** Master instance of Replica (I know this is dirty, and I think it is definitely a subject of discussion, but in order to move it to Node more refactorings would be required, also it would be harder to maintain compatibility with ReplicaService) **** ReplicaService, so that it is available in simulation tests ** Refactor NodeLeecherService so that it can be used in simulation tests *** Remove dependency on channels, subscribe to buses instead **** Would be nice to remove dependency on channels for LedgerLeecherService, ConsProofService and CatchupRepService *** Remove dependency on CatchupDataProvider, use WriteRequestHandler instead *** Move NodeLeecherService out of LedgerManager, create it in same places as SeederService (with same rationale) * Create catchup simulation tests ** Generic catchup simulation test *** Make one node severely lag behind by temporarily discarding all messages sent to it *** Use random delays for message delivery *** Allow randomly lost messages *** Allow up to n-f-1 offline nodes *** Simulate malicious nodes? **** Pretending they have different data **** Pretending they are ahead of pool *** Allow ordering during catchup *** Make sure node catches up to f+1's highest ledger *** Make sure node can order after finishing catchup if there are more than n-f online nodes (small number of online nodes probably should be a different test case) ** Demotion/promotion simulation tests * Cleanups ** Probably LedgerManager can be removed after those changes   ></body> </Action>
