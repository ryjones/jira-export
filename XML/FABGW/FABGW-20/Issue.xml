<Issue id="46843" key="FABGW-20" number="20" project="11600" reporter="andrew-coleman" assignee="andrew-coleman" creator="andrew-coleman" type="10001" summary="Specify endorsing organizations for private data scenarios" priority="3" resolution="10000" status="10801" created="2021-05-05 10:16:29.0" updated="2021-06-29 06:51:33.0" resolutiondate="2021-06-29 06:51:33.0" votes="0" watches="1" workflowId="60744" archived="N"> <description><! CDATA The transaction flow with private data involves sharing the data in the transient field with peers that belong to organisations that are trusted recipients of that data.  From a client SDK perspective, the transaction must be submitted with both the transient data AND the list of orgs that are entitled to receive that data.  Service discovery does not find that list of trusted orgs, it must be provided by the client app.  It must be assumed that the list of orgs given by the client satisfies the endorsement policy of the transaction.  If it doesn't, the process should fail to endorse.  The alternative approach of utilising service discovery to add extra orgs in order to satisfy the endorsement policy could cause a security breach if the org it chooses is not trusted to receive the private data.   Each SDK currently has the ability to pass transient data with the transaction proposal.  To make the usage pattern clearer to end users, it is proposed to remove the WithTransient(data map string   byte) method (or equivalent for Node & Java) and replace with WithPrivateData(data map string   byte, orgs ...string).  This makes it clearer that the data is shared with those orgs rather than having separate functional arguments to specify the data and then the orgs.   *E.g. Go SDK*    {code:go} data := make(map string   byte) data "price"  =   byte("8500") contract.Submit( "BuyCar",  WithStringArguments("CAR1"),  WithPrivateData(data, "BuyingOrg", "SellingOrg"), ) {code}   *E.g. Node SDK*   {code:javascript} contract.submit('BuyCar', {    arguments:  'CAR1' , privateData: {  data: { price: '8500' }, orgs:  'BuyingOrg', 'SellingOrg'     } }); {code}    *E.g. Java SDK*    {code:java} Map<String, byte  > data = new HashMap<String, byte  >(); data.put("price", "8500".getBytes()); contract.newProposal("BuyCar")  .addArguments("CAR1") .setPrivateData(data, "BuyingOrg", "SellingOrg") .build() .endorse() .submit(); {code}      *gRPC extension*   message EndorseRequest   {code:} {     // The unique identifier for the transaction.     string transaction_id = 1;     // Identifier of the channel this request is bound for.     string channel_id = 2;     // The signed proposal ready for endorsement.     protos.SignedProposal proposed_transaction = 3;     // If targeting the peers of specific organizations (e.g. for private data scenarios),     // the list of organizations should be supplied here.     repeated string private_data_organizations = 4; } {code}    *Gateway server logic*   The SDK creates the SignedProposal protobuf message which contains the transient data.  This get wrapped in an EndorseRequest/EvaluateRequest message which contains the private_data_organizations field.   *Endorse() method* In the gateway server, if the EndorseRequest message contains private_data_organizations, then the set of endorsing peers is calculated by invoking the discovery PeersOfChannel method, filtering by allowable orgs and installed chaincode, then select one peer from each org (preferably the one with maximum block height).  Invoke propose on each of these peers and build a proposal response ready for signing and submitting.  Note that no checks have been made at this stage that it satisfies the endorsement policy.   *Evaluate() method* Similar to Endorse(), but if the local org is contained in the private_data_organizations field of the EvaluateRequest message, then the highest block height peer from local org is selected; otherwise the highest block height peer from any of the other specified orgs is selected.  Only a single endorser is required to process the proposal (query).      ></description> </Issue>
