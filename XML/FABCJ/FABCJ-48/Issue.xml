<Issue id="41229" key="FABCJ-48" number="48" project="11208" reporter="sstone1" creator="sstone1" type="10001" summary="Enable asynchronous contract startup processing" priority="3" status="10100" created="2019-07-16 11:31:40.0" updated="2020-11-18 08:55:43.0" votes="0" watches="1" workflowId="57409"> <description><! CDATA Currently, in a Node.js smart contract, the only place to perform one time contract initialisation operations is in the constructor. For example, if you want to load some JSON Schema or Protocol Buffer files for validating transaction data, you can do this in the constructor and use the loaded files across subsequent transactions.  This is fine unless the one time initialisation requires calling asynchronous functions - you cannot (or should not!) have async constructors. One approach I used was:   {code:javascript} constructor() { super(); this.loadingPromise = this._loadSomeStuff(); }  async someTx() { await this.loadingPromise; // ensure stuff is loaded } {code}  We should make this better somehow, and maybe introduce a method that can be overridden ala createContext.   Even though this affects Node.js, we should roll this out across all supported programming lannguages.  ></description> </Issue>
