<Action id="40460" issue="27416" author="mastersingh24" type="comment" body="The first step on this one is to come up with a basic design for doing Java CC &quot;properly&quot; ... for example, there is no need to actually compile the shim into your program.  We should be able to implement the Java CC simply by implementing the required interface and then in the ccenv load the CC using dependency injection." created="2018-02-20 21:14:53.0" updateauthor="mastersingh24" updated="2018-02-20 21:14:53.0"/>
<Action id="40936" issue="27416" author="alacambra" type="comment" body="Implementation still needed for development. To debug. But it should just be downloded from mvn central. " created="2018-02-27 15:37:07.0" updateauthor="alacambra" updated="2018-02-27 15:37:07.0"/>
<Action id="41379" issue="27416" author="sanchezl" type="comment" body=" ~mastersingh24 , I has posted an  initial document|https://docs.google.com/document/d/1BKTqjB8x3pTBrHn9H0aHv1mG883Iyf3Q5xEBjcWs6hs/edit?usp=sharing  describing the high level changes I want to make. We still need an audit of what functionality is missing." created="2018-03-08 18:01:40.0" updateauthor="sanchezl" updated="2018-03-08 18:01:40.0"/>
<Action id="44539" issue="27416" author="denyeart" type="comment" body="Added v1.3 to the short name to eliminate confusion when looking at v1.2 dashboards." created="2018-05-17 09:58:10.0" updateauthor="denyeart" updated="2018-05-17 09:58:10.0"/>
<Action id="44639" issue="27416" author="remmeier" type="comment" created="2018-05-18 07:12:13.0" updateauthor="remmeier" updated="2018-05-18 07:12:13.0"> <body><! CDATA are there any plans to deliver an experimental version or something 1.2? as the topic gets repeatly pushed back to the next release.  maybe it would be great to have generic chain code support and move the actual implementation out of fabric core, meaning a docker image or better specifying the coordinates of a kubernetes service that implements a given grpc contract to let fabric execute chaincode.  ></body> </Action>
<Action id="45821" issue="27416" author="brianantao" type="comment" body="What are the plans to get this feature out in the next release version 1.2 We have been waiting for quite some time." created="2018-06-12 10:16:30.0" updateauthor="brianantao" updated="2018-06-12 10:16:52.0"/>
<Action id="45822" issue="27416" author="brianantao" type="comment" body="Any ideas if the Java CC will support a Data Abstraction layer through JDBC ? for SQL Like local state maintenance at a peer level." created="2018-06-12 10:23:49.0" updateauthor="brianantao" updated="2018-06-12 10:23:49.0"/>
<Action id="46485" issue="27416" author="denyeart" type="comment" body=" ~brianantao  Java chaincode support is actively being worked for v1.3.  It is intended to have functional parity with go chaincode support.  That is, no SQL support is planned." created="2018-06-25 12:43:10.0" updateauthor="denyeart" updated="2018-06-25 12:43:10.0"/>
<Action id="47537" issue="27416" author="rickr" type="comment" created="2018-07-19 13:29:43.0" updateauthor="rickr" updated="2018-07-19 13:29:43.0"> <body><! CDATA Hi what is the state of this if I just pull/build Fabric master ?  Will I have a functioning Java chaincode deployment environment?  Is there some sample simple balance transfer I can use to test this with?  thanks!  ></body> </Action>
<Action id="47718" issue="27416" author="gennadyl" type="comment" created="2018-07-24 13:52:28.0" updateauthor="gennadyl" updated="2018-07-24 13:52:43.0"> <body><! CDATA Hi  ~rickr   As far as I know, it will not work.  ></body> </Action>
<Action id="48051" issue="27416" author="denyeart" type="comment" created="2018-07-27 16:18:31.0" updateauthor="denyeart" updated="2018-07-27 16:18:31.0"> <body><! CDATA There is a small SDK impact around packaging and deployment of the java chaincode.  ~gennadyl  Do you have a target date for when SDK can start trials against java chaincode?  ></body> </Action>
<Action id="48885" issue="27416" author="rickr" type="comment" body="Is there a balance transfer sample for this ?" created="2018-08-15 13:20:26.0" updateauthor="rickr" updated="2018-08-15 13:20:26.0"/>
<Action id="48931" issue="27416" author="gennadyl" type="comment" body="Hi  ~rickr   ~harrisob@us.ibm.com . You can find example under integration/chaincode/java folder in fabric source. The actual path for install command is integration/chaincode/java/simple/gradle/" created="2018-08-16 13:43:52.0" updateauthor="gennadyl" updated="2018-08-22 13:55:21.0"/>
<Action id="49239" issue="27416" author="rickr" type="comment" body="Is this fully integrated? If I get the latest fabric and build it will it excute the above chaincode example ? " created="2018-08-22 14:14:46.0" updateauthor="rickr" updated="2018-08-22 14:14:46.0"/>
<Action id="49258" issue="27416" author="rickr" type="comment" created="2018-08-22 18:49:40.0" updateauthor="rickr" updated="2018-08-22 18:49:40.0"> <body><! CDATA I just got the latest fabric and did a build .. 018-08-22 17:51:53.268 UTC  endorser  callChaincode -> DEBU a709  foo  2bb5c843054c57447a9a8fee3ecfd71b319dff3bbe000737acead074a1ed5f51  Exit 2018-08-22 17:51:53.268 UTC  endorser  SimulateProposal -> ERRO a70a  foo  2bb5c843  failed to invoke chaincode name:"lscc" , error: Failed to generate platform-specific docker build: Failed to pull hyperledger/fabric-javaenv:latest: API error (404): manifest for hyperledger/fabric-javaenv:latest not found error starting container error starting container 2018-08-22 17:51:53.268 UTC  e  ></body> </Action>
<Action id="49259" issue="27416" author="rickr" type="comment" created="2018-08-22 18:51:22.0" updateauthor="rickr" updated="2018-08-22 18:51:22.0"> <body><! CDATA Needs to be there so when we run system verify/merge test the javaCC test runs.   ></body> </Action>
<Action id="49260" issue="27416" author="rickr" type="comment" created="2018-08-22 18:53:51.0" updateauthor="rickr" updated="2018-08-22 18:53:51.0"> <body><! CDATA For tar package which is sent how should the files be layed out ?  Is this appropriate ?  !screenshot-1.png|thumbnail!   ></body> </Action>
<Action id="49261" issue="27416" author="rickr" type="comment" body="Nodes requires all code to be packaged under a `src` directory .. not sure what Java expects." created="2018-08-22 18:54:55.0" updateauthor="rickr" updated="2018-08-22 18:54:55.0"/>
<Action id="49274" issue="27416" author="gennadyl" type="comment" created="2018-08-23 07:26:38.0" updateauthor="gennadyl" updated="2018-08-23 07:35:13.0"> <body><! CDATA  ~rickr   Regarding docker image "Failed to pull" error - if you build shim code locally (gradle buildImage) from fabric-chaincode-java folder, you will have docker image locally and no need to pull it. I working with CI to push docker image to hyperledger nexus and as next step to push it to docker hub.  Regarding tar package - it works in same way as node, because it uses same methods to pack tars.  {code:java} src/build.gradle src/settings.gradle src/src/main/java/org/hyperledger/fabric/example/SimpleChaincode.java  {code}  ></body> </Action>
<Action id="49285" issue="27416" author="rickr" type="comment" body="Thanks  ~gennadyl  Can you ping me on rocket chat  when the docker chaincode image is availalbe." created="2018-08-23 14:09:08.0" updateauthor="rickr" updated="2018-08-23 14:09:08.0"/>
<Action id="49509" issue="27416" author="rickr" type="comment" created="2018-08-28 20:21:15.0" updateauthor="rickr" updated="2018-08-28 20:21:55.0"> <body><! CDATA FYI I ran a test where I cleaned out all images from my local docker.  I then ran a modified JSDK docker-compose that ONLY references  (v1.2) hyperledger/fabric-ca   hyperledger/fabric-tools  hyperledger/fabric-orderer  hyperledger/fabric-peer  The running of the JSDK for GO chaincode and Node ran ok.  It was not local and it appears some how the images to run GO and Node worked.  Someone else please try to see if they can reproduce those results.   If yes, I'd expect for 1.3 release that Java chaincode work in the same way.  ></body> </Action>
<Action id="49809" issue="27416" author="gennadyl" type="comment" body="This is the idea." created="2018-09-04 13:19:37.0" updateauthor="gennadyl" updated="2018-09-04 13:19:37.0"/>
<Action id="50967" issue="27416" author="sstone1" type="comment" created="2018-09-21 16:00:56.0" updateauthor="sstone1" updated="2018-09-21 16:00:56.0"> <body><! CDATA  ~gennadyl  I'm trying to pull the Java chaincode shim from Nexus - it seems like regular builds are being pushed there:   https://nexus.hyperledger.org/content/repositories/snapshots/org/hyperledger/fabric/hyperledger-fabric-chaincode-java/chaincode-shim-1.3.0-SNAPSHOT/      If I put this into my Gradle configuration:    repositories { // Use jcenter for resolving your dependencies. // You can declare any Maven/Ivy/file repository here. jcenter() maven { url "https://nexus.hyperledger.org/content/repositories/snapshots/" } }   dependencies { compile 'org.hyperledger.fabric:hyperledger-fabric-chaincode-java:chaincode-shim-1.3.0-SNAPSHOT' }   It downloads something (a .tar.gz file), but I can't access any of the classes. Have you got working configuration for use with Nexus?    ></body> </Action>
<Action id="50972" issue="27416" author="rickr" type="comment" created="2018-09-21 16:44:02.0" updateauthor="rickr" updated="2018-09-21 16:44:02.0"> <body><! CDATA When will we remove the referernce to *SNAPSHOT* in dependencies  ?  ETA ? Like to remove/test the sample in the SDK _before_ it's release.   ></body> </Action>
<Action id="50996" issue="27416" author="gennadyl" type="comment" body=" ~sstone1  I will check with Ramesh, but it look like bug. Jar put in Nexus as tar.gz and not as jar... And I need to fix artifactId and version as well." created="2018-09-22 18:49:39.0" updateauthor="gennadyl" updated="2018-09-22 18:49:39.0"/>
<Action id="51083" issue="27416" author="sstone1" type="comment" created="2018-09-24 10:44:17.0" updateauthor="sstone1" updated="2018-09-24 10:44:17.0"> <body><! CDATA  ~gennadyl  compilation works for me now with the following Gradle configuration:   repositories { jcenter() maven { url "https://nexus.hyperledger.org/content/repositories/snapshots/" } }   dependencies { implementation 'org.hyperledger.fabric:fabric-chaincode-shim:1.3.0-SNAPSHOT' }   However it fails at runtime due to java.lang.NoClassDefFoundError trying to load the ChaincodeBase class. The errors reference the Bouncycastle classes. Looking at the POM for the shim ( https://nexus.hyperledger.org/content/repositories/snapshots/org/hyperledger/fabric/fabric-chaincode-shim/1.3.0-SNAPSHOT/fabric-chaincode-shim-1.3.0-20180924.000834-1.pom)  there are no dependencies listed, but the POM for the SDK ( https://nexus.hyperledger.org/content/repositories/snapshots/org/hyperledger/fabric-sdk-java/fabric-sdk-java/1.0.0-SNAPSHOT/fabric-sdk-java-1.0.0-20170511.204101-1.pom)  has a whole bunch of dependencies listed - suspect this is the problem?  ></body> </Action>
<Action id="52326" issue="27416" author="denyeart" type="comment" created="2018-10-16 15:05:48.0" updateauthor="denyeart" updated="2018-10-16 15:06:53.0"> <body><! CDATA Core support in v1.3.0.  Get to parity with go chaincode in v1.4.0 (state-based endorsement, paged queries, etc)  ></body> </Action>
