<Action id="32561" issue="21756" author="fredbi" type="comment" created="2017-10-17 14:03:10.0" updateauthor="fredbi" updated="2017-10-17 14:03:10.0"> <body><! CDATA 1) In my understanding, bringing indexing capabilities to couchdb developers essentially boils down to define an API to manipule couch db design documents, i.e. Javascript map/reduce functions used as materialized views by couchdb.  2) Given that this kind of extension is specific to couchdb, we should avoid to pollute the shim interface. Manipulating couchdb design documents as regular parts of the "state database" seems the easiest.  3) Frankly I cannot see clearly the use case where a chaincode developer is not in control of the couchdb instance associated with the chaincode. Chaincode and state database are companion containers after all  4) A nice use case is to be able to create design documents during chaincode deploy or upgrade phases.     ></body> </Action>
<Action id="32565" issue="21756" author="davidkel" type="comment" body="An example of 3) is where a application deployer is deploying an developed hyperledger application to a fabric provisioned from a fabric service provider and for security reasons the fabric service provider doesn&apos;t provide direct access to the couch db instance running." created="2017-10-17 15:09:20.0" updateauthor="davidkel" updated="2017-10-17 15:09:20.0"/>
<Action id="32566" issue="21756" author="fredbi" type="comment" created="2017-10-17 15:49:08.0" updateauthor="fredbi" updated="2017-10-17 15:49:44.0"> <body><! CDATA Thank you for clarifying this use case.  Couldn't get your point at first, since it's a bit of a stretch for couchDB, which motto is "Applications Are Documents"...  Design documents are just regular documents with a "_design" in their name. So it shouldn't be too far fetched to be able to create and edit such documents as ordinary state variables   http://guide.couchdb.org/draft/design.html |http://guide.couchdb.org/draft/design.html   .  I haven't thought of testing this before reading your proposal but there are some chances it is already possible to hack this through. I'll carry on some tests on rel. 1.0.2 to figure it out.     Cheers,     Fred  ></body> </Action>
<Action id="34665" issue="21756" author="jeffgarratt" type="comment" body="I would be very leary of doing this.  This would give the chaincode explicit control of an external (possibly shared) resource, and leak even more information wrt to internal implementation into chaincode." created="2017-11-16 13:09:10.0" updateauthor="jeffgarratt" updated="2017-11-16 13:09:10.0"/>
<Action id="35770" issue="21756" author="denyeart" type="comment" created="2017-12-04 11:49:26.0" updateauthor="denyeart" updated="2017-12-05 18:26:02.0"> <body><! CDATA  ~davidkel    Index creation is not a data transaction that needs to be ordered and recorded on chain.  Rather it is a configuration that should be agreed to as part of the chaincode package, and applied once chaincode is installed and configured on a channel.  Therefore indexes will be managed as part of chaincode lifecycle (FAB-3067) rather than as a data transaction.  For some databases the indexes must be applied manually, which again is more aligned with chaincode lifecycle than a sequenced data transaction.  ></body> </Action>
