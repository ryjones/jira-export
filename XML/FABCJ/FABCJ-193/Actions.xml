<Action id="61073" issue="40364" author="jtonline" type="comment" created="2019-06-18 10:16:27.0" updateauthor="jtonline" updated="2019-06-18 10:16:27.0"> <body><! CDATA What are you hoping to get in the error response?  At the moment it looks like you get a Java stack trace in byte array form, which might be a reasonable fall back (maybe?) but probably not what you'd want for interoperability with clients in other languages. If you're extending the Error class to add your own properties, I'm guessing the errors represent some sort of issue closer to the business logic than low level chaincode plumbing, in which case returning some sort of error object/JSON seems more appropriate.  What could the new programming model do to make that easier at a high level, and how would you expect that to be exposed in Java chaincode?  ></body> </Action>
<Action id="61115" issue="40364" author="jtonline" type="comment" created="2019-06-19 10:28:22.0" updateauthor="jtonline" updated="2019-06-19 10:29:22.0"> <body><! CDATA I'm currently thinking that transactions should throw a specific TransactionException (see example below - imagine there is javadoc! - which could be extended to support specific use cases). The contract runtime would then pick up these exceptions and send back an error response with the exception message and/or payload if there is one. We should also definitely stop sending back stack traces to clients. Does that sound like it would work for your scenario?     (Ewwww, sorry about whatever Jira did to the code snippet below! Hopefully it's readable enough!)     {{public class TransactionException extends RuntimeException {}}  {{  private static final long serialVersionUID = 1L;}}  {{  private byte   payload;}}  {{  public TransactionException(String message) {}} {{    super(message);}} \{{  }}}  {{  public TransactionException(String message, Throwable cause) {}} {{    super(message, cause);}} \{{  }}}  {{  public TransactionException(String message, byte   payload) {}} {{    super(message);}} {{    this.payload = payload;}} \{{  }}}  {{  public TransactionException(String message, byte   payload, Throwable cause) {}} {{  super(message, cause);}}{{this.payload = payload;}} \{{  }}}  {{  public TransactionException(String message, String payload) {}} {{    super(message);}} {{    this.payload = payload.getBytes(UTF_8);}} \{{  }}}  {{  public TransactionException(String message, String payload, Throwable cause) {}} {{    super(message, cause);}} {{    this.payload = payload.getBytes(UTF_8);}} \{{  }}}  {{  public byte   getPayload() {}} {{    return payload;}} \{{  }}} {{}}}  ></body> </Action>
<Action id="61240" issue="40364" author="jpayne23" type="comment" body="I think the key for our requirement and similar requirements is that the error object being thrown from the chaincode remains untouched as it is returned so that we can expect and handle it in an appropriate way application side. Currently error messages get manipulated and concatenated with other information and looks to be different when the error is thrown due to an invoke or a query. The solution you&apos;ve proposed above covers this well I think." created="2019-06-25 10:49:49.0" updateauthor="jpayne23" updated="2019-06-25 10:49:49.0"/>
<Action id="61332" issue="40364" author="jtonline" type="comment" body=" https://gerrit.hyperledger.org/r/c/fabric-chaincode-java/+/32114 " created="2019-06-28 08:51:58.0" updateauthor="jtonline" updated="2019-06-28 08:51:58.0"/>
<Action id="61407" issue="40364" author="jtonline" type="comment" body=" https://gerrit.hyperledger.org/r/c/fabric-chaincode-java/+/32142 " created="2019-07-02 07:54:48.0" updateauthor="jtonline" updated="2019-07-02 07:54:48.0"/>
