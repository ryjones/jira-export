<Issue id="12605" key="FABCJ-196" number="196" project="11208" reporter="oiakovlev" assignee="sanchezl" creator="oiakovlev" type="10000" summary=" java-chaincode  Current java samples will create transaction even on unsuccessful invocation" priority="3" resolution="10000" status="6" created="2016-09-03 16:11:50.0" updated="2019-11-30 21:10:46.0" resolutiondate="2017-05-12 17:58:16.0" votes="1" watches="5" workflowId="56811"> <environment><! CDATA Environment mode (dev or prod) or consensus type actually doesn't matter, the reason seems to be in java implementation.  So the issue can be reproduced on any env.  ></environment> <description><! CDATA h3. Description With the current  SimpleSample|https://github.com/hyperledger/fabric/blob/master/examples/chaincode/java/SimpleSample/src/main/java/example/SimpleSample.java  java even if there was no changes to the key-value storage and it is considered that code returned an error (like, for example,  incorrect number of arguments|https://github.com/hyperledger/fabric/blob/master/examples/chaincode/java/SimpleSample/src/main/java/example/SimpleSample.java#L62-L64 ) transaction is still stored to the ledger. h3. Steps to reproduce It is quite simple to reproduce - just deploy  SimpleSample|https://github.com/hyperledger/fabric/blob/master/examples/chaincode/java/SimpleSample/src/main/java/example/SimpleSample.java  and invoke it with incorrect number of arguments or invoke it with incorrect amount, for example. Result will return txID. Query transactions using this txID - it is expected that transaction will not be present in the ledger, but it is (actually it is included in next block).  With go examples it works correctly. h3. Current implementations and possible solutions h5. Current Implementation The reason for this seems to be the difference in syntax (returned results) in go and java: Go method returns a tuple of result: the first one is string and the second one is list of errors, then  go handler code checks the list of errors|https://github.com/hyperledger/fabric/blob/master/core/chaincode/shim/handler.go#L295-L306  and if it is empty it marks transaction as completed, otherwise marks transaction execution failed.   Java handler|https://github.com/hyperledger/fabric/blob/master/core/chaincode/shim/java/src/main/java/org/hyperledger/java/shim/Handler.java#L313-L329  acts in the same way but it expects chaincode to throw an error upon unsuccessfull execution, but current examples always catch an error and simply return not null (non empty) string, so with current examples transaction is always stored to the ledger, which seems to be incorrect. h5. Possible solution Update java examples to throw exceptions instead of returning exception text as a result. This is `java` way of what currently go examples do. Also I propose to have some generic ChaincodeExecutionException which normally will be thrown upon error in chaincode, which normally will be part of  ChaincodeBase run method|https://github.com/hyperledger/fabric/blob/master/core/chaincode/shim/java/src/main/java/org/hyperledger/java/shim/ChaincodeBase.java#L48 ?  If such approach looks ok I can take this task and submit PR for review? Any other thoughts ideas?   ></description> </Issue>
