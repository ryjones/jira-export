<Action id="63053" issue="41817" author="mbwhite" type="comment" created="2019-08-19 12:55:51.0" updateauthor="mbwhite" updated="2019-08-19 12:59:14.0"> <body><! CDATA Some initial thoughts * The exception that is thrown includes the TXid  in this case  fca2d822  worth noting for future runs if this appears in the other peer logs for example * The error is thrown as a result of the 'Handler.java' getting a chaincode response indicating an ERROR  A review of the locking code has found a map that contains a list of channelid/transactionids, is a hangover from when there where different query and transaction operations.  As this is not the case now this is additional locking that isn't required.      Removing this, and just this to see if this makes any performance impact.   https://gerrit.hyperledger.org/r/c/fabric-chaincode-java/+/32987  FAB-16315  Unrequired lock  ></body> </Action>
<Action id="63054" issue="41817" author="mbwhite" type="comment" body="For the map that handles the mapping of the Channel.java (not to be confused with the Fabric Channel) to transactionId, move away from Synchronized blocks to ReentrantLocks.  https://www.baeldung.com/java-concurrent-locks " created="2019-08-19 13:09:33.0" updateauthor="mbwhite" updated="2019-08-19 13:09:33.0"/>
<Action id="63480" issue="41817" author="mbwhite" type="comment" body="Note - investigations are continuing on this; however conclusions have not yet been reached - please reach out to me for information if needed. " created="2019-09-02 08:28:05.0" updateauthor="mbwhite" updated="2019-09-02 08:28:05.0"/>
<Action id="63907" issue="41817" author="mbwhite" type="comment" created="2019-09-20 13:51:41.0" updateauthor="mbwhite" updated="2019-09-20 13:51:41.0"> <body><! CDATA Been a while working on this but it has involved reworking quite a few parts of the Java shim threading model.   https://gerrit.hyperledger.org/r/c/fabric-chaincode-java/+/33381  FAB-16315  Improved Load Ability  ></body> </Action>
<Action id="64991" issue="41817" author="mbwhite" type="comment" created="2019-10-25 08:28:15.0" updateauthor="mbwhite" updated="2019-10-25 08:28:15.0"> <body><! CDATA The change above has been pushed into the codebase... initial tests are reporting that this is stable and gives comparable performance to the node.js chaincode (this is tested using Caliper).  As Java is multi-threaded, a problem is that under load the code just overloaded the JVM with threads. These have now been restricted to a threadpool.  Initial defaults have been chosen that suite the usual 2-4 core systems. Of course any threadpool will need tunning and the thread pools are tunable. These will be documented under a separate issue shortly.        ></body> </Action>
<Action id="65028" issue="41817" author="heatherp" type="comment" body="Re-opening, as this hasn&apos;t been merged to master, so not closed" created="2019-10-28 11:30:35.0" updateauthor="heatherp" updated="2019-10-28 11:30:35.0"/>
<Action id="65070" issue="41817" author="rameshthoomu" type="comment" body=" ~mbwhite  I see this change  https://gerrit.hyperledger.org/r/c/fabric-chaincode-java/+/33381  has been merged in release-1.4 branch. As per the above comments, did you create a separate task for documentation and cherry-pick the same the change in master branch?" created="2019-10-29 12:00:59.0" updateauthor="rameshthoomu" updated="2019-10-29 12:00:59.0"/>
<Action id="65071" issue="41817" author="mbwhite" type="comment" body=" ~rameshthoomu  why Heather re-opened this issue to move to master" created="2019-10-29 12:07:55.0" updateauthor="mbwhite" updated="2019-10-29 12:07:55.0"/>
<Action id="65290" issue="41817" author="heatherp" type="comment" body="The master PR here:  https://github.com/hyperledger/fabric-chaincode-java/pull/10  has gone in, so closing this" created="2019-11-05 09:29:23.0" updateauthor="heatherp" updated="2019-11-05 09:29:23.0"/>
