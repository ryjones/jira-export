<Issue id="37002" key="FABCJ-27" number="27" project="11208" reporter="mbwhite" assignee="gennadyl" creator="mbwhite" type="10000" summary="Provide Annotations" priority="2" resolution="10000" status="6" created="2019-01-21 16:06:07.0" updated="2019-11-30 21:10:13.0" resolutiondate="2019-04-10 12:18:07.0" votes="0" watches="3" workflowId="56642"> <description><! CDATA As a developer of Java contracts, I want to have annotations to determine the Transaction Methods on my contract, and the default contract.   I also want the annotations to be able to specify the complex types that should be included in the contract metadata.  The documentation is being copied to this link in google docs - easier to format!   https://docs.google.com/document/d/1oz14UVpVTcO-Qet8saZFF72pBjx1XCcTaXiU3IZjtK8/edit?usp=sharing      *This is a complete list of annotations - some won't be required in Java or other type languages*  *@Info(<map>)*  Supplies information about the following contract such as license terms or author.  This takes as a parameter an object/map that has the key-value pairs as defined on the OpenAPI v3 Info object spec (see  https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#infoObject )     *@Transaction(<boolean>)*  Defines the following function to be a callable transaction function  Takes a boolean parameter; true indicates that this function is intended to be called with the 'submit' semantics, false indicates that this is intended to be called with the evaluate semantics. (Submit means submit to the orderer to be recorded on the ledger)  Default is true;  The value of this is intended as an indication that the function was written with certain assumptions     *@Returns*  Takes a string that is the name of the type that is being returned by this function  Required for non or weakly typed languages.     *@Object*  Defines the class that represents one of the complex types that can be returned or passed to the transaction functions   *@Property*  Defines a property of the class (identified by @Object) that should be passed within the object  *@Default*  Define the contract that is the default contract, and as such invoke of the transaction functions does not need to be qualified by the contract name  Node.js treats the first contract that is specified in the exports array; but this would have precedence      Note - these functions are intended for the contract-based developer, application and tooling to provide additionl information.   *@Instantiate / @Init*  Identifies the function that should be preferred to be called when a chaincode is 'Instantiated'  *@Upgrade*  Indentifies the function that should be preferred to be called when a chaincode is 'Upgraded'   ></description> </Issue>
