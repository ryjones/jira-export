<Action id="59244" issue="39229" author="harrisob@us.ibm.com" type="comment" created="2019-04-15 15:59:18.0" updateauthor="harrisob@us.ibm.com" updated="2019-04-15 15:59:18.0"> <body><! CDATA Would you provide a trace log. export HFC_LOGGING='{"debug":"console"}'  Are you saying that the listener was not stopped even though the end block was received ?  ></body> </Action>
<Action id="59245" issue="39229" author="harrisob@us.ibm.com" type="comment" created="2019-04-15 16:01:12.0" updateauthor="harrisob@us.ibm.com" updated="2019-04-15 16:01:12.0"> <body><! CDATA Yes you have found a bug with the registration if you set an end block and do not set the disconnect, you automatically get the disconnect after the event, this will be corrected.   ></body> </Action>
<Action id="59271" issue="39229" author="florianc" type="comment" body="Ok. Do you still need the trace log?" created="2019-04-16 07:04:16.0" updateauthor="florianc" updated="2019-04-16 07:04:16.0"/>
<Action id="59287" issue="39229" author="harrisob@us.ibm.com" type="comment" body="No, I think I see the problems, thanks" created="2019-04-16 18:43:39.0" updateauthor="harrisob@us.ibm.com" updated="2019-04-16 18:43:39.0"/>
<Action id="59557" issue="39229" author="florianc" type="comment" created="2019-04-29 06:56:40.0" updateauthor="florianc" updated="2019-04-29 06:56:40.0"> <body><! CDATA Hi again. I've been through this again and I have a question regarding the way this option works: Currently, if I set the ``disconnect`` option to true, the listener is disconnected when the very first event is seen, even with an ``endBlock`` set.  This is not really what a developer (at least me) would expect when setting ``disconnect`` and ``endBlock``.  As an example, if I want to get all event matching a name or regex on an interval of blocks, in the current state I will only get the very first one and not all of them.  The same applies for the ``unregister`` option. In the current state, if I set ``unregister`` to true with an ``endBlock``, I will only get the first event and not all the next ones.  Is this the expected behaviour?  ></body> </Action>
<Action id="59576" issue="39229" author="harrisob@us.ibm.com" type="comment" created="2019-04-29 16:13:58.0" updateauthor="harrisob@us.ibm.com" updated="2019-04-29 16:13:58.0"> <body><! CDATA Yes that is how it was designed to work ... the unregister and disconnect options when specified will occur after the event listener is triggered, when specified and the endBlock is also specified they will also control the action when the endBlock is seen and also control the action when an event is seen. I understand your confusion, I have to look at the code to see how it works also. These options were put in to help the applications, such that the application did not have to worry about doing the unregisters and/or disconnects if they wished to just see the one event. I tried to not add too many options, like maybe I should I add `unregister_on_getting_event` and 'unregister_when_endblock_seen` and so on.  I think for 2.0 I will remove all these confusing settings and have the applications take full control and not provide automatic and default behaviors.  thanks for feedback  ></body> </Action>
<Action id="59589" issue="39229" author="florianc" type="comment" created="2019-04-30 06:55:08.0" updateauthor="florianc" updated="2019-04-30 06:55:37.0"> <body><! CDATA Well, I think removing it completely is not the best solution, as it would have been a very nice "functionality" from my developer point of view.     Instead of removing it, here is the beginning of a possible solution:  Before going through, here is one assumption/expectation I consider true: When I specify an interval of block, the SDK should not consider I am looking for only one event, but for all the events within this range matching the given regex/name.  Considered as "interval":  oldest, newest  ,  x, newest  ,  oldest, y   Why: I don't think the SDK should "make assumption" on anything on behalf of the developer. If the developer asks the SDK to return events of a specific name within a range of blocks, the SDK should return all the matching elements, not only one, not only x of them. (Although this could be answered in another way, check at the end of this comment). The developer should handle by himself the results and filter them if required.  You keep the discover and unregister options, but you change a bit how it works depending on the endBlock and startBlock property.    ----    Case 1: * startBlock = undefined * endBlock = undefined * discover/unregister = undefined  => Basic behaviour, listen for all events from block 0 to newest block. discover/unregister set by default to false. Never stops by itself    ----    Case 2: * startBlock = x * endBlock = undefined * discover/unregister = undefined  => Same as current behaviour: listen for all events from block x to newest block. discover/unregister set by default to false. Never stops by itself    ----    Case 3: * startBlock = x || undefined * endBlock = y (with y != newest) * discover/unregister = undefined  => Listen for all events from block x to block y. Unregister set by default to true (Indeed, there is no point to keep listenning if we reached the end of the interval if this end is not the newest block). Disconnect set by default to false.    ----    I may have forgotten cases, but I think this demonstrate the basic idea of my proposition. Let me add that I of course am not completely familiar with the SDK, thus what I proposed may not be possible or follow the ideology of it. If so, just ignore this proposition ^^.    ----    Limiting the number of results  As said above, I think the SDK should not handle how many events matching the regex in the interval of blocks should be returned. The developer can handle it by himself. However, if you provide another option, let say, "limit", representing the maximum number of event that should be returned by the listener, it might make it easier for the developer as he won't have to handle this.  Indeed, here I fear my lack of experience may make my statement wrong, but asynchronicity makes it not really "hard", but a bit messy.    ----    I hope my ideas can help you in a way or another.  ></body> </Action>
