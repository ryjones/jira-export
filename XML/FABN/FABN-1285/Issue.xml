<Issue id="40802" key="FABN-1285" number="1285" project="10604" reporter="marinkovicvlado" creator="marinkovicvlado" type="10004" summary="Mutual TLS: Gateway sending wrong certificate" priority="3" resolution="10201" status="6" created="2019-06-26 12:55:04.0" updated="2020-12-01 15:50:48.0" resolutiondate="2020-12-01 14:26:44.0" votes="4" watches="8" workflowId="53758"> <description><! CDATA Mutual TLS is enabled on peers and orderer as follows:Â  {code:java} - name: CORE_PEER_TLS_ENABLED           value: "true"         - name: CORE_PEER_TLS_CERT_FILE           value: /shared/crypto-config/peerOrganizations/org1.example.com/peers/blockchain-org1peer1.org1.example.com/tls/server.crt         - name: CORE_PEER_TLS_KEY_FILE           value: /shared/crypto-config/peerOrganizations/org1.example.com/peers/blockchain-org1peer1.org1.example.com/tls/server.key         - name: CORE_PEER_TLS_ROOTCERT_FILE           value: /shared/crypto-config/peerOrganizations/org1.example.com/peers/blockchain-org1peer1.org1.example.com/tls/ca.crt         - name: CORE_PEER_TLS_CLIENTAUTHREQUIRED           value: "true"         - name: CORE_PEER_TLS_CLIENTROOTCAS_FILES           value: /shared/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls/ca.crt         - name: CORE_PEER_TLS_CLIENTCERT_FILE           value: /shared/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls/client.crt         - name: CORE_PEER_TLS_CLIENTKEY_FILE           value: /shared/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls/client.key {code} On an app side that uses 'fabric-sdk-node', following connection profile is set: {code:java} { "name": "bam-network", "version": "1.0.0", "client": { "organization": "Org1", "connection": { "timeout": { "peer": { "endorser": "300" }, "orderer": "300" } }, "credentialStore": { "path": "./local_fabric/tmp/hfc-kvs", "cryptoStore": { "path": "./local_fabric/tmp/hfc-cvs" }, "wallet": "wallet" }, "tlsCerts": { "systemCertPool": true, "client": { "key": { "path": "./local_fabric/certs/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls/client.key" }, "cert": { "path": "./local_fabric/certs/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls/client.crt" } } } }, "channels": { "channel1": { "orderers":   "blockchain-orderer1", "blockchain-orderer2", "blockchain-orderer3"  , "peers": { "blockchain-org1peer1": { "endorsingPeer": true, "chaincodeQuery": true, "ledgerQuery": true, "eventSource": true }, "blockchain-org1peer2": { "endorsingPeer": true, "chaincodeQuery": true, "ledgerQuery": true, "eventSource": true } } } }, "organizations": { "Org1": { "mspid": "Org1MSP", "peers":   "blockchain-org1peer1", "blockchain-org1peer2"  , "certificateAuthorities":   "blockchain-ca"  , "adminPrivateKey":   "./local_fabric/certs/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/keystore/key.pem"  , "signedCert":   "./local_fabric/certs/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/signcerts/Admin@org1.example.com-cert.pem"   } }, "orderers": { "blockchain-orderer1": { "url": "grpcs://192.168.99.130:31011", "grpcOptions": { "ssl-target-name-override": "blockchain-orderer1", "grpc-max-send-message-length": 4194304 }, "tlsCACerts": { "path": "./local_fabric/certs/crypto-config/ordererOrganizations/example.com/orderers/blockchain-orderer1.example.com/tls/ca.crt" } }, "blockchain-orderer2": { "url": "grpcs://192.168.99.130:31012", "grpcOptions": { "ssl-target-name-override": "blockchain-orderer2", "grpc-max-send-message-length": 4194304 }, "tlsCACerts": { "path": "./local_fabric/certs/crypto-config/ordererOrganizations/example.com/orderers/blockchain-orderer2.example.com/tls/ca.crt" } }, "blockchain-orderer3": { "url": "grpcs://192.168.99.130:31013", "grpcOptions": { "ssl-target-name-override": "blockchain-orderer3", "grpc-max-send-message-length": 4194304 }, "tlsCACerts": { "path": "./local_fabric/certs/crypto-config/ordererOrganizations/example.com/orderers/blockchain-orderer3.example.com/tls/ca.crt" } } }, "peers": { "blockchain-org1peer1": { "url": "grpcs://192.168.99.130:30110", "grpcOptions": { "ssl-target-name-override": "blockchain-org1peer1", "grpc.keepalive_time_ms": 600000 }, "tlsCACerts": { "path": "./local_fabric/certs/crypto-config/peerOrganizations/org1.example.com/peers/blockchain-org1peer1.org1.example.com/tls/ca.crt" } }, "blockchain-org1peer2": { "url": "grpcs://192.168.99.130:30210", "grpcOptions": { "ssl-target-name-override": "blockchain-org1peer2", "grpc.keepalive_time_ms": 600000 }, "tlsCACerts": { "path": "./local_fabric/certs/crypto-config/peerOrganizations/org1.example.com/peers/blockchain-org1peer2.org1.example.com/tls/ca.crt" } } }, "certificateAuthorities": { "blockchain-ca": { "url": "https://192.168.99.130:30054", "registrar": { "enrollmentID": "admin", "enrollmentSecret": "adminpw", "profile": "tls" }, "httpOptions": { "verify": false }, "tlsCACerts": { "path": "./local_fabric/certs/crypto-config/peerOrganizations/org1.example.com/ca/ca.org1.example.com-cert.pem", "client": { "key": { "path": "./local_fabric/certs/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls/client.key" }, "cert": { "path": "./local_fabric/certs/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls/client.crt" } } } } } }  {code} Error occurs during invocation of 'getNetwork' {code:java} const userIdentity = "user@org1.example.com"; const clientKey = fs.readFileSync(path.join(__dirname, 'local_fabric/certs/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls/client.key'));         const clientCert = fs.readFileSync(path.join(__dirname, 'local_fabric/certs/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls/client.crt'));    const client = Client.loadFromConfig(ccpJSON);         client.setTlsClientCertAndKey(Buffer.from(clientCert).toString(), Buffer.from(clientKey).toString());  // Create a new gateway for connecting to our peer node.         const gateway = await utils.connectTlsGateway(ccp, client, userIdentity, 'Admin', 'Org1', 'RegisterUserGateway', wallet);                // Get the network (channel) our contract is deployed to.         const network = await gateway.getNetwork(channelName);  {code} Â  {code:java} // utils.js  connectTlsGateway: async function (ccp, client, identityID, userName, orgName, gatewayName, wallet) {Â  Â   const gateway = new Gateway();Â  Â   const caName = ccp.getCertificatAuthoritiesForOrg(orgName) 0 ;Â  Â   const tlsIdentity = 'tlsId'; Â  Â  const tlsIdExists = await wallet.exists('tlsId');Â  Â   if (!tlsIdExists) {Â  Â  Â  Â   tlsIdentity = await utils.identitySetup(wallet, ccp, orgName, 'tlsId'); } Â  Â  const opts = {Â  Â  Â  Â   wallet: wallet, Â  Â  Â  Â  identity: identityID, Â  Â  Â  Â  discovery: {enabled: false, asLocalhost: false},Â  Â  Â  Â   clientTlsIdentity: tlsIdentity Â  Â  }; Â  Â  await gateway.connect(client, opts);Â  Â Â  Â   return gateway; }, identitySetup: async function (wallet, ccp, orgName, identityID) {  const org = ccp.getOrganization(orgName);  const orgMsp = org.mspid; const userCertPath = org.signedCert 0 ;  const userKeyPath = org.adminPrivateKey 0 ; const cert = fs.readFileSync(userCertPath);  const key = fs.readFileSync(userKeyPath);  await wallet.import(identityID, X509WalletMixin.createIdentity(orgMsp, cert, key));  return identityID; }{code} Peer fails to verify client's certificate, (peer error log):  Â  {code:java} ServerHandshake -> ERRO 11347 0m TLS handshake failed with error tls: failed to verify client's certificate: x509: certificate signed by unknown authority server=PeerServer remoteaddress=172.17.0.1:61561 {code} Â   I have checked the certificate content and it appears initOptions provide wrong clientCert '/msp/admincerts/Admin@org1...' instead of provided one in the client  !Capture.PNG!  Â Current documentation doesn't provide much info:  https://fabric-sdk-node.github.io/tutorial-mutual-tls.html   ></description> </Issue>
