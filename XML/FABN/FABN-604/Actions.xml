<Action id="31316" issue="19629" author="mastersingh24" type="comment" created="2017-09-30 19:46:07.0" updateauthor="mastersingh24" updated="2017-09-30 19:46:07.0"> <body><! CDATA Exactly what problem are you trying to solve here?  The SDK already supports using PKCS11 to communicate with local and remote HSMs (I've used it with network HSMs across the internet).  When we actually call sign to sign a transaction, it should be a blocking call as we can't proceed until we actually have the signature.   You are free to implement async / callback logic within your implementation, but from the caller's perspective, it makes sense for the call to be blocking IMHO.  I don't believe this is a bug.  ~jimthematrix@gmail.com  what do you think?  ></body> </Action>
<Action id="31317" issue="19629" author="ksachdeva" type="comment" created="2017-09-30 23:44:08.0" updateauthor="ksachdeva" updated="2017-09-30 23:44:08.0"> <body><! CDATA Hi Gari,  It depends on how the Fabirc SDK will be used.   +Scenario 1:+      Browser/Client  --->  Express App (uses Fabric Node SDK)  --->  HSM, Remote Signing Server   The express app uses the fabric SDK for BlockChain related operations but it will/could also have many other features/apis relevant to the business logic of the app/solution. The moment the express app would make the fabric node SDK sign call then all the other (relevant or non relevant functionality) will block for all the other clients connected to it.  This is the scenario with the problem.  +Scenario 2:+   Browser/Client  --->  Express App  -->  Another Express App (uses Fabric Node SDK)  --->  HSM, Remote Signing Server   In this scenario "Another Express App" would essentially host all Fabric related logic and would expose another set of API to be consumed by Express App. This is essentially the fabric-sdk-rest project that you guys are working on.  This is the scenario in which the blocking problem can be prevented.  +Scenario 3:+   Browser/Client  --->  Express App  -->  Another Express App (uses Fabric Node SDK)  --->  HSM, Remote Signing Server   This is the same topology as Scenario 2 but imagine that in this case "Another Express App" or your fabric-rest-sdk is being used to service "multiple" blockchain networks. While the rest-server will be servicing request for one blockchain network the others will block.     ##  Irrespective of the scenarios I have presented, it would always be a good design choice (for NodeJS specifically) to design the API (Interface) surface such that an asynchronous implementation can be done. IMHO, assuming that it would be synchronous for all the possible ways of usage of SDK is limiting. Even if the implementation is synchronous, the asynchronous API design does not come in the way and/or cause any performance issue rather it only enables other possibilities.                                 ></body> </Action>
<Action id="52572" issue="19629" author="sstone1" type="comment" body="This definitely looks like a bug; the Node.js SDK uses the blocking/sync APIs in the pkcs11js module, which means the event loop will be blocked from executing any other JavaScript code until the signing operations have completed. We need to move to using the non-blocking/async APIs in the pkcs11js module, but first we need to analyze the performance impact of this bug so we can verify the fix." created="2018-10-24 08:34:40.0" updateauthor="sstone1" updated="2018-10-24 08:34:40.0"/>
<Action id="54139" issue="19629" author="mastersingh24" type="comment" body="I&apos;m moving this to Feature" created="2018-12-01 20:47:47.0" updateauthor="mastersingh24" updated="2018-12-01 20:47:47.0"/>
<Action id="70843" issue="19629" author="lesleyannj" type="comment" body="Use of Async interfaces will be considered in Fabric Gateway feature." created="2020-12-01 14:10:43.0" updateauthor="lesleyannj" updated="2020-12-01 14:10:43.0"/>
