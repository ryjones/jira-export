<Issue id="44029" key="FABN-1451" number="1451" project="10604" reporter="jonathan-blood" assignee="andrew-coleman" creator="jonathan-blood" type="10004" summary="Underlying chaincode errors are not accessible when no valid peer responses are returned" priority="2" resolution="10000" status="6" created="2020-01-20 12:04:22.0" updated="2020-06-16 08:42:29.0" resolutiondate="2020-02-05 11:19:33.0" votes="0" watches="1" workflowId="57895"> <description><! CDATA In the case where there are no valid peer responses when callling `submitTransaction()`, the underlying chaincode errors are just included a single error message which is then thrown. This makes it impossible to access those underlying errors and handle them accordingly.  The following snippet in  https://github.com/hyperledger/fabric-sdk-node/blob/master/fabric-network/src/transaction.js  seems to be the culprit: {code:java} if (validResponses.length === 0) { const errorMessages = errorResponses.map((response) => util.format('peer=%s, status=%s, message=%s', response.peer.name, response.status, response.message)); const messages = Array.of(`No valid responses from any peers. ${errorResponses.length} peer error responses:`, ...errorMessages); const msg = messages.join('\n    '); logger.error('_validatePeerResponses: ' + msg); throw new Error(msg); } {code}  ></description> </Issue>
