<Issue id="41717" key="FABN-1342" number="1342" project="10604" reporter="sstone1" assignee="sstone1" creator="sstone1" type="10004" summary="Packaging large smart contracts is extremely slow using Node.js SDK" priority="3" resolution="10000" status="6" created="2019-08-09 12:49:17.0" updated="2019-11-29 14:21:52.0" resolutiondate="2019-11-29 14:21:52.0" votes="0" watches="2" workflowId="54751"> <description><! CDATA The stream-buffers package we use to create smart contract packages in the Node.js SDK is extremely inefficient. It allocates a buffer of size x, then allocates a new one and copies it over when that buffer is exceeded., with an increment of size y.   It is significantly faster to implement this by implementing a writable stream that stores all of the buffers that it gets passed, and then calling Buffer.concat() after the stream is done.   My testing shows that this brings the packaging time of a largish Java smart contract down from 235s to 4s, which is very close to the time the 'tar' command takes to do the same thing.  ></description> </Issue>
