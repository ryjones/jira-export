<Action id="61187" issue="38668" author="harrisob@us.ibm.com" type="comment" body="In the new NodeSDK 2.0 low-level I will be using the waitForReady to all GRPC service connections and will be adding a check connection and reconnect" created="2019-06-22 13:30:26.0" updateauthor="harrisob@us.ibm.com" updated="2019-06-22 13:30:26.0"/>
<Action id="62678" issue="38668" author="harrisob@us.ibm.com" type="comment" body="status: currently working on this as part of the refactoring of the low level Node SDK. The new low level SDK, which I am calling &quot;fabric-base&quot; for now, will have &quot;connect&quot;, and &quot;checkConnection&quot; on all endpoint classes. The connect will reset the connection and the checkConnection will indicate to the application if the connection is up or not, with the Event Service connection it will also check the stream as this is  two connection." created="2019-08-07 12:45:47.0" updateauthor="harrisob@us.ibm.com" updated="2019-08-07 12:45:47.0"/>
<Action id="62686" issue="38668" author="davidkhala" type="comment" created="2019-08-07 14:56:44.0" updateauthor="davidkhala" updated="2019-08-07 14:56:44.0"> <body><! CDATA Thanks for your update, Bret. Will that be an "disconnect" for each end-point also？     Beside, according to frequently feedback from developer community, error about duplicated disconnect attempt on channelEventHub "has been shut down" is confusing for developer, especially when they are not handling eventHub carefully.   I think we could tolerate duplicated disconnect attempt via turning current "has been shut down" into an warn/error log notice instead of a critical stuff to stop application  ></body> </Action>
<Action id="62738" issue="38668" author="harrisob@us.ibm.com" type="comment" created="2019-08-08 19:37:55.0" updateauthor="harrisob@us.ibm.com" updated="2019-08-08 19:37:55.0"> <body><! CDATA Yes, Peer, Orderer, and ChannelEventHub will all have a 'disconnect', in the case of ChannelEventHub, any currently registered event listeners will be notified (with an Error) that ChannelEventHub has been shutdown.   Would you rather that we did nothing on the event listeners ? Maybe the callback should receive a parameter that indicates that the ChannelEventHub has been shutdown ?  ></body> </Action>
<Action id="62780" issue="38668" author="davidkhala" type="comment" created="2019-08-10 14:21:10.0" updateauthor="davidkhala" updated="2019-08-10 14:21:10.0"> <body><! CDATA In my understanding, ChannelEventHub has 2 parameter for callback  Semantically the design is similar to  `on('data', ()=>{})` `on('error', ()=>{})` ideally we could add one more parameter for close event handler callback   then developer will be more clear.   But for realistic, we could have work around first in your suggested way that passing another parameter to onError callback, indicating this error is just indicating a normal close event.    Or just keep it for now is OK  ></body> </Action>
<Action id="62847" issue="38668" author="harrisob@us.ibm.com" type="comment" created="2019-08-13 16:43:04.0" updateauthor="harrisob@us.ibm.com" updated="2019-08-13 16:43:04.0"> <body><! CDATA being worked as part of the refactor of the low level NodeSDK. Will be included in the new package 'fabric-base'  https://gerrit.hyperledger.org/r/c/fabric-sdk-node/+/32889  ></body> </Action>
<Action id="62867" issue="38668" author="davidkhala" type="comment" body=" ~harrisob@us.ibm.com  Does it mean `fabric-client` will be deprecated in future? or exist in parallel as relatively high level sdk(but lower than `fabric-network`)" created="2019-08-14 05:32:42.0" updateauthor="davidkhala" updated="2019-08-14 05:32:42.0"/>
<Action id="62877" issue="38668" author="harrisob@us.ibm.com" type="comment" body="My plan is to leave fabric-client at v1.x with updates to support fabric v2, allowing users to migrate to the high level v2 and some may want to use the new fabric-base v2" created="2019-08-14 12:54:05.0" updateauthor="harrisob@us.ibm.com" updated="2019-08-14 12:54:05.0"/>
<Action id="64984" issue="38668" author="harrisob@us.ibm.com" type="comment" body="All `ServiceEndpoints` (the replacement for the old Remote.js class) have a `checkConection()` method to  allow the user see if the NodeSDK still has a connection to the endpoint." created="2019-10-24 18:10:32.0" updateauthor="harrisob@us.ibm.com" updated="2019-10-24 18:10:32.0"/>
