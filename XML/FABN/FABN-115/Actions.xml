<Action id="18646" issue="12464" author="smithbk" type="comment" created="2016-08-23 14:40:58.0" updateauthor="smithbk" updated="2016-08-23 14:40:58.0"> <body><! CDATA This is related to FAB-160.  I included the following standalone application sample in the app-developer.zip attached to FAB-160.  I think this is much simpler than a REST-based app and also will not mislead users to think that a simple REST-based app would be secure.   Here is the standalone app.  /* * A simple application utilizing the Node.js Client SDK to: * 1) Enroll a user * 2) User deploys chaincode * 3) User queries chaincode */ // "HFC" stands for "Hyperledger Fabric Client" var hfc = require('/opt/gopath/src/github.com/hyperledger/fabric/sdk/node');  var chain, user, chaincodeID;  // Create a chain object used to interact with the chain. // You can name it anything you want as it is only used by client. chain = hfc.newChain("mychain"); // Initialize the place to store sensitive private key information chain.setKeyValStore( hfc.newFileKeyValStore('/tmp/keyValStore') ); // Set the URL to membership services and to the peer chain.setMemberServicesUrl("grpc://localhost:7054"); chain.addPeer("grpc://localhost:7051"); // The following is required when the peer is started in dev mode // (i.e. with the '--peer-chaincodedev' option) chain.setDevMode(true);  // Begin by enrolling the user enroll();  // Enroll a user. function enroll() { console.log("enrolling user admin ..."); // Enroll "admin" which is preregistered in the membersrvc.yaml chain.enroll("admin", "Xurw3yU9zI0l", function(err, admin) { if (err) { console.log("ERROR: failed to register %s: %s",err); process.exit(1); } user = admin; deploy(); }); }  // Deploy chaincode function deploy() { console.log("deploying chaincode; please wait ..."); // Construct the deploy request var req = { chaincodeName: 'mycc', fcn: "init", args:  "a", initA, "b", initB  }; // Issue the deploy request and listen for events var tx = user.deploy(req); tx.on('complete', function(results) { // Deploy request completed successfully console.log("deploy complete; results: %j",results); // Set the testChaincodeID for subsequent tests chaincodeID = results.chaincodeID; query(); }); tx.on('error', function(err) { console.log("Failed to deploy chaincode: request=%j, error=%j",req,err); process.exit(1); });  }  // Query chaincode function query() { console.log("querying chaincode ..."); // Construct a query request  var req = { chaincodeID: chaincodeID, fcn: "query", args:  "a"  }; // Issue the query request and listen for events var tx = user.query(req); tx.on('complete', function (results) { console.log("query completed successfully; results=%j",results); process.exit(0); }); queryTx.on('error', function (err) { console.log("Failed to query chaincode: request=%j, error=%j",req,err); process.exit(1); }); }  ></body> </Action>
<Action id="18673" issue="12464" author="jimthematrix@gmail.com" type="comment" body=" ~harrisob@us.ibm.com  please make sure to get the doc updated to mention this new sample once completed coding and testing." created="2016-08-25 04:25:46.0" updateauthor="jimthematrix@gmail.com" updated="2016-08-25 04:25:46.0"/>
<Action id="18683" issue="12464" author="clayton sims" type="comment" created="2016-08-25 13:46:23.0" updateauthor="clayton sims" updated="2016-08-25 13:46:23.0"> <body><! CDATA Bret can we mark this complete, per yesterdays discussion?   ></body> </Action>
<Action id="18684" issue="12464" author="smithbk" type="comment" body="Don&apos;t think you should mark complete until it is committed" created="2016-08-25 14:48:46.0" updateauthor="smithbk" updated="2016-08-25 14:48:46.0"/>
