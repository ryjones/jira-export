<Action id="52630" issue="33944" author="bestbeforetoday" type="comment" created="2018-10-25 11:12:31.0" updateauthor="bestbeforetoday" updated="2018-10-25 11:34:55.0"> <body><! CDATA Having *setTransient()* on *Contract* might potentially cause some issues for the user, since the contract is analogous to the chaincode whereas the transient data is associated with a specific transaction invocation; it is effectively additional arguments to the transaction invocation. A specific case where this would be problematic is if the client is driving the API in response to receiving REST requests or other incoming messages that might arrive in parallel. Setting transient data on the contract would make a it non-threadsafe and the client would be forced to create a new Contract instance for every transaction invocation. This would be both cumbersome and does not seem to fit the abstraction the API is designed to provide.  There are any number of practical alternative designs that could be employed. To get a feel for how these would look from a client perspective, here are code snippets demonstrating client usage of some approaches that immediately sprang to mind: {quote}*// Using Contract.setTransient(). NOTE: only safe to use single-threaded* {{contract.setTransient(new Map( }} {{    'socialSecurityNumber', '1234567890' ,}} {{    'dateOfBirth', '1970-01-01' }} {{ ));}} {{const response = await contract.submitTransaction('move', 'a', 'b', '100');}} {{contract.setTransient(null);}} {quote}   {quote}*// Safe use of Contract.setTransient() for every transaction invocation* {{const contract = network.getContract(chaincodeId);}} {{contract.setTransient(new Map( }} {{     'socialSecurityNumber', '1234567890' ,}} {{     'dateOfBirth', '1970-01-01' }} {{ ));}} {{const response = await contract.submitTransaction('move', 'a', 'b', '100');}} {quote}   {quote}{{*// Overload first parameter of submitTransaction()*}} {{const context = {}} {{    name: 'move',}} {{    transient: new Map( }} {{         'socialSecurityNumber', '1234567890' ,}} {{         'dateOfBirth', '1970-01-01' }} {{     )}} {{};}} {{const response = await contract.subitTransactionContext(context, 'a', 'b', '100');}} {quote}   {quote}{{*// Variant of submitTransaction() but with everything in the "context"*}} {{const context = {}} {{    name: 'move',}} {{    transient: new Map(  }} {{         'socialSecurityNumber', '1234567890' ,}} {{         'dateOfBirth', '1970-01-01' }} {{     ),}} {{    arguments:   'a', 'b', '100'  }} {{};}} {{const response = await contract.subitTransactionContext(context);}} {quote}   {quote}{{*// Additional Transaction abstraction for advanced case alongside existing Contract.submitTransaction()*}} {{const transaction = contract.createTransaction('move');}} {{transaction.setTransient(new Map( }}  {{    'socialSecurityNumber', '1234567890' ,}} {{      'dateOfBirth', '1970-01-01' }} {{ ));}} {{const response = await transaction.submit('a', 'b', '100');}} {quote}   {quote}{{*// Variant of Transaction abstraction with everything as setters*}} {{const transaction = contract.createTransaction('move');}} {{transaction.setTransient(new Map( }} {{     'socialSecurityNumber', '1234567890' ,}}  {{     'dateOfBirth', '1970-01-01' }} {{ ));}} {{transaction.setArguments('a', 'b', '100');}} {{const response = await transaction.submit();}} {quote}    ></body> </Action>
<Action id="57855" issue="33944" author="rohitkhatri" type="comment" created="2019-03-05 05:58:47.0" updateauthor="rohitkhatri" updated="2019-03-05 05:58:47.0"> <body><! CDATA Hey  ~bestbeforetoday ,  I'm trying to pass transient data in `submitTransaction` function of contract class, is there a way to do that or It's not part of the high level node sdk yet?  Thanks.  ></body> </Action>
<Action id="57857" issue="33944" author="bestbeforetoday" type="comment" created="2019-03-05 08:57:42.0" updateauthor="bestbeforetoday" updated="2019-03-05 08:57:42.0"> <body><! CDATA  ~rohitkhatri  It is implemented in the high-level API from 1.4 onwards: *  https://fabric-sdk-node.github.io/release-1.4/tutorial-private-data.html  *  https://fabric-sdk-node.github.io/release-1.4/module-fabric-network.Transaction.html#setTransient__anchor    You want something like: {code:javascript} const transientMap = { price: Buffer.from('42'); }; const result = contract.createTransaction() .setTransient(transientMap) .evaluate(...);{code}  ></body> </Action>
<Action id="57861" issue="33944" author="rohitkhatri" type="comment" body="It worked, Thank you so much for your help  ~bestbeforetoday " created="2019-03-05 09:23:04.0" updateauthor="rohitkhatri" updated="2019-03-05 09:23:04.0"/>
