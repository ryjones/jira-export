<Issue id="44349" key="FABN-1492" number="1492" project="10604" reporter="bestbeforetoday" assignee="bestbeforetoday" creator="bestbeforetoday" type="10001" summary="Updated realtime contract listening API" priority="3" resolution="10000" status="6" created="2020-02-14 12:34:43.0" updated="2020-03-11 15:36:59.0" resolutiondate="2020-03-11 15:36:59.0" votes="0" watches="1" workflowId="58255" archived="N"> <description><! CDATA Updated API for v2.0, in line with the Java SDK behaviour: * Contract.addContractListener() * Contract.removeContractListener()  This should provide ordering and deduplication of events, so listeners receive each contract event only once and in order. This should be achievable by using the new EventService to listen to a single peer at a time but with failover to other peers, resuming at the next expected block number. It may be easier to build this on top of the block listening implementation rather than the low-level chaincode event listener.  Implementation should be in TypeScript and follow the pattern of the updated commit listener implementation.  Should include: * Unit test * Scenario tests * Documentation  Does *not* include: * Replay * Checkpointing  ></description> </Issue>
