<Issue id="31008" key="FABN-538" number="538" project="10604" reporter="mariwade" creator="mariwade" type="10001" summary="The javascript SDK errors are strings that must be parsed." priority="3" resolution="10001" status="6" created="2018-06-12 15:49:59.0" updated="2019-10-29 16:35:06.0" resolutiondate="2019-10-29 16:35:06.0" votes="0" watches="2" workflowId="44848"> <description><! CDATA Related to https://jira.hyperledger.org/browse/FAB-6457.  Errors returned from the SDK are strings.   The applications that are using the sdk must parse the strings to understand the type of errors being returned.   For example when the channel can not initialize due to an orderer down or unavailable, an error is thrown with a message 'SERVICE_UNAVAILABLE'.  When a peer is not available, an error is thrown with the message '14 UNAVAILABLE: Connect Failed'.  Some mechanism, such as custom errors with codes that can be used by applications to determine what type of error is being thrown by the SDKS is needed for applications to handle these errors.     Here is a sample code that is being used by the (similar coding to find chaincode error) {quote}findIfErrorMessageIsDueToNodeUnavailable(msg:string):boolean \{ let isNodeUnavailable:boolean=false; constn=msg.search('14 UNAVAILABLE: Connect Failed'); if (n>0) \{ logger.debug(`UserClient findIfErrorMessageIsDueToNodeUnavailable error message includes \"14 UNAVAILABLE: Connect Failed\" at location $\{n}`); isNodeUnavailable=true; } constn2=msg.search('SERVICE_UNAVAILABLE'); if (n2>0) \{ logger.debug(`UserClient findIfErrorMessageIsDueToNodeUnavailable error message includes \"SERVICE_UNAVAILABLE\" at location $\{n2}`); isNodeUnavailable=true; } return isNodeUnavailable; } {quote}   Our application currently, based on the string parsing, then creates custom error types (ErrorChaincode, ErrorClientCommit, ErrorClientInvoke) with a code, message, type.  ></description> </Issue>
