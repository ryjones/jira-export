<Issue id="45559" key="FABN-1592" number="1592" project="10604" reporter="JIRAUSER20196" assignee="andrew-coleman" creator="JIRAUSER20196" type="10004" summary="Every eventHandlerOptions strategy is not waiting for commit to ledger" priority="3" resolution="10203" status="6" created="2020-07-06 10:43:02.0" updated="2020-07-07 15:55:10.0" resolutiondate="2020-07-07 15:55:10.0" votes="0" watches="2" workflowId="59461" archived="N"> <description><! CDATA I invoke two functions, one immediately after another, from chaincode with fabric sdk node.  First: create transaction from one company to second company.  Second: compute balance for first company.  I need to wait for first to be committed to ledger before running second so balance is calculated properly.  I found  fabric-network: How to wait for transactions to be committed to the ledger|https://hyperledger.github.io/fabric-sdk-node/master/tutorial-transaction-commit-events.html  and added this configuration to my gateway connection options:  {{eventHandlerOptions: {}}  {{strategy: DefaultEventHandlerStrategies.NETWORK_SCOPE_ALLFORTX,}} {{},}}  but it's still not making `contract.submitTransaction` wait for commit.  Tested all of the strategies: {{MSPID_SCOPE_ALLFORTX}}, {{MSPID_SCOPE_ANYFORTX}}, {{NETWORK_SCOPE_ALLFORTX}} and {{NETWORK_SCOPE_ANYFORTX}}. They all behave as if `{{null}}` was configured. Non of them wait for commit to ledger.  When using peer binary I can get desired behavior with {{--waitForEvent}} (using {{peer chaincode invoke -}}-waitForEvent). Then invoke properly wait for commit before returning. If I don't use -{{-waitForEvent}} I have same results like using JS code with any strategy (so wrong balance).  As a workaround for now I'm using {{setTimeout}} (in JS code) for 5000ms before executing second function from chaincode.  ></description> </Issue>
