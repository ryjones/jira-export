<Issue id="33472" key="FABN-904" number="904" project="10604" reporter="nkl199" creator="nkl199" type="10002" summary="Provide validation strategy to fix performance hot spot in Channel.js" priority="3" resolution="10001" status="6" created="2018-09-04 15:56:05.0" updated="2019-10-29 16:04:03.0" resolutiondate="2019-10-29 16:04:03.0" votes="0" watches="1" workflowId="44760"> <description><! CDATA Following AppMetrics performance testing of fabric-client, there has been a hotspot identified in Channel.js `verifyProposalResponse`.  Inside the method, a validation stage is made against the proposal signatures via the `identity.verify()` method that results in a chain of elliptic cryptography invocations ... which are expensive.Â  This is done client side in order to prevent an error path in the orderer when this is discovered at a later time.  Removing the check provides *significant* performance improvements. Within local testing with Caliper, the following reproducible change was observed:  Based on: - 1k transactions - Driven at 75tps  Pre change - Achievable TPS = 45 - Maximum client invocation latency = 20.4s - Average invocation latency = 9.9s  Post change: - Achievable TPS: 74 - Maximum client invocation latency = 2s - Average invocation latency = 0.37s  Above is not a typo, there was an observed doubling in TPS and drop in latency to 10% of the original (pre-change) values.  It would be nice if the signature check could be made optional (default false) using a validation strategy that can be applied.  ></description> </Issue>
