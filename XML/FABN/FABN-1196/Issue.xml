<Issue id="39033" key="FABN-1196" number="1196" project="10604" reporter="denyeart" creator="denyeart" type="10001" summary="As an application client, I want to resubmit my transaction to ordering if a commit event has not been seen in a configurable number of seconds." priority="3" resolution="10001" status="6" created="2019-04-03 15:05:12.0" updated="2019-10-29 15:50:56.0" resolutiondate="2019-10-29 15:50:56.0" votes="0" watches="6" workflowId="51896"> <description><! CDATA After submitting an endorsed transaction to ordering, application clients need to wait for a commit event to ensure the transaction been validated and committed on the ledger.  This is particularly important with new ordering services (Raft and future BFT), since in crash or byzantine scenarios, the ordering service may not include the transaction in a block, even after replying to the submitting client with an acknowledgement. In these cases the application will not receive a commit event within the timeout window (or ever), and the application may want to retry the submission to ordering service. Typically the same endorsed transaction can be resubmitted, rather than re-gathering endorsements (if the tran ultimately gets invalidated due to MVCC, new endorsements are required regardless). After re-submission, the application client will want to wait for the timeout window again, in hopes that one of the submitted transactions get committed. In some cases the first transaction may have been dropped and the second submitted transaction gets ordered, validated, and committed; in other cases the first transaction may have simply been delayed and both transactions get committed (the one that gets ordered first will be validated, the latter will get invalidated).  We need to decide how much the application should control these retries, or whether the high level programming model should provide some handling. *For example is it possible for application to resubmit the same exact transaction again to the programming model, in which case they should listen for events with this txid, or must they submit a new transaction with a new txid, in which case they should listen for both txids?*  Regardless the options and guidance needs to be very clear in the programming model APIs and documentation.  Note that we added text to several doc topics already, for example in:   https://hyperledger-fabric.readthedocs.io/en/release-1.4/developapps/application.html#process-response   it says: {code:java} Note that the submitTransaction API includes a process for listening for transaction commits. Listening for commits is required because without it, you will not know whether your transaction has successfully been orderered, validated, and committed to the ledger. {code} These doc suggestions should be clarified once we decide whether to bake any support into high level programming model.  Actually I see a typo "orderered" should be "ordered" :)     ></description> </Issue>
