<Action id="48799" issue="32586" author="harrisob@us.ibm.com" type="comment" body=" ~denyeart  The real problem here is that if you wish to have another peer on the channel execute chaincode it must be installed on that peer that after installing the chaincode on the peer it does not match the instantiated chaincode running on the other peers that was installed by a different client. Code is the same, however during packaging the bytes are just not the same." created="2018-08-13 18:26:36.0" updateauthor="harrisob@us.ibm.com" updated="2018-08-13 18:26:36.0"/>
<Action id="48800" issue="32586" author="mariwade" type="comment" created="2018-08-13 18:43:31.0" updateauthor="mariwade" updated="2018-08-13 18:43:31.0"> <body><! CDATA Verified Peer version:  peer:  Version: 1.0.6  Go version: go1.7.5  OS/Arch: darwin/amd64  Chaincode:    Base Image Version: 0.3.2    Base Docker Namespace: hyperledger    Base Docker Label: org.hyperledger.fabric    Docker Namespace: hyperledger  ></body> </Action>
<Action id="48803" issue="32586" author="mariwade" type="comment" created="2018-08-13 19:49:39.0" updateauthor="mariwade" updated="2018-08-13 19:49:39.0"> <body><! CDATA We need to package the chaincode when a new version of the chaincode is created.  That way the same chaincode version can be installed across peers at any time without receiving a signature mis-match.     What I think is happening:  I am using the cli peer chaincode package command.  The package is being created just fine.      Then attempting to install that package. To install the package, the type is either golang or car.  If it is golang - the sdk will attempt to package the package  If it is car - the sdk will not attempt to package the package just install it.  The type is stored by the fabric sdk in the ccSpec (Client.js, line 710).  '''         let ccSpec = {             type: clientUtils.translateCCType(request.chaincodeType),             chaincode_id: {                 name: request.chaincodeId,                 path: request.chaincodePath,                 version: request.chaincodeVersion             }         }; '''   Then attempting to instantiate/upgrade the chaincode, is when I get the errors posted above.  The peer thinks the installed chaincode is a CAR file and can not decode it.    ></body> </Action>
<Action id="49082" issue="32586" author="mastersingh24" type="comment" created="2018-08-20 09:54:50.0" updateauthor="mastersingh24" updated="2018-08-20 09:54:50.0"> <body><! CDATA  ~MariWade  -  I'm not sure why you are using the `CAR` type here.  You are definitely taking the right approach of sharing the "package" rather than the actual source (as that unfortunately often results in fingerprint mismatches).  When using  Client.installChaincode|https://fabric-sdk-node.github.io/Client.html#installChaincode__anchor , the `request` parameter is a  ChaincodeInstallRequest|https://fabric-sdk-node.github.io/global.html#ChaincodeInstallRequest  object.  If you want to install the `package` rather than src, then you need to set the `chaincodePackage` property of the `ChaincodeInstallRequest` and you set `chaincodeType` parameter to `node`  ></body> </Action>
<Action id="49487" issue="32586" author="mariwade" type="comment" body=" ~mastersingh24  We tried the approach you listed.  The sdk only has to install type options &apos;golang&apos; or &apos;car&apos;.  When I used the approach listed here, the sdk then tried to package the package.  Basically the sdk does not support installing from a package." created="2018-08-28 13:50:39.0" updateauthor="mariwade" updated="2018-08-28 13:50:39.0"/>
<Action id="49596" issue="32586" author="mastersingh24" type="comment" created="2018-08-30 08:47:40.0" updateauthor="mastersingh24" updated="2018-08-30 08:47:40.0"> <body><! CDATA OK ... I actually figured out the problem here ... need to differentiate between code bytes and actually have the serialized package.  To the naked eye, the existing code seems to support installing existing packages, but it turns out that there's a bug where it actually wraps an existing package as code bytes as well.  I'd prefer not to backport this to 1.0, so will do 1.1.x, 1.2.x and master  ></body> </Action>
<Action id="49647" issue="32586" author="mastersingh24" type="comment" created="2018-08-30 19:03:03.0" updateauthor="mastersingh24" updated="2018-08-30 20:28:51.0"> <body><! CDATA  https://gerrit.hyperledger.org/r/26004    (release-1.1)  https://gerrit.hyperledger.org/r/26008   (release-1.2)  ></body> </Action>
<Action id="52402" issue="32586" author="kameshpalani" type="comment" created="2018-10-18 08:47:03.0" updateauthor="kameshpalani" updated="2018-10-18 08:47:56.0"> <body><! CDATA Hi Gari,      I have the package placed under path '/home/abc/artifacts/src/pkg/signeddcc.out'. I'm not getting whether to pass this path as  chaincodePackage value or pass the below buffer? Can you please kindly assist?     var fs = require('fs'); var chaincodePackageString = fs.readFileSync(chaincodePackagePath, "utf8"); chaincodePackageBuffer = Buffer.from(chaincodePackageString);  ></body> </Action>
