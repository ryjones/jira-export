<Issue id="12550" key="FABN-182" number="182" project="10604" reporter="jjjjibm" assignee="jimthematrix" creator="jjjjibm" type="10004" summary=" node-SDK  Provide constructor for input to chain.setMemberServices()" environment="Win7, vagrant, hfc 0.0.2" priority="1" resolution="10000" status="6" created="2016-08-26 03:41:36.0" updated="2018-07-19 00:53:08.0" resolutiondate="2017-02-08 15:30:17.0" votes="0" watches="3" workflowId="33913"> <description><! CDATA Here is the documentation generated for setMemberServices():    _setMemberServices  setMemberServices(memberServices: MemberServices): void  Defined in src/hfc.ts:504  Set the member service associated this chain. This allows the default implementation of member service to be overridden. Parameters memberServices: MemberServices Returns void  _ The documentation describes MemberServices as an Interface, but  (1) The documentation does not describe how to build a MemberServices, and (2) The node SDK does not provide a constructure for MemberServices (That is, you can't code  'new MemberServices' to create an input for chain.getMemberServices()  The only method I could devise to make an input to setMemberServices is to print one out:  console.log("Here is a MemberServices: ", chain.getMemberServices());  _Here is a MemberServices:  { ecaaClient: { '$channel': {} }, ecapClient: { '$channel': {} }, tcapClient: { '$channel': {} }, tlscapClient: { '$channel': {} }, cryptoPrimitives: { hashAlgorithm: 'SHA3', securityLevel: 256, suite: 'sha3-256', curveName: 'secp256r1', hashFunction: {  Function  create:  Function , update:  Function , hex:  Function , buffer:  Function , array:  Function  }, hashFunctionKeyDerivation: {  Function  hash:  Function  }, hashOutputSize: 32, ecdsaCurve: { curve:  Object , g: <EC Point x: 6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296 y: 4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5>, n: <BN: ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551>, hash:  Object  } } }_  and to copy it like this:   _// Make a modifiable copy of incoming member services  	var myMemberServices = { ecaaClient: initMemberServices.ecaaClient 									,ecapClient: initMemberServices.ecapClient 									,tcapClient: initMemberServices.tcapClient 									,tlscapClient: initMemberServices.tlscapClient 									,cryptoPrimitives: initMemberServices.cryptoPrimitives 									}; _  Then I can modify the securityLevel and hashAlgorithm:   // Modify my MemberServices so I can test chain.setMemberServices() 	myMemberServices.cryptoPrimitives.securityLevel = initMemberServices.getSecurityLevel() == 256 ? 384 : 256;  myMemberServices.cryptoPrimitives.hashAlgorithm = initMemberServices.getHashAlgorithm('SHA2') == 'SHA2' ? 'SHA3' : 'SHA2';   console.log("\nMyMemberServices with new security level and hash algorithm: ", myMemberServices);  _MyMemberServices with new security level and hash algorithm:  { ecaaClient: { '$channel': {} }, ecapClient: { '$channel': {} }, tcapClient: { '$channel': {} }, tlscapClient: { '$channel': {} }, cryptoPrimitives: { hashAlgorithm: 'SHA2', securityLevel: 384, suite: 'sha3-256', curveName: 'secp256r1', hashFunction: {  Function  create:  Function , update:  Function , hex:  Function , buffer:  Function , array:  Function  }, hashFunctionKeyDerivation: {  Function  hash:  Function  }, hashOutputSize: 32, ecdsaCurve: { curve:  Object , g: <EC Point x: 6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296 y: 4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5>, n: <BN: ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551>, hash:  Object  } } }_  Now that my copy is ready, I can invoke: chain.setMemberServices(myMemberServices); console.log("\nnew member services after chain.setMemberServices(myMemberServices):", chain.getMemberServices());  This ostensibly works.  Of course it does, because   (3) chain.setMemberServices() returns void and thus has no way of indicating an error ocurred when attempting to set MemberServices.  Here's the new chain.MemberServices:  _new member services after chain.setMemberServices(myMemberServices): { ecaaClient: { '$channel': {} }, ecapClient: { '$channel': {} }, tcapClient: { '$channel': {} }, tlscapClient: { '$channel': {} }, cryptoPrimitives: { *hashAlgorithm: 'SHA2', *    * securityLevel: 384, *     suite: 'sha3-256', curveName: 'secp256r1', hashFunction: {  Function  create:  Function , update:  Function , hex:  Function , buffer:  Function , array:  Function  }, hashFunctionKeyDerivation: {  Function  hash:  Function  }, hashOutputSize: 32, ecdsaCurve: { curve:  Object , g: <EC Point x: 6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296 y: 4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5>, n: <BN: ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551>, hash:  Object  } } }_  It looks OK.  Note the  securityLevel and hash Al Gore rhythm matches what is in myMemberServices.   And finally, for the pièce de résistance,let's fetch that new security level out of the MemberService that is now in the chain:  console.log("chain.getMemberServices().getSecurityLevel ", chain.getMemberServices().getSecurityLevel());  Here's the output:   _/opt/gopath/src/github.com/hyperledger/fabric/sdk/node/test/unit/chain-tests.js:738 n.getMemberServices().getSecurityLevel ", chain.getMemberServices().getSecurit ^ TypeError: undefined is not a function_  What's up with that?  Did I code that call wrong?  No, because when I comment out this line:  +//chain.setMemberServices(myMemberServices); +this line works: +console.log("chain.getMemberServices().getSecurityLevel ", chain.getMemberServices().getSecurityLevel());+  Here's the output: _chain.getMemberServices().getSecurityLevel  384 _ So the coded line is fine.  Uncommenting //chain.setMemberServices(myMemberServices); and trying again, the output is:  _/opt/gopath/src/github.com/hyperledger/fabric/sdk/node/test/unit/chain-tests.js:738 n.getMemberServices().getSecurityLevel ", chain.getMemberServices().getSecurit ^ TypeError: undefined is not a function_  So, it seems that  (4) chain.setMemberServices() works, but it breaks chain.getMemberServices().getSecurityLevel(). (5) it breaks chain.getMemberServices().getHashAlgorithm() the same way.  You may claim myMemberServices is defective in some way.  To that I say: (6) node-SDK makes it too hard to build myMemberServices.  See title of this issue.   There's another possible resolution of this issue.  Anya Derbakova discussed this issue.  the upshot of the discussion is,  (7) perhaps chain.setMemberServices() is not meant to be exposed?  Here is the chat:  +var initMemberServices = chain.getMemberServices();  // Make a modifiable copy of incoming member services  var c = copyOfMemberServices = { ecaaClient: initMemberServices.ecaaClient ,ecapClient: initMemberServices.ecapClient ,tcapClient: initMemberServices.tcapClient ,tlscapClient: initMemberServices.tlscapClient ,cryptoPrimitives: initMemberServices.cryptoPrimitives};   2:33    This is pretty much the only way to build MemberServices if you want to use the setMemberServices(), right?   2:33    And since stuff like this occurs:   2:34    temp =  384 /opt/gopath/src/github.com/hyperledger/fabric/sdk/node/test/unit/chain-tests.js:721 copyOfMemberServices.setSecurityLevel(temp); ^ TypeError: undefined is not a function   2:34    You pretty much have to do this:   2:35    copyOfMemberServices.cryptoPrimitives.SecurityLevel = 384;   2:35    Right?   2:36    (Same question sent to Keith)  anya  3:06 PM    i belive so...   3:06    but i honestly have not tried that   3:06    not sure why you would need this  jcwolf  3:07 PM    Well, how to build input for chain.setMemberServices()?   3:07    etMemberServices  setMemberServices(memberServices: MemberServices): void  Defined in src/hfc.ts:504  Set the member service associated this chain. This allows the default implementation of member service to be overridden.  anya  3:07 PM    what do you mean by build input?  jcwolf  3:08 PM    Well, the parameter is an object of type MemberServices   3:08    So I would need to create a MemberServices object so I could call this method  anya  3:08 PM    chain.setMemberServicesUrl("grpc://localhost:7054");   3:08    ?   3:09    ```    /** * Set the member services URL * @param {string} url Member services URL of the form: "grpc://host:port" or "grpcs://host:port" */ setMemberServicesUrl(url:string, pem?:string):void { this.setMemberServices(newMemberServices(url,pem)); } ```   3:09    it creates it for you  jcwolf  3:09 PM    That's a different method.   Should setMemberServices() be exposed?   3:11    What is supposed to be at grpc://localhost:7054?  anya  3:11 PM    the member services endpoint   3:12    ```    /** * Set the member service associated this chain.  This allows the default implementation of member service to be overridden. */ setMemberServices(memberServices:MemberServices):void { this.memberServices = memberServices; if (memberServices instanceof MemberServicesImpl) { this.cryptoPrimitives = (<MemberServicesImpl>memberServices).getCrypto(); } }; ```   3:12    this may already be exposed   3:12    i believe it is   3:12    but we don’t really use it that way it seems   3:12    we just set the endpoint and that’s it  jcwolf  3:13 PM    Sorry for being thick, but what exactly is the member services endpoint?  anya  3:13 PM    the URL at which the member services process is listening   3:13    it may be running locally, but it may not be   3:13    in this example it is: `chain.setMemberServicesUrl("grpc://localhost:7054”);`   3:14    the member services is running locally and listening on port 7054   3:14    so all you have to do is point it to this URL that’s it  jcwolf  3:14 PM    What all this is leading up to, is that the SDK has exposed a method setMemberServices() but not enough information to build the input to setMemberServices()  anya  3:15 PM    `setMemberServicesURL` calls it under the covers   3:15    so there is no need for you to create the object yourself  jcwolf  3:15 PM    So I'm creating that structure you see so as to add it to the unit test   3:15    If it's exposed, it has to be tested because a customer will see it   3:15    Or maybe it should be a private function  anya  3:16 PM    i’m not sure Janet   3:16    i’m sorry   3:16    this is a bit too tedious for me to answer it looks like (edited)   3:16    i’ve used it the way i’m telling you  jcwolf  3:16 PM    I'll write up an issue and you guys can discuss it :slightly_smiling_face:  anya  3:16 PM    yes, i’ve got over “highest” priority issues to work   3:16    so unfortunately that is kinda off my radar at this point   3:17    we need more people to fix these things   3:17    and we just don’t have them   3:17    so please understand my frustration here  jcwolf  3:17 PM    I understand.  I just wanted to run it by you or Keith before writing up an issue in case I was missing something obvious  anya  3:18 PM    you are right the `setMemberServices` seems to be exposed, to my best knowledge   3:18    and do people use it directly? it doesn’t seem to me that they do, but they certainly could as it is exposed.  jcwolf  3:19 PM    Yeah, maybe it's not strictly necessary, but I dno't have enough of a feel to say whether or not it is needed by our users  anya  3:19 PM    right, i see your point   3:19    at this time, it doesn’t seem like… but in the future, maybe  jcwolf  3:19 PM    It would seem perhaps the intent is suppose you don't like what is at grpc://localhost:7054, you could override one of the values   3:20    Thanks for your input.  I'll write up the issue   3:20    I think I have enough to describe the issue  anya  3:21 PM    ```    constructor(url:string,pem:string) { let ep = new Endpoint(url,pem); var options = { 'grpc.ssl_target_name_override' : 'tlsca', 'grpc.default_authority': 'tlsca' }; this.ecaaClient = new _caProto.ECAA(ep.addr, ep.creds, options); this.ecapClient = new _caProto.ECAP(ep.addr, ep.creds, options); this.tcapClient = new _caProto.TCAP(ep.addr, ep.creds, options); this.tlscapClient = new _caProto.TLSCAP(ep.addr, ep.creds, options); this.cryptoPrimitives = new crypto.Crypto(DEFAULT_HASH_ALGORITHM, DEFAULT_SECURITY_LEVEL); } ```  new messages  3:21    this is the constructor for the membership services object   3:21    it basically sets all of the required things for you   3:21    so you don’t really “override” anything   3:21    the only thing you really need to pass is that url and pem (if you’re doing it with tls)   3:21    so at this time, i would say we don’t really need to expose that method   3:21    but that’s just my take on it+  ></description> </Issue>
