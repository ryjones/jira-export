<Issue id="15120" key="FABN-386" number="386" project="10604" reporter="jjjjibm" assignee="jimthematrix" creator="jjjjibm" type="10004" summary=" node-SDK  http://&lt;ip:port&gt;/docs/gen/Client.html -- continued " priority="3" resolution="10000" status="6" created="2017-02-28 22:02:25.0" updated="2018-07-19 00:53:53.0" resolutiondate="2017-04-05 18:39:43.0" votes="0" watches="1" workflowId="34117"> <environment><! CDATA fabric-sdk-node commit d3fcbe2299c840dfd7886076b009b88eb25a7dd8 fabric commit a0d032bc5c4853b43972163f502a03ee7770c1d5 fabric-ca commit c9fb04e0f795589485915883fcbca3ae2fc0aaad  Ubuntu is running on a vlaunch VM   ></environment> <description><! CDATA In the generated documentation for class Client, a few errors appear.  (1) getChain(name) If an application is not able to look up the chain information from storage, it may call  ==>  If an application cannot obtain chain information from storage, it can call   (2) getUserContext(name)  {color:#d04437}As explained above{color}, the client instance can have an optional state store.   It's not really explained above, although there are references to a 'state store'.   The explanation of 'state store' is scattered throughout the methods in this class.  A good place to explain the state store and why you may or may not want one might be near this sentence :   Each Client instance can maintain several Chain instances representing channels and the associated private ledgers.  Or, each method that interacts with the state store can repeat an explanation of the state store.  (3) getUserContext(name) Is now: {color:#205081}As explained above, the client instance can have an optional state store. The SDK saves enrolled users in the storage which can be accessed by authorized users of the application (authentication is done by the application outside of the SDK). {color}{color:#d04437}This function attempts to load the user by name from the local storage (via the KeyValueStore interface). The loaded user object must represent an enrolled user with a valid enrollment certificate signed by a trusted CA (such as the CA server). {color} Should be: {color:#d04437}This function attempts to load the user by name from the local storage (via the KeyValueStore interface). The loaded user object must represent an enrolled user with a valid enrollment certificate signed by a trusted CA (such as the CA server). {color} {color:#205081}The client instance can have an optional state store. The SDK saves enrolled users in the storage which can be accessed by authorized users of the application (authentication is done by the application outside of the SDK). {color}  because the explanation of what the call does is obscured by the explanation of the state store.  Reversing the explanations should clarify it.  (3) getUserContext(name)  ...the client instance can have an optional state store.  This somewhat  contradicts the setStateStore() explanation which implies the SDK should use a state store.  In what sense is it optional?    (3) getUserContext() ... This function attempts to load the user by name from the local storage (via the KeyValueStore interface).  vs Optional. If not specified, will only return the in-memory user context object,  or null if not found in memory. If "name" is specified, will also attempt to load it from the state store if search in memory failed. vs Returns:  The user object corresponding to the name, or null if  ...  The three  explanations are mildly contradictory.   If the name parameter description is to be believed, getUserContext(<no parm>) retrieves the local user context object but getUserContext(name) returns a user object.   (4) loadUserFromStateStore() ==> loadUserFromStateStore(name)   according to the code  (5) loadUserFromStateStore() Restore the state of this member from the key value store As described, 'this member' would seem to be the client that calls this method, which is confusing.   (6) queryChainInfo(name, peers) .... if the target Peer(s) does not know anything about the chain. ===> ...if none of the peers queried returns information about the chain.  (7) setStateStore(keyValueStore)  (a)     The enrollment materials for Users that have appeared in the instances of the application.  This is a description, but not of what setStateStore() does.  Did you mean: Set the optional state store.  The state store contains enrollment materials ...  (b) appeared in the instances of the application. What exactly are 'instances of the application'?  Do you  mean Users referenced by the application?  User objects instantiated by the application?  Is it the case that the state store does not contain user materials unless the application has called saveUserToStateStore()?  If there's another way to populate the state store, it should be explained somewhere on this page.    (8) The SDK {color:#205081}should have {color}a built-in key value store file-based implementation to allow easy setup during development.  ==> The SDK{color:#205081} has {color}a built-in key value store file-based implementation to allow easy setup during development.   (If I recall correctly, even though it is built in, your application needs to call setStateStore() to enable its use.  This would be a good time to mention that.   E.G., To enable the built-in state store, ....  (9) setUserContext(user, skipPersistence) Sets an instance of the User class as the security context of *self* client instance. ==> Sets an instance of the User class as the security context of *this* client instance.   How to recreate: 1.Clone fabric-sdk-node 2.Gulp doc to generate doc 3.python -m SimpleHTTPServer & 4.Use a browser to navigate to <your ip>:8000/docs/gen 5.Select Client from the Classes pull down menu.   Find the errors on the displayed page.     ></description> </Issue>
