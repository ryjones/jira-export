<Issue id="36985" key="FABN-1109" number="1109" project="10604" reporter="vishal3152" assignee="zhaochy" creator="vishal3152" type="10004" summary="eventhub.registerBlockEvent API option startBlock does not work with offline signing" priority="3" resolution="10001" status="6" created="2019-01-21 12:18:08.0" updated="2020-12-01 15:49:52.0" resolutiondate="2020-12-01 14:15:36.0" votes="0" watches="3" workflowId="48552"> <description><! CDATA I am using a  remote signing|https://fabric-sdk-node.github.io/release-1.4/tutorial-sign-transaction-offline.html  service to sign a transaction proposal.  I use the same service to generate an {{unsigned eventhub registration.}}  When I connect to event hub, it always reads the latest block, not the offset that I have provided under 'startBlock'.  Here is the code.    const startBlockListener = async function () { try { const client =await helper.getFabricClient() let channelName = config.get('channelName') const channel = client.getChannel(channelName)  const certPem =await readFile(path.join(__dirname, '../../kv-store/userCert.pem'), 'utf8') const mspId = client.getMspid()  let startBlock   const eventhub = channel.getChannelEventHubsForOrg() 0  console.log(eventhub) const unsignedEvent = eventhub.generateUnsignedRegistration({ certificate: certPem, mspId })   //call remote signer service  const signedProposal =await signer.signProposal(unsignedEvent) const signedEvent = { signature: signedProposal.signature, payload: signedProposal.proposal_bytes } logger.info('Starting block listener. Start block: %s', startBlock)  eventhub.registerBlockEvent((block) => { logger.info('Successfully received the block event: ' + block.number) logger.debug(block) //processBlock(block) }, (error) => { logger.error('Failed to receive the block event ::' + error) }, { startBlock: 2 } ) eventhub.connect(\{signedEvent}) } catch (err) { logger.error(err) } }  ></description> </Issue>
