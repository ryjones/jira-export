<Action id="52880" issue="35037" author="bh4rtp" type="comment" body="Search a107718e8d8c6287bac5fbc78d2d33b1bab90fac77830fd452df4f3e43baedbf in peer.log can get the message of `ProcessProposal -&gt; ERRO 607f  registerch  805147b5  simulateProposal() resulted in chaincode name:&quot;lscc&quot; response status 500 for txid: a107718e8d8c6287bac5fbc78d2d33b1bab90fac77830fd452df4f3e43baedbf`" created="2018-11-01 12:28:55.0" updateauthor="bh4rtp" updated="2018-11-01 12:28:55.0"/>
<Action id="52885" issue="35037" author="denyeart" type="comment" created="2018-11-01 13:22:43.0" updateauthor="denyeart" updated="2018-11-01 13:22:43.0"> <body><! CDATA  ~bh4rtp  It looks like the client app doesn't pull out and print the error message in the case of status of 500 coming back. Have you looked into printing the response message? For the data structure see:  https://github.com/hyperledger/fabric/blob/release-1.3/protos/peer/proposal_response.proto#L60-L64   Is this sample code from balance transfer?  If so that logic needs to get added to all the samples.  FYI  ~harrisob@us.ibm.com   ></body> </Action>
<Action id="52889" issue="35037" author="bh4rtp" type="comment" body=" ~denyeart  Yes, i am using sample code from balance transfer. let me check the code as you mentioned." created="2018-11-01 13:48:15.0" updateauthor="bh4rtp" updated="2018-11-01 13:48:15.0"/>
<Action id="52892" issue="35037" author="denyeart" type="comment" created="2018-11-01 13:51:51.0" updateauthor="denyeart" updated="2018-11-01 13:51:51.0"> <body><! CDATA  ~muralisr  If a chaincode returns in error with status of 500, peer only logs the 500 and not the message, like this:  2018-11-01 20:14:44.245 CST  endorser  ProcessProposal -> ERRO 7262  registerch  a107718e  simulateProposal() resulted in chaincode name:"lscc" response status 500 for txid: a107718e8d8c6287bac5fbc78d2d33b1bab90fac77830fd452df4f3e43baedbf  I assume this was done by design, to keep any chaincode application messages private and out of the peer logs.  Chaincode can do their own logging as desired.  But for the system chaincodes like LSCC, I assume we should print the "message" to the peer logs in addition to the 500 "status", right?  ></body> </Action>
<Action id="52895" issue="35037" author="bh4rtp" type="comment" created="2018-11-01 14:09:13.0" updateauthor="bh4rtp" updated="2018-11-02 06:01:43.0"> <body><! CDATA  ~denyeart  Here is the message for:  {code:javascript} logger.error('instantiate proposal was bad: response - %j', proposalResponses) {code}    2018-11-01 22:06:38.760   ERROR  instantiate-chaincode - instantiate proposal was bad: response -  {code:json}  {"status":500,"payload": {"type":"Buffer","data":  },"isProposalResponse":true},{"status":500,"payload": {"type":"Buffer","data":  },"isProposalResponse":true}  {code}   It seems to be empty.  ></body> </Action>
<Action id="52931" issue="35037" author="bh4rtp" type="comment" body="My fabric network has 5 channels and 5 chaincodes installed with vendor from github.com/golang/protobuf and collections_config." created="2018-11-02 00:18:44.0" updateauthor="bh4rtp" updated="2018-11-02 01:51:02.0"/>
<Action id="52958" issue="35037" author="bh4rtp" type="comment" created="2018-11-02 11:57:05.0" updateauthor="bh4rtp" updated="2018-11-02 11:57:05.0"> <body><! CDATA  ~denyeart  I found the reason.  the chaincodeType argument was passed as init, i.e. fcn. however the error message is not returned to client. that is the problem. So this remains a bug that can be fixed by returning the error message to client.  ></body> </Action>
<Action id="53008" issue="35037" author="muralisr" type="comment" created="2018-11-04 14:43:03.0" updateauthor="muralisr" updated="2018-11-04 15:01:28.0"> <body><! CDATA As far as I could tell, if the chaincodeType is invalid at the time of instantiation, it should fail at this point in LSCC https://github.com/hyperledger/fabric/blob/release-1.3/core/scc/lscc/lscc.go#L866   ~bh4rtp  As far as I can tell this particular error message should be available from the returned Response.Message in the SDK as well but we don't see it in  {code:java}  {"status":500,"payload": {"type":"Buffer","data":  },"isProposalResponse":true},{"status":500,"payload": {"type":"Buffer","data":  },"isProposalResponse":true}  {code}  So this part needs investigation.  Regardless, we should add the error message to the error log {code:java} simulateProposal() resulted in chaincode name:"lscc" response status 500 for txid:  {code} from https://github.com/hyperledger/fabric/blob/release-1.3/core/endorser/endorser.go#L462   ~denyeart  If sounds reasonable, assign it to me please.    ></body> </Action>
<Action id="53014" issue="35037" author="denyeart" type="comment" body=" ~muralisr  I thought you intentionally did not log the underlying chaincode execution error for privacy reasons, to keep chaincode messages out of the peer log. But if this was simply an oversight, then yes the chaincode error should be logged at lines 462 and 493. The lack of an underlying error message at this point has caused a lot of serviceability pain. What was the design intent?" created="2018-11-05 11:46:45.0" updateauthor="denyeart" updated="2018-11-05 11:46:45.0"/>
<Action id="53027" issue="35037" author="muralisr" type="comment" created="2018-11-05 14:57:16.0" updateauthor="muralisr" updated="2018-11-05 14:57:16.0"> <body><! CDATA  ~denyeart  that is correct and that was the original intent. I was just thinking of this "lscc" case... on second thoughts perhaps it is better to log the error in the lscc itself.  (Although, we should first explore where the error is generated in the LSCC and why Response.Message is empty.)  ></body> </Action>
<Action id="53616" issue="35037" author="muralisr" type="comment" created="2018-11-19 19:00:02.0" updateauthor="muralisr" updated="2018-11-19 19:05:38.0"> <body><! CDATA  ~bh4rtp  When forcing a bad chaincode type (used "UNDEFINED") using CLI,  I see this response with latest master  {code:java} Error: could not assemble transaction, err proposal response was not successful, error code 500, msg Unknown chaincodeType: UNDEFINED {code}  This implies the returned Response has  {code:java} Response.Status=500, Response.Message="Unknown chaincodeType: UNDEFINED" {code}  Given SDK should get back the same gRPC response object, you should see this error there as well. Can you try with  v1.3.0 ?  ( ~denyeart )  ></body> </Action>
<Action id="53673" issue="35037" author="bh4rtp" type="comment" created="2018-11-21 06:33:36.0" updateauthor="bh4rtp" updated="2018-11-21 06:33:36.0"> <body><! CDATA  ~muralisr  I have just tested on v1.3.1, the get back response object is the same as I reported:   {code:javascript}  2018-11-21 14:10:48.939   ERROR  instantiate-chaincode - instantiate proposal was bad: response -  {"status":500,"payload":{"type":"Buffer","data":  },"isProposalResponse"true},{"status":500,"payload":{"type":"Buffer","data":  },"isProposalResponse":true}  {code}   As you mentioned, the latest master should be ok. I will switch to use master version.  ></body> </Action>
<Action id="53695" issue="35037" author="muralisr" type="comment" body=" ~bh4rtp   _As you mentioned, the latest master should be ok._ - assume that means you tested with master and it works for you ?" created="2018-11-21 16:51:17.0" updateauthor="muralisr" updated="2018-11-21 16:51:17.0"/>
<Action id="53699" issue="35037" author="bh4rtp" type="comment" body=" ~muralisr  i just tested using fabric and fabric-ca both the latest master, fabric-sdk-node v1.3 branch, the returned error message is the same as v1.3. did you test it using all master branch, including node sdk? if yes, maybe this issue is caused by implementation of node sdk v1.3. or the sdk application by balance-transfer is not correct. " created="2018-11-22 00:52:22.0" updateauthor="bh4rtp" updated="2018-11-22 00:52:22.0"/>
<Action id="53739" issue="35037" author="muralisr" type="comment" created="2018-11-22 17:26:23.0" updateauthor="muralisr" updated="2018-11-22 17:26:53.0"> <body><! CDATA  ~bh4rtp  I didn't test using SDK. My goal was to ensure fabric returns the error information in the Response object.   _maybe this issue is caused by implementation of node sdk v1.3. or the sdk application by balance-transfer is not correct._  I suspect you are right there... setting component to fabric-sdk-node.   ~denyeart  moving this to you for now to assign to the right owner ( ~harrisob@us.ibm.com  ?)  ></body> </Action>
<Action id="54178" issue="35037" author="denyeart" type="comment" body="I switched project to Node SDK so that SDK team can assess." created="2018-12-03 06:53:27.0" updateauthor="denyeart" updated="2018-12-03 06:53:27.0"/>
<Action id="54280" issue="35037" author="bestbeforetoday" type="comment" created="2018-12-04 15:12:56.0" updateauthor="bestbeforetoday" updated="2018-12-04 15:12:56.0"> <body><! CDATA I tried to reproduce this problem in my environment by implementing a chaincode init function that just does: {code:java} async Init(stub) { return shim.error('such fail'); }{code}    Looking at what appears back within the Node SDK code, I can see a proposal response received that looks like: {code:java} { version: 0,   timestamp: null,   response:     { status: 500,      message: 'transaction returned with failure: such fail',      payload: <Buffer > },   payload: <Buffer >,   endorsement: null }{code}    The Node SDK converts this into an Error object and returns it to the client code. The Error object includes the error message returned from the instantiate transaction in its message property: {code:java} { Error: transaction returned with failure: such fail     at <stackTraceRemoved> status: 500, payload: <Buffer >, isProposalResponse: true }{code}    So whatever *response.message* property value is returned in the (error) proposal response from the peer is included as the message in the Error returned at the client end.  The description of this bug says "sdk client just prints instantiate proposal was bad". This text does not exist anywhere within the Node SDK. This seems to be a message generated in the client application code (instantiate-chaincode.js) attached to this Jira.  Since the Node SDK is returning whatever error is included in the proposal response's *response.message* property, my guess is that either: # The peer is not returning the error information in the response message in some cases. # The reported scenario is different to the one I have used to reproduce locally, in which case I need more detailed information on how to reproduce the error scenario. # The problem is in the way the application client code is reporting error information.  ></body> </Action>
