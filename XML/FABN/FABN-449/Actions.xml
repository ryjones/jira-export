<Action id="33303" issue="22880" author="harrisob@us.ibm.com" type="comment" body="How is this problem different than 5476, seems it is the same issue" created="2017-10-27 14:35:31.0" updateauthor="harrisob@us.ibm.com" updated="2017-10-27 14:35:31.0"/>
<Action id="33319" issue="22880" author="davidkel" type="comment" created="2017-10-27 17:04:42.0" updateauthor="davidkel" updated="2017-10-27 17:08:28.0"> <body><! CDATA The difference is that the problem can be avoided in the node sdk for Go because the Go packager uses the GOPATH. However the Node packager uses what is specified in the chaincode path directly so there is no way to ensure that composer can send the same chaincode path no matter where our chaincode is stored which we can do currently with Go. So composer doesn't have a problem now but when we move to the node.js runtime support then we will. I don't know if the other one will be fixed or just handled in the tooling, but I don't mind how it get's fixed so long as it does get fixed and we could come up with a way for the node sdk to locate the chaincode to deploy allowing for the path to be fixed as it seems to me the chaincodePath is a special value relevant to chaincode descriptions rather than a way for the node sdk to locate what needs to be packaged.  ></body> </Action>
<Action id="33360" issue="22880" author="davidkel" type="comment" created="2017-10-30 10:36:11.0" updateauthor="davidkel" updated="2017-10-30 10:36:11.0"> <body><! CDATA Jim checked the code and said that in 1.1 it doesn't look like the chaincode path is now used as part of the chaincode fingerprint.  I've finally been able to set up a multi-org environment using the composer node.js implementation and tried to work with different chaincode paths and have not had a problem. Thanks everyone in checking on this so quickly. I really appreciate it and will close the Jira.  ></body> </Action>
