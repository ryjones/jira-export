<Issue id="44145" key="FABN-1466" number="1466" project="10604" reporter="ricntt" assignee="ricntt" creator="ricntt" type="10004" summary=" TypeError: Cannot read property &apos;name&apos; of undefined  when a peer disconnects from the network" priority="2" status="10300" created="2020-01-27 16:28:30.0" updated="2021-11-02 00:57:09.0" votes="0" watches="3" workflowId="58046" archived="N"> <description><! CDATA I am testing high availability for Hyperledger Fabric.  I am manually enabling/disabling peer nodes when I insert data into the blockchain and I expect my Node SDK client to send me messages of impossible connection.  This correctly happens when your peer node is down and your Node SDK tries the connection. In this case, the SDK says 'Unable to initialize the channel'. But this not happens if you disable a node at runtime.  In that situation, I receive this error:    {code:java} "Cannot read property 'name' of undefined" {code} This comes from the Node SDK and it is clear there is a parameter check missing.     Thanks to the debug I understood where the problem is. Inside *transaction.js* file contained in *node_modules/fabric-network/lib* at row 235 we find:    {code:java} const errorMessages = errorResponses.map((response) => util.format('peer=%s, status=%s, message=%s',const errorMessages = errorResponses.map((response) => util.format('peer=%s, status=%s, message=%s', response.peer.name, response.status, response.message)); {code} So, the construction of the errorMessages suppose a peer is always online and makes no parameter check on the response. If the peer goes down, the response.peer parameter is undefined and what you get from response.peer.name is undefined too. And this explains the error I get.        For a double check, I modified that line of code with:    {code:java} const errorMessages = errorResponses.map((response) => util.format('peer=%s, status=%s, message=%s',const errorMessages = errorResponses.map((response) => util.format('peer=%s, status=%s, message=%s', response.peer? response.peer.name : 'offline', response.status? response.status : 'no status', response.message)); {code} In this way, you check if the variables are undefined or not before sending a response, and this correctly work for my SDK that now returns: {code:java} "message": "No valid responses from any peers. 1 peer error responses:\n peer=offline, status=no status, message=Failed to connect before the deadline URL:grpcs://localhost:8051" {code} Please fix this bug in order to avoid SDK crash during this situation.        ></description> </Issue>
