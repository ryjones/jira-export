<Action id="52949" issue="34965" author="denyeart" type="comment" created="2018-11-02 09:03:46.0" updateauthor="denyeart" updated="2018-11-02 09:03:46.0"> <body><! CDATA I agree connection and gRPC errors should result in a retry to another peer.  My original point was that peer will respond with a 500 for many types of errors: * If you can't get a simulator, peer returns 500. * If the chaincode isn't installed, peer returns 500. * If there is a chaincode application error, peer's chaincode returns 500.  In the first two cases, you probably want to retry a different peer.  In the last case, you probably don't want to retry.  I was suggesting that we could document that chaincode application errors should return  something besides 500 (but still 400 or above) if they want client app to distinguish chaincode errors from other peer 500 errors. Otherwise app has to fall back to parsing the error message.  Even within the category of chaincode application errors, the application may or may not want to retry a different peer. So potentially we allow app to list the error codes that they want to retry, rather than hardcoding some logic in SDK.     ></body> </Action>
<Action id="52973" issue="34965" author="muralisr" type="comment" created="2018-11-02 14:12:54.0" updateauthor="muralisr" updated="2018-11-02 14:12:54.0"> <body><! CDATA  ~denyeart  I'm not sure how easy it would be for applications to specify which error codes should be retried (for example, lagging commits, etc would be hard to predict / codify). That would be quite error prone and hard to get right IMO. I can see application developers specifying to retry everything anyway.  Let's say the endorsement policy is majority. Is there any logical difference between the 3 cases as far as retrying is concerned ?  The whole point is that different peers might return different responses and we want to collect the majority. I'd suggest *by default* SDK retries for the last case as well - given that users can override the behavior with their own hook.  The only time retry should stop is when the computation reaches the stage the EP cannot be satisfied.  ></body> </Action>
<Action id="65107" issue="34965" author="heatherp" type="comment" body="I&apos;ve been working through the node sdk backlog with the maintainers - we believe this issue has been tackled in refactoring in v2.0 - please re-open if you think this isn&apos;t the case" created="2019-10-29 16:05:40.0" updateauthor="heatherp" updated="2019-10-29 16:05:40.0"/>
