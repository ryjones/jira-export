<Action id="69736" issue="45615" author="icarrascol" type="comment" created="2020-07-20 17:49:07.0" updateauthor="icarrascol" updated="2020-07-20 17:49:07.0"> <body><! CDATA i came to the conclusion that for second point, this error is related to the peer listen address env variable used in the docker-compose file it needs to be the same internal and external if u set it using the external port, but if you dont set this variable, by default it uses port 7051, and i wasnt setting it. The first error still stands as you can try with any network with a peer down and the invoke will fail without trying a new endorsing combination.  ></body> </Action>
<Action id="69755" issue="45615" author="harrisob@us.ibm.com" type="comment" created="2020-07-22 15:31:59.0" updateauthor="harrisob@us.ibm.com" updated="2020-07-22 15:31:59.0"> <body><! CDATA When using discovery on your local system with docker, YOU  MUST assign unique port numbers to each peer AND you must set all the environment settings for the peer to use that port address AND the docker mapping of the port must use the same port address.  for example notice how 9051 is set in many places for this peer {code:java} peer0.org2.example.com: container_name: peer0.org2.example.com image: hyperledger/fabric-peer:$IMAGE_TAG environment: #Generic peer variables - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock # the following setting starts chaincode containers on the same # bridge network as the peers # https://docs.docker.com/compose/networking/ - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test - FABRIC_LOGGING_SPEC=INFO #- FABRIC_LOGGING_SPEC=DEBUG - CORE_PEER_TLS_ENABLED=true - CORE_PEER_PROFILE_ENABLED=true - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt # Peer specific variabes - CORE_PEER_ID=peer0.org2.example.com - CORE_PEER_ADDRESS=peer0.org2.example.com:9051 - CORE_PEER_LISTENADDRESS=0.0.0.0:9051 - CORE_PEER_CHAINCODEADDRESS=peer0.org2.example.com:9052 - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:9052 - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org2.example.com:9051 - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org2.example.com:9051 - CORE_PEER_LOCALMSPID=Org2MSP volumes: - /var/run/:/host/var/run/ - ../organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/msp:/etc/hyperledger/fabric/msp - ../organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls:/etc/hyperledger/fabric/tls - peer0.org2.example.com:/var/hyperledger/production working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer command: peer node start ports: - 9051:9051 networks: - test {code}  ></body> </Action>
<Action id="69756" issue="45615" author="harrisob@us.ibm.com" type="comment" created="2020-07-22 15:34:01.0" updateauthor="harrisob@us.ibm.com" updated="2020-07-22 15:34:01.0"> <body><! CDATA If you still have an issue with discovery place provide a trace log, set the following before running your code, dump the log entries to the console or a file {code:java} export HFC_LOGGING='{"debug":"console"}' {code}  ></body> </Action>
<Action id="69757" issue="45615" author="icarrascol" type="comment" body="i corrected the port issues last week and discovery doesnt work, as i said if you stop a peer it doesnt check new combinations, anyways i will check now the logs as you said and add a new comment with them" created="2020-07-22 16:11:38.0" updateauthor="icarrascol" updated="2020-07-22 16:11:38.0"/>
<Action id="69758" issue="45615" author="icarrascol" type="comment" created="2020-07-22 16:44:50.0" updateauthor="icarrascol" updated="2020-07-22 17:25:47.0"> <body><! CDATA i got the logs from the request, this is with a chaincode with policy 1 out of 2, my network has 2 peers and 1 orderer, with 2 peers active it works fine and i can do the invoke, if i stop 1 peer the expected behavior is a successful invoke anyways because there is still another peer alive and because discovery is enabled, i attached the logs of the attempt with a peer down, also the response from the sdk is this {code:java} {    "payload": {     "message": "Endorser must be connected", "stack": "Error: Endorser must be connected\n    at Channel.addEndorser (/home/italo/Documentos/pagare/api_chain/node_modules/fabric-common/lib/Channel.js:259:10)\n    at buildChannel (/home/italo/Documentos/pagare/api_chain/node_modules/fabric-network/lib/impl/ccp/networkconfig.js:50:21)\n    at Object.loadFromConfig (/home/italo/Documentos/pagare/api_chain/node_modules/fabric-network/lib/impl/ccp/networkconfig.js:34:19)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)\n    at async Gateway.connect (/home/italo/Documentos/pagare/api_chain/node_modules/fabric-network/lib/gateway.js:279:13)"  }}{code} Here is the attached log:   ^debug.log      ></body> </Action>
<Action id="69760" issue="45615" author="harrisob@us.ibm.com" type="comment" body="Log does not show the submit, only shows the network initialization." created="2020-07-22 17:50:43.0" updateauthor="harrisob@us.ibm.com" updated="2020-07-22 17:51:46.0"/>
<Action id="69761" issue="45615" author="icarrascol" type="comment" created="2020-07-22 18:12:29.0" updateauthor="icarrascol" updated="2020-07-22 18:16:34.0"> <body><! CDATA i checked and it doesnt show the submit because it fails before sending,i have a try catch and it seems like it fails at the method gateway.connect()  consider, like i said before, the only thing i am changing is stopping a peer, the code is the same and it works if both peers are up and fails if one is down.  an invoke using the cli is successful if i have one peer down so there is something going on.  i think you can try the test network provided in fabric samples, i tried that one too with the same results.  ></body> </Action>
<Action id="69763" issue="45615" author="icarrascol" type="comment" created="2020-07-22 21:58:30.0" updateauthor="icarrascol" updated="2020-07-22 21:58:30.0"> <body><! CDATA i dont have the knowledge to understang how the module works but by comparing the error logs with a success log it seems like its practically at the initial steps of the connection setup that its failing, seems not related to discovery as it is not even reaching that point. The error is thrown by this method   https://github.com/hyperledger/fabric-sdk-node/blob/release-2.2/fabric-common/lib/Channel.js#L259   i supose at the beginng it is trying to add all the endorsing peers not taking in consideration that the endorsing of this chaincode only needs 1 peer online, so it adds the stopped peer, checks if it is connected and it fails throwing an error, if this is correct i dont think it should be the expected behaviour, as it makes the sdk useless if you have at least 1 endorsing peer offline even if its not needed.    ^success.log   ></body> </Action>
<Action id="69770" issue="45615" author="harrisob@us.ibm.com" type="comment" created="2020-07-23 21:40:10.0" updateauthor="harrisob@us.ibm.com" updated="2020-07-23 21:40:10.0"> <body><! CDATA I agree with your analysis. The issue is with the required state of an endorser before it is allowed to be added to a channel. During the loading of the common connection profile there is a failing peer assigned to a channel. This is a known issue https://jira.hyperledger.org/browse/FABN-1560.  I will push that Jira to the top of the work queue.  ></body> </Action>
