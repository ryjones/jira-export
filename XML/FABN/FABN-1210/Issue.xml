<Issue id="39286" key="FABN-1210" number="1210" project="10604" reporter="davidkel" assignee="harrisob@us.ibm.com" creator="davidkel" type="10001" summary="Client applications should receive all chaincode events in a block as an array" priority="3" resolution="10000" status="6" created="2019-04-12 15:34:26.0" updated="2019-05-24 07:22:30.0" resolutiondate="2019-05-21 12:24:44.0" votes="0" watches="2" workflowId="52165"> <description><! CDATA In the current implementation of the node-sdk, a client application registers to listen for chaincode events as follows  {code:java} this.handle = this.eventHub.registerChaincodeEvent(this.contractName, 'trade-network', (event: ChaincodeEvent, blockNum: number, txID: string, status: string) => { ... {code} When the node-sdk receives a block with multiple chaincode events, the call back is invoked for each of those chaincode events. The problem here is that although the client application is told the block number and tx id it actually has no idea how many chaincode events are part of the block. Without this knowledge if a client application wants to replay events it doesn't know which block to replay from as it won't know which chaincode events from a block it may have missed.   The proposal here is to allow the registerChaincodeEvent to pass all the events from a block in a single callback rather than a callback for each one. This has 2 benefits 1. The client application knows exactly how many events there are to handle up front 2. It will be slightly more performant as code path execution would be reduced  The client can then easily track which chaincode events it has processed successfully and thus which blocks have been successfully handled such that if replay is required then it can determine the correct block to start from again.   ></description> </Issue>
