<Action id="22600" issue="15519" author="sstone1" type="comment" created="2017-04-17 18:01:05.0" updateauthor="sstone1" updated="2017-04-17 18:01:35.0"> <body><! CDATA  ~jimthematrix  any thoughts on this one?  Apart from being able to use different local directories, it's also impacting the work to get Composer's REST API support working using database persistence for user certificates. This is because I cannot get all of fabric-client to use our custom KeyValueStore implementation.  I spent some time looking at this today. Couple of things:  Client.getUserContext() calls loadUserFromStateStore() which calls User.fromString(), but it doesn't pass the key value store or any options for the key value store in. As Dave mentions above, this causes the new CryptoSuite to go off and create a new key value store.   Currently CryptoSuite requires the KeyValStore class rather than the instance. It would be easier to use the APIs if the CryptoSuite used the same KeyValStore instance that we set on the owning Chain object, or if todays APIs accepted a KeyValStore instance rather than the class.  Finally, it seems that for any given user, after enrolment the KeyValStore creates three files. For the user bob1, you get:  ~/.hfc-key-store/bob1 ~/.hfc-key-store/da39a3ee5e6b4b0d3255bfef95601890afd80709-pub ~/.hfc-key-store/da39a3ee5e6b4b0d3255bfef95601890afd80709-priv  It would be useful for custom KeyValStore implementations - including ours ;-) - if we knew which user the public/private key files belonged to. I think this would make it easier for users to manage these directories as well. Currently the only option is to parse the first file to get the property which has the hash in it.  I would suggest prefixing them with the username, e.g.:  ~/.hfc-key-store/bob1 ~/.hfc-key-store/bob1-da39a3ee5e6b4b0d3255bfef95601890afd80709-pub ~/.hfc-key-store/bob1-da39a3ee5e6b4b0d3255bfef95601890afd80709-priv  ></body> </Action>
<Action id="22823" issue="15519" author="davidkel" type="comment" created="2017-04-21 15:11:29.0" updateauthor="davidkel" updated="2017-04-21 15:11:29.0"> <body><! CDATA This problem still occurs with the latest code in snapshot.17. The stacktrace of the call that isn't using the requested path is  {code:java} at new CryptoSuite_ECDSA_AES (/home/vagrant/src/fabric-composer/packages/composer-connector-hlfv1/node_modules/fabric-client/lib/impl/CryptoSuite_ECDSA_AES.js:77:21) at Object.module.exports.newCryptoSuite (/home/vagrant/src/fabric-composer/packages/composer-connector-hlfv1/node_modules/fabric-client/lib/utils.js:126:9) at User.fromString (/home/vagrant/src/fabric-composer/packages/composer-connector-hlfv1/node_modules/fabric-client/lib/User.js:237:14) at /home/vagrant/src/fabric-composer/packages/composer-connector-hlfv1/node_modules/fabric-client/lib/Client.js:718:22 {code}   ></body> </Action>
<Action id="23003" issue="15519" author="cdaughtr" type="comment" created="2017-04-25 23:01:43.0" updateauthor="cdaughtr" updated="2017-04-25 23:01:43.0"> <body><! CDATA Is this still a problem?  This problem looks like it has already been fixed.  Since your User code snippet, User.js:233 checks this._kvsCryptoOpts before creating the newCryptoSuite. This object can contain the file key store path which can be passed as opts at  `setEnrollment(privateKey, certificate, mspId, opts) { `  The opts object (this._kvsCryptoOpts) can contain kvsOpts, an options object specific to the implementation in KVSImplClass.  User.js:233 ```this._mspImpl = new LocalMSP({ 	id: state.mspid, 	cryptoSuite: this._kvsCryptoOpts ? sdkUtils.newCryptoSuite( 	this._kvsCryptoOpts.cryptoSettings, this._kvsCryptoOpts.KVSImplClass, this._kvsCryptoOpts.kvsOpts) : 	sdkUtils.newCryptoSuite() });```  ></body> </Action>
<Action id="23019" issue="15519" author="davidkel" type="comment" created="2017-04-26 10:43:12.0" updateauthor="davidkel" updated="2017-04-26 10:57:03.0"> <body><! CDATA So this problem still isn't fixed, although the code where the FIXME was has changed, I am still having problems. The first problem is described by Simon Stone above in the fact that getUserContext still tries to use the default .hfc-key-store directory. Stack traces from snapshot.19 are as follows :-  {code:java} at Client.loadUserFromStateStore (/home/vagrant/src/fabric-composer/node_modules/fabric-client/lib/Client.js:841:15) at Client.getUserContext (/home/vagrant/src/fabric-composer/node_modules/fabric-client/lib/Client.js:806:18) at getSubmitter (/home/vagrant/src/fabric-composer/packages/composer-systests/hlfv1-latest/setup-utils-latest.js:78:19) {code} and once the promise is resolved  {code:java} at CryptoSuite_ECDSA_AES (/home/vagrant/src/fabric-composer/node_modules/fabric-client/lib/impl/CryptoSuite_ECDSA_AES.js:63:15) at Object.module.exports.newCryptoSuite (/home/vagrant/src/fabric-composer/node_modules/fabric-client/lib/utils.js:126:9) at User.fromString (/home/vagrant/src/fabric-composer/node_modules/fabric-client/lib/User.js:237:14) at /home/vagrant/src/fabric-composer/node_modules/fabric-client/lib/Client.js:852:22 info:  crypto_ecdsa_aes : This class requires a CryptoKeyStore to save keys, using the store: {"opts":{"path":"/home/vagrant/.hfc-key-store"}} {code}  As you can see here it is still defaulting to .hfc-key-store when it tries to load from persistence. If it fails to load from persistence then what is the correct way to create a user ? doing a new User() type approach which was how we have been doing things as follows :-  {code:java} return cop.enroll({ enrollmentID: username, enrollmentSecret: password }).then((enrollment) => { console.log('Successfully enrolled user \'' + username + '\', now creating User');  member = new User(username, client); return member.setEnrollment(enrollment.key, enrollment.certificate, mspid); }).then(() => { return client.setUserContext(member); }).then((member) => { return resolve(member); }).catch((err) => { console.log('Failed to enroll and persist user. Error: ' + err.stack ? err.stack : err); throw new Error('failed to enroll'); }); {code} doesn't work as the User object doesn't get any information about the crypto keystore. The other way appears to be the client.createUser method, but the e2e test suite hasn't been updated to provide examples but it looks like I need to pass in an options object that requires the username, mspid and some crypto content.  So in summary there is still a problem with getUserContext not using the correct keystore and then if some guidance could be provided on the right way to create a User object that would be great.    ></body> </Action>
<Action id="23040" issue="15519" author="cdaughtr" type="comment" created="2017-04-26 15:55:56.0" updateauthor="cdaughtr" updated="2017-04-26 21:35:30.0"> <body><! CDATA You need to pass the path to the keyValueStorePath in two places:  1.  When creating FabricCAServices, add the 4th parameter {path: keyValStorePath} {code:java} new FabricCAServices(fabricCAEndpoint, tlsOptions/*cryptoSettings*/, 				kvs/*KVSImplClass*/, {path: keyValStorePath});  .then((caService) => client.setCryptoSuite(caService.getCrypto()); {code}  2.  When calling setEnrollment, add the 4th parameter opts which includes the kvsOpts object containing the path.  new User(username) is all that is needed, as there used to be a 2nd parameter of 'client' which is no longer used.  setEnrollment persists the file path, allowing getUserContext to use the correct keystore. {code:java} member = new User(username);  opts = {KVSImplClass: keyValueStore, kvsOpts: {path: keyValStorePath}}; return member.setEnrollment(enrollment.key, enrollment.certificate, mspid, opts); {code}  We have a couple of integration tests that can be used as an example: test/integration/couchdb-fabricca-tests.js test/integration/cloudant-fabricca-tests.js I copied and modified one of these to use the file key value store, and it ran successfully, using the specified custom file path.  For an example of Client.createUser, see test/integration/client.js.  Let me know if you have additional questions.  ></body> </Action>
<Action id="23045" issue="15519" author="cdaughtr" type="comment" body="I was just working through a related issue FAB-2923, and  ~jimthematrix  determined that a redesign is needed to support a User that is associated with multiple chains, each having it&apos;s own cryptosuite with potentially different crypto options.  So note that the current implementation will be changing when FAB-2923 is completed." created="2017-04-26 18:35:56.0" updateauthor="cdaughtr" updated="2017-04-26 18:35:56.0"/>
<Action id="23058" issue="15519" author="davidkel" type="comment" body="Hi  ~cdaughtr  many thanks for the update. I guess it would make sense to wait for the change of implementation and new apis. Please let me know when they have been published to NPM and I can recode to them and test them within our environment as well." created="2017-04-27 08:39:05.0" updateauthor="davidkel" updated="2017-04-27 08:39:05.0"/>
<Action id="23599" issue="15519" author="clayton sims" type="comment" body="Caroline what is the CR for this?" created="2017-05-09 13:26:07.0" updateauthor="clayton sims" updated="2017-05-09 13:26:07.0"/>
<Action id="23612" issue="15519" author="cdaughtr" type="comment" created="2017-05-09 18:04:56.0" updateauthor="cdaughtr" updated="2017-05-09 18:04:56.0"> <body><! CDATA  ~Clayton Sims  There is no direct CR for this issue.Â  It will be fixed with FAB-2923, CR:  https://jira.hyperledger.org/browse/FAB-2923?focusedCommentId=23348&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-23348  ></body> </Action>
<Action id="23623" issue="15519" author="jimthematrix" type="comment" body="https://gerrit.hyperledger.org/r/#/c/8905/" created="2017-05-10 05:01:06.0" updateauthor="jimthematrix" updated="2017-05-10 05:01:06.0"/>
<Action id="27637" issue="15519" author="pvrbharg" type="comment" created="2017-06-29 17:39:29.0" updateauthor="pvrbharg" updated="2017-06-29 17:39:29.0"> <body><! CDATA This is  bvperepa@us.ibm.com|mailto:bvperepa@us.ibm.com Â @ customer and we are seeing this issue at our customer setup. This is an issue that is holding us up as of now and you can see the error in log file. We are using the latest Composer binaries as of June 28, 2017.  Please advise. Thanks.  Â    ^FAB-2940.zip   ></body> </Action>
