<Issue id="20654" key="FABN-317" number="317" project="10604" reporter="sstone1" assignee="harrisob@us.ibm.com" creator="sstone1" type="10004" summary="Node.js SDK rewrites user and public key files during getUserContext" priority="3" resolution="10000" status="6" created="2017-09-07 07:25:31.0" updated="2018-07-19 00:53:37.0" resolutiondate="2017-10-05 10:23:45.0" votes="0" watches="2" workflowId="34048"> <description><! CDATA In Composer, we use the getUserContext call to load a user from the state store.  If the user is already enrolled, and we already have certificates/keys for that user, I would not expect the Node.js SDK to write any files to disk.  However, it seems that getUserContext rewrites the user file (admin, PeerAdmin, WebAppAdmin, etc) and the public key file. The private key file does not get overwritten. As far as I can see the contents being written are always the same.  This is easy to recreate using chmod - just chmod 400 (read-only) the files in the keyValStore. When I use the following files and permissions: {code:java} $ ls -lart total 24 drwxr-xr-x+ 115 sstone1  staff  3910  5 Sep 09:44 .. -r--r--r--    1 sstone1  staff   246  7 Sep 08:07 114aab0e76bf0c78308f89efc4b8c9423e31568da0c340ca187a9b17aa9a4457-priv drwxr-xr-x    5 sstone1  staff   170  7 Sep 08:07 . -r--r--r--    1 sstone1  staff  1024  7 Sep 08:13 PeerAdmin -r--r--r--    1 sstone1  staff   182  7 Sep 08:13 114aab0e76bf0c78308f89efc4b8c9423e31568da0c340ca187a9b17aa9a4457-pub{code} I see the following error when calling getUserContext: {code:java} Error trying login and get user Context. Error: EACCES: permission denied, open '/Users/sstone1/.composer-credentials/114aab0e76bf0c78308f89efc4b8c9423e31568da0c340ca187a9b17aa9a4457-pub' {code} If I chmod 644 the public key file, I then see the following error when calling getUserContext: {code:java} Error trying login and get user Context. Error: EACCES: permission denied, open '/Users/sstone1/.composer-credentials/PeerAdmin' {code} I believe this is happening because getUserContext calls setUserContext, but does not set persistence to false, meaning setUserContext calls saveUserToStateStore.  We have experienced difficulties with sharing keyValStore directories across multiple machines using Docker, as you have to always chmod/chown the directories so that they can be written to - even if they contain enough information to submit transactions.  Another team has also seen sporadic errors around trying to call getUserContext, where one of the files seems to be missing, truncated, or contain invalid JSON. This scenario is a bit unusual, where they were calling getUserContext on a regular basis across multiple parallel requests. I suspect that it's possible that as the SDK rewrites the file there is a timing window where another request sees a deleted or truncated file and then fails.  ></description> </Issue>
