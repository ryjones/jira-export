<Issue id="20655" key="FABN-372" number="372" project="10604" reporter="sstone1" assignee="harrisob@us.ibm.com" creator="sstone1" type="10004" summary="Node.js SDK leaks file handles" priority="3" resolution="10000" status="6" created="2017-09-07 07:43:45.0" updated="2018-07-19 00:53:49.0" resolutiondate="2017-11-27 04:34:05.0" votes="1" watches="3" workflowId="34103"> <description><! CDATA We are seeing that as expected, the Node.js SDK creates file handles for communicating with the peer and ordering service. These can be seen using lsof: {code:java} node    83189 sstone1   15u    IPv6 0xed59cbca3b63aaf7       0t0      TCP localhost:64262->localhost:7053 (ESTABLISHED) node    83189 sstone1   16u    IPv6 0xed59cbca43de85b7       0t0      TCP localhost:64263->localhost:7051 (ESTABLISHED) {code} There is no way to close these file handles using the Node.js SDK. The only "close" or "disconnect" method available is for the event hub, and it does not remove the underlying file handle.  This is causing a file handle leak in any program that creates/closes multiple Fabric connections during its life time.  A bit of experimentation with the event hub shows that adding the following code to EventHub._disconnect removes the file handle for the event hub: {code:java} this._event_client.close(); {code} The Node.js SDK needs to offer "close" or "disconnect" methods that close all connections and remove all of the created file handles for the peers and orderers. Guessing the CA is OK as it uses HTTP instead of gRPC.  ></description> </Issue>
