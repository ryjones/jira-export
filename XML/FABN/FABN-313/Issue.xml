<Issue id="22491" key="FABN-313" number="313" project="10604" reporter="davidkel" assignee="harrisob@us.ibm.com" creator="davidkel" type="10004" summary="Timeouts not supported in Node SDK Common Connection Profile" priority="1" resolution="10000" status="6" created="2017-10-18 20:38:59.0" updated="2018-07-19 00:53:36.0" resolutiondate="2017-10-27 13:47:16.0" votes="0" watches="2" workflowId="34044"> <description><! CDATA The CCP Defines some timeouts in the client section as follows {code} client: # Which organization does this application instance belong to? The value must be the name of an org # defined under "organizations" organization: Org1  # set connection timeouts for the peer and orderer for the client connection: timeout: peer: endorser: 3s eventHub: 3s eventReg: 3s orderer: 3s {code} But it doesn't look like these are used in the node sdk implementation of the CCP. I have managed to get around this for now (as the 45 second default was not long enough for instantiation in our system test runs) by putting request-timeout as a grpcOption entry in the definitions in the CCP I use {code} 'peers': { 'peer0.org1.example.com': { 'url': 'grpcs://localhost:7051', 'eventUrl': 'grpcs://localhost:7053', 'grpcOptions': { 'ssl-target-name-override': 'peer0.org1.example.com', 'request-timeout': 300 * 1000 }, 'tlsCACerts': { 'path': './hlfv1/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt' } }, 'peer0.org2.example.com': { 'url': 'grpcs://localhost:8051', 'eventUrl': 'grpcs://localhost:8053', 'grpcOptions': { 'ssl-target-name-override': 'peer0.org2.example.com', 'request-timeout': 300 * 1000 }, 'tlsCACerts': { 'path': './hlfv1/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt' } } {code} Luckily although not a grpcOption setting the entry did allow me to alter the timeout. So I am wondering whether the option will still work or will it be removed when the other timeout capabilities are implemented ?  ></description> </Issue>
