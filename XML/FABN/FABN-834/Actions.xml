<Action id="48782" issue="32166" author="denyeart" type="comment" body=" ~zhaochy  ~harrisob@us.ibm.com  Could you take a look?  Is there some debug that could be enabled on client and peer side that may point to the issue?" created="2018-08-13 10:39:14.0" updateauthor="denyeart" updated="2018-08-13 10:39:14.0"/>
<Action id="48826" issue="32166" author="rolivieri" type="comment" body=" ~denyeart ,  ~zhaochy ,  ~harrisob@us.ibm.com  - We can share the client code if that would help. We are able to reproduce this problem easily; we just let the client app idle for at least a few days and events are not received after that. If we use the client app at least a couple of times a day, events are received as expected." created="2018-08-14 02:00:59.0" updateauthor="rolivieri" updated="2018-08-14 02:00:59.0"/>
<Action id="48838" issue="32166" author="zhaochy" type="comment" body="I would have a deeper look.  ~rolivieri  If you can share the client code, that would be helpful." created="2018-08-14 10:14:59.0" updateauthor="zhaochy" updated="2018-08-14 10:14:59.0"/>
<Action id="48886" issue="32166" author="vandan101" type="comment" body=" ~zhaochy  please see the attached file &apos;event-service1.zip&apos; for the nodejs client code. " created="2018-08-15 13:20:43.0" updateauthor="vandan101" updated="2018-08-15 13:20:43.0"/>
<Action id="49113" issue="32166" author="rolivieri" type="comment" body="Hello  ~zhaochy , just wondering if there are any updates regarding this issue. Were you able to reproduce the problem? If it helps, we can also grant you access to our IBP instance and the Node.js instance (Cloud Foundry) that we have running on the IBM Cloud." created="2018-08-21 02:09:33.0" updateauthor="rolivieri" updated="2018-08-21 02:09:33.0"/>
<Action id="49197" issue="32166" author="zhaochy" type="comment" body=" ~rolivieri   We removed the EventHub from sdk after v1.2, and use ChannelEventHub now. Can you upgrade your client code to use &apos;fabric-client&apos; v1.2.1 and try again (and please provide a peer log and sdk log if it still not work)? I tried with the latest fabric-peer and the latest sdk, it works after hanging about 50 hours." created="2018-08-22 01:34:05.0" updateauthor="zhaochy" updated="2018-08-22 01:45:57.0"/>
<Action id="49198" issue="32166" author="rolivieri" type="comment" body=" ~zhaochy  Thanks for getting back to us. Just to confirm, are you asking us to upgrade the Node.js client SDK to v1.2 and run our tests one more time while using Fabric v1.1 on IBP on the IBM Cloud? Just double checking that what you are suggesting is supported: Node.js SDK v1.2 + Fabric v1.1.0 (IBP - Starter Plan on IBM Cloud). Look forward to hearing from you, thanks. " created="2018-08-22 02:07:35.0" updateauthor="rolivieri" updated="2018-08-22 02:07:35.0"/>
<Action id="49199" issue="32166" author="denyeart" type="comment" created="2018-08-22 02:35:58.0" updateauthor="denyeart" updated="2018-08-22 02:35:58.0"> <body><! CDATA  ~rolivieri  This Jira system is for Fabric open source only, not any vendor's cloud offering. That being said, ChannelEventHub also existed in v1.1.x of Node.js client SDK and we recommend to use that variant of EventHub.  Could you see if you can reproduce the problem using the ChannelEventHub on v1.1.x?  ></body> </Action>
<Action id="49236" issue="32166" author="rolivieri" type="comment" created="2018-08-22 13:39:17.0" updateauthor="rolivieri" updated="2018-08-22 13:39:17.0"> <body><! CDATA Thanks  ~denyeart  for the response. Point taken that this system is for Fabric open source only; I should have reworded my question. My question was more around verifying with you guys that upgrading to the Node.js client SDK v1.2 and using Fabric v1.1 was a supported configuration (just fyi, given our particular case, moving to Fabric 1.2 is not feasible just yet). Reading your last answer, your recommendation is instead to keep using Node.js client SDK v1.1.x but replace EventHub with ChannelEventHub as way to work around the issue of the client not receiving events after sitting idle. If I missed anything, please let us know, thanks.     ></body> </Action>
<Action id="49246" issue="32166" author="denyeart" type="comment" created="2018-08-22 15:19:10.0" updateauthor="denyeart" updated="2018-08-22 15:20:00.0"> <body><! CDATA  ~rolivieri  That's all correct. Using a later SDK version than fabric should work, but it is not a fully tested scenario... we recommend to upgrade fabric first, and then upgrade client SDK.  ></body> </Action>
<Action id="49485" issue="32166" author="rolivieri" type="comment" body=" ~denyeart  We updated the client code to use ChannelEventHub instead of EventHub. However, after doing so the same problem persists. How can this be addressed? Reading through the comments above, it sounds like  ~zhaochy  only tested with Fabric client v1.2. Would the next step be to have the team reproduce our problem using Fabric Node.js client v1.1? Any other information we can provide?" created="2018-08-28 13:11:58.0" updateauthor="rolivieri" updated="2018-08-28 13:11:58.0"/>
<Action id="49499" issue="32166" author="denyeart" type="comment" body=" ~zhaochy  Could you do a trial on v1.1 and/or suggest any next steps for troubleshooting in Ricardo&apos;s environment?" created="2018-08-28 16:47:49.0" updateauthor="denyeart" updated="2018-08-28 16:47:49.0"/>
<Action id="49727" issue="32166" author="rolivieri" type="comment" body=" ~zhaochy  Just following up on the above message from  ~denyeart . As I shared above, the problem persists even after moving from EventHub to ChannelEventHub. " created="2018-08-31 20:04:30.0" updateauthor="rolivieri" updated="2018-08-31 20:04:30.0"/>
<Action id="49837" issue="32166" author="vandan101" type="comment" body=" ~zhaochy   ~denyeart  Hi Guys can we please get an update on this problem." created="2018-09-04 17:23:02.0" updateauthor="vandan101" updated="2018-09-04 17:23:02.0"/>
<Action id="49867" issue="32166" author="zhaochy" type="comment" body=" ~vandan101  ~rolivieri   still working on. since it takes a long time to do this test once, to speed up solving the problem, can u please provide a peer and sdk log?" created="2018-09-05 01:37:06.0" updateauthor="zhaochy" updated="2018-09-05 01:37:06.0"/>
<Action id="49868" issue="32166" author="zhaochy" type="comment" body=" ~rolivieri  If you can provide a test environment, it would be much helpful." created="2018-09-05 01:38:32.0" updateauthor="zhaochy" updated="2018-09-05 01:38:32.0"/>
<Action id="50046" issue="32166" author="davidkel" type="comment" created="2018-09-06 18:54:58.0" updateauthor="davidkel" updated="2018-09-06 20:16:05.0"> <body><! CDATA  ~rolivieri  This might be a problem with grpc. It doesn't do keepalive as expected for idle connections. Try ensuring you have the following grpc options set in your connection profile or when you create Peer/Orderer objects {code} "grpc.keepalive_time_ms": 120000, "grpc.http2.min_time_between_pings_ms": 120000, "grpc.keepalive_timeout_ms": 20000, "grpc.http2.max_pings_without_data": 0, "grpc.keepalive_permit_without_calls": 1 {code} This will ensure keep alive is maintained when a grpc is idle.   ></body> </Action>
<Action id="50151" issue="32166" author="vandan101" type="comment" created="2018-09-10 13:51:18.0" updateauthor="vandan101" updated="2018-09-10 14:09:01.0"> <body><! CDATA  ~davidkel  We have the following values in the starter plan connection profile you mentioned above.  These are the same for 'orderer' and the 'org-peer'     {code:java} "grpcOptions": { "grpc.http2.keepalive_time": 360,  "grpc.keepalive_time_ms": 360000,  "grpc.http2.keepalive_timeout": 180,  "grpc.keepalive_timeout_ms": 180000 } {code}    How will these values ensure that the grpc conn is kept alive and running even though the system has been idle for a few days and that events are still received on the client side?  ></body> </Action>
<Action id="50155" issue="32166" author="davidkel" type="comment" created="2018-09-10 14:02:57.0" updateauthor="davidkel" updated="2018-09-10 15:49:01.0"> <body><! CDATA grpc keepalive doesn't work as intuitively as you might think. For example keepalive by default on idle connections sends 2 keepalive pings then stops. To ensure continuous keep alive you must also have {code} "grpc.http2.max_pings_without_data": 0 {code}  There appears to be another recommendation (although I haven't verified whether it helps) {code} "grpc.keepalive_permit_without_calls": 1 {code} You don't have these in the example you just posted  ></body> </Action>
<Action id="50166" issue="32166" author="vandan101" type="comment" created="2018-09-10 15:28:33.0" updateauthor="vandan101" updated="2018-09-10 15:28:33.0"> <body><! CDATA  ~davidkel  , # We changed our code to use 'ChannelEventHub' and not 'EventHub' as the sample code that was attached to this issue earlier.  After changing the code and redeploying the NodeJS app we still see the same behavior.  Do you still think that we are using the 'EventHub'?? # Changing the GRPC values do you think it will help address this problem even though we are using 'ChannelEventHub'? # Please note that we are using the IBP connection profile for all intents and purposes.  ></body> </Action>
<Action id="50168" issue="32166" author="davidkel" type="comment" created="2018-09-10 15:52:46.0" updateauthor="davidkel" updated="2018-09-10 15:52:46.0"> <body><! CDATA As you are creating the Peer objects yourself though newPeer, you will need to build an options object with all the relevant grpc settings yourself and pass it into the client.newPeer() call. When you create your channel event hub instance from that peer it should take the grpc settings applied to the peer and apply them to your channel event hub instance.   ></body> </Action>
<Action id="50232" issue="32166" author="davidkel" type="comment" body=" ~zhaochy  if you don&apos;t mind, I will assign this one to me. I have been dealing with similar connectivity issues recently and was also in conversation with one of the reporters yesterday to help ensure they configure their peer objects correctly." created="2018-09-11 09:33:56.0" updateauthor="davidkel" updated="2018-09-11 09:33:56.0"/>
<Action id="50458" issue="32166" author="vandan101" type="comment" created="2018-09-14 14:16:59.0" updateauthor="vandan101" updated="2018-09-14 14:16:59.0"> <body><! CDATA  ~davidkel   ~rolivieri   ~zhaochy   Hi Dave,   We made the changes to our nodejs sample app as suggested by you and left it running for more than 3 days.  The result is that the nodejs microservice is still able to receive events from blockchain which is what we wanted.   My follow up question is that the ‘grpc’ settings that you suggested should they be set by the nodejs sdk for fabric on behalf of the developer or should the developer set those settings manually each time?  ></body> </Action>
<Action id="50464" issue="32166" author="davidkel" type="comment" created="2018-09-14 15:06:49.0" updateauthor="davidkel" updated="2018-09-14 15:06:49.0"> <body><! CDATA Even though the node-sdk does define some grpc settings by default, it doesn't include the max_pings one because it only became necessary after a change to how grpc worked. It's debatable whether the node sdk should include any default grpc settings, firstly due to how grpc appears to be a moving target, plus the defaults may be suitable for one environment (in your case IBM cloud) but not for another environment and so different users of the node-sdk may very well raise issues about the default values. It's also not so easy to just add a new setting currently to the set of defaults, which are stored in default.json inside the npm module downloaded but the code has to be updated to pull those new settings. There is a JIRA to look at that mechanism as well FABN-913 to make it easier to add/change settings, however the default settings again probably are not necessarily appropriate for everyone including yourself.  If you want to be sure you are using the right settings for your environment you need to set them yourself, but maybe we can provide a set of options that aren't too controversial which can be done as part of another JIRA but it should then be documented somewhere to be clear.  ></body> </Action>
<Action id="50470" issue="32166" author="rolivieri" type="comment" created="2018-09-14 18:35:23.0" updateauthor="rolivieri" updated="2018-09-14 18:35:23.0"> <body><! CDATA Hi  ~davidkel , thanks for your support on this issue/question. (y)  I understand your point about the possibility that default grpc config settings may be suitable for one environment but not for another environment. Having said that, would there be a minimum/common set of default grpc settings that can guarantee that chaincode events are received by the client (even after the client being idle for hours) regardless of the environment? I was hoping this could be the case so the Fabric Client SDK takes care of these settings on behalf of developers. But maybe you are letting us know that such grpc settings  for ensuring delivery of chaincode events  are not platform agnostic?  ></body> </Action>
<Action id="50476" issue="32166" author="davidkel" type="comment" body=" ~rolivieri  I think it&apos;s difficult to come up with a standard set of  settings that would be applicable for everyone. Also that set may have been applicable to a specific platform originally but even that platform may find the settings now need to change based on changes to the platform or changes to current thinking. Also consider for example an environment where the fabric and application are hosted within a company intranet, then the generation of constant traffic to ensure the connection is kept alive could be completely superfluous and an unwanted overhead. Some providers may also require more aggressive or less aggressive values and may not work with less agressive approach or may not want the overagressive network traffic so which providers should the settings be defaulted to and which ones should have to document their requirements ? It could be that the only right way for a neutral solution is to not provide defaults at all but to document the knowledge for developers and architects to be able to make informed decisions about the solutions they deliver. " created="2018-09-14 20:43:09.0" updateauthor="davidkel" updated="2018-09-14 20:45:32.0"/>
<Action id="50576" issue="32166" author="rolivieri" type="comment" body="Thanks  ~davidkel  for the additional details. I like your suggestion for improving the documentation so that developers and architects can make informed decisions on how to configure the Fabric clients (grpc settings) in the solutions they deliver. Would such documentation be part of the Fabric docs site (https://hyperledger-fabric.readthedocs.io/)? If so, when do you think it could be available?" created="2018-09-18 02:17:57.0" updateauthor="rolivieri" updated="2018-09-18 02:17:57.0"/>
<Action id="53704" issue="32166" author="denyeart" type="comment" body=" ~davidkel  Where do you propose this be documented?" created="2018-11-22 04:15:24.0" updateauthor="denyeart" updated="2018-11-22 04:15:24.0"/>
<Action id="53708" issue="32166" author="davidkel" type="comment" body=" ~denyeart  I haven&apos;t looked recently to see if there are any improvements to how the node-sdk documentation is presented. if it hasn&apos;t changed, then the only possible place will be in the connection profile tutorial. The other possibility is in the main fabric documentation. Connection profiles aren&apos;t node-sdk specific so maybe the main fabric documentation should have something about connection profiles. I am assuming that the GO-SDK and Java-SDK also work with connection profiles but I haven&apos;t looked into these SDK capabilities. I know the Peer command supports connection profiles. I don&apos;t know if the grpcOptions block are honoured by the other SDKs, Peer command or whether they have their own mechanism for setting these options. So the minimum is put something in the node-sdk connection profile tutorial, but ideally this should be something that covers all client side capabilities. Not sure the best way to handle that one though." created="2018-11-22 08:29:47.0" updateauthor="davidkel" updated="2018-11-22 08:29:47.0"/>
<Action id="54116" issue="32166" author="davidkel" type="comment" created="2018-12-01 11:07:35.0" updateauthor="davidkel" updated="2018-12-01 11:15:54.0"> <body><! CDATA The follow options should be documented plus we should provide these as sensible settings to try initially {code} "grpcOptions": {  "grpc.keepalive_time_ms": 120000,   "grpc.http2.min_time_between_pings_ms": 120000,  "grpc.keepalive_timeout_ms": 20000,   "grpc.http2.max_pings_without_data": 0,   "grpc.keepalive_permit_without_calls": 1  }  {code} These apply to a connection profile definition. We should also show how to create a peer/orderer object manually and provide these settings.  It should also be made clear that if using discovery you may have to go in and manually set these values after discovery has been done.  see FABN-912  ></body> </Action>
<Action id="54344" issue="32166" author="harrisob@us.ibm.com" type="comment" body="Planning to add some doc to this after FABN-912" created="2018-12-05 02:49:14.0" updateauthor="harrisob@us.ibm.com" updated="2018-12-05 02:49:14.0"/>
<Action id="54479" issue="32166" author="andrew-coleman" type="comment" body="resolved by https://gerrit.hyperledger.org/r/c/27999/" created="2018-12-07 08:10:10.0" updateauthor="andrew-coleman" updated="2018-12-07 08:10:10.0"/>
