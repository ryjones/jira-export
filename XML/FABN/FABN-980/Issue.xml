<Issue id="34820" key="FABN-980" number="980" project="10604" reporter="davidkel" creator="davidkel" type="10001" summary=" Fabric-Network  Detect if peers disagree at commit time if a transaction is valid or not" priority="3" resolution="10001" status="6" created="2018-10-22 13:31:59.0" updated="2019-10-09 12:28:37.0" resolutiondate="2019-10-09 12:28:37.0" votes="0" watches="1" workflowId="46235"> <description><! CDATA In theory this should never happen, however real live feedback is showing that peers can get into different states and as some peers can reject transactions while others will mark them as valid. Client applications may want to know what the majority of peers think, not just react to a single peer that has rejected the transaction.  So consider this sitation 4 Peers, but 1 peer is rejecting transactions by making them invalid, but the other 3 are accepting the transaction. The peer rejecting the transaction rejects it with MVCC_READ_CONFLICT.  This could be a malicious peer, or a peer that now has a different ledger and world state due to somehow getting out of sync maybe.  The application may want to go with the majority of peers rather than have a single peer return MVCC_READ_CONFLICT because the typical application response to that would be to retry the same request. But then that 1 peer will always reject it.  There is another scenario seen where a peer running at a different version of chaincode will reject with EXPIRED_CHAINCODE but the others won't, however this is a more complex situation as you could have either the 1 peer reject or the other 3 peers reject depending on which proposal is chosen to be sent to the orderer.   So the proposal could be that it's possible to go with the majority but log as a warning any discrepencies noticed.  ></description> </Issue>
