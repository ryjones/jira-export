<Issue id="17047" key="FABN-662" number="662" project="10604" reporter="jimthematrix" assignee="jimthematrix" creator="jimthematrix" type="10001" summary="fabric-ca-client to independently support user persistence" priority="2" resolution="10000" status="6" created="2017-05-24 02:58:08.0" updated="2018-07-20 19:17:43.0" resolutiondate="2017-06-05 02:45:22.0" votes="5" watches="5" workflowId="34393" security="10001"> <description><! CDATA https://gerrit.hyperledger.org/r/#/c/9749/  *background*  fabric-client and fabric-ca-client are two npm packages published from the node SDK project, they are independent packages that are meant to be self-sufficient in what they do.  *goal* allow "user admin" applications to be written with fabric-ca-client package alone, without having to drag along fabric-client, to enroll users and persist them to storage (file or database).  *Problem* newDefaultKeyValueStore() is missing from this package. as a result the application is not able to solely use fabric-ca-client to handle user object persistence (which requires a KeyValueStore instance). Also missing necessary classes to handle user objects: User.js and its dependencies.  *Detailed explanation of the CR* - FabricCAClientImpl is the "top class" of the fabric-ca-client package (that gets installed from npm registry). Client is the top class of the fabric-client package. The two share a number of utility methods and instance properties, so a common base class, BaseClient.js, was created to host the common portion b/w the two. - User.js is needed in the fabric-ca-client package so that applications can use code like https://gerrit.hyperledger.org/r/#/c/9749/6/test/integration/fabric-ca-services-tests.js to create user objects and persist them in a key value store. - as a result of the change above, previous type checks using "instanceof" would not work any longer because the same class (like User and SigningIdentity) now exists in two separate packages. must implement "isInstance()" from the classes to make accurate type checks. - all others are incidental changes like doc improvements, and test configuration adjustments to make the tests run more smoothly in the new context.  The key point is that the changes are actually *very safe*.  *Can this be done in a non-intrusive way after 1.0?* Yes, but. The result is as discussed above a client application that manages fabric user identities is not able to use fabric-ca-client alone but is forced to use fabric-client for the small number of classes required to complete the picture. It defeats the design goal of having two separate NPM packages in the first place.  *But why so many changes in the test code?* There's only one real test code change directly impacted by the change in the production code, which is test/integration/fabric-ca-services-tests.js, and even there the changes are removing the "bad" dependencies to test the independence of the resulting "fabric-ca-client" package.  The rest of the test code changes are unfortunately necessary due to the nature of the "tape" testing framework. For good or bad, it's a "primitive" and "simple-minded" framework, where when tests are lumped together under "gulp", there are no clear boundaries or isolation b/w test modules, and as a result of the production code changes, the tests started running into each other as far as the configuration settings are concerned (some were testing with one setting, others testing with another). Most of the test code changes are moving the config settings setup from outside of the test function to inside  Lastly, along the way for easier debugging purposes, I went ahead and took  ~ChristopherFerris 's advice to remove all the noise in printout (logger.debug calls) to a file so the console printouts are simply "OK #3 test succeeded" which made my finding the failure much easier. It could have been broken out and I would be willing to do that if it'll make it easier to review and merge this.  ></description> </Issue>
