<Action id="24183" issue="16811" author="kchristidis" type="comment" body="I skimmed the design doc and I may have missed this, so I&apos;ve got one basic, and potentially naive question: What need does this REST API cover that the existing options fail to provide? What makes it necessary?" created="2017-05-23 16:05:41.0" updateauthor="kchristidis" updated="2017-05-23 16:05:41.0"/>
<Action id="24216" issue="16811" author="baohua" type="comment" created="2017-05-24 01:12:31.0" updateauthor="baohua" updated="2017-05-24 01:12:31.0"> <body><! CDATA I support the idea as the restful API is useful for quick usage like testing.  The feature might be provided as an component in existing sdk-node sub-project. User can choose to use the naive one by gRPC or enable the RESTful support.  ></body> </Action>
<Action id="25250" issue="16811" author="yacovm" type="comment" created="2017-06-04 07:33:50.0" updateauthor="yacovm" updated="2017-06-04 09:32:22.0"> <body><! CDATA {quote}I skimmed the design doc and I may have missed this, so I've got one basic, and potentially naive question: What need does this REST API cover that the existing options fail to provide? What makes it necessary? {quote} So, every developer that wants to build a simple web app that uses node SDK is going to need to do the following: # Write node-SDK specific code that connects to a peer/orderer and invokes gRPC against it # Write node.js code that exposes a REST endpoint, and translates the REST calls to *1.* # Write some html, javascript, css, etc. to make the REST calls to *2.*, thus enabling a user that browses the site to interact with the chaincode  I guess the idea here, is the build an extensive API that people would use, and then web developers that are focused on the front end aspect could just deploy the REST API component (or use an existing one hosted somewhere) and it'll do steps 1+2 above for them.  Now, I find the idea appealing but I'm concerned about the identity/authentication aspect - whoever has control of the REST API component can do whatever he/she wants on behalf of the actual user that uses the web app.  Having authentication from a web app to the REST API component is simply injecting an authentication layer that rides on the existing authentication layer, and without an ability to bind these 2 (which I currently do not see) - what is the purpose of using  passport|http://passportjs.org/ ? I guess the reason for this design is to keep things simple, but I'd argue that this can be designed in a different way: * REST call to the API server to receive back a payload to sign * Sign the payload via a key that is saved only on the client side(*), and send another REST request that would make the REST API server to create a gRPC call with the signed data with the nodeSDK and then send it to the peer/orderer.  (*) for example- upon registration: * A user comes up with 2 passwords: ** A password that encrypts its signing identity (private key + fabric enrollment certificate) ** A password that authenticates the user with the API server and this is used to fetch the encrypted signing identity that was saved upon registration, which will be decrypted on the client side when the user uses its password.  ></body> </Action>
<Action id="28762" issue="16811" author="baohua" type="comment" created="2017-07-21 01:41:58.0" updateauthor="baohua" updated="2017-07-21 01:41:58.0"> <body><! CDATA I explore the code, and seems it was written in js.  So is it possible to be integrated into the existing fabric-sdk-node project?  There're discussions on whether we need some RESTful support, and personally i guess we can offer this as optional feature inside the sdk.  ></body> </Action>
<Action id="28787" issue="16811" author="ianj_mitchell@uk.ibm.com" type="comment" created="2017-07-21 11:32:06.0" updateauthor="ianj_mitchell@uk.ibm.com" updated="2017-07-21 11:32:06.0"> <body><! CDATA We have based this on the Node SDK, but there should be no dependency on that which bleeds through to the REST clients.  I don't really mind either way, but making it a distinct project not aligned with Node or Java or Python gives it the feel of being *the* REST API rather than merely *a* REST API.  ></body> </Action>
<Action id="28788" issue="16811" author="christopherferris" type="comment" created="2017-07-21 12:24:05.0" updateauthor="christopherferris" updated="2017-07-21 12:24:05.0"> <body><! CDATA All, I think that the discussion of the HOW should be independent of whether we support this idea, generally. Devil is always in the details. The question at hand is whether we agree to create the repo for the work to begin. At that point, it is fair game to dicsuss the HOW and the merits of the design.  Can we please just vote? I have added review-needed tag.  ></body> </Action>
<Action id="28796" issue="16811" author="ianj_mitchell@uk.ibm.com" type="comment" body="In case anyone here&apos;s not noticed,  ~MartinC  pushed some code to  https://github.com/MartinCocks/fabric-sdk-rest  - which would likely form the basis." created="2017-07-21 14:06:24.0" updateauthor="ianj_mitchell@uk.ibm.com" updated="2017-07-21 14:06:53.0"/>
<Action id="28908" issue="16811" author="muralisr" type="comment" created="2017-07-24 16:14:06.0" updateauthor="muralisr" updated="2017-07-24 16:14:06.0"> <body><! CDATA I can't think of any reason why this exploration would be a bad thing (especially given its in its own repo outside of fabric). It is also based on the original requirement in https://jira.hyperledger.org/browse/FAB-156 which  says  {noformat} This feature will implement a REST API on top of the Node.js SDK. {noformat}  +1  ></body> </Action>
<Action id="29307" issue="16811" author="jimthematrix" type="comment" body=" ~ChristopherFerris  looks like this one has the requisite 5 votes from maintainers, shouldn&apos;t  ~ianj_mitchell@uk.ibm.com / ~MartinC  now be able to ask  ~ryjones  and  ~jwagantall  to create the repo?" created="2017-08-01 17:35:58.0" updateauthor="jimthematrix" updated="2017-08-01 17:35:58.0"/>
<Action id="29308" issue="16811" author="jimthematrix" type="comment" created="2017-08-01 17:47:35.0" updateauthor="jimthematrix" updated="2017-08-01 17:49:10.0"> <body><! CDATA  ~yacovm  very good question, the use of the passport.js module is to support various authentication mechanisms and give application developers (users of this capability) the flexibility to use OAuth/basic-auth/client-cert to authenticate the user. once a user is authenticated, the app developer can choose to use that user's identity or a fixed "server" identity to submit requests to the fabric. in either case the REST server will need to manage the blockchain identities on behalf of the user (server-side wallet).  This is going to be deployed as a trusted app and is likely going to be managed on a per-organization basis, so each participating org will deploy and manage their own instance of a REST API server.   With the interaction you outlined above, we can have a "multi-tenant" REST API server that is not given a blockchain identity itself, nor will it be managing user identities, but has to use the user's signed payload (and the signing key stays with the user) to submit to fabric. That may be a very useful thing to have in the future but I don't believe is in scope for this work.  ></body> </Action>
<Action id="29406" issue="16811" author="christopherferris" type="comment" body="this has the votes to proceed. " created="2017-08-03 14:28:04.0" updateauthor="christopherferris" updated="2017-08-03 14:28:04.0"/>
<Action id="29407" issue="16811" author="christopherferris" type="comment" body=" ~ianj_mitchell@uk.ibm.com  please engage  ~ryjones  to get the repo established in Gerrit and mirrored to GH etc. Thanks. I would recommend that we have some of the Fabric maintainers listed as maintainers on this. Probably  ~jimthematrix  and  ~mastersingh24  and myself for starters in addition to whom you wish to have as initial maintainers. I added Gari and I so that we have ability to handle release stuff when the time comes." created="2017-08-03 14:31:09.0" updateauthor="christopherferris" updated="2017-08-03 14:31:09.0"/>
<Action id="29411" issue="16811" author="ianj_mitchell@uk.ibm.com" type="comment" body="Many thanks  ~ChristopherFerris  and all who have engaged... we&apos;ll get going on this now." created="2017-08-03 15:22:18.0" updateauthor="ianj_mitchell@uk.ibm.com" updated="2017-08-03 15:22:18.0"/>
<Action id="30161" issue="16811" author="martinc" type="comment" created="2017-08-24 14:52:07.0" updateauthor="martinc" updated="2017-08-24 14:52:07.0"> <body><! CDATA Marking this as Done as we now have:   https://gerrit.hyperledger.org/r/#/admin/projects/fabric-sdk-rest    https://github.com/hyperledger/fabric-sdk-rest   Thanks to all the people who helped make this happen.  ></body> </Action>
