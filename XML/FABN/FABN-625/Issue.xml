<Issue id="22100" key="FABN-625" number="625" project="10604" reporter="angelmilanov" creator="angelmilanov" type="10001" summary="NodeSDK - painfully slow installation of CC in go with vendor packages" priority="3" resolution="10000" status="6" created="2017-10-15 10:35:32.0" updated="2019-10-12 07:34:12.0" resolutiondate="2017-11-01 19:29:18.0" votes="0" watches="1" workflowId="34356"> <description><! CDATA Installing Go chaincode with vendor packages (base Fabric Shim libraries) lasts for more that several hours for a single peer.  Chaincode written in Go may include vendor packages, to enhance functionality, apply proper versioning, and ensure consistent behavior. Compressing the Go source code with only the standard vendor packages for Fabric Shim results in tar archives of ~70mb, or tar.gz packages of ~17mb, which are then signed by the NodeSDK and sent over to the peer.  The Promise returned by the function *Client.installChaincode(request, timeout)*  resolves successfully after several hours. During this time, the Nodejs main thread remains _completely blocked_.  A closer look into the Fabric Node SDK reveals that signing the installation proposal is the real bottleneck (installChaincode calls in turn the signProposal function). By digging deeper, it becomes clear that the underlying cryptographic library *sjcl,* which implemented entirely in JS, blocks the whole Node process to perform calculations and takes several hours instead of seconds, as would the native Fabric binaries do.     Is there a way to replace the library, to achieve speeds comparable to native Fabric toolkit, i.e. the "peer" command?     Testing Environment:  Node 6.11.4 & Node 8.7.0 x64  Win 10 x64 & CentOS 7 i7-4700MQ 2.4GHz RAM 16GB     ></description> </Issue>
