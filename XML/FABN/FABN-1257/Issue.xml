<Issue id="40204" key="FABN-1257" number="1257" project="10604" reporter="yoheiueda" assignee="yoheiueda" creator="yoheiueda" type="10004" summary="Reconnecting EventHub causes timeout error" priority="3" resolution="10000" status="6" created="2019-05-29 14:35:49.0" updated="2020-03-17 17:43:42.0" resolutiondate="2019-07-30 01:00:59.0" votes="0" watches="3" workflowId="53107"> <description><! CDATA I observed a timeout error when I disconnect a EventHub connection, and immediately  reconnect the same EventHub connection. The timeout error occurs in 45 seconds after EventHub is reconnected. This error shutdown the reconnected EventHub connection.  {{2019-05-29T13:30:35.795Z - error:  ChannelEventHub.js : _connect - timed out after:45000}}  I attached a snippet to reproduce the problem below.  If I uncomment the sleep between the disconnect and connect, the problem disappear. {code:javascript} const sdk = require('fabric-client');  async function main() { const client = await sdk.loadFromConfig('connection-profile.yaml'); const channel = client.getChannel('mychannel'); const eventhub = channel.getChannelEventHub('peer1.org1.example.com'); eventhub._peer._request_timeout = 3000; // Shortens timeout for debugging  eventhub.connect(false); await sleep(1000); eventhub.disconnect();  //await sleep(1000);  eventhub.connect(false); await sleep(5000); eventhub.disconnect(); }  function sleep(msec) { return new Promise(resolve => setTimeout(resolve, msec)); }  main().then(() => { process.exit(0); }).catch(err => { console.error(err); process.exit(1); });{code} Simplified debug logs are as follows. {quote}2019-05-29T13:30:32.791Z - debug:  ChannelEventHub.js : disconnect - start - hub:1 2019-05-29T13:30:32.791Z - debug:  ChannelEventHub.js : _disconnect - start - hub:1 2019-05-29T13:30:32.791Z - debug:  ChannelEventHub.js : _disconnect - called due to:: ChannelEventHub has been shutdown, peer:localhost:7051 2019-05-29T13:30:32.791Z - debug:  ChannelEventHub.js : _shutdown - shutdown existing stream 2019-05-29T13:30:32.792Z - debug:  ChannelEventHub.js : _disconnect - end – called due to:: ChannelEventHub has been shutdown, peer:localhost:7051 2019-05-29T13:30:32.792Z - debug:  ChannelEventHub.js : connect - start - hub:1 2019-05-29T13:30:32.792Z - debug:  ChannelEventHub.js : connect - start peerAddr:localhost:7051 2019-05-29T13:30:32.792Z - debug:  ChannelEventHub.js : connect - filtered block stream set to:true 2019-05-29T13:30:32.792Z - debug:  ChannelEventHub.js : connect - signed event:false 2019-05-29T13:30:32.792Z - debug:  ChannelEventHub.js : _connect - start - Wed May 29 2019 22:30:32 GMT+0900 (Japan Standard Time) 2019-05-29T13:30:32.792Z - debug:  ChannelEventHub.js : _checkReplay - start 2019-05-29T13:30:32.792Z - debug:  ChannelEventHub.js : _checkReplay - end 2019-05-29T13:30:32.792Z - debug:  ChannelEventHub.js : _connect - start stream: 2 2019-05-29T13:30:32.792Z - debug:  ChannelEventHub.js : _connect - options \{"grpc.http2.min_time_between_pings_ms":120000,"grpc.keepalive_timeout_ms":20000,"grpc.keepalive_time_ms":120000,"grpc.max_receive_message_length":-1,"grpc.max_send_message_length":-1,"grpc.http2.max_pings_without_data":0,"grpc.keepalive_permit_without_calls":1,"name":"peer1.org1.example.com","grpc.ssl_target_name_override":"peer1.org1.example.com","grpc.default_authority":"peer1.org1.example.com"} 2019-05-29T13:30:32.798Z - debug:  ChannelEventHub.js : _connect - end stream: 2 2019-05-29T13:30:32.798Z - debug:  ChannelEventHub.js : connect - end localhost:7051 {color:#ff8b00}*2019-05-29T13:30:32.799Z - debug:  ChannelEventHub.js : on.error - block stream:1 _current_stream:2 peer:localhost:7051*{color} {color:#ff8b00}*2019-05-29T13:30:32.799Z - debug:  ChannelEventHub.js : on.error - incoming message was from a cancelled stream*{color} {color:#ff8b00}*2019-05-29T13:30:32.799Z - debug:  ChannelEventHub.js : on.error - Wed May 29 2019 22:30:32 GMT+0900 (Japan Standard Time) Error: 1 CANCELLED: Cancelled*{color} {color:#ff8b00}*2019-05-29T13:30:32.799Z - debug:  ChannelEventHub.js : on status - status received: \{"code":1,"details":"Cancelled","metadata":{"_internal_repr":{}}} peer:localhost:7051*{color} {quote}    The problem here is that an incoming cancel message for the first stream is accidentally handled during the initialization of the second stream.  The current code for handling this situation reset connection initialization as follows: {quote}{{self._connect_running = false;}} {{clearTimeout(connection_setup_timeout);}} {quote} Note that the first line resets a value in object, but the second line refers to a local variable in the method call of _{{connect()}} for the first stream.  I will submit a CR to fix this issue.     ></description> </Issue>
