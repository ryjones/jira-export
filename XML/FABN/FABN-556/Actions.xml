<Action id="25185" issue="17337" author="denyeart" type="comment" body=" ~jimthematrix  Can you provide your view on risk of making these changes in 1.0 vs risk of deferring these to 1.1.  For example if we leave in some of the Unused methods, does that mean that clients may try to call them, which could cause frustration for them in 1.0, and potentially break them if we remove later in 1.1?  If that is true, I would vote to remove them now.  But if these are more cosmetic changes that can easily be fixed up in 1.1 without much impact, I would vote to defer." created="2017-06-02 20:29:56.0" updateauthor="denyeart" updated="2017-06-02 20:29:56.0"/>
<Action id="25205" issue="17337" author="christopherferris" type="comment" body="I&apos;m betting that Composer team won&apos;t be thrilled with more churn." created="2017-06-03 05:50:00.0" updateauthor="christopherferris" updated="2017-06-03 05:50:00.0"/>
<Action id="25290" issue="17337" author="jimthematrix" type="comment" created="2017-06-04 21:47:52.0" updateauthor="jimthematrix" updated="2017-06-05 03:07:57.0"> <body><! CDATA  ~denyeart ,  ~ChristopherFerris  these changes are all clean-up, they are in the following categories: - once functional but have since been abandoned. those related to creating/updating channels with JSON input, which were already taken out of API documentation. I'd like to clean them up because users in the community keep asking about them, and I have to repeatedly tell them "don't use them, they have been removed from the API". - static internal methods inside classes. they are not meant to be called by the application code, that's why they have been prefixed with "_". But they are still accessible to the application code through the module. I'd like to prevent accidental usage by moving them out of the classes but kept inside the modules they are in. - unimplemented methods. never functional and should just go.  The only potential "breaking" change is the first category, which is a breaking change by design since these APIs are abandoned in favor of supporting binary input by the configtxlator tool only. they others are safe and would prevent apps building undesirable dependencies through accidental usage.  In short, we need to do all the above to save us the headache in the future after the release goes out. and no customers should complain since they are not supposed to use any of these in the first place.  Finally, the Composer team has been gracious w.r.t API churns, but in this case the good news is that they are not using any of these methods or properties.  ></body> </Action>
<Action id="25336" issue="17337" author="denyeart" type="comment" body="Thanks for the detailed explanation Jim.  I agree cleanup like this should be done before the release instead of after the release, to eliminate many future headaches. +1." created="2017-06-05 13:53:49.0" updateauthor="denyeart" updated="2017-06-05 13:53:49.0"/>
<Action id="25388" issue="17337" author="sstone1" type="comment" body="The Composer team do not use any of these APIs, so we should be OK - thanks for checking though (y)" created="2017-06-05 16:32:14.0" updateauthor="sstone1" updated="2017-06-05 16:32:14.0"/>
<Action id="25403" issue="17337" author="christopherferris" type="comment" body="This now has the requisite number of votes and may be merged when ready" created="2017-06-05 17:50:32.0" updateauthor="christopherferris" updated="2017-06-05 17:50:32.0"/>
