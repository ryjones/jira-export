<Action id="70573" issue="46232" author="lesleyannj" type="comment" created="2020-10-27 14:29:26.0" updateauthor="lesleyannj" updated="2020-10-27 14:29:46.0"> <body><! CDATA This reported scenario is when there is only 1 peer in the env.  This is not a expected standard scenario as it provides no failover etc.  However, suggested improvement to look at ensuring a reconnect is tried even in scenario with just 1 peer.  ></body> </Action>
<Action id="70574" issue="46232" author="bestbeforetoday" type="comment" created="2020-10-27 14:31:54.0" updateauthor="bestbeforetoday" updated="2020-10-27 14:32:20.0"> <body><! CDATA The issue is triggered at this line:  https://github.com/hyperledger/fabric-sdk-node/blob/61a06dd6c95a4a13cb8b96921ce2f55dca2d7fc9/fabric-network/src/impl/event/blockeventsource.ts#L131   If that deferred call to {{start()}} fails (which it will do *only* if _none_ of the eventing peers it wants to use are available), it just gives up and listeners are left in an orphaned state. There should be some logic that keeps retrying periodically on a reconnect until successful. On the initial connect it can just throw an error back to the application code that is registering the listener, so I’m not sure if the best behaviour is to continue doing that or to retry the same as for a reconnect.  Once a listener is registered, event errors should definitely be handled transparently by the event listening infrastructure and not surfaced to application code to deal with. We're trying to do all the fiddly low-level work on behalf of the application so they can focus on implementing business logic.  ></body> </Action>
