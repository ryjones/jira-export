<Issue id="46232" key="FABN-1657" number="1657" project="10604" reporter="arner" assignee="JIRAUSER22268" creator="arner" type="10004" summary="Reconnect BlockListener automatically on peer disconnect" priority="3" resolution="10000" status="6" created="2020-10-22 13:59:29.0" updated="2021-08-20 11:13:02.0" resolutiondate="2021-08-18 10:11:16.0" votes="0" watches="4" workflowId="61021" archived="N"> <description><! CDATA Applies to fabric-network NodeJS SDK v2.2.  *To reproduce* # Create network/org with one peer # Add block listener: ```  {{network.addBlockListener(async (blockEvent: BlockEvent) => {}} {{    console.log(blockEvent.blockNumber);}} {{});}} ``` # Delete peer pod / kill peer container # Invoke transaction. # Observe that the listener is disconnected.  *Issue*  Currently, the network reconnects automatically but the BlockListener is lost. Because there is no way (that I'm aware of) for the user to respond to a peer disconnect event, the user is forced to apply hacky solutions.  It seems (if I remember reading the SDK code correctly) that the event service tries to reconnect once, immediately, but this is often not enough (for instance on real peer or connectivity failure).  *Proposed solution*  Make the BlockListener reconnect automatically with retries. This would make it more robust. However, thinking of a truly resilient service, as a user I might _also_ want to be notified or be able to poll if the reconnection doesn't succeed or if there's other issues, so I can take measures on my end. Maybe one of the alternatives below could be a useful addition.  *Alternatives* * Make an error callback available, like with the transactionlistener (with a specific verifiable error for connection issues); or * Add an 'isConnected' flag to either the listener or the network, to allow for polling (but this alone may not be robust enough to cover temporary hiccups); or * Add a disconnected event to the Network so that the user can manually reconnect the BlockListener.     ></description> </Issue>
