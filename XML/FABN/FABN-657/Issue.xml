<Issue id="31165" key="FABN-657" number="657" project="10604" reporter="robertdiebels" creator="robertdiebels" type="10001" summary="Connection profile restructuring to improve code structure/quality" priority="3" resolution="10001" status="6" created="2018-06-19 08:42:48.0" updated="2019-10-29 16:27:58.0" resolutiondate="2019-10-29 16:27:58.0" votes="0" watches="1" workflowId="34388"> <description><! CDATA *Problem* The current connection profile decreases code quality by using a key-value maps instead of lists.  *Reasoning* Consider the connection profile below.  {code:yaml} organizations: Org1: mspid: Org1MSP peers: - peer0.org1.example.com certificateAuthorities: - ca-org1 adminPrivateKey: path: test/fixtures/channel/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/keystore/9022d671ceedbb24af3ea69b5a8136cc64203df6b9920e26f48123fcfcb1d2e9_sk signedCert: path: test/fixtures/channel/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/signcerts/Admin@org1.example.com-cert.pem  Org2: mspid: Org2MSP peers: - peer0.org2.example.com certificateAuthorities: - ca-org2 adminPrivateKey: path: test/fixtures/channel/crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/keystore/5a983ddcbefe52a7f9b8ee5b85a590c3e3a43c4ccd70c7795bec504e7f74848d_sk signedCert: path: test/fixtures/channel/crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/signcerts/Admin@org2.example.com-cert.pem  orderers: orderer.example.com: url: grpcs://localhost:7050 grpcOptions: ssl-target-name-override: orderer.example.com grpc-max-send-message-length: 15 tlsCACerts: path: test/fixtures/channel/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tlscacerts/example.com-cert.pem  peers: peer0.org1.example.com: url: grpcs://localhost:7051 eventUrl: grpcs://localhost:7053 grpcOptions: ssl-target-name-override: peer0.org1.example.com grpc.keepalive_time_ms: 600000 tlsCACerts: path: test/fixtures/channel/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tlscacerts/org1.example.com-cert.pem  peer0.org2.example.com: url: grpcs://localhost:8051 eventUrl: grpcs://localhost:8053 grpcOptions: ssl-target-name-override: peer0.org2.example.com tlsCACerts: path: test/fixtures/channel/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tlscacerts/org2.example.com-cert.pem  certificateAuthorities: ca-org1: url: https://localhost:7054 httpOptions: verify: false tlsCACerts: path: test/fixtures/channel/crypto-config/peerOrganizations/org1.example.com/ca/org1.example.com-cert.pem registrar: - enrollId: admin enrollSecret: adminpw caName: caorg1  ca-org2: url: https://localhost:8054 httpOptions: verify: false tlsCACerts: path: test/fixtures/channel/crypto-config/peerOrganizations/org2.example.com/ca/org2.example.com-cert.pem registrar: - enrollId: admin enrollSecret: adminpw caName: caorg2 {code}  Now consider a bit of Javascript that loops over all organizations and read their mspid.  {code:javascript} const mspIds =   ; for(let key in profileConfiguration.organizations){ if(profileConfiguration.organizations.hasOwnProperty(key)){ const organizationName = key; const organization = profileConfiguration.organizations key ; mspIds.push(organization.mspid); } } {code}  Now consider a change in the connection profile for Organizations as follows  {code:yaml} organizations: - name: Org1 mspid: Org1MSP peers: - peer0.org1.example.com certificateAuthorities: - ca-org1 adminPrivateKey: path: test/fixtures/channel/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/keystore/9022d671ceedbb24af3ea69b5a8136cc64203df6b9920e26f48123fcfcb1d2e9_sk signedCert: path: test/fixtures/channel/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/signcerts/Admin@org1.example.com-cert.pem  - name: Org2 mspid: Org2MSP peers: - peer0.org2.example.com certificateAuthorities: - ca-org2 adminPrivateKey: path: test/fixtures/channel/crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/keystore/5a983ddcbefe52a7f9b8ee5b85a590c3e3a43c4ccd70c7795bec504e7f74848d_sk signedCert: path: test/fixtures/channel/crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/signcerts/Admin@org2.example.com-cert.pem {code}  Now consider a bit of Javascript with the same purpose as the one above, but it uses the new connection profile.  {code:javascript} const mspIds = connectionProfile.organization.map((organization)=>{ return organization.mspid}); {code}  *Benefits* This bit of code is cleaner, easier to read, removes ambiguity and reduces complexity. Since it has no need for an if-statement to check if a key in the map exists before it add the mspId to the array. Furthermore it no longer has the key of the organizations map as an organizations name. A user could expect the key to be an organizations name but somewhere in the code it could be taken as the organizations doman after applying a toLowercase() or something similar. Adding the "name" property removes ambiguity and it is clear that this property is supposed to hold the organizations name and nothing else.  *Application* This would also apply to orderers, peers and certificateAuthorities since they also use a Map instead of a List.  ></description> </Issue>
