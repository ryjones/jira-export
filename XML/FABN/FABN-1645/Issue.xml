<Issue id="46153" key="FABN-1645" number="1645" project="10604" reporter="nkl199" assignee="harrisob@us.ibm.com" creator="nkl199" type="10004" summary="Query failure when using discovery on multi-peer networks" priority="3" resolution="10000" status="6" created="2020-09-25 10:06:26.0" updated="2020-10-22 15:15:20.0" resolutiondate="2020-10-22 15:15:20.0" votes="0" watches="4" workflowId="60057" archived="N"> <description><! CDATA Bare bones scenario: - One org - 2 peers - 1 peer with contract x, the other no contracts - use node sdk to evaluate a transaction for contract x  Using the sdk query handlers, this results in query requests being sent to all peers, including the peer that does not actually contain the contract. This results in an error being returned `Failed to perform query transaction  emptyContract  using arguments   , with error: Error: cannot retrieve package for chaincode fixed-asset/1.0.0, error open /data/peer/chaincodes/fixed-asset.1.0.0: no such file or directory` ... which is expected.  If we consider the round robin handler, it actually gets stuck on calling the failing peer because it presumably only moves to the next known peer when a successful response is received. At this point all future queries are destined to fail.  It is my understanding that it is possible to determine which peers have contracts installed on during the discovery process, and therefore it is possible to route the evaluate/submit to peers that are capable of satisfying the request.Â   This would be beneficial in terms of performance, since we would not be needlessly consuming peer/sdk resources sending requests to peers that we know will fail.  I do not believe that it should be the responsibility of a user to write their own complex query handler, inclusive of dealing with discovery, to cater for what is arguably a base scenario  ></description> </Issue>
