<Action id="69855" issue="45610" author="bestbeforetoday" type="comment" created="2020-08-04 14:06:59.0" updateauthor="bestbeforetoday" updated="2020-08-04 14:06:59.0"> <body><! CDATA In v1.4 the SDK looked at proposal response status codes to identify good responses. In v2 the SDK just looks at whether the proposal response has an endorsement attached. We've then traditionally taken the stance (based on client performance and inconsistent endorsements being a minority case) that the SDK will send the endorsed transaction to the orderer and let the transaction commit take care of checking consistency and that the endorsement policy applicable to given transaction is satisfied.  I'm not convinced that checking endorsements is work that we want to offload on the client application. The whole intent of the Fabric programming model (i.e. the fabric-network API) is to allow the client application code to work at a business application level of abstraction and avoid having to get bogged down with Fabric implementation details. I agree there is a case for doing more rigorous checking in the SDK that endorsements are consistent and meet the endorsement requirements before sending to the orderer.  ></body> </Action>
<Action id="70089" issue="45610" author="denyeart" type="comment" body="I agree that SDK should ensure that proposal responses match before submitting the transaction to orderer. The minor performance impact on application client side seems preferable to filling up the ledger with transactions that will ultimately get invalidated. Especially when you consider that application clients can be scaled horizontally, while transaction validation on the back end cannot." created="2020-08-27 16:27:38.0" updateauthor="denyeart" updated="2020-08-27 16:27:38.0"/>
