<Issue id="12424" key="FABN-238" number="238" project="10604" reporter="jjjjibm" assignee="cdaughtr" creator="jjjjibm" type="10004" summary=" node-SDK  chain.getMember(&lt;undefined user&gt;) returns member" environment="Laptop = Win 7 hfc = 0.0.2 Still using Github until I&apos;m told sdk/node works on Gerrit. " priority="3" resolution="10000" status="6" created="2016-08-16 21:11:18.0" updated="2018-07-19 00:53:20.0" resolutiondate="2016-08-30 16:36:20.0" votes="0" watches="3" workflowId="33969"> <description><! CDATA To drive an error case, I added the following call to my node.js program:  chain.getMember("Pope Francis", function(err, member) { 			if (err) { 				console.log("could not get member for ", name, err); 				return cb(err); 			} 			console.log("I did find this member", member) 			chain.setRegistrar(member); 		});  Since "Pope Francis" isn't a defined user, I expected the callback function to be driven with an error to the effect "Pope Francis" was not defined.  Instead I got this:  ~I did find this member { tcertGetterMap: {}, name: 'Pope Francis', chain: { peers:   , securityEnabled: true, members: {}, tcertBatchSize: 200, devMode: false, preFetchMode: true, deployWaitTime: 20, invokeWaitTime: 5, name: 'testChain', keyValStore: { setValue:  Function , dir: '/tmp/keyValStore' }, memberServices: { ecaaClient:  Object , ecapClient:  Object , tcapClient:  Object , tlscapClient:  Object , cryptoPrimitives:  Object  }, cryptoPrimitives: { hashAlgorithm: 'SHA3', securityLevel: 256, suite: 'sha3-256', curveName: 'secp256r1', hashFunction:  Object , hashFunctionKeyDerivation:  Object , hashOutputSize: 32, ecdsaCurve:  Object  }, registrar: { tcertGetterMap: {}, name: 'admin', chain:  Circular , memberServices:  Object , keyValStore:  Object , keyValStoreName: 'member.admin', tcertBatchSize: 200, enrollment:  Object  } }, memberServices: { ecaaClient: { '$channel': {} }, ecapClient: { '$channel': {} }, tcapClient: { '$channel': {} }, tlscapClient: { '$channel': {} }, cryptoPrimitives: { hashAlgorithm: 'SHA3', securityLevel: 256, suite: 'sha3-256', curveName: 'secp256r1', hashFunction:  Object , hashFunctionKeyDerivation:  Object , hashOutputSize: 32, ecdsaCurve:  Object  } }, keyValStore: { setValue:  Function , dir: '/tmp/keyValStore' }, keyValStoreName: 'member.Pope Francis', tcertBatchSize: 200 ~}  The documentation says nothing about chain.getMember() creating members for nonexistent users:  _getMember  getMember(name: string, cb: GetMemberCallback): void  Defined in src/hfc.ts:609  Get the user member named 'name'. Parameters name: string cb: GetMemberCallback  Callback of form "function(err,Member)" Returns void   _  Either getMember() should have returned with an error, or else the documentation must change to indicate chain.getMember() will always return a member, even for undefined users.   How to reproduce: 1.In vagrant, in your fabric directory, cd to .../fabric/sdk/node/test/unit 2.Edit registrar.js  (for example) 3.Add this code to one of the existing functions:  {code:java} chain.getMember("Pope Francis", function(err, member) { 			if (err) { 				console.log("could not get member for ", name, err); 				return cb(err); 			} 			console.log("I did find this member", member) 			chain.setRegistrar(member); 		}); {code} 4.Run 'make node-sdk-unit-tests' as usual.   ></description> </Issue>
