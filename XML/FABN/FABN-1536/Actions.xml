<Action id="68747" issue="44740" author="harrisob@us.ibm.com" type="comment" body="I do not understand the use case to have a transactionID available on the evaluate, it would not be available on the ledger ?" created="2020-04-06 21:18:32.0" updateauthor="harrisob@us.ibm.com" updated="2020-04-06 21:18:32.0"/>
<Action id="68750" issue="44740" author="bestbeforetoday" type="comment" body="I’m curious why the client application needs the transaction ID at all. The (only?) obvious case where it is needed is to wait for the transaction to be committed, and the transaction ID is supplied to the commit handler exactly for this purpose." created="2020-04-07 06:48:36.0" updateauthor="bestbeforetoday" updated="2020-04-07 06:48:36.0"/>
<Action id="68751" issue="44740" author="bestbeforetoday" type="comment" body="Worth also bearing in mind that the transaction ID is not available in the Java SDK and, as much as practical, we want the API provide by the SDKs to be consistent. If transaction ID is added back to the Node SDK then it should be added to the Java SDK too." created="2020-04-07 06:52:05.0" updateauthor="bestbeforetoday" updated="2020-04-07 06:52:05.0"/>
<Action id="68753" issue="44740" author="klenik" type="comment" body="TX IDs are the only thing (that I know of) that can provide consistent traceability across the DLT stack. Without it, you can&apos;t pair client/peer/chaincode observations, making structured log analysis a bit difficult (if not impossible) for example. You&apos;re right that it&apos;s not needed when interacting with the SDK, but applications building on the SDK might need it. So if the SDK already has the TX ID available, I don&apos;t see why such a piece of important information is hidden. " created="2020-04-07 09:05:56.0" updateauthor="klenik" updated="2020-04-07 09:05:56.0"/>
<Action id="68755" issue="44740" author="bestbeforetoday" type="comment" body="The only issue is that, since the internal rework of the SDK, the transaction ID is not generated until partway through the call to submit, so a getTransactionId function has a potentially confusing inconsistent return value; it only returns the transaction ID after the transaction has been submitted. Also, calling submit twice results in a second transaction ID being generated. I wonder if it would be worth tweaking the low-level implementation to allow the transaction ID to be generated when the Transaction object is created (as we used to in 1.4) to improve usability?" created="2020-04-07 10:11:59.0" updateauthor="bestbeforetoday" updated="2020-04-07 10:11:59.0"/>
<Action id="68759" issue="44740" author="harrisob@us.ibm.com" type="comment" body="Are we only going to allow the fabric-network.transaction to be used once, for submit or eval ?" created="2020-04-07 13:07:24.0" updateauthor="harrisob@us.ibm.com" updated="2020-04-07 13:07:24.0"/>
<Action id="68761" issue="44740" author="bestbeforetoday" type="comment" body="In 1.4 you could only submit or evaluate a Transaction once. It was an error to submit (or evaluate) a second time. I&apos;m not sure this is ideal either. Some users I&apos;ve spoken to are interested in a scenario where the orderer fails after the client has successfully sent the transaction to it for ordering/commit, and the orderer hasn&apos;t replicated the transaction state to other orderers so the transaction is lost. At the client end this will show up as a timeout waiting for a corresponding transaction commit event. At this point it might be useful for the client to be able to resubmit the same transaction, with the same transaction ID since this might prevent it accidentally being committed twice if the timeout occurred for another reason. I guess the ideal here is that the SDK takes care of this for them so client code doesn&apos;t have to worry about it, but we&apos;re not there yet." created="2020-04-07 13:37:00.0" updateauthor="bestbeforetoday" updated="2020-04-07 13:37:31.0"/>
<Action id="68825" issue="44740" author="harrisob@us.ibm.com" type="comment" created="2020-04-15 17:04:46.0" updateauthor="harrisob@us.ibm.com" updated="2020-04-15 17:04:46.0"> <body><! CDATA How about we add the ability for the application to request that the fabric-network.transaction set a new transaction ID and the fabric-common.proposal will allow for a transaction ID to be passed in when the proposal is built. This would make the transaction ID available prior to the submit. We will also add some checking for an application assigned transaction ID and will not allow the transaction to be submitted again once that transaction ID has been successfully submitted. The application may request a new transaction ID and then the transaction may be submitted.   https://github.com/hyperledger/fabric-sdk-node/pull/214   When not using the application assigned transaction ID, the flow will be same as it is now, the low level will build the transaction ID when building the proposal and the transaction ID will have it available after the submit.     However we could change the behavior of the fabric-network.transaction to get the transaction ID when the object is constructed and not allow submitting the transaction again unless it failed. This would make it behave as it did in 1.4, but improved in that we would be tracking the successful completion of the submit to the orderer to mark the transaction as not able to submit again. If then also add the newTransactionID method, the application get reuse the transaction.  ></body> </Action>
<Action id="69019" issue="44740" author="bestbeforetoday" type="comment" body=" ~klenik  note that an exception thrown from the call to *Transaction.submit()* will have a *transactionId* property (in addition to all the proposal responses), so client application code should be able to easily obtain the transaction ID for cases where commit fails (or fails to happen within an expected time window) and allow correlation with activity in the orderer and peers." created="2020-04-23 09:24:59.0" updateauthor="bestbeforetoday" updated="2020-04-23 09:25:30.0"/>
