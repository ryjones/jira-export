<Issue id="29379" key="FABN-623" number="623" project="10604" reporter="paperman" creator="paperman" type="10001" summary="Client loading the networkconfig class at runtime" priority="3" resolution="10200" status="6" created="2018-04-13 12:57:58.0" updated="2019-10-29 16:31:29.0" resolutiondate="2019-10-29 16:31:29.0" votes="0" watches="2" workflowId="34354"> <description><! CDATA Hei there, i had several issues while loading the networkconfig class. The reason for that could be the building tool (meteor) which i use or the typescript compiler. The code in the class "client" that is relevant for loading the networkconfig is following: {code:java} //internal utility method to get a NetworkConfig function _getNetworkConfig(config, client) {     let network_config = null;     let network_data = null;     if(typeof config === 'string') {         const config_loc = path.resolve(config);         logger.debug('%s - looking at absolute path of ==>%s<==','_getNetworkConfig',config_loc);         const file_data = fs.readFileSync(config_loc);         const file_ext = path.extname(config_loc);         // maybe the file is yaml else has to be JSON         if(file_ext.indexOf('y') > -1) {             network_data = yaml.safeLoad(file_data);         } else {             network_data = JSON.parse(file_data);         }     } else {         network_data = config;     }      let error_msg = null;     if(network_data) {         if(network_data.version) {             const parsing = Client.getConfigSetting('network-config-schema');             if(parsing) {                 const pieces = network_data.version.toString().split('.');                 const version = pieces 0  + '.' + pieces 1 ;                 if(parsing version ) {                     const NetworkConfig = require(parsing version );                     network_config = new NetworkConfig(network_data, client);                 } else {                     error_msg = 'network configuration has an unknown "version"';                 }             } else {                 error_msg = 'missing "network-config-schema" configuration setting';             }         } else {             error_msg = '"version" is missing';         }     } else {         error_msg = 'missing configuration data';     }      if(error_msg) {         throw new Error(util.format('Invalid network configuration due to %s',error_msg));     }      return network_config; } {code} I understand the concept behind this code but wouldn't it be better if it hasn't to load the class while runtime? My suggestion is a init-function where you can pass the class so you don't have to load it while runtime. If no class is passed through the function the client just use the default networkconfig class.  It would make it a lot easier.  ></description> </Issue>
