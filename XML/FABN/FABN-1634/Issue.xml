<Issue id="46008" key="FABN-1634" number="1634" project="10604" reporter="JIRAUSER20340" creator="JIRAUSER20340" type="10004" summary="addContractListener() - previous event is replayed" priority="3" resolution="10203" status="6" created="2020-09-09 12:35:55.0" updated="2020-09-09 15:11:33.0" resolutiondate="2020-09-09 14:54:27.0" votes="0" watches="1" workflowId="59919" archived="N"> <description><! CDATA I am using hlf 2.2, chaincode written in go and the fabric-sdk-node (fabric-network 2.2.2) as my client.  My go contract chaincode emits an event via:    {code:java} func (s *MySmartContract) Test(ctx contractapi.TransactionContextInterface, key string) error { return ctx.GetStub().SetEvent("EVENT",   byte(key)) }{code}    On the node js side I attach to the events via:    {code:java} .. const listener = async (event) => { if (event.eventName === 'EVENT') {   console.log("> INCOMING EVENT: " + event.payload.toString()) } contract.addContractListener(listener) ..{code}    When I execute the following steps:  1)  peer chaincode invoke ...  -c '\{"Args": "Test","123" }'  2) start my nodejs application   nothing happens on the event print   3)  peer chaincode invoke ...  -c '\{"Args": "Test","ABC" }'  -> I will now get the following prints    {code:java} > INCOMING EVENT: 123 > INCOMING EVENT: ABC {code} I expect to see only ABC.     4) I now close my app  5) restart my app   no prints concerning events   6) peer chaincode invoke ...  -c '\{"Args": "Test","XYZ" }'  -> I will now get the following prints {code:java} > INCOMING EVENT: ABC > INCOMING EVENT: XYZ {code}    I am wondering why I see the last emitted Event replayed when after  I (re)started my application once a new event occurs.   Is this by design?     One more thing: Is there an up to date documentation on the Event system?      ></description> </Issue>
