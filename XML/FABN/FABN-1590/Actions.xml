<Action id="69882" issue="45537" author="harrisob@us.ibm.com" type="comment" body="How do you suggest we handle this, this seems like a simulator  issue and not an issue with the actual base code." created="2020-08-07 15:23:07.0" updateauthor="harrisob@us.ibm.com" updated="2020-08-07 15:23:07.0"/>
<Action id="69912" issue="45537" author="thienbuinguyen" type="comment" created="2020-08-11 08:19:21.0" updateauthor="thienbuinguyen" updated="2020-08-11 08:19:21.0"> <body><! CDATA I'm imagining there's a simple way to create the expected key/ski objects from a given certificate pem. The SDK could then just reinitialise the keyToSki map after a simple check if its missing on public key imports, though I haven't looked too much at the source. Alternatively we could also save/restore the cache from a local JSON file for example.  Though, is the current design intentional? Feels a bit odd that the SDK wouldn't try to restore the session state automatically for a user if it crashes/restarts. Apparently there's no way to interact with the blockchain after a restart besides enrolling against the CA again for new certificates to populate the cache?  ></body> </Action>
<Action id="69927" issue="45537" author="harrisob@us.ibm.com" type="comment" created="2020-08-11 17:39:09.0" updateauthor="harrisob@us.ibm.com" updated="2020-08-11 17:39:09.0"> <body><! CDATA Key/ski / (private key and pointer to the private key) and public key are generated together first and then the public key is sent to the certificate authority (CA). The CA then will return a certificate. So one is able to get the public key from a certificate however the private will remain private.  Keep in mind that this is not a real HSM, only an in-memory test tool. Actual users of a real HSM will have the ski and certificate stored for users in their own data store and then make calls to the HSM using the ski when they need it to sign something with the private key that only the HSM has access.  ></body> </Action>
<Action id="69932" issue="45537" author="thienbuinguyen" type="comment" created="2020-08-12 01:46:30.0" updateauthor="thienbuinguyen" updated="2020-08-12 01:46:30.0"> <body><! CDATA  ~harrisob@us.ibm.com  I'm confused about the separate data store part. How come storing the cert/ski isn't a part of the default HSM identities provided? It should fit right in with the current Wallet interface and seems like a common factor for everyone using a HSM, unless I've misunderstood something else.  I agree it makes sense that you would lose data required with the in memory wallet for example, but it's not so obvious that you lose data with the other provided wallets like file system and CouchDB, and require a separate data store.  ></body> </Action>
<Action id="70633" issue="45537" author="JIRAUSER21047" type="comment" body="How was this issue resolved? facing the same issue." created="2020-11-09 15:23:45.0" updateauthor="JIRAUSER21047" updated="2020-11-09 15:24:20.0"/>
<Action id="70636" issue="45537" author="harrisob@us.ibm.com" type="comment" created="2020-11-09 16:28:16.0" updateauthor="harrisob@us.ibm.com" updated="2020-11-09 16:28:16.0"> <body><! CDATA When using a HSM simulator and restarting the simulator, you must delete the wallet data store and enroll users. The private keys will be lost when the simulator is stopped.  This is only an issue with a simulator and not a real HSM. These are used only for testing. A real HSM will persist the private keys.  ></body> </Action>
<Action id="70647" issue="45537" author="JIRAUSER21047" type="comment" body="okay, but currently I am using a vendor HSM to store the private keys, but I still seem to get this issue, the first time I run the application, it registers/enrolls the client identity and performs necessary operations using this identity, but the next time I use the same user it throws &quot;no key with SKI &quot; error." created="2020-11-10 04:05:21.0" updateauthor="JIRAUSER21047" updated="2020-11-10 04:05:21.0"/>
<Action id="70797" issue="45537" author="lesleyannj" type="comment" body="Solution via FABN-1666" created="2020-11-24 13:56:57.0" updateauthor="lesleyannj" updated="2020-11-24 13:56:57.0"/>
