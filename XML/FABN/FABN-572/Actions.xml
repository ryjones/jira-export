<Action id="45550" issue="30679" author="kchristidis" type="comment" body="/cc  ~aambati " created="2018-06-05 21:16:21.0" updateauthor="kchristidis" updated="2018-06-05 21:16:21.0"/>
<Action id="45555" issue="30679" author="aambati" type="comment" body=" ~tboloo After you give an attribute to a user, user should be asked to reenroll to get new certificate, which will have new attribute" created="2018-06-05 22:55:11.0" updateauthor="aambati" updated="2018-06-05 22:55:11.0"/>
<Action id="45557" issue="30679" author="kchristidis" type="comment" created="2018-06-05 23:24:16.0" updateauthor="kchristidis" updated="2018-06-05 23:24:16.0"> <body><! CDATA  ~aambati :  {noformat} After you give an attribute to a user, user should be asked to reenroll to get new certificate, which will have new attribute {noformat} Is it the app's responsibility to ask the user to re-enroll, or is this a message that the SDK should provide? (If it's the latter, I don't see it?)  ></body> </Action>
<Action id="45562" issue="30679" author="tboloo" type="comment" created="2018-06-06 07:21:44.0" updateauthor="tboloo" updated="2018-06-06 07:23:29.0"> <body><! CDATA  ~aambati ,  ~kchristidis   To clarify steps to reproduce: # docker exec -it ca.org1.example.com bash # root@2768af30a8e2:/# fabric-ca-client enroll -u  http://admin:adminpw@ca.org1.example.com:7054|http://admin:adminpw@ca.org1.example.com:7054/  # root@2768af30a8e2:/# fabric-ca-client identity list  {code:java} Name: new.user, Type: client, Affiliation: org1, Max Enrollments: -1, Attributes:  {Name:attr1 Value:fencer ECert:true} {Name:hf.EnrollmentID Value:new.user ECert:true} {Name:hf.Type Value:client ECert:true} {Name:hf.Affiliation Value:org1 ECert:true} {Name:attribute1 Value:value1 ECert:true} {Name:attribute2 Value:value2 ECert:true} {code} # root@2768af30a8e2:/# fabric-ca-client identity modify new.user --secret=q1w2e3r4 --maxenrollments=-1  {code:java} 2018/06/06 07:12:48  INFO  Configuration file location: /etc/hyperledger/fabric-ca-server/fabric-ca-client-config.yaml Successfully modified identity - Name: new.user, Type: client, Affiliation: org1, Max Enrollments: -1, Secret: q1w2e3r4, Attributes:  {Name:hf.Type Value:client ECert:true} {Name:hf.Affiliation Value:org1 ECert:true} {Name:attribute1 Value:value1 ECert:true} {Name:attribute2 Value:value2 ECert:true} {Name:attr1 Value:fencer ECert:true} {Name:hf.EnrollmentID Value:new.user ECert:true} {code} # root@2768af30a8e2:/# fabric-ca-client identity modify new.user --attrs 'attribute3=value3:ecert'  {code:java} 2018/06/06 07:18:02  INFO  Configuration file location: /etc/hyperledger/fabric-ca-server/fabric-ca-client-config.yaml Successfully modified identity - Name: new.user, Type: client, Affiliation: org1, Max Enrollments: -1, Secret: , Attributes:  {Name:attribute1 Value:value1 ECert:true} {Name:attribute2 Value:value2 ECert:true} {Name:attribute3 Value:value3 ECert:true} {Name:attr1 Value:fencer ECert:true} {Name:hf.EnrollmentID Value:new.user ECert:true} {Name:hf.Type Value:client ECert:true} {Name:hf.Affiliation Value:org1 ECert:true} {code} # root@2768af30a8e2:/# fabric-ca-client enroll -u http://new.user:q1w2e3r4@ca.org1.example.com:7054 |http://new.user:q1w2e3r4@ca.org1.example.com:7054/ {code:java} 2018/06/06 07:18:47  INFO  generating key: &{A:ecdsa S:256} 2018/06/06 07:18:47  INFO  encoded CSR 2018/06/06 07:18:47  INFO  Stored client certificate at /etc/hyperledger/fabric-ca-server/msp/signcerts/cert.pem 2018/06/06 07:18:47  INFO  Stored root CA certificate at /etc/hyperledger/fabric-ca-server/msp/cacerts/ca-org1-example-com-7054.pem 2018/06/06 07:18:47  INFO  Stored intermediate CA certificates at /etc/hyperledger/fabric-ca-server/msp/intermediatecerts/ca-org1-example-com-7054.pem{code}|  # docker exec -it web bash //node client container # root@1b4229f9aa1d:/var/app# node getAttribute.js new.user attribute4  {code:java} Store path:/var/app/hfc-key-store Successfully loaded new.user from persistence error:  client-utils.js : sendPeersProposal - Promise is rejected: Error: 2 UNKNOWN: chaincode error (status: 500, message: User new.user does not have attribute attribute4) at new createStatusError (/var/app/node_modules/fabric-client/node_modules/grpc/src/client.js:64:15) at /var/app/node_modules/fabric-client/node_modules/grpc/src/client.js:583:15 Query has completed, checking results error from query = { Error: 2 UNKNOWN: chaincode error (status: 500, message: User new.user does not have attribute attribute4) at new createStatusError (/var/app/node_modules/fabric-client/node_modules/grpc/src/client.js:64:15) at /var/app/node_modules/fabric-client/node_modules/grpc/src/client.js:583:15 code: 2, metadata: Metadata { _internal_repr: {} }, details: 'chaincode error (status: 500, message: User new.user does not have attribute attribute4)' }{code}  ></body> </Action>
<Action id="45584" issue="30679" author="aambati" type="comment" body=" ~tboloo It is responsibility of the application to ask the user to reenroll" created="2018-06-06 13:40:20.0" updateauthor="aambati" updated="2018-06-06 13:40:20.0"/>
<Action id="45614" issue="30679" author="tboloo" type="comment" created="2018-06-06 19:41:46.0" updateauthor="tboloo" updated="2018-06-06 19:41:46.0"> <body><! CDATA  ~aambati   I think I figured it out - the information about attributes is retrived from local storage. That means, if an app wants updated data about user, it needs to enroll him/her just to get the updated info. That holds true for the already enrolled user, which was updated after enrollment.  Still looks like a bug to me, or at last incomplete documentation.  ></body> </Action>
<Action id="45618" issue="30679" author="aambati" type="comment" body=" ~tboloo i don&apos;t think this is a bug. It is a feature. If it is not evident from the user doc that user needs to reenroll to get newly assigned attributes, then we can make it clear in the doc" created="2018-06-06 21:47:34.0" updateauthor="aambati" updated="2018-06-06 21:47:34.0"/>
<Action id="45628" issue="30679" author="tboloo" type="comment" created="2018-06-07 09:54:45.0" updateauthor="tboloo" updated="2018-06-07 09:59:19.0"> <body><! CDATA Further investigating the issue i stumbled upon a case which I believe is problematic, that is revoking user certificate does not stop user from interacting with ledger  Steps to reproduce: # On the CA machine (docker in this case) revoke user certificate using fabric-ca-client  {code:java} root@2768af30a8e2:/# fabric-ca-client revoke -e new.user -r "misbehaving" 2018/06/07 09:18:39  INFO  Configuration file location: /etc/hyperledger/fabric-ca-server/fabric-ca-client-config.yaml 2018/06/07 09:18:39  INFO  Sucessfully revoked certificates:  {Serial:4b10e7fe20947c9864fa8dfeb4cbb9a691b65a36 AKI:2dfc7fb0e454ad8e67c2ce1dbf41f47b6ebae02d06ffa6974032263db384d554} {Serial:c6c0aa2267c0b16bdd62c8fc8273128e2938b78 AKI:2dfc7fb0e454ad8e67c2ce1dbf41f47b6ebae02d06ffa6974032263db384d554} {Serial:d45ea964c327101e35259e6564e69e55c54343f AKI:2dfc7fb0e454ad8e67c2ce1dbf41f47b6ebae02d06ffa6974032263db384d554} {Serial:42367d9d17b83abacfe65473d7485f6d10eaa3e7 AKI:2dfc7fb0e454ad8e67c2ce1dbf41f47b6ebae02d06ffa6974032263db384d554} {Serial:28b6560fbf9211eecb8008a65735506672e89b9a AKI:2dfc7fb0e454ad8e67c2ce1dbf41f47b6ebae02d06ffa6974032263db384d554} {Serial:5435dec7d8f7355b6564d3a6595113cffa612117 AKI:2dfc7fb0e454ad8e67c2ce1dbf41f47b6ebae02d06ffa6974032263db384d554} {code} #  Shortly after that interact with the ledger, let's say write user name to ledger, like so:  write.go|https://gist.github.com/tboloo/4195609c5786e4c4f82553d2b108bb61 , using node sdk like so:  writeLedger.js| https://gist.github.com/tboloo/6e25a258b291fa92bcdb4148242972b7   |https://gist.github.com/tboloo/6e25a258b291fa92bcdb4148242972b7   root@1b4229f9aa1d:/var/app# node writeLedger.js new.user Store path:/var/app/hfc-key-store Successfully loaded new.user from persistence Query has completed, checking results Response is new.user wrote to ledger| |  # So, a revoked user can still interact with the ledger, unless I am missing something fundamental  ></body> </Action>
<Action id="45657" issue="30679" author="aambati" type="comment" created="2018-06-07 15:02:03.0" updateauthor="aambati" updated="2018-06-07 15:02:29.0"> <body><! CDATA  ~tboloo Revoke request does not affect anything in the Fabric. After revoking a user or cert, a CRL needs to be generated (either by calling "fabric-ca-client gencrl" or by calling "fabric-ca-client revoke --gencrl")  and update the channel configuration with newly generated CRL.   Remember, Fabric does not interact with CA. CA is used to populate the MSPs (local or channel)  ></body> </Action>
<Action id="45690" issue="30679" author="kchristidis" type="comment" created="2018-06-08 12:36:21.0" updateauthor="kchristidis" updated="2018-06-08 12:36:21.0"> <body><! CDATA Labeling this as an improvement. The way I see it, the only actionable item here is:  {quote}If it is not evident from the user doc that user needs to reenroll to get newly assigned attributes, then we can make it clear in the doc.{quote}  (Anil, correct me if I'm wrong.)  ></body> </Action>
<Action id="45705" issue="30679" author="aambati" type="comment" body=" ~kchristidis yes, i agree with you." created="2018-06-08 14:03:51.0" updateauthor="aambati" updated="2018-06-08 14:03:51.0"/>
<Action id="45806" issue="30679" author="tboloo" type="comment" created="2018-06-11 20:28:46.0" updateauthor="tboloo" updated="2018-06-11 20:28:46.0"> <body><! CDATA  ~aambati ,  ~kchristidis   Thank you for your support.  Updating documentation would definitely help newcomers like myself getting through identity management.  One more thing though - could you please guide to the relevant documentation on a case I am trying to implement, that is actually revoking user from interacting with the ledger? Should I just re-populate local MSP? Or should I take another approach? I would be grateful for the guidance.    ></body> </Action>
<Action id="46030" issue="30679" author="tboloo" type="comment" created="2018-06-17 06:20:19.0" updateauthor="tboloo" updated="2018-06-17 06:20:19.0"> <body><! CDATA Venturing further into the depths of Hyperledger Fabric i discovered yet another thing.  If you use IdentityService everything works as expected. Simple code to illustrate the approach:    {code:java} const identityService = fabricCAClient.newIdentityService('admin'); var request = {enrollmentID:'john.doe',affiliation:'org1',attrs:  } attr1 = {name:'new_attribute',value:'new_value',ecert:true} request.attrs.push(attr1) let response = await identityService.update('john.doe',request,adminFromStore); {code}    yields to updating user attribute, *without necessity to (re)enroll*, and everything gets reflected on the CA side {code:java} root@2768af30a8e2:/# fabric-ca-client identity list Name: john.doe, Type: client, Affiliation: org1, Max Enrollments: 1, Attributes:  {Name:attr1 Value:fencer ECert:false} {Name:hf.EnrollmentID Value:john.doe ECert:true} {Name:hf.Type Value:client ECert:true} {Name:hf.Affiliation Value:org1 ECert:true} {Name:attr2 Value:host ECert:true} {Name:new_attribute Value:new_value ECert:true} {code}    ></body> </Action>
<Action id="65132" issue="30679" author="heatherp" type="comment" body="Hi, I&apos;ve been working through the node sdk backlog with the maintainers and as this was raised some time ago, I&apos;m closing.   The high-level node sdk APIs have been available for some time, and this issue may be covered by functionality provided there:  https://hyperledger-fabric.readthedocs.io/en/latest/write_first_app.html   Please re-open if this issue is still affecting you, and the functionality is not available in the low-level or high-level node sdk APIs, thanks." created="2019-10-29 16:34:33.0" updateauthor="heatherp" updated="2019-10-29 16:34:33.0"/>
