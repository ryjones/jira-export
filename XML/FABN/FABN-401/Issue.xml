<Issue id="28265" key="FABN-401" number="401" project="10604" reporter="davidkel" assignee="harrisob@us.ibm.com" creator="davidkel" type="10004" summary="node sdk invokes chaincode event listener when no chaincode event has been emitted from the chaincode " priority="3" resolution="10000" status="6" created="2018-03-07 14:03:35.0" updated="2019-06-03 18:04:23.0" resolutiondate="2019-06-03 18:04:23.0" votes="0" watches="5" workflowId="34132"> <description><! CDATA While testing the new ChannelEventHub implementation I have observed that when I register for chaincode events. The callback is always invoked when a block event occurs, even though there is no chaincode event. The node sdk should only invoke the callback when there is a chaincode event to return. eg, if I use this code {code:java} eventHub.registerChaincodeEvent(ccid, 'composer', (event, blockNum, txID, status) => { console.log(`got an event: ${event}`); console.log(event.payload); if (status && status === 'VALID') { let evt = event.payload.toString('utf8'); evt = JSON.parse(evt); console.log(`emitting CC event ${evt}`); this.emit('events', evt); } } }, {code} I see that when there is no chaincode event, the payload is a buffer of 2 bytes {code} <Buffer 5b 5d> {code} Which parses to an empty array in javascript. Although I observed this on the new channel event hub, I am pretty sure the same problem still occurs on the old eventhub implementation as well. Note have not tried this with filtered blocks, only with full blocks.  ></description> </Issue>
