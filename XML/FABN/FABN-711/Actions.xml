<Action id="18676" issue="12460" author="jimthematrix@gmail.com" type="comment" created="2016-08-25 04:52:51.0" updateauthor="jimthematrix@gmail.com" updated="2016-08-25 05:00:56.0"> <body><! CDATA  ~harrisob@us.ibm.com  I think it'd be a good idea to break this up into two phases, first to create the basic image that contains the SDK and the CLI, so users would be able to use the CLI to interact with the network (deploy chaincode, invoke transactions, etc.)  I'll submit a separate task for the sample express based app. it'll require some significant work since it should have a decent UI to allow users to do things with the network (which we should enlist some designers to help).  Opened FAB-247 for the 2nd part.  ></body> </Action>
<Action id="18706" issue="12460" author="jimthematrix" type="comment" created="2016-08-29 04:27:54.0" updateauthor="jimthematrix" updated="2016-08-29 04:27:54.0"> <body><! CDATA  ~harrisob@us.ibm.com  I did some digging regarding the error we discussed on Friday that happens when running the peer inside a docker instance created by docker native (for Mac or Windows), as opposed to inside an instance created by Docker Tools, it was because the docker remote API (which the docker client in core/container/dockercontroller/dockercontroller.go uses to manage instances and images) uses /var/run/docker.sock to send commands to the daemon and this file was not present inside the container instance.  One solution is to mount this file in the docker instance and map to the corresponding file on the host.   Add the following lines to the docker-compose.yaml in the peer section: volumes: - /var/run/docker.sock:/var/run/docker.sock  I did a quick test. I was able to get past the error and successfully deploy a chaincode and saw the new container instance created for that chaincode.  Obviously should also test this with instances created with Docker Tools.   ></body> </Action>
