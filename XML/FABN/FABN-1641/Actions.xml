<Action id="70430" issue="46135" author="harrisob@us.ibm.com" type="comment" body="Which NodeSDK version are you working with" created="2020-10-05 12:50:35.0" updateauthor="harrisob@us.ibm.com" updated="2020-10-05 12:50:35.0"/>
<Action id="70433" issue="46135" author="yasser_mas" type="comment" created="2020-10-05 14:16:38.0" updateauthor="yasser_mas" updated="2020-10-05 14:19:30.0"> <body><! CDATA V. 2.2.2,  I'm trying to add it in `gateway.connect( ...)` under 'connection-options' object  ></body> </Action>
<Action id="70522" issue="46135" author="harrisob@us.ibm.com" type="comment" created="2020-10-16 18:54:20.0" updateauthor="harrisob@us.ibm.com" updated="2020-10-16 18:54:20.0"> <body><! CDATA The high level API `fabric-network` does not set this low level setting on the low level API of `fabric-common`.  Have you tried changing the `fabric-common/config/default.json`   {color:#0451a5}"connection-options"{color}{color:#000000}: {{color} {color:#0451a5}"grpc.max_receive_message_length"{color}{color:#000000}: {color}{color:#098658}-1{color}{color:#000000},{color} {color:#0451a5}"grpc.max_send_message_length"{color}{color:#000000}: {color}{color:#098658}-1{color}{color:#000000},{color} {color:#0451a5}"grpc.keepalive_time_ms"{color}{color:#000000}: {color}{color:#098658}120000{color}{color:#000000},{color} {color:#0451a5}"grpc.http2.min_time_between_pings_ms"{color}{color:#000000}: {color}{color:#098658}120000{color}{color:#000000},{color} {color:#0451a5}"grpc.keepalive_timeout_ms"{color}{color:#000000}: {color}{color:#098658}20000{color}{color:#000000},{color} {color:#0451a5}"grpc.http2.max_pings_without_data"{color}{color:#000000}: {color}{color:#098658}0{color}{color:#000000},{color} {color:#0451a5}"grpc.keepalive_permit_without_calls"{color}{color:#000000}: {color}{color:#098658}1{color}{color:#000000},{color} {color:#0451a5}"grpc-wait-for-ready-timeout"{color}{color:#000000}: {color}{color:#098658}3000{color}{color:#000000},{color} {color:#0451a5}"request-timeout"{color}{color:#000000} : {color}{color:#098658}45000{color} {color:#000000} },{color}  another way to change the value is to do the following right after you create and connect to a gateway, this will change just the one low level connection option using the low level fabric-common/Client instance of the "Gateway".   {color:#0000ff}const{color}{color:#000000} myoptions = gateway.client.getConfigSetting({color}{color:#a31515}'connection-options'{color}{color:#000000});{color} {color:#000000} myoptions {color}{color:#a31515}'grpc-wait-for-ready-timeout'{color}{color:#000000}  = {color}{color:#098658}20000{color}{color:#000000};{color} {color:#000000} gateway.client.setConfigSetting({color}{color:#a31515}'connection-options'{color}{color:#000000}, myoptions);{color}   {color:#000000}Also you could get access to the "fabric-common/Client" by doing a require, this could be done at anytime before the "gateway" creates a "network" instance. {color}   {color:#0000ff}const{color}{color:#000000} Client = require({color}{color:#a31515}'fabric-common'{color}{color:#000000}).Client;{color} {color:#0000ff}const{color}{color:#000000} myoptions = Client.getConfigSetting({color}{color:#a31515}'connection-options'{color}{color:#000000});{color} {color:#000000} myoptions {color}{color:#a31515}'grpc-wait-for-ready-timeout'{color}{color:#000000}  = {color}{color:#098658}200022{color}{color:#000000};{color} {color:#000000} Client.setConfigSetting({color}{color:#a31515}'connection-options'{color}{color:#000000}, myoptions);{color}  ></body> </Action>
<Action id="70525" issue="46135" author="yasser_mas" type="comment" created="2020-10-16 19:45:39.0" updateauthor="yasser_mas" updated="2020-10-16 19:45:39.0"> <body><! CDATA I'm not agree with the first line, method connect in gateway class accepting `GatewayOptions`, and GatewayOptions interface accepting `{color:#de350b}connection-options{color}` , not only data types mentioned the connection options but also the implementation accepting connection options and adding it into `client.centralized_options` but it's not used or override as per the code comment and the expected behavior .    Please check the below snippets from fabric client sdk source code      Gateway Class : connect(config: Client | object, options: GatewayOptions): Promise<void>;   Gateway Options interface : export interface GatewayOptions { identity: string | Identity; wallet?: Wallet; identityProvider?: IdentityProvider; clientTlsIdentity?: string; tlsInfo?: { certificate: string; key: string; }; discovery?: DiscoveryOptions; eventHandlerOptions?: DefaultEventHandlerOptions; queryHandlerOptions?: DefaultQueryHandlerOptions; {color:#de350b}'connection-options'?: any;{color} }   Gateway.connect(..) Implementation :    // apply any connection options to the client instance for use // internally by the client instance when building a complete set // of connection options for an endpoint // {color:#de350b}these will be merged with those from the config (default.json){color} if (options 'connection-options' ) { this.client.centralized_options = options 'connection-options' ; logger.debug('%s - assigned connection options'); }      I know there are another ways to update config, but I have got an issue so I have created it   I think this issue should be reopened or removing connection options from implementation and node types   ></body> </Action>
<Action id="70975" issue="46135" author="JIRAUSER20661" type="comment" created="2020-12-16 08:55:25.0" updateauthor="JIRAUSER20661" updated="2020-12-16 08:55:25.0"> <body><! CDATA The issue persists. During some new data put, I get a REQUEST TIMEOUT. I tried to change this timeout value, which is probably low, but it doesn't work.  It probably gets overridden by Fabric in some way.  ></body> </Action>
<Action id="71348" issue="46135" author="bestbeforetoday" type="comment" body="Bret added some fixes to the _master_ branch, which I have merged and cherry-picked back to _release-2.2_" created="2021-02-04 14:43:08.0" updateauthor="bestbeforetoday" updated="2021-02-04 14:43:08.0"/>
<Action id="71349" issue="46135" author="bestbeforetoday" type="comment" body=" ~ricba1995   ~yasser_mas  The fix should now be in published versions of the npm package tagged *unstable-2.2* (from *fabric-network@2.2.6-snapshot.2*)" created="2021-02-04 15:19:55.0" updateauthor="bestbeforetoday" updated="2021-02-04 15:19:55.0"/>
