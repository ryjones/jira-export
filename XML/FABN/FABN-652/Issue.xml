<Issue id="14179" key="FABN-652" number="652" project="10604" reporter="ryokawajp" creator="ryokawajp" type="10001" summary="Performance of transaction payload encryption in HFC 0.6.x" priority="3" resolution="10000" status="6" created="2017-01-19 08:19:47.0" updated="2019-10-12 07:34:08.0" resolutiondate="2017-04-14 11:52:02.0" votes="0" watches="1" workflowId="34383"> <description><! CDATA h2. Summary We measured the time of transferring a large file (30MB) to a blockchain ledger. It took approx. 50 seconds. Additional analysis of Node.js profile and peer logs revealed that 60% of the transfer time is occupied by encryption-related functions, while time for PBFT consensus is about 5 seconds.  I would like to know what is the practical limit of the data size which can be included in a transaction, to design the chaincode interface and data structure. If this bottleneck is improved, then design will be easier.  h2. Background - Our application has functions to upload and download a file to the ledger. - Our application has a 3-tier structure. Client, Node.js app, and Fabric. All of them are deployed in different machines. -- The file is sent from a web browser to a front-end Node.js application through http. -- In the Node.js app, the file is converted to Base 64 encoding and sent as an invoke transaction to Fabric peer using HFC. -- In Fabric, the chaincode receives the file as an argument of a function and store it to World State. - First, we measured the duration between the Member.invoke() and tx.on('submitted', ...). -- This duration does not include the time in Fabric such as the consensus or the chaincode execution. -- The result was 51 seconds for 30MB file. - So in this test we analyze the execution of HFC using Node.js profiler.  h2. Parameters and environments - Fabric v0.6.0-preview - Security and privacy are enabled. - 4 peers and a membersrvc - PBFT consensus - PBFT batch size = 1 - Node.js runtime (version: ) -- 8GB memory on Bluemix - hfc 0.6.5  h2. Test case - Run our Node.js application with the profiling option: node --prof - Upload a file whose size is 30MB from a web browser.  h2. Result - node-prof-process-30mb.txt : this is a stats of the obtained profile data for upload of 30MB file. -- Summary and Bottom up profile are shown in the bottom of this document. - 2017-01-12 10_21_34-chrometracing2.png : a screen shot of Chrome chrome://tracing tool. A profiling log with node --prof --log_timer_events is visualized with 1MB file. -- See this URL for the tool. https://github.com/thlorenz/v8-perf/issues/4 -- We could not obtain a profiling log for 30MB case because of the huge log size. -- Major events are as follows: --- From 0s to 6s: Initialization of Node.js and modules --- From 93s to 110s: Enrollment and TCert retrieval --- From 152s to 171s: File upload. (This part becomes longer as the file size increases)  h2. Interpretation of the result. - The root function name of the call stack is not shown in the stats file but according to the call stack shown in chrome://tracing tool, it seems that ~ArraySlice and *Buffer.toJSON are called from ~Crypto.eciesEncryptECDSA. - Except for UNKNOWN, it seems that all of the durations shown in the stats are related to the cryptography. The amount of the duration is approximately 64%. - I do not understand why Buffer.toJSON appears in the cryptography. Since Buffer.toJSON is a simple data conversion, a large amount of memory is (or many memory chunks are) converted to JSON. - We could not profile the memory usage. However, the memory usage is large. 1GB was not enough and we allocated 8GB for Node.js.   node-prof-process-30mb.txt {noformat}  Summary : ticks  total  nonlib   name 6748   13.2%   56.8%  JavaScript 0    0.0%    0.0%  C++ 1580    3.1%   13.3%  GC 39159   76.7%          Shared libraries 5122   10.0%          Unaccounted   C++ entry points : ticks    cpp   total   name   Bottom up (heavy) profile : Note: percentage shows a share of a particular caller in the total amount of its parent calls. Callers occupying less than 2.0% are not shown.  ticks parent  name 35917   70.4%  /home/vcap/app/vendor/node/bin/node 34613   96.4%    /home/vcap/app/vendor/node/bin/node 16890   48.8%      LazyCompile: *defineProperty native v8natives.js:573:30 16885  100.0%        LazyCompile: *DefineIndexedProperty native array.js:48:31 16884  100.0%          LazyCompile: *SimpleSlice native array.js:267:21 16837   99.7%            LazyCompile: ~ArraySlice native array.js:570:20 9601   27.7%      LazyCompile: *SimpleSlice native array.js:267:21 9592   99.9%        LazyCompile: ~ArraySlice native array.js:570:20 9592  100.0%          Stub: CEntryStub 9592  100.0%            LazyCompile: *Buffer.toJSON buffer.js:783:35 2412    7.0%      LazyCompile: ~stringify native json.js:176:23 2391   99.1%        LazyCompile: ~Crypto.hmac /home/vcap/app/node_modules/hfc/lib/crypto.js:302:38 2389   99.9%          LazyCompile: ~Crypto.eciesEncryptECDSA /home/vcap/app/node_modules/hfc/lib/crypto.js:170:51 2389  100.0%            LazyCompile: ~Crypto.eciesEncrypt /home/vcap/app/node_modules/hfc/lib/crypto.js:202:46 1347    3.9%      LazyCompile: *fromBits /home/vcap/app/node_modules/sjcl-codec/sjcl.js:490:22 1347  100.0%        LazyCompile: *bitsToBytes /home/vcap/app/node_modules/hfc/lib/hash.js:151:24 1347  100.0%          LazyCompile: ~update /home/vcap/app/node_modules/hfc/lib/hash.js:94:22 1347  100.0%            LazyCompile: ~sjcl.misc.hmac.update /home/vcap/app/node_modules/sjcl/sjcl.js:32:315  5122   10.0%  UNKNOWN  2784    5.5%  /lib/x86_64-linux-gnu/libc-2.19.so 1473   52.9%    /home/vcap/app/vendor/node/bin/node 476   32.3%      LazyCompile: ~stringify native json.js:176:23 474   99.6%        LazyCompile: ~Crypto.hmac /home/vcap/app/node_modules/hfc/lib/crypto.js:302:38 474  100.0%          LazyCompile: ~Crypto.eciesEncryptECDSA /home/vcap/app/node_modules/hfc/lib/crypto.js:170:51 474  100.0%            LazyCompile: ~Crypto.eciesEncrypt /home/vcap/app/node_modules/hfc/lib/crypto.js:202:46 411   27.9%      LazyCompile: *SimpleSlice native array.js:267:21 411  100.0%        LazyCompile: ~ArraySlice native array.js:570:20 411  100.0%          Stub: CEntryStub 411  100.0%            LazyCompile: *Buffer.toJSON buffer.js:783:35 63    4.3%      LazyCompile: *parse native json.js:61:19 61   96.8%        LazyCompile: ~parse /home/vcap/app/node_modules/body-parser/lib/types/json.js:71:18 61  100.0%          LazyCompile: <anonymous> /home/vcap/app/node_modules/body-parser/lib/read.js:76:34 61  100.0%            LazyCompile: ~invokeCallback /home/vcap/app/node_modules/raw-body/index.js:254:29 51    3.5%      LazyCompile: *exec native regexp.js:116:30 49   96.1%        LazyCompile: ~firstchar /home/vcap/app/node_modules/body-parser/lib/types/json.js:144:20 49  100.0%          LazyCompile: ~parse /home/vcap/app/node_modules/body-parser/lib/types/json.js:71:18 49  100.0%            LazyCompile: <anonymous> /home/vcap/app/node_modules/body-parser/lib/read.js:76:34  1362    2.7%  LazyCompile: *f /home/vcap/app/node_modules/js-sha3/src/sha3.js:279:20 1361   99.9%    LazyCompile: *Keccak.update /home/vcap/app/node_modules/js-sha3/src/sha3.js:107:38 681   50.0%      LazyCompile: ~update /home/vcap/app/node_modules/hfc/lib/hash.js:94:22 681  100.0%        LazyCompile: ~sjcl.misc.hmac.update /home/vcap/app/node_modules/sjcl/sjcl.js:32:315 681  100.0%          LazyCompile: ~Crypto.hmac /home/vcap/app/node_modules/hfc/lib/crypto.js:302:38 681  100.0%            LazyCompile: ~Crypto.eciesEncryptECDSA /home/vcap/app/node_modules/hfc/lib/crypto.js:170:51 679   49.9%      LazyCompile: ~<anonymous> /home/vcap/app/node_modules/js-sha3/src/sha3.js:32:21 679  100.0%        LazyCompile: ~Crypto.ecdsaSign /home/vcap/app/node_modules/hfc/lib/crypto.js:121:43 679  100.0%          LazyCompile: ~<anonymous> /home/vcap/app/node_modules/hfc/lib/hfc.js:1080:34 679  100.0%            LazyCompile: ~TransactionContext.getMyTCert /home/vcap/app/node_modules/hfc/lib/hfc.js:1168:56 {noformat}   ></description> </Issue>
