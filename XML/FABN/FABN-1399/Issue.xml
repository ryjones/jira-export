<Issue id="42616" key="FABN-1399" number="1399" project="10604" reporter="heatherp" creator="heatherp" type="10101" summary="Move e2e tape integration tests to cucumber / delete pointless FV ones" priority="3" resolution="10001" status="6" created="2019-10-03 14:19:13.0" updated="2019-10-03 15:09:01.0" resolutiondate="2019-10-03 15:08:55.0" votes="0" watches="1" workflowId="55684"> <description><! CDATA From  ~nkl199 :     This email is mainly to provide my summary of current tape integration test conversion, based on comparing the contents of `/test/integration` with `test/scenario` as well as surface these thoughts: * cucumber tests could/should be written in typescript * there is a large number of "should be cucumber" in the tape integration test * there are some tests that should just be deleted in the tape integration test * as much as it pains me, we should retain/convert some true FV tests and run them in our own build only   *Convert Existing e2e scenario buckets* A) integration/e2e  - contains chaincode install failure path  - contains chaincode upgrade scenario  - contains private data queries   B) integration/javachaincode  - contains install/instantiate/invoke/query/upgrade of java chaincode   C) integration/nodechaincode  - contains install/instantiate/invoke/query/upgrade of node chaincode   D) integration/network-e2e  - contains typescript use of network model   Suggestions:  - We don't care what chaincode is used to "flex" the majority of node-sdk features, and we should be agnostic of what chaincode is used. The chaincode tests should test chaincode features. I suggest we use Node chaincode as the "main driver" but we still want to ensure that the SDK can package/deploy any flavour of chaincode. The rest is not our concern.   Required Modifications to cucumber suite: # Convert cucumber suite to use typescript - can then delete item D `integration/network-e2e` # Add node chaincode upgrade scenario and private data query - can then delete items A and C (as well as `integration/e2e.js` that acts as a test bucket) # Add a package/install/instantiate/upgrade path for java and goLang chaincode - delete item B   Completion of the above will put us in good stead for dramatically reducing the tape test e2e suite, but there is more!!     *Just Delete* - configtxlator ... why are we testing channel create/update using a non sdk tool that nobody uses? - create-configtx-channel .... this is a channel creation test that flexes `client.extractChannelConfig` and that is done in many places - discovery.js ... already in a scenario test - eventutil.js ... i can't even see where this utility is used - get-config.js  - memory.js ... this appears to be a resource utilisation test, we can do those offline with more appropriate tools.  - only-admin.js   *Convert to Scenario* - channel-event-hub.js ... registering and receiving events is a scenario     *Discussion Points - Sceanrio, convert to Mocha FV, or delete?* * client.js -> Suggest FV suite as are all `client.createUser()` tests  * fabric-ca key/value store tests (we have local couchDB and CloudAntDB store tests ... yep, there is a cloudant DB sat there we are using!) FV suite or delete * fabric-ca-* ... Suggest FV Suite as these are all high level actions that interact only with the CA * grpc.js .... tests ability to modify grpc settings. Suggest FV suite. * install.js .... includes a "cannot install same name/version chaincode" style test. We can include as an FV suite with additional valid reject scenarios * instantiate.js .... include numerous fail paths for instantiate. Ideal FV test. * invoke.js ... includes failure scenarios based on endorsement policy violation, suggest extended scenario with gateway transaction * network config ... is a combination of replay tests and network config use. Sounds like this needs to be split out into scenario and FV tests * orderer-channel-tests.js ... 3 error cases for orderer (no orderer in config, no data sent to orderer, incorrect orderer URL) FV test  * query.js ... lots of query channel actions ... FV suite * signTransactionOffline.js ... is this something we want to retain? * upgrade.js ... failure scenarios, either move to scenario or a FV suite   *Thoughts* * Whilst we want to extend the scenario tests, we also want to keep them running as fast as possible.... this generally means only including golden path tests, and detailed testing of the component (along with failure paths) is retained in the FV test bucket. Ideally this FV bucket should be mocha based as the tape suite is not fit for purpose. * We should nominate the scenario tests as the tests to be run by the fabric merge build  ></description> </Issue>
