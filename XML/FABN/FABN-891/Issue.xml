<Issue id="33217" key="FABN-891" number="891" project="10604" reporter="shimos" assignee="shimos" creator="shimos" type="10004" summary="Inconsistency between documentation and types" priority="3" resolution="10000" status="6" created="2018-08-24 21:23:19.0" updated="2018-09-04 23:40:07.0" resolutiondate="2018-09-04 23:40:07.0" votes="0" watches="1" workflowId="44434"> <description><! CDATA There is still inconsistency between API documentation and type definition in fabric-sdk-node. For example, it is not possible for a Typescript client to specify private collection setting when it instantiates a chaincode because the type definition ({{fabric-client/types/index.d.ts}}) for {{ChaincodeInstantiateUpgradeRequest}} lacks {{collections-config}} as following:  {code} export interface ChaincodeInstantiateUpgradeRequest { targets?: Peer   | string  ; chaincodeType?: ChaincodeType; chaincodeId: string; chaincodeVersion: string; txId: TransactionId; transientMap?: any; fcn?: string; args?: string  ; 'endorsement-policy'?: any; } {code}  Another example is `targets` field found in several objects such as {{JoinRequest}}. The field accepts both an array of Peer objects and an array of strings (names of peers) in implementation. The type definition allows both but the documentation only specifies {{Peer  }} as in {{fabric-client/lib/Channel.js}}:  {code} /** * @typedef {Object} JoinChannelRequest * @property {Peer  } targets - Optional. An array of Peer objects or Peer names that will {code}   ></description> </Issue>
