<Action id="54089" issue="35749" author="bestbeforetoday" type="comment" created="2018-11-30 16:45:18.0" updateauthor="bestbeforetoday" updated="2018-11-30 16:46:01.0"> <body><! CDATA The proposal responses in element 0 of the array returned by Channel.sendTransactionProposal() can each be either a ProposalResponse (status < 400) or an Error object (for valid responses with a message and status >= 400, or for genuine runtime errors). I amended the TypeScript definitions to reflect this behaviour in FABN-987. Where the Error object represents a valid response (with a message and status >= 400), it has an *isProposalResponse* property added with the value *true*, and is augmented with the content of the ProposalResponse's *response* property.  That's the behaviour of the code; whether it is correct or not, I am much less sure.  I guess the most obvious options are: # The responses are all either ProposalResponse objects or plain Error objects (only for runtime errors), and it is the responsibility of the caller to check the status of the ProposalResponse status to see if the response was good. This requires the caller to check both whether each potential response is an instanceof Error and also check its status, but maintains clear type separation, which is much easier to deal with in TypeScript. # Both error responses and runtime errors are returned as Error objects (as now) and the Error objects representing error responses have the isProposalResponse property set (as now) but they are augmented with the entire ProposalResponse, not just the ProposalResponse.response content. This allows the caller to find only the good responses by just checking instanceof Error and, although the shape of errors is inconsistent, should allow Errors where isProposalResponse is true to be treated as ProposalResponse objects. # Improve the documentation to describe the current behaviour. This avoids any risk of breaking people who have adapted to the current behaviour.     Any thoughts on the best approach above or for better alternatives?  In a perfect world perhaps I would prefer to completely re-think the way results are returned but that would break people for sure. If there was a strong preference for this approach then I guess it would be possible to add an alternative to the sendTransactionProposal() function that was more friendly while leaving the current behaviour intact.  ></body> </Action>
<Action id="57315" issue="35749" author="bestbeforetoday" type="comment" created="2019-02-19 17:38:11.0" updateauthor="bestbeforetoday" updated="2019-02-19 17:39:28.0"> <body><! CDATA Looking at this again for Fabric 2.0 where we have scope to re-work the API a little. Another consideration is that we now have the higher level _fabric-network_ API, which removes the need for client code to worry about the proposal responses for evaluating (query) and submitting transactions. So first question is: is it worth making breaking changing the low-level API now?  Assuming it is worth changing...  sendTransactionProposal() currently returns a "ProposalResponseObject", which is an array with two elements: 0 is an array or ProposalResponse | Error objects; 1 is the proposal. For me it would be more friendly if the return value was an object with named properties instead of a 2-element array.  As raised by this Jira, the array of ProposalResponse (for successful responses) | Error (for unsuccessful responses and genuine errors) is not very friendly. I think what client code cares about is: * Successful proposal responses, so they can be sent to the orderer. * Unsuccessful proposal responses, for diagnostic purposes. * Genuine errors (e.g. malformed peer responses, network errors etc.), for diagnostic purposes.     What if we presented on the "ProposalResponseObject" a named property for each of these categories of responses, with the value being an array of the actual values? This gives easy access to each category of response and a consistent object type for all the values within a given array.  For debugging it is useful to know from which peer each response originated. I think this is already the case today since both the ProposalResponse and Error objects are augmented with RemoteCharacteristics (peer URL, name and options), but the TypeScript definitions don't reflect this.  Thoughts?  ></body> </Action>
<Action id="57316" issue="35749" author="caroline-church" type="comment" body="Even though we have the high level api we don&apos;t currently have functionality for installing smart contracts which is where i was seeing the problem, so i think we should change it. I don&apos;t really have any thoughts on how it should be changed as long as the returned data is consistent" created="2019-02-19 17:51:13.0" updateauthor="caroline-church" updated="2019-02-19 17:51:13.0"/>
<Action id="57347" issue="35749" author="bestbeforetoday" type="comment" created="2019-02-20 10:18:29.0" updateauthor="bestbeforetoday" updated="2019-02-20 10:18:29.0"> <body><! CDATA For clarity, what I am proposing as a possible API change in my previous comment is for the ProposalResponseObject returned from installChaincode(), sendInstantiateProposal(), sendUpgradeProposal() and sendTransactionProposal(), which today looks like: {code:javascript} export type ProposalResponseObject =  Array<Client.ProposalResponse | Error>, Client.Proposal ; {code}  To change to look something like: {code:javascript} export interface ProposalError extends Error {     peer: RemoteCharacteristics; }  export interface ProposalResponseObject {     errors: ProposalError  ;     invalidResponses: Client.ProposalResponse  ;     proposal: Client.Proposal;     validResponses: Client.ProposalResponse  ; } {code}  ></body> </Action>
<Action id="57779" issue="35749" author="bestbeforetoday" type="comment" created="2019-03-01 13:12:06.0" updateauthor="bestbeforetoday" updated="2019-03-01 13:12:39.0"> <body><! CDATA While working this change, there seem to be several pieces of code that do different checks on the status: some look for >=400 as error and <400 as success; some look for only 200 as success and everything else as unsuccessful. So I've currently not attempted to separate valid/invalid responses and implemented the ProposalResponseObject as:   {code:javascript} export interface PeerError extends Error { peer: RemoteCharacteristics; }   export interface ProposalResponseObject { errors: PeerError  ; proposal: Proposal; responses: ProposalResponse  ; }{code} Note that ProposalResponse also has a peer property of type RemoteCharacteristics, so you always know which peer returned which response or error.  It is left for the client code to determine the status of the response using criteria appropriate to their needs, for example: {code:javascript} const successResponses = responseObject.responses.filter((proposalResponse) => proposalResponse.response.status === 200);{code}    ></body> </Action>
<Action id="62455" issue="35749" author="bestbeforetoday" type="comment" body="I got 95% of the way there with this change but just didn&apos;t have the discovery pathways working. Since then there is some major refactoring work underway on the internals of the SDK by  ~harrisob@us.ibm.com , so this might be something that can be rolled into that." created="2019-07-31 09:54:09.0" updateauthor="bestbeforetoday" updated="2019-07-31 09:54:09.0"/>
<Action id="64262" issue="35749" author="bestbeforetoday" type="comment" body="This will all change in v2.0 of the SDK due to refactoring taking place in FABN-1347." created="2019-10-02 13:23:17.0" updateauthor="bestbeforetoday" updated="2019-10-02 13:23:17.0"/>
