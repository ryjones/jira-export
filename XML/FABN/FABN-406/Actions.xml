<Action id="38896" issue="26767" author="jyellick" type="comment" created="2018-01-19 15:06:56.0" updateauthor="jyellick" updated="2018-01-19 15:07:45.0"> <body><! CDATA I would appreciate some eyes on this from  ~harrisob@us.ibm.com , but I believe this is most likely a problem marshaling the org definition.  The configtxlator framework handles converting between JSON and protobuf in a custom way.  In particular, it turns fields which are specified as opaque bytes into unmarshaled representations of those bytes.  I believe the line:  {noformat} updated_config.channel_group.groups.Application.groups orgMSP =JSON.parse(org_content); {noformat}  is assigning the raw JSON into this map, and the proto marshaling is not capable of converting the nested JSON into the opaquely marshaled bytes.  Could you please include the output of the orderer log at debug level when this submission fails?  ></body> </Action>
<Action id="38950" issue="26767" author="silentspark" type="comment" created="2018-01-22 09:18:25.0" updateauthor="silentspark" updated="2018-01-22 09:18:25.0"> <body><! CDATA Hi Jason,       Thx for your feedback. Attached the orderer log with DEBUG level. ^orderer.log   ></body> </Action>
<Action id="38973" issue="26767" author="jyellick" type="comment" created="2018-01-22 16:17:13.0" updateauthor="jyellick" updated="2018-01-22 16:17:13.0"> <body><! CDATA  ~silentspark  as you can see in your log:  {noformat} 2018-01-22 09:15:45.840 UTC  orderer/main  Broadcast -> DEBU 8e5 Starting new Broadcast handler 2018-01-22 09:15:45.840 UTC  orderer/common/broadcast  Handle -> DEBU 8e6 Starting new broadcast loop 2018-01-22 09:15:45.840 UTC  orderer/common/broadcast  Handle -> DEBU 8e7 Preprocessing CONFIG_UPDATE 2018-01-22 09:15:45.840 UTC  orderer/configupdate  Process -> DEBU 8e8 Processing channel reconfiguration request for channel testchainid 2018-01-22 09:15:45.840 UTC  orderer/common/broadcast  Handle -> WARN 8e9 Rejecting CONFIG_UPDATE because: Error authorizing update: unexpected EOF 2018-01-22 09:15:45.840 UTC  orderer/main  func1 -> DEBU 8ea Closing Broadcast stream {noformat}   the reason the orderer is rejecting your request is because *Error authorizing update: unexpected EOF*.  This implies that the JSON has not been converted back into protobuf correctly and so the unmarshaling has failed.    ~harrisob@us.ibm.com  can you take a look?  ></body> </Action>
<Action id="38989" issue="26767" author="jyellick" type="comment" body="I discussed this with  ~harrisob@us.ibm.com  directly, and it looks like your code is not properly checking the HTTP response codes.  My strong suspicion is that you are getting back an error on one of the calls to &apos;encode&apos;, which is then propagating all the way to the orderer." created="2018-01-22 19:49:57.0" updateauthor="jyellick" updated="2018-01-22 19:49:57.0"/>
<Action id="39006" issue="26767" author="silentspark" type="comment" body="Hi  ~jyellick  ,  ~harrisob@us.ibm.com .  I didn&apos;t get error back from configtxlator encode. I uploaded the update_config_json and update_config_proto. They look good. Could you take a look or test my nodejs code, let me know the problem in my code?" created="2018-01-23 02:53:03.0" updateauthor="silentspark" updated="2018-01-23 02:53:03.0"/>
<Action id="39041" issue="26767" author="jyellick" type="comment" body=" ~silentspark  I am actively investigating this with  ~harrisob@us.ibm.com , we have been able to reproduce this with the node SDK.  Surprisingly though, taking the same artifacts and using curl instead of the node POST request produces a valid config update.  We are trying to identify the reason for this discrepancy." created="2018-01-23 20:07:36.0" updateauthor="jyellick" updated="2018-01-23 20:07:36.0"/>
<Action id="39080" issue="26767" author="harrisob@us.ibm.com" type="comment" created="2018-01-24 20:30:41.0" updateauthor="harrisob@us.ibm.com" updated="2018-01-24 20:30:41.0"> <body><! CDATA please change to use the following in your request to compute the config update          return new Promise((resolve, reject) =>\{             requester.post(\{                 url: 'http://127.0.0.1:7059/configtxlator/compute/update-from-configs',                 encoding: null,                 headers: \{                     accept: '*/*',                     expect: '100-continue'                 },                 formData: formData             }, function optionalCallback(err, res, body) \{                 if (err) \{                     t.fail('Failed to get the updated configuration ::'+err);                     reject(err);                 } else \{                     var proto = Buffer.from(body, 'binary');                     resolve(proto);                 }             });         });     notice the addition of  encoding and headers  ></body> </Action>
<Action id="39110" issue="26767" author="silentspark" type="comment" created="2018-01-25 15:10:47.0" updateauthor="silentspark" updated="2018-01-25 15:10:47.0"> <body><! CDATA Hi Bret, it works, thx a lot!  Will the configtxlator be improved to handle the post request without null encoding and headers correctly?  ></body> </Action>
<Action id="39114" issue="26767" author="jyellick" type="comment" created="2018-01-25 16:22:20.0" updateauthor="jyellick" updated="2018-01-25 16:22:20.0"> <body><! CDATA  ~silentspark  I'm not in a position to easily test this, but I don't think all of the header fields are necessarily required, these are simply the header components which curl was setting.  I'd suggest that you try paring them down until you find the minimal set required.  {{configtxlator}} does nothing special, it uses standard golang HTTP libraries plus Gorilla Mux.  If I had to guess, the POST from Node is probably defaulting to request some encoding which changes the returned bytes, and the golang code is obliging.    You can see the actual code from {{configtxlator}} here: https://github.com/hyperledger/fabric/blob/master/common/tools/configtxlator/rest/configtxlator_handlers.go#L32-L91  Note, there is no processing of the headers, nothing in this code which would change based on the specified headers, so it seems like the change is most likely happening inside of core golang code (and outside the scope of fabric).  ></body> </Action>
<Action id="39210" issue="26767" author="silentspark" type="comment" created="2018-01-27 04:01:40.0" updateauthor="silentspark" updated="2018-01-27 04:01:40.0"> <body><! CDATA Hi Jason, Bret,      Thx for your help on this issue!  ></body> </Action>
