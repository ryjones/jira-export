<Issue id="46876" key="FABG-1039" number="1039" project="10610" reporter="JIRAUSER21909" creator="JIRAUSER21909" type="10004" summary="gateway.Connect with wrong identity creates infinite retry loop" priority="3" status="10000" created="2021-05-23 16:17:12.0" updated="2021-05-24 07:33:31.0" votes="0" watches="1" workflowId="60779" archived="N"> <description><! CDATA fabric-sdk-go v1.0.0  When calling GetNetwork with an incorrect identity, we run into an infinite refresh scenario.     Consider the following code, where the identity passed with `WithIdentity` doesn't correspond to the peer's MSPID): {code:go} gw, err := gateway.Connect( 	gateway.WithConfig(ci.config), 	gateway.WithIdentity(ci.wallet, label), ) network, err := gw.GetNetwork(channel) {code}    This will fail with error {code:go} could not get chConfig cache reference: QueryBlockConfig failed: QueryBlockConfig failed: target(s) required {code}    This makes sense, since there's no valid target. In calculateTargetsFromConfig: {code:go} // Pick peers in the same MSP as the context since only they can query system chaincode if newPeer.MSPID() == ctx.Identifier().MSPID { 	targets = append(targets, newPeer) } {code}    The stack trace is the following {code:go} github.com/hyperledger/fabric-sdk-go/pkg/fab/chconfig.(*ChannelConfig).queryBlockFromPeers(0xc000da4000, 0x13734a0, 0xc000d90300, 0xc000d90300, 0xc000d941e0, 0x13734d8) /usr/src/fabric-sdk-go/pkg/fab/chconfig/chconfig.go:173 +0x37 github.com/hyperledger/fabric-sdk-go/pkg/fab/chconfig.(*ChannelConfig).queryPeers(0xc000da4000, 0x13734a0, 0xc000d90300, 0x13734d8, 0x1360200, 0xc000d8e100) /usr/src/fabric-sdk-go/pkg/fab/chconfig/chconfig.go:163 +0x45 github.com/hyperledger/fabric-sdk-go/pkg/fab/chconfig.(*ChannelConfig).Query(0xc000da4000, 0x13734a0, 0xc000d90300, 0x1, 0x1, 0x13734a0, 0xc000d90300) /usr/src/fabric-sdk-go/pkg/fab/chconfig/chconfig.go:159 +0x9b github.com/hyperledger/fabric-sdk-go/pkg/fab/chconfig.(*Ref).getConfig(0xc000d86140, 0x0, 0x0, 0x0, 0x0) /usr/src/fabric-sdk-go/pkg/fab/chconfig/reference.go:69 +0x1d2 github.com/hyperledger/fabric-sdk-go/pkg/fab/chconfig.(*Ref).initializer.func1(0x48b7a63bd8ee, 0xc014613b20, 0x14613b2000c5f080, 0x60aa7cad) /usr/src/fabric-sdk-go/pkg/fab/chconfig/reference.go:51 +0x45 github.com/hyperledger/fabric-sdk-go/pkg/util/concurrent/lazyref.New.func1(0x0, 0x0, 0xc0007ae078, 0xc000c28688, 0xbeec25, 0xc000da0038) /usr/src/fabric-sdk-go/pkg/util/concurrent/lazyref/lazyref.go:90 +0x26 github.com/hyperledger/fabric-sdk-go/pkg/util/concurrent/lazyref.NewWithData.func1(0x0, 0x0, 0x0, 0x11a5300, 0xc000d86140, 0x0) /usr/src/fabric-sdk-go/pkg/util/concurrent/lazyref/lazyref.go:113 +0x4f github.com/hyperledger/fabric-sdk-go/pkg/util/concurrent/lazyref.(*Reference).Get(0xc000da0000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0) /usr/src/fabric-sdk-go/pkg/util/concurrent/lazyref/lazyref.go:163 +0xf2 github.com/hyperledger/fabric-sdk-go/pkg/fabsdk/provider/chpvdr.(*contextCache).GetChannelConfig(0xc000d900c0, 0xc000b89797, 0x9, 0x30, 0x20, 0xc000b90b40, 0x1225552) /usr/src/fabric-sdk-go/pkg/fabsdk/provider/chpvdr/contextcache.go:190 +0x85 github.com/hyperledger/fabric-sdk-go/pkg/fabsdk/provider/chpvdr.(*contextCache).GetEventService(0xc000d900c0, 0xc000b89797, 0x9, 0x0, 0x0, 0x0, 0x30, 0x10a3fe0, 0x1, 0xc000d88270) /usr/src/fabric-sdk-go/pkg/fabsdk/provider/chpvdr/contextcache.go:165 +0x45 github.com/hyperledger/fabric-sdk-go/pkg/fabsdk/provider/chpvdr.(*ChannelService).EventService(0xc000d88150, 0x0, 0x0, 0x0, 0xc000c288e8, 0x203000, 0x203000, 0x203000) /usr/src/fabric-sdk-go/pkg/fabsdk/provider/chpvdr/chprovider.go:104 +0x65 github.com/hyperledger/fabric-sdk-go/pkg/client/channel.New(0xc0005d5cc0, 0x0, 0x0, 0x0, 0x10f0300, 0xc000c28901, 0xc0005d5cc0) /usr/src/fabric-sdk-go/pkg/client/channel/chclient.go:65 +0x1c8 github.com/hyperledger/fabric-sdk-go/pkg/gateway.newNetwork(0xc00024abd0, 0xc0005d5cc0, 0x9, 0xc000c80d00, 0x2) /usr/src/fabric-sdk-go/pkg/gateway/network.go:32 +0x85 github.com/hyperledger/fabric-sdk-go/pkg/gateway.(*Gateway).GetNetwork(0xc00024abd0, 0xc000b89797, 0x9, 0xc000b89797, 0x9, 0xc000c80cf0) /usr/src/fabric-sdk-go/pkg/gateway/gateway.go:256 +0xfe {code} So this is all pretty much expected.    ----    *Now for the issue.*  The problem, is that refreshValue will keep on trying *forever*    {code:go}  fabsdk/util  2021/05/23 16:06:31 UTC - lazyref.(*Reference).refreshValue -> WARN Error - initializer returned error: QueryBlockConfig failed: QueryBlockConfig failed: target(s) required. Will retry again later                                                                                                                                                                                                  {code}    This time, the stack trace is {code:go} github.com/hyperledger/fabric-sdk-go/pkg/fab/chconfig.(*ChannelConfig).queryBlockFromPeers(0xc0002ed8f0, 0x13734a0, 0xc000ed2ba0, 0xc000ed2ba0, 0xc000dd9010, 0x13734d8) /usr/src/myproject/fabric-sdk-go/pkg/fab/chconfig/chconfig.go:173 +0x37 github.com/hyperledger/fabric-sdk-go/pkg/fab/chconfig.(*ChannelConfig).queryPeers(0xc0002ed8f0, 0x13734a0, 0xc000ed2ba0, 0x13734d8, 0x1360200, 0xc000c23e40) /usr/src/myproject/fabric-sdk-go/pkg/fab/chconfig/chconfig.go:163 +0x45 github.com/hyperledger/fabric-sdk-go/pkg/fab/chconfig.(*ChannelConfig).Query(0xc0002ed8f0, 0x13734a0, 0xc000ed2ba0, 0x1, 0x1, 0x13734a0, 0xc000ed2ba0) /usr/src/myproject/fabric-sdk-go/pkg/fab/chconfig/chconfig.go:159 +0x9b github.com/hyperledger/fabric-sdk-go/pkg/fab/chconfig.(*Ref).getConfig(0xc0005d4000, 0x0, 0x0, 0x0, 0x0) /usr/src/myproject/fabric-sdk-go/pkg/fab/chconfig/reference.go:69 +0x1d2 github.com/hyperledger/fabric-sdk-go/pkg/fab/chconfig.(*Ref).initializer.func1(0xc00136ce20, 0xa1e911, 0x5, 0x34) /usr/src/myproject/fabric-sdk-go/pkg/fab/chconfig/reference.go:51 +0x45 github.com/hyperledger/fabric-sdk-go/pkg/util/concurrent/lazyref.New.func1(0x0, 0x0, 0x11cca11, 0xc000375500, 0xc0006f5e00, 0x1b0ce58) /usr/src/myproject/fabric-sdk-go/pkg/util/concurrent/lazyref/lazyref.go:90 +0x26 github.com/hyperledger/fabric-sdk-go/pkg/util/concurrent/lazyref.NewWithData.func1(0x0, 0x0, 0xc000dd8f60, 0x1, 0x1, 0xc000d2b04a) /usr/src/myproject/fabric-sdk-go/pkg/util/concurrent/lazyref/lazyref.go:113 +0x4f github.com/hyperledger/fabric-sdk-go/pkg/util/concurrent/lazyref.(*Reference).refreshValue(0xc000625180) /usr/src/myproject/fabric-sdk-go/pkg/util/concurrent/lazyref/lazyref.go:362 +0x36 github.com/hyperledger/fabric-sdk-go/pkg/util/concurrent/lazyref.(*Reference).handleExpiration(0xc000625180) /usr/src/myproject/fabric-sdk-go/pkg/util/concurrent/lazyref/lazyref.go:341 +0xc2 github.com/hyperledger/fabric-sdk-go/pkg/util/concurrent/lazyref.checkTimeStarted(0xc000625180, 0x0) /usr/src/myproject/fabric-sdk-go/pkg/util/concurrent/lazyref/lazyref.go:300 +0x1f6 created by github.com/hyperledger/fabric-sdk-go/pkg/util/concurrent/lazyref.(*Reference).ensureTimerStarted {code}    In addition to using resources unnecessarily, this can be problematic because it keep on outputing lines to logs, seemingly forever.  ></description> </Issue>
