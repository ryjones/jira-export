<Issue id="18764" key="FABG-660" number="660" project="10610" reporter="emir.heidinger" creator="emir.heidinger" type="10001" summary="SDK-Go - Improve Fabric-Txn and def/fabapi packages with better structure and functionality" priority="3" resolution="10000" status="6" created="2017-06-28 19:35:00.0" updated="2018-07-20 19:17:04.0" resolutiondate="2018-03-19 20:42:03.0" votes="0" watches="1" workflowId="34688"> <description><! CDATA Work Items (create a new ticket when you pick up one of the items):  1 - Create a README.md file that describes the usage of the fabric-txn package  2 - SendInstallCC should not change the GOPATH. Instead, the function should accept an absolute path or a path relative to the GOPATH for chaincodes.  -3 - Extract the logic that checks if a primary peer has a joined a channel out of the JoinChannel and CreateChannel functions. The logic should be in its own helper function.-  4 - Create a default implementation context struct in the defaultImpl package that contains the necessary interfaces (client, user, channel, etc). This struct will be used as a parameter to the default implementation factory methods.  5 - Rename packages/files to more suitable names. Particularly, for both admin and non-admin functions, create files that contain these functions with good logical separation. (channel functions in a channel.go file, user functions in a user.go file, etc). Rename the common.go file and move its functionality where needed.  6 - Simple transactional API (txn, query, load network config) that uses subpackages from 5.  7 - Allow general pattern where APIs simply use config OR take a manually constructed struct of the same form as config.  8 - Unit tests   9 - Samples and documentation for the fabric-txn package.  10 - Split the fabric-sdk-go README - direct the user to information about the fabric-txn package vs information about the subpackages (including fabric-client and fabric-ca-client). The latter should also link the specification for fabric clients.  11 - Better name for -"defaultImpl"- def/fabapi  12 - Create an executor interface that def/fabapi can use for client defined behaviours (e.g., default peer to use, response filtering, ...)  13 - SDK entry point that uses #4.  14 - Add bootstrap command binary tool that allows users to create a network with channels and chaincode installed and deployed based on a yaml configuration file.  15 - Change function definitions to accept an optional ’Submitter’ parameter and add support for storing multiple user contexts(org user, admin user, etc.) ... (or session parameter)  16 - Have the SDK provide access to SystemClient (instance of FabricClient) and ChannelClient (instance of Channel). In those higher-level interfaces, we should have simplicity and immutability — provide parameters like Peers upfront without add/remove (create a new SystemClient or FabricClient when different parameters are needed.     ></description> </Issue>
