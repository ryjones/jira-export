<Issue id="40742" key="FABG-878" number="878" project="10610" reporter="pablolalloni" creator="pablolalloni" type="10001" summary="Expose complete information when returning errors" priority="2" status="10100" created="2019-06-21 15:00:07.0" updated="2019-06-21 15:03:27.0" votes="0" watches="1" workflowId="53696"> <description><! CDATA When the sdk responds with an error we need to have detailed information about what happened including at least responses from all peers & orderer (if available).  Currently just an `error` is returned which may be  `*github.com/hyperledger/fabric-sdk-go/pkg/common/errors/status.Status` containing a `Details   interface{}` with some `  byte` with an opaque `string`. Instead, we need to get the full proposal & responses from all intervening parties in its full struct forms.  I see three approaches on this:  # add a richer structure to the `error` returned # return a complete response from api calls (e.g. from `channel.Execute(...)`) even when returning an `error` # do not consider chaincode status >399 as errors but as a business result (so return the full api response and no `error`)  I believe the correct design is the third option: reserve `error` for "system" errors (e.g. can't connect to peers) but get full responses when chaincodes complete the request. Analogy: http server answers with status code 404 is not an http error but a correct http response which the client software is supposed to handle, in application level.  The second is the easier to implement, in fact we are currently using a patched fabrick-sdk-go which does just that in a very small patch which I'll share in a CR soon.  The first one might be the correct one if the third doesn't pass through "design police" successfuly but would require more code in error handling and in common/error.  ></description> </Issue>
