<Issue id="42342" key="FABG-909" number="909" project="10610" reporter="aleksandar.likic" assignee="aleksandar.likic" creator="aleksandar.likic" type="10001" summary="Multi-org channel config update" priority="3" resolution="10000" status="6" created="2019-09-13 03:14:39.0" updated="2020-07-03 15:10:02.0" resolutiondate="2020-07-03 15:10:02.0" votes="0" watches="1" workflowId="55397"> <description><! CDATA SaveChannel ( https://github.com/hyperledger/fabric-sdk-go/blob/3b103fa1b5703e03ed5315b78d07ab7bb96cbfd1/pkg/client/resmgmt/resmgmt.go#L927 ) and UpdateChannelConfig ( https://github.com/hyperledger/fabric-sdk-go/blob/3b103fa1b5703e03ed5315b78d07ab7bb96cbfd1/pkg/client/resmgmt/resmgmt.go#L984 ) provide methods for creating and updating a channel configuration. There are problems with usage of these methods in a general case when a change (a new channel configuration or an update) has to be signed by multiple orgs. # Both methods allow passing in a list of signing identities ( https://github.com/hyperledger/fabric-sdk-go/blob/3b103fa1b5703e03ed5315b78d07ab7bb96cbfd1/pkg/client/resmgmt/resmgmt.go#L117 ). If the list is passed in the request, SDK signs the configuration change on behalf of the provided identities (otherwise the change is signed only by the caller). This is problematic as keys from one org shouldn't be available to other orgs to sign with. The correct way to go about signing by multiple orgs is to use WithConfigSignatures option ( https://github.com/hyperledger/fabric-sdk-go/blob/d2b42602e52e051adfe74fef3d99badc0b2b4250/pkg/client/resmgmt/opts.go#L115).  The channel config update Tx should be signed by multiple orgs out of band and all signatures should be submitted by one org, as demonstrated by test case at  https://github.com/hyperledger/fabric-sdk-go/blob/3b103fa1b5703e03ed5315b78d07ab7bb96cbfd1/test/integration/e2e/orgs/multi_orgs_ch_update_signatures_test.go#L70 . # UpdateChannelConfig was motivated by the need to have a simplified workflow where SDK client could retrieve channel configuration as protobuf, make changes to the configuration, and submit it back to SDK for simple channel update. While it is very convenient when it is sufficient to sign the change by only one org (the caller), It is not useful in the more general case when the change has to be signed by multiple orgs. One useful function provided by UpdateChannelConfig is calculation of channel config update Tx based on the diff between the desired channel config and current channel config. This function is, however, not exposed by SDK. The correct way to go about the use case with multiple orgs is to expose the ability to calculate the config change Tx. This would enable a workflow in which the participating orgs would be able to independently calculate the channel update Tx based on the proposed configuration change, sign it, and then one org could use the existing SaveChannel(WithConfigSignatures) to submit the change. UpdateChannelConfig would then become redundant.  Proposed code changes: # Deprecate SaveChannelRequest.SigningIdentities ( https://github.com/hyperledger/fabric-sdk-go/blob/3b103fa1b5703e03ed5315b78d07ab7bb96cbfd1/pkg/client/resmgmt/resmgmt.go#L117 ) # Replace UpdateChannelConfig with CalculateConfigUpdate function which calculates channel update Tx based on the desired channel config and current channel config. # Write an integration test to demonstrate the following workflow: ## Retrieve current channel config as protobuf ## Produce the desired channel config by making changes to current config ## Calculate channel update Tx based on the diff between current and desired channel config ## Sign the channel update Tx by multiple orgs ## Use SaveChannel(WithConfigSignatures) to update the channel config ## Verify that the change is correctly applied ## Of course, coordination between orgs to communicate the desired channel config and collect signatures is out of scope of SDK.  ></description> </Issue>
