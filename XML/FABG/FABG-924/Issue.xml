<Issue id="43634" key="FABG-924" number="924" project="10610" reporter="aleksandar.likic" assignee="aleksandar.likic" creator="aleksandar.likic" type="10001" summary="Simplify upstream patching" priority="3" resolution="10000" status="6" created="2019-12-07 03:58:53.0" updated="2020-07-03 15:08:26.0" resolutiondate="2020-07-03 15:08:26.0" votes="0" watches="1" workflowId="57483"> <description><! CDATA Fabric-sdk-go reuses fabric and fabric-ca code by first copying desired files from upstream repos and then patching them to work locally. The process of patching involves running shell scripts containing sed commands and applying additional pre-prepared git patches. It is very complicated and difficult to maintain.  Here we propose simplification of the way fabric code is reused. The new method still has two steps - copying from upstream and patching, but patching is now a simple git merge which replays changes from the last successful patch. For this to work, the two steps (pulling files from upstream and patching) must always be maintained in their own separate commits each time we pull in the new upstream version.  Note that replaying changes from old commits using a simple 'git am' doesn't work well because a git patch created with 'git format-patch' doesn't have a knowledge of the common ancestor of the master and the commit we want to replay, so we end up with many unexpected conflicts.  Here are full steps for pulling code from upstream and patching:  > make thirdparty-pin  We must now commit upstream files first. This will keep the subsequent patch in its own clean commit so we can use it in the future. > git add . > git commit --signoff -m "Apply upstream"  Now we need to replay changes from the last correct patch. We do it using git, with the help of a temporary branch where we first copy the changes we want to replay. This example assumes that the last correct patch was committed as ‘5678’, and its parent is the commit ‘1234’. > git format-patch --stdout 1234..5678 > ~/last.patch  > git checkout -b fix 1234 > git am ~/last.patch > git checkout master > git merge fix  If necessary, fix any conflicts and commit Amend as required, and push all commits.  ></description> </Issue>
