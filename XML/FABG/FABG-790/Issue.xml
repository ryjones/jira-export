<Issue id="35272" key="FABG-790" number="790" project="10610" reporter="yoondo" creator="yoondo" type="10004" summary="Deliver streams are not closed on Peer." priority="3" status="10300" created="2018-11-12 10:29:02.0" updated="2018-11-12 12:25:03.0" votes="0" watches="1" workflowId="46715"> <description><! CDATA Sometimes Peer's deliver stream processing is not terminated after StreamConnection's Close() is called by SDK.  The SDK uses gRPC's CloseSend() to close the stream. But CloseSend() doesn't seem to terminate Peer's stream processing. I think explicit cancelling of gRPC context is required to terminate the stream and prevent unnecessary resource consumption on Peers.  Janitor's sweeping of raw connections leads to termination of Peer's stream processing. But it's not deterministic and might take very long time.  When I tested Close() with explicit context cancellation, Peer's deliver job was terminated right away.    {code:java} type StreamProvider func(conn *grpc.ClientConn) (grpc.ClientStream, context.CancelFunc, error)  type StreamConnection struct { 	*GRPCConnection 	chConfig fab.ChannelCfg 	stream   grpc.ClientStream 	cancel   context.CancelFunc // Added for explicit termination 	lock     sync.Mutex }  func (c *StreamConnection) Close() { 	c.lock.Lock() 	defer c.lock.Unlock() 	if c.Closed() { 		return 	}  	// Cancelling the gRPC context explicitly 	logger.Debug("Cancelling stream context ....") 	c.cancel()  	c.GRPCConnection.Close() } {code}  ></description> </Issue>
