<Issue id="27613" key="FABG-301" number="301" project="10610" reporter="ga25waq" assignee="sandrav" creator="ga25waq" type="10004" summary="ChannelClient: EventHub is not connected properly?" priority="3" resolution="10000" status="6" created="2018-02-11 02:15:40.0" updated="2018-07-18 23:52:27.0" resolutiondate="2018-02-12 21:14:23.0" votes="0" watches="2" workflowId="33100"> <description><! CDATA It looks as if the underlying EventHub of a ChannelClient does not get connected unless a transaction is executed (actually, the EventHub is connected in package txnhandler).  If no transaction is executed or only a query is performed, the event hub will not be connected.  The ChannelClient does not export the underlying event hub, so the user has no possibility to connect to it manually.  I've temporarily added {code:java} if !cc.eventHub.IsConnected() { cc.eventHub.Connect() } {code} to the ChannelClient's method > RegisterChaincodeEvent(chan<- *chclient.CCEvent, string, string) chclient.Registration  The error handling is missing here. Maybe it's useful to return > (chclient.Registration, error) for the RegisterChaincodeEvent method.  In my application, the Go channel handed over to RegisterChaincodeEvent now gets populated when the corresponding chaincode event is emitted.  Is that expected behaviour, i.e. should the underlying EventHub of a ChannelClient only be connected after a transaction has been executed? I can think of many use cases where a user just wants to subscribe to a certain chaincode event and does not want to execute transactions.  ></description> </Issue>
