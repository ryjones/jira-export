<Issue id="27251" key="FABG-508" number="508" project="10610" reporter="ga25waq" assignee="pavan-sk" creator="ga25waq" type="10001" summary="Better/alternative response type for the channel client&apos;s methods" priority="3" resolution="10000" status="6" created="2018-01-30 19:35:07.0" updated="2018-07-20 19:15:51.0" resolutiondate="2018-03-21 23:56:36.0" votes="0" watches="4" workflowId="33307"> <description><! CDATA I suggest to offer a more advanced response type for the methods provided by a channel client in > ./api/apitxn/txn.go than a byte array, at least as an alternative.  For instance, the shim.ChaincodeStubInterface of Fabric returns a HTTP-like response type with status code, message string and payload bytes when invoking another chaincode, defined as 'Response' in > github.com/hyperledger/fabric/protos/peer  As far as I can see, fabric-sdk-go processes such a response internally, but does not return it.  The problem with the current solution: In case of an error, the only possibility to interpret or output the error returned by the channel client's methods is to interpret or output the error string. The error has no dedicated type and contains a long error string (since many functions have prepended their own prefix to it). In my opinion, it is neither suitable for interpreting it nor for outputting it in an application.  ></description> </Issue>
