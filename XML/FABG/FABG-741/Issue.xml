<Issue id="33193" key="FABG-741" number="741" project="10610" reporter="jamesruan" creator="jamesruan" type="10004" summary="Go SDK: use of client/channel.Client.InvokeHandler need to access to client&apos;s context" priority="3" status="10708" created="2018-08-24 06:56:59.0" updated="2018-09-04 02:36:16.0" votes="0" watches="1" workflowId="44408"> <description><! CDATA {code:go} // Execute prepares and executes transaction using request and optional request options //  Parameters: //  request holds info about mandatory chaincode ID and function //  options holds optional request options // //  Returns: //  the proposal responses from peer(s) func (cc *Client) Execute(request Request, options ...RequestOption) (Response, error) { 	options = append(options, addDefaultTimeout(fab.Execute)) 	options = append(options, addDefaultTargetFilter(cc.context, filter.EndorsingPeer))  	return callExecute(cc, request, options...) } {code} In the above code, Execute() implementation use cc.context, which is not exported, to prepare default RequestOption. It use InvokeHandler() in callExecute().  I'm customizing the client by directly using InvokeHandler(). However, It is impossible to use the client's context to prepare some RequestOption. I need to find out the ContextProvider used to create the client, then use the ContextProvider to create another context for client. It is not the right way, since the newly created context could be different to the context the client uses.  My solution is simply export the context of Client. I'll send a patch for this.   ></description> </Issue>
