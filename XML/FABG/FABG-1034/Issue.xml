<Issue id="46617" key="FABG-1034" number="1034" project="10610" reporter="JIRAUSER21510" creator="JIRAUSER21510" type="10001" summary="Sample golang app code doesn&apos;t work as a http request handler" priority="3" status="10100" created="2021-03-07 18:37:26.0" updated="2021-12-19 12:54:16.0" votes="0" watches="1" workflowId="60563" archived="N"> <description><! CDATA My $GOPATH contains two directories:  1. fabric-samples downloaded by {code:java} curl -sSL https://bit.ly/2ysbOFE | bash -s -- 2.2.2 1.4.9{code} 2. test-server: sample golang web server that launches the code copypasted from sample golang app and triggered on each accessing root URL: {code:java} package main  import ( "encoding/json" "fmt" "github.com/cryptomafia/Cryptex/crypto_billing/Billings" "github.com/cryptomafia/Cryptex/crypto_billing/Currencies" "github.com/hyperledger/fabric-sdk-go/pkg/core/config" "github.com/hyperledger/fabric-sdk-go/pkg/gateway" "io/ioutil" "log" "net/http" "os" "path/filepath" )  func main() { http.HandleFunc("/", manipulateLedger) port := os.Getenv("PORT") if port == "" { port = "8080" } log.Printf("Listening on port %s", port) if err := http.ListenAndServe(":"+port, nil); err != nil { log.Fatal(err) } }  func handle(w http.ResponseWriter, r *http.Request) { if r.URL.Path != "/" { http.NotFound(w, r) return } //w.Header().Set("Content-Type", "application/json") billing := Billings.GetCurrencyBilling(Currencies.HLA) fmt.Print(billing.ToString()) response, err := json.Marshal(billing) if err != nil { // handle error } w.Write(response) }  func manipulateLedger(w http.ResponseWriter, r *http.Request) {  log.Println("============ application-golang starts ============")  err := os.Setenv("DISCOVERY_AS_LOCALHOST", "true") if err != nil { log.Fatalf("Error setting DISCOVERY_AS_LOCALHOST environemnt variable: %v", err) }  wallet, err := gateway.NewFileSystemWallet("wallet") if err != nil { log.Fatalf("Failed to create wallet: %v", err) }  if !wallet.Exists("appUser") { err = populateWallet(wallet) if err != nil { log.Fatalf("Failed to populate wallet contents: %v", err) } }  ccpPath := filepath.Join( "..", "fabric-samples", "test-network", "organizations", "peerOrganizations", "org1.example.com", "connection-org1.yaml", )  gw, err := gateway.Connect( gateway.WithConfig(config.FromFile(filepath.Clean(ccpPath))), gateway.WithIdentity(wallet, "appUser"), )  if err != nil { log.Fatalf("Failed to connect to gateway: %v", err) } defer gw.Close()  network, err := gw.GetNetwork("mychannel") if err != nil { log.Fatalf("Failed to get network: %v", err) }  contract := network.GetContract("basic")  log.Println("--> Submit Transaction: InitLedger, function creates the initial set of assets on the ledger") result, err := contract.SubmitTransaction("InitLedger") if err != nil { log.Fatalf("Failed to Submit transaction: %v", err) } log.Println(string(result))  log.Println("--> Evaluate Transaction: GetAllAssets, function returns all the current assets on the ledger") result, err = contract.EvaluateTransaction("GetAllAssets") if err != nil { log.Fatalf("Failed to evaluate transaction: %v", err) } log.Println(string(result))  log.Println("--> Submit Transaction: CreateAsset, creates new asset with ID, color, owner, size, and appraisedValue arguments") result, err = contract.SubmitTransaction("CreateAsset", "asset13", "yellow", "5", "Tom", "1300") if err != nil { log.Fatalf("Failed to Submit transaction: %v", err) } log.Println(string(result))  log.Println("--> Evaluate Transaction: ReadAsset, function returns an asset with a given assetID") result, err = contract.EvaluateTransaction("ReadAsset", "asset13") if err != nil { log.Fatalf("Failed to evaluate transaction: %v\n", err) } log.Println(string(result))  log.Println("--> Evaluate Transaction: AssetExists, function returns 'true' if an asset with given assetID exist") result, err = contract.EvaluateTransaction("AssetExists", "asset1") if err != nil { log.Fatalf("Failed to evaluate transaction: %v\n", err) } log.Println(string(result))  log.Println("--> Submit Transaction: TransferAsset asset1, transfer to new owner of Tom") _, err = contract.SubmitTransaction("TransferAsset", "asset1", "Tom") if err != nil { log.Fatalf("Failed to Submit transaction: %v", err) }  log.Println("--> Evaluate Transaction: ReadAsset, function returns 'asset1' attributes") result, err = contract.EvaluateTransaction("ReadAsset", "asset1") if err != nil { log.Fatalf("Failed to evaluate transaction: %v", err) } log.Println(string(result)) log.Println("============ application-golang ends ============") log.Println("============ going to print billing ============")  if r.URL.Path != "/" { http.NotFound(w, r) return } //w.Header().Set("Content-Type", "application/json") billing := Billings.GetCurrencyBilling(Currencies.HLA) fmt.Print(billing.ToString()) response, err := json.Marshal(billing) if err != nil { // handle error } w.Write(response) }  func populateWallet(wallet *gateway.Wallet) error { log.Println("============ Populating wallet ============") credPath := filepath.Join( "..", "fabric-samples", "test-network", "organizations", "peerOrganizations", "org1.example.com", "users", "User1@org1.example.com", "msp", )  certPath := filepath.Join(credPath, "signcerts", "cert.pem") // read the certificate pem cert, err := ioutil.ReadFile(filepath.Clean(certPath)) if err != nil { return err }  keyDir := filepath.Join(credPath, "keystore") // there's a single file in this dir containing the private key files, err := ioutil.ReadDir(keyDir) if err != nil { return err } if len(files) != 1 { return fmt.Errorf("keystore folder should have contain one file") } keyPath := filepath.Join(keyDir, files 0 .Name()) key, err := ioutil.ReadFile(filepath.Clean(keyPath)) if err != nil { return err }  identity := gateway.NewX509Identity("Org1MSP", string(cert), string(key))  return wallet.Put("appUser", identity) }{code} Which I launch after {code:java} ./network.sh up createChannel -c mychannel -ca{code} But the code is failing on the {code:java} gw.GetNetwork("mychannel"){code} line.  The error is: {code:java}  fabsdk/fab  2021/03/07 18:34:30 UTC - peer.(*peerEndorser).sendProposal -> ERRO process proposal failed  rpc error: code = Unknown desc = error validating proposal: access denied: channel  mychannel  creator org  Org1MSP   2021/03/08 00:34:32 Failed to get network: Failed to create new channel client: event service creation failed: could not get chConfig cache reference: QueryBlockConfig failed: QueryBlockConfig failed: queryChaincode failed: Transaction processing for endorser  localhost:7051 : gRPC Transport Status Code: (2) Unknown. Description: error validating proposal: access denied: channel  mychannel  creator org  Org1MSP {code}  ></description> </Issue>
