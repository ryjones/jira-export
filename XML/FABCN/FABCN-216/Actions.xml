<Action id="54833" issue="36183" author="mastersingh24" type="comment" body="I&apos;m still not sure where/how you used 1.4 here ... " created="2018-12-15 14:00:27.0" updateauthor="mastersingh24" updated="2018-12-15 14:00:27.0"/>
<Action id="54834" issue="36183" author="aspring" type="comment" body="The Fabric v1.1.0 instantiate process via the Fabric REST API server involves the npm registry ( online interaction ), I wonder if the Fabric v1.4.0 RC has made some inadvertent change to the npm registry process that has affected fabric v1.1.0." created="2018-12-15 14:39:05.0" updateauthor="aspring" updated="2018-12-15 14:39:05.0"/>
<Action id="54836" issue="36183" author="aspring" type="comment" created="2018-12-16 03:14:22.0" updateauthor="aspring" updated="2018-12-16 03:16:20.0"> <body><! CDATA The new "fabric-shim" at URL, https://registry.npmjs.org/fabric-shim seems the culprit.  Following is the detailed debugging and analysis.  For the benefit of those who are not in the Node.js chaincode camp, such chaincode relies on "fabric-shim", which provides the chaincode interface, a lower level API for implementing "Smart Contracts".  So, our node.js chaincode usually starts with  " const shim = require('fabric-shim'); "  To verify my concern about npm for node.js chaincode, I intentionally disconnected from the Internet and then ran new node.js chaincode install and instantiate. As expected, instantiate failed, part of the error message includes the following: "  npm ERR! errno EAI_AGAIN npm ERR! request to https://registry.npmjs.org/fabric-shim failed, reason: getaddrinfo EAI_AGAIN registry.npmjs.org:443 " It indicates that fabric-shim is now behaving differently. And what's its relationship with  " The existing npm packages are still available for use, while the new npm packages provide a layer of abstraction to improve developer productivity and ease of use. " ?   I'm thinking loud here... It seems to be desirable to have an ability to run fabric-shim locally (thus, whatever new dev for better or for worse won't adversely impact working applications ) or remotely as current default. OR alternatively, we have fabric-shim-v1.1.0 to fabric-shim-v1.4.0-rc ...  ></body> </Action>
<Action id="54848" issue="36183" author="aspring" type="comment" created="2018-12-17 02:46:15.0" updateauthor="aspring" updated="2018-12-17 02:46:15.0"> <body><! CDATA To those with Fabric 1.1.0,  Could you please try to reproduce the issue ( per Steps to Reproduce ).  One of my clients is getting upset and I'm unable to move forward with a new blockchain project intended to use HL Fabric.  ></body> </Action>
<Action id="54884" issue="36183" author="denyeart" type="comment" body=" ~mbwhite  Can you take a look?" created="2018-12-17 18:35:42.0" updateauthor="denyeart" updated="2018-12-17 18:35:42.0"/>
<Action id="54897" issue="36183" author="mastersingh24" type="comment" body=" ~aspring   When chaincode is instantiated, it will *ALWAYS* pull from npm ... and it will pull the version based on the constraints in package.json " created="2018-12-17 21:33:38.0" updateauthor="mastersingh24" updated="2018-12-17 21:33:38.0"/>
<Action id="54903" issue="36183" author="mbwhite" type="comment" created="2018-12-18 08:37:42.0" updateauthor="mbwhite" updated="2018-12-18 15:56:27.0"> <body><! CDATA  ~aspring  - to double check the version of the balanace transfer ( the fabric samples repo ) you are using.  Is this a version from 'today' that is reerring to the 1.4 RC... or is it a version consistent with a 1.1 set of images.    * As part of your investigations have you attempted install and instantiating a chaincode outside of the balance-transfer sample.? * Within the balanace-transfer sample - there's no mention of fabric-tools in the docker-compose * I believe that the example rest server is struggling to instantiate the chaincode.    ></body> </Action>
<Action id="54930" issue="36183" author="aspring" type="comment" created="2018-12-18 17:04:33.0" updateauthor="aspring" updated="2018-12-18 17:04:33.0"> <body><! CDATA " 'today' that is reerring to the 1.4 RC..." it seems to be the case, please review my OP on this.  "have you attempted install and instantiating a chaincode outside of the balance-transfer sample.?" yes, an attempt to instantiate a new chaincode via CLI completed with no error message or anything else, but  ' peer chaincode list --instantiate -C mychannel ' indicated, it has not instantiated successfully.  "Within the balanace-transfer sample - there's no mention of fabric-tools in the docker-compose", I don't get this.  If you were saying, where's docker-compose.yaml file, then it's under subdirectory 'artifacts'.  "I believe that the example rest server is struggling to instantiate the chaincode. " It's been working reliably for me for several months already for multiple applications. * the default single action of "transfer" from party a to party b for an amount ==> ok * I tweaked the fabcar to fit into this  ==> ok  * my poc app on house title recording ==> ok * another poc app ==> ok    ></body> </Action>
<Action id="54953" issue="36183" author="aspring" type="comment" created="2018-12-19 02:36:38.0" updateauthor="aspring" updated="2018-12-19 05:29:41.0"> <body><! CDATA I took another look at my Fabric v1.1.0 box ( and yes, I again confirmed its version with peer version )  then, verified fabric-client and fabric-ca-client versions. for the former, it's NOW 1.3.0.  i would guess this version was released in the last two months or so... but my  Fabric 1.1.0 was installed like over four moths ago.  I did not update Fabric to v1.4.0 RC or run any script to do that or update fabric-client myself, so, something was wrong.   My suspicion was the new "instantiate" process.   ></body> </Action>
<Action id="54963" issue="36183" author="sstone1" type="comment" body=" ~aspring  please can you provide copies of the package.json files from the balance-transfer application (fabric-samples/balance-transfer/package.json) and the chaincode you are trying to instantiate (the sample CC is fabric-samples/balance-transfer/artifacts/src/github.com/example_cc/node/package.json)." created="2018-12-19 13:47:19.0" updateauthor="sstone1" updated="2018-12-19 13:47:19.0"/>
<Action id="55001" issue="36183" author="aspring" type="comment" created="2018-12-19 20:01:53.0" updateauthor="aspring" updated="2018-12-19 20:01:53.0"> <body><! CDATA  ~sstone1   Please refer to my response to Matthew White yesterday.  In essence, my node.js chaincode and its corresponding package.json configuration files do not have any issue.  I've worked on multiple applications albeit on a small scale and poc.  Regarding cc path, i don't use path like fabric-samples/balance-transfer/artifacts/src/github.com/example_cc/node, instead, i use /home/myuserid/fabric-samples/chaincode as its root, and I have it mapped via CLI section in the docker-compose.yaml config file.  Question,  What's the spec for Fabric v1.1.0 for Node.js chaincode ( particularly for linux/ubuntu OS ) ? That is,  1) sets of Fabric docker image version and respective id that have been tested to work 2) specific version of corresponding fabric-client and fabric-ca-client 3) anything else important that I miss here  Same question for Fabric v1.2.0 Same question for Fabric v1.3.0  Asking this question because at least in my cases: a) Fabric v.1.1.0,  does not seem to be compatible with fabric-client version 1.1.0.  This morning, with a basic node.js chaincode, it failed to join channel, err msg: "network connection failure".   This ubuntu box of mine is main node,  Please see the following fabric mailing list thread and related ones: https://lists.hyperledger.org/g/fabric/message/5197?p=,,,20,0,0,0::Created,,npm+bug,20,2,0,28752315 b) Fabric v1.3.0 did not seem to work with fabric-client version 1.3.0, instead, fabric-client version 1.2.0 seems to be ok for instantiate node.js chaincode.  Thanks.    ></body> </Action>
<Action id="55031" issue="36183" author="sstone1" type="comment" created="2018-12-20 10:31:12.0" updateauthor="sstone1" updated="2018-12-20 10:31:12.0"> <body><! CDATA  ~DonLi  in the email chain I can see that the chaincode specifies a fabric-shim dependency of ~1.1.0, so that is correct for Fabric v1.1.  This error:  ERROR  Join-Channel - TypeError: client.getEventHubsForOrg is not a function at Object.joinChannel (/home/userX/fabric-samples/balance-transfer/app/join-channel.js:54:27) at <anonymous> at process._tickCallback (internal/process/next_tick.js:188:7)    ... is caused by the breaking change in Fabric v1.3 to remove the event hub classes and associated APIs in favour of channel event hub. This is an annoying change that breaks semantic versioning rules and IMO should have gone into Fabric v2.0, but we are where we are.  The Fabric v1.3 version of balance-transfer demonstrates using the new *channel* event hub classes and associated APIs: https://github.com/hyperledger/fabric-samples/blob/release-1.3/balance-transfer/app/instantiate-chaincode.js#L101  When you run "npm audit fix", as shown in the email chain, you may be getting upgraded to Fabric v1.2/3/4 without knowing it. If you move up a Fabric v1.1/1.2 app up to Fabric v1.3+, you will have to rewrite your applications for the event hub change mentioned above.  ></body> </Action>
<Action id="55044" issue="36183" author="aspring" type="comment" created="2018-12-20 12:02:31.0" updateauthor="aspring" updated="2018-12-20 12:02:31.0"> <body><! CDATA  ~sstone1  Simon Stone,   Very informative, I appreciate it.  Regarding "breaking change in Fabric v1.3 to remove the event hub classes and associated APIs in favour of channel event hub. This is an annoying change that breaks semantic versioning rules and IMO should have gone into Fabric v2.0, but we are where we are." I think, a rough but practical analogue is, instead of adding an extension to a house, it's burning it down.  Some one in charge really needs to reflect on this...  So, "npm audit fix" does not really do fixing but upgrade, it's Terribly Misleading and dangerous, instead, it really should be called something like " npm fabric upgrade {version} ".  Questions: (1) For Fabric 1.3.0, fabric-client version 1.2.0 seems able to instantiate node.js chaincode but a bit quirky, does that mean fabric-client 1.2.0 has addressed the annoying " event hub classes and associated APIs in channel events"? (2) Could you respond to my question "(a)" above?  What's supposed to be fabric-ca-client version for Fabric v1.1.0? I haven't checked the current one on my Fabric v1.1.0 box yet.  Many thanks.      ></body> </Action>
<Action id="55051" issue="36183" author="sstone1" type="comment" created="2018-12-20 13:59:35.0" updateauthor="sstone1" updated="2018-12-20 13:59:35.0"> <body><! CDATA  ~DonLi  "npm audit fix" assumes you follow the semantic versioning rules and a change from v1.1 to v1.4 is compatible; npm itself is doing nothing wrong. The damage caused is 100% due to the breaking change within Fabric v1.3.  1) Fabric v1.1 has EventHub, Fabric v1.2 has ChannelEventHub and EventHub, and Fabric v1.3 just has ChannelEventHub. So Fabric v1.2 is code compatible with the version of the balance-transfer code you are using, which explains why it works.  2) If you are using Fabric v1.1, you should use "~1.1.0" for all dependencies on the fabric-client, fabric-ca-client, and fabric-shim packages in your package.json files.  ></body> </Action>
<Action id="55055" issue="36183" author="aspring" type="comment" created="2018-12-20 14:52:21.0" updateauthor="aspring" updated="2018-12-20 14:52:21.0"> <body><! CDATA Very informative,  ~sstone1  Simon Stone, thank you.  In each of my package.json file for each of my node.js chaincode, the fabric-shim references the installed fabric-client version.  I wonder if there's any hope of an improvement of the reliability of node.js chaincode instantiate under Fabric v1.3.0 with fabric-client v.1.2.0.  As mentioned earlier, it's quirky in my recent experience.  Much obliged.  ></body> </Action>
<Action id="55108" issue="36183" author="aspring" type="comment" created="2018-12-22 03:57:34.0" updateauthor="aspring" updated="2018-12-22 03:58:36.0"> <body><! CDATA This is about Fabric 1.1.0 that has been crashed by v1.4.0 RC by accident.  New testing results.  Client request: node.js chaincode instantiate via Fabric REST API server  Configuration: fabric v1.1.0 fabric-client v1.2.0 fabric-ca-client v1.1.2  err msg:  2018-12-21 21:38:57.617   DEBUG  Helper -  crypto_ecdsa_aes : ecdsa signature:  Signature { r: <BN: bb0c63e5d3e25d41127ab2e6592958c175e8cf0fc93f69545cbf4412e88c36d0>, s: <BN: 7394232742fcc55ca09f592cee97bc2622c3c7ed0c2d29d351fdeddfea774aa>, recoveryParam: 0 } error:  client-utils.js : sendPeersProposal - Promise is rejected: Error: 2 UNKNOWN: chaincode error (status: 500, message:  is not a valid endorsement system chaincode)  -------------------------------------  Configuration: fabric v1.1.0 fabric-client v1.1.0 fabric-ca-client v1.1.2  err msg:  2018-12-21 22:13:19.008   DEBUG  Helper -  crypto_ecdsa_aes : ecdsa signature:  Signature { r: <BN: baa057a7ead848090a6321806a60e3fe612fdaac28ac42da65d1f5ce26610c48>, s: <BN: 30f3af8bfafd2ec35fe79596825a071b7e5ae084344bfa147c3174340bc3d5eb>, recoveryParam: 0 } /home/userX/fabric-samples/balance-transfer/node_modules/fabric-client/lib/EventHub.js:308 if(self._stream) state = self._stream.call.channel_.getConnectivityState(); ^  TypeError: Cannot read property 'getConnectivityState' of undefined at ClientDuplexStream.<anonymous> (/home/userX/fabric-samples/balance-transfer/node_modules/fabric-client/lib/EventHub.js:308:56) at emitOne (events.js:116:13)  Note: It even failed to join channel.  So, back to the question I asked earlier, how to make this installation of Fabric 1.1.0 able to instantiate node.js chaincode again? Not Fabric 1.1.0 docker image reinstallation option.   ></body> </Action>
<Action id="55614" issue="36183" author="mastersingh24" type="comment" created="2019-01-14 15:11:18.0" updateauthor="mastersingh24" updated="2019-01-14 15:11:18.0"> <body><! CDATA I'm still struggling to see how to reproduce this.  There is also no such thing as a Fabric REST server ... balance transfer is a sample but the REST server it uses is not a supported offering.  But we are clearly able to run the balance-transfer sample with Fabric when using the same versions of both.  ></body> </Action>
<Action id="55652" issue="36183" author="aspring" type="comment" created="2019-01-14 22:20:13.0" updateauthor="aspring" updated="2019-01-14 22:20:13.0"> <body><! CDATA A few thoughts.  (a) I've been working with Hyperledger Fabric from version 1.1.0 to 1.3.0 including setting up such a blockchain network albeit small scale, developing chaincode in node.js and developing PoC web application integrating with chaincode and have reasonable success with that.  So, hopefully, I know a thing or two about Hyperledger Fabric.  (b) The issue I experienced, particularly, the "instantiate" problem could also be the result that my host computer had been compromised, then you know what's next.  And thus, impossible to reproduce.  Each minute of my time is valuable.  I wouldn't want to spend time to speculate nor to damage this platform's reputation ( that would not be in my interest neither ).  (c) I respectfully disagree with Gari Singh's statement in the first paragraph.  I'm not interested in semantics, but a three layered or tiered architecture seems very desirable. See the following: (1) chaincode as the bottom layer, (2) a REST API server in the middle as the middle layer, and then (3) a web app and/or mobile app sits on top.  With the middle layers connects the bottom layer and the top layer.  I've proven it works.  Having said that, I'm open to other types of architectures as well.    ></body> </Action>
<Action id="61355" issue="36183" author="mastersingh24" type="comment" created="2019-06-30 10:40:07.0" updateauthor="mastersingh24" updated="2019-06-30 10:40:07.0"> <body><! CDATA Lowering the priority of this as no one seems to be able to reproduce the issue here.   ></body> </Action>
<Action id="61390" issue="36183" author="mbwhite" type="comment" created="2019-07-01 14:41:44.0" updateauthor="mbwhite" updated="2019-07-01 14:41:44.0"> <body><! CDATA I'd go further and close - we can't reproduce this issue, and there's no additional information.  If the problem re-appears than please do re-open the issue.   ></body> </Action>
