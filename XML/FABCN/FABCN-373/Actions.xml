<Action id="66695" issue="43916" author="mbwhite" type="comment" created="2020-01-15 11:17:01.0" updateauthor="mbwhite" updated="2020-01-16 12:55:09.0"> <body><! CDATA +Support Matrix - From the perspective of the Smart Contract+   The key elements are :  - the version of the Fabric Contract npm modules used - the version of the node.js runtime used to run the code  When starting a chaincode container to run a Smart Contract the version of the runtime that is used is determined by these factors: * Fabric v1.4.2, and Fabric v2.0.0 will by default start up a docker image, that is defined by the version of Fabric in use. * The name of this docker image can be altered by configuring the Fabric Peer * With Fabric v2.0.0, the chaincode container can be configured to be started by other means, and not the Peer. In this case, the environment used is not in the control of Fabric.     npm modules that are produced are the *fabric-contract-api, fabric-shim, fabric-shim-crypto & fabric-shim-api*  +Supported Runtimes+  v1.4.x and v2.0.0 npm modules are supported running in *node12.13* with the  *x86_64* architecture. Later node 12 versions are supported but are not tested v1.4.x npm modules are supported running in *node8.16.1* with the  *x86_64* architecture. Later node 8 versions are supported but are not tested  Architecture Support: all docker images, runtimes, tools are tested under *x86_64* ONLY  +Default+ +Peer Runtime selection+  When using _Fabric 2.0.0_, the default docker image that is used to run the Node chaincode is *node:12.13.0-alpine*   _Note:_ With the default docker image used by Fabric 2.0.0 the packaged code will be installed with *npm*. If a package-lock.sj or a npm-shrinkwrap.json file is present, *npm ci --nly=production* will be used. Otherwise *npm install --production* will be used.      When using _Fabric 1.4.4_, the docker image that is used to run the Node chaincode is *node v8.16.1.* It is installed with *npm install --production*  +Supported Runtime communication with the Peer+   Subject to a suitable runtime environment, the *1.4.4 npm modules*   and *2.0.0 npm modules* can used to communicate with a Fabric 2.0.0 or 1.4.4 Peer - with the level of functionality that is implied by the Fabric version in use.            ></body> </Action>
<Action id="66696" issue="43916" author="mbwhite" type="comment" body=" ~heatherp   ~lesleyannj   does the above make sense?" created="2020-01-15 11:23:58.0" updateauthor="mbwhite" updated="2020-01-15 11:23:58.0"/>
<Action id="66734" issue="43916" author="heatherp" type="comment" created="2020-01-17 12:13:58.0" updateauthor="heatherp" updated="2020-01-17 12:13:58.0"> <body><! CDATA  ~mbwhite  I'm no expert at being a smart contract developer, so I can't pass loads of judgement on the meaning of the words, but the sentences do make sense, yes :) I definitely think we need the above information somewhere in our docs for users to consume. Thoughts:  - it's word heavy. I still think we need a table, somewhere. Does the word heavy aspect make it more difficult to maintain going forward?  ></body> </Action>
<Action id="66738" issue="43916" author="mbwhite" type="comment" created="2020-01-17 13:20:26.0" updateauthor="mbwhite" updated="2020-01-17 13:20:26.0"> <body><! CDATA This can easily be added as a SUPPORT.md in the repo, for the main docs - will defer to   ~pandrejko  opinion on the best place for this support statement for chaincode.  Yes a simple table - but can't really do tables in Jira - if I create a PR to add the SUPPORT.md - that can have tables.  Yes it is word heavy;  in a sense that was deliberate - wanted it to be unambiguous as possible; past experience coming back to haunt me :) Also people would tend to have a single scenario they are concerned with so go looking for a specific answer.  Hence having each section be as independent as possible... i.e. not saying relative terms like,  'this release'     ></body> </Action>
<Action id="66756" issue="43916" author="mbwhite" type="comment" body="The PR for `fabric-chaincode-node` master branch is up for review" created="2020-01-17 14:42:09.0" updateauthor="mbwhite" updated="2020-01-17 14:42:09.0"/>
<Action id="66759" issue="43916" author="pandrejko" type="comment" body=" ~mbwhite  I do agree that a Table does sound like a good idea here. I&apos;m happy to review the PR and edit it if we need help.  Can you post a link to the PR?" created="2020-01-17 15:03:02.0" updateauthor="pandrejko" updated="2020-01-17 15:03:20.0"/>
<Action id="66771" issue="43916" author="pandrejko" type="comment" body="Matthew gave me a link to the content here: https://github.com/hyperledger/fabric-chaincode-node/blob/46c79659d919e7b06754f737afb590527618a0b8/SUPPORT.md" created="2020-01-17 17:36:18.0" updateauthor="pandrejko" updated="2020-01-17 17:36:48.0"/>
<Action id="66833" issue="43916" author="mbwhite" type="comment" body="And the Java   https://github.com/hyperledger/fabric-chaincode-java/blob/551c174bc519669d86ef38b008689f00942be67b/SUPPORT.md " created="2020-01-21 09:18:25.0" updateauthor="mbwhite" updated="2020-01-21 09:18:25.0"/>
