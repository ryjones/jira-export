<Issue id="29193" key="FABCN-247" number="247" project="11207" reporter="davidkel" creator="davidkel" type="10000" summary="node chaincode has grpc message limit of 4Mb" priority="1" resolution="10000" status="6" created="2018-04-05 15:33:25.0" updated="2019-11-30 21:14:56.0" resolutiondate="2018-04-13 01:51:36.0" votes="0" watches="3" workflowId="57065"> <description><! CDATA when the node chaincode container is started, no grpc message limits are provided (fabric has hardcoded defaults of 100Mb but these are never applied).   A possible solution to the problem could be to update `chaincode.js` to support these following extra CLI parameters as follows   {code:java} const argsDef =   	{name: 'peer.address', type: String}, 	{name: 'grpc.max_send_message_length', type: Number}, 	{name: 'grpc.max_receive_message_length', type: Number}  ; {code}  Then in the chaincode launch go code you could pass the appropriate values as parameters eg (note maxReceive, maxSend are made up vars)  {code:java} 	case pb.ChaincodeSpec_NODE: 		args =   string{"/bin/sh", "-c", fmt.Sprintf("cd /usr/local/src; npm start -- --peer.address %s --grpc.max_receive_message_length %s --grpc.max_send_message_length %s", chaincodeSupport.peerAddress, maxReceive, maxSend)}  {code}  On a further note in handler.js there are also this other option `ssl-target-name-override` but this is not on option accepted as a command line option nor as far as I can see can be passed in any other way, so was wondering what the intention on how this option should be supplied ? If it would make sense to add it as a command line option then it should also go into `argsDef` constant but I suspect it's of use only when running a peer in dev mode.  ></description> </Issue>
