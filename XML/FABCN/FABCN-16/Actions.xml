<Action id="42490" issue="29076" author="zhaochy" type="comment" created="2018-04-04 01:23:59.0" updateauthor="zhaochy" updated="2018-04-04 01:23:59.0"> <body><! CDATA From the error message, it seems your "npm install" failed by ssh failed.  you may add a ".npmrc" to your node chaincode folder to improve the performance of "npm install" for instance, in China, you may use the TaoBao registry https://registry.npm.taobao.org/ and set "grpc_node_binary_host_mirror" to use pre-build grpc binary   ></body> </Action>
<Action id="42491" issue="29076" author="daijianw" type="comment" body=" ~zhaochy   The problem is, in current design, node chaincode instantiation(or say,  chaincode image build) need internet access to install npm dependency online.   But in deployment environment without internet access, this definitely will fail.  " created="2018-04-04 03:01:28.0" updateauthor="daijianw" updated="2018-04-04 03:01:28.0"/>
<Action id="42495" issue="29076" author="zhaochy" type="comment" body="you can download the dependency npm packages and update the package.json, change the dependency package version to &quot;file: &lt;your download path&gt;&quot;" created="2018-04-04 03:38:13.0" updateauthor="zhaochy" updated="2018-04-04 03:39:34.0"/>
<Action id="42498" issue="29076" author="daijianw" type="comment" body=" ~zhaochy  I admit your suggest way is a possible way to work around the problem. But there is some difficulty in real case. Take chaincode_example02 for example, it has 206 npm dependency packges in the node_modules directory, if we follow the way you suggest, then we have to check/modify the 206 package.json in each npm package. If the chaincode is more complex and has more dependency packages, that modification work would be not so easy.  Possibly in GenerateDockerBuild method of platform.go, instead of directly run &quot;npm install --production&quot;,  changing it to only run npm install if it doesn&apos;t detect the existence of node_modules directory.  Some consideration or test may be taken about the performance of compressing/decompressing so many files from node_modules during chaincode install  and docker build.   Thanks." created="2018-04-04 05:56:06.0" updateauthor="daijianw" updated="2018-04-04 05:56:06.0"/>
<Action id="42500" issue="29076" author="zhaochy" type="comment" body=" ~harrisob@us.ibm.com   ~jimthematrix@gmail.com  what&apos;s your opinion?" created="2018-04-04 06:15:14.0" updateauthor="zhaochy" updated="2018-04-04 06:15:14.0"/>
<Action id="42515" issue="29076" author="harrisob@us.ibm.com" type="comment" body="I also think that there should be a method to deploy chaincode without an internet connection available. I would assume that the install package will have to have all dependencies and then a flag on the instantiate to not run the `npm install`.  ~zhaochy  would you be able to work on this ?" created="2018-04-04 14:08:04.0" updateauthor="harrisob@us.ibm.com" updated="2018-04-04 14:08:04.0"/>
<Action id="43193" issue="29076" author="zhaochy" type="comment" created="2018-04-20 03:54:04.0" updateauthor="zhaochy" updated="2018-04-20 03:54:04.0"> <body><! CDATA  ~harrisob@us.ibm.com   ~daijianw  I did some experiment on this task, here's my conclusion. # Change "npm install --production" to "npm install" does not solve this problem, npm will look for cache from "~/.npm" instead of "node_modules", so existing packages from node_modules are still ignored by "npm install", and during chaincode instantiate, there is no cache there, thus the internet is a must for "npm install". # yarn is another widely used node package management tool, yarn has offline mode which meet our requirements, besides, "yarn" has better performance for package install. So we may change "npm" to "yarn" to solve this problem. # Another way to solve the task is we add a flag (skip-install, boolean) for chaincode instantiate. Change the corresponding protos, scc, platform and so on. This makes many changes at the Fabric side.   ~daijianw  ~harrisob@us.ibm.com  What's your opinion?  ></body> </Action>
<Action id="43316" issue="29076" author="daijianw" type="comment" created="2018-04-24 01:18:45.0" updateauthor="daijianw" updated="2018-04-24 01:18:45.0"> <body><! CDATA  ~zhaochy  changing "npm install --production" to "npm install" will not work as the parameter "--production" means not installing devDependencies.  When you mention another way to solve the problem by adding a flag for chaincode instantiation, to be more accurate, do you mean adding a flag for chaincode container build? As adding a flag for chaincode instantiation is not enough, chaincode container build will happen for chaincode invoke & query also.   In addition, if using yarn, we still need keep the capability of online install and offline install during chaincode container build. Does yarn need specify "yarn install -offline"  to install offline? Or "yarm install" is ok to install offline ?   In a word, if yarn is more convenient and with better performance for package install, I'm fine. We may still need a flag to specify offline mode or online mode, as that may let the chaincode deployer aware of the corresponding responsibility and requirement for different modes.  Thanks.     ></body> </Action>
<Action id="47652" issue="29076" author="davidkel" type="comment" created="2018-07-23 14:14:13.0" updateauthor="davidkel" updated="2018-07-23 14:14:13.0"> <body><! CDATA I have successfully packaged up a pre npm installed chaincode and installed that package onto a peer (needed to hack the node-sdk to remove it's specific checking for the node_modules directory), and this does improve the performance of npm install. But there is 1 big gotcha and that is native modules. It is unwise to package native modules in this way and these will still have to be installed via NPM install. Potentially we could put grpc and x509 into a base image for which the chaincode build env can make use of, but you still need to ensure that no native modules are packaged and somehow the chaincode build env will have to know that all the modules can be satisfied by what has been packaged plus the extra modules provided in a base image and not call npm install.  Therefore with the current way in which fabric drives chaincode building the only possibility is for the deployer to carefully package in the appropriate node_modules directory minus any native modules in order to reduce the time building the container image but cannot get around having to contact some sort of npm registry to complete the install. One option that is considered is to host your own NPM registry internally so that you do not need to connect outside of your intranet.  ></body> </Action>
<Action id="49049" issue="29076" author="zhaochy" type="comment" created="2018-08-18 01:33:43.0" updateauthor="zhaochy" updated="2018-08-18 01:34:15.0"> <body><! CDATA  ~denyeart  just discussed this with  ~harrisob@us.ibm.com  and  ~andrew-coleman . We planed to add a new option 'skipBuild' at chaincode instantiate time. And some changes on LSCC required so that we can use different command at the cc image build time.  For node cc, if 'skipBuild'=true, node sdk will package the 'node_modules' along with the chaincode. At peer side, the 'npm install' will be skipped at instantiate time.  This might work for golang chaincode and java cc also. Client side have all dependencies packaged (or already build the chaincode to an executable binary, e.g. golang cc), and peer side won't require extra resources at chaincode instantiate time.    ></body> </Action>
<Action id="49050" issue="29076" author="denyeart" type="comment" body=" ~zhaochy  Please coordinate with  ~jyellick  and get his opinion, as he is leading changes to lifecycle recently." created="2018-08-18 03:03:25.0" updateauthor="denyeart" updated="2018-08-18 03:03:25.0"/>
<Action id="49055" issue="29076" author="davidkel" type="comment" created="2018-08-18 11:14:34.0" updateauthor="davidkel" updated="2018-08-18 11:14:34.0"> <body><! CDATA I don't think this should be done in the 1.3 timeframe, but some pre-req within the chaincode lifecycle could be put in in preparation (ie expanding the capability of npm install stage), the big problem with this approach is going to be native modules and grpc (as it downloads prebuilt binaries). So for example if you are on a Mac all the native modules and grpc won't work, or if you used a different version of node to that in the fabric. For native modules we could consider a node-gyp rebuild approach. For grpc we need to wait for `inversion of control` planned for the chaincode shims where we provide a dedicated node chaincode image which can include grpc.  Also we need to resolve the issue of npm install where different peers in a network require a different .npmrc file but this file should not form part of the chaincode package that is fingerprinted  ></body> </Action>
<Action id="50050" issue="29076" author="davidkel" type="comment" body="see FAB-11555 regarding new node chaincode image which would facilitate this. But in addition there needs to be work to decide how to also allow the transfer of node modules as part of the node-sdk and other packaging tools to address how to complete the picture" created="2018-09-06 20:24:16.0" updateauthor="davidkel" updated="2018-09-06 20:24:16.0"/>
<Action id="52481" issue="29076" author="aspring" type="comment" created="2018-10-20 23:32:28.0" updateauthor="aspring" updated="2018-10-20 23:32:28.0"> <body><! CDATA  ~zhaochy   ~daijianw   ~denyeart   ~jyellick    ~andrew-coleman    ~harrisob@us.ibm.com   I'm experiencing the exact problem but with a slightly different context.  Case 1  Run against the "balance-transfer" rest api server, caller "testAPIs.sh" script.   Outcome: fine,  time ~3 minutes.  It always works regardless of offline or online.  Case 2  ( at the night of October 18, 2018 )  Run against the "balance-transfer" rest api server, caller is  a similar script to "testAPIs.sh" but for "fabcar" (including two invokes and two queries).   Outcome: everything ran fine,  time ~3 minutes   ( sorry, I don't recall if it was offline or online but most likely offline for I'd like to test something new offline)  Case 3  ( in the afternoon of October 19, 2018 and subsequently )  Run against the "balance-transfer" rest api server, caller is  a similar script to "testAPIs.sh" but for "fabcar" (including two invokes and two queries).   Outcome: failed with error msg described above,  time ~8 minutes while offline,  ~10 minutes while online  fyi, the OS is a Ubunto 18.04 vm, and the other Fabric sample apps still run fine.  Is there a way to fix it?  Even a short term solution?  Thanks.        ></body> </Action>
<Action id="56210" issue="29076" author="silliman" type="comment" created="2019-01-25 14:24:37.0" updateauthor="silliman" updated="2019-01-25 14:27:41.0"> <body><! CDATA Per David Kelsey's suggestion, I am adding here a comment I made in RocketChat on the #fabric-sdk-node in case it may be useful.  It describes a workaround I came up with on the s390x architecture to eliminate node-gyp wanting to go to nodejs.org on the Internet:  {color:#444444}The problem is that packages like x509 (and grpc and pkcs11, at least for s390x architecture) require native binaries to be compiled by node-gyp and this process seems to want to go to {color} nodejs.org|http://nodejs.org/ {color:#444444} to check for something, I never nailed down exactly what it was going there for, but I found a workaround by:{color}  {color:#444444}1) downloading the Node.js installation tarball and extracting it to a directory{color} {color:#444444}2) copying that directory into a custom build of the ccenv image{color} {color:#444444}3) setting the node_config_envdir environment variable within the ccenv image to point to this directory{color} {color:#444444}4) setting the CORE_CHAINCODE_BUILDER environment variable for the peer to custom ccenv image created in step 2{color}  {color:#444444}This is a sample Dockerfile that I used for step 2:{color}     FROM hyperledger/fabric-ccenv:s390x-{color:#008080}1.1{color}.{color:#008080}1{color}  {{COPY {color:#333333}node{color}{color:#990000}-v8{color}.{color:#008080}9.4{color}-linux-s390x /tmp/{color:#333333}node{color}{color:#990000}-v8{color}.{color:#008080}9.4{color}-linux-s390x}}  ENV npm_config_nodedir /tmp/{color:#333333}node{color}{color:#990000}-v8{color}.{color:#008080}9.4{color}-linux-s390x     {color:#444444}There may be more elegant solutions but this worked for me.{color}  ></body> </Action>
<Action id="62064" issue="29076" author="jimmycheungtest" type="comment" created="2019-07-24 03:54:14.0" updateauthor="jimmycheungtest" updated="2019-07-24 03:54:38.0"> <body><! CDATA hello  I have the same problem can you help me？  ></body> </Action>
<Action id="62065" issue="29076" author="jimmycheungtest" type="comment" body="I don not where is the CORE_CHAINCODE_BUILDER" created="2019-07-24 03:57:00.0" updateauthor="jimmycheungtest" updated="2019-07-24 03:57:00.0"/>
<Action id="64725" issue="29076" author="heatherp" type="comment" body="This is duplicated by FAB-12072, which needs documentation" created="2019-10-15 15:19:38.0" updateauthor="heatherp" updated="2019-10-15 15:19:38.0"/>
