<Issue id="40210" key="FABCN-287" number="287" project="11207" reporter="shimos" assignee="shimos" creator="shimos" type="10000" summary="TypeScript chaincode cannot use async iterators" priority="3" resolution="10000" status="6" created="2019-05-29 23:19:56.0" updated="2019-11-30 21:15:06.0" resolutiondate="2019-06-20 09:34:45.0" votes="0" watches="1" workflowId="57105"> <description><! CDATA *JavaScript chaincode:* {code} async test(ctx) { const iterator = ctx.stub.getStateByRange("a", "b"); for await (const res of iterator) { console.log(res); } } {code}  works with the result like  {noformat} { namespace: 'mycc', key: 'a1', value: ByteBuffer { buffer: <Buffer 0a 11 0a 0f 0a 04 6d 79 63 63 12 02 61 31 1a 03 31 30 30 0a 10 0a 0e 0a 04 6d 79 63 63 12 02 61 32 1a 02 35 30 1a 24 31 36 30 37 39 61 35 35 2d 35 65 ... >, offset: 16, markedOffset: -1, limit: 19, littleEndian: true, noAssert: false } } â€¦ {noformat}  But for a TypeScript chaincode:  {code} async test(ctx: Context): Promise<Buffer> { const iterator = ctx.stub.getStateByRange("a", "b");  for await (const res of iterator) { console.log(res); } return Buffer.from(""); } {code}  does not compile with an error:  {noformat} $ npx tsc ts-chaincode.ts:20:33 - error TS2504: Type 'Promise<StateQueryIterator>' must have a ' Symbol.asyncIterator ()' method that returns an async iterator.  20         for await (const res of iterator) { ~~~~~~~~   Found 1 error. {noformat}  It seems to be because the type definition was not updated in FAB-15330.   ></description> </Issue>
