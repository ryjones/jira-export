<Issue id="34623" key="FABCN-3" number="3" project="11207" reporter="sstone1" assignee="awjh-ibm" creator="sstone1" type="10000" summary="Programming model - Inversion of control for Node.js smart contracts" priority="2" resolution="10000" status="6" created="2018-10-12 10:50:49.0" updated="2020-01-20 09:49:17.0" resolutiondate="2020-01-20 09:49:17.0" votes="0" watches="6" workflowId="46027"> <description><! CDATA Today, the Node.js chaincode requires a user to explicitly reference the shim (via a dependency on the fabric-shim npm package), and also explicitly start the shim via the npm start script in their package.json.  This has several problems: - The user sees that Node.js smart contracts takes a long time to deploy, because it must download and install the fabric-shim module, which is a large package due to the inclusion of gRPC. - The user is in control of the version of the shim that is used, and has to update their code (package.json) before redeploying in order to pick up fixes to the shim.   Using the new programming model being delivered under FAB-11246, the smart contract developer only needs to reference a version of the smart contract API (via the fabric-contract-api npm package), and write their smart contract to the interfaces defined in that API.  Smart contract developers now have no need to reference the shim directly, and nor should they - the shim is "internals" for communicating between the peer and the chaincode process. The smart contract API is what they care about.  This epic is aiming to change the way Node.js smart contracts are deployed, by inverting control so that the shim loads the smart contract, rather than the smart contracts loading the shim.  ></description> </Issue>
