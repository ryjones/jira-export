<Action id="69659" issue="45576" author="mbwhite" type="comment" created="2020-07-09 12:53:42.0" updateauthor="mbwhite" updated="2020-07-09 12:53:42.0"> <body><! CDATA 1) You can include the `.npmrc` file within the chaincode package that will direct the npm install to a local repository. We use this approach within the chaincode integration tests, to do a local publish of the just built chaincode npm packages, which can then be installed 'normally'  In a production environment, the challenge is that for 1.4 the chaincode package needs to be byte for byte identical - and this includes the .npmrc. So if there are different organizations that have different local npm repositories this is a challenge.  The solution here is to use the v2 peers with the v2 lifecycle that does not have this exact byte-for-byte check.. hence different organizations can use different local repositories.  Also note that all deployed contracts should be shrinkwraped, therefore it can be assured that the versions in the local repositories can be used.   2) you can include the node_modules folder within the deployed contract, however, a `npm install` will still be installed. This though can be of considerable size and has risks as the native code that is used within the running docker image may be incompatible with what you built with  3) For complete deterministic control, the best Fabric approach would be to define an external builder and launch a specific docker image that you've built with the exact code you wish to use   ></body> </Action>
<Action id="69660" issue="45576" author="mbwhite" type="comment" created="2020-07-09 12:54:36.0" updateauthor="mbwhite" updated="2020-07-09 12:54:36.0"> <body><! CDATA The approaches available esp in v2 should resolve this problem.     It's a general issue with node.js and it's ecosystem, so hard for Fabric to solve itself.  ></body> </Action>
