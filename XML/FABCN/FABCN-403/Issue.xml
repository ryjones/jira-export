<Issue id="45105" key="FABCN-403" number="403" project="11207" reporter="JIRAUSER20171" creator="JIRAUSER20171" type="10001" summary=" Feature Request  Support aroundTransaction hook" priority="3" status="10100" created="2020-05-18 14:48:09.0" updated="2020-11-26 09:20:31.0" votes="0" watches="2" workflowId="59015" archived="N"> <description><! CDATA The Fabric Chaincode Node `Contract` class already supports some useful hooks like many other frameworks: `beforeTransaction`, `afterTransaction` and `unknownTransaction`: {code:java} async beforeTransaction(ctx) {     // default implementation is do nothing }  async afterTransaction(ctx, result) {     // default implementation is do nothing } {code}    However other frameworks also support another really useful hook: `aroundTransaction`.  This hook can be used to "wrap" a transaction execution into a block, and it's really useful to implement middleware-style coding patterns.  The signature and default implementation would be as following: {code:java} /** * * @param {Function} txn - The transaction function to execute. */ async aroundTransaction(txn, ...params) {     // default implementation return await txn(...params) } {code} This can then be overridden in contracts, for example to catch, log and rethrow exceptions at a global level: {code:java} async aroundTransaction(txn, ...params) {     try { return await txn(...params) } catch(error) { // catches the error and does some // processing before rethrowing, e.g. logging console.log(error) throw error } } {code}      ></description> </Issue>
