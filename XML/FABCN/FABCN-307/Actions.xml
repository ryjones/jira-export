<Action id="49902" issue="33346" author="nkl199" type="comment" body="Initial performance testing of submitTransaction() method within node sdk revealed a bottleneck to be resolved under Jira https://jira.hyperledger.org/browse/FABN-904" created="2018-09-05 14:59:22.0" updateauthor="nkl199" updated="2018-09-05 15:00:41.0"/>
<Action id="51500" issue="33346" author="nkl199" type="comment" created="2018-10-02 12:18:35.0" updateauthor="nkl199" updated="2018-10-02 12:18:35.0"> <body><! CDATA Performance testing (and code analysis through heatmaps) has been completed for both `submitTransaction()` and `executeTransaction()`.  Testing was completed using Caliper, and code contributions will be made when possible to the main Caliper repository on GitHub. This will enable 3rd parties to replicate test results, and to obtain their own.  ></body> </Action>
<Action id="54484" issue="33346" author="mbwhite" type="comment" created="2018-12-07 10:17:43.0" updateauthor="mbwhite" updated="2018-12-07 10:17:43.0"> <body><! CDATA  ~nkl199  is this complete?  I'd like to be able to run the caliper suite against the latest chaincode changes; pointers welcomed!  ></body> </Action>
<Action id="54564" issue="33346" author="nkl199" type="comment" created="2018-12-10 11:57:47.0" updateauthor="nkl199" updated="2018-12-10 14:58:19.0"> <body><! CDATA  ~mbwhite  - yes this is still current, and the only remaining item is node chaincode changes as the goLang changes have been tested (there was no observed difference in tps) .. lets prioritise the node work for resolution this week :D   ></body> </Action>
<Action id="54625" issue="33346" author="scottz" type="comment" created="2018-12-10 21:18:03.0" updateauthor="scottz" updated="2018-12-10 21:18:03.0"> <body><! CDATA That would be great,  ~nkl199 . So, can we expect a forecast date by Friday? I believe the RC1 is being created today already.  ></body> </Action>
<Action id="54872" issue="33346" author="mbwhite" type="comment" created="2018-12-17 15:44:55.0" updateauthor="mbwhite" updated="2018-12-17 15:44:55.0"> <body><! CDATA Using Appmetrics and the RC1 builds I've done an analysis of node.js chaincode.   The extra path length added by the chaincode-api routing is negligible compared to items such as GRPC Networking and Logging. It's on a par with the additional load that AppMetrics places on the test.  The most interesting/important observation is the time taken to perform creating a new ClientIdentity object. Parsing the x509 certs etc.. is a significant part of the time taken.  Creating a ClientIdentity object is to approximately 80% longer than a getState() api call.   Any chaincode that used the client identity object would get this extra cost; what's different is this is created for a every transaction call in the contract-api.    So everybody gets the cost vs only those that used it before get the cost.      The suggestion would be to make this a 'create-on-demand' rather than a per transaction call.   Note as well that the x509 library used is going to have to be replaced in v2.0 - as the current one is not compatible with Node 10.      The initial creation of the contract (when it is started by the shim) has the most codepath length increase; though this is a one time hit when the chaincode container starts; and is still a fraction of the time taken compared with the npm install and other container management that is taking place.   ></body> </Action>
<Action id="62760" issue="33346" author="scottz" type="comment" created="2019-08-09 14:10:53.0" updateauthor="scottz" updated="2019-08-09 14:10:53.0"> <body><! CDATA  ~nkl199  Is it appropriate to close this now? I would like to close this task and its epic.  ~mbwhite  Do you want to create an enhancement task to 'create-on-demand' rather than a per transaction call? Based on your testing and observations, are there any other followup tasks to be done, maybe for v2.0?   ></body> </Action>
