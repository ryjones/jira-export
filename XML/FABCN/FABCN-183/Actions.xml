<Action id="56847" issue="37574" author="awjh-ibm" type="comment" created="2019-02-11 14:17:10.0" updateauthor="awjh-ibm" updated="2019-02-11 14:17:10.0"> <body><! CDATA https://gerrit.hyperledger.org/r/#/c/29227/  https://gerrit.hyperledger.org/r/#/c/29228/  ></body> </Action>
<Action id="59790" issue="37574" author="awattez" type="comment" created="2019-05-07 09:49:25.0" updateauthor="awattez" updated="2019-05-07 09:57:38.0"> <body><! CDATA I try to use  @Property with an array of object and i have an error on start.  In my ParentObj.ts file i have this definition {code:java} import {ChildObj} frome './childobj'  @Property('files', 'Array<ChildObj>') public files: ChildObj  ; {code}    When i try to start my cc  {{fabric-chaincode-node start --peer.address localhost:7052 --chaincode-id-name mycc}}  I have the following error : {code:java} {  Error: can't resolve reference ChildObj from id ParentObj#  message: 'can\'t resolve reference ChildObj from id ParentObj#', missingRef: 'ChildObj', missingSchema: 'ChildObj' }{code} Can you help me ? I think this issue is link to this bogue  Thanks  ></body> </Action>
<Action id="59904" issue="37574" author="awattez" type="comment" created="2019-05-10 08:40:29.0" updateauthor="awattez" updated="2019-05-10 08:40:29.0"> <body><! CDATA It works when i have the childObj class definition in the same file as ParentObj.ts  I think there is a problem with the  import \{ChildObj} frome './childobj'  ></body> </Action>
<Action id="59905" issue="37574" author="awjh-ibm" type="comment" created="2019-05-10 08:53:54.0" updateauthor="awjh-ibm" updated="2019-05-10 08:56:59.0"> <body><! CDATA That sounds like an issue I have faced in typescript before. Although imported at the top of the file TypesScript when compiled to JavaScript doesn't require the file in the generated code. This is usually as the definition imported is being used solely for type definitions so TypeScript decides the import is unnecessary in the JavaScript code. As the file is not required in the running JavaScript the chaincode in the smart contract cannot generate metadata from it and as such it is missing and can't be referenced.  The solution around this is, as you have done, add the definition within a file definitely imported or to import the file directly: {code} import './childobj' {code}. In the second scenario you must also import is as you have already {code} import { ChildObj } from './childobj' {code} for the type definitions to be used.  ></body> </Action>
<Action id="71880" issue="37574" author="JIRAUSER22016" type="comment" created="2021-06-21 14:43:57.0" updateauthor="JIRAUSER22016" updated="2021-06-21 14:43:57.0"> <body><! CDATA In 2021 on Hyperledger Fabric 2.3.2, I found the above to be useful. For my specific case I was able to do the two includes as mentioned above. The Property did not seem to need the additional decorators.  This seems to work for me: {code:javascript} import './childobj'; import { ChildObj } from './childobj'  @Object() export class SomeOtherClass { @Property() public Children: Array<ChildObj>; } {code}  ></body> </Action>
