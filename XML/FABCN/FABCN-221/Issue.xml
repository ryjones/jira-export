<Issue id="40209" key="FABCN-221" number="221" project="11207" reporter="shimos" assignee="shimos" creator="shimos" type="10000" summary=" Document for CommonIterator.next() is not consistent with the behavior" priority="3" resolution="10000" status="6" created="2019-05-29 20:41:45.0" updated="2019-11-30 21:14:50.0" resolutiondate="2019-06-20 09:39:09.0" votes="0" watches="1" workflowId="57039"> <description><! CDATA The document for CommonIterator.next() states that bq. Get the next value and return it through a promise and also emit it if event listeners have been registered. and it returns bq. a promise that is fulfilled with the next value or is rejected otherwise  But emitting events is removed by FAB-15330, and the promise just resolves with an object { done: true } if there is no more value instead of rejecting. The sample code and output are shown below.  Sample code in chaincode:  {code} class SampleContract extends Contract { … async testIterator(ctx) { const iterator = await ctx.stub.getStateByRange("a", "b");  try { while (true) { const v = await iterator.next(); console.log(v); } } catch (e) { } } } {code}  Result (when testIterator is invoked):  {code} { value: { namespace: 'mycc', key: 'a1', value: ByteBuffer { buffer: <Buffer 0a 11 0a 0f 0a 04 6d 79 63 63 12 02 61 31 1a 03 31 30 30 0a 10 0a 0e 0a 04 6d 79 63 63 12 02 61 32 1a 02 35 30 1a 24 36 37 31 38 39 31 62 65 2d 32 65 ... >, offset: 16, markedOffset: -1, limit: 19, littleEndian: true, noAssert: false } }, done: false } { value: { namespace: 'mycc', key: 'a2', value: ByteBuffer { buffer: <Buffer 0a 11 0a 0f 0a 04 6d 79 63 63 12 02 61 31 1a 03 31 30 30 0a 10 0a 0e 0a 04 6d 79 63 63 12 02 61 32 1a 02 35 30 1a 24 36 37 31 38 39 31 62 65 2d 32 65 ... >, offset: 35, markedOffset: -1, limit: 37, littleEndian: true, noAssert: false } }, done: false } { done: true } { done: true } { done: true } … {code}   ></description> </Issue>
