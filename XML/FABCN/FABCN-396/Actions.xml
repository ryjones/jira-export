<Action id="69007" issue="44900" author="denyeart" type="comment" body=" ~varadatibm  the error message indicates node.js chaincode, while the title indicates Go chaincode. Can you clarify?" created="2020-04-22 03:13:24.0" updateauthor="denyeart" updated="2020-04-22 03:13:24.0"/>
<Action id="69013" issue="44900" author="varadatibm" type="comment" body=" ~denyeart  my bad! the chaincode was a nodejs chaincode... updated the issue..." created="2020-04-22 15:04:38.0" updateauthor="varadatibm" updated="2020-04-22 21:24:06.0"/>
<Action id="69014" issue="44900" author="denyeart" type="comment" created="2020-04-22 22:09:09.0" updateauthor="denyeart" updated="2020-04-22 22:09:09.0"> <body><! CDATA This issue will be used to track the node.js chaincode build issue.  A separate bug has been opened for the 'partial install' issue: https://jira.hyperledger.org/browse/FAB-17784  ></body> </Action>
<Action id="69017" issue="44900" author="mbwhite" type="comment" created="2020-04-23 08:46:08.0" updateauthor="mbwhite" updated="2020-04-23 08:46:08.0"> <body><! CDATA I would suspect that the issue here is that the version of the node modules used in that CDS are previous versions that don't build on node 12 (that is used in the Fabric 2.0 NodeEnv images).  To work with a Fabric 2.x, any 1.4 module must be at a minimum 1.4.5.  Would also recommend using Fabric 2.1 as that as an updated nodeenv image that uses a locked version of Node 12 (node 12.15.0)         fabric-contract-api@1.4.5  fabric-shim@1.4.5   ></body> </Action>
<Action id="69018" issue="44900" author="mbwhite" type="comment" created="2020-04-23 08:46:43.0" updateauthor="mbwhite" updated="2020-04-23 10:55:08.0"> <body><! CDATA -Can you double check the module versions in the chaincode please?-  I've been able to take the cds file apart... the package-lock.json is using the 1.4.0 version of the node.js contract modules; these need to be updated.   ></body> </Action>
<Action id="69020" issue="44900" author="denyeart" type="comment" created="2020-04-23 11:57:37.0" updateauthor="denyeart" updated="2020-04-23 11:57:37.0"> <body><! CDATA  ~mbwhite  A few questions...     1) I seem to be able to install fabric-samples release-1.4 fabcar chaincode to a v2.1 peer.  It ends up using fabric-contract-api 1.4.5. Why the difference between my results and Varad's?  2) Could Varad's problem be resolved by using the old chaincode runtime, e.g. setting {{CORE_CHAINCODE_NODE_RUNTIME}}=hyperledger/fabric-baseimage:0.4.18 ?  3) I think we'll want to document the user action to upgrade in a couple places:   https://hyperledger-fabric.readthedocs.io/en/latest/upgrade_to_newest_version.html    https://github.com/hyperledger/fabric-chaincode-node/releases/tag/v2.0.0      ></body> </Action>
<Action id="69021" issue="44900" author="mbwhite" type="comment" created="2020-04-23 12:22:24.0" updateauthor="mbwhite" updated="2020-04-23 12:22:24.0"> <body><! CDATA 1) it's the package-lock.json Varad has in the CDS - forcing the old node module to be used  2) Yes  3) agreed  ></body> </Action>
<Action id="69022" issue="44900" author="denyeart" type="comment" created="2020-04-23 14:10:23.0" updateauthor="denyeart" updated="2020-04-23 14:10:23.0"> <body><! CDATA  ~mbwhite   1) Ah, when I force it to use fabric-contract-api 1.4.5 it works. When I force it to use fabric-contract-api 1.4.0 I see the same problem as Varad.   2) Unfortunately {{CORE_CHAINCODE_NODE_RUNTIME}}=hyperledger/fabric-baseimage:0.4.18 doesn't fix it, since in v2.x Fabric uses a single image for the chaincode image basis and building (nodeenv), while in v1.x it was split between baseimage and ccenv. But {{CORE_CHAINCODE_NODE_RUNTIME}}=hyperledger/fabric-ccenv:1.4.6 appears to fix it.  3) So what do you recommend we document? Is it acceptable for people to use latest v1.4.x contract api on peer 2.x with nodeenv? Or should they shift to v2.x contract api?  ></body> </Action>
<Action id="69039" issue="44900" author="mbwhite" type="comment" created="2020-04-24 08:14:46.0" updateauthor="mbwhite" updated="2020-04-24 08:14:46.0"> <body><! CDATA The main issue is that the v2.x peer by default pulls in nodeenv that uses Node 12.x.  1.4.x contract-api can work happily here provided it's  1.4.5 or later.     ></body> </Action>
<Action id="69041" issue="44900" author="denyeart" type="comment" created="2020-04-24 12:46:26.0" updateauthor="denyeart" updated="2020-04-24 12:52:10.0"> <body><! CDATA Thanks  ~mbwhite  . Can you be more specific with exactly what you'd like to document.  Specifically, you say nodeenv by default uses Node 12.x. Does that imply that a different version of Node could be used?  The compatibility page at   https://github.com/hyperledger/fabric-chaincode-node/blob/master/COMPATIBILITY.md   mentions that Node 1.4 modules can be used with 2.x peer and supports both Node.js 8 and 12. But there is no indication that at least 1.4.5 contract api is required, or how you would choose a Node.js 8 runtime versus a Node.js 12 runtime.  {{CORE_CHAINCODE_NODE_RUNTIME}} is mentioned in concept, but it doesn't mention what value to set (e.g. nodeenv or ccenv at a specific version).  So I'd suggest let's use this Jira to first cleanup that compatibility page, and then figure out which information to highlight in the Fabric upgrade docs and node.js SDK release notes. I've re-opened as a Doc task and assigned to you for now but feel free to re-assign as needed.        ></body> </Action>
