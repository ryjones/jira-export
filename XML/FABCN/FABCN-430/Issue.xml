<Issue id="45821" key="FABCN-430" number="430" project="11207" reporter="shimos" assignee="shimos" creator="shimos" type="10004" summary="Wrong type definition for timestamp" priority="3" resolution="10000" status="6" created="2020-08-13 18:30:23.0" updated="2023-05-31 21:53:04.0" resolutiondate="2020-09-15 17:00:33.0" votes="0" watches="2" workflowId="59724" archived="N"> <description><! CDATA The {{second}} field in the {{Timestamp}} type is defined as {{number}} but is actually a {{Long}} instance because it is converted from a protobuf field which is defined in {{libraries/fabric-shim/google-protos/google/protobuf/timestamp.proto}} as follows:  {code} message Timestamp {  // Represents seconds of UTC time since Unix epoch // 1970-01-01T00:00:00Z. Must be from from 0001-01-01T00:00:00Z to // 9999-12-31T23:59:59Z inclusive. int64 seconds = 1;  // Non-negative fractions of a second at nanosecond resolution. Negative // second values with fractions must still have non-negative nanos values // that count forward in time. Must be from 0 to 999,999,999 // inclusive. int32 nanos = 2; } {code}  Therefore, currently the timestamp cannot be properly handled with a TypeScript chaincode.  For example, the following chaincode function (class omitted)  {code} async testTimestamp(ctx: Context): Promise<number> { const timestamp = ctx.stub.getTxTimestamp();  console.log(util.inspect(timestamp));  return timestamp.seconds; } {code}  prints {code} Timestamp { seconds: Long { low: 1597274278, high: 0, unsigned: false }, nanos: 717000000 } {code}  to the console, and returns   {code} {"low":1597274278,"high":0,"unsigned":false} {code}  instead of a simple number.   ></description> </Issue>
