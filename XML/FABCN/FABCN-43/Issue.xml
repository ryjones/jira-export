<Issue id="23901" key="FABCN-43" number="43" project="11207" reporter="jimthematrix" assignee="jimthematrix" creator="jimthematrix" type="10000" summary="Add encryption library to node.js chaincode" priority="3" resolution="10000" status="6" created="2017-11-09 21:51:52.0" updated="2019-11-30 21:14:03.0" resolutiondate="2017-11-21 18:21:05.0" votes="0" watches="1" workflowId="56861"> <description><! CDATA Goal is to enable encryption, decryption, signing and signature verification in chain code with simple code snippets like the following:  {code} // tests the encryption of state values async test11(stub, args) { // construct the encrypter, the stub is required to contain a transient map // with a key "encrypt-key", which will be used to encrypt the values let encrypter = new ChaincodeCrypto(stub); // 2nd arg has the new value to encrypt let ciphertext = encrypter.encrypt(Buffer.from(args 1 )); await stub.putState(args 0 , ciphertext); // 1st arg has the key }  // tests the descryption of state values async test12(stub, args) { // construct the decrypter, the stub is required to contain a transient map // with a key "encrypt-key", which will be used to decrypt the values let decrypter = new ChaincodeCrypto(stub); let ciphertext = await stub.getState(args 0 ); let value = decrypter.decrypt(ciphertext); }  // test the signing of state values async test13(stub, args) { // construct the signer, the stub is required to contain a transient map // with a key "sign-key", which will be used to sign the values let signer = new ChaincodeCrypto(stub); let signature = signer.sign(Buffer.from(args 1 )); let state = { signature: signature, value: args 1  };  await stub.putState(args 0 , Buffer.from(JSON.stringify(state))); }  // test signature verifying async test14(stub, args) { // construct the signer, the stub is required to contain a transient map // with a key "sign-key", which will be used to verify the signature with // the value let verifier = new ChaincodeCrypto(stub); let stateRaw = await stub.getState(args 0 ); let json = JSON.parse(stateRaw.toString()); // signature is originally a buffer let sig = Buffer.from(json.signature); let result = verifier.verify(sig, json.value); } {code}   ></description> </Issue>
