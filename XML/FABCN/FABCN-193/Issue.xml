<Issue id="38673" key="FABCN-193" number="193" project="11207" reporter="davidkel" creator="davidkel" type="10004" summary="type checking is done on the return type of a contract when metadata is defined." priority="2" resolution="10203" status="6" created="2019-03-22 10:08:03.0" updated="2020-02-04 12:51:27.0" resolutiondate="2020-02-04 12:51:27.0" votes="0" watches="5" workflowId="57425"> <description><! CDATA In the jsonserializer class, the toBuffer method is defined as follows  {code:java} toBuffer(result, schema = {}) {  // relay on the default algorithms, including for Buffers. Just retunring the buffer // is not helpful on inflation; is this a buffer in and of itself, or a buffer to inflated to JSON? if (result) { // check that schema to see exactly how we should de-marshall this if (schema.type && (schema.type === 'string' || schema.type === 'number')) { // ok so this is a basic primitive type, and for strings and numbers the wireprotocol is different // double check the type of the result passed in if (schema.type !== typeof result) { throw new Error(`Returned value is ${typeof result} does not match schema type of ${schema.type}`); } return Buffer.from(result.toString()); } else { const payload = JSON.stringify(result); return Buffer.from(payload); } } else { return; } } {code}  This shows that it is checking the type of object being returned is of the same name as the return type of the metadata.json.  I think this is very restrictive as it means the chaincode developer has to define a class of the return type in order to pass validation on the return and can't just return some POJO nor could they return a class that perhaps inherits from that type. If validation is to take place then it should match the method of validation that is used for input variables (ie it checks each of the properties to ensure it matches the correct data type (and does it recursively as required) Also this contract is for the receiver to understand what should be returned and the chaincode developer may not want validation to take place.  Due to another issue FAB-14722, this check is never done so actually has never been enforced. My suggestion is that the typeof code check should be removed for now for this jira.   I would like to see a validation mechanism where 1. We can be specific about which input values are validated or not 2. We can specify whether the return value is validated or not 3. We can control the depth of validation for complex objects (and also cope with cyclic issues) 4. We can define the concept of strict/non-strict validation which means either an object has to have the exact parameters or whether it is allowed to have extra parameters   ></description> </Issue>
