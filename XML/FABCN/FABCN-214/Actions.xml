<Action id="54682" issue="36074" author="denyeart" type="comment" body=" ~sykesm   ~mbwhite   ~sstone1  Any ideas on whether this could be improved easily?" created="2018-12-11 17:36:57.0" updateauthor="denyeart" updated="2018-12-11 17:36:57.0"/>
<Action id="54684" issue="36074" author="sykesm" type="comment" body="Regarding fix/version - edited the wrong JIRA." created="2018-12-11 18:08:40.0" updateauthor="sykesm" updated="2018-12-11 18:08:40.0"/>
<Action id="54715" issue="36074" author="mbwhite" type="comment" created="2018-12-12 14:10:50.0" updateauthor="mbwhite" updated="2018-12-12 14:14:46.0"> <body><! CDATA To confirm the scenario is that if there is a chaincode already instantiate with the same chaincode id - but with a different language the error message is poor ( quite bad )  How is the chaincode installed - if I recall then if I try and do a second `peer chaincode install` then an error occurs if I use the same name?     ></body> </Action>
<Action id="54730" issue="36074" author="denyeart" type="comment" body="I did some trials with other error scenarios and they behaved better with good error messages, so I will lower to Medium and defer to v2.0.0." created="2018-12-12 16:30:47.0" updateauthor="denyeart" updated="2018-12-12 16:30:47.0"/>
<Action id="54731" issue="36074" author="sykesm" type="comment" created="2018-12-12 17:08:10.0" updateauthor="sykesm" updated="2018-12-12 17:08:10.0"> <body><! CDATA Everything about chaincode install, instantiate, and execution needs to be redesigned. This is one of the things that I hope to get some focus on over the next 6 months.  Given what's been described, since we have an existing image on this peer that matches the chaincode name and version, the build and deploy are skipped and we go right to starting the container. Since the container start arguments are different between node and go, I'm going to assume (there are no logs) that the start command failed. (If the peer were configured to attach to the container after start we'd likely see some logs.)  The existing code, after start, doesn't do anything to monitor the container; it simply waits for the chaincode to register with the peer. My guess is that with the start command failing, and nothing waiting for the container to exit, the registration never occurs and the launch timeout hits.  If code were present to wait on the container, it would likely have detected the start command failure earlier and resulted in an error.  ></body> </Action>
<Action id="56088" issue="36074" author="mbwhite" type="comment" created="2019-01-23 10:02:49.0" updateauthor="mbwhite" updated="2019-01-23 10:02:49.0"> <body><! CDATA  ~sykesm   ~denyeart   To resolve this issue then.. version 2.0.0 lifecycle changes will resolve this issue.   Is there any resolution required within the v1.4.0 timeframe? Or is it sufficient in your view to marked this as 'fixed-next-release'?  ></body> </Action>
<Action id="56238" issue="36074" author="denyeart" type="comment" body=" ~mbwhite  I think it is sufficient to fix in a next release." created="2019-01-28 04:20:34.0" updateauthor="denyeart" updated="2019-01-28 04:20:34.0"/>
<Action id="56649" issue="36074" author="sykesm" type="comment" created="2019-02-04 16:39:49.0" updateauthor="sykesm" updated="2019-02-04 16:39:49.0"> <body><! CDATA For the person that picks this up, the when a chaincode container fails to start, we want to release waiters with information that clearly indicates the chaincode failed to start.  We do not want to propagate all of the error information (e.g. the client shouldn't see something like "command not found" in the eorror) but we do want to log it clearly in the peer.  ></body> </Action>
<Action id="56959" issue="36074" author="mbwhite" type="comment" body=" ~skarim  happy to review if you wish" created="2019-02-13 10:00:40.0" updateauthor="mbwhite" updated="2019-02-13 10:00:40.0"/>
<Action id="57010" issue="36074" author="skarim" type="comment" body=" ~sykesm  As we had discussed, due to other priorities I had to shift focus from there. I am setting this as unassigned, as I won&apos;t be able to get to it in the next few days. From our earlier discussions, I have created the exit channel that is written to when the container stops. I was trying to pass this channel back up to runtime launcher and detect there if the container failed to start. Please see WIP commit: https://gerrit.hyperledger.org/r/c/29296/" created="2019-02-14 01:21:37.0" updateauthor="skarim" updated="2019-02-14 01:21:37.0"/>
<Action id="57338" issue="36074" author="sykesm" type="comment" created="2019-02-20 04:20:44.0" updateauthor="sykesm" updated="2019-02-20 04:20:44.0"> <body><! CDATA remote: New Changes: remote:   https://gerrit.hyperledger.org/r/29395  FAB-13238  regen core/{chaincode,container} mocks remote:   https://gerrit.hyperledger.org/r/29396  FAB-14257  mutex around inproccontroller maps remote:   https://gerrit.hyperledger.org/r/29397  FAB-13238  handle container exit during launch  ></body> </Action>
