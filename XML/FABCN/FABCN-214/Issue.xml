<Issue id="36074" key="FABCN-214" number="214" project="11207" reporter="denyeart" assignee="sykesm" creator="denyeart" type="10000" summary="Node.js chaincode instantiate problems timeout after 5 minutes rather than returning an error message" priority="3" resolution="10000" status="6" created="2018-12-11 17:24:42.0" updated="2019-11-30 21:14:47.0" resolutiondate="2019-02-26 23:02:56.0" votes="1" watches="5" workflowId="57032"> <description><! CDATA See reproduction steps.  Chaincode instantiate of javascript chaincode fails with error: {code:java} Error: could not assemble transaction, err proposal response was not successful, error code 500, msg timeout expired while starting chaincode fabcar:1.0 for transaction {code} The root cause is a prior golang image existing, but nothing in the error indicates this.  If we enable debug we can get some more information, but still no indication of root cause: {code:java} 2018-12-11 17:17:12.593 UTC  chaincode  Launch -> DEBU 808 stopping due to error while launching: timeout expired while starting chaincode fabcar:1.0 for transaction github.com/hyperledger/fabric/core/chaincode.(*RuntimeLauncher).Launch 	/opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/runtime_launcher.go:71 github.com/hyperledger/fabric/core/chaincode.(*ChaincodeSupport).LaunchInit 	/opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/chaincode_support.go:129 github.com/hyperledger/fabric/core/chaincode.(*ChaincodeSupport).ExecuteLegacyInit 	/opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/chaincode_support.go:221 github.com/hyperledger/fabric/core/endorser.(*SupportImpl).ExecuteLegacyInit 	/opt/gopath/src/github.com/hyperledger/fabric/core/endorser/support.go:131 github.com/hyperledger/fabric/core/endorser.(*Endorser).callChaincode 	/opt/gopath/src/github.com/hyperledger/fabric/core/endorser/endorser.go:179 github.com/hyperledger/fabric/core/endorser.(*Endorser).SimulateProposal 	/opt/gopath/src/github.com/hyperledger/fabric/core/endorser/endorser.go:237 github.com/hyperledger/fabric/core/endorser.(*Endorser).ProcessProposal ... 2018-12-11 17:17:12.593 UTC  container  lockContainer -> DEBU 809 waiting for container(fabcar-1.0) lock 2018-12-11 17:17:12.593 UTC  container  lockContainer -> DEBU 80a got container (fabcar-1.0) lock 2018-12-11 17:17:12.594 UTC  dockercontroller  stopInternal -> DEBU 80b stopping container {"id": "dev-peer0.org1.example.com-fabcar-1.0"} 2018-12-11 17:17:12.596 UTC  dockercontroller  stopInternal -> DEBU 80c stop container result {"error": "Container not running: dev-peer0.org1.example.com-fabcar-1.0"} 2018-12-11 17:17:12.596 UTC  dockercontroller  stopInternal -> DEBU 80d killing container {"id": "dev-peer0.org1.example.com-fabcar-1.0"} 2018-12-11 17:17:12.597 UTC  dockercontroller  stopInternal -> DEBU 80e kill container result {"id": "dev-peer0.org1.example.com-fabcar-1.0", "error": "Container not running: dev-peer0.org1.example.com-fabcar-1.0"} 2018-12-11 17:17:12.597 UTC  dockercontroller  stopInternal -> DEBU 80f removing container {"id": "dev-peer0.org1.example.com-fabcar-1.0"} 2018-12-11 17:17:12.606 UTC  dockercontroller  stopInternal -> DEBU 810 remove container result {"id": "dev-peer0.org1.example.com-fabcar-1.0", "error": null} 2018-12-11 17:17:12.606 UTC  container  unlockContainer -> DEBU 811 container lock deleted(fabcar-1.0) 2018-12-11 17:17:12.606 UTC  chaincode  Launch -> DEBU 812 launch complete 2018-12-11 17:17:12.606 UTC  chaincode  Deregister -> DEBU 813 deregister handler: fabcar:1.0 2018-12-11 17:17:12.606 UTC  endorser  callChaincode -> INFO 814  mychannel  de30817f  Exit chaincode: name:"lscc"  (300018ms) 2018-12-11 17:17:12.606 UTC  endorser  SimulateProposal -> ERRO 815  mychannel  de30817f  failed to invoke chaincode name:"lscc" , error: timeout expired while starting chaincode fabcar:1.0 for transaction github.com/hyperledger/fabric/core/chaincode.(*RuntimeLauncher).Launch 	/opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/runtime_launcher.go:71 github.com/hyperledger/fabric/core/chaincode.(*ChaincodeSupport).LaunchInit 	/opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/chaincode_support.go:129 github.com/hyperledger/fabric/core/chaincode.(*ChaincodeSupport).ExecuteLegacyInit 	/opt/gopath/src/github.com/hyperledger/fabric/core/chaincode/chaincode_support.go:221 github.com/hyperledger/fabric/core/endorser.(*SupportImpl).ExecuteLegacyInit 	/opt/gopath/src/github.com/hyperledger/fabric/core/endorser/support.go:131 github.com/hyperledger/fabric/core/endorser.(*Endorser).callChaincode 	/opt/gopath/src/github.com/hyperledger/fabric/core/endorser/endorser.go:179 github.com/hyperledger/fabric/core/endorser.(*Endorser).SimulateProposal 	/opt/gopath/src/github.com/hyperledger/fabric/core/endorser/endorser.go:237 github.com/hyperledger/fabric/core/endorser.(*Endorser).ProcessProposal ... {code} Opening as High since a failure with no information is a blocker to users and support personnel. An actionable error message is required. Not to mention the 5 minute timeout between user action and response adds to the confusion and frustration about what is going on. My objective here is to *fix the general error handling approach for node.js chaincode instantiation failures*, not necessarily this specific failure scenario.  Note that if we run node.js chaincode first, and then go chaincode second, we get an immediate error: {code:java} Error: could not assemble transaction, err proposal response was not successful, error code 500, msg error starting container: error starting container: API error (400): OCI runtime create failed: container_linux.go:348: starting container process caused "exec: \"chaincode\": executable file not found in $PATH": unknown{code} This error is not great, but better than the timeout error with node.js chaincode. I therefore recommend we focus on the node.js chaincode scenario first.  ></description> </Issue>
