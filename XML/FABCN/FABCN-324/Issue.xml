<Issue id="20252" key="FABCN-324" number="324" project="11207" reporter="jimthematrix" assignee="jimthematrix" creator="jimthematrix" type="10003" summary="Upgrade node.js chaincode engine to v8" priority="3" resolution="10000" status="6" created="2017-08-17 16:11:28.0" updated="2019-11-30 21:15:15.0" resolutiondate="2017-08-25 16:29:21.0" votes="0" watches="1" timeoriginalestimate="86400" timeestimate="0" timespent="86400" workflowId="39777"> <description><! CDATA among other things, v8 introduced native "async" and "await" support that transforms messy Promise-based source code like this: {code} Invoke(stub) { 	let ret = stub.getFunctionAndParameters();  	return stub.getState('dummyKey') 	.then((value) => { 		if (value.toString() === 'dummyValue') { 			return stub.success(); 		} else { 			console.error('Failed to retrieve dummyKey or the retrieved value is not expected: ' + value); 			return shim.error(); 		} 	} } {code} to this: {code} Invoke(stub) { 	let ret = stub.getFunctionAndParameters();  	let value = await stub.getState('dummyKey'); 	if (value.toString() === 'dummyValue') { 		return stub.success(); 	} else { 		console.error('Failed to retrieve dummyKey or the retrieved value is not expected: ' + value); 		return shim.error(); 	} } {code}  There's also performance benefits due to "Ignition" (interpreter) and "Turbofan" (JIT compiler).  Note that node 8 does not enter LTS (Long-Term Service) status until October (exact date to be determined), but we have obtained agreement from node.js engine committers for support on possible bug fixes during the interim. Thus we felt it's appropriate to introduce the node.js chaincode feature directly on top of node 8 rather than 6.x.  For developers who are writing both chaincode and client applications with the node.js SDK, although the node.js SDK may still be stuck on 6.x for official support (pending further discussions), the good news is that node 8 has excellent backward compatibility, so they should be able to continue to write both code for app and chaincode under node 8 and test. As long as they don't accidentally introduce language features that are not supported by 6.x in the client app, they should be fine.  ></description> </Issue>
