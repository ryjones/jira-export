<Issue id="14543" key="FABCT-10" number="10" project="10609" reporter="greg.haskins" assignee="greg.haskins" creator="greg.haskins" type="10004" summary="Example02 BalanceResult protobuf encode/decode crash" priority="5" status="10000" created="2017-02-04 14:05:18.0" updated="2018-07-18 23:33:24.0" votes="0" watches="3" workflowId="32762"> <description><! CDATA h1. Issue  Creating an account with a balance of 0, by init or by transaction, results in a crash when attempting to query the balance.  ``` $ node ./out/example02.js -c deploy -n org.hyperledger.chaincode.example02 --port 5000 --args '{"partyA":{"entity":"a", "value":100}, "partyB":{"entity":"b", "value":0}}' Running deploy({"partyA":{"entity":"a","value":100},"partyB":{"entity":"b","value":0}}) HTTP POST: http://localhost:5000 - {"jsonrpc":"2.0","method":"deploy","params":{"type":3,"chaincodeID":{"name":"org.hyperledger.chaincode.example02"},"ctorMsg":{"function":"init","args": "CgUKAWEQZBIDCgFi" }},"id":"1"} Response: {:result {:status OK, :message org.hyperledger.chaincode.example02}} $ node ./out/example02.js -n org.hyperledger.chaincode.example02 --port 5000 -c check-balance --args '{"id":"b"}' Running check-balance({"id":"b"}) HTTP POST: http://localhost:5000 - {"jsonrpc":"2.0","method":"query","params":{"type":3,"chaincodeID":{"name":"org.hyperledger.chaincode.example02"},"ctorMsg":{"function":"org.hyperledger.chaincode.example02/query/1","args": "CgFi" }},"id":"1"}  /LSEG/chaintool/examples/example02/client/rest/cljs/node_modules/protobufjs/node_modules/bytebuffer/dist/bytebuffer-node.js:346 throw TypeError("Illegal buffer"); ^ TypeError: Illegal buffer at TypeError (native) at Function.module.exports.ByteBuffer.wrap (/LSEG/chaintool/examples/example02/client/rest/cljs/node_modules/protobufjs/node_modules/bytebuffer/dist/bytebuffer-node.js:346:19) at Function.Message.decode (/LSEG/chaintool/examples/example02/client/rest/cljs/node_modules/protobufjs/dist/protobuf.js:2930:84) at Message.decode64 (/LSEG/chaintool/examples/example02/client/rest/cljs/node_modules/protobufjs/dist/protobuf.js:2986:36) at /LSEG/chaintool/examples/example02/client/rest/cljs/out/example02/core.cljs:40:69 at IncomingMessage.<anonymous> (/LSEG/chaintool/examples/example02/client/rest/cljs/out/example02/rpc.cljs:13:25) at IncomingMessage.emit (events.js:107:17) at IncomingMessage.Readable.read (_stream_readable.js:373:10) at flow (_stream_readable.js:750:26) at resume_ (_stream_readable.js:730:3) ``` h1. Discussion:  About the 0 balance issue @jranz303 found, it seems to be a base64 encoding/decoding issue. When I try to initialize with a zero balance, for example: `{"partyA":{"entity":"a", "value":100}, "partyB":{"entity":"b", "value":0}}`, the base64 encoded args are: `CgUKAWEQZBIDCgFi` When I decode that, I get something like:  ```  ad b ```  The d corresponds to ASCII value 100, which seems like an odd way to encode it but that’s what appears to be happening. ASCII 0 is NULL, so I think what’s happening is on decoding, ByteBuffer is hitting this line for account b’s amount:  ``` if (buffer === null || typeof buffer !== 'object') throw TypeError("Illegal buffer”); ```  ---  interesting what should be happening is a clean pipeline from protobuf->binary->base64 and back out again my guess is protobuf elided the entire message structure when the value of zero was presented what was the base64 in the case of 0?  ---  I’m not exactly sure. Args: `{"partyA":{"entity":"a", "value":100}}` Base64: `CgUKAWEQZA==`  Args: `{"partyA":{"entity":"a", "value":0}}` Base64: `CgMKAWE=`  ---  my guess is whats happening here is something along the lines of `protobuf.encode(BalanceResult{0 ).len == 0` and `base64(null) -> decode64` breaks somewhere   ></description> </Issue>
